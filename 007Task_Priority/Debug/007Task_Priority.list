
007Task_Priority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08007254  08007254  00017254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073ac  080073ac  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080073ac  080073ac  000173ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073b4  080073b4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073b4  080073b4  000173b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073b8  080073b8  000173b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080073bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00014494  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200144a8  200144a8  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a22e  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000346e  00000000  00000000  0003a272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001368  00000000  00000000  0003d6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011e0  00000000  00000000  0003ea48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023db9  00000000  00000000  0003fc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015940  00000000  00000000  000639e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d82ce  00000000  00000000  00079321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001515ef  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000050f8  00000000  00000000  00151644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800723c 	.word	0x0800723c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	0800723c 	.word	0x0800723c

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20014400 	.word	0x20014400

08000264 <strlen>:
 8000264:	4603      	mov	r3, r0
 8000266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800026a:	2a00      	cmp	r2, #0
 800026c:	d1fb      	bne.n	8000266 <strlen+0x2>
 800026e:	1a18      	subs	r0, r3, r0
 8000270:	3801      	subs	r0, #1
 8000272:	4770      	bx	lr

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b96e 	b.w	8000568 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	468c      	mov	ip, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	f040 8083 	bne.w	80003ba <__udivmoddi4+0x116>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	4617      	mov	r7, r2
 80002b8:	d947      	bls.n	800034a <__udivmoddi4+0xa6>
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	b142      	cbz	r2, 80002d2 <__udivmoddi4+0x2e>
 80002c0:	f1c2 0020 	rsb	r0, r2, #32
 80002c4:	fa24 f000 	lsr.w	r0, r4, r0
 80002c8:	4091      	lsls	r1, r2
 80002ca:	4097      	lsls	r7, r2
 80002cc:	ea40 0c01 	orr.w	ip, r0, r1
 80002d0:	4094      	lsls	r4, r2
 80002d2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d6:	0c23      	lsrs	r3, r4, #16
 80002d8:	fbbc f6f8 	udiv	r6, ip, r8
 80002dc:	fa1f fe87 	uxth.w	lr, r7
 80002e0:	fb08 c116 	mls	r1, r8, r6, ip
 80002e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e8:	fb06 f10e 	mul.w	r1, r6, lr
 80002ec:	4299      	cmp	r1, r3
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x60>
 80002f0:	18fb      	adds	r3, r7, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 8119 	bcs.w	800052c <__udivmoddi4+0x288>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 8116 	bls.w	800052c <__udivmoddi4+0x288>
 8000300:	3e02      	subs	r6, #2
 8000302:	443b      	add	r3, r7
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 fe0e 	mul.w	lr, r0, lr
 8000318:	45a6      	cmp	lr, r4
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x8c>
 800031c:	193c      	adds	r4, r7, r4
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000322:	f080 8105 	bcs.w	8000530 <__udivmoddi4+0x28c>
 8000326:	45a6      	cmp	lr, r4
 8000328:	f240 8102 	bls.w	8000530 <__udivmoddi4+0x28c>
 800032c:	3802      	subs	r0, #2
 800032e:	443c      	add	r4, r7
 8000330:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000334:	eba4 040e 	sub.w	r4, r4, lr
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa0>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xaa>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	2a00      	cmp	r2, #0
 8000354:	d150      	bne.n	80003f8 <__udivmoddi4+0x154>
 8000356:	1bcb      	subs	r3, r1, r7
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	fa1f f887 	uxth.w	r8, r7
 8000360:	2601      	movs	r6, #1
 8000362:	fbb3 fcfe 	udiv	ip, r3, lr
 8000366:	0c21      	lsrs	r1, r4, #16
 8000368:	fb0e 331c 	mls	r3, lr, ip, r3
 800036c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000370:	fb08 f30c 	mul.w	r3, r8, ip
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xe4>
 8000378:	1879      	adds	r1, r7, r1
 800037a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0xe2>
 8000380:	428b      	cmp	r3, r1
 8000382:	f200 80e9 	bhi.w	8000558 <__udivmoddi4+0x2b4>
 8000386:	4684      	mov	ip, r0
 8000388:	1ac9      	subs	r1, r1, r3
 800038a:	b2a3      	uxth	r3, r4
 800038c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000390:	fb0e 1110 	mls	r1, lr, r0, r1
 8000394:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000398:	fb08 f800 	mul.w	r8, r8, r0
 800039c:	45a0      	cmp	r8, r4
 800039e:	d907      	bls.n	80003b0 <__udivmoddi4+0x10c>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x10a>
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	f200 80d9 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 80003ae:	4618      	mov	r0, r3
 80003b0:	eba4 0408 	sub.w	r4, r4, r8
 80003b4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b8:	e7bf      	b.n	800033a <__udivmoddi4+0x96>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0x12e>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80b1 	beq.w	8000526 <__udivmoddi4+0x282>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x1cc>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0x140>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80b8 	bhi.w	8000554 <__udivmoddi4+0x2b0>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0103 	sbc.w	r1, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	468c      	mov	ip, r1
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0a8      	beq.n	8000344 <__udivmoddi4+0xa0>
 80003f2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f6:	e7a5      	b.n	8000344 <__udivmoddi4+0xa0>
 80003f8:	f1c2 0320 	rsb	r3, r2, #32
 80003fc:	fa20 f603 	lsr.w	r6, r0, r3
 8000400:	4097      	lsls	r7, r2
 8000402:	fa01 f002 	lsl.w	r0, r1, r2
 8000406:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800040a:	40d9      	lsrs	r1, r3
 800040c:	4330      	orrs	r0, r6
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	fbb1 f6fe 	udiv	r6, r1, lr
 8000414:	fa1f f887 	uxth.w	r8, r7
 8000418:	fb0e 1116 	mls	r1, lr, r6, r1
 800041c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000420:	fb06 f108 	mul.w	r1, r6, r8
 8000424:	4299      	cmp	r1, r3
 8000426:	fa04 f402 	lsl.w	r4, r4, r2
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x19c>
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000432:	f080 808d 	bcs.w	8000550 <__udivmoddi4+0x2ac>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 808a 	bls.w	8000550 <__udivmoddi4+0x2ac>
 800043c:	3e02      	subs	r6, #2
 800043e:	443b      	add	r3, r7
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b281      	uxth	r1, r0
 8000444:	fbb3 f0fe 	udiv	r0, r3, lr
 8000448:	fb0e 3310 	mls	r3, lr, r0, r3
 800044c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000450:	fb00 f308 	mul.w	r3, r0, r8
 8000454:	428b      	cmp	r3, r1
 8000456:	d907      	bls.n	8000468 <__udivmoddi4+0x1c4>
 8000458:	1879      	adds	r1, r7, r1
 800045a:	f100 3cff 	add.w	ip, r0, #4294967295
 800045e:	d273      	bcs.n	8000548 <__udivmoddi4+0x2a4>
 8000460:	428b      	cmp	r3, r1
 8000462:	d971      	bls.n	8000548 <__udivmoddi4+0x2a4>
 8000464:	3802      	subs	r0, #2
 8000466:	4439      	add	r1, r7
 8000468:	1acb      	subs	r3, r1, r3
 800046a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046e:	e778      	b.n	8000362 <__udivmoddi4+0xbe>
 8000470:	f1c6 0c20 	rsb	ip, r6, #32
 8000474:	fa03 f406 	lsl.w	r4, r3, r6
 8000478:	fa22 f30c 	lsr.w	r3, r2, ip
 800047c:	431c      	orrs	r4, r3
 800047e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800048a:	fa21 f10c 	lsr.w	r1, r1, ip
 800048e:	431f      	orrs	r7, r3
 8000490:	0c3b      	lsrs	r3, r7, #16
 8000492:	fbb1 f9fe 	udiv	r9, r1, lr
 8000496:	fa1f f884 	uxth.w	r8, r4
 800049a:	fb0e 1119 	mls	r1, lr, r9, r1
 800049e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004a2:	fb09 fa08 	mul.w	sl, r9, r8
 80004a6:	458a      	cmp	sl, r1
 80004a8:	fa02 f206 	lsl.w	r2, r2, r6
 80004ac:	fa00 f306 	lsl.w	r3, r0, r6
 80004b0:	d908      	bls.n	80004c4 <__udivmoddi4+0x220>
 80004b2:	1861      	adds	r1, r4, r1
 80004b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b8:	d248      	bcs.n	800054c <__udivmoddi4+0x2a8>
 80004ba:	458a      	cmp	sl, r1
 80004bc:	d946      	bls.n	800054c <__udivmoddi4+0x2a8>
 80004be:	f1a9 0902 	sub.w	r9, r9, #2
 80004c2:	4421      	add	r1, r4
 80004c4:	eba1 010a 	sub.w	r1, r1, sl
 80004c8:	b2bf      	uxth	r7, r7
 80004ca:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ce:	fb0e 1110 	mls	r1, lr, r0, r1
 80004d2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d6:	fb00 f808 	mul.w	r8, r0, r8
 80004da:	45b8      	cmp	r8, r7
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x24a>
 80004de:	19e7      	adds	r7, r4, r7
 80004e0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e4:	d22e      	bcs.n	8000544 <__udivmoddi4+0x2a0>
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d92c      	bls.n	8000544 <__udivmoddi4+0x2a0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4427      	add	r7, r4
 80004ee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004f2:	eba7 0708 	sub.w	r7, r7, r8
 80004f6:	fba0 8902 	umull	r8, r9, r0, r2
 80004fa:	454f      	cmp	r7, r9
 80004fc:	46c6      	mov	lr, r8
 80004fe:	4649      	mov	r1, r9
 8000500:	d31a      	bcc.n	8000538 <__udivmoddi4+0x294>
 8000502:	d017      	beq.n	8000534 <__udivmoddi4+0x290>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x27a>
 8000506:	ebb3 020e 	subs.w	r2, r3, lr
 800050a:	eb67 0701 	sbc.w	r7, r7, r1
 800050e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000512:	40f2      	lsrs	r2, r6
 8000514:	ea4c 0202 	orr.w	r2, ip, r2
 8000518:	40f7      	lsrs	r7, r6
 800051a:	e9c5 2700 	strd	r2, r7, [r5]
 800051e:	2600      	movs	r6, #0
 8000520:	4631      	mov	r1, r6
 8000522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e70b      	b.n	8000344 <__udivmoddi4+0xa0>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e9      	b.n	8000304 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fd      	b.n	8000330 <__udivmoddi4+0x8c>
 8000534:	4543      	cmp	r3, r8
 8000536:	d2e5      	bcs.n	8000504 <__udivmoddi4+0x260>
 8000538:	ebb8 0e02 	subs.w	lr, r8, r2
 800053c:	eb69 0104 	sbc.w	r1, r9, r4
 8000540:	3801      	subs	r0, #1
 8000542:	e7df      	b.n	8000504 <__udivmoddi4+0x260>
 8000544:	4608      	mov	r0, r1
 8000546:	e7d2      	b.n	80004ee <__udivmoddi4+0x24a>
 8000548:	4660      	mov	r0, ip
 800054a:	e78d      	b.n	8000468 <__udivmoddi4+0x1c4>
 800054c:	4681      	mov	r9, r0
 800054e:	e7b9      	b.n	80004c4 <__udivmoddi4+0x220>
 8000550:	4666      	mov	r6, ip
 8000552:	e775      	b.n	8000440 <__udivmoddi4+0x19c>
 8000554:	4630      	mov	r0, r6
 8000556:	e74a      	b.n	80003ee <__udivmoddi4+0x14a>
 8000558:	f1ac 0c02 	sub.w	ip, ip, #2
 800055c:	4439      	add	r1, r7
 800055e:	e713      	b.n	8000388 <__udivmoddi4+0xe4>
 8000560:	3802      	subs	r0, #2
 8000562:	443c      	add	r4, r7
 8000564:	e724      	b.n	80003b0 <__udivmoddi4+0x10c>
 8000566:	bf00      	nop

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000572:	f000 fba1 	bl	8000cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000576:	f000 f84d 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057a:	f000 f8b5 	bl	80006e8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //Enable the CYCCNT counter
  DWT_CTRL |= (1<<0);
 800057e:	4b20      	ldr	r3, [pc, #128]	; (8000600 <main+0x94>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a1f      	ldr	r2, [pc, #124]	; (8000600 <main+0x94>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6013      	str	r3, [r2, #0]

 // SEGGER_UART_init(500000);

	SEGGER_SYSVIEW_Conf();
 800058a:	f006 fdf9 	bl	8007180 <SEGGER_SYSVIEW_Conf>

	 SEGGER_SYSVIEW_Start();  //this line is there in segger_uart.c under segger->config->Rec
 800058e:	f006 f807 	bl	80065a0 <SEGGER_SYSVIEW_Start>

	status=xTaskCreate(task1_handler, "Task-1", 200, NULL, 2, &task1_handle);
 8000592:	f107 0308 	add.w	r3, r7, #8
 8000596:	9301      	str	r3, [sp, #4]
 8000598:	2302      	movs	r3, #2
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	2300      	movs	r3, #0
 800059e:	22c8      	movs	r2, #200	; 0xc8
 80005a0:	4918      	ldr	r1, [pc, #96]	; (8000604 <main+0x98>)
 80005a2:	4819      	ldr	r0, [pc, #100]	; (8000608 <main+0x9c>)
 80005a4:	f002 fc12 	bl	8002dcc <xTaskCreate>
 80005a8:	6178      	str	r0, [r7, #20]

	configASSERT(status == pdPASS);
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d00a      	beq.n	80005c6 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b4:	f383 8811 	msr	BASEPRI, r3
 80005b8:	f3bf 8f6f 	isb	sy
 80005bc:	f3bf 8f4f 	dsb	sy
 80005c0:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005c2:	bf00      	nop
 80005c4:	e7fe      	b.n	80005c4 <main+0x58>


	status=xTaskCreate(task2_handler, "Task-2", 200, NULL, 3, &task2_handle);
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2303      	movs	r3, #3
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	22c8      	movs	r2, #200	; 0xc8
 80005d2:	490e      	ldr	r1, [pc, #56]	; (800060c <main+0xa0>)
 80005d4:	480e      	ldr	r0, [pc, #56]	; (8000610 <main+0xa4>)
 80005d6:	f002 fbf9 	bl	8002dcc <xTaskCreate>
 80005da:	6178      	str	r0, [r7, #20]

	configASSERT(status == pdPASS);
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d00a      	beq.n	80005f8 <main+0x8c>
        __asm volatile
 80005e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e6:	f383 8811 	msr	BASEPRI, r3
 80005ea:	f3bf 8f6f 	isb	sy
 80005ee:	f3bf 8f4f 	dsb	sy
 80005f2:	60fb      	str	r3, [r7, #12]
    }
 80005f4:	bf00      	nop
 80005f6:	e7fe      	b.n	80005f6 <main+0x8a>


	//start the freeRTOS scheduler
	vTaskStartScheduler();
 80005f8:	f002 fe26 	bl	8003248 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <main+0x90>
 80005fe:	bf00      	nop
 8000600:	e0001000 	.word	0xe0001000
 8000604:	08007254 	.word	0x08007254
 8000608:	080009d1 	.word	0x080009d1
 800060c:	0800725c 	.word	0x0800725c
 8000610:	080009fd 	.word	0x080009fd

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	; 0x50
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	2230      	movs	r2, #48	; 0x30
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f006 fe02 	bl	800722c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <SystemClock_Config+0xcc>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	4a27      	ldr	r2, [pc, #156]	; (80006e0 <SystemClock_Config+0xcc>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	; 0x40
 8000648:	4b25      	ldr	r3, [pc, #148]	; (80006e0 <SystemClock_Config+0xcc>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <SystemClock_Config+0xd0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a21      	ldr	r2, [pc, #132]	; (80006e4 <SystemClock_Config+0xd0>)
 800065e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <SystemClock_Config+0xd0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000670:	2302      	movs	r3, #2
 8000672:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000674:	2301      	movs	r3, #1
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000678:	2310      	movs	r3, #16
 800067a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067c:	2302      	movs	r3, #2
 800067e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000680:	2300      	movs	r3, #0
 8000682:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000684:	2308      	movs	r3, #8
 8000686:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000688:	23a8      	movs	r3, #168	; 0xa8
 800068a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068c:	2302      	movs	r3, #2
 800068e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000690:	2307      	movs	r3, #7
 8000692:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 0320 	add.w	r3, r7, #32
 8000698:	4618      	mov	r0, r3
 800069a:	f000 fe49 	bl	8001330 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a4:	f000 fa1a 	bl	8000adc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	230f      	movs	r3, #15
 80006aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ac:	2302      	movs	r3, #2
 80006ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2105      	movs	r1, #5
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 f8aa 	bl	8001820 <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006d2:	f000 fa03 	bl	8000adc <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3750      	adds	r7, #80	; 0x50
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08c      	sub	sp, #48	; 0x30
 80006ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	61bb      	str	r3, [r7, #24]
 8000702:	4ba6      	ldr	r3, [pc, #664]	; (800099c <MX_GPIO_Init+0x2b4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4aa5      	ldr	r2, [pc, #660]	; (800099c <MX_GPIO_Init+0x2b4>)
 8000708:	f043 0310 	orr.w	r3, r3, #16
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4ba3      	ldr	r3, [pc, #652]	; (800099c <MX_GPIO_Init+0x2b4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0310 	and.w	r3, r3, #16
 8000716:	61bb      	str	r3, [r7, #24]
 8000718:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
 800071e:	4b9f      	ldr	r3, [pc, #636]	; (800099c <MX_GPIO_Init+0x2b4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a9e      	ldr	r2, [pc, #632]	; (800099c <MX_GPIO_Init+0x2b4>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b9c      	ldr	r3, [pc, #624]	; (800099c <MX_GPIO_Init+0x2b4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	617b      	str	r3, [r7, #20]
 8000734:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
 800073a:	4b98      	ldr	r3, [pc, #608]	; (800099c <MX_GPIO_Init+0x2b4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a97      	ldr	r2, [pc, #604]	; (800099c <MX_GPIO_Init+0x2b4>)
 8000740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b95      	ldr	r3, [pc, #596]	; (800099c <MX_GPIO_Init+0x2b4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	4b91      	ldr	r3, [pc, #580]	; (800099c <MX_GPIO_Init+0x2b4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a90      	ldr	r2, [pc, #576]	; (800099c <MX_GPIO_Init+0x2b4>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b8e      	ldr	r3, [pc, #568]	; (800099c <MX_GPIO_Init+0x2b4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	4b8a      	ldr	r3, [pc, #552]	; (800099c <MX_GPIO_Init+0x2b4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a89      	ldr	r2, [pc, #548]	; (800099c <MX_GPIO_Init+0x2b4>)
 8000778:	f043 0302 	orr.w	r3, r3, #2
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b87      	ldr	r3, [pc, #540]	; (800099c <MX_GPIO_Init+0x2b4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b83      	ldr	r3, [pc, #524]	; (800099c <MX_GPIO_Init+0x2b4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a82      	ldr	r2, [pc, #520]	; (800099c <MX_GPIO_Init+0x2b4>)
 8000794:	f043 0308 	orr.w	r3, r3, #8
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b80      	ldr	r3, [pc, #512]	; (800099c <MX_GPIO_Init+0x2b4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0308 	and.w	r3, r3, #8
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2108      	movs	r1, #8
 80007aa:	487d      	ldr	r0, [pc, #500]	; (80009a0 <MX_GPIO_Init+0x2b8>)
 80007ac:	f000 fd68 	bl	8001280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	2101      	movs	r1, #1
 80007b4:	487b      	ldr	r0, [pc, #492]	; (80009a4 <MX_GPIO_Init+0x2bc>)
 80007b6:	f000 fd63 	bl	8001280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007ba:	2200      	movs	r2, #0
 80007bc:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007c0:	4879      	ldr	r0, [pc, #484]	; (80009a8 <MX_GPIO_Init+0x2c0>)
 80007c2:	f000 fd5d 	bl	8001280 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007c6:	2308      	movs	r3, #8
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ca:	2301      	movs	r3, #1
 80007cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d2:	2300      	movs	r3, #0
 80007d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	4619      	mov	r1, r3
 80007dc:	4870      	ldr	r0, [pc, #448]	; (80009a0 <MX_GPIO_Init+0x2b8>)
 80007de:	f000 fbb3 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007e2:	2301      	movs	r3, #1
 80007e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	2301      	movs	r3, #1
 80007e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	2300      	movs	r3, #0
 80007f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	4619      	mov	r1, r3
 80007f8:	486a      	ldr	r0, [pc, #424]	; (80009a4 <MX_GPIO_Init+0x2bc>)
 80007fa:	f000 fba5 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007fe:	2308      	movs	r3, #8
 8000800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000802:	2302      	movs	r3, #2
 8000804:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800080e:	2305      	movs	r3, #5
 8000810:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	4862      	ldr	r0, [pc, #392]	; (80009a4 <MX_GPIO_Init+0x2bc>)
 800081a:	f000 fb95 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800081e:	2301      	movs	r3, #1
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000822:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	485e      	ldr	r0, [pc, #376]	; (80009ac <MX_GPIO_Init+0x2c4>)
 8000834:	f000 fb88 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000838:	2310      	movs	r3, #16
 800083a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083c:	2302      	movs	r3, #2
 800083e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000848:	2306      	movs	r3, #6
 800084a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 031c 	add.w	r3, r7, #28
 8000850:	4619      	mov	r1, r3
 8000852:	4856      	ldr	r0, [pc, #344]	; (80009ac <MX_GPIO_Init+0x2c4>)
 8000854:	f000 fb78 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000858:	23e0      	movs	r3, #224	; 0xe0
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085c:	2302      	movs	r3, #2
 800085e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000868:	2305      	movs	r3, #5
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4619      	mov	r1, r3
 8000872:	484e      	ldr	r0, [pc, #312]	; (80009ac <MX_GPIO_Init+0x2c4>)
 8000874:	f000 fb68 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000878:	2304      	movs	r3, #4
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	4619      	mov	r1, r3
 800088a:	4849      	ldr	r0, [pc, #292]	; (80009b0 <MX_GPIO_Init+0x2c8>)
 800088c:	f000 fb5c 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	2302      	movs	r3, #2
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008a2:	2305      	movs	r3, #5
 80008a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4840      	ldr	r0, [pc, #256]	; (80009b0 <MX_GPIO_Init+0x2c8>)
 80008ae:	f000 fb4b 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008b2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008b6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4619      	mov	r1, r3
 80008ca:	4837      	ldr	r0, [pc, #220]	; (80009a8 <MX_GPIO_Init+0x2c0>)
 80008cc:	f000 fb3c 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008d0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008e2:	2306      	movs	r3, #6
 80008e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	482d      	ldr	r0, [pc, #180]	; (80009a4 <MX_GPIO_Init+0x2bc>)
 80008ee:	f000 fb2b 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80008f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	4829      	ldr	r0, [pc, #164]	; (80009ac <MX_GPIO_Init+0x2c4>)
 8000908:	f000 fb1e 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800090c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800091e:	230a      	movs	r3, #10
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	4820      	ldr	r0, [pc, #128]	; (80009ac <MX_GPIO_Init+0x2c4>)
 800092a:	f000 fb0d 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800092e:	2320      	movs	r3, #32
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000932:	2300      	movs	r3, #0
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	4819      	ldr	r0, [pc, #100]	; (80009a8 <MX_GPIO_Init+0x2c0>)
 8000942:	f000 fb01 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000946:	f44f 7310 	mov.w	r3, #576	; 0x240
 800094a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800094c:	2312      	movs	r3, #18
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000958:	2304      	movs	r3, #4
 800095a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	4813      	ldr	r0, [pc, #76]	; (80009b0 <MX_GPIO_Init+0x2c8>)
 8000964:	f000 faf0 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000968:	2302      	movs	r3, #2
 800096a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800096c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4808      	ldr	r0, [pc, #32]	; (80009a0 <MX_GPIO_Init+0x2b8>)
 800097e:	f000 fae3 	bl	8000f48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	2106      	movs	r1, #6
 8000986:	2006      	movs	r0, #6
 8000988:	f000 fab4 	bl	8000ef4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800098c:	2006      	movs	r0, #6
 800098e:	f000 facd 	bl	8000f2c <HAL_NVIC_EnableIRQ>

}
 8000992:	bf00      	nop
 8000994:	3730      	adds	r7, #48	; 0x30
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800
 80009a0:	40021000 	.word	0x40021000
 80009a4:	40020800 	.word	0x40020800
 80009a8:	40020c00 	.word	0x40020c00
 80009ac:	40020000 	.word	0x40020000
 80009b0:	40020400 	.word	0x40020400

080009b4 <button_interrupt_handler>:

/* USER CODE BEGIN 4 */

void button_interrupt_handler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
	traceISR_ENTER();
 80009b8:	f006 f8bc 	bl	8006b34 <SEGGER_SYSVIEW_RecordEnterISR>
	status_button=1;
 80009bc:	4b03      	ldr	r3, [pc, #12]	; (80009cc <button_interrupt_handler+0x18>)
 80009be:	2201      	movs	r2, #1
 80009c0:	601a      	str	r2, [r3, #0]
	traceISR_EXIT();
 80009c2:	f006 f8f9 	bl	8006bb8 <SEGGER_SYSVIEW_RecordExitISR>

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000030 	.word	0x20000030

080009d0 <task1_handler>:

static void task1_handler(void *parameters)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]

	while(1)
	{

		SEGGER_SYSVIEW_PrintfTarget("Toggling Green led");
 80009d8:	4806      	ldr	r0, [pc, #24]	; (80009f4 <task1_handler+0x24>)
 80009da:	f006 fb53 	bl	8007084 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 80009de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <task1_handler+0x28>)
 80009e4:	f000 fc65 	bl	80012b2 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80009e8:	2064      	movs	r0, #100	; 0x64
 80009ea:	f000 f9a7 	bl	8000d3c <HAL_Delay>
		//HAL_GPIO_WritePin(GPIOD, LED_GREEN_PIN, GPIO_PIN_RESET);
		switch_priority();
 80009ee:	f000 f81b 	bl	8000a28 <switch_priority>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green led");
 80009f2:	e7f1      	b.n	80009d8 <task1_handler+0x8>
 80009f4:	08007264 	.word	0x08007264
 80009f8:	40020c00 	.word	0x40020c00

080009fc <task2_handler>:
	}

}

static void task2_handler(void *parameters)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]



	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling Orange led");
 8000a04:	4806      	ldr	r0, [pc, #24]	; (8000a20 <task2_handler+0x24>)
 8000a06:	f006 fb3d 	bl	8007084 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000a0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <task2_handler+0x28>)
 8000a10:	f000 fc4f 	bl	80012b2 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000a14:	2064      	movs	r0, #100	; 0x64
 8000a16:	f000 f991 	bl	8000d3c <HAL_Delay>
		//HAL_GPIO_WritePin(GPIOD, LED_ORANGE_PIN, GPIO_PIN_RESET);
		switch_priority();
 8000a1a:	f000 f805 	bl	8000a28 <switch_priority>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Orange led");
 8000a1e:	e7f1      	b.n	8000a04 <task2_handler+0x8>
 8000a20:	08007278 	.word	0x08007278
 8000a24:	40020c00 	.word	0x40020c00

08000a28 <switch_priority>:
	}
}

void switch_priority(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
	UBaseType_t p1,p2;
	xTaskHandle t1,t2,curr;


	BaseType_t switch_priority=0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]


	portENTER_CRITICAL();
 8000a32:	f003 ff0f 	bl	8004854 <vPortEnterCritical>
	if(status_button)
 8000a36:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <switch_priority+0x84>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d004      	beq.n	8000a48 <switch_priority+0x20>
	{

		status_button=0;
 8000a3e:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <switch_priority+0x84>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
		switch_priority=1;
 8000a44:	2301      	movs	r3, #1
 8000a46:	617b      	str	r3, [r7, #20]

	}
	portEXIT_CRITICAL();
 8000a48:	f003 ff34 	bl	80048b4 <vPortExitCritical>

	if (switch_priority)
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d027      	beq.n	8000aa2 <switch_priority+0x7a>
	{
		t1=xTaskGetHandle("Task-1");
 8000a52:	4817      	ldr	r0, [pc, #92]	; (8000ab0 <switch_priority+0x88>)
 8000a54:	f002 fd98 	bl	8003588 <xTaskGetHandle>
 8000a58:	6138      	str	r0, [r7, #16]
		t2=xTaskGetHandle("Task-2");
 8000a5a:	4816      	ldr	r0, [pc, #88]	; (8000ab4 <switch_priority+0x8c>)
 8000a5c:	f002 fd94 	bl	8003588 <xTaskGetHandle>
 8000a60:	60f8      	str	r0, [r7, #12]


		p1=uxTaskPriorityGet(t1);
 8000a62:	6938      	ldr	r0, [r7, #16]
 8000a64:	f002 fb16 	bl	8003094 <uxTaskPriorityGet>
 8000a68:	60b8      	str	r0, [r7, #8]
		p2=uxTaskPriorityGet(t2);
 8000a6a:	68f8      	ldr	r0, [r7, #12]
 8000a6c:	f002 fb12 	bl	8003094 <uxTaskPriorityGet>
 8000a70:	6078      	str	r0, [r7, #4]

		curr= xTaskGetCurrentTaskHandle();
 8000a72:	f003 f907 	bl	8003c84 <xTaskGetCurrentTaskHandle>
 8000a76:	6038      	str	r0, [r7, #0]

		if (curr ==t1)
 8000a78:	683a      	ldr	r2, [r7, #0]
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d108      	bne.n	8000a92 <switch_priority+0x6a>
		{
			vTaskPrioritySet(t1, p2);
 8000a80:	6879      	ldr	r1, [r7, #4]
 8000a82:	6938      	ldr	r0, [r7, #16]
 8000a84:	f002 fb20 	bl	80030c8 <vTaskPrioritySet>
			vTaskPrioritySet(t2, p1);
 8000a88:	68b9      	ldr	r1, [r7, #8]
 8000a8a:	68f8      	ldr	r0, [r7, #12]
 8000a8c:	f002 fb1c 	bl	80030c8 <vTaskPrioritySet>
			vTaskPrioritySet(t2, p1);
			vTaskPrioritySet(t1, p2);
		}
	}

}
 8000a90:	e007      	b.n	8000aa2 <switch_priority+0x7a>
			vTaskPrioritySet(t2, p1);
 8000a92:	68b9      	ldr	r1, [r7, #8]
 8000a94:	68f8      	ldr	r0, [r7, #12]
 8000a96:	f002 fb17 	bl	80030c8 <vTaskPrioritySet>
			vTaskPrioritySet(t1, p2);
 8000a9a:	6879      	ldr	r1, [r7, #4]
 8000a9c:	6938      	ldr	r0, [r7, #16]
 8000a9e:	f002 fb13 	bl	80030c8 <vTaskPrioritySet>
}
 8000aa2:	bf00      	nop
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000030 	.word	0x20000030
 8000ab0:	08007254 	.word	0x08007254
 8000ab4:	0800725c 	.word	0x0800725c

08000ab8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d101      	bne.n	8000ace <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aca:	f000 f917 	bl	8000cfc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40001000 	.word	0x40001000

08000adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae0:	b672      	cpsid	i
}
 8000ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <Error_Handler+0x8>
	...

08000ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <HAL_MspInit+0x4c>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	4a0f      	ldr	r2, [pc, #60]	; (8000b34 <HAL_MspInit+0x4c>)
 8000af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000afc:	6453      	str	r3, [r2, #68]	; 0x44
 8000afe:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	4a08      	ldr	r2, [pc, #32]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b18:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000b26:	f003 fe17 	bl	8004758 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800

08000b38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08c      	sub	sp, #48	; 0x30
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	2036      	movs	r0, #54	; 0x36
 8000b4e:	f000 f9d1 	bl	8000ef4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b52:	2036      	movs	r0, #54	; 0x36
 8000b54:	f000 f9ea 	bl	8000f2c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <HAL_InitTick+0xa4>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b60:	4a1e      	ldr	r2, [pc, #120]	; (8000bdc <HAL_InitTick+0xa4>)
 8000b62:	f043 0310 	orr.w	r3, r3, #16
 8000b66:	6413      	str	r3, [r2, #64]	; 0x40
 8000b68:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <HAL_InitTick+0xa4>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	f003 0310 	and.w	r3, r3, #16
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b74:	f107 0210 	add.w	r2, r7, #16
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f001 f836 	bl	8001bf0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b84:	f001 f820 	bl	8001bc8 <HAL_RCC_GetPCLK1Freq>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b90:	4a13      	ldr	r2, [pc, #76]	; (8000be0 <HAL_InitTick+0xa8>)
 8000b92:	fba2 2303 	umull	r2, r3, r2, r3
 8000b96:	0c9b      	lsrs	r3, r3, #18
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <HAL_InitTick+0xac>)
 8000b9e:	4a12      	ldr	r2, [pc, #72]	; (8000be8 <HAL_InitTick+0xb0>)
 8000ba0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <HAL_InitTick+0xac>)
 8000ba4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ba8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000baa:	4a0e      	ldr	r2, [pc, #56]	; (8000be4 <HAL_InitTick+0xac>)
 8000bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bae:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <HAL_InitTick+0xac>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <HAL_InitTick+0xac>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000bbc:	4809      	ldr	r0, [pc, #36]	; (8000be4 <HAL_InitTick+0xac>)
 8000bbe:	f001 f849 	bl	8001c54 <HAL_TIM_Base_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d104      	bne.n	8000bd2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000bc8:	4806      	ldr	r0, [pc, #24]	; (8000be4 <HAL_InitTick+0xac>)
 8000bca:	f001 f89d 	bl	8001d08 <HAL_TIM_Base_Start_IT>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	e000      	b.n	8000bd4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3730      	adds	r7, #48	; 0x30
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	431bde83 	.word	0x431bde83
 8000be4:	20014374 	.word	0x20014374
 8000be8:	40001000 	.word	0x40001000

08000bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <NMI_Handler+0x4>

08000bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <HardFault_Handler+0x4>

08000bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <MemManage_Handler+0x4>

08000bfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <BusFault_Handler+0x4>

08000c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <UsageFault_Handler+0x4>

08000c0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	button_interrupt_handler();
 8000c1c:	f7ff feca 	bl	80009b4 <button_interrupt_handler>

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PH0_OSC_IN_Pin);
 8000c20:	2001      	movs	r0, #1
 8000c22:	f000 fb61 	bl	80012e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c30:	4802      	ldr	r0, [pc, #8]	; (8000c3c <TIM6_DAC_IRQHandler+0x10>)
 8000c32:	f001 f8d9 	bl	8001de8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20014374 	.word	0x20014374

08000c40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <SystemInit+0x20>)
 8000c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c4a:	4a05      	ldr	r2, [pc, #20]	; (8000c60 <SystemInit+0x20>)
 8000c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c68:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c6a:	490e      	ldr	r1, [pc, #56]	; (8000ca4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ca8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c70:	e002      	b.n	8000c78 <LoopCopyDataInit>

08000c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c76:	3304      	adds	r3, #4

08000c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c7c:	d3f9      	bcc.n	8000c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7e:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c80:	4c0b      	ldr	r4, [pc, #44]	; (8000cb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c84:	e001      	b.n	8000c8a <LoopFillZerobss>

08000c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c88:	3204      	adds	r2, #4

08000c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c8c:	d3fb      	bcc.n	8000c86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c8e:	f7ff ffd7 	bl	8000c40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c92:	f006 fa8b 	bl	80071ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c96:	f7ff fc69 	bl	800056c <main>
  bx  lr    
 8000c9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000ca8:	080073bc 	.word	0x080073bc
  ldr r2, =_sbss
 8000cac:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000cb0:	200144a8 	.word	0x200144a8

08000cb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb4:	e7fe      	b.n	8000cb4 <ADC_IRQHandler>
	...

08000cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cbc:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0d      	ldr	r2, [pc, #52]	; (8000cf8 <HAL_Init+0x40>)
 8000cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cc8:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <HAL_Init+0x40>)
 8000cce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a07      	ldr	r2, [pc, #28]	; (8000cf8 <HAL_Init+0x40>)
 8000cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce0:	2003      	movs	r0, #3
 8000ce2:	f000 f8fc 	bl	8000ede <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f7ff ff26 	bl	8000b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cec:	f7ff fefc 	bl	8000ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023c00 	.word	0x40023c00

08000cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_IncTick+0x20>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	461a      	mov	r2, r3
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_IncTick+0x24>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <HAL_IncTick+0x24>)
 8000d0e:	6013      	str	r3, [r2, #0]
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	200143bc 	.word	0x200143bc

08000d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return uwTick;
 8000d28:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <HAL_GetTick+0x14>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	200143bc 	.word	0x200143bc

08000d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d44:	f7ff ffee 	bl	8000d24 <HAL_GetTick>
 8000d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d54:	d005      	beq.n	8000d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d56:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <HAL_Delay+0x44>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	4413      	add	r3, r2
 8000d60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d62:	bf00      	nop
 8000d64:	f7ff ffde 	bl	8000d24 <HAL_GetTick>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d8f7      	bhi.n	8000d64 <HAL_Delay+0x28>
  {
  }
}
 8000d74:	bf00      	nop
 8000d76:	bf00      	nop
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000008 	.word	0x20000008

08000d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da0:	4013      	ands	r3, r2
 8000da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db6:	4a04      	ldr	r2, [pc, #16]	; (8000dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	60d3      	str	r3, [r2, #12]
}
 8000dbc:	bf00      	nop
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd0:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	0a1b      	lsrs	r3, r3, #8
 8000dd6:	f003 0307 	and.w	r3, r3, #7
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	db0b      	blt.n	8000e12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	f003 021f 	and.w	r2, r3, #31
 8000e00:	4907      	ldr	r1, [pc, #28]	; (8000e20 <__NVIC_EnableIRQ+0x38>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	095b      	lsrs	r3, r3, #5
 8000e08:	2001      	movs	r0, #1
 8000e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000e100 	.word	0xe000e100

08000e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	6039      	str	r1, [r7, #0]
 8000e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	db0a      	blt.n	8000e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	490c      	ldr	r1, [pc, #48]	; (8000e70 <__NVIC_SetPriority+0x4c>)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	0112      	lsls	r2, r2, #4
 8000e44:	b2d2      	uxtb	r2, r2
 8000e46:	440b      	add	r3, r1
 8000e48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e4c:	e00a      	b.n	8000e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	4908      	ldr	r1, [pc, #32]	; (8000e74 <__NVIC_SetPriority+0x50>)
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	f003 030f 	and.w	r3, r3, #15
 8000e5a:	3b04      	subs	r3, #4
 8000e5c:	0112      	lsls	r2, r2, #4
 8000e5e:	b2d2      	uxtb	r2, r2
 8000e60:	440b      	add	r3, r1
 8000e62:	761a      	strb	r2, [r3, #24]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000e100 	.word	0xe000e100
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b089      	sub	sp, #36	; 0x24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	f1c3 0307 	rsb	r3, r3, #7
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	bf28      	it	cs
 8000e96:	2304      	movcs	r3, #4
 8000e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	2b06      	cmp	r3, #6
 8000ea0:	d902      	bls.n	8000ea8 <NVIC_EncodePriority+0x30>
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3b03      	subs	r3, #3
 8000ea6:	e000      	b.n	8000eaa <NVIC_EncodePriority+0x32>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43da      	mvns	r2, r3
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	401a      	ands	r2, r3
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eca:	43d9      	mvns	r1, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed0:	4313      	orrs	r3, r2
         );
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3724      	adds	r7, #36	; 0x24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff ff4c 	bl	8000d84 <__NVIC_SetPriorityGrouping>
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
 8000f00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f06:	f7ff ff61 	bl	8000dcc <__NVIC_GetPriorityGrouping>
 8000f0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	68b9      	ldr	r1, [r7, #8]
 8000f10:	6978      	ldr	r0, [r7, #20]
 8000f12:	f7ff ffb1 	bl	8000e78 <NVIC_EncodePriority>
 8000f16:	4602      	mov	r2, r0
 8000f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff ff80 	bl	8000e24 <__NVIC_SetPriority>
}
 8000f24:	bf00      	nop
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff ff54 	bl	8000de8 <__NVIC_EnableIRQ>
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b089      	sub	sp, #36	; 0x24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
 8000f62:	e16b      	b.n	800123c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f64:	2201      	movs	r2, #1
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	4013      	ands	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	f040 815a 	bne.w	8001236 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 0303 	and.w	r3, r3, #3
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d005      	beq.n	8000f9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d130      	bne.n	8000ffc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	68da      	ldr	r2, [r3, #12]
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	091b      	lsrs	r3, r3, #4
 8000fe6:	f003 0201 	and.w	r2, r3, #1
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	2b03      	cmp	r3, #3
 8001006:	d017      	beq.n	8001038 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	2203      	movs	r2, #3
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 0303 	and.w	r3, r3, #3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d123      	bne.n	800108c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	08da      	lsrs	r2, r3, #3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3208      	adds	r2, #8
 800104c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001050:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	f003 0307 	and.w	r3, r3, #7
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	220f      	movs	r2, #15
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	691a      	ldr	r2, [r3, #16]
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	08da      	lsrs	r2, r3, #3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3208      	adds	r2, #8
 8001086:	69b9      	ldr	r1, [r7, #24]
 8001088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0203 	and.w	r2, r3, #3
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f000 80b4 	beq.w	8001236 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	4b60      	ldr	r3, [pc, #384]	; (8001254 <HAL_GPIO_Init+0x30c>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	4a5f      	ldr	r2, [pc, #380]	; (8001254 <HAL_GPIO_Init+0x30c>)
 80010d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010dc:	6453      	str	r3, [r2, #68]	; 0x44
 80010de:	4b5d      	ldr	r3, [pc, #372]	; (8001254 <HAL_GPIO_Init+0x30c>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ea:	4a5b      	ldr	r2, [pc, #364]	; (8001258 <HAL_GPIO_Init+0x310>)
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	089b      	lsrs	r3, r3, #2
 80010f0:	3302      	adds	r3, #2
 80010f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	220f      	movs	r2, #15
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4013      	ands	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a52      	ldr	r2, [pc, #328]	; (800125c <HAL_GPIO_Init+0x314>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d02b      	beq.n	800116e <HAL_GPIO_Init+0x226>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a51      	ldr	r2, [pc, #324]	; (8001260 <HAL_GPIO_Init+0x318>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d025      	beq.n	800116a <HAL_GPIO_Init+0x222>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a50      	ldr	r2, [pc, #320]	; (8001264 <HAL_GPIO_Init+0x31c>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d01f      	beq.n	8001166 <HAL_GPIO_Init+0x21e>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4f      	ldr	r2, [pc, #316]	; (8001268 <HAL_GPIO_Init+0x320>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d019      	beq.n	8001162 <HAL_GPIO_Init+0x21a>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4e      	ldr	r2, [pc, #312]	; (800126c <HAL_GPIO_Init+0x324>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d013      	beq.n	800115e <HAL_GPIO_Init+0x216>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a4d      	ldr	r2, [pc, #308]	; (8001270 <HAL_GPIO_Init+0x328>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d00d      	beq.n	800115a <HAL_GPIO_Init+0x212>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a4c      	ldr	r2, [pc, #304]	; (8001274 <HAL_GPIO_Init+0x32c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d007      	beq.n	8001156 <HAL_GPIO_Init+0x20e>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a4b      	ldr	r2, [pc, #300]	; (8001278 <HAL_GPIO_Init+0x330>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d101      	bne.n	8001152 <HAL_GPIO_Init+0x20a>
 800114e:	2307      	movs	r3, #7
 8001150:	e00e      	b.n	8001170 <HAL_GPIO_Init+0x228>
 8001152:	2308      	movs	r3, #8
 8001154:	e00c      	b.n	8001170 <HAL_GPIO_Init+0x228>
 8001156:	2306      	movs	r3, #6
 8001158:	e00a      	b.n	8001170 <HAL_GPIO_Init+0x228>
 800115a:	2305      	movs	r3, #5
 800115c:	e008      	b.n	8001170 <HAL_GPIO_Init+0x228>
 800115e:	2304      	movs	r3, #4
 8001160:	e006      	b.n	8001170 <HAL_GPIO_Init+0x228>
 8001162:	2303      	movs	r3, #3
 8001164:	e004      	b.n	8001170 <HAL_GPIO_Init+0x228>
 8001166:	2302      	movs	r3, #2
 8001168:	e002      	b.n	8001170 <HAL_GPIO_Init+0x228>
 800116a:	2301      	movs	r3, #1
 800116c:	e000      	b.n	8001170 <HAL_GPIO_Init+0x228>
 800116e:	2300      	movs	r3, #0
 8001170:	69fa      	ldr	r2, [r7, #28]
 8001172:	f002 0203 	and.w	r2, r2, #3
 8001176:	0092      	lsls	r2, r2, #2
 8001178:	4093      	lsls	r3, r2
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001180:	4935      	ldr	r1, [pc, #212]	; (8001258 <HAL_GPIO_Init+0x310>)
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	089b      	lsrs	r3, r3, #2
 8001186:	3302      	adds	r3, #2
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800118e:	4b3b      	ldr	r3, [pc, #236]	; (800127c <HAL_GPIO_Init+0x334>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	43db      	mvns	r3, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4013      	ands	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011b2:	4a32      	ldr	r2, [pc, #200]	; (800127c <HAL_GPIO_Init+0x334>)
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011b8:	4b30      	ldr	r3, [pc, #192]	; (800127c <HAL_GPIO_Init+0x334>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011dc:	4a27      	ldr	r2, [pc, #156]	; (800127c <HAL_GPIO_Init+0x334>)
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011e2:	4b26      	ldr	r3, [pc, #152]	; (800127c <HAL_GPIO_Init+0x334>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4013      	ands	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001206:	4a1d      	ldr	r2, [pc, #116]	; (800127c <HAL_GPIO_Init+0x334>)
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <HAL_GPIO_Init+0x334>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001230:	4a12      	ldr	r2, [pc, #72]	; (800127c <HAL_GPIO_Init+0x334>)
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3301      	adds	r3, #1
 800123a:	61fb      	str	r3, [r7, #28]
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	2b0f      	cmp	r3, #15
 8001240:	f67f ae90 	bls.w	8000f64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001244:	bf00      	nop
 8001246:	bf00      	nop
 8001248:	3724      	adds	r7, #36	; 0x24
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40023800 	.word	0x40023800
 8001258:	40013800 	.word	0x40013800
 800125c:	40020000 	.word	0x40020000
 8001260:	40020400 	.word	0x40020400
 8001264:	40020800 	.word	0x40020800
 8001268:	40020c00 	.word	0x40020c00
 800126c:	40021000 	.word	0x40021000
 8001270:	40021400 	.word	0x40021400
 8001274:	40021800 	.word	0x40021800
 8001278:	40021c00 	.word	0x40021c00
 800127c:	40013c00 	.word	0x40013c00

08001280 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	807b      	strh	r3, [r7, #2]
 800128c:	4613      	mov	r3, r2
 800128e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001290:	787b      	ldrb	r3, [r7, #1]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001296:	887a      	ldrh	r2, [r7, #2]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800129c:	e003      	b.n	80012a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800129e:	887b      	ldrh	r3, [r7, #2]
 80012a0:	041a      	lsls	r2, r3, #16
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	619a      	str	r2, [r3, #24]
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b085      	sub	sp, #20
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	460b      	mov	r3, r1
 80012bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012c4:	887a      	ldrh	r2, [r7, #2]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4013      	ands	r3, r2
 80012ca:	041a      	lsls	r2, r3, #16
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	43d9      	mvns	r1, r3
 80012d0:	887b      	ldrh	r3, [r7, #2]
 80012d2:	400b      	ands	r3, r1
 80012d4:	431a      	orrs	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	619a      	str	r2, [r3, #24]
}
 80012da:	bf00      	nop
 80012dc:	3714      	adds	r7, #20
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80012f2:	4b08      	ldr	r3, [pc, #32]	; (8001314 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012f4:	695a      	ldr	r2, [r3, #20]
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	4013      	ands	r3, r2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d006      	beq.n	800130c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012fe:	4a05      	ldr	r2, [pc, #20]	; (8001314 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001304:	88fb      	ldrh	r3, [r7, #6]
 8001306:	4618      	mov	r0, r3
 8001308:	f000 f806 	bl	8001318 <HAL_GPIO_EXTI_Callback>
  }
}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40013c00 	.word	0x40013c00

08001318 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d101      	bne.n	8001342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e264      	b.n	800180c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	2b00      	cmp	r3, #0
 800134c:	d075      	beq.n	800143a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800134e:	4ba3      	ldr	r3, [pc, #652]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 030c 	and.w	r3, r3, #12
 8001356:	2b04      	cmp	r3, #4
 8001358:	d00c      	beq.n	8001374 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800135a:	4ba0      	ldr	r3, [pc, #640]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001362:	2b08      	cmp	r3, #8
 8001364:	d112      	bne.n	800138c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001366:	4b9d      	ldr	r3, [pc, #628]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800136e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001372:	d10b      	bne.n	800138c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001374:	4b99      	ldr	r3, [pc, #612]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d05b      	beq.n	8001438 <HAL_RCC_OscConfig+0x108>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d157      	bne.n	8001438 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e23f      	b.n	800180c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001394:	d106      	bne.n	80013a4 <HAL_RCC_OscConfig+0x74>
 8001396:	4b91      	ldr	r3, [pc, #580]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a90      	ldr	r2, [pc, #576]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 800139c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	e01d      	b.n	80013e0 <HAL_RCC_OscConfig+0xb0>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013ac:	d10c      	bne.n	80013c8 <HAL_RCC_OscConfig+0x98>
 80013ae:	4b8b      	ldr	r3, [pc, #556]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a8a      	ldr	r2, [pc, #552]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 80013b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	4b88      	ldr	r3, [pc, #544]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a87      	ldr	r2, [pc, #540]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 80013c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	e00b      	b.n	80013e0 <HAL_RCC_OscConfig+0xb0>
 80013c8:	4b84      	ldr	r3, [pc, #528]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a83      	ldr	r2, [pc, #524]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 80013ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	4b81      	ldr	r3, [pc, #516]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a80      	ldr	r2, [pc, #512]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 80013da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d013      	beq.n	8001410 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e8:	f7ff fc9c 	bl	8000d24 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013f0:	f7ff fc98 	bl	8000d24 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b64      	cmp	r3, #100	; 0x64
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e204      	b.n	800180c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001402:	4b76      	ldr	r3, [pc, #472]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0f0      	beq.n	80013f0 <HAL_RCC_OscConfig+0xc0>
 800140e:	e014      	b.n	800143a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001410:	f7ff fc88 	bl	8000d24 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001418:	f7ff fc84 	bl	8000d24 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b64      	cmp	r3, #100	; 0x64
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e1f0      	b.n	800180c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142a:	4b6c      	ldr	r3, [pc, #432]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f0      	bne.n	8001418 <HAL_RCC_OscConfig+0xe8>
 8001436:	e000      	b.n	800143a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d063      	beq.n	800150e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001446:	4b65      	ldr	r3, [pc, #404]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 030c 	and.w	r3, r3, #12
 800144e:	2b00      	cmp	r3, #0
 8001450:	d00b      	beq.n	800146a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001452:	4b62      	ldr	r3, [pc, #392]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800145a:	2b08      	cmp	r3, #8
 800145c:	d11c      	bne.n	8001498 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800145e:	4b5f      	ldr	r3, [pc, #380]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d116      	bne.n	8001498 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800146a:	4b5c      	ldr	r3, [pc, #368]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d005      	beq.n	8001482 <HAL_RCC_OscConfig+0x152>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d001      	beq.n	8001482 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e1c4      	b.n	800180c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001482:	4b56      	ldr	r3, [pc, #344]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	4952      	ldr	r1, [pc, #328]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 8001492:	4313      	orrs	r3, r2
 8001494:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001496:	e03a      	b.n	800150e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d020      	beq.n	80014e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014a0:	4b4f      	ldr	r3, [pc, #316]	; (80015e0 <HAL_RCC_OscConfig+0x2b0>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a6:	f7ff fc3d 	bl	8000d24 <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ae:	f7ff fc39 	bl	8000d24 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e1a5      	b.n	800180c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c0:	4b46      	ldr	r3, [pc, #280]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0f0      	beq.n	80014ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014cc:	4b43      	ldr	r3, [pc, #268]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	4940      	ldr	r1, [pc, #256]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	600b      	str	r3, [r1, #0]
 80014e0:	e015      	b.n	800150e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014e2:	4b3f      	ldr	r3, [pc, #252]	; (80015e0 <HAL_RCC_OscConfig+0x2b0>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e8:	f7ff fc1c 	bl	8000d24 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014f0:	f7ff fc18 	bl	8000d24 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e184      	b.n	800180c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001502:	4b36      	ldr	r3, [pc, #216]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f0      	bne.n	80014f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0308 	and.w	r3, r3, #8
 8001516:	2b00      	cmp	r3, #0
 8001518:	d030      	beq.n	800157c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d016      	beq.n	8001550 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001522:	4b30      	ldr	r3, [pc, #192]	; (80015e4 <HAL_RCC_OscConfig+0x2b4>)
 8001524:	2201      	movs	r2, #1
 8001526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001528:	f7ff fbfc 	bl	8000d24 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001530:	f7ff fbf8 	bl	8000d24 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e164      	b.n	800180c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001542:	4b26      	ldr	r3, [pc, #152]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 8001544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0f0      	beq.n	8001530 <HAL_RCC_OscConfig+0x200>
 800154e:	e015      	b.n	800157c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001550:	4b24      	ldr	r3, [pc, #144]	; (80015e4 <HAL_RCC_OscConfig+0x2b4>)
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001556:	f7ff fbe5 	bl	8000d24 <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800155e:	f7ff fbe1 	bl	8000d24 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e14d      	b.n	800180c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001570:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 8001572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d1f0      	bne.n	800155e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	2b00      	cmp	r3, #0
 8001586:	f000 80a0 	beq.w	80016ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800158a:	2300      	movs	r3, #0
 800158c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800158e:	4b13      	ldr	r3, [pc, #76]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10f      	bne.n	80015ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	4a0e      	ldr	r2, [pc, #56]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 80015a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a8:	6413      	str	r3, [r2, #64]	; 0x40
 80015aa:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015b6:	2301      	movs	r3, #1
 80015b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ba:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <HAL_RCC_OscConfig+0x2b8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d121      	bne.n	800160a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015c6:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <HAL_RCC_OscConfig+0x2b8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a07      	ldr	r2, [pc, #28]	; (80015e8 <HAL_RCC_OscConfig+0x2b8>)
 80015cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015d2:	f7ff fba7 	bl	8000d24 <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d8:	e011      	b.n	80015fe <HAL_RCC_OscConfig+0x2ce>
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800
 80015e0:	42470000 	.word	0x42470000
 80015e4:	42470e80 	.word	0x42470e80
 80015e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ec:	f7ff fb9a 	bl	8000d24 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e106      	b.n	800180c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015fe:	4b85      	ldr	r3, [pc, #532]	; (8001814 <HAL_RCC_OscConfig+0x4e4>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f0      	beq.n	80015ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d106      	bne.n	8001620 <HAL_RCC_OscConfig+0x2f0>
 8001612:	4b81      	ldr	r3, [pc, #516]	; (8001818 <HAL_RCC_OscConfig+0x4e8>)
 8001614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001616:	4a80      	ldr	r2, [pc, #512]	; (8001818 <HAL_RCC_OscConfig+0x4e8>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6713      	str	r3, [r2, #112]	; 0x70
 800161e:	e01c      	b.n	800165a <HAL_RCC_OscConfig+0x32a>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	2b05      	cmp	r3, #5
 8001626:	d10c      	bne.n	8001642 <HAL_RCC_OscConfig+0x312>
 8001628:	4b7b      	ldr	r3, [pc, #492]	; (8001818 <HAL_RCC_OscConfig+0x4e8>)
 800162a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800162c:	4a7a      	ldr	r2, [pc, #488]	; (8001818 <HAL_RCC_OscConfig+0x4e8>)
 800162e:	f043 0304 	orr.w	r3, r3, #4
 8001632:	6713      	str	r3, [r2, #112]	; 0x70
 8001634:	4b78      	ldr	r3, [pc, #480]	; (8001818 <HAL_RCC_OscConfig+0x4e8>)
 8001636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001638:	4a77      	ldr	r2, [pc, #476]	; (8001818 <HAL_RCC_OscConfig+0x4e8>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	6713      	str	r3, [r2, #112]	; 0x70
 8001640:	e00b      	b.n	800165a <HAL_RCC_OscConfig+0x32a>
 8001642:	4b75      	ldr	r3, [pc, #468]	; (8001818 <HAL_RCC_OscConfig+0x4e8>)
 8001644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001646:	4a74      	ldr	r2, [pc, #464]	; (8001818 <HAL_RCC_OscConfig+0x4e8>)
 8001648:	f023 0301 	bic.w	r3, r3, #1
 800164c:	6713      	str	r3, [r2, #112]	; 0x70
 800164e:	4b72      	ldr	r3, [pc, #456]	; (8001818 <HAL_RCC_OscConfig+0x4e8>)
 8001650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001652:	4a71      	ldr	r2, [pc, #452]	; (8001818 <HAL_RCC_OscConfig+0x4e8>)
 8001654:	f023 0304 	bic.w	r3, r3, #4
 8001658:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d015      	beq.n	800168e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001662:	f7ff fb5f 	bl	8000d24 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001668:	e00a      	b.n	8001680 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800166a:	f7ff fb5b 	bl	8000d24 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	f241 3288 	movw	r2, #5000	; 0x1388
 8001678:	4293      	cmp	r3, r2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e0c5      	b.n	800180c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001680:	4b65      	ldr	r3, [pc, #404]	; (8001818 <HAL_RCC_OscConfig+0x4e8>)
 8001682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0ee      	beq.n	800166a <HAL_RCC_OscConfig+0x33a>
 800168c:	e014      	b.n	80016b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168e:	f7ff fb49 	bl	8000d24 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001694:	e00a      	b.n	80016ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001696:	f7ff fb45 	bl	8000d24 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e0af      	b.n	800180c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ac:	4b5a      	ldr	r3, [pc, #360]	; (8001818 <HAL_RCC_OscConfig+0x4e8>)
 80016ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1ee      	bne.n	8001696 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016b8:	7dfb      	ldrb	r3, [r7, #23]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d105      	bne.n	80016ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016be:	4b56      	ldr	r3, [pc, #344]	; (8001818 <HAL_RCC_OscConfig+0x4e8>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	4a55      	ldr	r2, [pc, #340]	; (8001818 <HAL_RCC_OscConfig+0x4e8>)
 80016c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f000 809b 	beq.w	800180a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016d4:	4b50      	ldr	r3, [pc, #320]	; (8001818 <HAL_RCC_OscConfig+0x4e8>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f003 030c 	and.w	r3, r3, #12
 80016dc:	2b08      	cmp	r3, #8
 80016de:	d05c      	beq.n	800179a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d141      	bne.n	800176c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e8:	4b4c      	ldr	r3, [pc, #304]	; (800181c <HAL_RCC_OscConfig+0x4ec>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ee:	f7ff fb19 	bl	8000d24 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016f6:	f7ff fb15 	bl	8000d24 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e081      	b.n	800180c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001708:	4b43      	ldr	r3, [pc, #268]	; (8001818 <HAL_RCC_OscConfig+0x4e8>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1f0      	bne.n	80016f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	69da      	ldr	r2, [r3, #28]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a1b      	ldr	r3, [r3, #32]
 800171c:	431a      	orrs	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001722:	019b      	lsls	r3, r3, #6
 8001724:	431a      	orrs	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172a:	085b      	lsrs	r3, r3, #1
 800172c:	3b01      	subs	r3, #1
 800172e:	041b      	lsls	r3, r3, #16
 8001730:	431a      	orrs	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001736:	061b      	lsls	r3, r3, #24
 8001738:	4937      	ldr	r1, [pc, #220]	; (8001818 <HAL_RCC_OscConfig+0x4e8>)
 800173a:	4313      	orrs	r3, r2
 800173c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800173e:	4b37      	ldr	r3, [pc, #220]	; (800181c <HAL_RCC_OscConfig+0x4ec>)
 8001740:	2201      	movs	r2, #1
 8001742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001744:	f7ff faee 	bl	8000d24 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800174c:	f7ff faea 	bl	8000d24 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e056      	b.n	800180c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800175e:	4b2e      	ldr	r3, [pc, #184]	; (8001818 <HAL_RCC_OscConfig+0x4e8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0f0      	beq.n	800174c <HAL_RCC_OscConfig+0x41c>
 800176a:	e04e      	b.n	800180a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800176c:	4b2b      	ldr	r3, [pc, #172]	; (800181c <HAL_RCC_OscConfig+0x4ec>)
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001772:	f7ff fad7 	bl	8000d24 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800177a:	f7ff fad3 	bl	8000d24 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e03f      	b.n	800180c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800178c:	4b22      	ldr	r3, [pc, #136]	; (8001818 <HAL_RCC_OscConfig+0x4e8>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1f0      	bne.n	800177a <HAL_RCC_OscConfig+0x44a>
 8001798:	e037      	b.n	800180a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d101      	bne.n	80017a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e032      	b.n	800180c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017a6:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <HAL_RCC_OscConfig+0x4e8>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d028      	beq.n	8001806 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017be:	429a      	cmp	r2, r3
 80017c0:	d121      	bne.n	8001806 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d11a      	bne.n	8001806 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017d6:	4013      	ands	r3, r2
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017dc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017de:	4293      	cmp	r3, r2
 80017e0:	d111      	bne.n	8001806 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ec:	085b      	lsrs	r3, r3, #1
 80017ee:	3b01      	subs	r3, #1
 80017f0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d107      	bne.n	8001806 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001800:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001802:	429a      	cmp	r2, r3
 8001804:	d001      	beq.n	800180a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e000      	b.n	800180c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40007000 	.word	0x40007000
 8001818:	40023800 	.word	0x40023800
 800181c:	42470060 	.word	0x42470060

08001820 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e0cc      	b.n	80019ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001834:	4b68      	ldr	r3, [pc, #416]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	429a      	cmp	r2, r3
 8001840:	d90c      	bls.n	800185c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001842:	4b65      	ldr	r3, [pc, #404]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800184a:	4b63      	ldr	r3, [pc, #396]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	429a      	cmp	r2, r3
 8001856:	d001      	beq.n	800185c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e0b8      	b.n	80019ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d020      	beq.n	80018aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b00      	cmp	r3, #0
 8001872:	d005      	beq.n	8001880 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001874:	4b59      	ldr	r3, [pc, #356]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	4a58      	ldr	r2, [pc, #352]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800187e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0308 	and.w	r3, r3, #8
 8001888:	2b00      	cmp	r3, #0
 800188a:	d005      	beq.n	8001898 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800188c:	4b53      	ldr	r3, [pc, #332]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	4a52      	ldr	r2, [pc, #328]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001896:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001898:	4b50      	ldr	r3, [pc, #320]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	494d      	ldr	r1, [pc, #308]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d044      	beq.n	8001940 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d107      	bne.n	80018ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018be:	4b47      	ldr	r3, [pc, #284]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d119      	bne.n	80018fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e07f      	b.n	80019ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d003      	beq.n	80018de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018da:	2b03      	cmp	r3, #3
 80018dc:	d107      	bne.n	80018ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018de:	4b3f      	ldr	r3, [pc, #252]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d109      	bne.n	80018fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e06f      	b.n	80019ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ee:	4b3b      	ldr	r3, [pc, #236]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e067      	b.n	80019ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018fe:	4b37      	ldr	r3, [pc, #220]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f023 0203 	bic.w	r2, r3, #3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	4934      	ldr	r1, [pc, #208]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 800190c:	4313      	orrs	r3, r2
 800190e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001910:	f7ff fa08 	bl	8000d24 <HAL_GetTick>
 8001914:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001916:	e00a      	b.n	800192e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001918:	f7ff fa04 	bl	8000d24 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	f241 3288 	movw	r2, #5000	; 0x1388
 8001926:	4293      	cmp	r3, r2
 8001928:	d901      	bls.n	800192e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e04f      	b.n	80019ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800192e:	4b2b      	ldr	r3, [pc, #172]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 020c 	and.w	r2, r3, #12
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	429a      	cmp	r2, r3
 800193e:	d1eb      	bne.n	8001918 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001940:	4b25      	ldr	r3, [pc, #148]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0307 	and.w	r3, r3, #7
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d20c      	bcs.n	8001968 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194e:	4b22      	ldr	r3, [pc, #136]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001956:	4b20      	ldr	r3, [pc, #128]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	429a      	cmp	r2, r3
 8001962:	d001      	beq.n	8001968 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e032      	b.n	80019ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b00      	cmp	r3, #0
 8001972:	d008      	beq.n	8001986 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001974:	4b19      	ldr	r3, [pc, #100]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	4916      	ldr	r1, [pc, #88]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	4313      	orrs	r3, r2
 8001984:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	2b00      	cmp	r3, #0
 8001990:	d009      	beq.n	80019a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001992:	4b12      	ldr	r3, [pc, #72]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	490e      	ldr	r1, [pc, #56]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019a6:	f000 f821 	bl	80019ec <HAL_RCC_GetSysClockFreq>
 80019aa:	4602      	mov	r2, r0
 80019ac:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	091b      	lsrs	r3, r3, #4
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	490a      	ldr	r1, [pc, #40]	; (80019e0 <HAL_RCC_ClockConfig+0x1c0>)
 80019b8:	5ccb      	ldrb	r3, [r1, r3]
 80019ba:	fa22 f303 	lsr.w	r3, r2, r3
 80019be:	4a09      	ldr	r2, [pc, #36]	; (80019e4 <HAL_RCC_ClockConfig+0x1c4>)
 80019c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <HAL_RCC_ClockConfig+0x1c8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff f8b6 	bl	8000b38 <HAL_InitTick>

  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40023c00 	.word	0x40023c00
 80019dc:	40023800 	.word	0x40023800
 80019e0:	08007370 	.word	0x08007370
 80019e4:	20000000 	.word	0x20000000
 80019e8:	20000004 	.word	0x20000004

080019ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019f0:	b084      	sub	sp, #16
 80019f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	2300      	movs	r3, #0
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	2300      	movs	r3, #0
 80019fe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a04:	4b67      	ldr	r3, [pc, #412]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f003 030c 	and.w	r3, r3, #12
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d00d      	beq.n	8001a2c <HAL_RCC_GetSysClockFreq+0x40>
 8001a10:	2b08      	cmp	r3, #8
 8001a12:	f200 80bd 	bhi.w	8001b90 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d002      	beq.n	8001a20 <HAL_RCC_GetSysClockFreq+0x34>
 8001a1a:	2b04      	cmp	r3, #4
 8001a1c:	d003      	beq.n	8001a26 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a1e:	e0b7      	b.n	8001b90 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a20:	4b61      	ldr	r3, [pc, #388]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a22:	60bb      	str	r3, [r7, #8]
       break;
 8001a24:	e0b7      	b.n	8001b96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a26:	4b61      	ldr	r3, [pc, #388]	; (8001bac <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001a28:	60bb      	str	r3, [r7, #8]
      break;
 8001a2a:	e0b4      	b.n	8001b96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a2c:	4b5d      	ldr	r3, [pc, #372]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a34:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a36:	4b5b      	ldr	r3, [pc, #364]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d04d      	beq.n	8001ade <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a42:	4b58      	ldr	r3, [pc, #352]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	099b      	lsrs	r3, r3, #6
 8001a48:	461a      	mov	r2, r3
 8001a4a:	f04f 0300 	mov.w	r3, #0
 8001a4e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a52:	f04f 0100 	mov.w	r1, #0
 8001a56:	ea02 0800 	and.w	r8, r2, r0
 8001a5a:	ea03 0901 	and.w	r9, r3, r1
 8001a5e:	4640      	mov	r0, r8
 8001a60:	4649      	mov	r1, r9
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	f04f 0300 	mov.w	r3, #0
 8001a6a:	014b      	lsls	r3, r1, #5
 8001a6c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a70:	0142      	lsls	r2, r0, #5
 8001a72:	4610      	mov	r0, r2
 8001a74:	4619      	mov	r1, r3
 8001a76:	ebb0 0008 	subs.w	r0, r0, r8
 8001a7a:	eb61 0109 	sbc.w	r1, r1, r9
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	f04f 0300 	mov.w	r3, #0
 8001a86:	018b      	lsls	r3, r1, #6
 8001a88:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a8c:	0182      	lsls	r2, r0, #6
 8001a8e:	1a12      	subs	r2, r2, r0
 8001a90:	eb63 0301 	sbc.w	r3, r3, r1
 8001a94:	f04f 0000 	mov.w	r0, #0
 8001a98:	f04f 0100 	mov.w	r1, #0
 8001a9c:	00d9      	lsls	r1, r3, #3
 8001a9e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001aa2:	00d0      	lsls	r0, r2, #3
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	eb12 0208 	adds.w	r2, r2, r8
 8001aac:	eb43 0309 	adc.w	r3, r3, r9
 8001ab0:	f04f 0000 	mov.w	r0, #0
 8001ab4:	f04f 0100 	mov.w	r1, #0
 8001ab8:	0259      	lsls	r1, r3, #9
 8001aba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001abe:	0250      	lsls	r0, r2, #9
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4610      	mov	r0, r2
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	461a      	mov	r2, r3
 8001acc:	f04f 0300 	mov.w	r3, #0
 8001ad0:	f7fe fbd0 	bl	8000274 <__aeabi_uldivmod>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4613      	mov	r3, r2
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	e04a      	b.n	8001b74 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ade:	4b31      	ldr	r3, [pc, #196]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	099b      	lsrs	r3, r3, #6
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	f04f 0300 	mov.w	r3, #0
 8001aea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001aee:	f04f 0100 	mov.w	r1, #0
 8001af2:	ea02 0400 	and.w	r4, r2, r0
 8001af6:	ea03 0501 	and.w	r5, r3, r1
 8001afa:	4620      	mov	r0, r4
 8001afc:	4629      	mov	r1, r5
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	f04f 0300 	mov.w	r3, #0
 8001b06:	014b      	lsls	r3, r1, #5
 8001b08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b0c:	0142      	lsls	r2, r0, #5
 8001b0e:	4610      	mov	r0, r2
 8001b10:	4619      	mov	r1, r3
 8001b12:	1b00      	subs	r0, r0, r4
 8001b14:	eb61 0105 	sbc.w	r1, r1, r5
 8001b18:	f04f 0200 	mov.w	r2, #0
 8001b1c:	f04f 0300 	mov.w	r3, #0
 8001b20:	018b      	lsls	r3, r1, #6
 8001b22:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b26:	0182      	lsls	r2, r0, #6
 8001b28:	1a12      	subs	r2, r2, r0
 8001b2a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b2e:	f04f 0000 	mov.w	r0, #0
 8001b32:	f04f 0100 	mov.w	r1, #0
 8001b36:	00d9      	lsls	r1, r3, #3
 8001b38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b3c:	00d0      	lsls	r0, r2, #3
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	1912      	adds	r2, r2, r4
 8001b44:	eb45 0303 	adc.w	r3, r5, r3
 8001b48:	f04f 0000 	mov.w	r0, #0
 8001b4c:	f04f 0100 	mov.w	r1, #0
 8001b50:	0299      	lsls	r1, r3, #10
 8001b52:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001b56:	0290      	lsls	r0, r2, #10
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	4619      	mov	r1, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	461a      	mov	r2, r3
 8001b64:	f04f 0300 	mov.w	r3, #0
 8001b68:	f7fe fb84 	bl	8000274 <__aeabi_uldivmod>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4613      	mov	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b74:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	0c1b      	lsrs	r3, r3, #16
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	3301      	adds	r3, #1
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8c:	60bb      	str	r3, [r7, #8]
      break;
 8001b8e:	e002      	b.n	8001b96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b90:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b92:	60bb      	str	r3, [r7, #8]
      break;
 8001b94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b96:	68bb      	ldr	r3, [r7, #8]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	00f42400 	.word	0x00f42400
 8001bac:	007a1200 	.word	0x007a1200

08001bb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bb4:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	20000000 	.word	0x20000000

08001bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bcc:	f7ff fff0 	bl	8001bb0 <HAL_RCC_GetHCLKFreq>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	0a9b      	lsrs	r3, r3, #10
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	4903      	ldr	r1, [pc, #12]	; (8001bec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bde:	5ccb      	ldrb	r3, [r1, r3]
 8001be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40023800 	.word	0x40023800
 8001bec:	08007380 	.word	0x08007380

08001bf0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	220f      	movs	r2, #15
 8001bfe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c00:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <HAL_RCC_GetClockConfig+0x5c>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 0203 	and.w	r2, r3, #3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c0c:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <HAL_RCC_GetClockConfig+0x5c>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c18:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <HAL_RCC_GetClockConfig+0x5c>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c24:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <HAL_RCC_GetClockConfig+0x5c>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	08db      	lsrs	r3, r3, #3
 8001c2a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c32:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <HAL_RCC_GetClockConfig+0x60>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0207 	and.w	r2, r3, #7
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	601a      	str	r2, [r3, #0]
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40023c00 	.word	0x40023c00

08001c54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e041      	b.n	8001cea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d106      	bne.n	8001c80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f839 	bl	8001cf2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2202      	movs	r2, #2
 8001c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3304      	adds	r3, #4
 8001c90:	4619      	mov	r1, r3
 8001c92:	4610      	mov	r0, r2
 8001c94:	f000 f9d8 	bl	8002048 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
	...

08001d08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d001      	beq.n	8001d20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e04e      	b.n	8001dbe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2202      	movs	r2, #2
 8001d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0201 	orr.w	r2, r2, #1
 8001d36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a23      	ldr	r2, [pc, #140]	; (8001dcc <HAL_TIM_Base_Start_IT+0xc4>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d022      	beq.n	8001d88 <HAL_TIM_Base_Start_IT+0x80>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d4a:	d01d      	beq.n	8001d88 <HAL_TIM_Base_Start_IT+0x80>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a1f      	ldr	r2, [pc, #124]	; (8001dd0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d018      	beq.n	8001d88 <HAL_TIM_Base_Start_IT+0x80>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a1e      	ldr	r2, [pc, #120]	; (8001dd4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d013      	beq.n	8001d88 <HAL_TIM_Base_Start_IT+0x80>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a1c      	ldr	r2, [pc, #112]	; (8001dd8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d00e      	beq.n	8001d88 <HAL_TIM_Base_Start_IT+0x80>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a1b      	ldr	r2, [pc, #108]	; (8001ddc <HAL_TIM_Base_Start_IT+0xd4>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d009      	beq.n	8001d88 <HAL_TIM_Base_Start_IT+0x80>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a19      	ldr	r2, [pc, #100]	; (8001de0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d004      	beq.n	8001d88 <HAL_TIM_Base_Start_IT+0x80>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a18      	ldr	r2, [pc, #96]	; (8001de4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d111      	bne.n	8001dac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2b06      	cmp	r3, #6
 8001d98:	d010      	beq.n	8001dbc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f042 0201 	orr.w	r2, r2, #1
 8001da8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001daa:	e007      	b.n	8001dbc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0201 	orr.w	r2, r2, #1
 8001dba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3714      	adds	r7, #20
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	40010000 	.word	0x40010000
 8001dd0:	40000400 	.word	0x40000400
 8001dd4:	40000800 	.word	0x40000800
 8001dd8:	40000c00 	.word	0x40000c00
 8001ddc:	40010400 	.word	0x40010400
 8001de0:	40014000 	.word	0x40014000
 8001de4:	40001800 	.word	0x40001800

08001de8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d122      	bne.n	8001e44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d11b      	bne.n	8001e44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f06f 0202 	mvn.w	r2, #2
 8001e14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f8ee 	bl	800200c <HAL_TIM_IC_CaptureCallback>
 8001e30:	e005      	b.n	8001e3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f8e0 	bl	8001ff8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f8f1 	bl	8002020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	d122      	bne.n	8001e98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b04      	cmp	r3, #4
 8001e5e:	d11b      	bne.n	8001e98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f06f 0204 	mvn.w	r2, #4
 8001e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f8c4 	bl	800200c <HAL_TIM_IC_CaptureCallback>
 8001e84:	e005      	b.n	8001e92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f8b6 	bl	8001ff8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f8c7 	bl	8002020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b08      	cmp	r3, #8
 8001ea4:	d122      	bne.n	8001eec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	f003 0308 	and.w	r3, r3, #8
 8001eb0:	2b08      	cmp	r3, #8
 8001eb2:	d11b      	bne.n	8001eec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f06f 0208 	mvn.w	r2, #8
 8001ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2204      	movs	r2, #4
 8001ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f89a 	bl	800200c <HAL_TIM_IC_CaptureCallback>
 8001ed8:	e005      	b.n	8001ee6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f88c 	bl	8001ff8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f89d 	bl	8002020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	f003 0310 	and.w	r3, r3, #16
 8001ef6:	2b10      	cmp	r3, #16
 8001ef8:	d122      	bne.n	8001f40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	f003 0310 	and.w	r3, r3, #16
 8001f04:	2b10      	cmp	r3, #16
 8001f06:	d11b      	bne.n	8001f40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f06f 0210 	mvn.w	r2, #16
 8001f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2208      	movs	r2, #8
 8001f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f870 	bl	800200c <HAL_TIM_IC_CaptureCallback>
 8001f2c:	e005      	b.n	8001f3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f862 	bl	8001ff8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 f873 	bl	8002020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d10e      	bne.n	8001f6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d107      	bne.n	8001f6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f06f 0201 	mvn.w	r2, #1
 8001f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7fe fda6 	bl	8000ab8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f76:	2b80      	cmp	r3, #128	; 0x80
 8001f78:	d10e      	bne.n	8001f98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f84:	2b80      	cmp	r3, #128	; 0x80
 8001f86:	d107      	bne.n	8001f98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f902 	bl	800219c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa2:	2b40      	cmp	r3, #64	; 0x40
 8001fa4:	d10e      	bne.n	8001fc4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb0:	2b40      	cmp	r3, #64	; 0x40
 8001fb2:	d107      	bne.n	8001fc4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f838 	bl	8002034 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	f003 0320 	and.w	r3, r3, #32
 8001fce:	2b20      	cmp	r3, #32
 8001fd0:	d10e      	bne.n	8001ff0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f003 0320 	and.w	r3, r3, #32
 8001fdc:	2b20      	cmp	r3, #32
 8001fde:	d107      	bne.n	8001ff0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 0220 	mvn.w	r2, #32
 8001fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f8cc 	bl	8002188 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ff0:	bf00      	nop
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a40      	ldr	r2, [pc, #256]	; (800215c <TIM_Base_SetConfig+0x114>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d013      	beq.n	8002088 <TIM_Base_SetConfig+0x40>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002066:	d00f      	beq.n	8002088 <TIM_Base_SetConfig+0x40>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a3d      	ldr	r2, [pc, #244]	; (8002160 <TIM_Base_SetConfig+0x118>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d00b      	beq.n	8002088 <TIM_Base_SetConfig+0x40>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a3c      	ldr	r2, [pc, #240]	; (8002164 <TIM_Base_SetConfig+0x11c>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d007      	beq.n	8002088 <TIM_Base_SetConfig+0x40>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a3b      	ldr	r2, [pc, #236]	; (8002168 <TIM_Base_SetConfig+0x120>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d003      	beq.n	8002088 <TIM_Base_SetConfig+0x40>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a3a      	ldr	r2, [pc, #232]	; (800216c <TIM_Base_SetConfig+0x124>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d108      	bne.n	800209a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800208e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	4313      	orrs	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a2f      	ldr	r2, [pc, #188]	; (800215c <TIM_Base_SetConfig+0x114>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d02b      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a8:	d027      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a2c      	ldr	r2, [pc, #176]	; (8002160 <TIM_Base_SetConfig+0x118>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d023      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a2b      	ldr	r2, [pc, #172]	; (8002164 <TIM_Base_SetConfig+0x11c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d01f      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a2a      	ldr	r2, [pc, #168]	; (8002168 <TIM_Base_SetConfig+0x120>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d01b      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a29      	ldr	r2, [pc, #164]	; (800216c <TIM_Base_SetConfig+0x124>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d017      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a28      	ldr	r2, [pc, #160]	; (8002170 <TIM_Base_SetConfig+0x128>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d013      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a27      	ldr	r2, [pc, #156]	; (8002174 <TIM_Base_SetConfig+0x12c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d00f      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a26      	ldr	r2, [pc, #152]	; (8002178 <TIM_Base_SetConfig+0x130>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d00b      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a25      	ldr	r2, [pc, #148]	; (800217c <TIM_Base_SetConfig+0x134>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d007      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a24      	ldr	r2, [pc, #144]	; (8002180 <TIM_Base_SetConfig+0x138>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d003      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a23      	ldr	r2, [pc, #140]	; (8002184 <TIM_Base_SetConfig+0x13c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d108      	bne.n	800210c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002100:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	4313      	orrs	r3, r2
 800210a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	4313      	orrs	r3, r2
 8002118:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a0a      	ldr	r2, [pc, #40]	; (800215c <TIM_Base_SetConfig+0x114>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d003      	beq.n	8002140 <TIM_Base_SetConfig+0xf8>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a0c      	ldr	r2, [pc, #48]	; (800216c <TIM_Base_SetConfig+0x124>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d103      	bne.n	8002148 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	691a      	ldr	r2, [r3, #16]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	615a      	str	r2, [r3, #20]
}
 800214e:	bf00      	nop
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	40010000 	.word	0x40010000
 8002160:	40000400 	.word	0x40000400
 8002164:	40000800 	.word	0x40000800
 8002168:	40000c00 	.word	0x40000c00
 800216c:	40010400 	.word	0x40010400
 8002170:	40014000 	.word	0x40014000
 8002174:	40014400 	.word	0x40014400
 8002178:	40014800 	.word	0x40014800
 800217c:	40001800 	.word	0x40001800
 8002180:	40001c00 	.word	0x40001c00
 8002184:	40002000 	.word	0x40002000

08002188 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f103 0208 	add.w	r2, r3, #8
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f04f 32ff 	mov.w	r2, #4294967295
 80021c8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f103 0208 	add.w	r2, r3, #8
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f103 0208 	add.w	r2, r3, #8
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800220a:	b480      	push	{r7}
 800220c:	b085      	sub	sp, #20
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	1c5a      	adds	r2, r3, #1
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	601a      	str	r2, [r3, #0]
}
 8002246:	bf00      	nop
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002252:	b480      	push	{r7}
 8002254:	b085      	sub	sp, #20
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
 800225a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002268:	d103      	bne.n	8002272 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	e00c      	b.n	800228c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3308      	adds	r3, #8
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	e002      	b.n	8002280 <vListInsert+0x2e>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68ba      	ldr	r2, [r7, #8]
 8002288:	429a      	cmp	r2, r3
 800228a:	d2f6      	bcs.n	800227a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	1c5a      	adds	r2, r3, #1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	601a      	str	r2, [r3, #0]
}
 80022b8:	bf00      	nop
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6892      	ldr	r2, [r2, #8]
 80022da:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	6852      	ldr	r2, [r2, #4]
 80022e4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d103      	bne.n	80022f8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	1e5a      	subs	r2, r3, #1
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10a      	bne.n	8002342 <xQueueGenericReset+0x2a>
        __asm volatile
 800232c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002330:	f383 8811 	msr	BASEPRI, r3
 8002334:	f3bf 8f6f 	isb	sy
 8002338:	f3bf 8f4f 	dsb	sy
 800233c:	60bb      	str	r3, [r7, #8]
    }
 800233e:	bf00      	nop
 8002340:	e7fe      	b.n	8002340 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002342:	f002 fa87 	bl	8004854 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234e:	68f9      	ldr	r1, [r7, #12]
 8002350:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002352:	fb01 f303 	mul.w	r3, r1, r3
 8002356:	441a      	add	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002372:	3b01      	subs	r3, #1
 8002374:	68f9      	ldr	r1, [r7, #12]
 8002376:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002378:	fb01 f303 	mul.w	r3, r1, r3
 800237c:	441a      	add	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	22ff      	movs	r2, #255	; 0xff
 8002386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	22ff      	movs	r2, #255	; 0xff
 800238e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d114      	bne.n	80023c2 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d01a      	beq.n	80023d6 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	3310      	adds	r3, #16
 80023a4:	4618      	mov	r0, r3
 80023a6:	f001 facd 	bl	8003944 <xTaskRemoveFromEventList>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d012      	beq.n	80023d6 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80023b0:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <xQueueGenericReset+0xcc>)
 80023b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	f3bf 8f4f 	dsb	sy
 80023bc:	f3bf 8f6f 	isb	sy
 80023c0:	e009      	b.n	80023d6 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	3310      	adds	r3, #16
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff fef2 	bl	80021b0 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	3324      	adds	r3, #36	; 0x24
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff feed 	bl	80021b0 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80023d6:	f002 fa6d 	bl	80048b4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80023da:	2301      	movs	r3, #1
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	e000ed04 	.word	0xe000ed04

080023e8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08c      	sub	sp, #48	; 0x30
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	4613      	mov	r3, r2
 80023f4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10a      	bne.n	8002412 <xQueueGenericCreate+0x2a>
        __asm volatile
 80023fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002400:	f383 8811 	msr	BASEPRI, r3
 8002404:	f3bf 8f6f 	isb	sy
 8002408:	f3bf 8f4f 	dsb	sy
 800240c:	61bb      	str	r3, [r7, #24]
    }
 800240e:	bf00      	nop
 8002410:	e7fe      	b.n	8002410 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	fb02 f303 	mul.w	r3, r2, r3
 800241a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d006      	beq.n	8002430 <xQueueGenericCreate+0x48>
 8002422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	fbb2 f3f3 	udiv	r3, r2, r3
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	429a      	cmp	r2, r3
 800242e:	d101      	bne.n	8002434 <xQueueGenericCreate+0x4c>
 8002430:	2301      	movs	r3, #1
 8002432:	e000      	b.n	8002436 <xQueueGenericCreate+0x4e>
 8002434:	2300      	movs	r3, #0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10a      	bne.n	8002450 <xQueueGenericCreate+0x68>
        __asm volatile
 800243a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243e:	f383 8811 	msr	BASEPRI, r3
 8002442:	f3bf 8f6f 	isb	sy
 8002446:	f3bf 8f4f 	dsb	sy
 800244a:	617b      	str	r3, [r7, #20]
    }
 800244c:	bf00      	nop
 800244e:	e7fe      	b.n	800244e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002456:	d90a      	bls.n	800246e <xQueueGenericCreate+0x86>
        __asm volatile
 8002458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800245c:	f383 8811 	msr	BASEPRI, r3
 8002460:	f3bf 8f6f 	isb	sy
 8002464:	f3bf 8f4f 	dsb	sy
 8002468:	613b      	str	r3, [r7, #16]
    }
 800246a:	bf00      	nop
 800246c:	e7fe      	b.n	800246c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	3350      	adds	r3, #80	; 0x50
 8002472:	4618      	mov	r0, r3
 8002474:	f002 fb1a 	bl	8004aac <pvPortMalloc>
 8002478:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800247a:	6a3b      	ldr	r3, [r7, #32]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00d      	beq.n	800249c <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002480:	6a3b      	ldr	r3, [r7, #32]
 8002482:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	3350      	adds	r3, #80	; 0x50
 8002488:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800248a:	79fa      	ldrb	r2, [r7, #7]
 800248c:	6a3b      	ldr	r3, [r7, #32]
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	4613      	mov	r3, r2
 8002492:	69fa      	ldr	r2, [r7, #28]
 8002494:	68b9      	ldr	r1, [r7, #8]
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f000 f805 	bl	80024a6 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800249c:	6a3b      	ldr	r3, [r7, #32]
    }
 800249e:	4618      	mov	r0, r3
 80024a0:	3728      	adds	r7, #40	; 0x28
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b084      	sub	sp, #16
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	60f8      	str	r0, [r7, #12]
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	607a      	str	r2, [r7, #4]
 80024b2:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d103      	bne.n	80024c2 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	e002      	b.n	80024c8 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80024d4:	2101      	movs	r1, #1
 80024d6:	69b8      	ldr	r0, [r7, #24]
 80024d8:	f7ff ff1e 	bl	8002318 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	78fa      	ldrb	r2, [r7, #3]
 80024e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80024e4:	78fb      	ldrb	r3, [r7, #3]
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	68f9      	ldr	r1, [r7, #12]
 80024ea:	2073      	movs	r0, #115	; 0x73
 80024ec:	f003 ff50 	bl	8006390 <SEGGER_SYSVIEW_RecordU32x3>
}
 80024f0:	bf00      	nop
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b090      	sub	sp, #64	; 0x40
 80024fc:	af02      	add	r7, sp, #8
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
 8002504:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002506:	2300      	movs	r3, #0
 8002508:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800250e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10a      	bne.n	800252a <xQueueGenericSend+0x32>
        __asm volatile
 8002514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002518:	f383 8811 	msr	BASEPRI, r3
 800251c:	f3bf 8f6f 	isb	sy
 8002520:	f3bf 8f4f 	dsb	sy
 8002524:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002526:	bf00      	nop
 8002528:	e7fe      	b.n	8002528 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d103      	bne.n	8002538 <xQueueGenericSend+0x40>
 8002530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <xQueueGenericSend+0x44>
 8002538:	2301      	movs	r3, #1
 800253a:	e000      	b.n	800253e <xQueueGenericSend+0x46>
 800253c:	2300      	movs	r3, #0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10a      	bne.n	8002558 <xQueueGenericSend+0x60>
        __asm volatile
 8002542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002546:	f383 8811 	msr	BASEPRI, r3
 800254a:	f3bf 8f6f 	isb	sy
 800254e:	f3bf 8f4f 	dsb	sy
 8002552:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002554:	bf00      	nop
 8002556:	e7fe      	b.n	8002556 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	2b02      	cmp	r3, #2
 800255c:	d103      	bne.n	8002566 <xQueueGenericSend+0x6e>
 800255e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002562:	2b01      	cmp	r3, #1
 8002564:	d101      	bne.n	800256a <xQueueGenericSend+0x72>
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <xQueueGenericSend+0x74>
 800256a:	2300      	movs	r3, #0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10a      	bne.n	8002586 <xQueueGenericSend+0x8e>
        __asm volatile
 8002570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002574:	f383 8811 	msr	BASEPRI, r3
 8002578:	f3bf 8f6f 	isb	sy
 800257c:	f3bf 8f4f 	dsb	sy
 8002580:	623b      	str	r3, [r7, #32]
    }
 8002582:	bf00      	nop
 8002584:	e7fe      	b.n	8002584 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002586:	f001 fb8d 	bl	8003ca4 <xTaskGetSchedulerState>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d102      	bne.n	8002596 <xQueueGenericSend+0x9e>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <xQueueGenericSend+0xa2>
 8002596:	2301      	movs	r3, #1
 8002598:	e000      	b.n	800259c <xQueueGenericSend+0xa4>
 800259a:	2300      	movs	r3, #0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10a      	bne.n	80025b6 <xQueueGenericSend+0xbe>
        __asm volatile
 80025a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a4:	f383 8811 	msr	BASEPRI, r3
 80025a8:	f3bf 8f6f 	isb	sy
 80025ac:	f3bf 8f4f 	dsb	sy
 80025b0:	61fb      	str	r3, [r7, #28]
    }
 80025b2:	bf00      	nop
 80025b4:	e7fe      	b.n	80025b4 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80025b6:	f002 f94d 	bl	8004854 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80025ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d302      	bcc.n	80025cc <xQueueGenericSend+0xd4>
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d136      	bne.n	800263a <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 80025cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ce:	4618      	mov	r0, r3
 80025d0:	f004 fc6c 	bl	8006eac <SEGGER_SYSVIEW_ShrinkId>
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	460b      	mov	r3, r1
 80025de:	4601      	mov	r1, r0
 80025e0:	205a      	movs	r0, #90	; 0x5a
 80025e2:	f003 ff4b 	bl	800647c <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	68b9      	ldr	r1, [r7, #8]
 80025ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025ec:	f000 fa78 	bl	8002ae0 <prvCopyDataToQueue>
 80025f0:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d010      	beq.n	800261c <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fc:	3324      	adds	r3, #36	; 0x24
 80025fe:	4618      	mov	r0, r3
 8002600:	f001 f9a0 	bl	8003944 <xTaskRemoveFromEventList>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d013      	beq.n	8002632 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800260a:	4b4d      	ldr	r3, [pc, #308]	; (8002740 <xQueueGenericSend+0x248>)
 800260c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	f3bf 8f4f 	dsb	sy
 8002616:	f3bf 8f6f 	isb	sy
 800261a:	e00a      	b.n	8002632 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800261c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261e:	2b00      	cmp	r3, #0
 8002620:	d007      	beq.n	8002632 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002622:	4b47      	ldr	r3, [pc, #284]	; (8002740 <xQueueGenericSend+0x248>)
 8002624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	f3bf 8f4f 	dsb	sy
 800262e:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002632:	f002 f93f 	bl	80048b4 <vPortExitCritical>
                return pdPASS;
 8002636:	2301      	movs	r3, #1
 8002638:	e07d      	b.n	8002736 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d110      	bne.n	8002662 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002640:	f002 f938 	bl	80048b4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002646:	4618      	mov	r0, r3
 8002648:	f004 fc30 	bl	8006eac <SEGGER_SYSVIEW_ShrinkId>
 800264c:	68ba      	ldr	r2, [r7, #8]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	460b      	mov	r3, r1
 8002656:	4601      	mov	r1, r0
 8002658:	205a      	movs	r0, #90	; 0x5a
 800265a:	f003 ff0f 	bl	800647c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 800265e:	2300      	movs	r3, #0
 8002660:	e069      	b.n	8002736 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002664:	2b00      	cmp	r3, #0
 8002666:	d106      	bne.n	8002676 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002668:	f107 0314 	add.w	r3, r7, #20
 800266c:	4618      	mov	r0, r3
 800266e:	f001 f9cf 	bl	8003a10 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002672:	2301      	movs	r3, #1
 8002674:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002676:	f002 f91d 	bl	80048b4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800267a:	f000 fe47 	bl	800330c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800267e:	f002 f8e9 	bl	8004854 <vPortEnterCritical>
 8002682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002684:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002688:	b25b      	sxtb	r3, r3
 800268a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268e:	d103      	bne.n	8002698 <xQueueGenericSend+0x1a0>
 8002690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800269e:	b25b      	sxtb	r3, r3
 80026a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a4:	d103      	bne.n	80026ae <xQueueGenericSend+0x1b6>
 80026a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026ae:	f002 f901 	bl	80048b4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80026b2:	1d3a      	adds	r2, r7, #4
 80026b4:	f107 0314 	add.w	r3, r7, #20
 80026b8:	4611      	mov	r1, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f001 f9be 	bl	8003a3c <xTaskCheckForTimeOut>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d124      	bne.n	8002710 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80026c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026c8:	f000 fb02 	bl	8002cd0 <prvIsQueueFull>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d018      	beq.n	8002704 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80026d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d4:	3310      	adds	r3, #16
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	4611      	mov	r1, r2
 80026da:	4618      	mov	r0, r3
 80026dc:	f001 f8e0 	bl	80038a0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80026e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026e2:	f000 fa8d 	bl	8002c00 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80026e6:	f000 fe1f 	bl	8003328 <xTaskResumeAll>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f47f af62 	bne.w	80025b6 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80026f2:	4b13      	ldr	r3, [pc, #76]	; (8002740 <xQueueGenericSend+0x248>)
 80026f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	f3bf 8f4f 	dsb	sy
 80026fe:	f3bf 8f6f 	isb	sy
 8002702:	e758      	b.n	80025b6 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002704:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002706:	f000 fa7b 	bl	8002c00 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800270a:	f000 fe0d 	bl	8003328 <xTaskResumeAll>
 800270e:	e752      	b.n	80025b6 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002710:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002712:	f000 fa75 	bl	8002c00 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002716:	f000 fe07 	bl	8003328 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 800271a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271c:	4618      	mov	r0, r3
 800271e:	f004 fbc5 	bl	8006eac <SEGGER_SYSVIEW_ShrinkId>
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	460b      	mov	r3, r1
 800272c:	4601      	mov	r1, r0
 800272e:	205a      	movs	r0, #90	; 0x5a
 8002730:	f003 fea4 	bl	800647c <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002734:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002736:	4618      	mov	r0, r3
 8002738:	3738      	adds	r7, #56	; 0x38
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	e000ed04 	.word	0xe000ed04

08002744 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b090      	sub	sp, #64	; 0x40
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
 8002750:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002758:	2b00      	cmp	r3, #0
 800275a:	d10a      	bne.n	8002772 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 800275c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002760:	f383 8811 	msr	BASEPRI, r3
 8002764:	f3bf 8f6f 	isb	sy
 8002768:	f3bf 8f4f 	dsb	sy
 800276c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800276e:	bf00      	nop
 8002770:	e7fe      	b.n	8002770 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d103      	bne.n	8002780 <xQueueGenericSendFromISR+0x3c>
 8002778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <xQueueGenericSendFromISR+0x40>
 8002780:	2301      	movs	r3, #1
 8002782:	e000      	b.n	8002786 <xQueueGenericSendFromISR+0x42>
 8002784:	2300      	movs	r3, #0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10a      	bne.n	80027a0 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800278a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800278e:	f383 8811 	msr	BASEPRI, r3
 8002792:	f3bf 8f6f 	isb	sy
 8002796:	f3bf 8f4f 	dsb	sy
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800279c:	bf00      	nop
 800279e:	e7fe      	b.n	800279e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d103      	bne.n	80027ae <xQueueGenericSendFromISR+0x6a>
 80027a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d101      	bne.n	80027b2 <xQueueGenericSendFromISR+0x6e>
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <xQueueGenericSendFromISR+0x70>
 80027b2:	2300      	movs	r3, #0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10a      	bne.n	80027ce <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80027b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027bc:	f383 8811 	msr	BASEPRI, r3
 80027c0:	f3bf 8f6f 	isb	sy
 80027c4:	f3bf 8f4f 	dsb	sy
 80027c8:	623b      	str	r3, [r7, #32]
    }
 80027ca:	bf00      	nop
 80027cc:	e7fe      	b.n	80027cc <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80027ce:	f002 f92d 	bl	8004a2c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80027d2:	f3ef 8211 	mrs	r2, BASEPRI
 80027d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027da:	f383 8811 	msr	BASEPRI, r3
 80027de:	f3bf 8f6f 	isb	sy
 80027e2:	f3bf 8f4f 	dsb	sy
 80027e6:	61fa      	str	r2, [r7, #28]
 80027e8:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80027ea:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80027ec:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d302      	bcc.n	8002800 <xQueueGenericSendFromISR+0xbc>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d148      	bne.n	8002892 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002802:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800280a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800280c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280e:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002812:	4618      	mov	r0, r3
 8002814:	f004 fb4a 	bl	8006eac <SEGGER_SYSVIEW_ShrinkId>
 8002818:	4601      	mov	r1, r0
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	461a      	mov	r2, r3
 800281e:	2060      	movs	r0, #96	; 0x60
 8002820:	f003 fd5c 	bl	80062dc <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	68b9      	ldr	r1, [r7, #8]
 8002828:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800282a:	f000 f959 	bl	8002ae0 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800282e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002836:	d112      	bne.n	800285e <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	2b00      	cmp	r3, #0
 800283e:	d025      	beq.n	800288c <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002842:	3324      	adds	r3, #36	; 0x24
 8002844:	4618      	mov	r0, r3
 8002846:	f001 f87d 	bl	8003944 <xTaskRemoveFromEventList>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d01d      	beq.n	800288c <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d01a      	beq.n	800288c <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	e016      	b.n	800288c <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800285e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002862:	2b7f      	cmp	r3, #127	; 0x7f
 8002864:	d10a      	bne.n	800287c <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286a:	f383 8811 	msr	BASEPRI, r3
 800286e:	f3bf 8f6f 	isb	sy
 8002872:	f3bf 8f4f 	dsb	sy
 8002876:	617b      	str	r3, [r7, #20]
    }
 8002878:	bf00      	nop
 800287a:	e7fe      	b.n	800287a <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800287c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002880:	3301      	adds	r3, #1
 8002882:	b2db      	uxtb	r3, r3
 8002884:	b25a      	sxtb	r2, r3
 8002886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002888:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800288c:	2301      	movs	r3, #1
 800288e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002890:	e00b      	b.n	80028aa <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002894:	4618      	mov	r0, r3
 8002896:	f004 fb09 	bl	8006eac <SEGGER_SYSVIEW_ShrinkId>
 800289a:	4601      	mov	r1, r0
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	461a      	mov	r2, r3
 80028a0:	2060      	movs	r0, #96	; 0x60
 80028a2:	f003 fd1b 	bl	80062dc <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ac:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80028b4:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80028b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3740      	adds	r7, #64	; 0x40
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80028c0:	b590      	push	{r4, r7, lr}
 80028c2:	b08f      	sub	sp, #60	; 0x3c
 80028c4:	af02      	add	r7, sp, #8
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80028cc:	2300      	movs	r3, #0
 80028ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80028d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10a      	bne.n	80028f0 <xQueueReceive+0x30>
        __asm volatile
 80028da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028de:	f383 8811 	msr	BASEPRI, r3
 80028e2:	f3bf 8f6f 	isb	sy
 80028e6:	f3bf 8f4f 	dsb	sy
 80028ea:	623b      	str	r3, [r7, #32]
    }
 80028ec:	bf00      	nop
 80028ee:	e7fe      	b.n	80028ee <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d103      	bne.n	80028fe <xQueueReceive+0x3e>
 80028f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <xQueueReceive+0x42>
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <xQueueReceive+0x44>
 8002902:	2300      	movs	r3, #0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10a      	bne.n	800291e <xQueueReceive+0x5e>
        __asm volatile
 8002908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800290c:	f383 8811 	msr	BASEPRI, r3
 8002910:	f3bf 8f6f 	isb	sy
 8002914:	f3bf 8f4f 	dsb	sy
 8002918:	61fb      	str	r3, [r7, #28]
    }
 800291a:	bf00      	nop
 800291c:	e7fe      	b.n	800291c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800291e:	f001 f9c1 	bl	8003ca4 <xTaskGetSchedulerState>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d102      	bne.n	800292e <xQueueReceive+0x6e>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <xQueueReceive+0x72>
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <xQueueReceive+0x74>
 8002932:	2300      	movs	r3, #0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d10a      	bne.n	800294e <xQueueReceive+0x8e>
        __asm volatile
 8002938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800293c:	f383 8811 	msr	BASEPRI, r3
 8002940:	f3bf 8f6f 	isb	sy
 8002944:	f3bf 8f4f 	dsb	sy
 8002948:	61bb      	str	r3, [r7, #24]
    }
 800294a:	bf00      	nop
 800294c:	e7fe      	b.n	800294c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800294e:	f001 ff81 	bl	8004854 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002956:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	2b00      	cmp	r3, #0
 800295c:	d02f      	beq.n	80029be <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800295e:	68b9      	ldr	r1, [r7, #8]
 8002960:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002962:	f000 f927 	bl	8002bb4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002968:	4618      	mov	r0, r3
 800296a:	f004 fa9f 	bl	8006eac <SEGGER_SYSVIEW_ShrinkId>
 800296e:	4604      	mov	r4, r0
 8002970:	2000      	movs	r0, #0
 8002972:	f004 fa9b 	bl	8006eac <SEGGER_SYSVIEW_ShrinkId>
 8002976:	4602      	mov	r2, r0
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2101      	movs	r1, #1
 800297c:	9100      	str	r1, [sp, #0]
 800297e:	4621      	mov	r1, r4
 8002980:	205c      	movs	r0, #92	; 0x5c
 8002982:	f003 fd7b 	bl	800647c <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	1e5a      	subs	r2, r3, #1
 800298a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800298e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00f      	beq.n	80029b6 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002998:	3310      	adds	r3, #16
 800299a:	4618      	mov	r0, r3
 800299c:	f000 ffd2 	bl	8003944 <xTaskRemoveFromEventList>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d007      	beq.n	80029b6 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80029a6:	4b4d      	ldr	r3, [pc, #308]	; (8002adc <xQueueReceive+0x21c>)
 80029a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	f3bf 8f4f 	dsb	sy
 80029b2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80029b6:	f001 ff7d 	bl	80048b4 <vPortExitCritical>
                return pdPASS;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e08a      	b.n	8002ad4 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d113      	bne.n	80029ec <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80029c4:	f001 ff76 	bl	80048b4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80029c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ca:	4618      	mov	r0, r3
 80029cc:	f004 fa6e 	bl	8006eac <SEGGER_SYSVIEW_ShrinkId>
 80029d0:	4604      	mov	r4, r0
 80029d2:	2000      	movs	r0, #0
 80029d4:	f004 fa6a 	bl	8006eac <SEGGER_SYSVIEW_ShrinkId>
 80029d8:	4602      	mov	r2, r0
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2101      	movs	r1, #1
 80029de:	9100      	str	r1, [sp, #0]
 80029e0:	4621      	mov	r1, r4
 80029e2:	205c      	movs	r0, #92	; 0x5c
 80029e4:	f003 fd4a 	bl	800647c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80029e8:	2300      	movs	r3, #0
 80029ea:	e073      	b.n	8002ad4 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 80029ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d106      	bne.n	8002a00 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80029f2:	f107 0310 	add.w	r3, r7, #16
 80029f6:	4618      	mov	r0, r3
 80029f8:	f001 f80a 	bl	8003a10 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80029fc:	2301      	movs	r3, #1
 80029fe:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002a00:	f001 ff58 	bl	80048b4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002a04:	f000 fc82 	bl	800330c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002a08:	f001 ff24 	bl	8004854 <vPortEnterCritical>
 8002a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a12:	b25b      	sxtb	r3, r3
 8002a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a18:	d103      	bne.n	8002a22 <xQueueReceive+0x162>
 8002a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a28:	b25b      	sxtb	r3, r3
 8002a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a2e:	d103      	bne.n	8002a38 <xQueueReceive+0x178>
 8002a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a38:	f001 ff3c 	bl	80048b4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a3c:	1d3a      	adds	r2, r7, #4
 8002a3e:	f107 0310 	add.w	r3, r7, #16
 8002a42:	4611      	mov	r1, r2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 fff9 	bl	8003a3c <xTaskCheckForTimeOut>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d124      	bne.n	8002a9a <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a52:	f000 f927 	bl	8002ca4 <prvIsQueueEmpty>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d018      	beq.n	8002a8e <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5e:	3324      	adds	r3, #36	; 0x24
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	4611      	mov	r1, r2
 8002a64:	4618      	mov	r0, r3
 8002a66:	f000 ff1b 	bl	80038a0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002a6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a6c:	f000 f8c8 	bl	8002c00 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002a70:	f000 fc5a 	bl	8003328 <xTaskResumeAll>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f47f af69 	bne.w	800294e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002a7c:	4b17      	ldr	r3, [pc, #92]	; (8002adc <xQueueReceive+0x21c>)
 8002a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	f3bf 8f4f 	dsb	sy
 8002a88:	f3bf 8f6f 	isb	sy
 8002a8c:	e75f      	b.n	800294e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002a8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a90:	f000 f8b6 	bl	8002c00 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002a94:	f000 fc48 	bl	8003328 <xTaskResumeAll>
 8002a98:	e759      	b.n	800294e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002a9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a9c:	f000 f8b0 	bl	8002c00 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002aa0:	f000 fc42 	bl	8003328 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002aa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002aa6:	f000 f8fd 	bl	8002ca4 <prvIsQueueEmpty>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f43f af4e 	beq.w	800294e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f004 f9f9 	bl	8006eac <SEGGER_SYSVIEW_ShrinkId>
 8002aba:	4604      	mov	r4, r0
 8002abc:	2000      	movs	r0, #0
 8002abe:	f004 f9f5 	bl	8006eac <SEGGER_SYSVIEW_ShrinkId>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	9100      	str	r1, [sp, #0]
 8002aca:	4621      	mov	r1, r4
 8002acc:	205c      	movs	r0, #92	; 0x5c
 8002ace:	f003 fcd5 	bl	800647c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002ad2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3734      	adds	r7, #52	; 0x34
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd90      	pop	{r4, r7, pc}
 8002adc:	e000ed04 	.word	0xe000ed04

08002ae0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10d      	bne.n	8002b1a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d14d      	bne.n	8002ba2 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f001 f8e8 	bl	8003ce0 <xTaskPriorityDisinherit>
 8002b10:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	609a      	str	r2, [r3, #8]
 8002b18:	e043      	b.n	8002ba2 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d119      	bne.n	8002b54 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6858      	ldr	r0, [r3, #4]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	461a      	mov	r2, r3
 8002b2a:	68b9      	ldr	r1, [r7, #8]
 8002b2c:	f004 fb70 	bl	8007210 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	441a      	add	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d32b      	bcc.n	8002ba2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	605a      	str	r2, [r3, #4]
 8002b52:	e026      	b.n	8002ba2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	68d8      	ldr	r0, [r3, #12]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	68b9      	ldr	r1, [r7, #8]
 8002b60:	f004 fb56 	bl	8007210 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	68da      	ldr	r2, [r3, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6c:	425b      	negs	r3, r3
 8002b6e:	441a      	add	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	68da      	ldr	r2, [r3, #12]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d207      	bcs.n	8002b90 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	425b      	negs	r3, r3
 8002b8a:	441a      	add	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d105      	bne.n	8002ba2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d002      	beq.n	8002ba2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1c5a      	adds	r2, r3, #1
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002baa:	697b      	ldr	r3, [r7, #20]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d018      	beq.n	8002bf8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	441a      	add	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68da      	ldr	r2, [r3, #12]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d303      	bcc.n	8002be8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68d9      	ldr	r1, [r3, #12]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	6838      	ldr	r0, [r7, #0]
 8002bf4:	f004 fb0c 	bl	8007210 <memcpy>
    }
}
 8002bf8:	bf00      	nop
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002c08:	f001 fe24 	bl	8004854 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c12:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c14:	e011      	b.n	8002c3a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d012      	beq.n	8002c44 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3324      	adds	r3, #36	; 0x24
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 fe8e 	bl	8003944 <xTaskRemoveFromEventList>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002c2e:	f000 ff6b 	bl	8003b08 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002c32:	7bfb      	ldrb	r3, [r7, #15]
 8002c34:	3b01      	subs	r3, #1
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	dce9      	bgt.n	8002c16 <prvUnlockQueue+0x16>
 8002c42:	e000      	b.n	8002c46 <prvUnlockQueue+0x46>
                        break;
 8002c44:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	22ff      	movs	r2, #255	; 0xff
 8002c4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002c4e:	f001 fe31 	bl	80048b4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002c52:	f001 fdff 	bl	8004854 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c5c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c5e:	e011      	b.n	8002c84 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d012      	beq.n	8002c8e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3310      	adds	r3, #16
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f000 fe69 	bl	8003944 <xTaskRemoveFromEventList>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002c78:	f000 ff46 	bl	8003b08 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002c7c:	7bbb      	ldrb	r3, [r7, #14]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	dce9      	bgt.n	8002c60 <prvUnlockQueue+0x60>
 8002c8c:	e000      	b.n	8002c90 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002c8e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	22ff      	movs	r2, #255	; 0xff
 8002c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002c98:	f001 fe0c 	bl	80048b4 <vPortExitCritical>
}
 8002c9c:	bf00      	nop
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002cac:	f001 fdd2 	bl	8004854 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d102      	bne.n	8002cbe <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	e001      	b.n	8002cc2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002cc2:	f001 fdf7 	bl	80048b4 <vPortExitCritical>

    return xReturn;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002cd8:	f001 fdbc 	bl	8004854 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d102      	bne.n	8002cee <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	e001      	b.n	8002cf2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002cf2:	f001 fddf 	bl	80048b4 <vPortExitCritical>

    return xReturn;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	e01e      	b.n	8002d4e <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002d10:	4a13      	ldr	r2, [pc, #76]	; (8002d60 <vQueueAddToRegistry+0x60>)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d115      	bne.n	8002d48 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002d1c:	4910      	ldr	r1, [pc, #64]	; (8002d60 <vQueueAddToRegistry+0x60>)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002d26:	4a0e      	ldr	r2, [pc, #56]	; (8002d60 <vQueueAddToRegistry+0x60>)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f004 f8b9 	bl	8006eac <SEGGER_SYSVIEW_ShrinkId>
 8002d3a:	4601      	mov	r1, r0
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	2071      	movs	r0, #113	; 0x71
 8002d42:	f003 facb 	bl	80062dc <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002d46:	e006      	b.n	8002d56 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2b07      	cmp	r3, #7
 8002d52:	d9dd      	bls.n	8002d10 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002d54:	bf00      	nop
 8002d56:	bf00      	nop
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	200143c0 	.word	0x200143c0

08002d64 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002d74:	f001 fd6e 	bl	8004854 <vPortEnterCritical>
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d7e:	b25b      	sxtb	r3, r3
 8002d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d84:	d103      	bne.n	8002d8e <vQueueWaitForMessageRestricted+0x2a>
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d94:	b25b      	sxtb	r3, r3
 8002d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9a:	d103      	bne.n	8002da4 <vQueueWaitForMessageRestricted+0x40>
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002da4:	f001 fd86 	bl	80048b4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d106      	bne.n	8002dbe <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	3324      	adds	r3, #36	; 0x24
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	68b9      	ldr	r1, [r7, #8]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f000 fd95 	bl	80038e8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002dbe:	6978      	ldr	r0, [r7, #20]
 8002dc0:	f7ff ff1e 	bl	8002c00 <prvUnlockQueue>
    }
 8002dc4:	bf00      	nop
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08c      	sub	sp, #48	; 0x30
 8002dd0:	af04      	add	r7, sp, #16
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ddc:	88fb      	ldrh	r3, [r7, #6]
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4618      	mov	r0, r3
 8002de2:	f001 fe63 	bl	8004aac <pvPortMalloc>
 8002de6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00e      	beq.n	8002e0c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002dee:	2058      	movs	r0, #88	; 0x58
 8002df0:	f001 fe5c 	bl	8004aac <pvPortMalloc>
 8002df4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	631a      	str	r2, [r3, #48]	; 0x30
 8002e02:	e005      	b.n	8002e10 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002e04:	6978      	ldr	r0, [r7, #20]
 8002e06:	f001 ff31 	bl	8004c6c <vPortFree>
 8002e0a:	e001      	b.n	8002e10 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d013      	beq.n	8002e3e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e16:	88fa      	ldrh	r2, [r7, #6]
 8002e18:	2300      	movs	r3, #0
 8002e1a:	9303      	str	r3, [sp, #12]
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	9302      	str	r3, [sp, #8]
 8002e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e22:	9301      	str	r3, [sp, #4]
 8002e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	68b9      	ldr	r1, [r7, #8]
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 f80e 	bl	8002e4e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002e32:	69f8      	ldr	r0, [r7, #28]
 8002e34:	f000 f8a2 	bl	8002f7c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	61bb      	str	r3, [r7, #24]
 8002e3c:	e002      	b.n	8002e44 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e42:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002e44:	69bb      	ldr	r3, [r7, #24]
    }
 8002e46:	4618      	mov	r0, r3
 8002e48:	3720      	adds	r7, #32
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b088      	sub	sp, #32
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	60b9      	str	r1, [r7, #8]
 8002e58:	607a      	str	r2, [r7, #4]
 8002e5a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	461a      	mov	r2, r3
 8002e66:	21a5      	movs	r1, #165	; 0xa5
 8002e68:	f004 f9e0 	bl	800722c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e76:	3b01      	subs	r3, #1
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	f023 0307 	bic.w	r3, r3, #7
 8002e84:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00a      	beq.n	8002ea6 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e94:	f383 8811 	msr	BASEPRI, r3
 8002e98:	f3bf 8f6f 	isb	sy
 8002e9c:	f3bf 8f4f 	dsb	sy
 8002ea0:	617b      	str	r3, [r7, #20]
    }
 8002ea2:	bf00      	nop
 8002ea4:	e7fe      	b.n	8002ea4 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d01f      	beq.n	8002eec <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002eac:	2300      	movs	r3, #0
 8002eae:	61fb      	str	r3, [r7, #28]
 8002eb0:	e012      	b.n	8002ed8 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	7819      	ldrb	r1, [r3, #0]
 8002eba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	3334      	adds	r3, #52	; 0x34
 8002ec2:	460a      	mov	r2, r1
 8002ec4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	4413      	add	r3, r2
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d006      	beq.n	8002ee0 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	61fb      	str	r3, [r7, #28]
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	2b09      	cmp	r3, #9
 8002edc:	d9e9      	bls.n	8002eb2 <prvInitialiseNewTask+0x64>
 8002ede:	e000      	b.n	8002ee2 <prvInitialiseNewTask+0x94>
            {
                break;
 8002ee0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002eea:	e003      	b.n	8002ef4 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d901      	bls.n	8002efe <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002efa:	2304      	movs	r3, #4
 8002efc:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f02:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f08:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f12:	3304      	adds	r3, #4
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff f96b 	bl	80021f0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1c:	3318      	adds	r3, #24
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff f966 	bl	80021f0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f28:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2c:	f1c3 0205 	rsb	r2, r3, #5
 8002f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f32:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f38:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3c:	3350      	adds	r3, #80	; 0x50
 8002f3e:	2204      	movs	r2, #4
 8002f40:	2100      	movs	r1, #0
 8002f42:	4618      	mov	r0, r3
 8002f44:	f004 f972 	bl	800722c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4a:	3354      	adds	r3, #84	; 0x54
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	2100      	movs	r1, #0
 8002f50:	4618      	mov	r0, r3
 8002f52:	f004 f96b 	bl	800722c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	68f9      	ldr	r1, [r7, #12]
 8002f5a:	69b8      	ldr	r0, [r7, #24]
 8002f5c:	f001 faca 	bl	80044f4 <pxPortInitialiseStack>
 8002f60:	4602      	mov	r2, r0
 8002f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f64:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d002      	beq.n	8002f72 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f70:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002f72:	bf00      	nop
 8002f74:	3720      	adds	r7, #32
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002f7c:	b5b0      	push	{r4, r5, r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af02      	add	r7, sp, #8
 8002f82:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002f84:	f001 fc66 	bl	8004854 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002f88:	4b3b      	ldr	r3, [pc, #236]	; (8003078 <prvAddNewTaskToReadyList+0xfc>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	4a3a      	ldr	r2, [pc, #232]	; (8003078 <prvAddNewTaskToReadyList+0xfc>)
 8002f90:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002f92:	4b3a      	ldr	r3, [pc, #232]	; (800307c <prvAddNewTaskToReadyList+0x100>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d109      	bne.n	8002fae <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002f9a:	4a38      	ldr	r2, [pc, #224]	; (800307c <prvAddNewTaskToReadyList+0x100>)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002fa0:	4b35      	ldr	r3, [pc, #212]	; (8003078 <prvAddNewTaskToReadyList+0xfc>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d110      	bne.n	8002fca <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002fa8:	f000 fdd2 	bl	8003b50 <prvInitialiseTaskLists>
 8002fac:	e00d      	b.n	8002fca <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002fae:	4b34      	ldr	r3, [pc, #208]	; (8003080 <prvAddNewTaskToReadyList+0x104>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d109      	bne.n	8002fca <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002fb6:	4b31      	ldr	r3, [pc, #196]	; (800307c <prvAddNewTaskToReadyList+0x100>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d802      	bhi.n	8002fca <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002fc4:	4a2d      	ldr	r2, [pc, #180]	; (800307c <prvAddNewTaskToReadyList+0x100>)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002fca:	4b2e      	ldr	r3, [pc, #184]	; (8003084 <prvAddNewTaskToReadyList+0x108>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	4a2c      	ldr	r2, [pc, #176]	; (8003084 <prvAddNewTaskToReadyList+0x108>)
 8002fd2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002fd4:	4b2b      	ldr	r3, [pc, #172]	; (8003084 <prvAddNewTaskToReadyList+0x108>)
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d016      	beq.n	8003010 <prvAddNewTaskToReadyList+0x94>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f003 fe3b 	bl	8006c60 <SEGGER_SYSVIEW_OnTaskCreate>
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	461d      	mov	r5, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	461c      	mov	r4, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	1ae3      	subs	r3, r4, r3
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	462b      	mov	r3, r5
 800300c:	f001 ffd0 	bl	8004fb0 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4618      	mov	r0, r3
 8003014:	f003 fea8 	bl	8006d68 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301c:	2201      	movs	r2, #1
 800301e:	409a      	lsls	r2, r3
 8003020:	4b19      	ldr	r3, [pc, #100]	; (8003088 <prvAddNewTaskToReadyList+0x10c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4313      	orrs	r3, r2
 8003026:	4a18      	ldr	r2, [pc, #96]	; (8003088 <prvAddNewTaskToReadyList+0x10c>)
 8003028:	6013      	str	r3, [r2, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800302e:	4613      	mov	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4a15      	ldr	r2, [pc, #84]	; (800308c <prvAddNewTaskToReadyList+0x110>)
 8003038:	441a      	add	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	3304      	adds	r3, #4
 800303e:	4619      	mov	r1, r3
 8003040:	4610      	mov	r0, r2
 8003042:	f7ff f8e2 	bl	800220a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003046:	f001 fc35 	bl	80048b4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800304a:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <prvAddNewTaskToReadyList+0x104>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00e      	beq.n	8003070 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003052:	4b0a      	ldr	r3, [pc, #40]	; (800307c <prvAddNewTaskToReadyList+0x100>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305c:	429a      	cmp	r2, r3
 800305e:	d207      	bcs.n	8003070 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003060:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <prvAddNewTaskToReadyList+0x114>)
 8003062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	f3bf 8f4f 	dsb	sy
 800306c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003070:	bf00      	nop
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bdb0      	pop	{r4, r5, r7, pc}
 8003078:	2000010c 	.word	0x2000010c
 800307c:	20000034 	.word	0x20000034
 8003080:	20000118 	.word	0x20000118
 8003084:	20000128 	.word	0x20000128
 8003088:	20000114 	.word	0x20000114
 800308c:	20000038 	.word	0x20000038
 8003090:	e000ed04 	.word	0xe000ed04

08003094 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 800309c:	f001 fbda 	bl	8004854 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d102      	bne.n	80030ac <uxTaskPriorityGet+0x18>
 80030a6:	4b07      	ldr	r3, [pc, #28]	; (80030c4 <uxTaskPriorityGet+0x30>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	e000      	b.n	80030ae <uxTaskPriorityGet+0x1a>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b4:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 80030b6:	f001 fbfd 	bl	80048b4 <vPortExitCritical>

        return uxReturn;
 80030ba:	68bb      	ldr	r3, [r7, #8]
    }
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	20000034 	.word	0x20000034

080030c8 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b08a      	sub	sp, #40	; 0x28
 80030cc:	af02      	add	r7, sp, #8
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61fb      	str	r3, [r7, #28]

        configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	2b04      	cmp	r3, #4
 80030da:	d90a      	bls.n	80030f2 <vTaskPrioritySet+0x2a>
        __asm volatile
 80030dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e0:	f383 8811 	msr	BASEPRI, r3
 80030e4:	f3bf 8f6f 	isb	sy
 80030e8:	f3bf 8f4f 	dsb	sy
 80030ec:	60fb      	str	r3, [r7, #12]
    }
 80030ee:	bf00      	nop
 80030f0:	e7fe      	b.n	80030f0 <vTaskPrioritySet+0x28>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	2b04      	cmp	r3, #4
 80030f6:	d901      	bls.n	80030fc <vTaskPrioritySet+0x34>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80030f8:	2304      	movs	r3, #4
 80030fa:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 80030fc:	f001 fbaa 	bl	8004854 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d102      	bne.n	800310c <vTaskPrioritySet+0x44>
 8003106:	4b4c      	ldr	r3, [pc, #304]	; (8003238 <vTaskPrioritySet+0x170>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	e000      	b.n	800310e <vTaskPrioritySet+0x46>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	4618      	mov	r0, r3
 8003114:	f003 feca 	bl	8006eac <SEGGER_SYSVIEW_ShrinkId>
 8003118:	4603      	mov	r3, r0
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	4619      	mov	r1, r3
 800311e:	2028      	movs	r0, #40	; 0x28
 8003120:	f003 f8dc 	bl	80062dc <SEGGER_SYSVIEW_RecordU32x2>
 8003124:	69b8      	ldr	r0, [r7, #24]
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003130:	461a      	mov	r2, r3
 8003132:	2300      	movs	r3, #0
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	4613      	mov	r3, r2
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	f001 ffa1 	bl	8005080 <SYSVIEW_UpdateTask>

            #if ( configUSE_MUTEXES == 1 )
                {
                    uxCurrentBasePriority = pxTCB->uxBasePriority;
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003142:	617b      	str	r3, [r7, #20]
                {
                    uxCurrentBasePriority = pxTCB->uxPriority;
                }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d06f      	beq.n	800322c <vTaskPrioritySet+0x164>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	429a      	cmp	r2, r3
 8003152:	d90d      	bls.n	8003170 <vTaskPrioritySet+0xa8>
                {
                    if( pxTCB != pxCurrentTCB )
 8003154:	4b38      	ldr	r3, [pc, #224]	; (8003238 <vTaskPrioritySet+0x170>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	429a      	cmp	r2, r3
 800315c:	d00f      	beq.n	800317e <vTaskPrioritySet+0xb6>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800315e:	4b36      	ldr	r3, [pc, #216]	; (8003238 <vTaskPrioritySet+0x170>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d309      	bcc.n	800317e <vTaskPrioritySet+0xb6>
                        {
                            xYieldRequired = pdTRUE;
 800316a:	2301      	movs	r3, #1
 800316c:	61fb      	str	r3, [r7, #28]
 800316e:	e006      	b.n	800317e <vTaskPrioritySet+0xb6>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 8003170:	4b31      	ldr	r3, [pc, #196]	; (8003238 <vTaskPrioritySet+0x170>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	429a      	cmp	r2, r3
 8003178:	d101      	bne.n	800317e <vTaskPrioritySet+0xb6>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 800317a:	2301      	movs	r3, #1
 800317c:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003182:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* Only change the priority being used if the task is not
                         * currently using an inherited priority. */
                        if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318c:	429a      	cmp	r2, r3
 800318e:	d102      	bne.n	8003196 <vTaskPrioritySet+0xce>
                        {
                            pxTCB->uxPriority = uxNewPriority;
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	62da      	str	r2, [r3, #44]	; 0x2c
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        /* The base priority gets set whatever. */
                        pxTCB->uxBasePriority = uxNewPriority;
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	649a      	str	r2, [r3, #72]	; 0x48
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	db04      	blt.n	80031ae <vTaskPrioritySet+0xe6>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	f1c3 0205 	rsb	r2, r3, #5
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	6959      	ldr	r1, [r3, #20]
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	4613      	mov	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4a1f      	ldr	r2, [pc, #124]	; (800323c <vTaskPrioritySet+0x174>)
 80031be:	4413      	add	r3, r2
 80031c0:	4299      	cmp	r1, r3
 80031c2:	d128      	bne.n	8003216 <vTaskPrioritySet+0x14e>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to it's new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	3304      	adds	r3, #4
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff f87b 	bl	80022c4 <uxListRemove>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d109      	bne.n	80031e8 <vTaskPrioritySet+0x120>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 80031d4:	2201      	movs	r2, #1
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	43da      	mvns	r2, r3
 80031de:	4b18      	ldr	r3, [pc, #96]	; (8003240 <vTaskPrioritySet+0x178>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4013      	ands	r3, r2
 80031e4:	4a16      	ldr	r2, [pc, #88]	; (8003240 <vTaskPrioritySet+0x178>)
 80031e6:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

					prvReaddTaskToReadyList( pxTCB );
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ec:	2201      	movs	r2, #1
 80031ee:	409a      	lsls	r2, r3
 80031f0:	4b13      	ldr	r3, [pc, #76]	; (8003240 <vTaskPrioritySet+0x178>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	4a12      	ldr	r2, [pc, #72]	; (8003240 <vTaskPrioritySet+0x178>)
 80031f8:	6013      	str	r3, [r2, #0]
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031fe:	4613      	mov	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4a0d      	ldr	r2, [pc, #52]	; (800323c <vTaskPrioritySet+0x174>)
 8003208:	441a      	add	r2, r3
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	3304      	adds	r3, #4
 800320e:	4619      	mov	r1, r3
 8003210:	4610      	mov	r0, r2
 8003212:	f7fe fffa 	bl	800220a <vListInsertEnd>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d007      	beq.n	800322c <vTaskPrioritySet+0x164>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 800321c:	4b09      	ldr	r3, [pc, #36]	; (8003244 <vTaskPrioritySet+0x17c>)
 800321e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	f3bf 8f4f 	dsb	sy
 8003228:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 800322c:	f001 fb42 	bl	80048b4 <vPortExitCritical>
    }
 8003230:	bf00      	nop
 8003232:	3720      	adds	r7, #32
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	20000034 	.word	0x20000034
 800323c:	20000038 	.word	0x20000038
 8003240:	20000114 	.word	0x20000114
 8003244:	e000ed04 	.word	0xe000ed04

08003248 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800324e:	4b27      	ldr	r3, [pc, #156]	; (80032ec <vTaskStartScheduler+0xa4>)
 8003250:	9301      	str	r3, [sp, #4]
 8003252:	2300      	movs	r3, #0
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	2300      	movs	r3, #0
 8003258:	2282      	movs	r2, #130	; 0x82
 800325a:	4925      	ldr	r1, [pc, #148]	; (80032f0 <vTaskStartScheduler+0xa8>)
 800325c:	4825      	ldr	r0, [pc, #148]	; (80032f4 <vTaskStartScheduler+0xac>)
 800325e:	f7ff fdb5 	bl	8002dcc <xTaskCreate>
 8003262:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d102      	bne.n	8003270 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800326a:	f000 fe31 	bl	8003ed0 <xTimerCreateTimerTask>
 800326e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d124      	bne.n	80032c0 <vTaskStartScheduler+0x78>
        __asm volatile
 8003276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327a:	f383 8811 	msr	BASEPRI, r3
 800327e:	f3bf 8f6f 	isb	sy
 8003282:	f3bf 8f4f 	dsb	sy
 8003286:	60bb      	str	r3, [r7, #8]
    }
 8003288:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800328a:	4b1b      	ldr	r3, [pc, #108]	; (80032f8 <vTaskStartScheduler+0xb0>)
 800328c:	f04f 32ff 	mov.w	r2, #4294967295
 8003290:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003292:	4b1a      	ldr	r3, [pc, #104]	; (80032fc <vTaskStartScheduler+0xb4>)
 8003294:	2201      	movs	r2, #1
 8003296:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003298:	4b19      	ldr	r3, [pc, #100]	; (8003300 <vTaskStartScheduler+0xb8>)
 800329a:	2200      	movs	r2, #0
 800329c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800329e:	4b19      	ldr	r3, [pc, #100]	; (8003304 <vTaskStartScheduler+0xbc>)
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	4b12      	ldr	r3, [pc, #72]	; (80032ec <vTaskStartScheduler+0xa4>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d102      	bne.n	80032b0 <vTaskStartScheduler+0x68>
 80032aa:	f003 fcbd 	bl	8006c28 <SEGGER_SYSVIEW_OnIdle>
 80032ae:	e004      	b.n	80032ba <vTaskStartScheduler+0x72>
 80032b0:	4b14      	ldr	r3, [pc, #80]	; (8003304 <vTaskStartScheduler+0xbc>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f003 fd15 	bl	8006ce4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80032ba:	f001 f9ab 	bl	8004614 <xPortStartScheduler>
 80032be:	e00e      	b.n	80032de <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c6:	d10a      	bne.n	80032de <vTaskStartScheduler+0x96>
        __asm volatile
 80032c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032cc:	f383 8811 	msr	BASEPRI, r3
 80032d0:	f3bf 8f6f 	isb	sy
 80032d4:	f3bf 8f4f 	dsb	sy
 80032d8:	607b      	str	r3, [r7, #4]
    }
 80032da:	bf00      	nop
 80032dc:	e7fe      	b.n	80032dc <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80032de:	4b0a      	ldr	r3, [pc, #40]	; (8003308 <vTaskStartScheduler+0xc0>)
 80032e0:	681b      	ldr	r3, [r3, #0]
}
 80032e2:	bf00      	nop
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	20000130 	.word	0x20000130
 80032f0:	0800728c 	.word	0x0800728c
 80032f4:	08003b21 	.word	0x08003b21
 80032f8:	2000012c 	.word	0x2000012c
 80032fc:	20000118 	.word	0x20000118
 8003300:	20000110 	.word	0x20000110
 8003304:	20000034 	.word	0x20000034
 8003308:	2000000c 	.word	0x2000000c

0800330c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003310:	4b04      	ldr	r3, [pc, #16]	; (8003324 <vTaskSuspendAll+0x18>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	3301      	adds	r3, #1
 8003316:	4a03      	ldr	r2, [pc, #12]	; (8003324 <vTaskSuspendAll+0x18>)
 8003318:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800331a:	bf00      	nop
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	20000134 	.word	0x20000134

08003328 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800332e:	2300      	movs	r3, #0
 8003330:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003332:	2300      	movs	r3, #0
 8003334:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003336:	4b43      	ldr	r3, [pc, #268]	; (8003444 <xTaskResumeAll+0x11c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10a      	bne.n	8003354 <xTaskResumeAll+0x2c>
        __asm volatile
 800333e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003342:	f383 8811 	msr	BASEPRI, r3
 8003346:	f3bf 8f6f 	isb	sy
 800334a:	f3bf 8f4f 	dsb	sy
 800334e:	603b      	str	r3, [r7, #0]
    }
 8003350:	bf00      	nop
 8003352:	e7fe      	b.n	8003352 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003354:	f001 fa7e 	bl	8004854 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003358:	4b3a      	ldr	r3, [pc, #232]	; (8003444 <xTaskResumeAll+0x11c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	3b01      	subs	r3, #1
 800335e:	4a39      	ldr	r2, [pc, #228]	; (8003444 <xTaskResumeAll+0x11c>)
 8003360:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003362:	4b38      	ldr	r3, [pc, #224]	; (8003444 <xTaskResumeAll+0x11c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d165      	bne.n	8003436 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800336a:	4b37      	ldr	r3, [pc, #220]	; (8003448 <xTaskResumeAll+0x120>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d061      	beq.n	8003436 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003372:	e032      	b.n	80033da <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003374:	4b35      	ldr	r3, [pc, #212]	; (800344c <xTaskResumeAll+0x124>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	3318      	adds	r3, #24
 8003380:	4618      	mov	r0, r3
 8003382:	f7fe ff9f 	bl	80022c4 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	3304      	adds	r3, #4
 800338a:	4618      	mov	r0, r3
 800338c:	f7fe ff9a 	bl	80022c4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4618      	mov	r0, r3
 8003394:	f003 fce8 	bl	8006d68 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339c:	2201      	movs	r2, #1
 800339e:	409a      	lsls	r2, r3
 80033a0:	4b2b      	ldr	r3, [pc, #172]	; (8003450 <xTaskResumeAll+0x128>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	4a2a      	ldr	r2, [pc, #168]	; (8003450 <xTaskResumeAll+0x128>)
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ae:	4613      	mov	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4a27      	ldr	r2, [pc, #156]	; (8003454 <xTaskResumeAll+0x12c>)
 80033b8:	441a      	add	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	3304      	adds	r3, #4
 80033be:	4619      	mov	r1, r3
 80033c0:	4610      	mov	r0, r2
 80033c2:	f7fe ff22 	bl	800220a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ca:	4b23      	ldr	r3, [pc, #140]	; (8003458 <xTaskResumeAll+0x130>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d302      	bcc.n	80033da <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80033d4:	4b21      	ldr	r3, [pc, #132]	; (800345c <xTaskResumeAll+0x134>)
 80033d6:	2201      	movs	r2, #1
 80033d8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033da:	4b1c      	ldr	r3, [pc, #112]	; (800344c <xTaskResumeAll+0x124>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1c8      	bne.n	8003374 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80033e8:	f000 fc30 	bl	8003c4c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80033ec:	4b1c      	ldr	r3, [pc, #112]	; (8003460 <xTaskResumeAll+0x138>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d010      	beq.n	800341a <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80033f8:	f000 f92c 	bl	8003654 <xTaskIncrementTick>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d002      	beq.n	8003408 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8003402:	4b16      	ldr	r3, [pc, #88]	; (800345c <xTaskResumeAll+0x134>)
 8003404:	2201      	movs	r2, #1
 8003406:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3b01      	subs	r3, #1
 800340c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1f1      	bne.n	80033f8 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8003414:	4b12      	ldr	r3, [pc, #72]	; (8003460 <xTaskResumeAll+0x138>)
 8003416:	2200      	movs	r2, #0
 8003418:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800341a:	4b10      	ldr	r3, [pc, #64]	; (800345c <xTaskResumeAll+0x134>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d009      	beq.n	8003436 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003422:	2301      	movs	r3, #1
 8003424:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003426:	4b0f      	ldr	r3, [pc, #60]	; (8003464 <xTaskResumeAll+0x13c>)
 8003428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800342c:	601a      	str	r2, [r3, #0]
 800342e:	f3bf 8f4f 	dsb	sy
 8003432:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003436:	f001 fa3d 	bl	80048b4 <vPortExitCritical>

    return xAlreadyYielded;
 800343a:	68bb      	ldr	r3, [r7, #8]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	20000134 	.word	0x20000134
 8003448:	2000010c 	.word	0x2000010c
 800344c:	200000cc 	.word	0x200000cc
 8003450:	20000114 	.word	0x20000114
 8003454:	20000038 	.word	0x20000038
 8003458:	20000034 	.word	0x20000034
 800345c:	20000120 	.word	0x20000120
 8003460:	2000011c 	.word	0x2000011c
 8003464:	e000ed04 	.word	0xe000ed04

08003468 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800346e:	4b05      	ldr	r3, [pc, #20]	; (8003484 <xTaskGetTickCount+0x1c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003474:	687b      	ldr	r3, [r7, #4]
}
 8003476:	4618      	mov	r0, r3
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	20000110 	.word	0x20000110

08003488 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800348e:	f001 facd 	bl	8004a2c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003492:	2300      	movs	r3, #0
 8003494:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003496:	4b04      	ldr	r3, [pc, #16]	; (80034a8 <xTaskGetTickCountFromISR+0x20>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800349c:	683b      	ldr	r3, [r7, #0]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	20000110 	.word	0x20000110

080034ac <prvSearchForNameWithinSingleList>:

#if ( INCLUDE_xTaskGetHandle == 1 )

    static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
                                                     const char pcNameToQuery[] )
    {
 80034ac:	b480      	push	{r7}
 80034ae:	b08b      	sub	sp, #44	; 0x2c
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
        TCB_t * pxNextTCB, * pxFirstTCB, * pxReturn = NULL;
 80034b6:	2300      	movs	r3, #0
 80034b8:	627b      	str	r3, [r7, #36]	; 0x24
        char cNextChar;
        BaseType_t xBreakLoop;

        /* This function is called with the scheduler suspended. */

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d05b      	beq.n	800357a <prvSearchForNameWithinSingleList+0xce>
        {
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	61bb      	str	r3, [r7, #24]
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	605a      	str	r2, [r3, #4]
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	3308      	adds	r3, #8
 80034d8:	429a      	cmp	r2, r3
 80034da:	d104      	bne.n	80034e6 <prvSearchForNameWithinSingleList+0x3a>
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	605a      	str	r2, [r3, #4]
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	617b      	str	r3, [r7, #20]

            do
            {
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	613b      	str	r3, [r7, #16]
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	605a      	str	r2, [r3, #4]
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	3308      	adds	r3, #8
 8003504:	429a      	cmp	r2, r3
 8003506:	d104      	bne.n	8003512 <prvSearchForNameWithinSingleList+0x66>
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	605a      	str	r2, [r3, #4]
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	60fb      	str	r3, [r7, #12]

                /* Check each character in the name looking for a match or
                 * mismatch. */
                xBreakLoop = pdFALSE;
 800351a:	2300      	movs	r3, #0
 800351c:	61fb      	str	r3, [r7, #28]

                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800351e:	2300      	movs	r3, #0
 8003520:	623b      	str	r3, [r7, #32]
 8003522:	e01c      	b.n	800355e <prvSearchForNameWithinSingleList+0xb2>
                {
                    cNextChar = pxNextTCB->pcTaskName[ x ];
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	4413      	add	r3, r2
 800352a:	3334      	adds	r3, #52	; 0x34
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	72fb      	strb	r3, [r7, #11]

                    if( cNextChar != pcNameToQuery[ x ] )
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	4413      	add	r3, r2
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	7afa      	ldrb	r2, [r7, #11]
 800353a:	429a      	cmp	r2, r3
 800353c:	d002      	beq.n	8003544 <prvSearchForNameWithinSingleList+0x98>
                    {
                        /* Characters didn't match. */
                        xBreakLoop = pdTRUE;
 800353e:	2301      	movs	r3, #1
 8003540:	61fb      	str	r3, [r7, #28]
 8003542:	e006      	b.n	8003552 <prvSearchForNameWithinSingleList+0xa6>
                    }
                    else if( cNextChar == ( char ) 0x00 )
 8003544:	7afb      	ldrb	r3, [r7, #11]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d103      	bne.n	8003552 <prvSearchForNameWithinSingleList+0xa6>
                    {
                        /* Both strings terminated, a match must have been
                         * found. */
                        pxReturn = pxNextTCB;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	627b      	str	r3, [r7, #36]	; 0x24
                        xBreakLoop = pdTRUE;
 800354e:	2301      	movs	r3, #1
 8003550:	61fb      	str	r3, [r7, #28]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    if( xBreakLoop != pdFALSE )
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d106      	bne.n	8003566 <prvSearchForNameWithinSingleList+0xba>
                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	3301      	adds	r3, #1
 800355c:	623b      	str	r3, [r7, #32]
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	2b09      	cmp	r3, #9
 8003562:	d9df      	bls.n	8003524 <prvSearchForNameWithinSingleList+0x78>
 8003564:	e000      	b.n	8003568 <prvSearchForNameWithinSingleList+0xbc>
                    {
                        break;
 8003566:	bf00      	nop
                    }
                }

                if( pxReturn != NULL )
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	2b00      	cmp	r3, #0
 800356c:	d104      	bne.n	8003578 <prvSearchForNameWithinSingleList+0xcc>
                {
                    /* The handle has been found. */
                    break;
                }
            } while( pxNextTCB != pxFirstTCB );
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	429a      	cmp	r2, r3
 8003574:	d1bb      	bne.n	80034ee <prvSearchForNameWithinSingleList+0x42>
 8003576:	e000      	b.n	800357a <prvSearchForNameWithinSingleList+0xce>
                    break;
 8003578:	bf00      	nop
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return pxReturn;
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800357c:	4618      	mov	r0, r3
 800357e:	372c      	adds	r7, #44	; 0x2c
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

    TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
        UBaseType_t uxQueue = configMAX_PRIORITIES;
 8003590:	2305      	movs	r3, #5
 8003592:	617b      	str	r3, [r7, #20]
        TCB_t * pxTCB;

        /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
        configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7fc fe65 	bl	8000264 <strlen>
 800359a:	4603      	mov	r3, r0
 800359c:	2b09      	cmp	r3, #9
 800359e:	d90a      	bls.n	80035b6 <xTaskGetHandle+0x2e>
        __asm volatile
 80035a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a4:	f383 8811 	msr	BASEPRI, r3
 80035a8:	f3bf 8f6f 	isb	sy
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	60fb      	str	r3, [r7, #12]
    }
 80035b2:	bf00      	nop
 80035b4:	e7fe      	b.n	80035b4 <xTaskGetHandle+0x2c>

        vTaskSuspendAll();
 80035b6:	f7ff fea9 	bl	800330c <vTaskSuspendAll>
        {
            /* Search the ready lists. */
            do
            {
                uxQueue--;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	3b01      	subs	r3, #1
 80035be:	617b      	str	r3, [r7, #20]
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	4613      	mov	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4a1d      	ldr	r2, [pc, #116]	; (8003640 <xTaskGetHandle+0xb8>)
 80035cc:	4413      	add	r3, r2
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff ff6b 	bl	80034ac <prvSearchForNameWithinSingleList>
 80035d6:	6138      	str	r0, [r7, #16]

                if( pxTCB != NULL )
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d103      	bne.n	80035e6 <xTaskGetHandle+0x5e>
                {
                    /* Found the handle. */
                    break;
                }
            } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1ea      	bne.n	80035ba <xTaskGetHandle+0x32>
 80035e4:	e000      	b.n	80035e8 <xTaskGetHandle+0x60>
                    break;
 80035e6:	bf00      	nop

            /* Search the delayed lists. */
            if( pxTCB == NULL )
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d106      	bne.n	80035fc <xTaskGetHandle+0x74>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 80035ee:	4b15      	ldr	r3, [pc, #84]	; (8003644 <xTaskGetHandle+0xbc>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff ff59 	bl	80034ac <prvSearchForNameWithinSingleList>
 80035fa:	6138      	str	r0, [r7, #16]
            }

            if( pxTCB == NULL )
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d106      	bne.n	8003610 <xTaskGetHandle+0x88>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 8003602:	4b11      	ldr	r3, [pc, #68]	; (8003648 <xTaskGetHandle+0xc0>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff ff4f 	bl	80034ac <prvSearchForNameWithinSingleList>
 800360e:	6138      	str	r0, [r7, #16]
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
                {
                    if( pxTCB == NULL )
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d104      	bne.n	8003620 <xTaskGetHandle+0x98>
                    {
                        /* Search the suspended list. */
                        pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	480c      	ldr	r0, [pc, #48]	; (800364c <xTaskGetHandle+0xc4>)
 800361a:	f7ff ff47 	bl	80034ac <prvSearchForNameWithinSingleList>
 800361e:	6138      	str	r0, [r7, #16]
                }
            #endif

            #if ( INCLUDE_vTaskDelete == 1 )
                {
                    if( pxTCB == NULL )
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d104      	bne.n	8003630 <xTaskGetHandle+0xa8>
                    {
                        /* Search the deleted list. */
                        pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	4809      	ldr	r0, [pc, #36]	; (8003650 <xTaskGetHandle+0xc8>)
 800362a:	f7ff ff3f 	bl	80034ac <prvSearchForNameWithinSingleList>
 800362e:	6138      	str	r0, [r7, #16]
                    }
                }
            #endif
        }
        ( void ) xTaskResumeAll();
 8003630:	f7ff fe7a 	bl	8003328 <xTaskResumeAll>

        return pxTCB;
 8003634:	693b      	ldr	r3, [r7, #16]
    }
 8003636:	4618      	mov	r0, r3
 8003638:	3718      	adds	r7, #24
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	20000038 	.word	0x20000038
 8003644:	200000c4 	.word	0x200000c4
 8003648:	200000c8 	.word	0x200000c8
 800364c:	200000f8 	.word	0x200000f8
 8003650:	200000e0 	.word	0x200000e0

08003654 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800365a:	2300      	movs	r3, #0
 800365c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800365e:	4b50      	ldr	r3, [pc, #320]	; (80037a0 <xTaskIncrementTick+0x14c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	f040 8092 	bne.w	800378c <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003668:	4b4e      	ldr	r3, [pc, #312]	; (80037a4 <xTaskIncrementTick+0x150>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3301      	adds	r3, #1
 800366e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003670:	4a4c      	ldr	r2, [pc, #304]	; (80037a4 <xTaskIncrementTick+0x150>)
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d120      	bne.n	80036be <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800367c:	4b4a      	ldr	r3, [pc, #296]	; (80037a8 <xTaskIncrementTick+0x154>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <xTaskIncrementTick+0x48>
        __asm volatile
 8003686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368a:	f383 8811 	msr	BASEPRI, r3
 800368e:	f3bf 8f6f 	isb	sy
 8003692:	f3bf 8f4f 	dsb	sy
 8003696:	603b      	str	r3, [r7, #0]
    }
 8003698:	bf00      	nop
 800369a:	e7fe      	b.n	800369a <xTaskIncrementTick+0x46>
 800369c:	4b42      	ldr	r3, [pc, #264]	; (80037a8 <xTaskIncrementTick+0x154>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	4b42      	ldr	r3, [pc, #264]	; (80037ac <xTaskIncrementTick+0x158>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a40      	ldr	r2, [pc, #256]	; (80037a8 <xTaskIncrementTick+0x154>)
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	4a40      	ldr	r2, [pc, #256]	; (80037ac <xTaskIncrementTick+0x158>)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6013      	str	r3, [r2, #0]
 80036b0:	4b3f      	ldr	r3, [pc, #252]	; (80037b0 <xTaskIncrementTick+0x15c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3301      	adds	r3, #1
 80036b6:	4a3e      	ldr	r2, [pc, #248]	; (80037b0 <xTaskIncrementTick+0x15c>)
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	f000 fac7 	bl	8003c4c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80036be:	4b3d      	ldr	r3, [pc, #244]	; (80037b4 <xTaskIncrementTick+0x160>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d34c      	bcc.n	8003762 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036c8:	4b37      	ldr	r3, [pc, #220]	; (80037a8 <xTaskIncrementTick+0x154>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d104      	bne.n	80036dc <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036d2:	4b38      	ldr	r3, [pc, #224]	; (80037b4 <xTaskIncrementTick+0x160>)
 80036d4:	f04f 32ff 	mov.w	r2, #4294967295
 80036d8:	601a      	str	r2, [r3, #0]
                    break;
 80036da:	e042      	b.n	8003762 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036dc:	4b32      	ldr	r3, [pc, #200]	; (80037a8 <xTaskIncrementTick+0x154>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d203      	bcs.n	80036fc <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80036f4:	4a2f      	ldr	r2, [pc, #188]	; (80037b4 <xTaskIncrementTick+0x160>)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80036fa:	e032      	b.n	8003762 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	3304      	adds	r3, #4
 8003700:	4618      	mov	r0, r3
 8003702:	f7fe fddf 	bl	80022c4 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370a:	2b00      	cmp	r3, #0
 800370c:	d004      	beq.n	8003718 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	3318      	adds	r3, #24
 8003712:	4618      	mov	r0, r3
 8003714:	f7fe fdd6 	bl	80022c4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	4618      	mov	r0, r3
 800371c:	f003 fb24 	bl	8006d68 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003724:	2201      	movs	r2, #1
 8003726:	409a      	lsls	r2, r3
 8003728:	4b23      	ldr	r3, [pc, #140]	; (80037b8 <xTaskIncrementTick+0x164>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4313      	orrs	r3, r2
 800372e:	4a22      	ldr	r2, [pc, #136]	; (80037b8 <xTaskIncrementTick+0x164>)
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003736:	4613      	mov	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4413      	add	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4a1f      	ldr	r2, [pc, #124]	; (80037bc <xTaskIncrementTick+0x168>)
 8003740:	441a      	add	r2, r3
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	3304      	adds	r3, #4
 8003746:	4619      	mov	r1, r3
 8003748:	4610      	mov	r0, r2
 800374a:	f7fe fd5e 	bl	800220a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003752:	4b1b      	ldr	r3, [pc, #108]	; (80037c0 <xTaskIncrementTick+0x16c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	429a      	cmp	r2, r3
 800375a:	d3b5      	bcc.n	80036c8 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 800375c:	2301      	movs	r3, #1
 800375e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003760:	e7b2      	b.n	80036c8 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003762:	4b17      	ldr	r3, [pc, #92]	; (80037c0 <xTaskIncrementTick+0x16c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003768:	4914      	ldr	r1, [pc, #80]	; (80037bc <xTaskIncrementTick+0x168>)
 800376a:	4613      	mov	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	440b      	add	r3, r1
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d901      	bls.n	800377e <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 800377a:	2301      	movs	r3, #1
 800377c:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800377e:	4b11      	ldr	r3, [pc, #68]	; (80037c4 <xTaskIncrementTick+0x170>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d007      	beq.n	8003796 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8003786:	2301      	movs	r3, #1
 8003788:	617b      	str	r3, [r7, #20]
 800378a:	e004      	b.n	8003796 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800378c:	4b0e      	ldr	r3, [pc, #56]	; (80037c8 <xTaskIncrementTick+0x174>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	3301      	adds	r3, #1
 8003792:	4a0d      	ldr	r2, [pc, #52]	; (80037c8 <xTaskIncrementTick+0x174>)
 8003794:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003796:	697b      	ldr	r3, [r7, #20]
}
 8003798:	4618      	mov	r0, r3
 800379a:	3718      	adds	r7, #24
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	20000134 	.word	0x20000134
 80037a4:	20000110 	.word	0x20000110
 80037a8:	200000c4 	.word	0x200000c4
 80037ac:	200000c8 	.word	0x200000c8
 80037b0:	20000124 	.word	0x20000124
 80037b4:	2000012c 	.word	0x2000012c
 80037b8:	20000114 	.word	0x20000114
 80037bc:	20000038 	.word	0x20000038
 80037c0:	20000034 	.word	0x20000034
 80037c4:	20000120 	.word	0x20000120
 80037c8:	2000011c 	.word	0x2000011c

080037cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80037d2:	4b2d      	ldr	r3, [pc, #180]	; (8003888 <vTaskSwitchContext+0xbc>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80037da:	4b2c      	ldr	r3, [pc, #176]	; (800388c <vTaskSwitchContext+0xc0>)
 80037dc:	2201      	movs	r2, #1
 80037de:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80037e0:	e04d      	b.n	800387e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80037e2:	4b2a      	ldr	r3, [pc, #168]	; (800388c <vTaskSwitchContext+0xc0>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037e8:	4b29      	ldr	r3, [pc, #164]	; (8003890 <vTaskSwitchContext+0xc4>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	fab3 f383 	clz	r3, r3
 80037f4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80037f6:	7afb      	ldrb	r3, [r7, #11]
 80037f8:	f1c3 031f 	rsb	r3, r3, #31
 80037fc:	617b      	str	r3, [r7, #20]
 80037fe:	4925      	ldr	r1, [pc, #148]	; (8003894 <vTaskSwitchContext+0xc8>)
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	4613      	mov	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4413      	add	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	440b      	add	r3, r1
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10a      	bne.n	8003828 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003816:	f383 8811 	msr	BASEPRI, r3
 800381a:	f3bf 8f6f 	isb	sy
 800381e:	f3bf 8f4f 	dsb	sy
 8003822:	607b      	str	r3, [r7, #4]
    }
 8003824:	bf00      	nop
 8003826:	e7fe      	b.n	8003826 <vTaskSwitchContext+0x5a>
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	4613      	mov	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4a18      	ldr	r2, [pc, #96]	; (8003894 <vTaskSwitchContext+0xc8>)
 8003834:	4413      	add	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	605a      	str	r2, [r3, #4]
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	3308      	adds	r3, #8
 800384a:	429a      	cmp	r2, r3
 800384c:	d104      	bne.n	8003858 <vTaskSwitchContext+0x8c>
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	605a      	str	r2, [r3, #4]
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	4a0e      	ldr	r2, [pc, #56]	; (8003898 <vTaskSwitchContext+0xcc>)
 8003860:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003862:	4b0d      	ldr	r3, [pc, #52]	; (8003898 <vTaskSwitchContext+0xcc>)
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	4b0d      	ldr	r3, [pc, #52]	; (800389c <vTaskSwitchContext+0xd0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	429a      	cmp	r2, r3
 800386c:	d102      	bne.n	8003874 <vTaskSwitchContext+0xa8>
 800386e:	f003 f9db 	bl	8006c28 <SEGGER_SYSVIEW_OnIdle>
}
 8003872:	e004      	b.n	800387e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003874:	4b08      	ldr	r3, [pc, #32]	; (8003898 <vTaskSwitchContext+0xcc>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f003 fa33 	bl	8006ce4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800387e:	bf00      	nop
 8003880:	3718      	adds	r7, #24
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	20000134 	.word	0x20000134
 800388c:	20000120 	.word	0x20000120
 8003890:	20000114 	.word	0x20000114
 8003894:	20000038 	.word	0x20000038
 8003898:	20000034 	.word	0x20000034
 800389c:	20000130 	.word	0x20000130

080038a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d10a      	bne.n	80038c6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80038b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b4:	f383 8811 	msr	BASEPRI, r3
 80038b8:	f3bf 8f6f 	isb	sy
 80038bc:	f3bf 8f4f 	dsb	sy
 80038c0:	60fb      	str	r3, [r7, #12]
    }
 80038c2:	bf00      	nop
 80038c4:	e7fe      	b.n	80038c4 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038c6:	4b07      	ldr	r3, [pc, #28]	; (80038e4 <vTaskPlaceOnEventList+0x44>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	3318      	adds	r3, #24
 80038cc:	4619      	mov	r1, r3
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7fe fcbf 	bl	8002252 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80038d4:	2101      	movs	r1, #1
 80038d6:	6838      	ldr	r0, [r7, #0]
 80038d8:	f000 fa82 	bl	8003de0 <prvAddCurrentTaskToDelayedList>
}
 80038dc:	bf00      	nop
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	20000034 	.word	0x20000034

080038e8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10a      	bne.n	8003910 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80038fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fe:	f383 8811 	msr	BASEPRI, r3
 8003902:	f3bf 8f6f 	isb	sy
 8003906:	f3bf 8f4f 	dsb	sy
 800390a:	617b      	str	r3, [r7, #20]
    }
 800390c:	bf00      	nop
 800390e:	e7fe      	b.n	800390e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003910:	4b0b      	ldr	r3, [pc, #44]	; (8003940 <vTaskPlaceOnEventListRestricted+0x58>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	3318      	adds	r3, #24
 8003916:	4619      	mov	r1, r3
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f7fe fc76 	bl	800220a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003924:	f04f 33ff 	mov.w	r3, #4294967295
 8003928:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800392a:	2024      	movs	r0, #36	; 0x24
 800392c:	f002 fc7c 	bl	8006228 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	68b8      	ldr	r0, [r7, #8]
 8003934:	f000 fa54 	bl	8003de0 <prvAddCurrentTaskToDelayedList>
    }
 8003938:	bf00      	nop
 800393a:	3718      	adds	r7, #24
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	20000034 	.word	0x20000034

08003944 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10a      	bne.n	8003970 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800395a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395e:	f383 8811 	msr	BASEPRI, r3
 8003962:	f3bf 8f6f 	isb	sy
 8003966:	f3bf 8f4f 	dsb	sy
 800396a:	60fb      	str	r3, [r7, #12]
    }
 800396c:	bf00      	nop
 800396e:	e7fe      	b.n	800396e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	3318      	adds	r3, #24
 8003974:	4618      	mov	r0, r3
 8003976:	f7fe fca5 	bl	80022c4 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800397a:	4b1f      	ldr	r3, [pc, #124]	; (80039f8 <xTaskRemoveFromEventList+0xb4>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d120      	bne.n	80039c4 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	3304      	adds	r3, #4
 8003986:	4618      	mov	r0, r3
 8003988:	f7fe fc9c 	bl	80022c4 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	4618      	mov	r0, r3
 8003990:	f003 f9ea 	bl	8006d68 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	2201      	movs	r2, #1
 800399a:	409a      	lsls	r2, r3
 800399c:	4b17      	ldr	r3, [pc, #92]	; (80039fc <xTaskRemoveFromEventList+0xb8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	4a16      	ldr	r2, [pc, #88]	; (80039fc <xTaskRemoveFromEventList+0xb8>)
 80039a4:	6013      	str	r3, [r2, #0]
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039aa:	4613      	mov	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	4413      	add	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4a13      	ldr	r2, [pc, #76]	; (8003a00 <xTaskRemoveFromEventList+0xbc>)
 80039b4:	441a      	add	r2, r3
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	3304      	adds	r3, #4
 80039ba:	4619      	mov	r1, r3
 80039bc:	4610      	mov	r0, r2
 80039be:	f7fe fc24 	bl	800220a <vListInsertEnd>
 80039c2:	e005      	b.n	80039d0 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	3318      	adds	r3, #24
 80039c8:	4619      	mov	r1, r3
 80039ca:	480e      	ldr	r0, [pc, #56]	; (8003a04 <xTaskRemoveFromEventList+0xc0>)
 80039cc:	f7fe fc1d 	bl	800220a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d4:	4b0c      	ldr	r3, [pc, #48]	; (8003a08 <xTaskRemoveFromEventList+0xc4>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039da:	429a      	cmp	r2, r3
 80039dc:	d905      	bls.n	80039ea <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80039de:	2301      	movs	r3, #1
 80039e0:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80039e2:	4b0a      	ldr	r3, [pc, #40]	; (8003a0c <xTaskRemoveFromEventList+0xc8>)
 80039e4:	2201      	movs	r2, #1
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	e001      	b.n	80039ee <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 80039ea:	2300      	movs	r3, #0
 80039ec:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80039ee:	697b      	ldr	r3, [r7, #20]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3718      	adds	r7, #24
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	20000134 	.word	0x20000134
 80039fc:	20000114 	.word	0x20000114
 8003a00:	20000038 	.word	0x20000038
 8003a04:	200000cc 	.word	0x200000cc
 8003a08:	20000034 	.word	0x20000034
 8003a0c:	20000120 	.word	0x20000120

08003a10 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a18:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <vTaskInternalSetTimeOutState+0x24>)
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003a20:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <vTaskInternalSetTimeOutState+0x28>)
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	605a      	str	r2, [r3, #4]
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr
 8003a34:	20000124 	.word	0x20000124
 8003a38:	20000110 	.word	0x20000110

08003a3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b088      	sub	sp, #32
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10a      	bne.n	8003a62 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a50:	f383 8811 	msr	BASEPRI, r3
 8003a54:	f3bf 8f6f 	isb	sy
 8003a58:	f3bf 8f4f 	dsb	sy
 8003a5c:	613b      	str	r3, [r7, #16]
    }
 8003a5e:	bf00      	nop
 8003a60:	e7fe      	b.n	8003a60 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10a      	bne.n	8003a7e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6c:	f383 8811 	msr	BASEPRI, r3
 8003a70:	f3bf 8f6f 	isb	sy
 8003a74:	f3bf 8f4f 	dsb	sy
 8003a78:	60fb      	str	r3, [r7, #12]
    }
 8003a7a:	bf00      	nop
 8003a7c:	e7fe      	b.n	8003a7c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003a7e:	f000 fee9 	bl	8004854 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003a82:	4b1f      	ldr	r3, [pc, #124]	; (8003b00 <xTaskCheckForTimeOut+0xc4>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9a:	d102      	bne.n	8003aa2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	61fb      	str	r3, [r7, #28]
 8003aa0:	e026      	b.n	8003af0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	4b17      	ldr	r3, [pc, #92]	; (8003b04 <xTaskCheckForTimeOut+0xc8>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d00a      	beq.n	8003ac4 <xTaskCheckForTimeOut+0x88>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d305      	bcc.n	8003ac4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	e015      	b.n	8003af0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d20b      	bcs.n	8003ae6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	1ad2      	subs	r2, r2, r3
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7ff ff98 	bl	8003a10 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61fb      	str	r3, [r7, #28]
 8003ae4:	e004      	b.n	8003af0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003aec:	2301      	movs	r3, #1
 8003aee:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003af0:	f000 fee0 	bl	80048b4 <vPortExitCritical>

    return xReturn;
 8003af4:	69fb      	ldr	r3, [r7, #28]
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3720      	adds	r7, #32
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	20000110 	.word	0x20000110
 8003b04:	20000124 	.word	0x20000124

08003b08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003b0c:	4b03      	ldr	r3, [pc, #12]	; (8003b1c <vTaskMissedYield+0x14>)
 8003b0e:	2201      	movs	r2, #1
 8003b10:	601a      	str	r2, [r3, #0]
}
 8003b12:	bf00      	nop
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	20000120 	.word	0x20000120

08003b20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003b28:	f000 f852 	bl	8003bd0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b2c:	4b06      	ldr	r3, [pc, #24]	; (8003b48 <prvIdleTask+0x28>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d9f9      	bls.n	8003b28 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003b34:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <prvIdleTask+0x2c>)
 8003b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003b44:	e7f0      	b.n	8003b28 <prvIdleTask+0x8>
 8003b46:	bf00      	nop
 8003b48:	20000038 	.word	0x20000038
 8003b4c:	e000ed04 	.word	0xe000ed04

08003b50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b56:	2300      	movs	r3, #0
 8003b58:	607b      	str	r3, [r7, #4]
 8003b5a:	e00c      	b.n	8003b76 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4a12      	ldr	r2, [pc, #72]	; (8003bb0 <prvInitialiseTaskLists+0x60>)
 8003b68:	4413      	add	r3, r2
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fe fb20 	bl	80021b0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3301      	adds	r3, #1
 8003b74:	607b      	str	r3, [r7, #4]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	d9ef      	bls.n	8003b5c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003b7c:	480d      	ldr	r0, [pc, #52]	; (8003bb4 <prvInitialiseTaskLists+0x64>)
 8003b7e:	f7fe fb17 	bl	80021b0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003b82:	480d      	ldr	r0, [pc, #52]	; (8003bb8 <prvInitialiseTaskLists+0x68>)
 8003b84:	f7fe fb14 	bl	80021b0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003b88:	480c      	ldr	r0, [pc, #48]	; (8003bbc <prvInitialiseTaskLists+0x6c>)
 8003b8a:	f7fe fb11 	bl	80021b0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003b8e:	480c      	ldr	r0, [pc, #48]	; (8003bc0 <prvInitialiseTaskLists+0x70>)
 8003b90:	f7fe fb0e 	bl	80021b0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003b94:	480b      	ldr	r0, [pc, #44]	; (8003bc4 <prvInitialiseTaskLists+0x74>)
 8003b96:	f7fe fb0b 	bl	80021b0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003b9a:	4b0b      	ldr	r3, [pc, #44]	; (8003bc8 <prvInitialiseTaskLists+0x78>)
 8003b9c:	4a05      	ldr	r2, [pc, #20]	; (8003bb4 <prvInitialiseTaskLists+0x64>)
 8003b9e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ba0:	4b0a      	ldr	r3, [pc, #40]	; (8003bcc <prvInitialiseTaskLists+0x7c>)
 8003ba2:	4a05      	ldr	r2, [pc, #20]	; (8003bb8 <prvInitialiseTaskLists+0x68>)
 8003ba4:	601a      	str	r2, [r3, #0]
}
 8003ba6:	bf00      	nop
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	20000038 	.word	0x20000038
 8003bb4:	2000009c 	.word	0x2000009c
 8003bb8:	200000b0 	.word	0x200000b0
 8003bbc:	200000cc 	.word	0x200000cc
 8003bc0:	200000e0 	.word	0x200000e0
 8003bc4:	200000f8 	.word	0x200000f8
 8003bc8:	200000c4 	.word	0x200000c4
 8003bcc:	200000c8 	.word	0x200000c8

08003bd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bd6:	e019      	b.n	8003c0c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003bd8:	f000 fe3c 	bl	8004854 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bdc:	4b10      	ldr	r3, [pc, #64]	; (8003c20 <prvCheckTasksWaitingTermination+0x50>)
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	3304      	adds	r3, #4
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7fe fb6b 	bl	80022c4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003bee:	4b0d      	ldr	r3, [pc, #52]	; (8003c24 <prvCheckTasksWaitingTermination+0x54>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	4a0b      	ldr	r2, [pc, #44]	; (8003c24 <prvCheckTasksWaitingTermination+0x54>)
 8003bf6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003bf8:	4b0b      	ldr	r3, [pc, #44]	; (8003c28 <prvCheckTasksWaitingTermination+0x58>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	4a0a      	ldr	r2, [pc, #40]	; (8003c28 <prvCheckTasksWaitingTermination+0x58>)
 8003c00:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003c02:	f000 fe57 	bl	80048b4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f810 	bl	8003c2c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c0c:	4b06      	ldr	r3, [pc, #24]	; (8003c28 <prvCheckTasksWaitingTermination+0x58>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1e1      	bne.n	8003bd8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003c14:	bf00      	nop
 8003c16:	bf00      	nop
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	200000e0 	.word	0x200000e0
 8003c24:	2000010c 	.word	0x2000010c
 8003c28:	200000f4 	.word	0x200000f4

08003c2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f001 f817 	bl	8004c6c <vPortFree>
                vPortFree( pxTCB );
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f001 f814 	bl	8004c6c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003c44:	bf00      	nop
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c50:	4b0a      	ldr	r3, [pc, #40]	; (8003c7c <prvResetNextTaskUnblockTime+0x30>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d104      	bne.n	8003c64 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003c5a:	4b09      	ldr	r3, [pc, #36]	; (8003c80 <prvResetNextTaskUnblockTime+0x34>)
 8003c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c60:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003c62:	e005      	b.n	8003c70 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c64:	4b05      	ldr	r3, [pc, #20]	; (8003c7c <prvResetNextTaskUnblockTime+0x30>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a04      	ldr	r2, [pc, #16]	; (8003c80 <prvResetNextTaskUnblockTime+0x34>)
 8003c6e:	6013      	str	r3, [r2, #0]
}
 8003c70:	bf00      	nop
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	200000c4 	.word	0x200000c4
 8003c80:	2000012c 	.word	0x2000012c

08003c84 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 8003c8a:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <xTaskGetCurrentTaskHandle+0x1c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	607b      	str	r3, [r7, #4]

        return xReturn;
 8003c90:	687b      	ldr	r3, [r7, #4]
    }
 8003c92:	4618      	mov	r0, r3
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	20000034 	.word	0x20000034

08003ca4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003caa:	4b0b      	ldr	r3, [pc, #44]	; (8003cd8 <xTaskGetSchedulerState+0x34>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d102      	bne.n	8003cb8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	607b      	str	r3, [r7, #4]
 8003cb6:	e008      	b.n	8003cca <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cb8:	4b08      	ldr	r3, [pc, #32]	; (8003cdc <xTaskGetSchedulerState+0x38>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d102      	bne.n	8003cc6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	607b      	str	r3, [r7, #4]
 8003cc4:	e001      	b.n	8003cca <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003cca:	687b      	ldr	r3, [r7, #4]
    }
 8003ccc:	4618      	mov	r0, r3
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	20000118 	.word	0x20000118
 8003cdc:	20000134 	.word	0x20000134

08003ce0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003cec:	2300      	movs	r3, #0
 8003cee:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d068      	beq.n	8003dc8 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003cf6:	4b37      	ldr	r3, [pc, #220]	; (8003dd4 <xTaskPriorityDisinherit+0xf4>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d00a      	beq.n	8003d16 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d04:	f383 8811 	msr	BASEPRI, r3
 8003d08:	f3bf 8f6f 	isb	sy
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	60fb      	str	r3, [r7, #12]
    }
 8003d12:	bf00      	nop
 8003d14:	e7fe      	b.n	8003d14 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10a      	bne.n	8003d34 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d22:	f383 8811 	msr	BASEPRI, r3
 8003d26:	f3bf 8f6f 	isb	sy
 8003d2a:	f3bf 8f4f 	dsb	sy
 8003d2e:	60bb      	str	r3, [r7, #8]
    }
 8003d30:	bf00      	nop
 8003d32:	e7fe      	b.n	8003d32 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d38:	1e5a      	subs	r2, r3, #1
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d03e      	beq.n	8003dc8 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d13a      	bne.n	8003dc8 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	3304      	adds	r3, #4
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fe fab4 	bl	80022c4 <uxListRemove>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10a      	bne.n	8003d78 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d66:	2201      	movs	r2, #1
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	43da      	mvns	r2, r3
 8003d6e:	4b1a      	ldr	r3, [pc, #104]	; (8003dd8 <xTaskPriorityDisinherit+0xf8>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4013      	ands	r3, r2
 8003d74:	4a18      	ldr	r2, [pc, #96]	; (8003dd8 <xTaskPriorityDisinherit+0xf8>)
 8003d76:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	204a      	movs	r0, #74	; 0x4a
 8003d7e:	f002 fa71 	bl	8006264 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8e:	f1c3 0205 	rsb	r2, r3, #5
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	409a      	lsls	r2, r3
 8003d9e:	4b0e      	ldr	r3, [pc, #56]	; (8003dd8 <xTaskPriorityDisinherit+0xf8>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	4a0c      	ldr	r2, [pc, #48]	; (8003dd8 <xTaskPriorityDisinherit+0xf8>)
 8003da6:	6013      	str	r3, [r2, #0]
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dac:	4613      	mov	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4a09      	ldr	r2, [pc, #36]	; (8003ddc <xTaskPriorityDisinherit+0xfc>)
 8003db6:	441a      	add	r2, r3
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	3304      	adds	r3, #4
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4610      	mov	r0, r2
 8003dc0:	f7fe fa23 	bl	800220a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003dc8:	697b      	ldr	r3, [r7, #20]
    }
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3718      	adds	r7, #24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	20000034 	.word	0x20000034
 8003dd8:	20000114 	.word	0x20000114
 8003ddc:	20000038 	.word	0x20000038

08003de0 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003dea:	4b32      	ldr	r3, [pc, #200]	; (8003eb4 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003df0:	4b31      	ldr	r3, [pc, #196]	; (8003eb8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	3304      	adds	r3, #4
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7fe fa64 	bl	80022c4 <uxListRemove>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10b      	bne.n	8003e1a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003e02:	4b2d      	ldr	r3, [pc, #180]	; (8003eb8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e08:	2201      	movs	r2, #1
 8003e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0e:	43da      	mvns	r2, r3
 8003e10:	4b2a      	ldr	r3, [pc, #168]	; (8003ebc <prvAddCurrentTaskToDelayedList+0xdc>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4013      	ands	r3, r2
 8003e16:	4a29      	ldr	r2, [pc, #164]	; (8003ebc <prvAddCurrentTaskToDelayedList+0xdc>)
 8003e18:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e20:	d110      	bne.n	8003e44 <prvAddCurrentTaskToDelayedList+0x64>
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00d      	beq.n	8003e44 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003e28:	4b23      	ldr	r3, [pc, #140]	; (8003eb8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	211b      	movs	r1, #27
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f002 ffdc 	bl	8006dec <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e34:	4b20      	ldr	r3, [pc, #128]	; (8003eb8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	3304      	adds	r3, #4
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	4820      	ldr	r0, [pc, #128]	; (8003ec0 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003e3e:	f7fe f9e4 	bl	800220a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003e42:	e032      	b.n	8003eaa <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4413      	add	r3, r2
 8003e4a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e4c:	4b1a      	ldr	r3, [pc, #104]	; (8003eb8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d20f      	bcs.n	8003e7c <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003e5c:	4b16      	ldr	r3, [pc, #88]	; (8003eb8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2104      	movs	r1, #4
 8003e62:	4618      	mov	r0, r3
 8003e64:	f002 ffc2 	bl	8006dec <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e68:	4b16      	ldr	r3, [pc, #88]	; (8003ec4 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	4b12      	ldr	r3, [pc, #72]	; (8003eb8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3304      	adds	r3, #4
 8003e72:	4619      	mov	r1, r3
 8003e74:	4610      	mov	r0, r2
 8003e76:	f7fe f9ec 	bl	8002252 <vListInsert>
}
 8003e7a:	e016      	b.n	8003eaa <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003e7c:	4b0e      	ldr	r3, [pc, #56]	; (8003eb8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2104      	movs	r1, #4
 8003e82:	4618      	mov	r0, r3
 8003e84:	f002 ffb2 	bl	8006dec <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e88:	4b0f      	ldr	r3, [pc, #60]	; (8003ec8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	4b0a      	ldr	r3, [pc, #40]	; (8003eb8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	3304      	adds	r3, #4
 8003e92:	4619      	mov	r1, r3
 8003e94:	4610      	mov	r0, r2
 8003e96:	f7fe f9dc 	bl	8002252 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003e9a:	4b0c      	ldr	r3, [pc, #48]	; (8003ecc <prvAddCurrentTaskToDelayedList+0xec>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d202      	bcs.n	8003eaa <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003ea4:	4a09      	ldr	r2, [pc, #36]	; (8003ecc <prvAddCurrentTaskToDelayedList+0xec>)
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	6013      	str	r3, [r2, #0]
}
 8003eaa:	bf00      	nop
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	20000110 	.word	0x20000110
 8003eb8:	20000034 	.word	0x20000034
 8003ebc:	20000114 	.word	0x20000114
 8003ec0:	200000f8 	.word	0x200000f8
 8003ec4:	200000c8 	.word	0x200000c8
 8003ec8:	200000c4 	.word	0x200000c4
 8003ecc:	2000012c 	.word	0x2000012c

08003ed0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003eda:	f000 fad5 	bl	8004488 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003ede:	4b11      	ldr	r3, [pc, #68]	; (8003f24 <xTimerCreateTimerTask+0x54>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00b      	beq.n	8003efe <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003ee6:	4b10      	ldr	r3, [pc, #64]	; (8003f28 <xTimerCreateTimerTask+0x58>)
 8003ee8:	9301      	str	r3, [sp, #4]
 8003eea:	2302      	movs	r3, #2
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	2300      	movs	r3, #0
 8003ef0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003ef4:	490d      	ldr	r1, [pc, #52]	; (8003f2c <xTimerCreateTimerTask+0x5c>)
 8003ef6:	480e      	ldr	r0, [pc, #56]	; (8003f30 <xTimerCreateTimerTask+0x60>)
 8003ef8:	f7fe ff68 	bl	8002dcc <xTaskCreate>
 8003efc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10a      	bne.n	8003f1a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f08:	f383 8811 	msr	BASEPRI, r3
 8003f0c:	f3bf 8f6f 	isb	sy
 8003f10:	f3bf 8f4f 	dsb	sy
 8003f14:	603b      	str	r3, [r7, #0]
    }
 8003f16:	bf00      	nop
 8003f18:	e7fe      	b.n	8003f18 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003f1a:	687b      	ldr	r3, [r7, #4]
    }
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3708      	adds	r7, #8
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	20000168 	.word	0x20000168
 8003f28:	2000016c 	.word	0x2000016c
 8003f2c:	08007294 	.word	0x08007294
 8003f30:	08004069 	.word	0x08004069

08003f34 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b08a      	sub	sp, #40	; 0x28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
 8003f40:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003f42:	2300      	movs	r3, #0
 8003f44:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10a      	bne.n	8003f62 <xTimerGenericCommand+0x2e>
        __asm volatile
 8003f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f50:	f383 8811 	msr	BASEPRI, r3
 8003f54:	f3bf 8f6f 	isb	sy
 8003f58:	f3bf 8f4f 	dsb	sy
 8003f5c:	623b      	str	r3, [r7, #32]
    }
 8003f5e:	bf00      	nop
 8003f60:	e7fe      	b.n	8003f60 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003f62:	4b1a      	ldr	r3, [pc, #104]	; (8003fcc <xTimerGenericCommand+0x98>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d02a      	beq.n	8003fc0 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	2b05      	cmp	r3, #5
 8003f7a:	dc18      	bgt.n	8003fae <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003f7c:	f7ff fe92 	bl	8003ca4 <xTaskGetSchedulerState>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d109      	bne.n	8003f9a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003f86:	4b11      	ldr	r3, [pc, #68]	; (8003fcc <xTimerGenericCommand+0x98>)
 8003f88:	6818      	ldr	r0, [r3, #0]
 8003f8a:	f107 0114 	add.w	r1, r7, #20
 8003f8e:	2300      	movs	r3, #0
 8003f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f92:	f7fe fab1 	bl	80024f8 <xQueueGenericSend>
 8003f96:	6278      	str	r0, [r7, #36]	; 0x24
 8003f98:	e012      	b.n	8003fc0 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003f9a:	4b0c      	ldr	r3, [pc, #48]	; (8003fcc <xTimerGenericCommand+0x98>)
 8003f9c:	6818      	ldr	r0, [r3, #0]
 8003f9e:	f107 0114 	add.w	r1, r7, #20
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f7fe faa7 	bl	80024f8 <xQueueGenericSend>
 8003faa:	6278      	str	r0, [r7, #36]	; 0x24
 8003fac:	e008      	b.n	8003fc0 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003fae:	4b07      	ldr	r3, [pc, #28]	; (8003fcc <xTimerGenericCommand+0x98>)
 8003fb0:	6818      	ldr	r0, [r3, #0]
 8003fb2:	f107 0114 	add.w	r1, r7, #20
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	f7fe fbc3 	bl	8002744 <xQueueGenericSendFromISR>
 8003fbe:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3728      	adds	r7, #40	; 0x28
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	20000168 	.word	0x20000168

08003fd0 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af02      	add	r7, sp, #8
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fda:	4b22      	ldr	r3, [pc, #136]	; (8004064 <prvProcessExpiredTimer+0x94>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7fe f96b 	bl	80022c4 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d022      	beq.n	8004042 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	699a      	ldr	r2, [r3, #24]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	18d1      	adds	r1, r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	6978      	ldr	r0, [r7, #20]
 800400a:	f000 f8d1 	bl	80041b0 <prvInsertTimerInActiveList>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d01f      	beq.n	8004054 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004014:	2300      	movs	r3, #0
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	2300      	movs	r3, #0
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	2100      	movs	r1, #0
 800401e:	6978      	ldr	r0, [r7, #20]
 8004020:	f7ff ff88 	bl	8003f34 <xTimerGenericCommand>
 8004024:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d113      	bne.n	8004054 <prvProcessExpiredTimer+0x84>
        __asm volatile
 800402c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004030:	f383 8811 	msr	BASEPRI, r3
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	60fb      	str	r3, [r7, #12]
    }
 800403e:	bf00      	nop
 8004040:	e7fe      	b.n	8004040 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004048:	f023 0301 	bic.w	r3, r3, #1
 800404c:	b2da      	uxtb	r2, r3
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	6978      	ldr	r0, [r7, #20]
 800405a:	4798      	blx	r3
    }
 800405c:	bf00      	nop
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	20000160 	.word	0x20000160

08004068 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004070:	f107 0308 	add.w	r3, r7, #8
 8004074:	4618      	mov	r0, r3
 8004076:	f000 f857 	bl	8004128 <prvGetNextExpireTime>
 800407a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	4619      	mov	r1, r3
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f000 f803 	bl	800408c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004086:	f000 f8d5 	bl	8004234 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800408a:	e7f1      	b.n	8004070 <prvTimerTask+0x8>

0800408c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004096:	f7ff f939 	bl	800330c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800409a:	f107 0308 	add.w	r3, r7, #8
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 f866 	bl	8004170 <prvSampleTimeNow>
 80040a4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d130      	bne.n	800410e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10a      	bne.n	80040c8 <prvProcessTimerOrBlockTask+0x3c>
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d806      	bhi.n	80040c8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80040ba:	f7ff f935 	bl	8003328 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80040be:	68f9      	ldr	r1, [r7, #12]
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7ff ff85 	bl	8003fd0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80040c6:	e024      	b.n	8004112 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d008      	beq.n	80040e0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80040ce:	4b13      	ldr	r3, [pc, #76]	; (800411c <prvProcessTimerOrBlockTask+0x90>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <prvProcessTimerOrBlockTask+0x50>
 80040d8:	2301      	movs	r3, #1
 80040da:	e000      	b.n	80040de <prvProcessTimerOrBlockTask+0x52>
 80040dc:	2300      	movs	r3, #0
 80040de:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80040e0:	4b0f      	ldr	r3, [pc, #60]	; (8004120 <prvProcessTimerOrBlockTask+0x94>)
 80040e2:	6818      	ldr	r0, [r3, #0]
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	4619      	mov	r1, r3
 80040ee:	f7fe fe39 	bl	8002d64 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80040f2:	f7ff f919 	bl	8003328 <xTaskResumeAll>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10a      	bne.n	8004112 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80040fc:	4b09      	ldr	r3, [pc, #36]	; (8004124 <prvProcessTimerOrBlockTask+0x98>)
 80040fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	f3bf 8f4f 	dsb	sy
 8004108:	f3bf 8f6f 	isb	sy
    }
 800410c:	e001      	b.n	8004112 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800410e:	f7ff f90b 	bl	8003328 <xTaskResumeAll>
    }
 8004112:	bf00      	nop
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	20000164 	.word	0x20000164
 8004120:	20000168 	.word	0x20000168
 8004124:	e000ed04 	.word	0xe000ed04

08004128 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004130:	4b0e      	ldr	r3, [pc, #56]	; (800416c <prvGetNextExpireTime+0x44>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <prvGetNextExpireTime+0x16>
 800413a:	2201      	movs	r2, #1
 800413c:	e000      	b.n	8004140 <prvGetNextExpireTime+0x18>
 800413e:	2200      	movs	r2, #0
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d105      	bne.n	8004158 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800414c:	4b07      	ldr	r3, [pc, #28]	; (800416c <prvGetNextExpireTime+0x44>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	e001      	b.n	800415c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800415c:	68fb      	ldr	r3, [r7, #12]
    }
 800415e:	4618      	mov	r0, r3
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	20000160 	.word	0x20000160

08004170 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004178:	f7ff f976 	bl	8003468 <xTaskGetTickCount>
 800417c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800417e:	4b0b      	ldr	r3, [pc, #44]	; (80041ac <prvSampleTimeNow+0x3c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	429a      	cmp	r2, r3
 8004186:	d205      	bcs.n	8004194 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004188:	f000 f91a 	bl	80043c0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	e002      	b.n	800419a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800419a:	4a04      	ldr	r2, [pc, #16]	; (80041ac <prvSampleTimeNow+0x3c>)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80041a0:	68fb      	ldr	r3, [r7, #12]
    }
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	20000170 	.word	0x20000170

080041b0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
 80041bc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80041be:	2300      	movs	r3, #0
 80041c0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d812      	bhi.n	80041fc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	1ad2      	subs	r2, r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d302      	bcc.n	80041ea <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80041e4:	2301      	movs	r3, #1
 80041e6:	617b      	str	r3, [r7, #20]
 80041e8:	e01b      	b.n	8004222 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80041ea:	4b10      	ldr	r3, [pc, #64]	; (800422c <prvInsertTimerInActiveList+0x7c>)
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	3304      	adds	r3, #4
 80041f2:	4619      	mov	r1, r3
 80041f4:	4610      	mov	r0, r2
 80041f6:	f7fe f82c 	bl	8002252 <vListInsert>
 80041fa:	e012      	b.n	8004222 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	429a      	cmp	r2, r3
 8004202:	d206      	bcs.n	8004212 <prvInsertTimerInActiveList+0x62>
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	429a      	cmp	r2, r3
 800420a:	d302      	bcc.n	8004212 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800420c:	2301      	movs	r3, #1
 800420e:	617b      	str	r3, [r7, #20]
 8004210:	e007      	b.n	8004222 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004212:	4b07      	ldr	r3, [pc, #28]	; (8004230 <prvInsertTimerInActiveList+0x80>)
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	3304      	adds	r3, #4
 800421a:	4619      	mov	r1, r3
 800421c:	4610      	mov	r0, r2
 800421e:	f7fe f818 	bl	8002252 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004222:	697b      	ldr	r3, [r7, #20]
    }
 8004224:	4618      	mov	r0, r3
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	20000164 	.word	0x20000164
 8004230:	20000160 	.word	0x20000160

08004234 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004234:	b580      	push	{r7, lr}
 8004236:	b08c      	sub	sp, #48	; 0x30
 8004238:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800423a:	e0ae      	b.n	800439a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	2b00      	cmp	r3, #0
 8004240:	f2c0 80aa 	blt.w	8004398 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d004      	beq.n	800425a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	3304      	adds	r3, #4
 8004254:	4618      	mov	r0, r3
 8004256:	f7fe f835 	bl	80022c4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800425a:	1d3b      	adds	r3, r7, #4
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff ff87 	bl	8004170 <prvSampleTimeNow>
 8004262:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	2b09      	cmp	r3, #9
 8004268:	f200 8097 	bhi.w	800439a <prvProcessReceivedCommands+0x166>
 800426c:	a201      	add	r2, pc, #4	; (adr r2, 8004274 <prvProcessReceivedCommands+0x40>)
 800426e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004272:	bf00      	nop
 8004274:	0800429d 	.word	0x0800429d
 8004278:	0800429d 	.word	0x0800429d
 800427c:	0800429d 	.word	0x0800429d
 8004280:	08004311 	.word	0x08004311
 8004284:	08004325 	.word	0x08004325
 8004288:	0800436f 	.word	0x0800436f
 800428c:	0800429d 	.word	0x0800429d
 8004290:	0800429d 	.word	0x0800429d
 8004294:	08004311 	.word	0x08004311
 8004298:	08004325 	.word	0x08004325
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042a2:	f043 0301 	orr.w	r3, r3, #1
 80042a6:	b2da      	uxtb	r2, r3
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	18d1      	adds	r1, r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6a3a      	ldr	r2, [r7, #32]
 80042ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042bc:	f7ff ff78 	bl	80041b0 <prvInsertTimerInActiveList>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d069      	beq.n	800439a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042cc:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80042ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d05e      	beq.n	800439a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	441a      	add	r2, r3
 80042e4:	2300      	movs	r3, #0
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	2300      	movs	r3, #0
 80042ea:	2100      	movs	r1, #0
 80042ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042ee:	f7ff fe21 	bl	8003f34 <xTimerGenericCommand>
 80042f2:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d14f      	bne.n	800439a <prvProcessReceivedCommands+0x166>
        __asm volatile
 80042fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fe:	f383 8811 	msr	BASEPRI, r3
 8004302:	f3bf 8f6f 	isb	sy
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	61bb      	str	r3, [r7, #24]
    }
 800430c:	bf00      	nop
 800430e:	e7fe      	b.n	800430e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004312:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004316:	f023 0301 	bic.w	r3, r3, #1
 800431a:	b2da      	uxtb	r2, r3
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004322:	e03a      	b.n	800439a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800432a:	f043 0301 	orr.w	r3, r3, #1
 800432e:	b2da      	uxtb	r2, r3
 8004330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004332:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10a      	bne.n	800435a <prvProcessReceivedCommands+0x126>
        __asm volatile
 8004344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004348:	f383 8811 	msr	BASEPRI, r3
 800434c:	f3bf 8f6f 	isb	sy
 8004350:	f3bf 8f4f 	dsb	sy
 8004354:	617b      	str	r3, [r7, #20]
    }
 8004356:	bf00      	nop
 8004358:	e7fe      	b.n	8004358 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	699a      	ldr	r2, [r3, #24]
 800435e:	6a3b      	ldr	r3, [r7, #32]
 8004360:	18d1      	adds	r1, r2, r3
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	6a3a      	ldr	r2, [r7, #32]
 8004366:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004368:	f7ff ff22 	bl	80041b0 <prvInsertTimerInActiveList>
                        break;
 800436c:	e015      	b.n	800439a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d103      	bne.n	8004384 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 800437c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800437e:	f000 fc75 	bl	8004c6c <vPortFree>
 8004382:	e00a      	b.n	800439a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800438a:	f023 0301 	bic.w	r3, r3, #1
 800438e:	b2da      	uxtb	r2, r3
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004396:	e000      	b.n	800439a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004398:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800439a:	4b08      	ldr	r3, [pc, #32]	; (80043bc <prvProcessReceivedCommands+0x188>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f107 0108 	add.w	r1, r7, #8
 80043a2:	2200      	movs	r2, #0
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7fe fa8b 	bl	80028c0 <xQueueReceive>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f47f af45 	bne.w	800423c <prvProcessReceivedCommands+0x8>
        }
    }
 80043b2:	bf00      	nop
 80043b4:	bf00      	nop
 80043b6:	3728      	adds	r7, #40	; 0x28
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	20000168 	.word	0x20000168

080043c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b088      	sub	sp, #32
 80043c4:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043c6:	e048      	b.n	800445a <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043c8:	4b2d      	ldr	r3, [pc, #180]	; (8004480 <prvSwitchTimerLists+0xc0>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043d2:	4b2b      	ldr	r3, [pc, #172]	; (8004480 <prvSwitchTimerLists+0xc0>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	3304      	adds	r3, #4
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7fd ff6f 	bl	80022c4 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043f4:	f003 0304 	and.w	r3, r3, #4
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d02e      	beq.n	800445a <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	4413      	add	r3, r2
 8004404:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	429a      	cmp	r2, r3
 800440c:	d90e      	bls.n	800442c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800441a:	4b19      	ldr	r3, [pc, #100]	; (8004480 <prvSwitchTimerLists+0xc0>)
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	3304      	adds	r3, #4
 8004422:	4619      	mov	r1, r3
 8004424:	4610      	mov	r0, r2
 8004426:	f7fd ff14 	bl	8002252 <vListInsert>
 800442a:	e016      	b.n	800445a <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800442c:	2300      	movs	r3, #0
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	2300      	movs	r3, #0
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	2100      	movs	r1, #0
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f7ff fd7c 	bl	8003f34 <xTimerGenericCommand>
 800443c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10a      	bne.n	800445a <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004448:	f383 8811 	msr	BASEPRI, r3
 800444c:	f3bf 8f6f 	isb	sy
 8004450:	f3bf 8f4f 	dsb	sy
 8004454:	603b      	str	r3, [r7, #0]
    }
 8004456:	bf00      	nop
 8004458:	e7fe      	b.n	8004458 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800445a:	4b09      	ldr	r3, [pc, #36]	; (8004480 <prvSwitchTimerLists+0xc0>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1b1      	bne.n	80043c8 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004464:	4b06      	ldr	r3, [pc, #24]	; (8004480 <prvSwitchTimerLists+0xc0>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800446a:	4b06      	ldr	r3, [pc, #24]	; (8004484 <prvSwitchTimerLists+0xc4>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a04      	ldr	r2, [pc, #16]	; (8004480 <prvSwitchTimerLists+0xc0>)
 8004470:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004472:	4a04      	ldr	r2, [pc, #16]	; (8004484 <prvSwitchTimerLists+0xc4>)
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	6013      	str	r3, [r2, #0]
    }
 8004478:	bf00      	nop
 800447a:	3718      	adds	r7, #24
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	20000160 	.word	0x20000160
 8004484:	20000164 	.word	0x20000164

08004488 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800448c:	f000 f9e2 	bl	8004854 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004490:	4b12      	ldr	r3, [pc, #72]	; (80044dc <prvCheckForValidListAndQueue+0x54>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d11d      	bne.n	80044d4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004498:	4811      	ldr	r0, [pc, #68]	; (80044e0 <prvCheckForValidListAndQueue+0x58>)
 800449a:	f7fd fe89 	bl	80021b0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800449e:	4811      	ldr	r0, [pc, #68]	; (80044e4 <prvCheckForValidListAndQueue+0x5c>)
 80044a0:	f7fd fe86 	bl	80021b0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80044a4:	4b10      	ldr	r3, [pc, #64]	; (80044e8 <prvCheckForValidListAndQueue+0x60>)
 80044a6:	4a0e      	ldr	r2, [pc, #56]	; (80044e0 <prvCheckForValidListAndQueue+0x58>)
 80044a8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80044aa:	4b10      	ldr	r3, [pc, #64]	; (80044ec <prvCheckForValidListAndQueue+0x64>)
 80044ac:	4a0d      	ldr	r2, [pc, #52]	; (80044e4 <prvCheckForValidListAndQueue+0x5c>)
 80044ae:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80044b0:	2200      	movs	r2, #0
 80044b2:	210c      	movs	r1, #12
 80044b4:	200a      	movs	r0, #10
 80044b6:	f7fd ff97 	bl	80023e8 <xQueueGenericCreate>
 80044ba:	4603      	mov	r3, r0
 80044bc:	4a07      	ldr	r2, [pc, #28]	; (80044dc <prvCheckForValidListAndQueue+0x54>)
 80044be:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80044c0:	4b06      	ldr	r3, [pc, #24]	; (80044dc <prvCheckForValidListAndQueue+0x54>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d005      	beq.n	80044d4 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80044c8:	4b04      	ldr	r3, [pc, #16]	; (80044dc <prvCheckForValidListAndQueue+0x54>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4908      	ldr	r1, [pc, #32]	; (80044f0 <prvCheckForValidListAndQueue+0x68>)
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fe fc16 	bl	8002d00 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80044d4:	f000 f9ee 	bl	80048b4 <vPortExitCritical>
    }
 80044d8:	bf00      	nop
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	20000168 	.word	0x20000168
 80044e0:	20000138 	.word	0x20000138
 80044e4:	2000014c 	.word	0x2000014c
 80044e8:	20000160 	.word	0x20000160
 80044ec:	20000164 	.word	0x20000164
 80044f0:	0800729c 	.word	0x0800729c

080044f4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	3b04      	subs	r3, #4
 8004504:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800450c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	3b04      	subs	r3, #4
 8004512:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f023 0201 	bic.w	r2, r3, #1
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	3b04      	subs	r3, #4
 8004522:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004524:	4a0c      	ldr	r2, [pc, #48]	; (8004558 <pxPortInitialiseStack+0x64>)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	3b14      	subs	r3, #20
 800452e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	3b04      	subs	r3, #4
 800453a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f06f 0202 	mvn.w	r2, #2
 8004542:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	3b20      	subs	r3, #32
 8004548:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800454a:	68fb      	ldr	r3, [r7, #12]
}
 800454c:	4618      	mov	r0, r3
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	0800455d 	.word	0x0800455d

0800455c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004562:	2300      	movs	r3, #0
 8004564:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004566:	4b12      	ldr	r3, [pc, #72]	; (80045b0 <prvTaskExitError+0x54>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456e:	d00a      	beq.n	8004586 <prvTaskExitError+0x2a>
        __asm volatile
 8004570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004574:	f383 8811 	msr	BASEPRI, r3
 8004578:	f3bf 8f6f 	isb	sy
 800457c:	f3bf 8f4f 	dsb	sy
 8004580:	60fb      	str	r3, [r7, #12]
    }
 8004582:	bf00      	nop
 8004584:	e7fe      	b.n	8004584 <prvTaskExitError+0x28>
        __asm volatile
 8004586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458a:	f383 8811 	msr	BASEPRI, r3
 800458e:	f3bf 8f6f 	isb	sy
 8004592:	f3bf 8f4f 	dsb	sy
 8004596:	60bb      	str	r3, [r7, #8]
    }
 8004598:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800459a:	bf00      	nop
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0fc      	beq.n	800459c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80045a2:	bf00      	nop
 80045a4:	bf00      	nop
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	20000010 	.word	0x20000010
	...

080045c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80045c0:	4b07      	ldr	r3, [pc, #28]	; (80045e0 <pxCurrentTCBConst2>)
 80045c2:	6819      	ldr	r1, [r3, #0]
 80045c4:	6808      	ldr	r0, [r1, #0]
 80045c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ca:	f380 8809 	msr	PSP, r0
 80045ce:	f3bf 8f6f 	isb	sy
 80045d2:	f04f 0000 	mov.w	r0, #0
 80045d6:	f380 8811 	msr	BASEPRI, r0
 80045da:	4770      	bx	lr
 80045dc:	f3af 8000 	nop.w

080045e0 <pxCurrentTCBConst2>:
 80045e0:	20000034 	.word	0x20000034
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80045e4:	bf00      	nop
 80045e6:	bf00      	nop

080045e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80045e8:	4808      	ldr	r0, [pc, #32]	; (800460c <prvPortStartFirstTask+0x24>)
 80045ea:	6800      	ldr	r0, [r0, #0]
 80045ec:	6800      	ldr	r0, [r0, #0]
 80045ee:	f380 8808 	msr	MSP, r0
 80045f2:	f04f 0000 	mov.w	r0, #0
 80045f6:	f380 8814 	msr	CONTROL, r0
 80045fa:	b662      	cpsie	i
 80045fc:	b661      	cpsie	f
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	f3bf 8f6f 	isb	sy
 8004606:	df00      	svc	0
 8004608:	bf00      	nop
 800460a:	0000      	.short	0x0000
 800460c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004610:	bf00      	nop
 8004612:	bf00      	nop

08004614 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800461a:	4b46      	ldr	r3, [pc, #280]	; (8004734 <xPortStartScheduler+0x120>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a46      	ldr	r2, [pc, #280]	; (8004738 <xPortStartScheduler+0x124>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d10a      	bne.n	800463a <xPortStartScheduler+0x26>
        __asm volatile
 8004624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	613b      	str	r3, [r7, #16]
    }
 8004636:	bf00      	nop
 8004638:	e7fe      	b.n	8004638 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800463a:	4b3e      	ldr	r3, [pc, #248]	; (8004734 <xPortStartScheduler+0x120>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a3f      	ldr	r2, [pc, #252]	; (800473c <xPortStartScheduler+0x128>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d10a      	bne.n	800465a <xPortStartScheduler+0x46>
        __asm volatile
 8004644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004648:	f383 8811 	msr	BASEPRI, r3
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	60fb      	str	r3, [r7, #12]
    }
 8004656:	bf00      	nop
 8004658:	e7fe      	b.n	8004658 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800465a:	4b39      	ldr	r3, [pc, #228]	; (8004740 <xPortStartScheduler+0x12c>)
 800465c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	b2db      	uxtb	r3, r3
 8004664:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	22ff      	movs	r2, #255	; 0xff
 800466a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	b2db      	uxtb	r3, r3
 8004672:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004674:	78fb      	ldrb	r3, [r7, #3]
 8004676:	b2db      	uxtb	r3, r3
 8004678:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800467c:	b2da      	uxtb	r2, r3
 800467e:	4b31      	ldr	r3, [pc, #196]	; (8004744 <xPortStartScheduler+0x130>)
 8004680:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004682:	4b31      	ldr	r3, [pc, #196]	; (8004748 <xPortStartScheduler+0x134>)
 8004684:	2207      	movs	r2, #7
 8004686:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004688:	e009      	b.n	800469e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800468a:	4b2f      	ldr	r3, [pc, #188]	; (8004748 <xPortStartScheduler+0x134>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	3b01      	subs	r3, #1
 8004690:	4a2d      	ldr	r2, [pc, #180]	; (8004748 <xPortStartScheduler+0x134>)
 8004692:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004694:	78fb      	ldrb	r3, [r7, #3]
 8004696:	b2db      	uxtb	r3, r3
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	b2db      	uxtb	r3, r3
 800469c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800469e:	78fb      	ldrb	r3, [r7, #3]
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a6:	2b80      	cmp	r3, #128	; 0x80
 80046a8:	d0ef      	beq.n	800468a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80046aa:	4b27      	ldr	r3, [pc, #156]	; (8004748 <xPortStartScheduler+0x134>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f1c3 0307 	rsb	r3, r3, #7
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d00a      	beq.n	80046cc <xPortStartScheduler+0xb8>
        __asm volatile
 80046b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ba:	f383 8811 	msr	BASEPRI, r3
 80046be:	f3bf 8f6f 	isb	sy
 80046c2:	f3bf 8f4f 	dsb	sy
 80046c6:	60bb      	str	r3, [r7, #8]
    }
 80046c8:	bf00      	nop
 80046ca:	e7fe      	b.n	80046ca <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80046cc:	4b1e      	ldr	r3, [pc, #120]	; (8004748 <xPortStartScheduler+0x134>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	021b      	lsls	r3, r3, #8
 80046d2:	4a1d      	ldr	r2, [pc, #116]	; (8004748 <xPortStartScheduler+0x134>)
 80046d4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80046d6:	4b1c      	ldr	r3, [pc, #112]	; (8004748 <xPortStartScheduler+0x134>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046de:	4a1a      	ldr	r2, [pc, #104]	; (8004748 <xPortStartScheduler+0x134>)
 80046e0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80046ea:	4b18      	ldr	r3, [pc, #96]	; (800474c <xPortStartScheduler+0x138>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a17      	ldr	r2, [pc, #92]	; (800474c <xPortStartScheduler+0x138>)
 80046f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046f4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80046f6:	4b15      	ldr	r3, [pc, #84]	; (800474c <xPortStartScheduler+0x138>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a14      	ldr	r2, [pc, #80]	; (800474c <xPortStartScheduler+0x138>)
 80046fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004700:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004702:	f000 f963 	bl	80049cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004706:	4b12      	ldr	r3, [pc, #72]	; (8004750 <xPortStartScheduler+0x13c>)
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800470c:	f000 f982 	bl	8004a14 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004710:	4b10      	ldr	r3, [pc, #64]	; (8004754 <xPortStartScheduler+0x140>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a0f      	ldr	r2, [pc, #60]	; (8004754 <xPortStartScheduler+0x140>)
 8004716:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800471a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800471c:	f7ff ff64 	bl	80045e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004720:	f7ff f854 	bl	80037cc <vTaskSwitchContext>
    prvTaskExitError();
 8004724:	f7ff ff1a 	bl	800455c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3718      	adds	r7, #24
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	e000ed00 	.word	0xe000ed00
 8004738:	410fc271 	.word	0x410fc271
 800473c:	410fc270 	.word	0x410fc270
 8004740:	e000e400 	.word	0xe000e400
 8004744:	20000174 	.word	0x20000174
 8004748:	20000178 	.word	0x20000178
 800474c:	e000ed20 	.word	0xe000ed20
 8004750:	20000010 	.word	0x20000010
 8004754:	e000ef34 	.word	0xe000ef34

08004758 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004758:	b480      	push	{r7}
 800475a:	b087      	sub	sp, #28
 800475c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800475e:	4b37      	ldr	r3, [pc, #220]	; (800483c <vInitPrioGroupValue+0xe4>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a37      	ldr	r2, [pc, #220]	; (8004840 <vInitPrioGroupValue+0xe8>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d10a      	bne.n	800477e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476c:	f383 8811 	msr	BASEPRI, r3
 8004770:	f3bf 8f6f 	isb	sy
 8004774:	f3bf 8f4f 	dsb	sy
 8004778:	613b      	str	r3, [r7, #16]
    }
 800477a:	bf00      	nop
 800477c:	e7fe      	b.n	800477c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800477e:	4b2f      	ldr	r3, [pc, #188]	; (800483c <vInitPrioGroupValue+0xe4>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a30      	ldr	r2, [pc, #192]	; (8004844 <vInitPrioGroupValue+0xec>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d10a      	bne.n	800479e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478c:	f383 8811 	msr	BASEPRI, r3
 8004790:	f3bf 8f6f 	isb	sy
 8004794:	f3bf 8f4f 	dsb	sy
 8004798:	60fb      	str	r3, [r7, #12]
    }
 800479a:	bf00      	nop
 800479c:	e7fe      	b.n	800479c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800479e:	4b2a      	ldr	r3, [pc, #168]	; (8004848 <vInitPrioGroupValue+0xf0>)
 80047a0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	22ff      	movs	r2, #255	; 0xff
 80047ae:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047b8:	78fb      	ldrb	r3, [r7, #3]
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	4b22      	ldr	r3, [pc, #136]	; (800484c <vInitPrioGroupValue+0xf4>)
 80047c4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80047c6:	4b22      	ldr	r3, [pc, #136]	; (8004850 <vInitPrioGroupValue+0xf8>)
 80047c8:	2207      	movs	r2, #7
 80047ca:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047cc:	e009      	b.n	80047e2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80047ce:	4b20      	ldr	r3, [pc, #128]	; (8004850 <vInitPrioGroupValue+0xf8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	3b01      	subs	r3, #1
 80047d4:	4a1e      	ldr	r2, [pc, #120]	; (8004850 <vInitPrioGroupValue+0xf8>)
 80047d6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80047d8:	78fb      	ldrb	r3, [r7, #3]
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047e2:	78fb      	ldrb	r3, [r7, #3]
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ea:	2b80      	cmp	r3, #128	; 0x80
 80047ec:	d0ef      	beq.n	80047ce <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80047ee:	4b18      	ldr	r3, [pc, #96]	; (8004850 <vInitPrioGroupValue+0xf8>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f1c3 0307 	rsb	r3, r3, #7
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	d00a      	beq.n	8004810 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80047fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fe:	f383 8811 	msr	BASEPRI, r3
 8004802:	f3bf 8f6f 	isb	sy
 8004806:	f3bf 8f4f 	dsb	sy
 800480a:	60bb      	str	r3, [r7, #8]
    }
 800480c:	bf00      	nop
 800480e:	e7fe      	b.n	800480e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004810:	4b0f      	ldr	r3, [pc, #60]	; (8004850 <vInitPrioGroupValue+0xf8>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	021b      	lsls	r3, r3, #8
 8004816:	4a0e      	ldr	r2, [pc, #56]	; (8004850 <vInitPrioGroupValue+0xf8>)
 8004818:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800481a:	4b0d      	ldr	r3, [pc, #52]	; (8004850 <vInitPrioGroupValue+0xf8>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004822:	4a0b      	ldr	r2, [pc, #44]	; (8004850 <vInitPrioGroupValue+0xf8>)
 8004824:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	b2da      	uxtb	r2, r3
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800482e:	bf00      	nop
 8004830:	371c      	adds	r7, #28
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	e000ed00 	.word	0xe000ed00
 8004840:	410fc271 	.word	0x410fc271
 8004844:	410fc270 	.word	0x410fc270
 8004848:	e000e400 	.word	0xe000e400
 800484c:	20000174 	.word	0x20000174
 8004850:	20000178 	.word	0x20000178

08004854 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
        __asm volatile
 800485a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485e:	f383 8811 	msr	BASEPRI, r3
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	f3bf 8f4f 	dsb	sy
 800486a:	607b      	str	r3, [r7, #4]
    }
 800486c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800486e:	4b0f      	ldr	r3, [pc, #60]	; (80048ac <vPortEnterCritical+0x58>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3301      	adds	r3, #1
 8004874:	4a0d      	ldr	r2, [pc, #52]	; (80048ac <vPortEnterCritical+0x58>)
 8004876:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004878:	4b0c      	ldr	r3, [pc, #48]	; (80048ac <vPortEnterCritical+0x58>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d10f      	bne.n	80048a0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004880:	4b0b      	ldr	r3, [pc, #44]	; (80048b0 <vPortEnterCritical+0x5c>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <vPortEnterCritical+0x4c>
        __asm volatile
 800488a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	603b      	str	r3, [r7, #0]
    }
 800489c:	bf00      	nop
 800489e:	e7fe      	b.n	800489e <vPortEnterCritical+0x4a>
    }
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	20000010 	.word	0x20000010
 80048b0:	e000ed04 	.word	0xe000ed04

080048b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80048ba:	4b12      	ldr	r3, [pc, #72]	; (8004904 <vPortExitCritical+0x50>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10a      	bne.n	80048d8 <vPortExitCritical+0x24>
        __asm volatile
 80048c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	607b      	str	r3, [r7, #4]
    }
 80048d4:	bf00      	nop
 80048d6:	e7fe      	b.n	80048d6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80048d8:	4b0a      	ldr	r3, [pc, #40]	; (8004904 <vPortExitCritical+0x50>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	3b01      	subs	r3, #1
 80048de:	4a09      	ldr	r2, [pc, #36]	; (8004904 <vPortExitCritical+0x50>)
 80048e0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80048e2:	4b08      	ldr	r3, [pc, #32]	; (8004904 <vPortExitCritical+0x50>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d105      	bne.n	80048f6 <vPortExitCritical+0x42>
 80048ea:	2300      	movs	r3, #0
 80048ec:	603b      	str	r3, [r7, #0]
        __asm volatile
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	f383 8811 	msr	BASEPRI, r3
    }
 80048f4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	20000010 	.word	0x20000010
	...

08004910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004910:	f3ef 8009 	mrs	r0, PSP
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	4b15      	ldr	r3, [pc, #84]	; (8004970 <pxCurrentTCBConst>)
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	f01e 0f10 	tst.w	lr, #16
 8004920:	bf08      	it	eq
 8004922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800492a:	6010      	str	r0, [r2, #0]
 800492c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004930:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004934:	f380 8811 	msr	BASEPRI, r0
 8004938:	f3bf 8f4f 	dsb	sy
 800493c:	f3bf 8f6f 	isb	sy
 8004940:	f7fe ff44 	bl	80037cc <vTaskSwitchContext>
 8004944:	f04f 0000 	mov.w	r0, #0
 8004948:	f380 8811 	msr	BASEPRI, r0
 800494c:	bc09      	pop	{r0, r3}
 800494e:	6819      	ldr	r1, [r3, #0]
 8004950:	6808      	ldr	r0, [r1, #0]
 8004952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004956:	f01e 0f10 	tst.w	lr, #16
 800495a:	bf08      	it	eq
 800495c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004960:	f380 8809 	msr	PSP, r0
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	f3af 8000 	nop.w

08004970 <pxCurrentTCBConst>:
 8004970:	20000034 	.word	0x20000034
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004974:	bf00      	nop
 8004976:	bf00      	nop

08004978 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
        __asm volatile
 800497e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004982:	f383 8811 	msr	BASEPRI, r3
 8004986:	f3bf 8f6f 	isb	sy
 800498a:	f3bf 8f4f 	dsb	sy
 800498e:	607b      	str	r3, [r7, #4]
    }
 8004990:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004992:	f002 f8cf 	bl	8006b34 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004996:	f7fe fe5d 	bl	8003654 <xTaskIncrementTick>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d006      	beq.n	80049ae <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80049a0:	f002 f926 	bl	8006bf0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80049a4:	4b08      	ldr	r3, [pc, #32]	; (80049c8 <SysTick_Handler+0x50>)
 80049a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	e001      	b.n	80049b2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80049ae:	f002 f903 	bl	8006bb8 <SEGGER_SYSVIEW_RecordExitISR>
 80049b2:	2300      	movs	r3, #0
 80049b4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	f383 8811 	msr	BASEPRI, r3
    }
 80049bc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80049be:	bf00      	nop
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	e000ed04 	.word	0xe000ed04

080049cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80049d0:	4b0b      	ldr	r3, [pc, #44]	; (8004a00 <vPortSetupTimerInterrupt+0x34>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80049d6:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <vPortSetupTimerInterrupt+0x38>)
 80049d8:	2200      	movs	r2, #0
 80049da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80049dc:	4b0a      	ldr	r3, [pc, #40]	; (8004a08 <vPortSetupTimerInterrupt+0x3c>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a0a      	ldr	r2, [pc, #40]	; (8004a0c <vPortSetupTimerInterrupt+0x40>)
 80049e2:	fba2 2303 	umull	r2, r3, r2, r3
 80049e6:	099b      	lsrs	r3, r3, #6
 80049e8:	4a09      	ldr	r2, [pc, #36]	; (8004a10 <vPortSetupTimerInterrupt+0x44>)
 80049ea:	3b01      	subs	r3, #1
 80049ec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80049ee:	4b04      	ldr	r3, [pc, #16]	; (8004a00 <vPortSetupTimerInterrupt+0x34>)
 80049f0:	2207      	movs	r2, #7
 80049f2:	601a      	str	r2, [r3, #0]
}
 80049f4:	bf00      	nop
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	e000e010 	.word	0xe000e010
 8004a04:	e000e018 	.word	0xe000e018
 8004a08:	20000000 	.word	0x20000000
 8004a0c:	10624dd3 	.word	0x10624dd3
 8004a10:	e000e014 	.word	0xe000e014

08004a14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004a14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004a24 <vPortEnableVFP+0x10>
 8004a18:	6801      	ldr	r1, [r0, #0]
 8004a1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004a1e:	6001      	str	r1, [r0, #0]
 8004a20:	4770      	bx	lr
 8004a22:	0000      	.short	0x0000
 8004a24:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004a28:	bf00      	nop
 8004a2a:	bf00      	nop

08004a2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004a32:	f3ef 8305 	mrs	r3, IPSR
 8004a36:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2b0f      	cmp	r3, #15
 8004a3c:	d914      	bls.n	8004a68 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004a3e:	4a17      	ldr	r2, [pc, #92]	; (8004a9c <vPortValidateInterruptPriority+0x70>)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4413      	add	r3, r2
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004a48:	4b15      	ldr	r3, [pc, #84]	; (8004aa0 <vPortValidateInterruptPriority+0x74>)
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	7afa      	ldrb	r2, [r7, #11]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d20a      	bcs.n	8004a68 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a56:	f383 8811 	msr	BASEPRI, r3
 8004a5a:	f3bf 8f6f 	isb	sy
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	607b      	str	r3, [r7, #4]
    }
 8004a64:	bf00      	nop
 8004a66:	e7fe      	b.n	8004a66 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004a68:	4b0e      	ldr	r3, [pc, #56]	; (8004aa4 <vPortValidateInterruptPriority+0x78>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a70:	4b0d      	ldr	r3, [pc, #52]	; (8004aa8 <vPortValidateInterruptPriority+0x7c>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d90a      	bls.n	8004a8e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7c:	f383 8811 	msr	BASEPRI, r3
 8004a80:	f3bf 8f6f 	isb	sy
 8004a84:	f3bf 8f4f 	dsb	sy
 8004a88:	603b      	str	r3, [r7, #0]
    }
 8004a8a:	bf00      	nop
 8004a8c:	e7fe      	b.n	8004a8c <vPortValidateInterruptPriority+0x60>
    }
 8004a8e:	bf00      	nop
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	e000e3f0 	.word	0xe000e3f0
 8004aa0:	20000174 	.word	0x20000174
 8004aa4:	e000ed0c 	.word	0xe000ed0c
 8004aa8:	20000178 	.word	0x20000178

08004aac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b08a      	sub	sp, #40	; 0x28
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004ab8:	f7fe fc28 	bl	800330c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004abc:	4b65      	ldr	r3, [pc, #404]	; (8004c54 <pvPortMalloc+0x1a8>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d101      	bne.n	8004ac8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004ac4:	f000 f934 	bl	8004d30 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ac8:	4b63      	ldr	r3, [pc, #396]	; (8004c58 <pvPortMalloc+0x1ac>)
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4013      	ands	r3, r2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f040 80a7 	bne.w	8004c24 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d02d      	beq.n	8004b38 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004adc:	2208      	movs	r2, #8
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d227      	bcs.n	8004b38 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004ae8:	2208      	movs	r2, #8
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4413      	add	r3, r2
 8004aee:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f003 0307 	and.w	r3, r3, #7
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d021      	beq.n	8004b3e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f023 0307 	bic.w	r3, r3, #7
 8004b00:	3308      	adds	r3, #8
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d214      	bcs.n	8004b32 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f023 0307 	bic.w	r3, r3, #7
 8004b0e:	3308      	adds	r3, #8
 8004b10:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f003 0307 	and.w	r3, r3, #7
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d010      	beq.n	8004b3e <pvPortMalloc+0x92>
        __asm volatile
 8004b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b20:	f383 8811 	msr	BASEPRI, r3
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	617b      	str	r3, [r7, #20]
    }
 8004b2e:	bf00      	nop
 8004b30:	e7fe      	b.n	8004b30 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004b32:	2300      	movs	r3, #0
 8004b34:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b36:	e002      	b.n	8004b3e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	607b      	str	r3, [r7, #4]
 8004b3c:	e000      	b.n	8004b40 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b3e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d06e      	beq.n	8004c24 <pvPortMalloc+0x178>
 8004b46:	4b45      	ldr	r3, [pc, #276]	; (8004c5c <pvPortMalloc+0x1b0>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d869      	bhi.n	8004c24 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004b50:	4b43      	ldr	r3, [pc, #268]	; (8004c60 <pvPortMalloc+0x1b4>)
 8004b52:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004b54:	4b42      	ldr	r3, [pc, #264]	; (8004c60 <pvPortMalloc+0x1b4>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b5a:	e004      	b.n	8004b66 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d903      	bls.n	8004b78 <pvPortMalloc+0xcc>
 8004b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1f1      	bne.n	8004b5c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004b78:	4b36      	ldr	r3, [pc, #216]	; (8004c54 <pvPortMalloc+0x1a8>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d050      	beq.n	8004c24 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b82:	6a3b      	ldr	r3, [r7, #32]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2208      	movs	r2, #8
 8004b88:	4413      	add	r3, r2
 8004b8a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	1ad2      	subs	r2, r2, r3
 8004b9c:	2308      	movs	r3, #8
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d91f      	bls.n	8004be4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4413      	add	r3, r2
 8004baa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00a      	beq.n	8004bcc <pvPortMalloc+0x120>
        __asm volatile
 8004bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bba:	f383 8811 	msr	BASEPRI, r3
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	f3bf 8f4f 	dsb	sy
 8004bc6:	613b      	str	r3, [r7, #16]
    }
 8004bc8:	bf00      	nop
 8004bca:	e7fe      	b.n	8004bca <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	1ad2      	subs	r2, r2, r3
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004bde:	69b8      	ldr	r0, [r7, #24]
 8004be0:	f000 f908 	bl	8004df4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004be4:	4b1d      	ldr	r3, [pc, #116]	; (8004c5c <pvPortMalloc+0x1b0>)
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	4a1b      	ldr	r2, [pc, #108]	; (8004c5c <pvPortMalloc+0x1b0>)
 8004bf0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004bf2:	4b1a      	ldr	r3, [pc, #104]	; (8004c5c <pvPortMalloc+0x1b0>)
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	4b1b      	ldr	r3, [pc, #108]	; (8004c64 <pvPortMalloc+0x1b8>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d203      	bcs.n	8004c06 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004bfe:	4b17      	ldr	r3, [pc, #92]	; (8004c5c <pvPortMalloc+0x1b0>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a18      	ldr	r2, [pc, #96]	; (8004c64 <pvPortMalloc+0x1b8>)
 8004c04:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	4b13      	ldr	r3, [pc, #76]	; (8004c58 <pvPortMalloc+0x1ac>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	431a      	orrs	r2, r3
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	2200      	movs	r2, #0
 8004c18:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004c1a:	4b13      	ldr	r3, [pc, #76]	; (8004c68 <pvPortMalloc+0x1bc>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	4a11      	ldr	r2, [pc, #68]	; (8004c68 <pvPortMalloc+0x1bc>)
 8004c22:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004c24:	f7fe fb80 	bl	8003328 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <pvPortMalloc+0x19c>
        __asm volatile
 8004c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c36:	f383 8811 	msr	BASEPRI, r3
 8004c3a:	f3bf 8f6f 	isb	sy
 8004c3e:	f3bf 8f4f 	dsb	sy
 8004c42:	60fb      	str	r3, [r7, #12]
    }
 8004c44:	bf00      	nop
 8004c46:	e7fe      	b.n	8004c46 <pvPortMalloc+0x19a>
    return pvReturn;
 8004c48:	69fb      	ldr	r3, [r7, #28]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3728      	adds	r7, #40	; 0x28
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	20012d84 	.word	0x20012d84
 8004c58:	20012d98 	.word	0x20012d98
 8004c5c:	20012d88 	.word	0x20012d88
 8004c60:	20012d7c 	.word	0x20012d7c
 8004c64:	20012d8c 	.word	0x20012d8c
 8004c68:	20012d90 	.word	0x20012d90

08004c6c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d04d      	beq.n	8004d1a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004c7e:	2308      	movs	r3, #8
 8004c80:	425b      	negs	r3, r3
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	4413      	add	r3, r2
 8004c86:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	4b24      	ldr	r3, [pc, #144]	; (8004d24 <vPortFree+0xb8>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4013      	ands	r3, r2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10a      	bne.n	8004cb0 <vPortFree+0x44>
        __asm volatile
 8004c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9e:	f383 8811 	msr	BASEPRI, r3
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	f3bf 8f4f 	dsb	sy
 8004caa:	60fb      	str	r3, [r7, #12]
    }
 8004cac:	bf00      	nop
 8004cae:	e7fe      	b.n	8004cae <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00a      	beq.n	8004cce <vPortFree+0x62>
        __asm volatile
 8004cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbc:	f383 8811 	msr	BASEPRI, r3
 8004cc0:	f3bf 8f6f 	isb	sy
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	60bb      	str	r3, [r7, #8]
    }
 8004cca:	bf00      	nop
 8004ccc:	e7fe      	b.n	8004ccc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	4b14      	ldr	r3, [pc, #80]	; (8004d24 <vPortFree+0xb8>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d01e      	beq.n	8004d1a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d11a      	bne.n	8004d1a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	685a      	ldr	r2, [r3, #4]
 8004ce8:	4b0e      	ldr	r3, [pc, #56]	; (8004d24 <vPortFree+0xb8>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	43db      	mvns	r3, r3
 8004cee:	401a      	ands	r2, r3
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004cf4:	f7fe fb0a 	bl	800330c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	4b0a      	ldr	r3, [pc, #40]	; (8004d28 <vPortFree+0xbc>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4413      	add	r3, r2
 8004d02:	4a09      	ldr	r2, [pc, #36]	; (8004d28 <vPortFree+0xbc>)
 8004d04:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d06:	6938      	ldr	r0, [r7, #16]
 8004d08:	f000 f874 	bl	8004df4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004d0c:	4b07      	ldr	r3, [pc, #28]	; (8004d2c <vPortFree+0xc0>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	3301      	adds	r3, #1
 8004d12:	4a06      	ldr	r2, [pc, #24]	; (8004d2c <vPortFree+0xc0>)
 8004d14:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004d16:	f7fe fb07 	bl	8003328 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004d1a:	bf00      	nop
 8004d1c:	3718      	adds	r7, #24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	20012d98 	.word	0x20012d98
 8004d28:	20012d88 	.word	0x20012d88
 8004d2c:	20012d94 	.word	0x20012d94

08004d30 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d36:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004d3a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004d3c:	4b27      	ldr	r3, [pc, #156]	; (8004ddc <prvHeapInit+0xac>)
 8004d3e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f003 0307 	and.w	r3, r3, #7
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00c      	beq.n	8004d64 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	3307      	adds	r3, #7
 8004d4e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f023 0307 	bic.w	r3, r3, #7
 8004d56:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	4a1f      	ldr	r2, [pc, #124]	; (8004ddc <prvHeapInit+0xac>)
 8004d60:	4413      	add	r3, r2
 8004d62:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d68:	4a1d      	ldr	r2, [pc, #116]	; (8004de0 <prvHeapInit+0xb0>)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004d6e:	4b1c      	ldr	r3, [pc, #112]	; (8004de0 <prvHeapInit+0xb0>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	4413      	add	r3, r2
 8004d7a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004d7c:	2208      	movs	r2, #8
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	1a9b      	subs	r3, r3, r2
 8004d82:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f023 0307 	bic.w	r3, r3, #7
 8004d8a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	4a15      	ldr	r2, [pc, #84]	; (8004de4 <prvHeapInit+0xb4>)
 8004d90:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004d92:	4b14      	ldr	r3, [pc, #80]	; (8004de4 <prvHeapInit+0xb4>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2200      	movs	r2, #0
 8004d98:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004d9a:	4b12      	ldr	r3, [pc, #72]	; (8004de4 <prvHeapInit+0xb4>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	1ad2      	subs	r2, r2, r3
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004db0:	4b0c      	ldr	r3, [pc, #48]	; (8004de4 <prvHeapInit+0xb4>)
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	4a0a      	ldr	r2, [pc, #40]	; (8004de8 <prvHeapInit+0xb8>)
 8004dbe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	4a09      	ldr	r2, [pc, #36]	; (8004dec <prvHeapInit+0xbc>)
 8004dc6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004dc8:	4b09      	ldr	r3, [pc, #36]	; (8004df0 <prvHeapInit+0xc0>)
 8004dca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004dce:	601a      	str	r2, [r3, #0]
}
 8004dd0:	bf00      	nop
 8004dd2:	3714      	adds	r7, #20
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr
 8004ddc:	2000017c 	.word	0x2000017c
 8004de0:	20012d7c 	.word	0x20012d7c
 8004de4:	20012d84 	.word	0x20012d84
 8004de8:	20012d8c 	.word	0x20012d8c
 8004dec:	20012d88 	.word	0x20012d88
 8004df0:	20012d98 	.word	0x20012d98

08004df4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004dfc:	4b28      	ldr	r3, [pc, #160]	; (8004ea0 <prvInsertBlockIntoFreeList+0xac>)
 8004dfe:	60fb      	str	r3, [r7, #12]
 8004e00:	e002      	b.n	8004e08 <prvInsertBlockIntoFreeList+0x14>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	60fb      	str	r3, [r7, #12]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d8f7      	bhi.n	8004e02 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d108      	bne.n	8004e36 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	441a      	add	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	441a      	add	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d118      	bne.n	8004e7c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	4b15      	ldr	r3, [pc, #84]	; (8004ea4 <prvInsertBlockIntoFreeList+0xb0>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d00d      	beq.n	8004e72 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	441a      	add	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	e008      	b.n	8004e84 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e72:	4b0c      	ldr	r3, [pc, #48]	; (8004ea4 <prvInsertBlockIntoFreeList+0xb0>)
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	e003      	b.n	8004e84 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d002      	beq.n	8004e92 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004e92:	bf00      	nop
 8004e94:	3714      	adds	r7, #20
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	20012d7c 	.word	0x20012d7c
 8004ea4:	20012d84 	.word	0x20012d84

08004ea8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004eae:	2300      	movs	r3, #0
 8004eb0:	607b      	str	r3, [r7, #4]
 8004eb2:	e033      	b.n	8004f1c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004eb4:	491e      	ldr	r1, [pc, #120]	; (8004f30 <_cbSendTaskList+0x88>)
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4413      	add	r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	440b      	add	r3, r1
 8004ec2:	6818      	ldr	r0, [r3, #0]
 8004ec4:	491a      	ldr	r1, [pc, #104]	; (8004f30 <_cbSendTaskList+0x88>)
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4413      	add	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	440b      	add	r3, r1
 8004ed2:	3304      	adds	r3, #4
 8004ed4:	6819      	ldr	r1, [r3, #0]
 8004ed6:	4c16      	ldr	r4, [pc, #88]	; (8004f30 <_cbSendTaskList+0x88>)
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	4613      	mov	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4423      	add	r3, r4
 8004ee4:	3308      	adds	r3, #8
 8004ee6:	681c      	ldr	r4, [r3, #0]
 8004ee8:	4d11      	ldr	r5, [pc, #68]	; (8004f30 <_cbSendTaskList+0x88>)
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	4613      	mov	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	442b      	add	r3, r5
 8004ef6:	330c      	adds	r3, #12
 8004ef8:	681d      	ldr	r5, [r3, #0]
 8004efa:	4e0d      	ldr	r6, [pc, #52]	; (8004f30 <_cbSendTaskList+0x88>)
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	4613      	mov	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4413      	add	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4433      	add	r3, r6
 8004f08:	3310      	adds	r3, #16
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	462b      	mov	r3, r5
 8004f10:	4622      	mov	r2, r4
 8004f12:	f000 f925 	bl	8005160 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	607b      	str	r3, [r7, #4]
 8004f1c:	4b05      	ldr	r3, [pc, #20]	; (8004f34 <_cbSendTaskList+0x8c>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d3c6      	bcc.n	8004eb4 <_cbSendTaskList+0xc>
  }
}
 8004f26:	bf00      	nop
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f30:	20012d9c 	.word	0x20012d9c
 8004f34:	20012e3c 	.word	0x20012e3c

08004f38 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004f38:	b5b0      	push	{r4, r5, r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004f3e:	f7fe faa3 	bl	8003488 <xTaskGetTickCountFromISR>
 8004f42:	4603      	mov	r3, r0
 8004f44:	461a      	mov	r2, r3
 8004f46:	f04f 0300 	mov.w	r3, #0
 8004f4a:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004f4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f52:	4602      	mov	r2, r0
 8004f54:	460b      	mov	r3, r1
 8004f56:	f04f 0400 	mov.w	r4, #0
 8004f5a:	f04f 0500 	mov.w	r5, #0
 8004f5e:	015d      	lsls	r5, r3, #5
 8004f60:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8004f64:	0154      	lsls	r4, r2, #5
 8004f66:	4622      	mov	r2, r4
 8004f68:	462b      	mov	r3, r5
 8004f6a:	1a12      	subs	r2, r2, r0
 8004f6c:	eb63 0301 	sbc.w	r3, r3, r1
 8004f70:	f04f 0400 	mov.w	r4, #0
 8004f74:	f04f 0500 	mov.w	r5, #0
 8004f78:	009d      	lsls	r5, r3, #2
 8004f7a:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8004f7e:	0094      	lsls	r4, r2, #2
 8004f80:	4622      	mov	r2, r4
 8004f82:	462b      	mov	r3, r5
 8004f84:	1812      	adds	r2, r2, r0
 8004f86:	eb41 0303 	adc.w	r3, r1, r3
 8004f8a:	f04f 0000 	mov.w	r0, #0
 8004f8e:	f04f 0100 	mov.w	r1, #0
 8004f92:	00d9      	lsls	r1, r3, #3
 8004f94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f98:	00d0      	lsls	r0, r2, #3
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8004fa2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004fa6:	4610      	mov	r0, r2
 8004fa8:	4619      	mov	r1, r3
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bdb0      	pop	{r4, r5, r7, pc}

08004fb0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b086      	sub	sp, #24
 8004fb4:	af02      	add	r7, sp, #8
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
 8004fbc:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004fbe:	2205      	movs	r2, #5
 8004fc0:	492b      	ldr	r1, [pc, #172]	; (8005070 <SYSVIEW_AddTask+0xc0>)
 8004fc2:	68b8      	ldr	r0, [r7, #8]
 8004fc4:	f002 f916 	bl	80071f4 <memcmp>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d04b      	beq.n	8005066 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004fce:	4b29      	ldr	r3, [pc, #164]	; (8005074 <SYSVIEW_AddTask+0xc4>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2b07      	cmp	r3, #7
 8004fd4:	d903      	bls.n	8004fde <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004fd6:	4828      	ldr	r0, [pc, #160]	; (8005078 <SYSVIEW_AddTask+0xc8>)
 8004fd8:	f002 f868 	bl	80070ac <SEGGER_SYSVIEW_Warn>
    return;
 8004fdc:	e044      	b.n	8005068 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004fde:	4b25      	ldr	r3, [pc, #148]	; (8005074 <SYSVIEW_AddTask+0xc4>)
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	4926      	ldr	r1, [pc, #152]	; (800507c <SYSVIEW_AddTask+0xcc>)
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4413      	add	r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	440b      	add	r3, r1
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004ff2:	4b20      	ldr	r3, [pc, #128]	; (8005074 <SYSVIEW_AddTask+0xc4>)
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	4921      	ldr	r1, [pc, #132]	; (800507c <SYSVIEW_AddTask+0xcc>)
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	440b      	add	r3, r1
 8005002:	3304      	adds	r3, #4
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005008:	4b1a      	ldr	r3, [pc, #104]	; (8005074 <SYSVIEW_AddTask+0xc4>)
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	491b      	ldr	r1, [pc, #108]	; (800507c <SYSVIEW_AddTask+0xcc>)
 800500e:	4613      	mov	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	440b      	add	r3, r1
 8005018:	3308      	adds	r3, #8
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800501e:	4b15      	ldr	r3, [pc, #84]	; (8005074 <SYSVIEW_AddTask+0xc4>)
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	4916      	ldr	r1, [pc, #88]	; (800507c <SYSVIEW_AddTask+0xcc>)
 8005024:	4613      	mov	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4413      	add	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	440b      	add	r3, r1
 800502e:	330c      	adds	r3, #12
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8005034:	4b0f      	ldr	r3, [pc, #60]	; (8005074 <SYSVIEW_AddTask+0xc4>)
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	4910      	ldr	r1, [pc, #64]	; (800507c <SYSVIEW_AddTask+0xcc>)
 800503a:	4613      	mov	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4413      	add	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	440b      	add	r3, r1
 8005044:	3310      	adds	r3, #16
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800504a:	4b0a      	ldr	r3, [pc, #40]	; (8005074 <SYSVIEW_AddTask+0xc4>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	3301      	adds	r3, #1
 8005050:	4a08      	ldr	r2, [pc, #32]	; (8005074 <SYSVIEW_AddTask+0xc4>)
 8005052:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	68b9      	ldr	r1, [r7, #8]
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 f87e 	bl	8005160 <SYSVIEW_SendTaskInfo>
 8005064:	e000      	b.n	8005068 <SYSVIEW_AddTask+0xb8>
    return;
 8005066:	bf00      	nop

}
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	080072a4 	.word	0x080072a4
 8005074:	20012e3c 	.word	0x20012e3c
 8005078:	080072ac 	.word	0x080072ac
 800507c:	20012d9c 	.word	0x20012d9c

08005080 <SYSVIEW_UpdateTask>:
*       SYSVIEW_UpdateTask()
*
*  Function description
*    Update a task in the internal list and record its information.
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
 8005080:	b580      	push	{r7, lr}
 8005082:	b088      	sub	sp, #32
 8005084:	af02      	add	r7, sp, #8
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
 800508c:	603b      	str	r3, [r7, #0]
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800508e:	2205      	movs	r2, #5
 8005090:	4930      	ldr	r1, [pc, #192]	; (8005154 <SYSVIEW_UpdateTask+0xd4>)
 8005092:	68b8      	ldr	r0, [r7, #8]
 8005094:	f002 f8ae 	bl	80071f4 <memcmp>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d056      	beq.n	800514c <SYSVIEW_UpdateTask+0xcc>
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
 800509e:	2300      	movs	r3, #0
 80050a0:	617b      	str	r3, [r7, #20]
 80050a2:	e00d      	b.n	80050c0 <SYSVIEW_UpdateTask+0x40>
    if (_aTasks[n].xHandle == xHandle) {
 80050a4:	492c      	ldr	r1, [pc, #176]	; (8005158 <SYSVIEW_UpdateTask+0xd8>)
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	4613      	mov	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	440b      	add	r3, r1
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d008      	beq.n	80050cc <SYSVIEW_UpdateTask+0x4c>
  for (n = 0; n < _NumTasks; n++) {
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	3301      	adds	r3, #1
 80050be:	617b      	str	r3, [r7, #20]
 80050c0:	4b26      	ldr	r3, [pc, #152]	; (800515c <SYSVIEW_UpdateTask+0xdc>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d3ec      	bcc.n	80050a4 <SYSVIEW_UpdateTask+0x24>
 80050ca:	e000      	b.n	80050ce <SYSVIEW_UpdateTask+0x4e>
      break;
 80050cc:	bf00      	nop
    }
  }
  if (n < _NumTasks) {
 80050ce:	4b23      	ldr	r3, [pc, #140]	; (800515c <SYSVIEW_UpdateTask+0xdc>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d230      	bcs.n	800513a <SYSVIEW_UpdateTask+0xba>
    _aTasks[n].pcTaskName = pcTaskName;
 80050d8:	491f      	ldr	r1, [pc, #124]	; (8005158 <SYSVIEW_UpdateTask+0xd8>)
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	4613      	mov	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4413      	add	r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	440b      	add	r3, r1
 80050e6:	3304      	adds	r3, #4
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	601a      	str	r2, [r3, #0]
    _aTasks[n].uxCurrentPriority = uxCurrentPriority;
 80050ec:	491a      	ldr	r1, [pc, #104]	; (8005158 <SYSVIEW_UpdateTask+0xd8>)
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	4613      	mov	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4413      	add	r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	440b      	add	r3, r1
 80050fa:	3308      	adds	r3, #8
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	601a      	str	r2, [r3, #0]
    _aTasks[n].pxStack = pxStack;
 8005100:	4915      	ldr	r1, [pc, #84]	; (8005158 <SYSVIEW_UpdateTask+0xd8>)
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	4613      	mov	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	440b      	add	r3, r1
 800510e:	330c      	adds	r3, #12
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	601a      	str	r2, [r3, #0]
    _aTasks[n].uStackHighWaterMark = uStackHighWaterMark;
 8005114:	4910      	ldr	r1, [pc, #64]	; (8005158 <SYSVIEW_UpdateTask+0xd8>)
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	4613      	mov	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	440b      	add	r3, r1
 8005122:	3310      	adds	r3, #16
 8005124:	6a3a      	ldr	r2, [r7, #32]
 8005126:	601a      	str	r2, [r3, #0]

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005128:	6a3b      	ldr	r3, [r7, #32]
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	68b9      	ldr	r1, [r7, #8]
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f000 f814 	bl	8005160 <SYSVIEW_SendTaskInfo>
 8005138:	e009      	b.n	800514e <SYSVIEW_UpdateTask+0xce>
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 800513a:	6a3b      	ldr	r3, [r7, #32]
 800513c:	9300      	str	r3, [sp, #0]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	68b9      	ldr	r1, [r7, #8]
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f7ff ff33 	bl	8004fb0 <SYSVIEW_AddTask>
 800514a:	e000      	b.n	800514e <SYSVIEW_UpdateTask+0xce>
    return;
 800514c:	bf00      	nop
  }
}
 800514e:	3718      	adds	r7, #24
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	080072a4 	.word	0x080072a4
 8005158:	20012d9c 	.word	0x20012d9c
 800515c:	20012e3c 	.word	0x20012e3c

08005160 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005160:	b580      	push	{r7, lr}
 8005162:	b08a      	sub	sp, #40	; 0x28
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
 800516c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800516e:	f107 0314 	add.w	r3, r7, #20
 8005172:	2214      	movs	r2, #20
 8005174:	2100      	movs	r1, #0
 8005176:	4618      	mov	r0, r3
 8005178:	f002 f858 	bl	800722c <memset>
  TaskInfo.TaskID     = TaskID;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800518c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005190:	f107 0314 	add.w	r3, r7, #20
 8005194:	4618      	mov	r0, r3
 8005196:	f001 fb7f 	bl	8006898 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800519a:	bf00      	nop
 800519c:	3728      	adds	r7, #40	; 0x28
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
	...

080051a4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80051aa:	4b1e      	ldr	r3, [pc, #120]	; (8005224 <USART2_IRQHandler+0x80>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f003 0320 	and.w	r3, r3, #32
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d011      	beq.n	80051de <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80051ba:	4b1b      	ldr	r3, [pc, #108]	; (8005228 <USART2_IRQHandler+0x84>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f003 030b 	and.w	r3, r3, #11
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d108      	bne.n	80051de <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80051cc:	4b17      	ldr	r3, [pc, #92]	; (800522c <USART2_IRQHandler+0x88>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d004      	beq.n	80051de <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80051d4:	4b15      	ldr	r3, [pc, #84]	; (800522c <USART2_IRQHandler+0x88>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	79fa      	ldrb	r2, [r7, #7]
 80051da:	4610      	mov	r0, r2
 80051dc:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d01a      	beq.n	800521e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80051e8:	4b11      	ldr	r3, [pc, #68]	; (8005230 <USART2_IRQHandler+0x8c>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d015      	beq.n	800521c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80051f0:	4b0f      	ldr	r3, [pc, #60]	; (8005230 <USART2_IRQHandler+0x8c>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	1dfa      	adds	r2, r7, #7
 80051f6:	4610      	mov	r0, r2
 80051f8:	4798      	blx	r3
 80051fa:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d106      	bne.n	8005210 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005202:	4b0c      	ldr	r3, [pc, #48]	; (8005234 <USART2_IRQHandler+0x90>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a0b      	ldr	r2, [pc, #44]	; (8005234 <USART2_IRQHandler+0x90>)
 8005208:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800520c:	6013      	str	r3, [r2, #0]
 800520e:	e006      	b.n	800521e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005210:	4b04      	ldr	r3, [pc, #16]	; (8005224 <USART2_IRQHandler+0x80>)
 8005212:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005214:	79fa      	ldrb	r2, [r7, #7]
 8005216:	4b04      	ldr	r3, [pc, #16]	; (8005228 <USART2_IRQHandler+0x84>)
 8005218:	601a      	str	r2, [r3, #0]
 800521a:	e000      	b.n	800521e <USART2_IRQHandler+0x7a>
      return;
 800521c:	bf00      	nop
    }
  }
}
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	40004400 	.word	0x40004400
 8005228:	40004404 	.word	0x40004404
 800522c:	20012e40 	.word	0x20012e40
 8005230:	20012e44 	.word	0x20012e44
 8005234:	4000440c 	.word	0x4000440c

08005238 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005238:	b480      	push	{r7}
 800523a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800523c:	4b05      	ldr	r3, [pc, #20]	; (8005254 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a04      	ldr	r2, [pc, #16]	; (8005254 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005246:	6013      	str	r3, [r2, #0]
}
 8005248:	bf00      	nop
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	4000440c 	.word	0x4000440c

08005258 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800525e:	4b24      	ldr	r3, [pc, #144]	; (80052f0 <_DoInit+0x98>)
 8005260:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2203      	movs	r2, #3
 8005266:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2203      	movs	r2, #3
 800526c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a20      	ldr	r2, [pc, #128]	; (80052f4 <_DoInit+0x9c>)
 8005272:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a20      	ldr	r2, [pc, #128]	; (80052f8 <_DoInit+0xa0>)
 8005278:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005280:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a17      	ldr	r2, [pc, #92]	; (80052f4 <_DoInit+0x9c>)
 8005298:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a17      	ldr	r2, [pc, #92]	; (80052fc <_DoInit+0xa4>)
 800529e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2210      	movs	r2, #16
 80052a4:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	3307      	adds	r3, #7
 80052bc:	4a10      	ldr	r2, [pc, #64]	; (8005300 <_DoInit+0xa8>)
 80052be:	6810      	ldr	r0, [r2, #0]
 80052c0:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80052c2:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a0e      	ldr	r2, [pc, #56]	; (8005304 <_DoInit+0xac>)
 80052ca:	6810      	ldr	r0, [r2, #0]
 80052cc:	6018      	str	r0, [r3, #0]
 80052ce:	8891      	ldrh	r1, [r2, #4]
 80052d0:	7992      	ldrb	r2, [r2, #6]
 80052d2:	8099      	strh	r1, [r3, #4]
 80052d4:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80052d6:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2220      	movs	r2, #32
 80052de:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80052e0:	f3bf 8f5f 	dmb	sy
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	20014400 	.word	0x20014400
 80052f4:	080072fc 	.word	0x080072fc
 80052f8:	20012e48 	.word	0x20012e48
 80052fc:	20013248 	.word	0x20013248
 8005300:	08007308 	.word	0x08007308
 8005304:	0800730c 	.word	0x0800730c

08005308 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005308:	b580      	push	{r7, lr}
 800530a:	b08c      	sub	sp, #48	; 0x30
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005314:	4b3e      	ldr	r3, [pc, #248]	; (8005410 <SEGGER_RTT_ReadNoLock+0x108>)
 8005316:	623b      	str	r3, [r7, #32]
 8005318:	6a3b      	ldr	r3, [r7, #32]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <SEGGER_RTT_ReadNoLock+0x1e>
 8005322:	f7ff ff99 	bl	8005258 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	4613      	mov	r3, r2
 800532a:	005b      	lsls	r3, r3, #1
 800532c:	4413      	add	r3, r2
 800532e:	00db      	lsls	r3, r3, #3
 8005330:	3360      	adds	r3, #96	; 0x60
 8005332:	4a37      	ldr	r2, [pc, #220]	; (8005410 <SEGGER_RTT_ReadNoLock+0x108>)
 8005334:	4413      	add	r3, r2
 8005336:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005348:	2300      	movs	r3, #0
 800534a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800534c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	429a      	cmp	r2, r3
 8005352:	d92b      	bls.n	80053ac <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4293      	cmp	r3, r2
 8005364:	bf28      	it	cs
 8005366:	4613      	movcs	r3, r2
 8005368:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	685a      	ldr	r2, [r3, #4]
 800536e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005370:	4413      	add	r3, r2
 8005372:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	6939      	ldr	r1, [r7, #16]
 8005378:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800537a:	f001 ff49 	bl	8007210 <memcpy>
    NumBytesRead += NumBytesRem;
 800537e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	4413      	add	r3, r2
 8005384:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	4413      	add	r3, r2
 800538c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005396:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	4413      	add	r3, r2
 800539c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d101      	bne.n	80053ac <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80053a8:	2300      	movs	r3, #0
 80053aa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4293      	cmp	r3, r2
 80053ba:	bf28      	it	cs
 80053bc:	4613      	movcs	r3, r2
 80053be:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d019      	beq.n	80053fa <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	685a      	ldr	r2, [r3, #4]
 80053ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053cc:	4413      	add	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	6939      	ldr	r1, [r7, #16]
 80053d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053d6:	f001 ff1b 	bl	8007210 <memcpy>
    NumBytesRead += NumBytesRem;
 80053da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	4413      	add	r3, r2
 80053e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80053e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	4413      	add	r3, r2
 80053e8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80053f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	4413      	add	r3, r2
 80053f8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80053fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d002      	beq.n	8005406 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005404:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005408:	4618      	mov	r0, r3
 800540a:	3730      	adds	r7, #48	; 0x30
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	20014400 	.word	0x20014400

08005414 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005414:	b580      	push	{r7, lr}
 8005416:	b088      	sub	sp, #32
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
 8005420:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005422:	4b3d      	ldr	r3, [pc, #244]	; (8005518 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005424:	61bb      	str	r3, [r7, #24]
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b00      	cmp	r3, #0
 800542e:	d101      	bne.n	8005434 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005430:	f7ff ff12 	bl	8005258 <_DoInit>
  SEGGER_RTT_LOCK();
 8005434:	f3ef 8311 	mrs	r3, BASEPRI
 8005438:	f04f 0120 	mov.w	r1, #32
 800543c:	f381 8811 	msr	BASEPRI, r1
 8005440:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005442:	4b35      	ldr	r3, [pc, #212]	; (8005518 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005444:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005446:	2300      	movs	r3, #0
 8005448:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800544a:	6939      	ldr	r1, [r7, #16]
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	1c5a      	adds	r2, r3, #1
 8005450:	4613      	mov	r3, r2
 8005452:	005b      	lsls	r3, r3, #1
 8005454:	4413      	add	r3, r2
 8005456:	00db      	lsls	r3, r3, #3
 8005458:	440b      	add	r3, r1
 800545a:	3304      	adds	r3, #4
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d008      	beq.n	8005474 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	3301      	adds	r3, #1
 8005466:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	69fa      	ldr	r2, [r7, #28]
 800546e:	429a      	cmp	r2, r3
 8005470:	dbeb      	blt.n	800544a <SEGGER_RTT_AllocUpBuffer+0x36>
 8005472:	e000      	b.n	8005476 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005474:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	69fa      	ldr	r2, [r7, #28]
 800547c:	429a      	cmp	r2, r3
 800547e:	da3f      	bge.n	8005500 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005480:	6939      	ldr	r1, [r7, #16]
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	1c5a      	adds	r2, r3, #1
 8005486:	4613      	mov	r3, r2
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	4413      	add	r3, r2
 800548c:	00db      	lsls	r3, r3, #3
 800548e:	440b      	add	r3, r1
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005494:	6939      	ldr	r1, [r7, #16]
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	1c5a      	adds	r2, r3, #1
 800549a:	4613      	mov	r3, r2
 800549c:	005b      	lsls	r3, r3, #1
 800549e:	4413      	add	r3, r2
 80054a0:	00db      	lsls	r3, r3, #3
 80054a2:	440b      	add	r3, r1
 80054a4:	3304      	adds	r3, #4
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80054aa:	6939      	ldr	r1, [r7, #16]
 80054ac:	69fa      	ldr	r2, [r7, #28]
 80054ae:	4613      	mov	r3, r2
 80054b0:	005b      	lsls	r3, r3, #1
 80054b2:	4413      	add	r3, r2
 80054b4:	00db      	lsls	r3, r3, #3
 80054b6:	440b      	add	r3, r1
 80054b8:	3320      	adds	r3, #32
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80054be:	6939      	ldr	r1, [r7, #16]
 80054c0:	69fa      	ldr	r2, [r7, #28]
 80054c2:	4613      	mov	r3, r2
 80054c4:	005b      	lsls	r3, r3, #1
 80054c6:	4413      	add	r3, r2
 80054c8:	00db      	lsls	r3, r3, #3
 80054ca:	440b      	add	r3, r1
 80054cc:	3328      	adds	r3, #40	; 0x28
 80054ce:	2200      	movs	r2, #0
 80054d0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80054d2:	6939      	ldr	r1, [r7, #16]
 80054d4:	69fa      	ldr	r2, [r7, #28]
 80054d6:	4613      	mov	r3, r2
 80054d8:	005b      	lsls	r3, r3, #1
 80054da:	4413      	add	r3, r2
 80054dc:	00db      	lsls	r3, r3, #3
 80054de:	440b      	add	r3, r1
 80054e0:	3324      	adds	r3, #36	; 0x24
 80054e2:	2200      	movs	r2, #0
 80054e4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80054e6:	6939      	ldr	r1, [r7, #16]
 80054e8:	69fa      	ldr	r2, [r7, #28]
 80054ea:	4613      	mov	r3, r2
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	4413      	add	r3, r2
 80054f0:	00db      	lsls	r3, r3, #3
 80054f2:	440b      	add	r3, r1
 80054f4:	332c      	adds	r3, #44	; 0x2c
 80054f6:	683a      	ldr	r2, [r7, #0]
 80054f8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80054fa:	f3bf 8f5f 	dmb	sy
 80054fe:	e002      	b.n	8005506 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005500:	f04f 33ff 	mov.w	r3, #4294967295
 8005504:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800550c:	69fb      	ldr	r3, [r7, #28]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3720      	adds	r7, #32
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	20014400 	.word	0x20014400

0800551c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800551c:	b580      	push	{r7, lr}
 800551e:	b088      	sub	sp, #32
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
 8005528:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800552a:	4b33      	ldr	r3, [pc, #204]	; (80055f8 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800552c:	61bb      	str	r3, [r7, #24]
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005538:	f7ff fe8e 	bl	8005258 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800553c:	4b2e      	ldr	r3, [pc, #184]	; (80055f8 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800553e:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	461a      	mov	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	4293      	cmp	r3, r2
 800554a:	d24d      	bcs.n	80055e8 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 800554c:	f3ef 8311 	mrs	r3, BASEPRI
 8005550:	f04f 0120 	mov.w	r1, #32
 8005554:	f381 8811 	msr	BASEPRI, r1
 8005558:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d031      	beq.n	80055c4 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005560:	6979      	ldr	r1, [r7, #20]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	4613      	mov	r3, r2
 8005566:	005b      	lsls	r3, r3, #1
 8005568:	4413      	add	r3, r2
 800556a:	00db      	lsls	r3, r3, #3
 800556c:	440b      	add	r3, r1
 800556e:	3360      	adds	r3, #96	; 0x60
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005574:	6979      	ldr	r1, [r7, #20]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	4613      	mov	r3, r2
 800557a:	005b      	lsls	r3, r3, #1
 800557c:	4413      	add	r3, r2
 800557e:	00db      	lsls	r3, r3, #3
 8005580:	440b      	add	r3, r1
 8005582:	3364      	adds	r3, #100	; 0x64
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005588:	6979      	ldr	r1, [r7, #20]
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	4613      	mov	r3, r2
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	4413      	add	r3, r2
 8005592:	00db      	lsls	r3, r3, #3
 8005594:	440b      	add	r3, r1
 8005596:	3368      	adds	r3, #104	; 0x68
 8005598:	683a      	ldr	r2, [r7, #0]
 800559a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 800559c:	6979      	ldr	r1, [r7, #20]
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	4613      	mov	r3, r2
 80055a2:	005b      	lsls	r3, r3, #1
 80055a4:	4413      	add	r3, r2
 80055a6:	00db      	lsls	r3, r3, #3
 80055a8:	440b      	add	r3, r1
 80055aa:	3370      	adds	r3, #112	; 0x70
 80055ac:	2200      	movs	r2, #0
 80055ae:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80055b0:	6979      	ldr	r1, [r7, #20]
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	4613      	mov	r3, r2
 80055b6:	005b      	lsls	r3, r3, #1
 80055b8:	4413      	add	r3, r2
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	440b      	add	r3, r1
 80055be:	336c      	adds	r3, #108	; 0x6c
 80055c0:	2200      	movs	r2, #0
 80055c2:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80055c4:	6979      	ldr	r1, [r7, #20]
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	4613      	mov	r3, r2
 80055ca:	005b      	lsls	r3, r3, #1
 80055cc:	4413      	add	r3, r2
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	440b      	add	r3, r1
 80055d2:	3374      	adds	r3, #116	; 0x74
 80055d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055d6:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80055d8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80055e2:	2300      	movs	r3, #0
 80055e4:	61fb      	str	r3, [r7, #28]
 80055e6:	e002      	b.n	80055ee <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 80055e8:	f04f 33ff 	mov.w	r3, #4294967295
 80055ec:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80055ee:	69fb      	ldr	r3, [r7, #28]
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3720      	adds	r7, #32
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	20014400 	.word	0x20014400

080055fc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80055fc:	b480      	push	{r7}
 80055fe:	b087      	sub	sp, #28
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005608:	2300      	movs	r3, #0
 800560a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800560c:	e002      	b.n	8005614 <_EncodeStr+0x18>
    Len++;
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	3301      	adds	r3, #1
 8005612:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	4413      	add	r3, r2
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1f6      	bne.n	800560e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	429a      	cmp	r2, r3
 8005626:	d901      	bls.n	800562c <_EncodeStr+0x30>
    Len = Limit;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	2bfe      	cmp	r3, #254	; 0xfe
 8005630:	d806      	bhi.n	8005640 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	1c5a      	adds	r2, r3, #1
 8005636:	60fa      	str	r2, [r7, #12]
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	b2d2      	uxtb	r2, r2
 800563c:	701a      	strb	r2, [r3, #0]
 800563e:	e011      	b.n	8005664 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	1c5a      	adds	r2, r3, #1
 8005644:	60fa      	str	r2, [r7, #12]
 8005646:	22ff      	movs	r2, #255	; 0xff
 8005648:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	60fa      	str	r2, [r7, #12]
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	b2d2      	uxtb	r2, r2
 8005654:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	0a19      	lsrs	r1, r3, #8
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	1c5a      	adds	r2, r3, #1
 800565e:	60fa      	str	r2, [r7, #12]
 8005660:	b2ca      	uxtb	r2, r1
 8005662:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005664:	2300      	movs	r3, #0
 8005666:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005668:	e00a      	b.n	8005680 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	1c53      	adds	r3, r2, #1
 800566e:	60bb      	str	r3, [r7, #8]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	1c59      	adds	r1, r3, #1
 8005674:	60f9      	str	r1, [r7, #12]
 8005676:	7812      	ldrb	r2, [r2, #0]
 8005678:	701a      	strb	r2, [r3, #0]
    n++;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	3301      	adds	r3, #1
 800567e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	429a      	cmp	r2, r3
 8005686:	d3f0      	bcc.n	800566a <_EncodeStr+0x6e>
  }
  return pPayload;
 8005688:	68fb      	ldr	r3, [r7, #12]
}
 800568a:	4618      	mov	r0, r3
 800568c:	371c      	adds	r7, #28
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005696:	b480      	push	{r7}
 8005698:	b083      	sub	sp, #12
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	3304      	adds	r3, #4
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
	...

080056b0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80056b6:	4b36      	ldr	r3, [pc, #216]	; (8005790 <_HandleIncomingPacket+0xe0>)
 80056b8:	7e1b      	ldrb	r3, [r3, #24]
 80056ba:	4618      	mov	r0, r3
 80056bc:	1cfb      	adds	r3, r7, #3
 80056be:	2201      	movs	r2, #1
 80056c0:	4619      	mov	r1, r3
 80056c2:	f7ff fe21 	bl	8005308 <SEGGER_RTT_ReadNoLock>
 80056c6:	4603      	mov	r3, r0
 80056c8:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	dd54      	ble.n	800577a <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80056d0:	78fb      	ldrb	r3, [r7, #3]
 80056d2:	2b80      	cmp	r3, #128	; 0x80
 80056d4:	d032      	beq.n	800573c <_HandleIncomingPacket+0x8c>
 80056d6:	2b80      	cmp	r3, #128	; 0x80
 80056d8:	dc42      	bgt.n	8005760 <_HandleIncomingPacket+0xb0>
 80056da:	2b07      	cmp	r3, #7
 80056dc:	dc16      	bgt.n	800570c <_HandleIncomingPacket+0x5c>
 80056de:	2b00      	cmp	r3, #0
 80056e0:	dd3e      	ble.n	8005760 <_HandleIncomingPacket+0xb0>
 80056e2:	3b01      	subs	r3, #1
 80056e4:	2b06      	cmp	r3, #6
 80056e6:	d83b      	bhi.n	8005760 <_HandleIncomingPacket+0xb0>
 80056e8:	a201      	add	r2, pc, #4	; (adr r2, 80056f0 <_HandleIncomingPacket+0x40>)
 80056ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ee:	bf00      	nop
 80056f0:	08005713 	.word	0x08005713
 80056f4:	08005719 	.word	0x08005719
 80056f8:	0800571f 	.word	0x0800571f
 80056fc:	08005725 	.word	0x08005725
 8005700:	0800572b 	.word	0x0800572b
 8005704:	08005731 	.word	0x08005731
 8005708:	08005737 	.word	0x08005737
 800570c:	2b7f      	cmp	r3, #127	; 0x7f
 800570e:	d036      	beq.n	800577e <_HandleIncomingPacket+0xce>
 8005710:	e026      	b.n	8005760 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005712:	f000 ff45 	bl	80065a0 <SEGGER_SYSVIEW_Start>
      break;
 8005716:	e037      	b.n	8005788 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005718:	f000 fffe 	bl	8006718 <SEGGER_SYSVIEW_Stop>
      break;
 800571c:	e034      	b.n	8005788 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800571e:	f001 f9d7 	bl	8006ad0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005722:	e031      	b.n	8005788 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005724:	f001 f99c 	bl	8006a60 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005728:	e02e      	b.n	8005788 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800572a:	f001 f81b 	bl	8006764 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800572e:	e02b      	b.n	8005788 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005730:	f001 fc6a 	bl	8007008 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005734:	e028      	b.n	8005788 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005736:	f001 fc49 	bl	8006fcc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800573a:	e025      	b.n	8005788 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800573c:	4b14      	ldr	r3, [pc, #80]	; (8005790 <_HandleIncomingPacket+0xe0>)
 800573e:	7e1b      	ldrb	r3, [r3, #24]
 8005740:	4618      	mov	r0, r3
 8005742:	1cfb      	adds	r3, r7, #3
 8005744:	2201      	movs	r2, #1
 8005746:	4619      	mov	r1, r3
 8005748:	f7ff fdde 	bl	8005308 <SEGGER_RTT_ReadNoLock>
 800574c:	4603      	mov	r3, r0
 800574e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	dd15      	ble.n	8005782 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005756:	78fb      	ldrb	r3, [r7, #3]
 8005758:	4618      	mov	r0, r3
 800575a:	f001 fbb7 	bl	8006ecc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800575e:	e010      	b.n	8005782 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005760:	78fb      	ldrb	r3, [r7, #3]
 8005762:	b25b      	sxtb	r3, r3
 8005764:	2b00      	cmp	r3, #0
 8005766:	da0e      	bge.n	8005786 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005768:	4b09      	ldr	r3, [pc, #36]	; (8005790 <_HandleIncomingPacket+0xe0>)
 800576a:	7e1b      	ldrb	r3, [r3, #24]
 800576c:	4618      	mov	r0, r3
 800576e:	1cfb      	adds	r3, r7, #3
 8005770:	2201      	movs	r2, #1
 8005772:	4619      	mov	r1, r3
 8005774:	f7ff fdc8 	bl	8005308 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005778:	e005      	b.n	8005786 <_HandleIncomingPacket+0xd6>
    }
  }
 800577a:	bf00      	nop
 800577c:	e004      	b.n	8005788 <_HandleIncomingPacket+0xd8>
      break;
 800577e:	bf00      	nop
 8005780:	e002      	b.n	8005788 <_HandleIncomingPacket+0xd8>
      break;
 8005782:	bf00      	nop
 8005784:	e000      	b.n	8005788 <_HandleIncomingPacket+0xd8>
      break;
 8005786:	bf00      	nop
}
 8005788:	bf00      	nop
 800578a:	3708      	adds	r7, #8
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	20014260 	.word	0x20014260

08005794 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005794:	b580      	push	{r7, lr}
 8005796:	b08c      	sub	sp, #48	; 0x30
 8005798:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800579a:	2301      	movs	r3, #1
 800579c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800579e:	1d3b      	adds	r3, r7, #4
 80057a0:	3301      	adds	r3, #1
 80057a2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057a8:	4b32      	ldr	r3, [pc, #200]	; (8005874 <_TrySendOverflowPacket+0xe0>)
 80057aa:	695b      	ldr	r3, [r3, #20]
 80057ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80057ae:	e00b      	b.n	80057c8 <_TrySendOverflowPacket+0x34>
 80057b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b6:	1c59      	adds	r1, r3, #1
 80057b8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80057ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057be:	b2d2      	uxtb	r2, r2
 80057c0:	701a      	strb	r2, [r3, #0]
 80057c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c4:	09db      	lsrs	r3, r3, #7
 80057c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80057c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ca:	2b7f      	cmp	r3, #127	; 0x7f
 80057cc:	d8f0      	bhi.n	80057b0 <_TrySendOverflowPacket+0x1c>
 80057ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d0:	1c5a      	adds	r2, r3, #1
 80057d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057d6:	b2d2      	uxtb	r2, r2
 80057d8:	701a      	strb	r2, [r3, #0]
 80057da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057dc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80057de:	4b26      	ldr	r3, [pc, #152]	; (8005878 <_TrySendOverflowPacket+0xe4>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80057e4:	4b23      	ldr	r3, [pc, #140]	; (8005874 <_TrySendOverflowPacket+0xe0>)
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	627b      	str	r3, [r7, #36]	; 0x24
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	623b      	str	r3, [r7, #32]
 80057f6:	e00b      	b.n	8005810 <_TrySendOverflowPacket+0x7c>
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	b2da      	uxtb	r2, r3
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	1c59      	adds	r1, r3, #1
 8005800:	6279      	str	r1, [r7, #36]	; 0x24
 8005802:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005806:	b2d2      	uxtb	r2, r2
 8005808:	701a      	strb	r2, [r3, #0]
 800580a:	6a3b      	ldr	r3, [r7, #32]
 800580c:	09db      	lsrs	r3, r3, #7
 800580e:	623b      	str	r3, [r7, #32]
 8005810:	6a3b      	ldr	r3, [r7, #32]
 8005812:	2b7f      	cmp	r3, #127	; 0x7f
 8005814:	d8f0      	bhi.n	80057f8 <_TrySendOverflowPacket+0x64>
 8005816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005818:	1c5a      	adds	r2, r3, #1
 800581a:	627a      	str	r2, [r7, #36]	; 0x24
 800581c:	6a3a      	ldr	r2, [r7, #32]
 800581e:	b2d2      	uxtb	r2, r2
 8005820:	701a      	strb	r2, [r3, #0]
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005826:	4b13      	ldr	r3, [pc, #76]	; (8005874 <_TrySendOverflowPacket+0xe0>)
 8005828:	785b      	ldrb	r3, [r3, #1]
 800582a:	4618      	mov	r0, r3
 800582c:	1d3b      	adds	r3, r7, #4
 800582e:	69fa      	ldr	r2, [r7, #28]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	461a      	mov	r2, r3
 8005834:	1d3b      	adds	r3, r7, #4
 8005836:	4619      	mov	r1, r3
 8005838:	f7fa fcca 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800583c:	4603      	mov	r3, r0
 800583e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005840:	f7ff fcfa 	bl	8005238 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d009      	beq.n	800585e <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800584a:	4a0a      	ldr	r2, [pc, #40]	; (8005874 <_TrySendOverflowPacket+0xe0>)
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005850:	4b08      	ldr	r3, [pc, #32]	; (8005874 <_TrySendOverflowPacket+0xe0>)
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	3b01      	subs	r3, #1
 8005856:	b2da      	uxtb	r2, r3
 8005858:	4b06      	ldr	r3, [pc, #24]	; (8005874 <_TrySendOverflowPacket+0xe0>)
 800585a:	701a      	strb	r2, [r3, #0]
 800585c:	e004      	b.n	8005868 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800585e:	4b05      	ldr	r3, [pc, #20]	; (8005874 <_TrySendOverflowPacket+0xe0>)
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	3301      	adds	r3, #1
 8005864:	4a03      	ldr	r2, [pc, #12]	; (8005874 <_TrySendOverflowPacket+0xe0>)
 8005866:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005868:	693b      	ldr	r3, [r7, #16]
}
 800586a:	4618      	mov	r0, r3
 800586c:	3730      	adds	r7, #48	; 0x30
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	20014260 	.word	0x20014260
 8005878:	e0001004 	.word	0xe0001004

0800587c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800587c:	b580      	push	{r7, lr}
 800587e:	b08a      	sub	sp, #40	; 0x28
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005888:	4b6d      	ldr	r3, [pc, #436]	; (8005a40 <_SendPacket+0x1c4>)
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d010      	beq.n	80058b2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005890:	4b6b      	ldr	r3, [pc, #428]	; (8005a40 <_SendPacket+0x1c4>)
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 80a5 	beq.w	80059e4 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800589a:	4b69      	ldr	r3, [pc, #420]	; (8005a40 <_SendPacket+0x1c4>)
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d109      	bne.n	80058b6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80058a2:	f7ff ff77 	bl	8005794 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80058a6:	4b66      	ldr	r3, [pc, #408]	; (8005a40 <_SendPacket+0x1c4>)
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	f040 809c 	bne.w	80059e8 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 80058b0:	e001      	b.n	80058b6 <_SendPacket+0x3a>
    goto Send;
 80058b2:	bf00      	nop
 80058b4:	e000      	b.n	80058b8 <_SendPacket+0x3c>
Send:
 80058b6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2b1f      	cmp	r3, #31
 80058bc:	d809      	bhi.n	80058d2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80058be:	4b60      	ldr	r3, [pc, #384]	; (8005a40 <_SendPacket+0x1c4>)
 80058c0:	69da      	ldr	r2, [r3, #28]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	fa22 f303 	lsr.w	r3, r2, r3
 80058c8:	f003 0301 	and.w	r3, r3, #1
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f040 808d 	bne.w	80059ec <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2b17      	cmp	r3, #23
 80058d6:	d807      	bhi.n	80058e8 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	3b01      	subs	r3, #1
 80058dc:	60fb      	str	r3, [r7, #12]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	b2da      	uxtb	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	701a      	strb	r2, [r3, #0]
 80058e6:	e03d      	b.n	8005964 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	2b7f      	cmp	r3, #127	; 0x7f
 80058f4:	d912      	bls.n	800591c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	09da      	lsrs	r2, r3, #7
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	3b01      	subs	r3, #1
 80058fe:	60fb      	str	r3, [r7, #12]
 8005900:	b2d2      	uxtb	r2, r2
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	b2db      	uxtb	r3, r3
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	3a01      	subs	r2, #1
 800590e:	60fa      	str	r2, [r7, #12]
 8005910:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005914:	b2da      	uxtb	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	701a      	strb	r2, [r3, #0]
 800591a:	e006      	b.n	800592a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	3b01      	subs	r3, #1
 8005920:	60fb      	str	r3, [r7, #12]
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	b2da      	uxtb	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b7f      	cmp	r3, #127	; 0x7f
 800592e:	d912      	bls.n	8005956 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	09da      	lsrs	r2, r3, #7
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	3b01      	subs	r3, #1
 8005938:	60fb      	str	r3, [r7, #12]
 800593a:	b2d2      	uxtb	r2, r2
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	b2db      	uxtb	r3, r3
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	3a01      	subs	r2, #1
 8005948:	60fa      	str	r2, [r7, #12]
 800594a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800594e:	b2da      	uxtb	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	701a      	strb	r2, [r3, #0]
 8005954:	e006      	b.n	8005964 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	3b01      	subs	r3, #1
 800595a:	60fb      	str	r3, [r7, #12]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	b2da      	uxtb	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005964:	4b37      	ldr	r3, [pc, #220]	; (8005a44 <_SendPacket+0x1c8>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800596a:	4b35      	ldr	r3, [pc, #212]	; (8005a40 <_SendPacket+0x1c4>)
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	69ba      	ldr	r2, [r7, #24]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	627b      	str	r3, [r7, #36]	; 0x24
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	623b      	str	r3, [r7, #32]
 800597c:	e00b      	b.n	8005996 <_SendPacket+0x11a>
 800597e:	6a3b      	ldr	r3, [r7, #32]
 8005980:	b2da      	uxtb	r2, r3
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	1c59      	adds	r1, r3, #1
 8005986:	6279      	str	r1, [r7, #36]	; 0x24
 8005988:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800598c:	b2d2      	uxtb	r2, r2
 800598e:	701a      	strb	r2, [r3, #0]
 8005990:	6a3b      	ldr	r3, [r7, #32]
 8005992:	09db      	lsrs	r3, r3, #7
 8005994:	623b      	str	r3, [r7, #32]
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	2b7f      	cmp	r3, #127	; 0x7f
 800599a:	d8f0      	bhi.n	800597e <_SendPacket+0x102>
 800599c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599e:	1c5a      	adds	r2, r3, #1
 80059a0:	627a      	str	r2, [r7, #36]	; 0x24
 80059a2:	6a3a      	ldr	r2, [r7, #32]
 80059a4:	b2d2      	uxtb	r2, r2
 80059a6:	701a      	strb	r2, [r3, #0]
 80059a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059aa:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80059ac:	4b24      	ldr	r3, [pc, #144]	; (8005a40 <_SendPacket+0x1c4>)
 80059ae:	785b      	ldrb	r3, [r3, #1]
 80059b0:	4618      	mov	r0, r3
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	461a      	mov	r2, r3
 80059ba:	68f9      	ldr	r1, [r7, #12]
 80059bc:	f7fa fc08 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80059c0:	4603      	mov	r3, r0
 80059c2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80059c4:	f7ff fc38 	bl	8005238 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80059ce:	4a1c      	ldr	r2, [pc, #112]	; (8005a40 <_SendPacket+0x1c4>)
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	60d3      	str	r3, [r2, #12]
 80059d4:	e00b      	b.n	80059ee <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80059d6:	4b1a      	ldr	r3, [pc, #104]	; (8005a40 <_SendPacket+0x1c4>)
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	3301      	adds	r3, #1
 80059dc:	b2da      	uxtb	r2, r3
 80059de:	4b18      	ldr	r3, [pc, #96]	; (8005a40 <_SendPacket+0x1c4>)
 80059e0:	701a      	strb	r2, [r3, #0]
 80059e2:	e004      	b.n	80059ee <_SendPacket+0x172>
    goto SendDone;
 80059e4:	bf00      	nop
 80059e6:	e002      	b.n	80059ee <_SendPacket+0x172>
      goto SendDone;
 80059e8:	bf00      	nop
 80059ea:	e000      	b.n	80059ee <_SendPacket+0x172>
      goto SendDone;
 80059ec:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80059ee:	4b14      	ldr	r3, [pc, #80]	; (8005a40 <_SendPacket+0x1c4>)
 80059f0:	7e1b      	ldrb	r3, [r3, #24]
 80059f2:	4619      	mov	r1, r3
 80059f4:	4a14      	ldr	r2, [pc, #80]	; (8005a48 <_SendPacket+0x1cc>)
 80059f6:	460b      	mov	r3, r1
 80059f8:	005b      	lsls	r3, r3, #1
 80059fa:	440b      	add	r3, r1
 80059fc:	00db      	lsls	r3, r3, #3
 80059fe:	4413      	add	r3, r2
 8005a00:	336c      	adds	r3, #108	; 0x6c
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	4b0e      	ldr	r3, [pc, #56]	; (8005a40 <_SendPacket+0x1c4>)
 8005a06:	7e1b      	ldrb	r3, [r3, #24]
 8005a08:	4618      	mov	r0, r3
 8005a0a:	490f      	ldr	r1, [pc, #60]	; (8005a48 <_SendPacket+0x1cc>)
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	4403      	add	r3, r0
 8005a12:	00db      	lsls	r3, r3, #3
 8005a14:	440b      	add	r3, r1
 8005a16:	3370      	adds	r3, #112	; 0x70
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d00b      	beq.n	8005a36 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005a1e:	4b08      	ldr	r3, [pc, #32]	; (8005a40 <_SendPacket+0x1c4>)
 8005a20:	789b      	ldrb	r3, [r3, #2]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d107      	bne.n	8005a36 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005a26:	4b06      	ldr	r3, [pc, #24]	; (8005a40 <_SendPacket+0x1c4>)
 8005a28:	2201      	movs	r2, #1
 8005a2a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005a2c:	f7ff fe40 	bl	80056b0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005a30:	4b03      	ldr	r3, [pc, #12]	; (8005a40 <_SendPacket+0x1c4>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005a36:	bf00      	nop
 8005a38:	3728      	adds	r7, #40	; 0x28
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	20014260 	.word	0x20014260
 8005a44:	e0001004 	.word	0xe0001004
 8005a48:	20014400 	.word	0x20014400

08005a4c <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b08a      	sub	sp, #40	; 0x28
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	460b      	mov	r3, r1
 8005a56:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	3301      	adds	r3, #1
 8005a62:	2b80      	cmp	r3, #128	; 0x80
 8005a64:	d80a      	bhi.n	8005a7c <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	1c59      	adds	r1, r3, #1
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	6051      	str	r1, [r2, #4]
 8005a70:	78fa      	ldrb	r2, [r7, #3]
 8005a72:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	1c5a      	adds	r2, r3, #1
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	2b80      	cmp	r3, #128	; 0x80
 8005a82:	d15a      	bne.n	8005b3a <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	691a      	ldr	r2, [r3, #16]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	b2d2      	uxtb	r2, r2
 8005a8e:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	623b      	str	r3, [r7, #32]
 8005aa4:	e00b      	b.n	8005abe <_StoreChar+0x72>
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	b2da      	uxtb	r2, r3
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	1c59      	adds	r1, r3, #1
 8005aae:	6279      	str	r1, [r7, #36]	; 0x24
 8005ab0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ab4:	b2d2      	uxtb	r2, r2
 8005ab6:	701a      	strb	r2, [r3, #0]
 8005ab8:	6a3b      	ldr	r3, [r7, #32]
 8005aba:	09db      	lsrs	r3, r3, #7
 8005abc:	623b      	str	r3, [r7, #32]
 8005abe:	6a3b      	ldr	r3, [r7, #32]
 8005ac0:	2b7f      	cmp	r3, #127	; 0x7f
 8005ac2:	d8f0      	bhi.n	8005aa6 <_StoreChar+0x5a>
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac6:	1c5a      	adds	r2, r3, #1
 8005ac8:	627a      	str	r2, [r7, #36]	; 0x24
 8005aca:	6a3a      	ldr	r2, [r7, #32]
 8005acc:	b2d2      	uxtb	r2, r2
 8005ace:	701a      	strb	r2, [r3, #0]
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad2:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	61fb      	str	r3, [r7, #28]
 8005ad8:	2300      	movs	r3, #0
 8005ada:	61bb      	str	r3, [r7, #24]
 8005adc:	e00b      	b.n	8005af6 <_StoreChar+0xaa>
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	b2da      	uxtb	r2, r3
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	1c59      	adds	r1, r3, #1
 8005ae6:	61f9      	str	r1, [r7, #28]
 8005ae8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005aec:	b2d2      	uxtb	r2, r2
 8005aee:	701a      	strb	r2, [r3, #0]
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	09db      	lsrs	r3, r3, #7
 8005af4:	61bb      	str	r3, [r7, #24]
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	2b7f      	cmp	r3, #127	; 0x7f
 8005afa:	d8f0      	bhi.n	8005ade <_StoreChar+0x92>
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	1c5a      	adds	r2, r3, #1
 8005b00:	61fa      	str	r2, [r7, #28]
 8005b02:	69ba      	ldr	r2, [r7, #24]
 8005b04:	b2d2      	uxtb	r2, r2
 8005b06:	701a      	strb	r2, [r3, #0]
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	221a      	movs	r2, #26
 8005b12:	6939      	ldr	r1, [r7, #16]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7ff feb1 	bl	800587c <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7ff fdb9 	bl	8005696 <_PreparePacket>
 8005b24:	4602      	mov	r2, r0
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	1c5a      	adds	r2, r3, #1
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	611a      	str	r2, [r3, #16]
  }
}
 8005b3a:	bf00      	nop
 8005b3c:	3728      	adds	r7, #40	; 0x28
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
	...

08005b44 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b08a      	sub	sp, #40	; 0x28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
 8005b50:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005b56:	2301      	movs	r3, #1
 8005b58:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005b5e:	e007      	b.n	8005b70 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005b60:	6a3a      	ldr	r2, [r7, #32]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b68:	623b      	str	r3, [r7, #32]
    Width++;
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005b70:	6a3a      	ldr	r2, [r7, #32]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d2f3      	bcs.n	8005b60 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005b78:	683a      	ldr	r2, [r7, #0]
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d901      	bls.n	8005b84 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d11f      	bne.n	8005bce <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d01c      	beq.n	8005bce <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d005      	beq.n	8005baa <_PrintUnsigned+0x66>
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d102      	bne.n	8005baa <_PrintUnsigned+0x66>
        c = '0';
 8005ba4:	2330      	movs	r3, #48	; 0x30
 8005ba6:	76fb      	strb	r3, [r7, #27]
 8005ba8:	e001      	b.n	8005bae <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005baa:	2320      	movs	r3, #32
 8005bac:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005bae:	e007      	b.n	8005bc0 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005bb6:	7efb      	ldrb	r3, [r7, #27]
 8005bb8:	4619      	mov	r1, r3
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f7ff ff46 	bl	8005a4c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <_PrintUnsigned+0x8a>
 8005bc6:	69fa      	ldr	r2, [r7, #28]
 8005bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d3f0      	bcc.n	8005bb0 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d903      	bls.n	8005bdc <_PrintUnsigned+0x98>
      NumDigits--;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	603b      	str	r3, [r7, #0]
 8005bda:	e009      	b.n	8005bf0 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be4:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d200      	bcs.n	8005bf0 <_PrintUnsigned+0xac>
        break;
 8005bee:	e005      	b.n	8005bfc <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	fb02 f303 	mul.w	r3, r2, r3
 8005bf8:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005bfa:	e7e8      	b.n	8005bce <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c04:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c0a:	fb02 f303 	mul.w	r3, r2, r3
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005c14:	4a15      	ldr	r2, [pc, #84]	; (8005c6c <_PrintUnsigned+0x128>)
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	4413      	add	r3, r2
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f7ff ff14 	bl	8005a4c <_StoreChar>
    Digit /= Base;
 8005c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c2c:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1e3      	bne.n	8005bfc <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d011      	beq.n	8005c62 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00e      	beq.n	8005c62 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c44:	e006      	b.n	8005c54 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005c4c:	2120      	movs	r1, #32
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f7ff fefc 	bl	8005a4c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <_PrintUnsigned+0x11e>
 8005c5a:	69fa      	ldr	r2, [r7, #28]
 8005c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d3f1      	bcc.n	8005c46 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005c62:	bf00      	nop
 8005c64:	3728      	adds	r7, #40	; 0x28
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	0800739c 	.word	0x0800739c

08005c70 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b088      	sub	sp, #32
 8005c74:	af02      	add	r7, sp, #8
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
 8005c7c:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	bfb8      	it	lt
 8005c84:	425b      	neglt	r3, r3
 8005c86:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005c8c:	e007      	b.n	8005c9e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	fb92 f3f3 	sdiv	r3, r2, r3
 8005c96:	613b      	str	r3, [r7, #16]
    Width++;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	daf3      	bge.n	8005c8e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d901      	bls.n	8005cb2 <_PrintInt+0x42>
    Width = NumDigits;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005cb2:	6a3b      	ldr	r3, [r7, #32]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00a      	beq.n	8005cce <_PrintInt+0x5e>
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	db04      	blt.n	8005cc8 <_PrintInt+0x58>
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	f003 0304 	and.w	r3, r3, #4
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <_PrintInt+0x5e>
    FieldWidth--;
 8005cc8:	6a3b      	ldr	r3, [r7, #32]
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd0:	f003 0302 	and.w	r3, r3, #2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d002      	beq.n	8005cde <_PrintInt+0x6e>
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d016      	beq.n	8005d0c <_PrintInt+0x9c>
 8005cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce0:	f003 0301 	and.w	r3, r3, #1
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d111      	bne.n	8005d0c <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005ce8:	6a3b      	ldr	r3, [r7, #32]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00e      	beq.n	8005d0c <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005cee:	e006      	b.n	8005cfe <_PrintInt+0x8e>
        FieldWidth--;
 8005cf0:	6a3b      	ldr	r3, [r7, #32]
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005cf6:	2120      	movs	r1, #32
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f7ff fea7 	bl	8005a4c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d003      	beq.n	8005d0c <_PrintInt+0x9c>
 8005d04:	697a      	ldr	r2, [r7, #20]
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d3f1      	bcc.n	8005cf0 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	da07      	bge.n	8005d22 <_PrintInt+0xb2>
    v = -v;
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	425b      	negs	r3, r3
 8005d16:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005d18:	212d      	movs	r1, #45	; 0x2d
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f7ff fe96 	bl	8005a4c <_StoreChar>
 8005d20:	e008      	b.n	8005d34 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	f003 0304 	and.w	r3, r3, #4
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d003      	beq.n	8005d34 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005d2c:	212b      	movs	r1, #43	; 0x2b
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f7ff fe8c 	bl	8005a4c <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d36:	f003 0302 	and.w	r3, r3, #2
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d019      	beq.n	8005d72 <_PrintInt+0x102>
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d40:	f003 0301 	and.w	r3, r3, #1
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d114      	bne.n	8005d72 <_PrintInt+0x102>
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d111      	bne.n	8005d72 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005d4e:	6a3b      	ldr	r3, [r7, #32]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00e      	beq.n	8005d72 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005d54:	e006      	b.n	8005d64 <_PrintInt+0xf4>
        FieldWidth--;
 8005d56:	6a3b      	ldr	r3, [r7, #32]
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005d5c:	2130      	movs	r1, #48	; 0x30
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f7ff fe74 	bl	8005a4c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005d64:	6a3b      	ldr	r3, [r7, #32]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d003      	beq.n	8005d72 <_PrintInt+0x102>
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d3f1      	bcc.n	8005d56 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005d72:	68b9      	ldr	r1, [r7, #8]
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	9301      	str	r3, [sp, #4]
 8005d78:	6a3b      	ldr	r3, [r7, #32]
 8005d7a:	9300      	str	r3, [sp, #0]
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f7ff fedf 	bl	8005b44 <_PrintUnsigned>
}
 8005d86:	bf00      	nop
 8005d88:	3718      	adds	r7, #24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
	...

08005d90 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b098      	sub	sp, #96	; 0x60
 8005d94:	af02      	add	r7, sp, #8
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005d9c:	f3ef 8311 	mrs	r3, BASEPRI
 8005da0:	f04f 0120 	mov.w	r1, #32
 8005da4:	f381 8811 	msr	BASEPRI, r1
 8005da8:	633b      	str	r3, [r7, #48]	; 0x30
 8005daa:	48b7      	ldr	r0, [pc, #732]	; (8006088 <_VPrintTarget+0x2f8>)
 8005dac:	f7ff fc73 	bl	8005696 <_PreparePacket>
 8005db0:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005db2:	4bb5      	ldr	r3, [pc, #724]	; (8006088 <_VPrintTarget+0x2f8>)
 8005db4:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005db6:	2300      	movs	r3, #0
 8005db8:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dbc:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005dd6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f000 8183 	beq.w	80060e6 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005de0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005de4:	2b25      	cmp	r3, #37	; 0x25
 8005de6:	f040 8170 	bne.w	80060ca <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005dea:	2300      	movs	r3, #0
 8005dec:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005dee:	2301      	movs	r3, #1
 8005df0:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005dfa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dfe:	3b23      	subs	r3, #35	; 0x23
 8005e00:	2b0d      	cmp	r3, #13
 8005e02:	d83f      	bhi.n	8005e84 <_VPrintTarget+0xf4>
 8005e04:	a201      	add	r2, pc, #4	; (adr r2, 8005e0c <_VPrintTarget+0x7c>)
 8005e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0a:	bf00      	nop
 8005e0c:	08005e75 	.word	0x08005e75
 8005e10:	08005e85 	.word	0x08005e85
 8005e14:	08005e85 	.word	0x08005e85
 8005e18:	08005e85 	.word	0x08005e85
 8005e1c:	08005e85 	.word	0x08005e85
 8005e20:	08005e85 	.word	0x08005e85
 8005e24:	08005e85 	.word	0x08005e85
 8005e28:	08005e85 	.word	0x08005e85
 8005e2c:	08005e65 	.word	0x08005e65
 8005e30:	08005e85 	.word	0x08005e85
 8005e34:	08005e45 	.word	0x08005e45
 8005e38:	08005e85 	.word	0x08005e85
 8005e3c:	08005e85 	.word	0x08005e85
 8005e40:	08005e55 	.word	0x08005e55
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005e44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e46:	f043 0301 	orr.w	r3, r3, #1
 8005e4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	60fb      	str	r3, [r7, #12]
 8005e52:	e01a      	b.n	8005e8a <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005e54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e56:	f043 0302 	orr.w	r3, r3, #2
 8005e5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	60fb      	str	r3, [r7, #12]
 8005e62:	e012      	b.n	8005e8a <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005e64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e66:	f043 0304 	orr.w	r3, r3, #4
 8005e6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	60fb      	str	r3, [r7, #12]
 8005e72:	e00a      	b.n	8005e8a <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e76:	f043 0308 	orr.w	r3, r3, #8
 8005e7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	3301      	adds	r3, #1
 8005e80:	60fb      	str	r3, [r7, #12]
 8005e82:	e002      	b.n	8005e8a <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005e84:	2300      	movs	r3, #0
 8005e86:	653b      	str	r3, [r7, #80]	; 0x50
 8005e88:	bf00      	nop
        }
      } while (v);
 8005e8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1b0      	bne.n	8005df2 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005e90:	2300      	movs	r3, #0
 8005e92:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005e9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ea0:	2b2f      	cmp	r3, #47	; 0x2f
 8005ea2:	d912      	bls.n	8005eca <_VPrintTarget+0x13a>
 8005ea4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ea8:	2b39      	cmp	r3, #57	; 0x39
 8005eaa:	d80e      	bhi.n	8005eca <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005eb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	4413      	add	r3, r2
 8005eba:	005b      	lsls	r3, r3, #1
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ec2:	4413      	add	r3, r2
 8005ec4:	3b30      	subs	r3, #48	; 0x30
 8005ec6:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005ec8:	e7e4      	b.n	8005e94 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005ed6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005eda:	2b2e      	cmp	r3, #46	; 0x2e
 8005edc:	d11d      	bne.n	8005f1a <_VPrintTarget+0x18a>
        sFormat++;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005eec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ef0:	2b2f      	cmp	r3, #47	; 0x2f
 8005ef2:	d912      	bls.n	8005f1a <_VPrintTarget+0x18a>
 8005ef4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ef8:	2b39      	cmp	r3, #57	; 0x39
 8005efa:	d80e      	bhi.n	8005f1a <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	3301      	adds	r3, #1
 8005f00:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005f02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f04:	4613      	mov	r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	005b      	lsls	r3, r3, #1
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f12:	4413      	add	r3, r2
 8005f14:	3b30      	subs	r3, #48	; 0x30
 8005f16:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005f18:	e7e4      	b.n	8005ee4 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005f22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f26:	2b6c      	cmp	r3, #108	; 0x6c
 8005f28:	d003      	beq.n	8005f32 <_VPrintTarget+0x1a2>
 8005f2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f2e:	2b68      	cmp	r3, #104	; 0x68
 8005f30:	d107      	bne.n	8005f42 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005f40:	e7ef      	b.n	8005f22 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005f42:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f46:	2b25      	cmp	r3, #37	; 0x25
 8005f48:	f000 80b3 	beq.w	80060b2 <_VPrintTarget+0x322>
 8005f4c:	2b25      	cmp	r3, #37	; 0x25
 8005f4e:	f2c0 80b7 	blt.w	80060c0 <_VPrintTarget+0x330>
 8005f52:	2b78      	cmp	r3, #120	; 0x78
 8005f54:	f300 80b4 	bgt.w	80060c0 <_VPrintTarget+0x330>
 8005f58:	2b58      	cmp	r3, #88	; 0x58
 8005f5a:	f2c0 80b1 	blt.w	80060c0 <_VPrintTarget+0x330>
 8005f5e:	3b58      	subs	r3, #88	; 0x58
 8005f60:	2b20      	cmp	r3, #32
 8005f62:	f200 80ad 	bhi.w	80060c0 <_VPrintTarget+0x330>
 8005f66:	a201      	add	r2, pc, #4	; (adr r2, 8005f6c <_VPrintTarget+0x1dc>)
 8005f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f6c:	08006063 	.word	0x08006063
 8005f70:	080060c1 	.word	0x080060c1
 8005f74:	080060c1 	.word	0x080060c1
 8005f78:	080060c1 	.word	0x080060c1
 8005f7c:	080060c1 	.word	0x080060c1
 8005f80:	080060c1 	.word	0x080060c1
 8005f84:	080060c1 	.word	0x080060c1
 8005f88:	080060c1 	.word	0x080060c1
 8005f8c:	080060c1 	.word	0x080060c1
 8005f90:	080060c1 	.word	0x080060c1
 8005f94:	080060c1 	.word	0x080060c1
 8005f98:	08005ff1 	.word	0x08005ff1
 8005f9c:	08006017 	.word	0x08006017
 8005fa0:	080060c1 	.word	0x080060c1
 8005fa4:	080060c1 	.word	0x080060c1
 8005fa8:	080060c1 	.word	0x080060c1
 8005fac:	080060c1 	.word	0x080060c1
 8005fb0:	080060c1 	.word	0x080060c1
 8005fb4:	080060c1 	.word	0x080060c1
 8005fb8:	080060c1 	.word	0x080060c1
 8005fbc:	080060c1 	.word	0x080060c1
 8005fc0:	080060c1 	.word	0x080060c1
 8005fc4:	080060c1 	.word	0x080060c1
 8005fc8:	080060c1 	.word	0x080060c1
 8005fcc:	0800608d 	.word	0x0800608d
 8005fd0:	080060c1 	.word	0x080060c1
 8005fd4:	080060c1 	.word	0x080060c1
 8005fd8:	080060c1 	.word	0x080060c1
 8005fdc:	080060c1 	.word	0x080060c1
 8005fe0:	0800603d 	.word	0x0800603d
 8005fe4:	080060c1 	.word	0x080060c1
 8005fe8:	080060c1 	.word	0x080060c1
 8005fec:	08006063 	.word	0x08006063
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	1d19      	adds	r1, r3, #4
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	6011      	str	r1, [r2, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005ffe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006000:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8006004:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006008:	f107 0314 	add.w	r3, r7, #20
 800600c:	4611      	mov	r1, r2
 800600e:	4618      	mov	r0, r3
 8006010:	f7ff fd1c 	bl	8005a4c <_StoreChar>
        break;
 8006014:	e055      	b.n	80060c2 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	1d19      	adds	r1, r3, #4
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	6011      	str	r1, [r2, #0]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006024:	f107 0014 	add.w	r0, r7, #20
 8006028:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800602a:	9301      	str	r3, [sp, #4]
 800602c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800602e:	9300      	str	r3, [sp, #0]
 8006030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006032:	220a      	movs	r2, #10
 8006034:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006036:	f7ff fe1b 	bl	8005c70 <_PrintInt>
        break;
 800603a:	e042      	b.n	80060c2 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	1d19      	adds	r1, r3, #4
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	6011      	str	r1, [r2, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800604a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800604c:	f107 0014 	add.w	r0, r7, #20
 8006050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006052:	9301      	str	r3, [sp, #4]
 8006054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006056:	9300      	str	r3, [sp, #0]
 8006058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800605a:	220a      	movs	r2, #10
 800605c:	f7ff fd72 	bl	8005b44 <_PrintUnsigned>
        break;
 8006060:	e02f      	b.n	80060c2 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	1d19      	adds	r1, r3, #4
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	6011      	str	r1, [r2, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006070:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006072:	f107 0014 	add.w	r0, r7, #20
 8006076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006078:	9301      	str	r3, [sp, #4]
 800607a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800607c:	9300      	str	r3, [sp, #0]
 800607e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006080:	2210      	movs	r2, #16
 8006082:	f7ff fd5f 	bl	8005b44 <_PrintUnsigned>
        break;
 8006086:	e01c      	b.n	80060c2 <_VPrintTarget+0x332>
 8006088:	20014290 	.word	0x20014290
      case 'p':
        v = va_arg(*pParamList, int);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	1d19      	adds	r1, r3, #4
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	6011      	str	r1, [r2, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 800609a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800609c:	f107 0014 	add.w	r0, r7, #20
 80060a0:	2300      	movs	r3, #0
 80060a2:	9301      	str	r3, [sp, #4]
 80060a4:	2308      	movs	r3, #8
 80060a6:	9300      	str	r3, [sp, #0]
 80060a8:	2308      	movs	r3, #8
 80060aa:	2210      	movs	r2, #16
 80060ac:	f7ff fd4a 	bl	8005b44 <_PrintUnsigned>
        break;
 80060b0:	e007      	b.n	80060c2 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80060b2:	f107 0314 	add.w	r3, r7, #20
 80060b6:	2125      	movs	r1, #37	; 0x25
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7ff fcc7 	bl	8005a4c <_StoreChar>
        break;
 80060be:	e000      	b.n	80060c2 <_VPrintTarget+0x332>
      default:
        break;
 80060c0:	bf00      	nop
      }
      sFormat++;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	3301      	adds	r3, #1
 80060c6:	60fb      	str	r3, [r7, #12]
 80060c8:	e007      	b.n	80060da <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 80060ca:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80060ce:	f107 0314 	add.w	r3, r7, #20
 80060d2:	4611      	mov	r1, r2
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7ff fcb9 	bl	8005a4c <_StoreChar>
    }
  } while (*sFormat);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	f47f ae72 	bne.w	8005dc8 <_VPrintTarget+0x38>
 80060e4:	e000      	b.n	80060e8 <_VPrintTarget+0x358>
      break;
 80060e6:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80060e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d041      	beq.n	8006172 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 80060ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	b2d2      	uxtb	r2, r2
 80060f4:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	643b      	str	r3, [r7, #64]	; 0x40
 80060fa:	6a3b      	ldr	r3, [r7, #32]
 80060fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060fe:	e00b      	b.n	8006118 <_VPrintTarget+0x388>
 8006100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006102:	b2da      	uxtb	r2, r3
 8006104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006106:	1c59      	adds	r1, r3, #1
 8006108:	6439      	str	r1, [r7, #64]	; 0x40
 800610a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800610e:	b2d2      	uxtb	r2, r2
 8006110:	701a      	strb	r2, [r3, #0]
 8006112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006114:	09db      	lsrs	r3, r3, #7
 8006116:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800611a:	2b7f      	cmp	r3, #127	; 0x7f
 800611c:	d8f0      	bhi.n	8006100 <_VPrintTarget+0x370>
 800611e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006120:	1c5a      	adds	r2, r3, #1
 8006122:	643a      	str	r2, [r7, #64]	; 0x40
 8006124:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006126:	b2d2      	uxtb	r2, r2
 8006128:	701a      	strb	r2, [r3, #0]
 800612a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800612c:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	63bb      	str	r3, [r7, #56]	; 0x38
 8006132:	2300      	movs	r3, #0
 8006134:	637b      	str	r3, [r7, #52]	; 0x34
 8006136:	e00b      	b.n	8006150 <_VPrintTarget+0x3c0>
 8006138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800613a:	b2da      	uxtb	r2, r3
 800613c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613e:	1c59      	adds	r1, r3, #1
 8006140:	63b9      	str	r1, [r7, #56]	; 0x38
 8006142:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006146:	b2d2      	uxtb	r2, r2
 8006148:	701a      	strb	r2, [r3, #0]
 800614a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800614c:	09db      	lsrs	r3, r3, #7
 800614e:	637b      	str	r3, [r7, #52]	; 0x34
 8006150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006152:	2b7f      	cmp	r3, #127	; 0x7f
 8006154:	d8f0      	bhi.n	8006138 <_VPrintTarget+0x3a8>
 8006156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006158:	1c5a      	adds	r2, r3, #1
 800615a:	63ba      	str	r2, [r7, #56]	; 0x38
 800615c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800615e:	b2d2      	uxtb	r2, r2
 8006160:	701a      	strb	r2, [r3, #0]
 8006162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006164:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	69b9      	ldr	r1, [r7, #24]
 800616a:	221a      	movs	r2, #26
 800616c:	4618      	mov	r0, r3
 800616e:	f7ff fb85 	bl	800587c <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006174:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8006178:	bf00      	nop
 800617a:	3758      	adds	r7, #88	; 0x58
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af02      	add	r7, sp, #8
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
 800618c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800618e:	2300      	movs	r3, #0
 8006190:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006194:	4917      	ldr	r1, [pc, #92]	; (80061f4 <SEGGER_SYSVIEW_Init+0x74>)
 8006196:	4818      	ldr	r0, [pc, #96]	; (80061f8 <SEGGER_SYSVIEW_Init+0x78>)
 8006198:	f7ff f93c 	bl	8005414 <SEGGER_RTT_AllocUpBuffer>
 800619c:	4603      	mov	r3, r0
 800619e:	b2da      	uxtb	r2, r3
 80061a0:	4b16      	ldr	r3, [pc, #88]	; (80061fc <SEGGER_SYSVIEW_Init+0x7c>)
 80061a2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80061a4:	4b15      	ldr	r3, [pc, #84]	; (80061fc <SEGGER_SYSVIEW_Init+0x7c>)
 80061a6:	785a      	ldrb	r2, [r3, #1]
 80061a8:	4b14      	ldr	r3, [pc, #80]	; (80061fc <SEGGER_SYSVIEW_Init+0x7c>)
 80061aa:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80061ac:	4b13      	ldr	r3, [pc, #76]	; (80061fc <SEGGER_SYSVIEW_Init+0x7c>)
 80061ae:	7e1b      	ldrb	r3, [r3, #24]
 80061b0:	4618      	mov	r0, r3
 80061b2:	2300      	movs	r3, #0
 80061b4:	9300      	str	r3, [sp, #0]
 80061b6:	2308      	movs	r3, #8
 80061b8:	4a11      	ldr	r2, [pc, #68]	; (8006200 <SEGGER_SYSVIEW_Init+0x80>)
 80061ba:	490f      	ldr	r1, [pc, #60]	; (80061f8 <SEGGER_SYSVIEW_Init+0x78>)
 80061bc:	f7ff f9ae 	bl	800551c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80061c0:	4b0e      	ldr	r3, [pc, #56]	; (80061fc <SEGGER_SYSVIEW_Init+0x7c>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80061c6:	4b0f      	ldr	r3, [pc, #60]	; (8006204 <SEGGER_SYSVIEW_Init+0x84>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a0c      	ldr	r2, [pc, #48]	; (80061fc <SEGGER_SYSVIEW_Init+0x7c>)
 80061cc:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80061ce:	4a0b      	ldr	r2, [pc, #44]	; (80061fc <SEGGER_SYSVIEW_Init+0x7c>)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80061d4:	4a09      	ldr	r2, [pc, #36]	; (80061fc <SEGGER_SYSVIEW_Init+0x7c>)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80061da:	4a08      	ldr	r2, [pc, #32]	; (80061fc <SEGGER_SYSVIEW_Init+0x7c>)
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80061e0:	4a06      	ldr	r2, [pc, #24]	; (80061fc <SEGGER_SYSVIEW_Init+0x7c>)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80061e6:	4b05      	ldr	r3, [pc, #20]	; (80061fc <SEGGER_SYSVIEW_Init+0x7c>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80061ec:	bf00      	nop
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	20013258 	.word	0x20013258
 80061f8:	08007314 	.word	0x08007314
 80061fc:	20014260 	.word	0x20014260
 8006200:	20014258 	.word	0x20014258
 8006204:	e0001004 	.word	0xe0001004

08006208 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006210:	4a04      	ldr	r2, [pc, #16]	; (8006224 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6113      	str	r3, [r2, #16]
}
 8006216:	bf00      	nop
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	20014260 	.word	0x20014260

08006228 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006230:	f3ef 8311 	mrs	r3, BASEPRI
 8006234:	f04f 0120 	mov.w	r1, #32
 8006238:	f381 8811 	msr	BASEPRI, r1
 800623c:	60fb      	str	r3, [r7, #12]
 800623e:	4808      	ldr	r0, [pc, #32]	; (8006260 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006240:	f7ff fa29 	bl	8005696 <_PreparePacket>
 8006244:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	68b9      	ldr	r1, [r7, #8]
 800624a:	68b8      	ldr	r0, [r7, #8]
 800624c:	f7ff fb16 	bl	800587c <_SendPacket>
  RECORD_END();
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f383 8811 	msr	BASEPRI, r3
}
 8006256:	bf00      	nop
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	20014290 	.word	0x20014290

08006264 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006264:	b580      	push	{r7, lr}
 8006266:	b088      	sub	sp, #32
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800626e:	f3ef 8311 	mrs	r3, BASEPRI
 8006272:	f04f 0120 	mov.w	r1, #32
 8006276:	f381 8811 	msr	BASEPRI, r1
 800627a:	617b      	str	r3, [r7, #20]
 800627c:	4816      	ldr	r0, [pc, #88]	; (80062d8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800627e:	f7ff fa0a 	bl	8005696 <_PreparePacket>
 8006282:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	61fb      	str	r3, [r7, #28]
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	61bb      	str	r3, [r7, #24]
 8006290:	e00b      	b.n	80062aa <SEGGER_SYSVIEW_RecordU32+0x46>
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	b2da      	uxtb	r2, r3
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	1c59      	adds	r1, r3, #1
 800629a:	61f9      	str	r1, [r7, #28]
 800629c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062a0:	b2d2      	uxtb	r2, r2
 80062a2:	701a      	strb	r2, [r3, #0]
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	09db      	lsrs	r3, r3, #7
 80062a8:	61bb      	str	r3, [r7, #24]
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	2b7f      	cmp	r3, #127	; 0x7f
 80062ae:	d8f0      	bhi.n	8006292 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	1c5a      	adds	r2, r3, #1
 80062b4:	61fa      	str	r2, [r7, #28]
 80062b6:	69ba      	ldr	r2, [r7, #24]
 80062b8:	b2d2      	uxtb	r2, r2
 80062ba:	701a      	strb	r2, [r3, #0]
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	68f9      	ldr	r1, [r7, #12]
 80062c4:	6938      	ldr	r0, [r7, #16]
 80062c6:	f7ff fad9 	bl	800587c <_SendPacket>
  RECORD_END();
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	f383 8811 	msr	BASEPRI, r3
}
 80062d0:	bf00      	nop
 80062d2:	3720      	adds	r7, #32
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	20014290 	.word	0x20014290

080062dc <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80062dc:	b580      	push	{r7, lr}
 80062de:	b08c      	sub	sp, #48	; 0x30
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80062e8:	f3ef 8311 	mrs	r3, BASEPRI
 80062ec:	f04f 0120 	mov.w	r1, #32
 80062f0:	f381 8811 	msr	BASEPRI, r1
 80062f4:	61fb      	str	r3, [r7, #28]
 80062f6:	4825      	ldr	r0, [pc, #148]	; (800638c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80062f8:	f7ff f9cd 	bl	8005696 <_PreparePacket>
 80062fc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	62bb      	str	r3, [r7, #40]	; 0x28
 800630a:	e00b      	b.n	8006324 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800630c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630e:	b2da      	uxtb	r2, r3
 8006310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006312:	1c59      	adds	r1, r3, #1
 8006314:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006316:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800631a:	b2d2      	uxtb	r2, r2
 800631c:	701a      	strb	r2, [r3, #0]
 800631e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006320:	09db      	lsrs	r3, r3, #7
 8006322:	62bb      	str	r3, [r7, #40]	; 0x28
 8006324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006326:	2b7f      	cmp	r3, #127	; 0x7f
 8006328:	d8f0      	bhi.n	800630c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800632a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632c:	1c5a      	adds	r2, r3, #1
 800632e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006330:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006332:	b2d2      	uxtb	r2, r2
 8006334:	701a      	strb	r2, [r3, #0]
 8006336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006338:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	627b      	str	r3, [r7, #36]	; 0x24
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	623b      	str	r3, [r7, #32]
 8006342:	e00b      	b.n	800635c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006344:	6a3b      	ldr	r3, [r7, #32]
 8006346:	b2da      	uxtb	r2, r3
 8006348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634a:	1c59      	adds	r1, r3, #1
 800634c:	6279      	str	r1, [r7, #36]	; 0x24
 800634e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006352:	b2d2      	uxtb	r2, r2
 8006354:	701a      	strb	r2, [r3, #0]
 8006356:	6a3b      	ldr	r3, [r7, #32]
 8006358:	09db      	lsrs	r3, r3, #7
 800635a:	623b      	str	r3, [r7, #32]
 800635c:	6a3b      	ldr	r3, [r7, #32]
 800635e:	2b7f      	cmp	r3, #127	; 0x7f
 8006360:	d8f0      	bhi.n	8006344 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006364:	1c5a      	adds	r2, r3, #1
 8006366:	627a      	str	r2, [r7, #36]	; 0x24
 8006368:	6a3a      	ldr	r2, [r7, #32]
 800636a:	b2d2      	uxtb	r2, r2
 800636c:	701a      	strb	r2, [r3, #0]
 800636e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006370:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	6979      	ldr	r1, [r7, #20]
 8006376:	69b8      	ldr	r0, [r7, #24]
 8006378:	f7ff fa80 	bl	800587c <_SendPacket>
  RECORD_END();
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	f383 8811 	msr	BASEPRI, r3
}
 8006382:	bf00      	nop
 8006384:	3730      	adds	r7, #48	; 0x30
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	20014290 	.word	0x20014290

08006390 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006390:	b580      	push	{r7, lr}
 8006392:	b08e      	sub	sp, #56	; 0x38
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
 800639c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800639e:	f3ef 8311 	mrs	r3, BASEPRI
 80063a2:	f04f 0120 	mov.w	r1, #32
 80063a6:	f381 8811 	msr	BASEPRI, r1
 80063aa:	61fb      	str	r3, [r7, #28]
 80063ac:	4832      	ldr	r0, [pc, #200]	; (8006478 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80063ae:	f7ff f972 	bl	8005696 <_PreparePacket>
 80063b2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	637b      	str	r3, [r7, #52]	; 0x34
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	633b      	str	r3, [r7, #48]	; 0x30
 80063c0:	e00b      	b.n	80063da <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80063c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c4:	b2da      	uxtb	r2, r3
 80063c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c8:	1c59      	adds	r1, r3, #1
 80063ca:	6379      	str	r1, [r7, #52]	; 0x34
 80063cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063d0:	b2d2      	uxtb	r2, r2
 80063d2:	701a      	strb	r2, [r3, #0]
 80063d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d6:	09db      	lsrs	r3, r3, #7
 80063d8:	633b      	str	r3, [r7, #48]	; 0x30
 80063da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063dc:	2b7f      	cmp	r3, #127	; 0x7f
 80063de:	d8f0      	bhi.n	80063c2 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80063e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063e2:	1c5a      	adds	r2, r3, #1
 80063e4:	637a      	str	r2, [r7, #52]	; 0x34
 80063e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063e8:	b2d2      	uxtb	r2, r2
 80063ea:	701a      	strb	r2, [r3, #0]
 80063ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80063f8:	e00b      	b.n	8006412 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80063fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fc:	b2da      	uxtb	r2, r3
 80063fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006400:	1c59      	adds	r1, r3, #1
 8006402:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006404:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006408:	b2d2      	uxtb	r2, r2
 800640a:	701a      	strb	r2, [r3, #0]
 800640c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640e:	09db      	lsrs	r3, r3, #7
 8006410:	62bb      	str	r3, [r7, #40]	; 0x28
 8006412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006414:	2b7f      	cmp	r3, #127	; 0x7f
 8006416:	d8f0      	bhi.n	80063fa <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641a:	1c5a      	adds	r2, r3, #1
 800641c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800641e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006420:	b2d2      	uxtb	r2, r2
 8006422:	701a      	strb	r2, [r3, #0]
 8006424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006426:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	627b      	str	r3, [r7, #36]	; 0x24
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	623b      	str	r3, [r7, #32]
 8006430:	e00b      	b.n	800644a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006432:	6a3b      	ldr	r3, [r7, #32]
 8006434:	b2da      	uxtb	r2, r3
 8006436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006438:	1c59      	adds	r1, r3, #1
 800643a:	6279      	str	r1, [r7, #36]	; 0x24
 800643c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006440:	b2d2      	uxtb	r2, r2
 8006442:	701a      	strb	r2, [r3, #0]
 8006444:	6a3b      	ldr	r3, [r7, #32]
 8006446:	09db      	lsrs	r3, r3, #7
 8006448:	623b      	str	r3, [r7, #32]
 800644a:	6a3b      	ldr	r3, [r7, #32]
 800644c:	2b7f      	cmp	r3, #127	; 0x7f
 800644e:	d8f0      	bhi.n	8006432 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	1c5a      	adds	r2, r3, #1
 8006454:	627a      	str	r2, [r7, #36]	; 0x24
 8006456:	6a3a      	ldr	r2, [r7, #32]
 8006458:	b2d2      	uxtb	r2, r2
 800645a:	701a      	strb	r2, [r3, #0]
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	6979      	ldr	r1, [r7, #20]
 8006464:	69b8      	ldr	r0, [r7, #24]
 8006466:	f7ff fa09 	bl	800587c <_SendPacket>
  RECORD_END();
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	f383 8811 	msr	BASEPRI, r3
}
 8006470:	bf00      	nop
 8006472:	3738      	adds	r7, #56	; 0x38
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	20014290 	.word	0x20014290

0800647c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800647c:	b580      	push	{r7, lr}
 800647e:	b090      	sub	sp, #64	; 0x40
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
 8006488:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800648a:	f3ef 8311 	mrs	r3, BASEPRI
 800648e:	f04f 0120 	mov.w	r1, #32
 8006492:	f381 8811 	msr	BASEPRI, r1
 8006496:	61fb      	str	r3, [r7, #28]
 8006498:	4840      	ldr	r0, [pc, #256]	; (800659c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800649a:	f7ff f8fc 	bl	8005696 <_PreparePacket>
 800649e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80064ac:	e00b      	b.n	80064c6 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80064ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b0:	b2da      	uxtb	r2, r3
 80064b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064b4:	1c59      	adds	r1, r3, #1
 80064b6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80064b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064bc:	b2d2      	uxtb	r2, r2
 80064be:	701a      	strb	r2, [r3, #0]
 80064c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c2:	09db      	lsrs	r3, r3, #7
 80064c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80064c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c8:	2b7f      	cmp	r3, #127	; 0x7f
 80064ca:	d8f0      	bhi.n	80064ae <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80064cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ce:	1c5a      	adds	r2, r3, #1
 80064d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80064d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064d4:	b2d2      	uxtb	r2, r2
 80064d6:	701a      	strb	r2, [r3, #0]
 80064d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	637b      	str	r3, [r7, #52]	; 0x34
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	633b      	str	r3, [r7, #48]	; 0x30
 80064e4:	e00b      	b.n	80064fe <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80064e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e8:	b2da      	uxtb	r2, r3
 80064ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ec:	1c59      	adds	r1, r3, #1
 80064ee:	6379      	str	r1, [r7, #52]	; 0x34
 80064f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064f4:	b2d2      	uxtb	r2, r2
 80064f6:	701a      	strb	r2, [r3, #0]
 80064f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fa:	09db      	lsrs	r3, r3, #7
 80064fc:	633b      	str	r3, [r7, #48]	; 0x30
 80064fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006500:	2b7f      	cmp	r3, #127	; 0x7f
 8006502:	d8f0      	bhi.n	80064e6 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006506:	1c5a      	adds	r2, r3, #1
 8006508:	637a      	str	r2, [r7, #52]	; 0x34
 800650a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800650c:	b2d2      	uxtb	r2, r2
 800650e:	701a      	strb	r2, [r3, #0]
 8006510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006512:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	62bb      	str	r3, [r7, #40]	; 0x28
 800651c:	e00b      	b.n	8006536 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800651e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006520:	b2da      	uxtb	r2, r3
 8006522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006524:	1c59      	adds	r1, r3, #1
 8006526:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006528:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800652c:	b2d2      	uxtb	r2, r2
 800652e:	701a      	strb	r2, [r3, #0]
 8006530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006532:	09db      	lsrs	r3, r3, #7
 8006534:	62bb      	str	r3, [r7, #40]	; 0x28
 8006536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006538:	2b7f      	cmp	r3, #127	; 0x7f
 800653a:	d8f0      	bhi.n	800651e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800653c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653e:	1c5a      	adds	r2, r3, #1
 8006540:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006542:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006544:	b2d2      	uxtb	r2, r2
 8006546:	701a      	strb	r2, [r3, #0]
 8006548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	627b      	str	r3, [r7, #36]	; 0x24
 8006550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006552:	623b      	str	r3, [r7, #32]
 8006554:	e00b      	b.n	800656e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006556:	6a3b      	ldr	r3, [r7, #32]
 8006558:	b2da      	uxtb	r2, r3
 800655a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655c:	1c59      	adds	r1, r3, #1
 800655e:	6279      	str	r1, [r7, #36]	; 0x24
 8006560:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006564:	b2d2      	uxtb	r2, r2
 8006566:	701a      	strb	r2, [r3, #0]
 8006568:	6a3b      	ldr	r3, [r7, #32]
 800656a:	09db      	lsrs	r3, r3, #7
 800656c:	623b      	str	r3, [r7, #32]
 800656e:	6a3b      	ldr	r3, [r7, #32]
 8006570:	2b7f      	cmp	r3, #127	; 0x7f
 8006572:	d8f0      	bhi.n	8006556 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	1c5a      	adds	r2, r3, #1
 8006578:	627a      	str	r2, [r7, #36]	; 0x24
 800657a:	6a3a      	ldr	r2, [r7, #32]
 800657c:	b2d2      	uxtb	r2, r2
 800657e:	701a      	strb	r2, [r3, #0]
 8006580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006582:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	6979      	ldr	r1, [r7, #20]
 8006588:	69b8      	ldr	r0, [r7, #24]
 800658a:	f7ff f977 	bl	800587c <_SendPacket>
  RECORD_END();
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	f383 8811 	msr	BASEPRI, r3
}
 8006594:	bf00      	nop
 8006596:	3740      	adds	r7, #64	; 0x40
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	20014290 	.word	0x20014290

080065a0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b08c      	sub	sp, #48	; 0x30
 80065a4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80065a6:	4b59      	ldr	r3, [pc, #356]	; (800670c <SEGGER_SYSVIEW_Start+0x16c>)
 80065a8:	2201      	movs	r2, #1
 80065aa:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80065ac:	f3ef 8311 	mrs	r3, BASEPRI
 80065b0:	f04f 0120 	mov.w	r1, #32
 80065b4:	f381 8811 	msr	BASEPRI, r1
 80065b8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80065ba:	4b54      	ldr	r3, [pc, #336]	; (800670c <SEGGER_SYSVIEW_Start+0x16c>)
 80065bc:	785b      	ldrb	r3, [r3, #1]
 80065be:	220a      	movs	r2, #10
 80065c0:	4953      	ldr	r1, [pc, #332]	; (8006710 <SEGGER_SYSVIEW_Start+0x170>)
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7f9 fe04 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80065ce:	f7fe fe33 	bl	8005238 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80065d2:	200a      	movs	r0, #10
 80065d4:	f7ff fe28 	bl	8006228 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80065d8:	f3ef 8311 	mrs	r3, BASEPRI
 80065dc:	f04f 0120 	mov.w	r1, #32
 80065e0:	f381 8811 	msr	BASEPRI, r1
 80065e4:	60bb      	str	r3, [r7, #8]
 80065e6:	484b      	ldr	r0, [pc, #300]	; (8006714 <SEGGER_SYSVIEW_Start+0x174>)
 80065e8:	f7ff f855 	bl	8005696 <_PreparePacket>
 80065ec:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065f6:	4b45      	ldr	r3, [pc, #276]	; (800670c <SEGGER_SYSVIEW_Start+0x16c>)
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80065fc:	e00b      	b.n	8006616 <SEGGER_SYSVIEW_Start+0x76>
 80065fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006600:	b2da      	uxtb	r2, r3
 8006602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006604:	1c59      	adds	r1, r3, #1
 8006606:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006608:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800660c:	b2d2      	uxtb	r2, r2
 800660e:	701a      	strb	r2, [r3, #0]
 8006610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006612:	09db      	lsrs	r3, r3, #7
 8006614:	62bb      	str	r3, [r7, #40]	; 0x28
 8006616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006618:	2b7f      	cmp	r3, #127	; 0x7f
 800661a:	d8f0      	bhi.n	80065fe <SEGGER_SYSVIEW_Start+0x5e>
 800661c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661e:	1c5a      	adds	r2, r3, #1
 8006620:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006622:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006624:	b2d2      	uxtb	r2, r2
 8006626:	701a      	strb	r2, [r3, #0]
 8006628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	627b      	str	r3, [r7, #36]	; 0x24
 8006630:	4b36      	ldr	r3, [pc, #216]	; (800670c <SEGGER_SYSVIEW_Start+0x16c>)
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	623b      	str	r3, [r7, #32]
 8006636:	e00b      	b.n	8006650 <SEGGER_SYSVIEW_Start+0xb0>
 8006638:	6a3b      	ldr	r3, [r7, #32]
 800663a:	b2da      	uxtb	r2, r3
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663e:	1c59      	adds	r1, r3, #1
 8006640:	6279      	str	r1, [r7, #36]	; 0x24
 8006642:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006646:	b2d2      	uxtb	r2, r2
 8006648:	701a      	strb	r2, [r3, #0]
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	09db      	lsrs	r3, r3, #7
 800664e:	623b      	str	r3, [r7, #32]
 8006650:	6a3b      	ldr	r3, [r7, #32]
 8006652:	2b7f      	cmp	r3, #127	; 0x7f
 8006654:	d8f0      	bhi.n	8006638 <SEGGER_SYSVIEW_Start+0x98>
 8006656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006658:	1c5a      	adds	r2, r3, #1
 800665a:	627a      	str	r2, [r7, #36]	; 0x24
 800665c:	6a3a      	ldr	r2, [r7, #32]
 800665e:	b2d2      	uxtb	r2, r2
 8006660:	701a      	strb	r2, [r3, #0]
 8006662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006664:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	61fb      	str	r3, [r7, #28]
 800666a:	4b28      	ldr	r3, [pc, #160]	; (800670c <SEGGER_SYSVIEW_Start+0x16c>)
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	61bb      	str	r3, [r7, #24]
 8006670:	e00b      	b.n	800668a <SEGGER_SYSVIEW_Start+0xea>
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	b2da      	uxtb	r2, r3
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	1c59      	adds	r1, r3, #1
 800667a:	61f9      	str	r1, [r7, #28]
 800667c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006680:	b2d2      	uxtb	r2, r2
 8006682:	701a      	strb	r2, [r3, #0]
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	09db      	lsrs	r3, r3, #7
 8006688:	61bb      	str	r3, [r7, #24]
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	2b7f      	cmp	r3, #127	; 0x7f
 800668e:	d8f0      	bhi.n	8006672 <SEGGER_SYSVIEW_Start+0xd2>
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	1c5a      	adds	r2, r3, #1
 8006694:	61fa      	str	r2, [r7, #28]
 8006696:	69ba      	ldr	r2, [r7, #24]
 8006698:	b2d2      	uxtb	r2, r2
 800669a:	701a      	strb	r2, [r3, #0]
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	617b      	str	r3, [r7, #20]
 80066a4:	2300      	movs	r3, #0
 80066a6:	613b      	str	r3, [r7, #16]
 80066a8:	e00b      	b.n	80066c2 <SEGGER_SYSVIEW_Start+0x122>
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	b2da      	uxtb	r2, r3
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	1c59      	adds	r1, r3, #1
 80066b2:	6179      	str	r1, [r7, #20]
 80066b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066b8:	b2d2      	uxtb	r2, r2
 80066ba:	701a      	strb	r2, [r3, #0]
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	09db      	lsrs	r3, r3, #7
 80066c0:	613b      	str	r3, [r7, #16]
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	2b7f      	cmp	r3, #127	; 0x7f
 80066c6:	d8f0      	bhi.n	80066aa <SEGGER_SYSVIEW_Start+0x10a>
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	1c5a      	adds	r2, r3, #1
 80066cc:	617a      	str	r2, [r7, #20]
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	b2d2      	uxtb	r2, r2
 80066d2:	701a      	strb	r2, [r3, #0]
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80066d8:	2218      	movs	r2, #24
 80066da:	6839      	ldr	r1, [r7, #0]
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f7ff f8cd 	bl	800587c <_SendPacket>
      RECORD_END();
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80066e8:	4b08      	ldr	r3, [pc, #32]	; (800670c <SEGGER_SYSVIEW_Start+0x16c>)
 80066ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d002      	beq.n	80066f6 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80066f0:	4b06      	ldr	r3, [pc, #24]	; (800670c <SEGGER_SYSVIEW_Start+0x16c>)
 80066f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80066f6:	f000 f9eb 	bl	8006ad0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80066fa:	f000 f9b1 	bl	8006a60 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80066fe:	f000 fc83 	bl	8007008 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006702:	bf00      	nop
 8006704:	3730      	adds	r7, #48	; 0x30
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	20014260 	.word	0x20014260
 8006710:	08007390 	.word	0x08007390
 8006714:	20014290 	.word	0x20014290

08006718 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800671e:	f3ef 8311 	mrs	r3, BASEPRI
 8006722:	f04f 0120 	mov.w	r1, #32
 8006726:	f381 8811 	msr	BASEPRI, r1
 800672a:	607b      	str	r3, [r7, #4]
 800672c:	480b      	ldr	r0, [pc, #44]	; (800675c <SEGGER_SYSVIEW_Stop+0x44>)
 800672e:	f7fe ffb2 	bl	8005696 <_PreparePacket>
 8006732:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006734:	4b0a      	ldr	r3, [pc, #40]	; (8006760 <SEGGER_SYSVIEW_Stop+0x48>)
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d007      	beq.n	800674c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800673c:	220b      	movs	r2, #11
 800673e:	6839      	ldr	r1, [r7, #0]
 8006740:	6838      	ldr	r0, [r7, #0]
 8006742:	f7ff f89b 	bl	800587c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006746:	4b06      	ldr	r3, [pc, #24]	; (8006760 <SEGGER_SYSVIEW_Stop+0x48>)
 8006748:	2200      	movs	r2, #0
 800674a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f383 8811 	msr	BASEPRI, r3
}
 8006752:	bf00      	nop
 8006754:	3708      	adds	r7, #8
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	20014290 	.word	0x20014290
 8006760:	20014260 	.word	0x20014260

08006764 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006764:	b580      	push	{r7, lr}
 8006766:	b08c      	sub	sp, #48	; 0x30
 8006768:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800676a:	f3ef 8311 	mrs	r3, BASEPRI
 800676e:	f04f 0120 	mov.w	r1, #32
 8006772:	f381 8811 	msr	BASEPRI, r1
 8006776:	60fb      	str	r3, [r7, #12]
 8006778:	4845      	ldr	r0, [pc, #276]	; (8006890 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800677a:	f7fe ff8c 	bl	8005696 <_PreparePacket>
 800677e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006788:	4b42      	ldr	r3, [pc, #264]	; (8006894 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	62bb      	str	r3, [r7, #40]	; 0x28
 800678e:	e00b      	b.n	80067a8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006792:	b2da      	uxtb	r2, r3
 8006794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006796:	1c59      	adds	r1, r3, #1
 8006798:	62f9      	str	r1, [r7, #44]	; 0x2c
 800679a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800679e:	b2d2      	uxtb	r2, r2
 80067a0:	701a      	strb	r2, [r3, #0]
 80067a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a4:	09db      	lsrs	r3, r3, #7
 80067a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80067a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067aa:	2b7f      	cmp	r3, #127	; 0x7f
 80067ac:	d8f0      	bhi.n	8006790 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80067ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b0:	1c5a      	adds	r2, r3, #1
 80067b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067b6:	b2d2      	uxtb	r2, r2
 80067b8:	701a      	strb	r2, [r3, #0]
 80067ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067bc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	627b      	str	r3, [r7, #36]	; 0x24
 80067c2:	4b34      	ldr	r3, [pc, #208]	; (8006894 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	623b      	str	r3, [r7, #32]
 80067c8:	e00b      	b.n	80067e2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80067ca:	6a3b      	ldr	r3, [r7, #32]
 80067cc:	b2da      	uxtb	r2, r3
 80067ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d0:	1c59      	adds	r1, r3, #1
 80067d2:	6279      	str	r1, [r7, #36]	; 0x24
 80067d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067d8:	b2d2      	uxtb	r2, r2
 80067da:	701a      	strb	r2, [r3, #0]
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	09db      	lsrs	r3, r3, #7
 80067e0:	623b      	str	r3, [r7, #32]
 80067e2:	6a3b      	ldr	r3, [r7, #32]
 80067e4:	2b7f      	cmp	r3, #127	; 0x7f
 80067e6:	d8f0      	bhi.n	80067ca <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80067e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ea:	1c5a      	adds	r2, r3, #1
 80067ec:	627a      	str	r2, [r7, #36]	; 0x24
 80067ee:	6a3a      	ldr	r2, [r7, #32]
 80067f0:	b2d2      	uxtb	r2, r2
 80067f2:	701a      	strb	r2, [r3, #0]
 80067f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	61fb      	str	r3, [r7, #28]
 80067fc:	4b25      	ldr	r3, [pc, #148]	; (8006894 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	61bb      	str	r3, [r7, #24]
 8006802:	e00b      	b.n	800681c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	b2da      	uxtb	r2, r3
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	1c59      	adds	r1, r3, #1
 800680c:	61f9      	str	r1, [r7, #28]
 800680e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006812:	b2d2      	uxtb	r2, r2
 8006814:	701a      	strb	r2, [r3, #0]
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	09db      	lsrs	r3, r3, #7
 800681a:	61bb      	str	r3, [r7, #24]
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	2b7f      	cmp	r3, #127	; 0x7f
 8006820:	d8f0      	bhi.n	8006804 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	1c5a      	adds	r2, r3, #1
 8006826:	61fa      	str	r2, [r7, #28]
 8006828:	69ba      	ldr	r2, [r7, #24]
 800682a:	b2d2      	uxtb	r2, r2
 800682c:	701a      	strb	r2, [r3, #0]
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	617b      	str	r3, [r7, #20]
 8006836:	2300      	movs	r3, #0
 8006838:	613b      	str	r3, [r7, #16]
 800683a:	e00b      	b.n	8006854 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	b2da      	uxtb	r2, r3
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	1c59      	adds	r1, r3, #1
 8006844:	6179      	str	r1, [r7, #20]
 8006846:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800684a:	b2d2      	uxtb	r2, r2
 800684c:	701a      	strb	r2, [r3, #0]
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	09db      	lsrs	r3, r3, #7
 8006852:	613b      	str	r3, [r7, #16]
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	2b7f      	cmp	r3, #127	; 0x7f
 8006858:	d8f0      	bhi.n	800683c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	1c5a      	adds	r2, r3, #1
 800685e:	617a      	str	r2, [r7, #20]
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	b2d2      	uxtb	r2, r2
 8006864:	701a      	strb	r2, [r3, #0]
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800686a:	2218      	movs	r2, #24
 800686c:	6879      	ldr	r1, [r7, #4]
 800686e:	68b8      	ldr	r0, [r7, #8]
 8006870:	f7ff f804 	bl	800587c <_SendPacket>
  RECORD_END();
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800687a:	4b06      	ldr	r3, [pc, #24]	; (8006894 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800687c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687e:	2b00      	cmp	r3, #0
 8006880:	d002      	beq.n	8006888 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006882:	4b04      	ldr	r3, [pc, #16]	; (8006894 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006886:	4798      	blx	r3
  }
}
 8006888:	bf00      	nop
 800688a:	3730      	adds	r7, #48	; 0x30
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	20014290 	.word	0x20014290
 8006894:	20014260 	.word	0x20014260

08006898 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006898:	b580      	push	{r7, lr}
 800689a:	b092      	sub	sp, #72	; 0x48
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80068a0:	f3ef 8311 	mrs	r3, BASEPRI
 80068a4:	f04f 0120 	mov.w	r1, #32
 80068a8:	f381 8811 	msr	BASEPRI, r1
 80068ac:	617b      	str	r3, [r7, #20]
 80068ae:	486a      	ldr	r0, [pc, #424]	; (8006a58 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80068b0:	f7fe fef1 	bl	8005696 <_PreparePacket>
 80068b4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	647b      	str	r3, [r7, #68]	; 0x44
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	4b66      	ldr	r3, [pc, #408]	; (8006a5c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	643b      	str	r3, [r7, #64]	; 0x40
 80068ca:	e00b      	b.n	80068e4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80068cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068d2:	1c59      	adds	r1, r3, #1
 80068d4:	6479      	str	r1, [r7, #68]	; 0x44
 80068d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068da:	b2d2      	uxtb	r2, r2
 80068dc:	701a      	strb	r2, [r3, #0]
 80068de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068e0:	09db      	lsrs	r3, r3, #7
 80068e2:	643b      	str	r3, [r7, #64]	; 0x40
 80068e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068e6:	2b7f      	cmp	r3, #127	; 0x7f
 80068e8:	d8f0      	bhi.n	80068cc <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80068ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068ec:	1c5a      	adds	r2, r3, #1
 80068ee:	647a      	str	r2, [r7, #68]	; 0x44
 80068f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068f2:	b2d2      	uxtb	r2, r2
 80068f4:	701a      	strb	r2, [r3, #0]
 80068f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068f8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	63bb      	str	r3, [r7, #56]	; 0x38
 8006904:	e00b      	b.n	800691e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006908:	b2da      	uxtb	r2, r3
 800690a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800690c:	1c59      	adds	r1, r3, #1
 800690e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006910:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006914:	b2d2      	uxtb	r2, r2
 8006916:	701a      	strb	r2, [r3, #0]
 8006918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691a:	09db      	lsrs	r3, r3, #7
 800691c:	63bb      	str	r3, [r7, #56]	; 0x38
 800691e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006920:	2b7f      	cmp	r3, #127	; 0x7f
 8006922:	d8f0      	bhi.n	8006906 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006926:	1c5a      	adds	r2, r3, #1
 8006928:	63fa      	str	r2, [r7, #60]	; 0x3c
 800692a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800692c:	b2d2      	uxtb	r2, r2
 800692e:	701a      	strb	r2, [r3, #0]
 8006930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006932:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	2220      	movs	r2, #32
 800693a:	4619      	mov	r1, r3
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f7fe fe5d 	bl	80055fc <_EncodeStr>
 8006942:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006944:	2209      	movs	r2, #9
 8006946:	68f9      	ldr	r1, [r7, #12]
 8006948:	6938      	ldr	r0, [r7, #16]
 800694a:	f7fe ff97 	bl	800587c <_SendPacket>
  //
  pPayload = pPayloadStart;
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	637b      	str	r3, [r7, #52]	; 0x34
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	4b40      	ldr	r3, [pc, #256]	; (8006a5c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	633b      	str	r3, [r7, #48]	; 0x30
 8006962:	e00b      	b.n	800697c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006966:	b2da      	uxtb	r2, r3
 8006968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800696a:	1c59      	adds	r1, r3, #1
 800696c:	6379      	str	r1, [r7, #52]	; 0x34
 800696e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006972:	b2d2      	uxtb	r2, r2
 8006974:	701a      	strb	r2, [r3, #0]
 8006976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006978:	09db      	lsrs	r3, r3, #7
 800697a:	633b      	str	r3, [r7, #48]	; 0x30
 800697c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697e:	2b7f      	cmp	r3, #127	; 0x7f
 8006980:	d8f0      	bhi.n	8006964 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006984:	1c5a      	adds	r2, r3, #1
 8006986:	637a      	str	r2, [r7, #52]	; 0x34
 8006988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800698a:	b2d2      	uxtb	r2, r2
 800698c:	701a      	strb	r2, [r3, #0]
 800698e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006990:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	62bb      	str	r3, [r7, #40]	; 0x28
 800699c:	e00b      	b.n	80069b6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800699e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a0:	b2da      	uxtb	r2, r3
 80069a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a4:	1c59      	adds	r1, r3, #1
 80069a6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80069a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069ac:	b2d2      	uxtb	r2, r2
 80069ae:	701a      	strb	r2, [r3, #0]
 80069b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b2:	09db      	lsrs	r3, r3, #7
 80069b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80069b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b8:	2b7f      	cmp	r3, #127	; 0x7f
 80069ba:	d8f0      	bhi.n	800699e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80069bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069be:	1c5a      	adds	r2, r3, #1
 80069c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069c4:	b2d2      	uxtb	r2, r2
 80069c6:	701a      	strb	r2, [r3, #0]
 80069c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ca:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	627b      	str	r3, [r7, #36]	; 0x24
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	623b      	str	r3, [r7, #32]
 80069d6:	e00b      	b.n	80069f0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80069d8:	6a3b      	ldr	r3, [r7, #32]
 80069da:	b2da      	uxtb	r2, r3
 80069dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069de:	1c59      	adds	r1, r3, #1
 80069e0:	6279      	str	r1, [r7, #36]	; 0x24
 80069e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069e6:	b2d2      	uxtb	r2, r2
 80069e8:	701a      	strb	r2, [r3, #0]
 80069ea:	6a3b      	ldr	r3, [r7, #32]
 80069ec:	09db      	lsrs	r3, r3, #7
 80069ee:	623b      	str	r3, [r7, #32]
 80069f0:	6a3b      	ldr	r3, [r7, #32]
 80069f2:	2b7f      	cmp	r3, #127	; 0x7f
 80069f4:	d8f0      	bhi.n	80069d8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80069f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f8:	1c5a      	adds	r2, r3, #1
 80069fa:	627a      	str	r2, [r7, #36]	; 0x24
 80069fc:	6a3a      	ldr	r2, [r7, #32]
 80069fe:	b2d2      	uxtb	r2, r2
 8006a00:	701a      	strb	r2, [r3, #0]
 8006a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a04:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	61fb      	str	r3, [r7, #28]
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	61bb      	str	r3, [r7, #24]
 8006a0e:	e00b      	b.n	8006a28 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	b2da      	uxtb	r2, r3
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	1c59      	adds	r1, r3, #1
 8006a18:	61f9      	str	r1, [r7, #28]
 8006a1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a1e:	b2d2      	uxtb	r2, r2
 8006a20:	701a      	strb	r2, [r3, #0]
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	09db      	lsrs	r3, r3, #7
 8006a26:	61bb      	str	r3, [r7, #24]
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	2b7f      	cmp	r3, #127	; 0x7f
 8006a2c:	d8f0      	bhi.n	8006a10 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	1c5a      	adds	r2, r3, #1
 8006a32:	61fa      	str	r2, [r7, #28]
 8006a34:	69ba      	ldr	r2, [r7, #24]
 8006a36:	b2d2      	uxtb	r2, r2
 8006a38:	701a      	strb	r2, [r3, #0]
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006a3e:	2215      	movs	r2, #21
 8006a40:	68f9      	ldr	r1, [r7, #12]
 8006a42:	6938      	ldr	r0, [r7, #16]
 8006a44:	f7fe ff1a 	bl	800587c <_SendPacket>
  RECORD_END();
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	f383 8811 	msr	BASEPRI, r3
}
 8006a4e:	bf00      	nop
 8006a50:	3748      	adds	r7, #72	; 0x48
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	20014290 	.word	0x20014290
 8006a5c:	20014260 	.word	0x20014260

08006a60 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006a60:	b580      	push	{r7, lr}
 8006a62:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006a64:	4b07      	ldr	r3, [pc, #28]	; (8006a84 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006a66:	6a1b      	ldr	r3, [r3, #32]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d008      	beq.n	8006a7e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006a6c:	4b05      	ldr	r3, [pc, #20]	; (8006a84 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006a6e:	6a1b      	ldr	r3, [r3, #32]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d003      	beq.n	8006a7e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006a76:	4b03      	ldr	r3, [pc, #12]	; (8006a84 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	4798      	blx	r3
  }
}
 8006a7e:	bf00      	nop
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	20014260 	.word	0x20014260

08006a88 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b086      	sub	sp, #24
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a90:	f3ef 8311 	mrs	r3, BASEPRI
 8006a94:	f04f 0120 	mov.w	r1, #32
 8006a98:	f381 8811 	msr	BASEPRI, r1
 8006a9c:	617b      	str	r3, [r7, #20]
 8006a9e:	480b      	ldr	r0, [pc, #44]	; (8006acc <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006aa0:	f7fe fdf9 	bl	8005696 <_PreparePacket>
 8006aa4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006aa6:	2280      	movs	r2, #128	; 0x80
 8006aa8:	6879      	ldr	r1, [r7, #4]
 8006aaa:	6938      	ldr	r0, [r7, #16]
 8006aac:	f7fe fda6 	bl	80055fc <_EncodeStr>
 8006ab0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006ab2:	220e      	movs	r2, #14
 8006ab4:	68f9      	ldr	r1, [r7, #12]
 8006ab6:	6938      	ldr	r0, [r7, #16]
 8006ab8:	f7fe fee0 	bl	800587c <_SendPacket>
  RECORD_END();
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	f383 8811 	msr	BASEPRI, r3
}
 8006ac2:	bf00      	nop
 8006ac4:	3718      	adds	r7, #24
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	20014290 	.word	0x20014290

08006ad0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006ad0:	b590      	push	{r4, r7, lr}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006ad6:	4b15      	ldr	r3, [pc, #84]	; (8006b2c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d01a      	beq.n	8006b14 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006ade:	4b13      	ldr	r3, [pc, #76]	; (8006b2c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d015      	beq.n	8006b14 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006ae8:	4b10      	ldr	r3, [pc, #64]	; (8006b2c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006aea:	6a1b      	ldr	r3, [r3, #32]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4798      	blx	r3
 8006af0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006af4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006af6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006afa:	f04f 0200 	mov.w	r2, #0
 8006afe:	f04f 0300 	mov.w	r3, #0
 8006b02:	000a      	movs	r2, r1
 8006b04:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006b06:	4613      	mov	r3, r2
 8006b08:	461a      	mov	r2, r3
 8006b0a:	4621      	mov	r1, r4
 8006b0c:	200d      	movs	r0, #13
 8006b0e:	f7ff fbe5 	bl	80062dc <SEGGER_SYSVIEW_RecordU32x2>
 8006b12:	e006      	b.n	8006b22 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006b14:	4b06      	ldr	r3, [pc, #24]	; (8006b30 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4619      	mov	r1, r3
 8006b1a:	200c      	movs	r0, #12
 8006b1c:	f7ff fba2 	bl	8006264 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006b20:	bf00      	nop
 8006b22:	bf00      	nop
 8006b24:	370c      	adds	r7, #12
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd90      	pop	{r4, r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	20014260 	.word	0x20014260
 8006b30:	e0001004 	.word	0xe0001004

08006b34 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b086      	sub	sp, #24
 8006b38:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006b3a:	f3ef 8311 	mrs	r3, BASEPRI
 8006b3e:	f04f 0120 	mov.w	r1, #32
 8006b42:	f381 8811 	msr	BASEPRI, r1
 8006b46:	60fb      	str	r3, [r7, #12]
 8006b48:	4819      	ldr	r0, [pc, #100]	; (8006bb0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006b4a:	f7fe fda4 	bl	8005696 <_PreparePacket>
 8006b4e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006b54:	4b17      	ldr	r3, [pc, #92]	; (8006bb4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b5c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	617b      	str	r3, [r7, #20]
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	613b      	str	r3, [r7, #16]
 8006b66:	e00b      	b.n	8006b80 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	b2da      	uxtb	r2, r3
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	1c59      	adds	r1, r3, #1
 8006b70:	6179      	str	r1, [r7, #20]
 8006b72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b76:	b2d2      	uxtb	r2, r2
 8006b78:	701a      	strb	r2, [r3, #0]
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	09db      	lsrs	r3, r3, #7
 8006b7e:	613b      	str	r3, [r7, #16]
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	2b7f      	cmp	r3, #127	; 0x7f
 8006b84:	d8f0      	bhi.n	8006b68 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	1c5a      	adds	r2, r3, #1
 8006b8a:	617a      	str	r2, [r7, #20]
 8006b8c:	693a      	ldr	r2, [r7, #16]
 8006b8e:	b2d2      	uxtb	r2, r2
 8006b90:	701a      	strb	r2, [r3, #0]
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006b96:	2202      	movs	r2, #2
 8006b98:	6879      	ldr	r1, [r7, #4]
 8006b9a:	68b8      	ldr	r0, [r7, #8]
 8006b9c:	f7fe fe6e 	bl	800587c <_SendPacket>
  RECORD_END();
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f383 8811 	msr	BASEPRI, r3
}
 8006ba6:	bf00      	nop
 8006ba8:	3718      	adds	r7, #24
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	20014290 	.word	0x20014290
 8006bb4:	e000ed04 	.word	0xe000ed04

08006bb8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006bbe:	f3ef 8311 	mrs	r3, BASEPRI
 8006bc2:	f04f 0120 	mov.w	r1, #32
 8006bc6:	f381 8811 	msr	BASEPRI, r1
 8006bca:	607b      	str	r3, [r7, #4]
 8006bcc:	4807      	ldr	r0, [pc, #28]	; (8006bec <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006bce:	f7fe fd62 	bl	8005696 <_PreparePacket>
 8006bd2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006bd4:	2203      	movs	r2, #3
 8006bd6:	6839      	ldr	r1, [r7, #0]
 8006bd8:	6838      	ldr	r0, [r7, #0]
 8006bda:	f7fe fe4f 	bl	800587c <_SendPacket>
  RECORD_END();
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f383 8811 	msr	BASEPRI, r3
}
 8006be4:	bf00      	nop
 8006be6:	3708      	adds	r7, #8
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	20014290 	.word	0x20014290

08006bf0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006bf6:	f3ef 8311 	mrs	r3, BASEPRI
 8006bfa:	f04f 0120 	mov.w	r1, #32
 8006bfe:	f381 8811 	msr	BASEPRI, r1
 8006c02:	607b      	str	r3, [r7, #4]
 8006c04:	4807      	ldr	r0, [pc, #28]	; (8006c24 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006c06:	f7fe fd46 	bl	8005696 <_PreparePacket>
 8006c0a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006c0c:	2212      	movs	r2, #18
 8006c0e:	6839      	ldr	r1, [r7, #0]
 8006c10:	6838      	ldr	r0, [r7, #0]
 8006c12:	f7fe fe33 	bl	800587c <_SendPacket>
  RECORD_END();
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f383 8811 	msr	BASEPRI, r3
}
 8006c1c:	bf00      	nop
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	20014290 	.word	0x20014290

08006c28 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006c2e:	f3ef 8311 	mrs	r3, BASEPRI
 8006c32:	f04f 0120 	mov.w	r1, #32
 8006c36:	f381 8811 	msr	BASEPRI, r1
 8006c3a:	607b      	str	r3, [r7, #4]
 8006c3c:	4807      	ldr	r0, [pc, #28]	; (8006c5c <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006c3e:	f7fe fd2a 	bl	8005696 <_PreparePacket>
 8006c42:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006c44:	2211      	movs	r2, #17
 8006c46:	6839      	ldr	r1, [r7, #0]
 8006c48:	6838      	ldr	r0, [r7, #0]
 8006c4a:	f7fe fe17 	bl	800587c <_SendPacket>
  RECORD_END();
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f383 8811 	msr	BASEPRI, r3
}
 8006c54:	bf00      	nop
 8006c56:	3708      	adds	r7, #8
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	20014290 	.word	0x20014290

08006c60 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b088      	sub	sp, #32
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006c68:	f3ef 8311 	mrs	r3, BASEPRI
 8006c6c:	f04f 0120 	mov.w	r1, #32
 8006c70:	f381 8811 	msr	BASEPRI, r1
 8006c74:	617b      	str	r3, [r7, #20]
 8006c76:	4819      	ldr	r0, [pc, #100]	; (8006cdc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006c78:	f7fe fd0d 	bl	8005696 <_PreparePacket>
 8006c7c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006c82:	4b17      	ldr	r3, [pc, #92]	; (8006ce0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	61fb      	str	r3, [r7, #28]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	61bb      	str	r3, [r7, #24]
 8006c94:	e00b      	b.n	8006cae <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	b2da      	uxtb	r2, r3
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	1c59      	adds	r1, r3, #1
 8006c9e:	61f9      	str	r1, [r7, #28]
 8006ca0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ca4:	b2d2      	uxtb	r2, r2
 8006ca6:	701a      	strb	r2, [r3, #0]
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	09db      	lsrs	r3, r3, #7
 8006cac:	61bb      	str	r3, [r7, #24]
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	2b7f      	cmp	r3, #127	; 0x7f
 8006cb2:	d8f0      	bhi.n	8006c96 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	1c5a      	adds	r2, r3, #1
 8006cb8:	61fa      	str	r2, [r7, #28]
 8006cba:	69ba      	ldr	r2, [r7, #24]
 8006cbc:	b2d2      	uxtb	r2, r2
 8006cbe:	701a      	strb	r2, [r3, #0]
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006cc4:	2208      	movs	r2, #8
 8006cc6:	68f9      	ldr	r1, [r7, #12]
 8006cc8:	6938      	ldr	r0, [r7, #16]
 8006cca:	f7fe fdd7 	bl	800587c <_SendPacket>
  RECORD_END();
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	f383 8811 	msr	BASEPRI, r3
}
 8006cd4:	bf00      	nop
 8006cd6:	3720      	adds	r7, #32
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	20014290 	.word	0x20014290
 8006ce0:	20014260 	.word	0x20014260

08006ce4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b088      	sub	sp, #32
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006cec:	f3ef 8311 	mrs	r3, BASEPRI
 8006cf0:	f04f 0120 	mov.w	r1, #32
 8006cf4:	f381 8811 	msr	BASEPRI, r1
 8006cf8:	617b      	str	r3, [r7, #20]
 8006cfa:	4819      	ldr	r0, [pc, #100]	; (8006d60 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006cfc:	f7fe fccb 	bl	8005696 <_PreparePacket>
 8006d00:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006d06:	4b17      	ldr	r3, [pc, #92]	; (8006d64 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	61fb      	str	r3, [r7, #28]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	61bb      	str	r3, [r7, #24]
 8006d18:	e00b      	b.n	8006d32 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	b2da      	uxtb	r2, r3
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	1c59      	adds	r1, r3, #1
 8006d22:	61f9      	str	r1, [r7, #28]
 8006d24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d28:	b2d2      	uxtb	r2, r2
 8006d2a:	701a      	strb	r2, [r3, #0]
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	09db      	lsrs	r3, r3, #7
 8006d30:	61bb      	str	r3, [r7, #24]
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	2b7f      	cmp	r3, #127	; 0x7f
 8006d36:	d8f0      	bhi.n	8006d1a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	1c5a      	adds	r2, r3, #1
 8006d3c:	61fa      	str	r2, [r7, #28]
 8006d3e:	69ba      	ldr	r2, [r7, #24]
 8006d40:	b2d2      	uxtb	r2, r2
 8006d42:	701a      	strb	r2, [r3, #0]
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006d48:	2204      	movs	r2, #4
 8006d4a:	68f9      	ldr	r1, [r7, #12]
 8006d4c:	6938      	ldr	r0, [r7, #16]
 8006d4e:	f7fe fd95 	bl	800587c <_SendPacket>
  RECORD_END();
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	f383 8811 	msr	BASEPRI, r3
}
 8006d58:	bf00      	nop
 8006d5a:	3720      	adds	r7, #32
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	20014290 	.word	0x20014290
 8006d64:	20014260 	.word	0x20014260

08006d68 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b088      	sub	sp, #32
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006d70:	f3ef 8311 	mrs	r3, BASEPRI
 8006d74:	f04f 0120 	mov.w	r1, #32
 8006d78:	f381 8811 	msr	BASEPRI, r1
 8006d7c:	617b      	str	r3, [r7, #20]
 8006d7e:	4819      	ldr	r0, [pc, #100]	; (8006de4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006d80:	f7fe fc89 	bl	8005696 <_PreparePacket>
 8006d84:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006d8a:	4b17      	ldr	r3, [pc, #92]	; (8006de8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	61fb      	str	r3, [r7, #28]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	61bb      	str	r3, [r7, #24]
 8006d9c:	e00b      	b.n	8006db6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	b2da      	uxtb	r2, r3
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	1c59      	adds	r1, r3, #1
 8006da6:	61f9      	str	r1, [r7, #28]
 8006da8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dac:	b2d2      	uxtb	r2, r2
 8006dae:	701a      	strb	r2, [r3, #0]
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	09db      	lsrs	r3, r3, #7
 8006db4:	61bb      	str	r3, [r7, #24]
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	2b7f      	cmp	r3, #127	; 0x7f
 8006dba:	d8f0      	bhi.n	8006d9e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	1c5a      	adds	r2, r3, #1
 8006dc0:	61fa      	str	r2, [r7, #28]
 8006dc2:	69ba      	ldr	r2, [r7, #24]
 8006dc4:	b2d2      	uxtb	r2, r2
 8006dc6:	701a      	strb	r2, [r3, #0]
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006dcc:	2206      	movs	r2, #6
 8006dce:	68f9      	ldr	r1, [r7, #12]
 8006dd0:	6938      	ldr	r0, [r7, #16]
 8006dd2:	f7fe fd53 	bl	800587c <_SendPacket>
  RECORD_END();
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	f383 8811 	msr	BASEPRI, r3
}
 8006ddc:	bf00      	nop
 8006dde:	3720      	adds	r7, #32
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	20014290 	.word	0x20014290
 8006de8:	20014260 	.word	0x20014260

08006dec <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b08a      	sub	sp, #40	; 0x28
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006df6:	f3ef 8311 	mrs	r3, BASEPRI
 8006dfa:	f04f 0120 	mov.w	r1, #32
 8006dfe:	f381 8811 	msr	BASEPRI, r1
 8006e02:	617b      	str	r3, [r7, #20]
 8006e04:	4827      	ldr	r0, [pc, #156]	; (8006ea4 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006e06:	f7fe fc46 	bl	8005696 <_PreparePacket>
 8006e0a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006e10:	4b25      	ldr	r3, [pc, #148]	; (8006ea8 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	623b      	str	r3, [r7, #32]
 8006e22:	e00b      	b.n	8006e3c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006e24:	6a3b      	ldr	r3, [r7, #32]
 8006e26:	b2da      	uxtb	r2, r3
 8006e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2a:	1c59      	adds	r1, r3, #1
 8006e2c:	6279      	str	r1, [r7, #36]	; 0x24
 8006e2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e32:	b2d2      	uxtb	r2, r2
 8006e34:	701a      	strb	r2, [r3, #0]
 8006e36:	6a3b      	ldr	r3, [r7, #32]
 8006e38:	09db      	lsrs	r3, r3, #7
 8006e3a:	623b      	str	r3, [r7, #32]
 8006e3c:	6a3b      	ldr	r3, [r7, #32]
 8006e3e:	2b7f      	cmp	r3, #127	; 0x7f
 8006e40:	d8f0      	bhi.n	8006e24 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e44:	1c5a      	adds	r2, r3, #1
 8006e46:	627a      	str	r2, [r7, #36]	; 0x24
 8006e48:	6a3a      	ldr	r2, [r7, #32]
 8006e4a:	b2d2      	uxtb	r2, r2
 8006e4c:	701a      	strb	r2, [r3, #0]
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e50:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	61fb      	str	r3, [r7, #28]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	61bb      	str	r3, [r7, #24]
 8006e5a:	e00b      	b.n	8006e74 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	b2da      	uxtb	r2, r3
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	1c59      	adds	r1, r3, #1
 8006e64:	61f9      	str	r1, [r7, #28]
 8006e66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e6a:	b2d2      	uxtb	r2, r2
 8006e6c:	701a      	strb	r2, [r3, #0]
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	09db      	lsrs	r3, r3, #7
 8006e72:	61bb      	str	r3, [r7, #24]
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	2b7f      	cmp	r3, #127	; 0x7f
 8006e78:	d8f0      	bhi.n	8006e5c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	1c5a      	adds	r2, r3, #1
 8006e7e:	61fa      	str	r2, [r7, #28]
 8006e80:	69ba      	ldr	r2, [r7, #24]
 8006e82:	b2d2      	uxtb	r2, r2
 8006e84:	701a      	strb	r2, [r3, #0]
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006e8a:	2207      	movs	r2, #7
 8006e8c:	68f9      	ldr	r1, [r7, #12]
 8006e8e:	6938      	ldr	r0, [r7, #16]
 8006e90:	f7fe fcf4 	bl	800587c <_SendPacket>
  RECORD_END();
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	f383 8811 	msr	BASEPRI, r3
}
 8006e9a:	bf00      	nop
 8006e9c:	3728      	adds	r7, #40	; 0x28
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	20014290 	.word	0x20014290
 8006ea8:	20014260 	.word	0x20014260

08006eac <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006eb4:	4b04      	ldr	r3, [pc, #16]	; (8006ec8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	1ad3      	subs	r3, r2, r3
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr
 8006ec8:	20014260 	.word	0x20014260

08006ecc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b08c      	sub	sp, #48	; 0x30
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006ed6:	4b3b      	ldr	r3, [pc, #236]	; (8006fc4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d06d      	beq.n	8006fba <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006ede:	4b39      	ldr	r3, [pc, #228]	; (8006fc4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ee8:	e008      	b.n	8006efc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d007      	beq.n	8006f06 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef8:	3301      	adds	r3, #1
 8006efa:	62bb      	str	r3, [r7, #40]	; 0x28
 8006efc:	79fb      	ldrb	r3, [r7, #7]
 8006efe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d3f2      	bcc.n	8006eea <SEGGER_SYSVIEW_SendModule+0x1e>
 8006f04:	e000      	b.n	8006f08 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006f06:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d055      	beq.n	8006fba <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f0e:	f3ef 8311 	mrs	r3, BASEPRI
 8006f12:	f04f 0120 	mov.w	r1, #32
 8006f16:	f381 8811 	msr	BASEPRI, r1
 8006f1a:	617b      	str	r3, [r7, #20]
 8006f1c:	482a      	ldr	r0, [pc, #168]	; (8006fc8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006f1e:	f7fe fbba 	bl	8005696 <_PreparePacket>
 8006f22:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8006f2c:	79fb      	ldrb	r3, [r7, #7]
 8006f2e:	623b      	str	r3, [r7, #32]
 8006f30:	e00b      	b.n	8006f4a <SEGGER_SYSVIEW_SendModule+0x7e>
 8006f32:	6a3b      	ldr	r3, [r7, #32]
 8006f34:	b2da      	uxtb	r2, r3
 8006f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f38:	1c59      	adds	r1, r3, #1
 8006f3a:	6279      	str	r1, [r7, #36]	; 0x24
 8006f3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f40:	b2d2      	uxtb	r2, r2
 8006f42:	701a      	strb	r2, [r3, #0]
 8006f44:	6a3b      	ldr	r3, [r7, #32]
 8006f46:	09db      	lsrs	r3, r3, #7
 8006f48:	623b      	str	r3, [r7, #32]
 8006f4a:	6a3b      	ldr	r3, [r7, #32]
 8006f4c:	2b7f      	cmp	r3, #127	; 0x7f
 8006f4e:	d8f0      	bhi.n	8006f32 <SEGGER_SYSVIEW_SendModule+0x66>
 8006f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f52:	1c5a      	adds	r2, r3, #1
 8006f54:	627a      	str	r2, [r7, #36]	; 0x24
 8006f56:	6a3a      	ldr	r2, [r7, #32]
 8006f58:	b2d2      	uxtb	r2, r2
 8006f5a:	701a      	strb	r2, [r3, #0]
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	61fb      	str	r3, [r7, #28]
 8006f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	61bb      	str	r3, [r7, #24]
 8006f6a:	e00b      	b.n	8006f84 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	b2da      	uxtb	r2, r3
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	1c59      	adds	r1, r3, #1
 8006f74:	61f9      	str	r1, [r7, #28]
 8006f76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f7a:	b2d2      	uxtb	r2, r2
 8006f7c:	701a      	strb	r2, [r3, #0]
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	09db      	lsrs	r3, r3, #7
 8006f82:	61bb      	str	r3, [r7, #24]
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	2b7f      	cmp	r3, #127	; 0x7f
 8006f88:	d8f0      	bhi.n	8006f6c <SEGGER_SYSVIEW_SendModule+0xa0>
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	1c5a      	adds	r2, r3, #1
 8006f8e:	61fa      	str	r2, [r7, #28]
 8006f90:	69ba      	ldr	r2, [r7, #24]
 8006f92:	b2d2      	uxtb	r2, r2
 8006f94:	701a      	strb	r2, [r3, #0]
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2280      	movs	r2, #128	; 0x80
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f7fe fb2a 	bl	80055fc <_EncodeStr>
 8006fa8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006faa:	2216      	movs	r2, #22
 8006fac:	68f9      	ldr	r1, [r7, #12]
 8006fae:	6938      	ldr	r0, [r7, #16]
 8006fb0:	f7fe fc64 	bl	800587c <_SendPacket>
      RECORD_END();
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006fba:	bf00      	nop
 8006fbc:	3730      	adds	r7, #48	; 0x30
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	20014288 	.word	0x20014288
 8006fc8:	20014290 	.word	0x20014290

08006fcc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006fd2:	4b0c      	ldr	r3, [pc, #48]	; (8007004 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00f      	beq.n	8006ffa <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006fda:	4b0a      	ldr	r3, [pc, #40]	; (8007004 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d002      	beq.n	8006fee <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1f2      	bne.n	8006fe0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006ffa:	bf00      	nop
 8006ffc:	3708      	adds	r7, #8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	20014288 	.word	0x20014288

08007008 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007008:	b580      	push	{r7, lr}
 800700a:	b086      	sub	sp, #24
 800700c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800700e:	f3ef 8311 	mrs	r3, BASEPRI
 8007012:	f04f 0120 	mov.w	r1, #32
 8007016:	f381 8811 	msr	BASEPRI, r1
 800701a:	60fb      	str	r3, [r7, #12]
 800701c:	4817      	ldr	r0, [pc, #92]	; (800707c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800701e:	f7fe fb3a 	bl	8005696 <_PreparePacket>
 8007022:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	617b      	str	r3, [r7, #20]
 800702c:	4b14      	ldr	r3, [pc, #80]	; (8007080 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	613b      	str	r3, [r7, #16]
 8007032:	e00b      	b.n	800704c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	b2da      	uxtb	r2, r3
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	1c59      	adds	r1, r3, #1
 800703c:	6179      	str	r1, [r7, #20]
 800703e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007042:	b2d2      	uxtb	r2, r2
 8007044:	701a      	strb	r2, [r3, #0]
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	09db      	lsrs	r3, r3, #7
 800704a:	613b      	str	r3, [r7, #16]
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	2b7f      	cmp	r3, #127	; 0x7f
 8007050:	d8f0      	bhi.n	8007034 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	1c5a      	adds	r2, r3, #1
 8007056:	617a      	str	r2, [r7, #20]
 8007058:	693a      	ldr	r2, [r7, #16]
 800705a:	b2d2      	uxtb	r2, r2
 800705c:	701a      	strb	r2, [r3, #0]
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007062:	221b      	movs	r2, #27
 8007064:	6879      	ldr	r1, [r7, #4]
 8007066:	68b8      	ldr	r0, [r7, #8]
 8007068:	f7fe fc08 	bl	800587c <_SendPacket>
  RECORD_END();
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f383 8811 	msr	BASEPRI, r3
}
 8007072:	bf00      	nop
 8007074:	3718      	adds	r7, #24
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	20014290 	.word	0x20014290
 8007080:	2001428c 	.word	0x2001428c

08007084 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007084:	b40f      	push	{r0, r1, r2, r3}
 8007086:	b580      	push	{r7, lr}
 8007088:	b082      	sub	sp, #8
 800708a:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 800708c:	f107 0314 	add.w	r3, r7, #20
 8007090:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8007092:	1d3b      	adds	r3, r7, #4
 8007094:	461a      	mov	r2, r3
 8007096:	2100      	movs	r1, #0
 8007098:	6938      	ldr	r0, [r7, #16]
 800709a:	f7fe fe79 	bl	8005d90 <_VPrintTarget>
  va_end(ParamList);
}
 800709e:	bf00      	nop
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070a8:	b004      	add	sp, #16
 80070aa:	4770      	bx	lr

080070ac <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b08a      	sub	sp, #40	; 0x28
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80070b4:	f3ef 8311 	mrs	r3, BASEPRI
 80070b8:	f04f 0120 	mov.w	r1, #32
 80070bc:	f381 8811 	msr	BASEPRI, r1
 80070c0:	617b      	str	r3, [r7, #20]
 80070c2:	4827      	ldr	r0, [pc, #156]	; (8007160 <SEGGER_SYSVIEW_Warn+0xb4>)
 80070c4:	f7fe fae7 	bl	8005696 <_PreparePacket>
 80070c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80070ca:	2280      	movs	r2, #128	; 0x80
 80070cc:	6879      	ldr	r1, [r7, #4]
 80070ce:	6938      	ldr	r0, [r7, #16]
 80070d0:	f7fe fa94 	bl	80055fc <_EncodeStr>
 80070d4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	627b      	str	r3, [r7, #36]	; 0x24
 80070da:	2301      	movs	r3, #1
 80070dc:	623b      	str	r3, [r7, #32]
 80070de:	e00b      	b.n	80070f8 <SEGGER_SYSVIEW_Warn+0x4c>
 80070e0:	6a3b      	ldr	r3, [r7, #32]
 80070e2:	b2da      	uxtb	r2, r3
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	1c59      	adds	r1, r3, #1
 80070e8:	6279      	str	r1, [r7, #36]	; 0x24
 80070ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070ee:	b2d2      	uxtb	r2, r2
 80070f0:	701a      	strb	r2, [r3, #0]
 80070f2:	6a3b      	ldr	r3, [r7, #32]
 80070f4:	09db      	lsrs	r3, r3, #7
 80070f6:	623b      	str	r3, [r7, #32]
 80070f8:	6a3b      	ldr	r3, [r7, #32]
 80070fa:	2b7f      	cmp	r3, #127	; 0x7f
 80070fc:	d8f0      	bhi.n	80070e0 <SEGGER_SYSVIEW_Warn+0x34>
 80070fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007100:	1c5a      	adds	r2, r3, #1
 8007102:	627a      	str	r2, [r7, #36]	; 0x24
 8007104:	6a3a      	ldr	r2, [r7, #32]
 8007106:	b2d2      	uxtb	r2, r2
 8007108:	701a      	strb	r2, [r3, #0]
 800710a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	61fb      	str	r3, [r7, #28]
 8007112:	2300      	movs	r3, #0
 8007114:	61bb      	str	r3, [r7, #24]
 8007116:	e00b      	b.n	8007130 <SEGGER_SYSVIEW_Warn+0x84>
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	b2da      	uxtb	r2, r3
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	1c59      	adds	r1, r3, #1
 8007120:	61f9      	str	r1, [r7, #28]
 8007122:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007126:	b2d2      	uxtb	r2, r2
 8007128:	701a      	strb	r2, [r3, #0]
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	09db      	lsrs	r3, r3, #7
 800712e:	61bb      	str	r3, [r7, #24]
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	2b7f      	cmp	r3, #127	; 0x7f
 8007134:	d8f0      	bhi.n	8007118 <SEGGER_SYSVIEW_Warn+0x6c>
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	1c5a      	adds	r2, r3, #1
 800713a:	61fa      	str	r2, [r7, #28]
 800713c:	69ba      	ldr	r2, [r7, #24]
 800713e:	b2d2      	uxtb	r2, r2
 8007140:	701a      	strb	r2, [r3, #0]
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007146:	221a      	movs	r2, #26
 8007148:	68f9      	ldr	r1, [r7, #12]
 800714a:	6938      	ldr	r0, [r7, #16]
 800714c:	f7fe fb96 	bl	800587c <_SendPacket>
  RECORD_END();
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	f383 8811 	msr	BASEPRI, r3
}
 8007156:	bf00      	nop
 8007158:	3728      	adds	r7, #40	; 0x28
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	20014290 	.word	0x20014290

08007164 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8007164:	b580      	push	{r7, lr}
 8007166:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8007168:	4803      	ldr	r0, [pc, #12]	; (8007178 <_cbSendSystemDesc+0x14>)
 800716a:	f7ff fc8d 	bl	8006a88 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800716e:	4803      	ldr	r0, [pc, #12]	; (800717c <_cbSendSystemDesc+0x18>)
 8007170:	f7ff fc8a 	bl	8006a88 <SEGGER_SYSVIEW_SendSysDesc>
}
 8007174:	bf00      	nop
 8007176:	bd80      	pop	{r7, pc}
 8007178:	0800731c 	.word	0x0800731c
 800717c:	08007360 	.word	0x08007360

08007180 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8007180:	b580      	push	{r7, lr}
 8007182:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8007184:	4b06      	ldr	r3, [pc, #24]	; (80071a0 <SEGGER_SYSVIEW_Conf+0x20>)
 8007186:	6818      	ldr	r0, [r3, #0]
 8007188:	4b05      	ldr	r3, [pc, #20]	; (80071a0 <SEGGER_SYSVIEW_Conf+0x20>)
 800718a:	6819      	ldr	r1, [r3, #0]
 800718c:	4b05      	ldr	r3, [pc, #20]	; (80071a4 <SEGGER_SYSVIEW_Conf+0x24>)
 800718e:	4a06      	ldr	r2, [pc, #24]	; (80071a8 <SEGGER_SYSVIEW_Conf+0x28>)
 8007190:	f7fe fff6 	bl	8006180 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8007194:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8007198:	f7ff f836 	bl	8006208 <SEGGER_SYSVIEW_SetRAMBase>
}
 800719c:	bf00      	nop
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	20000000 	.word	0x20000000
 80071a4:	08007165 	.word	0x08007165
 80071a8:	08007388 	.word	0x08007388

080071ac <__libc_init_array>:
 80071ac:	b570      	push	{r4, r5, r6, lr}
 80071ae:	4d0d      	ldr	r5, [pc, #52]	; (80071e4 <__libc_init_array+0x38>)
 80071b0:	4c0d      	ldr	r4, [pc, #52]	; (80071e8 <__libc_init_array+0x3c>)
 80071b2:	1b64      	subs	r4, r4, r5
 80071b4:	10a4      	asrs	r4, r4, #2
 80071b6:	2600      	movs	r6, #0
 80071b8:	42a6      	cmp	r6, r4
 80071ba:	d109      	bne.n	80071d0 <__libc_init_array+0x24>
 80071bc:	4d0b      	ldr	r5, [pc, #44]	; (80071ec <__libc_init_array+0x40>)
 80071be:	4c0c      	ldr	r4, [pc, #48]	; (80071f0 <__libc_init_array+0x44>)
 80071c0:	f000 f83c 	bl	800723c <_init>
 80071c4:	1b64      	subs	r4, r4, r5
 80071c6:	10a4      	asrs	r4, r4, #2
 80071c8:	2600      	movs	r6, #0
 80071ca:	42a6      	cmp	r6, r4
 80071cc:	d105      	bne.n	80071da <__libc_init_array+0x2e>
 80071ce:	bd70      	pop	{r4, r5, r6, pc}
 80071d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80071d4:	4798      	blx	r3
 80071d6:	3601      	adds	r6, #1
 80071d8:	e7ee      	b.n	80071b8 <__libc_init_array+0xc>
 80071da:	f855 3b04 	ldr.w	r3, [r5], #4
 80071de:	4798      	blx	r3
 80071e0:	3601      	adds	r6, #1
 80071e2:	e7f2      	b.n	80071ca <__libc_init_array+0x1e>
 80071e4:	080073b4 	.word	0x080073b4
 80071e8:	080073b4 	.word	0x080073b4
 80071ec:	080073b4 	.word	0x080073b4
 80071f0:	080073b8 	.word	0x080073b8

080071f4 <memcmp>:
 80071f4:	b530      	push	{r4, r5, lr}
 80071f6:	3901      	subs	r1, #1
 80071f8:	2400      	movs	r4, #0
 80071fa:	42a2      	cmp	r2, r4
 80071fc:	d101      	bne.n	8007202 <memcmp+0xe>
 80071fe:	2000      	movs	r0, #0
 8007200:	e005      	b.n	800720e <memcmp+0x1a>
 8007202:	5d03      	ldrb	r3, [r0, r4]
 8007204:	3401      	adds	r4, #1
 8007206:	5d0d      	ldrb	r5, [r1, r4]
 8007208:	42ab      	cmp	r3, r5
 800720a:	d0f6      	beq.n	80071fa <memcmp+0x6>
 800720c:	1b58      	subs	r0, r3, r5
 800720e:	bd30      	pop	{r4, r5, pc}

08007210 <memcpy>:
 8007210:	440a      	add	r2, r1
 8007212:	4291      	cmp	r1, r2
 8007214:	f100 33ff 	add.w	r3, r0, #4294967295
 8007218:	d100      	bne.n	800721c <memcpy+0xc>
 800721a:	4770      	bx	lr
 800721c:	b510      	push	{r4, lr}
 800721e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007222:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007226:	4291      	cmp	r1, r2
 8007228:	d1f9      	bne.n	800721e <memcpy+0xe>
 800722a:	bd10      	pop	{r4, pc}

0800722c <memset>:
 800722c:	4402      	add	r2, r0
 800722e:	4603      	mov	r3, r0
 8007230:	4293      	cmp	r3, r2
 8007232:	d100      	bne.n	8007236 <memset+0xa>
 8007234:	4770      	bx	lr
 8007236:	f803 1b01 	strb.w	r1, [r3], #1
 800723a:	e7f9      	b.n	8007230 <memset+0x4>

0800723c <_init>:
 800723c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800723e:	bf00      	nop
 8007240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007242:	bc08      	pop	{r3}
 8007244:	469e      	mov	lr, r3
 8007246:	4770      	bx	lr

08007248 <_fini>:
 8007248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724a:	bf00      	nop
 800724c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800724e:	bc08      	pop	{r3}
 8007250:	469e      	mov	lr, r3
 8007252:	4770      	bx	lr
