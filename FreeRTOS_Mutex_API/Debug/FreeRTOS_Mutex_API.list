
FreeRTOS_Mutex_API.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ecc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  0800605c  0800605c  0001605c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800622c  0800622c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800622c  0800622c  0001622c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006234  08006234  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006234  08006234  00016234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006238  08006238  00016238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800623c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00012e7c  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012ef4  20012ef4  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018607  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000309a  00000000  00000000  000386af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001190  00000000  00000000  0003b750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001078  00000000  00000000  0003c8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023cb9  00000000  00000000  0003d958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014101  00000000  00000000  00061611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5c89  00000000  00000000  00075712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014b39b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000053a0  00000000  00000000  0014b3f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006044 	.word	0x08006044

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006044 	.word	0x08006044

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fc7d 	bl	8000e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f83d 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f8cf 	bl	8000718 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800057a:	f000 f8a3 	bl	80006c4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  SemaMutex= xSemaphoreCreateMutex();
 800057e:	2001      	movs	r0, #1
 8000580:	f002 fa70 	bl	8002a64 <xQueueCreateMutex>
 8000584:	4603      	mov	r3, r0
 8000586:	4a13      	ldr	r2, [pc, #76]	; (80005d4 <main+0x6c>)
 8000588:	6013      	str	r3, [r2, #0]
  srand( 567 );
 800058a:	f240 2037 	movw	r0, #567	; 0x237
 800058e:	f004 fd29 	bl	8004fe4 <srand>

  if (SemaMutex != NULL)
 8000592:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <main+0x6c>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d018      	beq.n	80005cc <main+0x64>
  {
  xTaskCreate(Task_handler, "Task-1", 500, "Task-1 is running\r\n", 2, NULL);
 800059a:	2300      	movs	r3, #0
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	2302      	movs	r3, #2
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	4b0d      	ldr	r3, [pc, #52]	; (80005d8 <main+0x70>)
 80005a4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005a8:	490c      	ldr	r1, [pc, #48]	; (80005dc <main+0x74>)
 80005aa:	480d      	ldr	r0, [pc, #52]	; (80005e0 <main+0x78>)
 80005ac:	f002 fe68 	bl	8003280 <xTaskCreate>

  xTaskCreate(Task_handler, "Task-2", 500, "Task-2 is running\r\n", 4, NULL);
 80005b0:	2300      	movs	r3, #0
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	2304      	movs	r3, #4
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <main+0x7c>)
 80005ba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005be:	490a      	ldr	r1, [pc, #40]	; (80005e8 <main+0x80>)
 80005c0:	4807      	ldr	r0, [pc, #28]	; (80005e0 <main+0x78>)
 80005c2:	f002 fe5d 	bl	8003280 <xTaskCreate>

  vTaskStartScheduler();
 80005c6:	f002 ffd5 	bl	8003574 <vTaskStartScheduler>
 80005ca:	e002      	b.n	80005d2 <main+0x6a>
  }
  else
  {
	  printf("%s","Failed to create mutex\r\n");
 80005cc:	4807      	ldr	r0, [pc, #28]	; (80005ec <main+0x84>)
 80005ce:	f004 fd01 	bl	8004fd4 <puts>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d2:	e7fe      	b.n	80005d2 <main+0x6a>
 80005d4:	20012e54 	.word	0x20012e54
 80005d8:	0800605c 	.word	0x0800605c
 80005dc:	08006070 	.word	0x08006070
 80005e0:	080009f1 	.word	0x080009f1
 80005e4:	08006078 	.word	0x08006078
 80005e8:	0800608c 	.word	0x0800608c
 80005ec:	08006094 	.word	0x08006094

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	; 0x50
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	2230      	movs	r2, #48	; 0x30
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f004 fc5a 	bl	8004eb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	4b28      	ldr	r3, [pc, #160]	; (80006bc <SystemClock_Config+0xcc>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	4a27      	ldr	r2, [pc, #156]	; (80006bc <SystemClock_Config+0xcc>)
 800061e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000622:	6413      	str	r3, [r2, #64]	; 0x40
 8000624:	4b25      	ldr	r3, [pc, #148]	; (80006bc <SystemClock_Config+0xcc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <SystemClock_Config+0xd0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a21      	ldr	r2, [pc, #132]	; (80006c0 <SystemClock_Config+0xd0>)
 800063a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <SystemClock_Config+0xd0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064c:	2302      	movs	r3, #2
 800064e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000650:	2301      	movs	r3, #1
 8000652:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000654:	2310      	movs	r3, #16
 8000656:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000658:	2302      	movs	r3, #2
 800065a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065c:	2300      	movs	r3, #0
 800065e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000660:	2308      	movs	r3, #8
 8000662:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000664:	2332      	movs	r3, #50	; 0x32
 8000666:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000668:	2304      	movs	r3, #4
 800066a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800066c:	2307      	movs	r3, #7
 800066e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 0320 	add.w	r3, r7, #32
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fed3 	bl	8001420 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000680:	f000 f9da 	bl	8000a38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000688:	2302      	movs	r3, #2
 800068a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000690:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000694:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 f934 	bl	8001910 <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ae:	f000 f9c3 	bl	8000a38 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3750      	adds	r7, #80	; 0x50
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006ca:	4a12      	ldr	r2, [pc, #72]	; (8000714 <MX_USART2_UART_Init+0x50>)
 80006cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006ea:	220c      	movs	r2, #12
 80006ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006fc:	f001 fde4 	bl	80022c8 <HAL_UART_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000706:	f000 f997 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20012e10 	.word	0x20012e10
 8000714:	40004400 	.word	0x40004400

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08c      	sub	sp, #48	; 0x30
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
 8000732:	4ba2      	ldr	r3, [pc, #648]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4aa1      	ldr	r2, [pc, #644]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000738:	f043 0310 	orr.w	r3, r3, #16
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b9f      	ldr	r3, [pc, #636]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0310 	and.w	r3, r3, #16
 8000746:	61bb      	str	r3, [r7, #24]
 8000748:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
 800074e:	4b9b      	ldr	r3, [pc, #620]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a9a      	ldr	r2, [pc, #616]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b98      	ldr	r3, [pc, #608]	; (80009bc <MX_GPIO_Init+0x2a4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	4b94      	ldr	r3, [pc, #592]	; (80009bc <MX_GPIO_Init+0x2a4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a93      	ldr	r2, [pc, #588]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b91      	ldr	r3, [pc, #580]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	4b8d      	ldr	r3, [pc, #564]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a8c      	ldr	r2, [pc, #560]	; (80009bc <MX_GPIO_Init+0x2a4>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b8a      	ldr	r3, [pc, #552]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	4b86      	ldr	r3, [pc, #536]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a85      	ldr	r2, [pc, #532]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b83      	ldr	r3, [pc, #524]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b7f      	ldr	r3, [pc, #508]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a7e      	ldr	r2, [pc, #504]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80007c4:	f043 0308 	orr.w	r3, r3, #8
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b7c      	ldr	r3, [pc, #496]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0308 	and.w	r3, r3, #8
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2108      	movs	r1, #8
 80007da:	4879      	ldr	r0, [pc, #484]	; (80009c0 <MX_GPIO_Init+0x2a8>)
 80007dc:	f000 fe06 	bl	80013ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	2101      	movs	r1, #1
 80007e4:	4877      	ldr	r0, [pc, #476]	; (80009c4 <MX_GPIO_Init+0x2ac>)
 80007e6:	f000 fe01 	bl	80013ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007ea:	2200      	movs	r2, #0
 80007ec:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007f0:	4875      	ldr	r0, [pc, #468]	; (80009c8 <MX_GPIO_Init+0x2b0>)
 80007f2:	f000 fdfb 	bl	80013ec <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007f6:	2308      	movs	r3, #8
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	486c      	ldr	r0, [pc, #432]	; (80009c0 <MX_GPIO_Init+0x2a8>)
 800080e:	f000 fc51 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000812:	2301      	movs	r3, #1
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	4619      	mov	r1, r3
 8000828:	4866      	ldr	r0, [pc, #408]	; (80009c4 <MX_GPIO_Init+0x2ac>)
 800082a:	f000 fc43 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800082e:	2308      	movs	r3, #8
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800083e:	2305      	movs	r3, #5
 8000840:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	485e      	ldr	r0, [pc, #376]	; (80009c4 <MX_GPIO_Init+0x2ac>)
 800084a:	f000 fc33 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800084e:	2301      	movs	r3, #1
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000852:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	4619      	mov	r1, r3
 8000862:	485a      	ldr	r0, [pc, #360]	; (80009cc <MX_GPIO_Init+0x2b4>)
 8000864:	f000 fc26 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000868:	2310      	movs	r3, #16
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086c:	2302      	movs	r3, #2
 800086e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000878:	2306      	movs	r3, #6
 800087a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	4852      	ldr	r0, [pc, #328]	; (80009cc <MX_GPIO_Init+0x2b4>)
 8000884:	f000 fc16 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000888:	23e0      	movs	r3, #224	; 0xe0
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000898:	2305      	movs	r3, #5
 800089a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	484a      	ldr	r0, [pc, #296]	; (80009cc <MX_GPIO_Init+0x2b4>)
 80008a4:	f000 fc06 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008a8:	2304      	movs	r3, #4
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ac:	2300      	movs	r3, #0
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	4845      	ldr	r0, [pc, #276]	; (80009d0 <MX_GPIO_Init+0x2b8>)
 80008bc:	f000 fbfa 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d2:	2305      	movs	r3, #5
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	483c      	ldr	r0, [pc, #240]	; (80009d0 <MX_GPIO_Init+0x2b8>)
 80008de:	f000 fbe9 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008e2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008e6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4833      	ldr	r0, [pc, #204]	; (80009c8 <MX_GPIO_Init+0x2b0>)
 80008fc:	f000 fbda 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000900:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000912:	2306      	movs	r3, #6
 8000914:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4829      	ldr	r0, [pc, #164]	; (80009c4 <MX_GPIO_Init+0x2ac>)
 800091e:	f000 fbc9 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000922:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	4825      	ldr	r0, [pc, #148]	; (80009cc <MX_GPIO_Init+0x2b4>)
 8000938:	f000 fbbc 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800093c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800094e:	230a      	movs	r3, #10
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	481c      	ldr	r0, [pc, #112]	; (80009cc <MX_GPIO_Init+0x2b4>)
 800095a:	f000 fbab 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800095e:	2320      	movs	r3, #32
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4815      	ldr	r0, [pc, #84]	; (80009c8 <MX_GPIO_Init+0x2b0>)
 8000972:	f000 fb9f 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000976:	f44f 7310 	mov.w	r3, #576	; 0x240
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800097c:	2312      	movs	r3, #18
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000988:	2304      	movs	r3, #4
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	480f      	ldr	r0, [pc, #60]	; (80009d0 <MX_GPIO_Init+0x2b8>)
 8000994:	f000 fb8e 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000998:	2302      	movs	r3, #2
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800099c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4804      	ldr	r0, [pc, #16]	; (80009c0 <MX_GPIO_Init+0x2a8>)
 80009ae:	f000 fb81 	bl	80010b4 <HAL_GPIO_Init>

}
 80009b2:	bf00      	nop
 80009b4:	3730      	adds	r7, #48	; 0x30
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40021000 	.word	0x40021000
 80009c4:	40020800 	.word	0x40020800
 80009c8:	40020c00 	.word	0x40020c00
 80009cc:	40020000 	.word	0x40020000
 80009d0:	40020400 	.word	0x40020400

080009d4 <manage>:
}

*/

static void manage(const char* msg)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	//xSemaphoreTake( SemaMutex, portMAX_DELAY );
	printf("%s", msg);
 80009dc:	6879      	ldr	r1, [r7, #4]
 80009de:	4803      	ldr	r0, [pc, #12]	; (80009ec <manage+0x18>)
 80009e0:	f004 fa72 	bl	8004ec8 <iprintf>
	//xSemaphoreGive(SemaMutex);


}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	080060ac 	.word	0x080060ac

080009f0 <Task_handler>:
static void Task_handler(void *pvparameters)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]


	const char* msg=(const char*)pvparameters;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	60fb      	str	r3, [r7, #12]


	while(1)
	{

		manage(msg);
 80009fc:	68f8      	ldr	r0, [r7, #12]
 80009fe:	f7ff ffe9 	bl	80009d4 <manage>


		vTaskDelay(rand() & 0XF);
 8000a02:	f004 fb1d 	bl	8005040 <rand>
 8000a06:	4603      	mov	r3, r0
 8000a08:	f003 030f 	and.w	r3, r3, #15
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f002 fd7d 	bl	800350c <vTaskDelay>
		manage(msg);
 8000a12:	e7f3      	b.n	80009fc <Task_handler+0xc>

08000a14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d101      	bne.n	8000a2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a26:	f000 fa43 	bl	8000eb0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40001000 	.word	0x40001000

08000a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3c:	b672      	cpsid	i
}
 8000a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <Error_Handler+0x8>
	...

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a52:	4a0f      	ldr	r2, [pc, #60]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a58:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	4a08      	ldr	r2, [pc, #32]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a74:	6413      	str	r3, [r2, #64]	; 0x40
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800

08000a94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	; 0x28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a19      	ldr	r2, [pc, #100]	; (8000b18 <HAL_UART_MspInit+0x84>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d12b      	bne.n	8000b0e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <HAL_UART_MspInit+0x88>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	4a17      	ldr	r2, [pc, #92]	; (8000b1c <HAL_UART_MspInit+0x88>)
 8000ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <HAL_UART_MspInit+0x88>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <HAL_UART_MspInit+0x88>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a10      	ldr	r2, [pc, #64]	; (8000b1c <HAL_UART_MspInit+0x88>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <HAL_UART_MspInit+0x88>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000aee:	230c      	movs	r3, #12
 8000af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afa:	2303      	movs	r3, #3
 8000afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000afe:	2307      	movs	r3, #7
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	4805      	ldr	r0, [pc, #20]	; (8000b20 <HAL_UART_MspInit+0x8c>)
 8000b0a:	f000 fad3 	bl	80010b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b0e:	bf00      	nop
 8000b10:	3728      	adds	r7, #40	; 0x28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40004400 	.word	0x40004400
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020000 	.word	0x40020000

08000b24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08c      	sub	sp, #48	; 0x30
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000b34:	2200      	movs	r2, #0
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	2036      	movs	r0, #54	; 0x36
 8000b3a:	f000 fa91 	bl	8001060 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b3e:	2036      	movs	r0, #54	; 0x36
 8000b40:	f000 faaa 	bl	8001098 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	4b1f      	ldr	r3, [pc, #124]	; (8000bc8 <HAL_InitTick+0xa4>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4c:	4a1e      	ldr	r2, [pc, #120]	; (8000bc8 <HAL_InitTick+0xa4>)
 8000b4e:	f043 0310 	orr.w	r3, r3, #16
 8000b52:	6413      	str	r3, [r2, #64]	; 0x40
 8000b54:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <HAL_InitTick+0xa4>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b58:	f003 0310 	and.w	r3, r3, #16
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b60:	f107 0210 	add.w	r2, r7, #16
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4611      	mov	r1, r2
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f001 f8cc 	bl	8001d08 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b70:	f001 f8a2 	bl	8001cb8 <HAL_RCC_GetPCLK1Freq>
 8000b74:	4603      	mov	r3, r0
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b7c:	4a13      	ldr	r2, [pc, #76]	; (8000bcc <HAL_InitTick+0xa8>)
 8000b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b82:	0c9b      	lsrs	r3, r3, #18
 8000b84:	3b01      	subs	r3, #1
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <HAL_InitTick+0xac>)
 8000b8a:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <HAL_InitTick+0xb0>)
 8000b8c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <HAL_InitTick+0xac>)
 8000b90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b94:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b96:	4a0e      	ldr	r2, [pc, #56]	; (8000bd0 <HAL_InitTick+0xac>)
 8000b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b9a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <HAL_InitTick+0xac>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <HAL_InitTick+0xac>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000ba8:	4809      	ldr	r0, [pc, #36]	; (8000bd0 <HAL_InitTick+0xac>)
 8000baa:	f001 f8df 	bl	8001d6c <HAL_TIM_Base_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d104      	bne.n	8000bbe <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000bb4:	4806      	ldr	r0, [pc, #24]	; (8000bd0 <HAL_InitTick+0xac>)
 8000bb6:	f001 f933 	bl	8001e20 <HAL_TIM_Base_Start_IT>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	e000      	b.n	8000bc0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3730      	adds	r7, #48	; 0x30
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	431bde83 	.word	0x431bde83
 8000bd0:	20012e58 	.word	0x20012e58
 8000bd4:	40001000 	.word	0x40001000

08000bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <NMI_Handler+0x4>

08000bde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <HardFault_Handler+0x4>

08000be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <MemManage_Handler+0x4>

08000bea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bee:	e7fe      	b.n	8000bee <BusFault_Handler+0x4>

08000bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <UsageFault_Handler+0x4>

08000bf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c08:	4802      	ldr	r0, [pc, #8]	; (8000c14 <TIM6_DAC_IRQHandler+0x10>)
 8000c0a:	f001 f979 	bl	8001f00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20012e58 	.word	0x20012e58

08000c18 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000c22:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <ITM_SendChar+0x48>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a0e      	ldr	r2, [pc, #56]	; (8000c60 <ITM_SendChar+0x48>)
 8000c28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c2c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <ITM_SendChar+0x4c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a0c      	ldr	r2, [pc, #48]	; (8000c64 <ITM_SendChar+0x4c>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000c3a:	bf00      	nop
 8000c3c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d0f8      	beq.n	8000c3c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000c4a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	6013      	str	r3, [r2, #0]
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000edfc 	.word	0xe000edfc
 8000c64:	e0000e00 	.word	0xe0000e00

08000c68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
	return 1;
 8000c6c:	2301      	movs	r3, #1
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <_kill>:

int _kill(int pid, int sig)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c82:	f004 f8e1 	bl	8004e48 <__errno>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2216      	movs	r2, #22
 8000c8a:	601a      	str	r2, [r3, #0]
	return -1;
 8000c8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <_exit>:

void _exit (int status)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff ffe7 	bl	8000c78 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000caa:	e7fe      	b.n	8000caa <_exit+0x12>

08000cac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	e00a      	b.n	8000cd4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cbe:	f3af 8000 	nop.w
 8000cc2:	4601      	mov	r1, r0
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	1c5a      	adds	r2, r3, #1
 8000cc8:	60ba      	str	r2, [r7, #8]
 8000cca:	b2ca      	uxtb	r2, r1
 8000ccc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	697a      	ldr	r2, [r7, #20]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	dbf0      	blt.n	8000cbe <_read+0x12>
	}

return len;
 8000cdc:	687b      	ldr	r3, [r7, #4]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b086      	sub	sp, #24
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	60f8      	str	r0, [r7, #12]
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	e009      	b.n	8000d0c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	1c5a      	adds	r2, r3, #1
 8000cfc:	60ba      	str	r2, [r7, #8]
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff89 	bl	8000c18 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	dbf1      	blt.n	8000cf8 <_write+0x12>
	}
	return len;
 8000d14:	687b      	ldr	r3, [r7, #4]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <_close>:

int _close(int file)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b083      	sub	sp, #12
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
	return -1;
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d46:	605a      	str	r2, [r3, #4]
	return 0;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <_isatty>:

int _isatty(int file)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
	return 1;
 8000d5e:	2301      	movs	r3, #1
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
	return 0;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
	...

08000d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d90:	4a14      	ldr	r2, [pc, #80]	; (8000de4 <_sbrk+0x5c>)
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <_sbrk+0x60>)
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d9c:	4b13      	ldr	r3, [pc, #76]	; (8000dec <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d102      	bne.n	8000daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da4:	4b11      	ldr	r3, [pc, #68]	; (8000dec <_sbrk+0x64>)
 8000da6:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <_sbrk+0x68>)
 8000da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d207      	bcs.n	8000dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db8:	f004 f846 	bl	8004e48 <__errno>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc6:	e009      	b.n	8000ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dce:	4b07      	ldr	r3, [pc, #28]	; (8000dec <_sbrk+0x64>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	4a05      	ldr	r2, [pc, #20]	; (8000dec <_sbrk+0x64>)
 8000dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dda:	68fb      	ldr	r3, [r7, #12]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20020000 	.word	0x20020000
 8000de8:	00000400 	.word	0x00000400
 8000dec:	20000094 	.word	0x20000094
 8000df0:	20012ef8 	.word	0x20012ef8

08000df4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <SystemInit+0x20>)
 8000dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dfe:	4a05      	ldr	r2, [pc, #20]	; (8000e14 <SystemInit+0x20>)
 8000e00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e1c:	480d      	ldr	r0, [pc, #52]	; (8000e54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e1e:	490e      	ldr	r1, [pc, #56]	; (8000e58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e20:	4a0e      	ldr	r2, [pc, #56]	; (8000e5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e24:	e002      	b.n	8000e2c <LoopCopyDataInit>

08000e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2a:	3304      	adds	r3, #4

08000e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e30:	d3f9      	bcc.n	8000e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e32:	4a0b      	ldr	r2, [pc, #44]	; (8000e60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e34:	4c0b      	ldr	r4, [pc, #44]	; (8000e64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e38:	e001      	b.n	8000e3e <LoopFillZerobss>

08000e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e3c:	3204      	adds	r2, #4

08000e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e40:	d3fb      	bcc.n	8000e3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e42:	f7ff ffd7 	bl	8000df4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e46:	f004 f805 	bl	8004e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4a:	f7ff fb8d 	bl	8000568 <main>
  bx  lr    
 8000e4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e58:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000e5c:	0800623c 	.word	0x0800623c
  ldr r2, =_sbss
 8000e60:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000e64:	20012ef4 	.word	0x20012ef4

08000e68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e68:	e7fe      	b.n	8000e68 <ADC_IRQHandler>
	...

08000e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e70:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <HAL_Init+0x40>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a0d      	ldr	r2, [pc, #52]	; (8000eac <HAL_Init+0x40>)
 8000e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <HAL_Init+0x40>)
 8000e82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a07      	ldr	r2, [pc, #28]	; (8000eac <HAL_Init+0x40>)
 8000e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e94:	2003      	movs	r0, #3
 8000e96:	f000 f8d8 	bl	800104a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f7ff fe42 	bl	8000b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea0:	f7ff fdd0 	bl	8000a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40023c00 	.word	0x40023c00

08000eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x20>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ec2:	6013      	str	r3, [r2, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	20012ea0 	.word	0x20012ea0

08000ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return uwTick;
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <HAL_GetTick+0x14>)
 8000ede:	681b      	ldr	r3, [r3, #0]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20012ea0 	.word	0x20012ea0

08000ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f22:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	60d3      	str	r3, [r2, #12]
}
 8000f28:	bf00      	nop
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <__NVIC_GetPriorityGrouping+0x18>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	0a1b      	lsrs	r3, r3, #8
 8000f42:	f003 0307 	and.w	r3, r3, #7
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	db0b      	blt.n	8000f7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	f003 021f 	and.w	r2, r3, #31
 8000f6c:	4907      	ldr	r1, [pc, #28]	; (8000f8c <__NVIC_EnableIRQ+0x38>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	095b      	lsrs	r3, r3, #5
 8000f74:	2001      	movs	r0, #1
 8000f76:	fa00 f202 	lsl.w	r2, r0, r2
 8000f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000e100 	.word	0xe000e100

08000f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	6039      	str	r1, [r7, #0]
 8000f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	db0a      	blt.n	8000fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	490c      	ldr	r1, [pc, #48]	; (8000fdc <__NVIC_SetPriority+0x4c>)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	0112      	lsls	r2, r2, #4
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb8:	e00a      	b.n	8000fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4908      	ldr	r1, [pc, #32]	; (8000fe0 <__NVIC_SetPriority+0x50>)
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	f003 030f 	and.w	r3, r3, #15
 8000fc6:	3b04      	subs	r3, #4
 8000fc8:	0112      	lsls	r2, r2, #4
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	440b      	add	r3, r1
 8000fce:	761a      	strb	r2, [r3, #24]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000e100 	.word	0xe000e100
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b089      	sub	sp, #36	; 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f1c3 0307 	rsb	r3, r3, #7
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	bf28      	it	cs
 8001002:	2304      	movcs	r3, #4
 8001004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3304      	adds	r3, #4
 800100a:	2b06      	cmp	r3, #6
 800100c:	d902      	bls.n	8001014 <NVIC_EncodePriority+0x30>
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3b03      	subs	r3, #3
 8001012:	e000      	b.n	8001016 <NVIC_EncodePriority+0x32>
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	f04f 32ff 	mov.w	r2, #4294967295
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43da      	mvns	r2, r3
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	401a      	ands	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800102c:	f04f 31ff 	mov.w	r1, #4294967295
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	43d9      	mvns	r1, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	4313      	orrs	r3, r2
         );
}
 800103e:	4618      	mov	r0, r3
 8001040:	3724      	adds	r7, #36	; 0x24
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ff4c 	bl	8000ef0 <__NVIC_SetPriorityGrouping>
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
 800106c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001072:	f7ff ff61 	bl	8000f38 <__NVIC_GetPriorityGrouping>
 8001076:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	68b9      	ldr	r1, [r7, #8]
 800107c:	6978      	ldr	r0, [r7, #20]
 800107e:	f7ff ffb1 	bl	8000fe4 <NVIC_EncodePriority>
 8001082:	4602      	mov	r2, r0
 8001084:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001088:	4611      	mov	r1, r2
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff ff80 	bl	8000f90 <__NVIC_SetPriority>
}
 8001090:	bf00      	nop
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff ff54 	bl	8000f54 <__NVIC_EnableIRQ>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b089      	sub	sp, #36	; 0x24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
 80010ce:	e16b      	b.n	80013a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010d0:	2201      	movs	r2, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	697a      	ldr	r2, [r7, #20]
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	f040 815a 	bne.w	80013a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 0303 	and.w	r3, r3, #3
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d005      	beq.n	8001106 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001102:	2b02      	cmp	r3, #2
 8001104:	d130      	bne.n	8001168 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	2203      	movs	r2, #3
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	68da      	ldr	r2, [r3, #12]
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800113c:	2201      	movs	r2, #1
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	091b      	lsrs	r3, r3, #4
 8001152:	f003 0201 	and.w	r2, r3, #1
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 0303 	and.w	r3, r3, #3
 8001170:	2b03      	cmp	r3, #3
 8001172:	d017      	beq.n	80011a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	2203      	movs	r2, #3
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	689a      	ldr	r2, [r3, #8]
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 0303 	and.w	r3, r3, #3
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d123      	bne.n	80011f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	08da      	lsrs	r2, r3, #3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3208      	adds	r2, #8
 80011b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	f003 0307 	and.w	r3, r3, #7
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	220f      	movs	r2, #15
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	691a      	ldr	r2, [r3, #16]
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	08da      	lsrs	r2, r3, #3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3208      	adds	r2, #8
 80011f2:	69b9      	ldr	r1, [r7, #24]
 80011f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	2203      	movs	r2, #3
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 0203 	and.w	r2, r3, #3
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001234:	2b00      	cmp	r3, #0
 8001236:	f000 80b4 	beq.w	80013a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4b60      	ldr	r3, [pc, #384]	; (80013c0 <HAL_GPIO_Init+0x30c>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001242:	4a5f      	ldr	r2, [pc, #380]	; (80013c0 <HAL_GPIO_Init+0x30c>)
 8001244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001248:	6453      	str	r3, [r2, #68]	; 0x44
 800124a:	4b5d      	ldr	r3, [pc, #372]	; (80013c0 <HAL_GPIO_Init+0x30c>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001256:	4a5b      	ldr	r2, [pc, #364]	; (80013c4 <HAL_GPIO_Init+0x310>)
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	089b      	lsrs	r3, r3, #2
 800125c:	3302      	adds	r3, #2
 800125e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	220f      	movs	r2, #15
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a52      	ldr	r2, [pc, #328]	; (80013c8 <HAL_GPIO_Init+0x314>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d02b      	beq.n	80012da <HAL_GPIO_Init+0x226>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a51      	ldr	r2, [pc, #324]	; (80013cc <HAL_GPIO_Init+0x318>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d025      	beq.n	80012d6 <HAL_GPIO_Init+0x222>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a50      	ldr	r2, [pc, #320]	; (80013d0 <HAL_GPIO_Init+0x31c>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d01f      	beq.n	80012d2 <HAL_GPIO_Init+0x21e>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a4f      	ldr	r2, [pc, #316]	; (80013d4 <HAL_GPIO_Init+0x320>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d019      	beq.n	80012ce <HAL_GPIO_Init+0x21a>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a4e      	ldr	r2, [pc, #312]	; (80013d8 <HAL_GPIO_Init+0x324>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d013      	beq.n	80012ca <HAL_GPIO_Init+0x216>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a4d      	ldr	r2, [pc, #308]	; (80013dc <HAL_GPIO_Init+0x328>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d00d      	beq.n	80012c6 <HAL_GPIO_Init+0x212>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a4c      	ldr	r2, [pc, #304]	; (80013e0 <HAL_GPIO_Init+0x32c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d007      	beq.n	80012c2 <HAL_GPIO_Init+0x20e>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a4b      	ldr	r2, [pc, #300]	; (80013e4 <HAL_GPIO_Init+0x330>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d101      	bne.n	80012be <HAL_GPIO_Init+0x20a>
 80012ba:	2307      	movs	r3, #7
 80012bc:	e00e      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012be:	2308      	movs	r3, #8
 80012c0:	e00c      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012c2:	2306      	movs	r3, #6
 80012c4:	e00a      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012c6:	2305      	movs	r3, #5
 80012c8:	e008      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012ca:	2304      	movs	r3, #4
 80012cc:	e006      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012ce:	2303      	movs	r3, #3
 80012d0:	e004      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012d2:	2302      	movs	r3, #2
 80012d4:	e002      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012d6:	2301      	movs	r3, #1
 80012d8:	e000      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012da:	2300      	movs	r3, #0
 80012dc:	69fa      	ldr	r2, [r7, #28]
 80012de:	f002 0203 	and.w	r2, r2, #3
 80012e2:	0092      	lsls	r2, r2, #2
 80012e4:	4093      	lsls	r3, r2
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012ec:	4935      	ldr	r1, [pc, #212]	; (80013c4 <HAL_GPIO_Init+0x310>)
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	089b      	lsrs	r3, r3, #2
 80012f2:	3302      	adds	r3, #2
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012fa:	4b3b      	ldr	r3, [pc, #236]	; (80013e8 <HAL_GPIO_Init+0x334>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800131e:	4a32      	ldr	r2, [pc, #200]	; (80013e8 <HAL_GPIO_Init+0x334>)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001324:	4b30      	ldr	r3, [pc, #192]	; (80013e8 <HAL_GPIO_Init+0x334>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001348:	4a27      	ldr	r2, [pc, #156]	; (80013e8 <HAL_GPIO_Init+0x334>)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800134e:	4b26      	ldr	r3, [pc, #152]	; (80013e8 <HAL_GPIO_Init+0x334>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	43db      	mvns	r3, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4013      	ands	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001372:	4a1d      	ldr	r2, [pc, #116]	; (80013e8 <HAL_GPIO_Init+0x334>)
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001378:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <HAL_GPIO_Init+0x334>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	43db      	mvns	r3, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800139c:	4a12      	ldr	r2, [pc, #72]	; (80013e8 <HAL_GPIO_Init+0x334>)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3301      	adds	r3, #1
 80013a6:	61fb      	str	r3, [r7, #28]
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	2b0f      	cmp	r3, #15
 80013ac:	f67f ae90 	bls.w	80010d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	3724      	adds	r7, #36	; 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40013800 	.word	0x40013800
 80013c8:	40020000 	.word	0x40020000
 80013cc:	40020400 	.word	0x40020400
 80013d0:	40020800 	.word	0x40020800
 80013d4:	40020c00 	.word	0x40020c00
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40021400 	.word	0x40021400
 80013e0:	40021800 	.word	0x40021800
 80013e4:	40021c00 	.word	0x40021c00
 80013e8:	40013c00 	.word	0x40013c00

080013ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	807b      	strh	r3, [r7, #2]
 80013f8:	4613      	mov	r3, r2
 80013fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013fc:	787b      	ldrb	r3, [r7, #1]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001402:	887a      	ldrh	r2, [r7, #2]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001408:	e003      	b.n	8001412 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800140a:	887b      	ldrh	r3, [r7, #2]
 800140c:	041a      	lsls	r2, r3, #16
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	619a      	str	r2, [r3, #24]
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
	...

08001420 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e264      	b.n	80018fc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	2b00      	cmp	r3, #0
 800143c:	d075      	beq.n	800152a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800143e:	4ba3      	ldr	r3, [pc, #652]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 030c 	and.w	r3, r3, #12
 8001446:	2b04      	cmp	r3, #4
 8001448:	d00c      	beq.n	8001464 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800144a:	4ba0      	ldr	r3, [pc, #640]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001452:	2b08      	cmp	r3, #8
 8001454:	d112      	bne.n	800147c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001456:	4b9d      	ldr	r3, [pc, #628]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800145e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001462:	d10b      	bne.n	800147c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001464:	4b99      	ldr	r3, [pc, #612]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d05b      	beq.n	8001528 <HAL_RCC_OscConfig+0x108>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d157      	bne.n	8001528 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e23f      	b.n	80018fc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001484:	d106      	bne.n	8001494 <HAL_RCC_OscConfig+0x74>
 8001486:	4b91      	ldr	r3, [pc, #580]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a90      	ldr	r2, [pc, #576]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 800148c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	e01d      	b.n	80014d0 <HAL_RCC_OscConfig+0xb0>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800149c:	d10c      	bne.n	80014b8 <HAL_RCC_OscConfig+0x98>
 800149e:	4b8b      	ldr	r3, [pc, #556]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a8a      	ldr	r2, [pc, #552]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 80014a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	4b88      	ldr	r3, [pc, #544]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a87      	ldr	r2, [pc, #540]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 80014b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	e00b      	b.n	80014d0 <HAL_RCC_OscConfig+0xb0>
 80014b8:	4b84      	ldr	r3, [pc, #528]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a83      	ldr	r2, [pc, #524]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 80014be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	4b81      	ldr	r3, [pc, #516]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a80      	ldr	r2, [pc, #512]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 80014ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d013      	beq.n	8001500 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d8:	f7ff fcfe 	bl	8000ed8 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014e0:	f7ff fcfa 	bl	8000ed8 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b64      	cmp	r3, #100	; 0x64
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e204      	b.n	80018fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f2:	4b76      	ldr	r3, [pc, #472]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f0      	beq.n	80014e0 <HAL_RCC_OscConfig+0xc0>
 80014fe:	e014      	b.n	800152a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001500:	f7ff fcea 	bl	8000ed8 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001508:	f7ff fce6 	bl	8000ed8 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b64      	cmp	r3, #100	; 0x64
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e1f0      	b.n	80018fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151a:	4b6c      	ldr	r3, [pc, #432]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f0      	bne.n	8001508 <HAL_RCC_OscConfig+0xe8>
 8001526:	e000      	b.n	800152a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d063      	beq.n	80015fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001536:	4b65      	ldr	r3, [pc, #404]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 030c 	and.w	r3, r3, #12
 800153e:	2b00      	cmp	r3, #0
 8001540:	d00b      	beq.n	800155a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001542:	4b62      	ldr	r3, [pc, #392]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800154a:	2b08      	cmp	r3, #8
 800154c:	d11c      	bne.n	8001588 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800154e:	4b5f      	ldr	r3, [pc, #380]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d116      	bne.n	8001588 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800155a:	4b5c      	ldr	r3, [pc, #368]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d005      	beq.n	8001572 <HAL_RCC_OscConfig+0x152>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d001      	beq.n	8001572 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e1c4      	b.n	80018fc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001572:	4b56      	ldr	r3, [pc, #344]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	4952      	ldr	r1, [pc, #328]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 8001582:	4313      	orrs	r3, r2
 8001584:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001586:	e03a      	b.n	80015fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d020      	beq.n	80015d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001590:	4b4f      	ldr	r3, [pc, #316]	; (80016d0 <HAL_RCC_OscConfig+0x2b0>)
 8001592:	2201      	movs	r2, #1
 8001594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001596:	f7ff fc9f 	bl	8000ed8 <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800159e:	f7ff fc9b 	bl	8000ed8 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e1a5      	b.n	80018fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b0:	4b46      	ldr	r3, [pc, #280]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0f0      	beq.n	800159e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015bc:	4b43      	ldr	r3, [pc, #268]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	4940      	ldr	r1, [pc, #256]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	600b      	str	r3, [r1, #0]
 80015d0:	e015      	b.n	80015fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015d2:	4b3f      	ldr	r3, [pc, #252]	; (80016d0 <HAL_RCC_OscConfig+0x2b0>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d8:	f7ff fc7e 	bl	8000ed8 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015e0:	f7ff fc7a 	bl	8000ed8 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e184      	b.n	80018fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f2:	4b36      	ldr	r3, [pc, #216]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	2b00      	cmp	r3, #0
 8001608:	d030      	beq.n	800166c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d016      	beq.n	8001640 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001612:	4b30      	ldr	r3, [pc, #192]	; (80016d4 <HAL_RCC_OscConfig+0x2b4>)
 8001614:	2201      	movs	r2, #1
 8001616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001618:	f7ff fc5e 	bl	8000ed8 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001620:	f7ff fc5a 	bl	8000ed8 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e164      	b.n	80018fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001632:	4b26      	ldr	r3, [pc, #152]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 8001634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0f0      	beq.n	8001620 <HAL_RCC_OscConfig+0x200>
 800163e:	e015      	b.n	800166c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001640:	4b24      	ldr	r3, [pc, #144]	; (80016d4 <HAL_RCC_OscConfig+0x2b4>)
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001646:	f7ff fc47 	bl	8000ed8 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800164e:	f7ff fc43 	bl	8000ed8 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e14d      	b.n	80018fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001660:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 8001662:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1f0      	bne.n	800164e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	2b00      	cmp	r3, #0
 8001676:	f000 80a0 	beq.w	80017ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800167a:	2300      	movs	r3, #0
 800167c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800167e:	4b13      	ldr	r3, [pc, #76]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10f      	bne.n	80016aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	4a0e      	ldr	r2, [pc, #56]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 8001694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001698:	6413      	str	r3, [r2, #64]	; 0x40
 800169a:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <HAL_RCC_OscConfig+0x2ac>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016a6:	2301      	movs	r3, #1
 80016a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016aa:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <HAL_RCC_OscConfig+0x2b8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d121      	bne.n	80016fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016b6:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <HAL_RCC_OscConfig+0x2b8>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a07      	ldr	r2, [pc, #28]	; (80016d8 <HAL_RCC_OscConfig+0x2b8>)
 80016bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016c2:	f7ff fc09 	bl	8000ed8 <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c8:	e011      	b.n	80016ee <HAL_RCC_OscConfig+0x2ce>
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800
 80016d0:	42470000 	.word	0x42470000
 80016d4:	42470e80 	.word	0x42470e80
 80016d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016dc:	f7ff fbfc 	bl	8000ed8 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e106      	b.n	80018fc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ee:	4b85      	ldr	r3, [pc, #532]	; (8001904 <HAL_RCC_OscConfig+0x4e4>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d106      	bne.n	8001710 <HAL_RCC_OscConfig+0x2f0>
 8001702:	4b81      	ldr	r3, [pc, #516]	; (8001908 <HAL_RCC_OscConfig+0x4e8>)
 8001704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001706:	4a80      	ldr	r2, [pc, #512]	; (8001908 <HAL_RCC_OscConfig+0x4e8>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6713      	str	r3, [r2, #112]	; 0x70
 800170e:	e01c      	b.n	800174a <HAL_RCC_OscConfig+0x32a>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	2b05      	cmp	r3, #5
 8001716:	d10c      	bne.n	8001732 <HAL_RCC_OscConfig+0x312>
 8001718:	4b7b      	ldr	r3, [pc, #492]	; (8001908 <HAL_RCC_OscConfig+0x4e8>)
 800171a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171c:	4a7a      	ldr	r2, [pc, #488]	; (8001908 <HAL_RCC_OscConfig+0x4e8>)
 800171e:	f043 0304 	orr.w	r3, r3, #4
 8001722:	6713      	str	r3, [r2, #112]	; 0x70
 8001724:	4b78      	ldr	r3, [pc, #480]	; (8001908 <HAL_RCC_OscConfig+0x4e8>)
 8001726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001728:	4a77      	ldr	r2, [pc, #476]	; (8001908 <HAL_RCC_OscConfig+0x4e8>)
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	6713      	str	r3, [r2, #112]	; 0x70
 8001730:	e00b      	b.n	800174a <HAL_RCC_OscConfig+0x32a>
 8001732:	4b75      	ldr	r3, [pc, #468]	; (8001908 <HAL_RCC_OscConfig+0x4e8>)
 8001734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001736:	4a74      	ldr	r2, [pc, #464]	; (8001908 <HAL_RCC_OscConfig+0x4e8>)
 8001738:	f023 0301 	bic.w	r3, r3, #1
 800173c:	6713      	str	r3, [r2, #112]	; 0x70
 800173e:	4b72      	ldr	r3, [pc, #456]	; (8001908 <HAL_RCC_OscConfig+0x4e8>)
 8001740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001742:	4a71      	ldr	r2, [pc, #452]	; (8001908 <HAL_RCC_OscConfig+0x4e8>)
 8001744:	f023 0304 	bic.w	r3, r3, #4
 8001748:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d015      	beq.n	800177e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001752:	f7ff fbc1 	bl	8000ed8 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001758:	e00a      	b.n	8001770 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800175a:	f7ff fbbd 	bl	8000ed8 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	f241 3288 	movw	r2, #5000	; 0x1388
 8001768:	4293      	cmp	r3, r2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e0c5      	b.n	80018fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001770:	4b65      	ldr	r3, [pc, #404]	; (8001908 <HAL_RCC_OscConfig+0x4e8>)
 8001772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0ee      	beq.n	800175a <HAL_RCC_OscConfig+0x33a>
 800177c:	e014      	b.n	80017a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800177e:	f7ff fbab 	bl	8000ed8 <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001784:	e00a      	b.n	800179c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001786:	f7ff fba7 	bl	8000ed8 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	f241 3288 	movw	r2, #5000	; 0x1388
 8001794:	4293      	cmp	r3, r2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e0af      	b.n	80018fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800179c:	4b5a      	ldr	r3, [pc, #360]	; (8001908 <HAL_RCC_OscConfig+0x4e8>)
 800179e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1ee      	bne.n	8001786 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017a8:	7dfb      	ldrb	r3, [r7, #23]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d105      	bne.n	80017ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ae:	4b56      	ldr	r3, [pc, #344]	; (8001908 <HAL_RCC_OscConfig+0x4e8>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	4a55      	ldr	r2, [pc, #340]	; (8001908 <HAL_RCC_OscConfig+0x4e8>)
 80017b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 809b 	beq.w	80018fa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017c4:	4b50      	ldr	r3, [pc, #320]	; (8001908 <HAL_RCC_OscConfig+0x4e8>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f003 030c 	and.w	r3, r3, #12
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	d05c      	beq.n	800188a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d141      	bne.n	800185c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d8:	4b4c      	ldr	r3, [pc, #304]	; (800190c <HAL_RCC_OscConfig+0x4ec>)
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017de:	f7ff fb7b 	bl	8000ed8 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e6:	f7ff fb77 	bl	8000ed8 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e081      	b.n	80018fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f8:	4b43      	ldr	r3, [pc, #268]	; (8001908 <HAL_RCC_OscConfig+0x4e8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1f0      	bne.n	80017e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69da      	ldr	r2, [r3, #28]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	431a      	orrs	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	019b      	lsls	r3, r3, #6
 8001814:	431a      	orrs	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181a:	085b      	lsrs	r3, r3, #1
 800181c:	3b01      	subs	r3, #1
 800181e:	041b      	lsls	r3, r3, #16
 8001820:	431a      	orrs	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001826:	061b      	lsls	r3, r3, #24
 8001828:	4937      	ldr	r1, [pc, #220]	; (8001908 <HAL_RCC_OscConfig+0x4e8>)
 800182a:	4313      	orrs	r3, r2
 800182c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800182e:	4b37      	ldr	r3, [pc, #220]	; (800190c <HAL_RCC_OscConfig+0x4ec>)
 8001830:	2201      	movs	r2, #1
 8001832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001834:	f7ff fb50 	bl	8000ed8 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800183c:	f7ff fb4c 	bl	8000ed8 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e056      	b.n	80018fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800184e:	4b2e      	ldr	r3, [pc, #184]	; (8001908 <HAL_RCC_OscConfig+0x4e8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d0f0      	beq.n	800183c <HAL_RCC_OscConfig+0x41c>
 800185a:	e04e      	b.n	80018fa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800185c:	4b2b      	ldr	r3, [pc, #172]	; (800190c <HAL_RCC_OscConfig+0x4ec>)
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001862:	f7ff fb39 	bl	8000ed8 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800186a:	f7ff fb35 	bl	8000ed8 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e03f      	b.n	80018fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800187c:	4b22      	ldr	r3, [pc, #136]	; (8001908 <HAL_RCC_OscConfig+0x4e8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1f0      	bne.n	800186a <HAL_RCC_OscConfig+0x44a>
 8001888:	e037      	b.n	80018fa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d101      	bne.n	8001896 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e032      	b.n	80018fc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001896:	4b1c      	ldr	r3, [pc, #112]	; (8001908 <HAL_RCC_OscConfig+0x4e8>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d028      	beq.n	80018f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d121      	bne.n	80018f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018bc:	429a      	cmp	r2, r3
 80018be:	d11a      	bne.n	80018f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018c6:	4013      	ands	r3, r2
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018cc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d111      	bne.n	80018f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018dc:	085b      	lsrs	r3, r3, #1
 80018de:	3b01      	subs	r3, #1
 80018e0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d107      	bne.n	80018f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d001      	beq.n	80018fa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e000      	b.n	80018fc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40007000 	.word	0x40007000
 8001908:	40023800 	.word	0x40023800
 800190c:	42470060 	.word	0x42470060

08001910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0cc      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001924:	4b68      	ldr	r3, [pc, #416]	; (8001ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0307 	and.w	r3, r3, #7
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d90c      	bls.n	800194c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001932:	4b65      	ldr	r3, [pc, #404]	; (8001ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800193a:	4b63      	ldr	r3, [pc, #396]	; (8001ac8 <HAL_RCC_ClockConfig+0x1b8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	429a      	cmp	r2, r3
 8001946:	d001      	beq.n	800194c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e0b8      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d020      	beq.n	800199a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	2b00      	cmp	r3, #0
 8001962:	d005      	beq.n	8001970 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001964:	4b59      	ldr	r3, [pc, #356]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	4a58      	ldr	r2, [pc, #352]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800196e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0308 	and.w	r3, r3, #8
 8001978:	2b00      	cmp	r3, #0
 800197a:	d005      	beq.n	8001988 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800197c:	4b53      	ldr	r3, [pc, #332]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	4a52      	ldr	r2, [pc, #328]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001986:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001988:	4b50      	ldr	r3, [pc, #320]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	494d      	ldr	r1, [pc, #308]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	4313      	orrs	r3, r2
 8001998:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d044      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d107      	bne.n	80019be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ae:	4b47      	ldr	r3, [pc, #284]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d119      	bne.n	80019ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e07f      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d003      	beq.n	80019ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d107      	bne.n	80019de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ce:	4b3f      	ldr	r3, [pc, #252]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d109      	bne.n	80019ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e06f      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019de:	4b3b      	ldr	r3, [pc, #236]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e067      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ee:	4b37      	ldr	r3, [pc, #220]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f023 0203 	bic.w	r2, r3, #3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	4934      	ldr	r1, [pc, #208]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a00:	f7ff fa6a 	bl	8000ed8 <HAL_GetTick>
 8001a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a06:	e00a      	b.n	8001a1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a08:	f7ff fa66 	bl	8000ed8 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e04f      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1e:	4b2b      	ldr	r3, [pc, #172]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 020c 	and.w	r2, r3, #12
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d1eb      	bne.n	8001a08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a30:	4b25      	ldr	r3, [pc, #148]	; (8001ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0307 	and.w	r3, r3, #7
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d20c      	bcs.n	8001a58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3e:	4b22      	ldr	r3, [pc, #136]	; (8001ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a46:	4b20      	ldr	r3, [pc, #128]	; (8001ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d001      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e032      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d008      	beq.n	8001a76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a64:	4b19      	ldr	r3, [pc, #100]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	4916      	ldr	r1, [pc, #88]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d009      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a82:	4b12      	ldr	r3, [pc, #72]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	490e      	ldr	r1, [pc, #56]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a96:	f000 f821 	bl	8001adc <HAL_RCC_GetSysClockFreq>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	091b      	lsrs	r3, r3, #4
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	490a      	ldr	r1, [pc, #40]	; (8001ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa8:	5ccb      	ldrb	r3, [r1, r3]
 8001aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8001aae:	4a09      	ldr	r2, [pc, #36]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff f834 	bl	8000b24 <HAL_InitTick>

  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40023c00 	.word	0x40023c00
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	080060c8 	.word	0x080060c8
 8001ad4:	20000000 	.word	0x20000000
 8001ad8:	20000004 	.word	0x20000004

08001adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001adc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ae0:	b084      	sub	sp, #16
 8001ae2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	607b      	str	r3, [r7, #4]
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	2300      	movs	r3, #0
 8001aee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001af4:	4b67      	ldr	r3, [pc, #412]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 030c 	and.w	r3, r3, #12
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	d00d      	beq.n	8001b1c <HAL_RCC_GetSysClockFreq+0x40>
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	f200 80bd 	bhi.w	8001c80 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d002      	beq.n	8001b10 <HAL_RCC_GetSysClockFreq+0x34>
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d003      	beq.n	8001b16 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b0e:	e0b7      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b10:	4b61      	ldr	r3, [pc, #388]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b12:	60bb      	str	r3, [r7, #8]
       break;
 8001b14:	e0b7      	b.n	8001c86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b16:	4b61      	ldr	r3, [pc, #388]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001b18:	60bb      	str	r3, [r7, #8]
      break;
 8001b1a:	e0b4      	b.n	8001c86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b1c:	4b5d      	ldr	r3, [pc, #372]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b24:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b26:	4b5b      	ldr	r3, [pc, #364]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d04d      	beq.n	8001bce <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b32:	4b58      	ldr	r3, [pc, #352]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	099b      	lsrs	r3, r3, #6
 8001b38:	461a      	mov	r2, r3
 8001b3a:	f04f 0300 	mov.w	r3, #0
 8001b3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b42:	f04f 0100 	mov.w	r1, #0
 8001b46:	ea02 0800 	and.w	r8, r2, r0
 8001b4a:	ea03 0901 	and.w	r9, r3, r1
 8001b4e:	4640      	mov	r0, r8
 8001b50:	4649      	mov	r1, r9
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	014b      	lsls	r3, r1, #5
 8001b5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b60:	0142      	lsls	r2, r0, #5
 8001b62:	4610      	mov	r0, r2
 8001b64:	4619      	mov	r1, r3
 8001b66:	ebb0 0008 	subs.w	r0, r0, r8
 8001b6a:	eb61 0109 	sbc.w	r1, r1, r9
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	f04f 0300 	mov.w	r3, #0
 8001b76:	018b      	lsls	r3, r1, #6
 8001b78:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b7c:	0182      	lsls	r2, r0, #6
 8001b7e:	1a12      	subs	r2, r2, r0
 8001b80:	eb63 0301 	sbc.w	r3, r3, r1
 8001b84:	f04f 0000 	mov.w	r0, #0
 8001b88:	f04f 0100 	mov.w	r1, #0
 8001b8c:	00d9      	lsls	r1, r3, #3
 8001b8e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b92:	00d0      	lsls	r0, r2, #3
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	eb12 0208 	adds.w	r2, r2, r8
 8001b9c:	eb43 0309 	adc.w	r3, r3, r9
 8001ba0:	f04f 0000 	mov.w	r0, #0
 8001ba4:	f04f 0100 	mov.w	r1, #0
 8001ba8:	0259      	lsls	r1, r3, #9
 8001baa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001bae:	0250      	lsls	r0, r2, #9
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	f04f 0300 	mov.w	r3, #0
 8001bc0:	f7fe fb56 	bl	8000270 <__aeabi_uldivmod>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4613      	mov	r3, r2
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	e04a      	b.n	8001c64 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bce:	4b31      	ldr	r3, [pc, #196]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	099b      	lsrs	r3, r3, #6
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	f04f 0300 	mov.w	r3, #0
 8001bda:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001bde:	f04f 0100 	mov.w	r1, #0
 8001be2:	ea02 0400 	and.w	r4, r2, r0
 8001be6:	ea03 0501 	and.w	r5, r3, r1
 8001bea:	4620      	mov	r0, r4
 8001bec:	4629      	mov	r1, r5
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	014b      	lsls	r3, r1, #5
 8001bf8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001bfc:	0142      	lsls	r2, r0, #5
 8001bfe:	4610      	mov	r0, r2
 8001c00:	4619      	mov	r1, r3
 8001c02:	1b00      	subs	r0, r0, r4
 8001c04:	eb61 0105 	sbc.w	r1, r1, r5
 8001c08:	f04f 0200 	mov.w	r2, #0
 8001c0c:	f04f 0300 	mov.w	r3, #0
 8001c10:	018b      	lsls	r3, r1, #6
 8001c12:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c16:	0182      	lsls	r2, r0, #6
 8001c18:	1a12      	subs	r2, r2, r0
 8001c1a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c1e:	f04f 0000 	mov.w	r0, #0
 8001c22:	f04f 0100 	mov.w	r1, #0
 8001c26:	00d9      	lsls	r1, r3, #3
 8001c28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c2c:	00d0      	lsls	r0, r2, #3
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	1912      	adds	r2, r2, r4
 8001c34:	eb45 0303 	adc.w	r3, r5, r3
 8001c38:	f04f 0000 	mov.w	r0, #0
 8001c3c:	f04f 0100 	mov.w	r1, #0
 8001c40:	0299      	lsls	r1, r3, #10
 8001c42:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001c46:	0290      	lsls	r0, r2, #10
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4610      	mov	r0, r2
 8001c4e:	4619      	mov	r1, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	461a      	mov	r2, r3
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	f7fe fb0a 	bl	8000270 <__aeabi_uldivmod>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	4613      	mov	r3, r2
 8001c62:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	0c1b      	lsrs	r3, r3, #16
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	3301      	adds	r3, #1
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7c:	60bb      	str	r3, [r7, #8]
      break;
 8001c7e:	e002      	b.n	8001c86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c80:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001c82:	60bb      	str	r3, [r7, #8]
      break;
 8001c84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c86:	68bb      	ldr	r3, [r7, #8]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c92:	bf00      	nop
 8001c94:	40023800 	.word	0x40023800
 8001c98:	00f42400 	.word	0x00f42400
 8001c9c:	007a1200 	.word	0x007a1200

08001ca0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ca4:	4b03      	ldr	r3, [pc, #12]	; (8001cb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	20000000 	.word	0x20000000

08001cb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cbc:	f7ff fff0 	bl	8001ca0 <HAL_RCC_GetHCLKFreq>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	0a9b      	lsrs	r3, r3, #10
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	4903      	ldr	r1, [pc, #12]	; (8001cdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cce:	5ccb      	ldrb	r3, [r1, r3]
 8001cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	080060d8 	.word	0x080060d8

08001ce0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ce4:	f7ff ffdc 	bl	8001ca0 <HAL_RCC_GetHCLKFreq>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	0b5b      	lsrs	r3, r3, #13
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	4903      	ldr	r1, [pc, #12]	; (8001d04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cf6:	5ccb      	ldrb	r3, [r1, r3]
 8001cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40023800 	.word	0x40023800
 8001d04:	080060d8 	.word	0x080060d8

08001d08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	220f      	movs	r2, #15
 8001d16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d18:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <HAL_RCC_GetClockConfig+0x5c>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 0203 	and.w	r2, r3, #3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d24:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <HAL_RCC_GetClockConfig+0x5c>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <HAL_RCC_GetClockConfig+0x5c>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_RCC_GetClockConfig+0x5c>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	08db      	lsrs	r3, r3, #3
 8001d42:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d4a:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <HAL_RCC_GetClockConfig+0x60>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0207 	and.w	r2, r3, #7
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	601a      	str	r2, [r3, #0]
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40023c00 	.word	0x40023c00

08001d6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e041      	b.n	8001e02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d106      	bne.n	8001d98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f839 	bl	8001e0a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3304      	adds	r3, #4
 8001da8:	4619      	mov	r1, r3
 8001daa:	4610      	mov	r0, r2
 8001dac:	f000 f9d8 	bl	8002160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
	...

08001e20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d001      	beq.n	8001e38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e04e      	b.n	8001ed6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68da      	ldr	r2, [r3, #12]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f042 0201 	orr.w	r2, r2, #1
 8001e4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a23      	ldr	r2, [pc, #140]	; (8001ee4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d022      	beq.n	8001ea0 <HAL_TIM_Base_Start_IT+0x80>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e62:	d01d      	beq.n	8001ea0 <HAL_TIM_Base_Start_IT+0x80>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a1f      	ldr	r2, [pc, #124]	; (8001ee8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d018      	beq.n	8001ea0 <HAL_TIM_Base_Start_IT+0x80>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a1e      	ldr	r2, [pc, #120]	; (8001eec <HAL_TIM_Base_Start_IT+0xcc>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d013      	beq.n	8001ea0 <HAL_TIM_Base_Start_IT+0x80>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a1c      	ldr	r2, [pc, #112]	; (8001ef0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d00e      	beq.n	8001ea0 <HAL_TIM_Base_Start_IT+0x80>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a1b      	ldr	r2, [pc, #108]	; (8001ef4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d009      	beq.n	8001ea0 <HAL_TIM_Base_Start_IT+0x80>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a19      	ldr	r2, [pc, #100]	; (8001ef8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d004      	beq.n	8001ea0 <HAL_TIM_Base_Start_IT+0x80>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a18      	ldr	r2, [pc, #96]	; (8001efc <HAL_TIM_Base_Start_IT+0xdc>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d111      	bne.n	8001ec4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2b06      	cmp	r3, #6
 8001eb0:	d010      	beq.n	8001ed4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f042 0201 	orr.w	r2, r2, #1
 8001ec0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec2:	e007      	b.n	8001ed4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0201 	orr.w	r2, r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40010000 	.word	0x40010000
 8001ee8:	40000400 	.word	0x40000400
 8001eec:	40000800 	.word	0x40000800
 8001ef0:	40000c00 	.word	0x40000c00
 8001ef4:	40010400 	.word	0x40010400
 8001ef8:	40014000 	.word	0x40014000
 8001efc:	40001800 	.word	0x40001800

08001f00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d122      	bne.n	8001f5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d11b      	bne.n	8001f5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0202 	mvn.w	r2, #2
 8001f2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f8ee 	bl	8002124 <HAL_TIM_IC_CaptureCallback>
 8001f48:	e005      	b.n	8001f56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f8e0 	bl	8002110 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f8f1 	bl	8002138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	f003 0304 	and.w	r3, r3, #4
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	d122      	bne.n	8001fb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b04      	cmp	r3, #4
 8001f76:	d11b      	bne.n	8001fb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f06f 0204 	mvn.w	r2, #4
 8001f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2202      	movs	r2, #2
 8001f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f8c4 	bl	8002124 <HAL_TIM_IC_CaptureCallback>
 8001f9c:	e005      	b.n	8001faa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f8b6 	bl	8002110 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f8c7 	bl	8002138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	2b08      	cmp	r3, #8
 8001fbc:	d122      	bne.n	8002004 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f003 0308 	and.w	r3, r3, #8
 8001fc8:	2b08      	cmp	r3, #8
 8001fca:	d11b      	bne.n	8002004 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f06f 0208 	mvn.w	r2, #8
 8001fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2204      	movs	r2, #4
 8001fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	f003 0303 	and.w	r3, r3, #3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f89a 	bl	8002124 <HAL_TIM_IC_CaptureCallback>
 8001ff0:	e005      	b.n	8001ffe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f88c 	bl	8002110 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 f89d 	bl	8002138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	f003 0310 	and.w	r3, r3, #16
 800200e:	2b10      	cmp	r3, #16
 8002010:	d122      	bne.n	8002058 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	f003 0310 	and.w	r3, r3, #16
 800201c:	2b10      	cmp	r3, #16
 800201e:	d11b      	bne.n	8002058 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f06f 0210 	mvn.w	r2, #16
 8002028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2208      	movs	r2, #8
 800202e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f870 	bl	8002124 <HAL_TIM_IC_CaptureCallback>
 8002044:	e005      	b.n	8002052 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f862 	bl	8002110 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 f873 	bl	8002138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b01      	cmp	r3, #1
 8002064:	d10e      	bne.n	8002084 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b01      	cmp	r3, #1
 8002072:	d107      	bne.n	8002084 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0201 	mvn.w	r2, #1
 800207c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7fe fcc8 	bl	8000a14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800208e:	2b80      	cmp	r3, #128	; 0x80
 8002090:	d10e      	bne.n	80020b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800209c:	2b80      	cmp	r3, #128	; 0x80
 800209e:	d107      	bne.n	80020b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f902 	bl	80022b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ba:	2b40      	cmp	r3, #64	; 0x40
 80020bc:	d10e      	bne.n	80020dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c8:	2b40      	cmp	r3, #64	; 0x40
 80020ca:	d107      	bne.n	80020dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f838 	bl	800214c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	f003 0320 	and.w	r3, r3, #32
 80020e6:	2b20      	cmp	r3, #32
 80020e8:	d10e      	bne.n	8002108 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	f003 0320 	and.w	r3, r3, #32
 80020f4:	2b20      	cmp	r3, #32
 80020f6:	d107      	bne.n	8002108 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f06f 0220 	mvn.w	r2, #32
 8002100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f8cc 	bl	80022a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002108:	bf00      	nop
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a40      	ldr	r2, [pc, #256]	; (8002274 <TIM_Base_SetConfig+0x114>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d013      	beq.n	80021a0 <TIM_Base_SetConfig+0x40>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800217e:	d00f      	beq.n	80021a0 <TIM_Base_SetConfig+0x40>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a3d      	ldr	r2, [pc, #244]	; (8002278 <TIM_Base_SetConfig+0x118>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d00b      	beq.n	80021a0 <TIM_Base_SetConfig+0x40>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a3c      	ldr	r2, [pc, #240]	; (800227c <TIM_Base_SetConfig+0x11c>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d007      	beq.n	80021a0 <TIM_Base_SetConfig+0x40>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a3b      	ldr	r2, [pc, #236]	; (8002280 <TIM_Base_SetConfig+0x120>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d003      	beq.n	80021a0 <TIM_Base_SetConfig+0x40>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a3a      	ldr	r2, [pc, #232]	; (8002284 <TIM_Base_SetConfig+0x124>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d108      	bne.n	80021b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a2f      	ldr	r2, [pc, #188]	; (8002274 <TIM_Base_SetConfig+0x114>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d02b      	beq.n	8002212 <TIM_Base_SetConfig+0xb2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c0:	d027      	beq.n	8002212 <TIM_Base_SetConfig+0xb2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a2c      	ldr	r2, [pc, #176]	; (8002278 <TIM_Base_SetConfig+0x118>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d023      	beq.n	8002212 <TIM_Base_SetConfig+0xb2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a2b      	ldr	r2, [pc, #172]	; (800227c <TIM_Base_SetConfig+0x11c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d01f      	beq.n	8002212 <TIM_Base_SetConfig+0xb2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a2a      	ldr	r2, [pc, #168]	; (8002280 <TIM_Base_SetConfig+0x120>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d01b      	beq.n	8002212 <TIM_Base_SetConfig+0xb2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a29      	ldr	r2, [pc, #164]	; (8002284 <TIM_Base_SetConfig+0x124>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d017      	beq.n	8002212 <TIM_Base_SetConfig+0xb2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a28      	ldr	r2, [pc, #160]	; (8002288 <TIM_Base_SetConfig+0x128>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d013      	beq.n	8002212 <TIM_Base_SetConfig+0xb2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a27      	ldr	r2, [pc, #156]	; (800228c <TIM_Base_SetConfig+0x12c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d00f      	beq.n	8002212 <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a26      	ldr	r2, [pc, #152]	; (8002290 <TIM_Base_SetConfig+0x130>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d00b      	beq.n	8002212 <TIM_Base_SetConfig+0xb2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a25      	ldr	r2, [pc, #148]	; (8002294 <TIM_Base_SetConfig+0x134>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d007      	beq.n	8002212 <TIM_Base_SetConfig+0xb2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a24      	ldr	r2, [pc, #144]	; (8002298 <TIM_Base_SetConfig+0x138>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d003      	beq.n	8002212 <TIM_Base_SetConfig+0xb2>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a23      	ldr	r2, [pc, #140]	; (800229c <TIM_Base_SetConfig+0x13c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d108      	bne.n	8002224 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002218:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	4313      	orrs	r3, r2
 8002222:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	4313      	orrs	r3, r2
 8002230:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a0a      	ldr	r2, [pc, #40]	; (8002274 <TIM_Base_SetConfig+0x114>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d003      	beq.n	8002258 <TIM_Base_SetConfig+0xf8>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a0c      	ldr	r2, [pc, #48]	; (8002284 <TIM_Base_SetConfig+0x124>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d103      	bne.n	8002260 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	691a      	ldr	r2, [r3, #16]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	615a      	str	r2, [r3, #20]
}
 8002266:	bf00      	nop
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40010000 	.word	0x40010000
 8002278:	40000400 	.word	0x40000400
 800227c:	40000800 	.word	0x40000800
 8002280:	40000c00 	.word	0x40000c00
 8002284:	40010400 	.word	0x40010400
 8002288:	40014000 	.word	0x40014000
 800228c:	40014400 	.word	0x40014400
 8002290:	40014800 	.word	0x40014800
 8002294:	40001800 	.word	0x40001800
 8002298:	40001c00 	.word	0x40001c00
 800229c:	40002000 	.word	0x40002000

080022a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e03f      	b.n	800235a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d106      	bne.n	80022f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7fe fbd0 	bl	8000a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2224      	movs	r2, #36	; 0x24
 80022f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800230a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 f829 	bl	8002364 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	691a      	ldr	r2, [r3, #16]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002320:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695a      	ldr	r2, [r3, #20]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002330:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68da      	ldr	r2, [r3, #12]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002340:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2220      	movs	r2, #32
 800234c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2220      	movs	r2, #32
 8002354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
	...

08002364 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002368:	b09f      	sub	sp, #124	; 0x7c
 800236a:	af00      	add	r7, sp, #0
 800236c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800236e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800237a:	68d9      	ldr	r1, [r3, #12]
 800237c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	ea40 0301 	orr.w	r3, r0, r1
 8002384:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	431a      	orrs	r2, r3
 8002390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	431a      	orrs	r2, r3
 8002396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	4313      	orrs	r3, r2
 800239c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800239e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80023a8:	f021 010c 	bic.w	r1, r1, #12
 80023ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023b2:	430b      	orrs	r3, r1
 80023b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80023c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023c2:	6999      	ldr	r1, [r3, #24]
 80023c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	ea40 0301 	orr.w	r3, r0, r1
 80023cc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	4bc5      	ldr	r3, [pc, #788]	; (80026e8 <UART_SetConfig+0x384>)
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d004      	beq.n	80023e2 <UART_SetConfig+0x7e>
 80023d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	4bc3      	ldr	r3, [pc, #780]	; (80026ec <UART_SetConfig+0x388>)
 80023de:	429a      	cmp	r2, r3
 80023e0:	d103      	bne.n	80023ea <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023e2:	f7ff fc7d 	bl	8001ce0 <HAL_RCC_GetPCLK2Freq>
 80023e6:	6778      	str	r0, [r7, #116]	; 0x74
 80023e8:	e002      	b.n	80023f0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023ea:	f7ff fc65 	bl	8001cb8 <HAL_RCC_GetPCLK1Freq>
 80023ee:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023f8:	f040 80b6 	bne.w	8002568 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023fe:	461c      	mov	r4, r3
 8002400:	f04f 0500 	mov.w	r5, #0
 8002404:	4622      	mov	r2, r4
 8002406:	462b      	mov	r3, r5
 8002408:	1891      	adds	r1, r2, r2
 800240a:	6439      	str	r1, [r7, #64]	; 0x40
 800240c:	415b      	adcs	r3, r3
 800240e:	647b      	str	r3, [r7, #68]	; 0x44
 8002410:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002414:	1912      	adds	r2, r2, r4
 8002416:	eb45 0303 	adc.w	r3, r5, r3
 800241a:	f04f 0000 	mov.w	r0, #0
 800241e:	f04f 0100 	mov.w	r1, #0
 8002422:	00d9      	lsls	r1, r3, #3
 8002424:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002428:	00d0      	lsls	r0, r2, #3
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	1911      	adds	r1, r2, r4
 8002430:	6639      	str	r1, [r7, #96]	; 0x60
 8002432:	416b      	adcs	r3, r5
 8002434:	667b      	str	r3, [r7, #100]	; 0x64
 8002436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	461a      	mov	r2, r3
 800243c:	f04f 0300 	mov.w	r3, #0
 8002440:	1891      	adds	r1, r2, r2
 8002442:	63b9      	str	r1, [r7, #56]	; 0x38
 8002444:	415b      	adcs	r3, r3
 8002446:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002448:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800244c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002450:	f7fd ff0e 	bl	8000270 <__aeabi_uldivmod>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	4ba5      	ldr	r3, [pc, #660]	; (80026f0 <UART_SetConfig+0x38c>)
 800245a:	fba3 2302 	umull	r2, r3, r3, r2
 800245e:	095b      	lsrs	r3, r3, #5
 8002460:	011e      	lsls	r6, r3, #4
 8002462:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002464:	461c      	mov	r4, r3
 8002466:	f04f 0500 	mov.w	r5, #0
 800246a:	4622      	mov	r2, r4
 800246c:	462b      	mov	r3, r5
 800246e:	1891      	adds	r1, r2, r2
 8002470:	6339      	str	r1, [r7, #48]	; 0x30
 8002472:	415b      	adcs	r3, r3
 8002474:	637b      	str	r3, [r7, #52]	; 0x34
 8002476:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800247a:	1912      	adds	r2, r2, r4
 800247c:	eb45 0303 	adc.w	r3, r5, r3
 8002480:	f04f 0000 	mov.w	r0, #0
 8002484:	f04f 0100 	mov.w	r1, #0
 8002488:	00d9      	lsls	r1, r3, #3
 800248a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800248e:	00d0      	lsls	r0, r2, #3
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	1911      	adds	r1, r2, r4
 8002496:	65b9      	str	r1, [r7, #88]	; 0x58
 8002498:	416b      	adcs	r3, r5
 800249a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800249c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	461a      	mov	r2, r3
 80024a2:	f04f 0300 	mov.w	r3, #0
 80024a6:	1891      	adds	r1, r2, r2
 80024a8:	62b9      	str	r1, [r7, #40]	; 0x28
 80024aa:	415b      	adcs	r3, r3
 80024ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024b2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80024b6:	f7fd fedb 	bl	8000270 <__aeabi_uldivmod>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	4b8c      	ldr	r3, [pc, #560]	; (80026f0 <UART_SetConfig+0x38c>)
 80024c0:	fba3 1302 	umull	r1, r3, r3, r2
 80024c4:	095b      	lsrs	r3, r3, #5
 80024c6:	2164      	movs	r1, #100	; 0x64
 80024c8:	fb01 f303 	mul.w	r3, r1, r3
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	3332      	adds	r3, #50	; 0x32
 80024d2:	4a87      	ldr	r2, [pc, #540]	; (80026f0 <UART_SetConfig+0x38c>)
 80024d4:	fba2 2303 	umull	r2, r3, r2, r3
 80024d8:	095b      	lsrs	r3, r3, #5
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80024e0:	441e      	add	r6, r3
 80024e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024e4:	4618      	mov	r0, r3
 80024e6:	f04f 0100 	mov.w	r1, #0
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	1894      	adds	r4, r2, r2
 80024f0:	623c      	str	r4, [r7, #32]
 80024f2:	415b      	adcs	r3, r3
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
 80024f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024fa:	1812      	adds	r2, r2, r0
 80024fc:	eb41 0303 	adc.w	r3, r1, r3
 8002500:	f04f 0400 	mov.w	r4, #0
 8002504:	f04f 0500 	mov.w	r5, #0
 8002508:	00dd      	lsls	r5, r3, #3
 800250a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800250e:	00d4      	lsls	r4, r2, #3
 8002510:	4622      	mov	r2, r4
 8002512:	462b      	mov	r3, r5
 8002514:	1814      	adds	r4, r2, r0
 8002516:	653c      	str	r4, [r7, #80]	; 0x50
 8002518:	414b      	adcs	r3, r1
 800251a:	657b      	str	r3, [r7, #84]	; 0x54
 800251c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	461a      	mov	r2, r3
 8002522:	f04f 0300 	mov.w	r3, #0
 8002526:	1891      	adds	r1, r2, r2
 8002528:	61b9      	str	r1, [r7, #24]
 800252a:	415b      	adcs	r3, r3
 800252c:	61fb      	str	r3, [r7, #28]
 800252e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002532:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002536:	f7fd fe9b 	bl	8000270 <__aeabi_uldivmod>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	4b6c      	ldr	r3, [pc, #432]	; (80026f0 <UART_SetConfig+0x38c>)
 8002540:	fba3 1302 	umull	r1, r3, r3, r2
 8002544:	095b      	lsrs	r3, r3, #5
 8002546:	2164      	movs	r1, #100	; 0x64
 8002548:	fb01 f303 	mul.w	r3, r1, r3
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	3332      	adds	r3, #50	; 0x32
 8002552:	4a67      	ldr	r2, [pc, #412]	; (80026f0 <UART_SetConfig+0x38c>)
 8002554:	fba2 2303 	umull	r2, r3, r2, r3
 8002558:	095b      	lsrs	r3, r3, #5
 800255a:	f003 0207 	and.w	r2, r3, #7
 800255e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4432      	add	r2, r6
 8002564:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002566:	e0b9      	b.n	80026dc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002568:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800256a:	461c      	mov	r4, r3
 800256c:	f04f 0500 	mov.w	r5, #0
 8002570:	4622      	mov	r2, r4
 8002572:	462b      	mov	r3, r5
 8002574:	1891      	adds	r1, r2, r2
 8002576:	6139      	str	r1, [r7, #16]
 8002578:	415b      	adcs	r3, r3
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002580:	1912      	adds	r2, r2, r4
 8002582:	eb45 0303 	adc.w	r3, r5, r3
 8002586:	f04f 0000 	mov.w	r0, #0
 800258a:	f04f 0100 	mov.w	r1, #0
 800258e:	00d9      	lsls	r1, r3, #3
 8002590:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002594:	00d0      	lsls	r0, r2, #3
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	eb12 0804 	adds.w	r8, r2, r4
 800259e:	eb43 0905 	adc.w	r9, r3, r5
 80025a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f04f 0100 	mov.w	r1, #0
 80025ac:	f04f 0200 	mov.w	r2, #0
 80025b0:	f04f 0300 	mov.w	r3, #0
 80025b4:	008b      	lsls	r3, r1, #2
 80025b6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80025ba:	0082      	lsls	r2, r0, #2
 80025bc:	4640      	mov	r0, r8
 80025be:	4649      	mov	r1, r9
 80025c0:	f7fd fe56 	bl	8000270 <__aeabi_uldivmod>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	4b49      	ldr	r3, [pc, #292]	; (80026f0 <UART_SetConfig+0x38c>)
 80025ca:	fba3 2302 	umull	r2, r3, r3, r2
 80025ce:	095b      	lsrs	r3, r3, #5
 80025d0:	011e      	lsls	r6, r3, #4
 80025d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025d4:	4618      	mov	r0, r3
 80025d6:	f04f 0100 	mov.w	r1, #0
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	1894      	adds	r4, r2, r2
 80025e0:	60bc      	str	r4, [r7, #8]
 80025e2:	415b      	adcs	r3, r3
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025ea:	1812      	adds	r2, r2, r0
 80025ec:	eb41 0303 	adc.w	r3, r1, r3
 80025f0:	f04f 0400 	mov.w	r4, #0
 80025f4:	f04f 0500 	mov.w	r5, #0
 80025f8:	00dd      	lsls	r5, r3, #3
 80025fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80025fe:	00d4      	lsls	r4, r2, #3
 8002600:	4622      	mov	r2, r4
 8002602:	462b      	mov	r3, r5
 8002604:	1814      	adds	r4, r2, r0
 8002606:	64bc      	str	r4, [r7, #72]	; 0x48
 8002608:	414b      	adcs	r3, r1
 800260a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800260c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	4618      	mov	r0, r3
 8002612:	f04f 0100 	mov.w	r1, #0
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	f04f 0300 	mov.w	r3, #0
 800261e:	008b      	lsls	r3, r1, #2
 8002620:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002624:	0082      	lsls	r2, r0, #2
 8002626:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800262a:	f7fd fe21 	bl	8000270 <__aeabi_uldivmod>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	4b2f      	ldr	r3, [pc, #188]	; (80026f0 <UART_SetConfig+0x38c>)
 8002634:	fba3 1302 	umull	r1, r3, r3, r2
 8002638:	095b      	lsrs	r3, r3, #5
 800263a:	2164      	movs	r1, #100	; 0x64
 800263c:	fb01 f303 	mul.w	r3, r1, r3
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	3332      	adds	r3, #50	; 0x32
 8002646:	4a2a      	ldr	r2, [pc, #168]	; (80026f0 <UART_SetConfig+0x38c>)
 8002648:	fba2 2303 	umull	r2, r3, r2, r3
 800264c:	095b      	lsrs	r3, r3, #5
 800264e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002652:	441e      	add	r6, r3
 8002654:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002656:	4618      	mov	r0, r3
 8002658:	f04f 0100 	mov.w	r1, #0
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	1894      	adds	r4, r2, r2
 8002662:	603c      	str	r4, [r7, #0]
 8002664:	415b      	adcs	r3, r3
 8002666:	607b      	str	r3, [r7, #4]
 8002668:	e9d7 2300 	ldrd	r2, r3, [r7]
 800266c:	1812      	adds	r2, r2, r0
 800266e:	eb41 0303 	adc.w	r3, r1, r3
 8002672:	f04f 0400 	mov.w	r4, #0
 8002676:	f04f 0500 	mov.w	r5, #0
 800267a:	00dd      	lsls	r5, r3, #3
 800267c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002680:	00d4      	lsls	r4, r2, #3
 8002682:	4622      	mov	r2, r4
 8002684:	462b      	mov	r3, r5
 8002686:	eb12 0a00 	adds.w	sl, r2, r0
 800268a:	eb43 0b01 	adc.w	fp, r3, r1
 800268e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	4618      	mov	r0, r3
 8002694:	f04f 0100 	mov.w	r1, #0
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	f04f 0300 	mov.w	r3, #0
 80026a0:	008b      	lsls	r3, r1, #2
 80026a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80026a6:	0082      	lsls	r2, r0, #2
 80026a8:	4650      	mov	r0, sl
 80026aa:	4659      	mov	r1, fp
 80026ac:	f7fd fde0 	bl	8000270 <__aeabi_uldivmod>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	4b0e      	ldr	r3, [pc, #56]	; (80026f0 <UART_SetConfig+0x38c>)
 80026b6:	fba3 1302 	umull	r1, r3, r3, r2
 80026ba:	095b      	lsrs	r3, r3, #5
 80026bc:	2164      	movs	r1, #100	; 0x64
 80026be:	fb01 f303 	mul.w	r3, r1, r3
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	011b      	lsls	r3, r3, #4
 80026c6:	3332      	adds	r3, #50	; 0x32
 80026c8:	4a09      	ldr	r2, [pc, #36]	; (80026f0 <UART_SetConfig+0x38c>)
 80026ca:	fba2 2303 	umull	r2, r3, r2, r3
 80026ce:	095b      	lsrs	r3, r3, #5
 80026d0:	f003 020f 	and.w	r2, r3, #15
 80026d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4432      	add	r2, r6
 80026da:	609a      	str	r2, [r3, #8]
}
 80026dc:	bf00      	nop
 80026de:	377c      	adds	r7, #124	; 0x7c
 80026e0:	46bd      	mov	sp, r7
 80026e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026e6:	bf00      	nop
 80026e8:	40011000 	.word	0x40011000
 80026ec:	40011400 	.word	0x40011400
 80026f0:	51eb851f 	.word	0x51eb851f

080026f4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f103 0208 	add.w	r2, r3, #8
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f04f 32ff 	mov.w	r2, #4294967295
 800270c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f103 0208 	add.w	r2, r3, #8
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f103 0208 	add.w	r2, r3, #8
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800274e:	b480      	push	{r7}
 8002750:	b085      	sub	sp, #20
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
 8002756:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	1c5a      	adds	r2, r3, #1
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	601a      	str	r2, [r3, #0]
}
 800278a:	bf00      	nop
 800278c:	3714      	adds	r7, #20
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002796:	b480      	push	{r7}
 8002798:	b085      	sub	sp, #20
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ac:	d103      	bne.n	80027b6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	e00c      	b.n	80027d0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3308      	adds	r3, #8
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	e002      	b.n	80027c4 <vListInsert+0x2e>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d2f6      	bcs.n	80027be <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	1c5a      	adds	r2, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	601a      	str	r2, [r3, #0]
}
 80027fc:	bf00      	nop
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6892      	ldr	r2, [r2, #8]
 800281e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6852      	ldr	r2, [r2, #4]
 8002828:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	429a      	cmp	r2, r3
 8002832:	d103      	bne.n	800283c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	1e5a      	subs	r2, r3, #1
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10a      	bne.n	8002886 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002874:	f383 8811 	msr	BASEPRI, r3
 8002878:	f3bf 8f6f 	isb	sy
 800287c:	f3bf 8f4f 	dsb	sy
 8002880:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002882:	bf00      	nop
 8002884:	e7fe      	b.n	8002884 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002886:	f001 ffbf 	bl	8004808 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002892:	68f9      	ldr	r1, [r7, #12]
 8002894:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002896:	fb01 f303 	mul.w	r3, r1, r3
 800289a:	441a      	add	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b6:	3b01      	subs	r3, #1
 80028b8:	68f9      	ldr	r1, [r7, #12]
 80028ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028bc:	fb01 f303 	mul.w	r3, r1, r3
 80028c0:	441a      	add	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	22ff      	movs	r2, #255	; 0xff
 80028ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	22ff      	movs	r2, #255	; 0xff
 80028d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d114      	bne.n	8002906 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d01a      	beq.n	800291a <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	3310      	adds	r3, #16
 80028e8:	4618      	mov	r0, r3
 80028ea:	f001 f8b3 	bl	8003a54 <xTaskRemoveFromEventList>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d012      	beq.n	800291a <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80028f4:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <xQueueGenericReset+0xcc>)
 80028f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	f3bf 8f4f 	dsb	sy
 8002900:	f3bf 8f6f 	isb	sy
 8002904:	e009      	b.n	800291a <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	3310      	adds	r3, #16
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff fef2 	bl	80026f4 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	3324      	adds	r3, #36	; 0x24
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff feed 	bl	80026f4 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800291a:	f001 ffa5 	bl	8004868 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800291e:	2301      	movs	r3, #1
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	e000ed04 	.word	0xe000ed04

0800292c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800292c:	b580      	push	{r7, lr}
 800292e:	b08c      	sub	sp, #48	; 0x30
 8002930:	af02      	add	r7, sp, #8
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	4613      	mov	r3, r2
 8002938:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10a      	bne.n	8002956 <xQueueGenericCreate+0x2a>
        __asm volatile
 8002940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002944:	f383 8811 	msr	BASEPRI, r3
 8002948:	f3bf 8f6f 	isb	sy
 800294c:	f3bf 8f4f 	dsb	sy
 8002950:	61bb      	str	r3, [r7, #24]
    }
 8002952:	bf00      	nop
 8002954:	e7fe      	b.n	8002954 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	fb02 f303 	mul.w	r3, r2, r3
 800295e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d006      	beq.n	8002974 <xQueueGenericCreate+0x48>
 8002966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	fbb2 f3f3 	udiv	r3, r2, r3
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	429a      	cmp	r2, r3
 8002972:	d101      	bne.n	8002978 <xQueueGenericCreate+0x4c>
 8002974:	2301      	movs	r3, #1
 8002976:	e000      	b.n	800297a <xQueueGenericCreate+0x4e>
 8002978:	2300      	movs	r3, #0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10a      	bne.n	8002994 <xQueueGenericCreate+0x68>
        __asm volatile
 800297e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002982:	f383 8811 	msr	BASEPRI, r3
 8002986:	f3bf 8f6f 	isb	sy
 800298a:	f3bf 8f4f 	dsb	sy
 800298e:	617b      	str	r3, [r7, #20]
    }
 8002990:	bf00      	nop
 8002992:	e7fe      	b.n	8002992 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800299a:	d90a      	bls.n	80029b2 <xQueueGenericCreate+0x86>
        __asm volatile
 800299c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a0:	f383 8811 	msr	BASEPRI, r3
 80029a4:	f3bf 8f6f 	isb	sy
 80029a8:	f3bf 8f4f 	dsb	sy
 80029ac:	613b      	str	r3, [r7, #16]
    }
 80029ae:	bf00      	nop
 80029b0:	e7fe      	b.n	80029b0 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	3350      	adds	r3, #80	; 0x50
 80029b6:	4618      	mov	r0, r3
 80029b8:	f002 f848 	bl	8004a4c <pvPortMalloc>
 80029bc:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00d      	beq.n	80029e0 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80029c4:	6a3b      	ldr	r3, [r7, #32]
 80029c6:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	3350      	adds	r3, #80	; 0x50
 80029cc:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80029ce:	79fa      	ldrb	r2, [r7, #7]
 80029d0:	6a3b      	ldr	r3, [r7, #32]
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	4613      	mov	r3, r2
 80029d6:	69fa      	ldr	r2, [r7, #28]
 80029d8:	68b9      	ldr	r1, [r7, #8]
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f805 	bl	80029ea <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80029e0:	6a3b      	ldr	r3, [r7, #32]
    }
 80029e2:	4618      	mov	r0, r3
 80029e4:	3728      	adds	r7, #40	; 0x28
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b084      	sub	sp, #16
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	60f8      	str	r0, [r7, #12]
 80029f2:	60b9      	str	r1, [r7, #8]
 80029f4:	607a      	str	r2, [r7, #4]
 80029f6:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d103      	bne.n	8002a06 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	e002      	b.n	8002a0c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a18:	2101      	movs	r1, #1
 8002a1a:	69b8      	ldr	r0, [r7, #24]
 8002a1c:	f7ff ff1e 	bl	800285c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	78fa      	ldrb	r2, [r7, #3]
 8002a24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002a28:	bf00      	nop
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00e      	beq.n	8002a5c <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002a50:	2300      	movs	r3, #0
 8002a52:	2200      	movs	r2, #0
 8002a54:	2100      	movs	r1, #0
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f81c 	bl	8002a94 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8002a5c:	bf00      	nop
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	617b      	str	r3, [r7, #20]
 8002a72:	2300      	movs	r3, #0
 8002a74:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002a76:	79fb      	ldrb	r3, [r7, #7]
 8002a78:	461a      	mov	r2, r3
 8002a7a:	6939      	ldr	r1, [r7, #16]
 8002a7c:	6978      	ldr	r0, [r7, #20]
 8002a7e:	f7ff ff55 	bl	800292c <xQueueGenericCreate>
 8002a82:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f7ff ffd3 	bl	8002a30 <prvInitialiseMutex>

        return xNewQueue;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
    }
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08e      	sub	sp, #56	; 0x38
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
 8002aa0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10a      	bne.n	8002ac6 <xQueueGenericSend+0x32>
        __asm volatile
 8002ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab4:	f383 8811 	msr	BASEPRI, r3
 8002ab8:	f3bf 8f6f 	isb	sy
 8002abc:	f3bf 8f4f 	dsb	sy
 8002ac0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002ac2:	bf00      	nop
 8002ac4:	e7fe      	b.n	8002ac4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d103      	bne.n	8002ad4 <xQueueGenericSend+0x40>
 8002acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <xQueueGenericSend+0x44>
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e000      	b.n	8002ada <xQueueGenericSend+0x46>
 8002ad8:	2300      	movs	r3, #0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10a      	bne.n	8002af4 <xQueueGenericSend+0x60>
        __asm volatile
 8002ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae2:	f383 8811 	msr	BASEPRI, r3
 8002ae6:	f3bf 8f6f 	isb	sy
 8002aea:	f3bf 8f4f 	dsb	sy
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002af0:	bf00      	nop
 8002af2:	e7fe      	b.n	8002af2 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d103      	bne.n	8002b02 <xQueueGenericSend+0x6e>
 8002afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d101      	bne.n	8002b06 <xQueueGenericSend+0x72>
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <xQueueGenericSend+0x74>
 8002b06:	2300      	movs	r3, #0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10a      	bne.n	8002b22 <xQueueGenericSend+0x8e>
        __asm volatile
 8002b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b10:	f383 8811 	msr	BASEPRI, r3
 8002b14:	f3bf 8f6f 	isb	sy
 8002b18:	f3bf 8f4f 	dsb	sy
 8002b1c:	623b      	str	r3, [r7, #32]
    }
 8002b1e:	bf00      	nop
 8002b20:	e7fe      	b.n	8002b20 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b22:	f001 f933 	bl	8003d8c <xTaskGetSchedulerState>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d102      	bne.n	8002b32 <xQueueGenericSend+0x9e>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <xQueueGenericSend+0xa2>
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <xQueueGenericSend+0xa4>
 8002b36:	2300      	movs	r3, #0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10a      	bne.n	8002b52 <xQueueGenericSend+0xbe>
        __asm volatile
 8002b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b40:	f383 8811 	msr	BASEPRI, r3
 8002b44:	f3bf 8f6f 	isb	sy
 8002b48:	f3bf 8f4f 	dsb	sy
 8002b4c:	61fb      	str	r3, [r7, #28]
    }
 8002b4e:	bf00      	nop
 8002b50:	e7fe      	b.n	8002b50 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002b52:	f001 fe59 	bl	8004808 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d302      	bcc.n	8002b68 <xQueueGenericSend+0xd4>
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d129      	bne.n	8002bbc <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	68b9      	ldr	r1, [r7, #8]
 8002b6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b6e:	f000 fa19 	bl	8002fa4 <prvCopyDataToQueue>
 8002b72:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d010      	beq.n	8002b9e <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7e:	3324      	adds	r3, #36	; 0x24
 8002b80:	4618      	mov	r0, r3
 8002b82:	f000 ff67 	bl	8003a54 <xTaskRemoveFromEventList>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d013      	beq.n	8002bb4 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002b8c:	4b3f      	ldr	r3, [pc, #252]	; (8002c8c <xQueueGenericSend+0x1f8>)
 8002b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	f3bf 8f4f 	dsb	sy
 8002b98:	f3bf 8f6f 	isb	sy
 8002b9c:	e00a      	b.n	8002bb4 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d007      	beq.n	8002bb4 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002ba4:	4b39      	ldr	r3, [pc, #228]	; (8002c8c <xQueueGenericSend+0x1f8>)
 8002ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	f3bf 8f4f 	dsb	sy
 8002bb0:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002bb4:	f001 fe58 	bl	8004868 <vPortExitCritical>
                return pdPASS;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e063      	b.n	8002c84 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d103      	bne.n	8002bca <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002bc2:	f001 fe51 	bl	8004868 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	e05c      	b.n	8002c84 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d106      	bne.n	8002bde <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002bd0:	f107 0314 	add.w	r3, r7, #20
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f000 ff9f 	bl	8003b18 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002bde:	f001 fe43 	bl	8004868 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002be2:	f000 fd19 	bl	8003618 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002be6:	f001 fe0f 	bl	8004808 <vPortEnterCritical>
 8002bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bf0:	b25b      	sxtb	r3, r3
 8002bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf6:	d103      	bne.n	8002c00 <xQueueGenericSend+0x16c>
 8002bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c06:	b25b      	sxtb	r3, r3
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0c:	d103      	bne.n	8002c16 <xQueueGenericSend+0x182>
 8002c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c16:	f001 fe27 	bl	8004868 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c1a:	1d3a      	adds	r2, r7, #4
 8002c1c:	f107 0314 	add.w	r3, r7, #20
 8002c20:	4611      	mov	r1, r2
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 ff8e 	bl	8003b44 <xTaskCheckForTimeOut>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d124      	bne.n	8002c78 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c30:	f000 fab0 	bl	8003194 <prvIsQueueFull>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d018      	beq.n	8002c6c <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3c:	3310      	adds	r3, #16
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	4611      	mov	r1, r2
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 feb6 	bl	80039b4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002c48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c4a:	f000 fa3b 	bl	80030c4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002c4e:	f000 fcf1 	bl	8003634 <xTaskResumeAll>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f47f af7c 	bne.w	8002b52 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002c5a:	4b0c      	ldr	r3, [pc, #48]	; (8002c8c <xQueueGenericSend+0x1f8>)
 8002c5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	f3bf 8f4f 	dsb	sy
 8002c66:	f3bf 8f6f 	isb	sy
 8002c6a:	e772      	b.n	8002b52 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002c6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c6e:	f000 fa29 	bl	80030c4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002c72:	f000 fcdf 	bl	8003634 <xTaskResumeAll>
 8002c76:	e76c      	b.n	8002b52 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002c78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c7a:	f000 fa23 	bl	80030c4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002c7e:	f000 fcd9 	bl	8003634 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8002c82:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3738      	adds	r7, #56	; 0x38
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	e000ed04 	.word	0xe000ed04

08002c90 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b090      	sub	sp, #64	; 0x40
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
 8002c9c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10a      	bne.n	8002cbe <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cac:	f383 8811 	msr	BASEPRI, r3
 8002cb0:	f3bf 8f6f 	isb	sy
 8002cb4:	f3bf 8f4f 	dsb	sy
 8002cb8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002cba:	bf00      	nop
 8002cbc:	e7fe      	b.n	8002cbc <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d103      	bne.n	8002ccc <xQueueGenericSendFromISR+0x3c>
 8002cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <xQueueGenericSendFromISR+0x40>
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e000      	b.n	8002cd2 <xQueueGenericSendFromISR+0x42>
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10a      	bne.n	8002cec <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cda:	f383 8811 	msr	BASEPRI, r3
 8002cde:	f3bf 8f6f 	isb	sy
 8002ce2:	f3bf 8f4f 	dsb	sy
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002ce8:	bf00      	nop
 8002cea:	e7fe      	b.n	8002cea <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d103      	bne.n	8002cfa <xQueueGenericSendFromISR+0x6a>
 8002cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d101      	bne.n	8002cfe <xQueueGenericSendFromISR+0x6e>
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <xQueueGenericSendFromISR+0x70>
 8002cfe:	2300      	movs	r3, #0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10a      	bne.n	8002d1a <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d08:	f383 8811 	msr	BASEPRI, r3
 8002d0c:	f3bf 8f6f 	isb	sy
 8002d10:	f3bf 8f4f 	dsb	sy
 8002d14:	623b      	str	r3, [r7, #32]
    }
 8002d16:	bf00      	nop
 8002d18:	e7fe      	b.n	8002d18 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d1a:	f001 fe57 	bl	80049cc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002d1e:	f3ef 8211 	mrs	r2, BASEPRI
 8002d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d26:	f383 8811 	msr	BASEPRI, r3
 8002d2a:	f3bf 8f6f 	isb	sy
 8002d2e:	f3bf 8f4f 	dsb	sy
 8002d32:	61fa      	str	r2, [r7, #28]
 8002d34:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002d36:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d38:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d302      	bcc.n	8002d4c <xQueueGenericSendFromISR+0xbc>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d13e      	bne.n	8002dca <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	68b9      	ldr	r1, [r7, #8]
 8002d60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002d62:	f000 f91f 	bl	8002fa4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002d66:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6e:	d112      	bne.n	8002d96 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d025      	beq.n	8002dc4 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d7a:	3324      	adds	r3, #36	; 0x24
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f000 fe69 	bl	8003a54 <xTaskRemoveFromEventList>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d01d      	beq.n	8002dc4 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d01a      	beq.n	8002dc4 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	e016      	b.n	8002dc4 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002d96:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002d9a:	2b7f      	cmp	r3, #127	; 0x7f
 8002d9c:	d10a      	bne.n	8002db4 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8002d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da2:	f383 8811 	msr	BASEPRI, r3
 8002da6:	f3bf 8f6f 	isb	sy
 8002daa:	f3bf 8f4f 	dsb	sy
 8002dae:	617b      	str	r3, [r7, #20]
    }
 8002db0:	bf00      	nop
 8002db2:	e7fe      	b.n	8002db2 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002db4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002db8:	3301      	adds	r3, #1
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	b25a      	sxtb	r2, r3
 8002dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002dc8:	e001      	b.n	8002dce <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd0:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002dd8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3740      	adds	r7, #64	; 0x40
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08c      	sub	sp, #48	; 0x30
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002df0:	2300      	movs	r3, #0
 8002df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10a      	bne.n	8002e14 <xQueueReceive+0x30>
        __asm volatile
 8002dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e02:	f383 8811 	msr	BASEPRI, r3
 8002e06:	f3bf 8f6f 	isb	sy
 8002e0a:	f3bf 8f4f 	dsb	sy
 8002e0e:	623b      	str	r3, [r7, #32]
    }
 8002e10:	bf00      	nop
 8002e12:	e7fe      	b.n	8002e12 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d103      	bne.n	8002e22 <xQueueReceive+0x3e>
 8002e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <xQueueReceive+0x42>
 8002e22:	2301      	movs	r3, #1
 8002e24:	e000      	b.n	8002e28 <xQueueReceive+0x44>
 8002e26:	2300      	movs	r3, #0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10a      	bne.n	8002e42 <xQueueReceive+0x5e>
        __asm volatile
 8002e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e30:	f383 8811 	msr	BASEPRI, r3
 8002e34:	f3bf 8f6f 	isb	sy
 8002e38:	f3bf 8f4f 	dsb	sy
 8002e3c:	61fb      	str	r3, [r7, #28]
    }
 8002e3e:	bf00      	nop
 8002e40:	e7fe      	b.n	8002e40 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e42:	f000 ffa3 	bl	8003d8c <xTaskGetSchedulerState>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d102      	bne.n	8002e52 <xQueueReceive+0x6e>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <xQueueReceive+0x72>
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <xQueueReceive+0x74>
 8002e56:	2300      	movs	r3, #0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10a      	bne.n	8002e72 <xQueueReceive+0x8e>
        __asm volatile
 8002e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e60:	f383 8811 	msr	BASEPRI, r3
 8002e64:	f3bf 8f6f 	isb	sy
 8002e68:	f3bf 8f4f 	dsb	sy
 8002e6c:	61bb      	str	r3, [r7, #24]
    }
 8002e6e:	bf00      	nop
 8002e70:	e7fe      	b.n	8002e70 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002e72:	f001 fcc9 	bl	8004808 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d01f      	beq.n	8002ec2 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e82:	68b9      	ldr	r1, [r7, #8]
 8002e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e86:	f000 f8f7 	bl	8003078 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	1e5a      	subs	r2, r3, #1
 8002e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e90:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00f      	beq.n	8002eba <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9c:	3310      	adds	r3, #16
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 fdd8 	bl	8003a54 <xTaskRemoveFromEventList>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d007      	beq.n	8002eba <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002eaa:	4b3d      	ldr	r3, [pc, #244]	; (8002fa0 <xQueueReceive+0x1bc>)
 8002eac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	f3bf 8f4f 	dsb	sy
 8002eb6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002eba:	f001 fcd5 	bl	8004868 <vPortExitCritical>
                return pdPASS;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e069      	b.n	8002f96 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d103      	bne.n	8002ed0 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002ec8:	f001 fcce 	bl	8004868 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	e062      	b.n	8002f96 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d106      	bne.n	8002ee4 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002ed6:	f107 0310 	add.w	r3, r7, #16
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 fe1c 	bl	8003b18 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002ee4:	f001 fcc0 	bl	8004868 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002ee8:	f000 fb96 	bl	8003618 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002eec:	f001 fc8c 	bl	8004808 <vPortEnterCritical>
 8002ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ef6:	b25b      	sxtb	r3, r3
 8002ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efc:	d103      	bne.n	8002f06 <xQueueReceive+0x122>
 8002efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f0c:	b25b      	sxtb	r3, r3
 8002f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f12:	d103      	bne.n	8002f1c <xQueueReceive+0x138>
 8002f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f1c:	f001 fca4 	bl	8004868 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f20:	1d3a      	adds	r2, r7, #4
 8002f22:	f107 0310 	add.w	r3, r7, #16
 8002f26:	4611      	mov	r1, r2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f000 fe0b 	bl	8003b44 <xTaskCheckForTimeOut>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d123      	bne.n	8002f7c <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f36:	f000 f917 	bl	8003168 <prvIsQueueEmpty>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d017      	beq.n	8002f70 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f42:	3324      	adds	r3, #36	; 0x24
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	4611      	mov	r1, r2
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 fd33 	bl	80039b4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002f4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f50:	f000 f8b8 	bl	80030c4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002f54:	f000 fb6e 	bl	8003634 <xTaskResumeAll>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d189      	bne.n	8002e72 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002f5e:	4b10      	ldr	r3, [pc, #64]	; (8002fa0 <xQueueReceive+0x1bc>)
 8002f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	f3bf 8f4f 	dsb	sy
 8002f6a:	f3bf 8f6f 	isb	sy
 8002f6e:	e780      	b.n	8002e72 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002f70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f72:	f000 f8a7 	bl	80030c4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002f76:	f000 fb5d 	bl	8003634 <xTaskResumeAll>
 8002f7a:	e77a      	b.n	8002e72 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002f7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f7e:	f000 f8a1 	bl	80030c4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002f82:	f000 fb57 	bl	8003634 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f88:	f000 f8ee 	bl	8003168 <prvIsQueueEmpty>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f43f af6f 	beq.w	8002e72 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002f94:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3730      	adds	r7, #48	; 0x30
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	e000ed04 	.word	0xe000ed04

08002fa4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10d      	bne.n	8002fde <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d14d      	bne.n	8003066 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 fefa 	bl	8003dc8 <xTaskPriorityDisinherit>
 8002fd4:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	609a      	str	r2, [r3, #8]
 8002fdc:	e043      	b.n	8003066 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d119      	bne.n	8003018 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6858      	ldr	r0, [r3, #4]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	461a      	mov	r2, r3
 8002fee:	68b9      	ldr	r1, [r7, #8]
 8002ff0:	f001 ff54 	bl	8004e9c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	441a      	add	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	429a      	cmp	r2, r3
 800300c:	d32b      	bcc.n	8003066 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	605a      	str	r2, [r3, #4]
 8003016:	e026      	b.n	8003066 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	68d8      	ldr	r0, [r3, #12]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	461a      	mov	r2, r3
 8003022:	68b9      	ldr	r1, [r7, #8]
 8003024:	f001 ff3a 	bl	8004e9c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	425b      	negs	r3, r3
 8003032:	441a      	add	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	68da      	ldr	r2, [r3, #12]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	429a      	cmp	r2, r3
 8003042:	d207      	bcs.n	8003054 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	425b      	negs	r3, r3
 800304e:	441a      	add	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b02      	cmp	r3, #2
 8003058:	d105      	bne.n	8003066 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d002      	beq.n	8003066 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	3b01      	subs	r3, #1
 8003064:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800306e:	697b      	ldr	r3, [r7, #20]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	2b00      	cmp	r3, #0
 8003088:	d018      	beq.n	80030bc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	441a      	add	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68da      	ldr	r2, [r3, #12]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d303      	bcc.n	80030ac <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68d9      	ldr	r1, [r3, #12]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b4:	461a      	mov	r2, r3
 80030b6:	6838      	ldr	r0, [r7, #0]
 80030b8:	f001 fef0 	bl	8004e9c <memcpy>
    }
}
 80030bc:	bf00      	nop
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80030cc:	f001 fb9c 	bl	8004808 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030d6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80030d8:	e011      	b.n	80030fe <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d012      	beq.n	8003108 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3324      	adds	r3, #36	; 0x24
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 fcb4 	bl	8003a54 <xTaskRemoveFromEventList>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80030f2:	f000 fd8d 	bl	8003c10 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80030f6:	7bfb      	ldrb	r3, [r7, #15]
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80030fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003102:	2b00      	cmp	r3, #0
 8003104:	dce9      	bgt.n	80030da <prvUnlockQueue+0x16>
 8003106:	e000      	b.n	800310a <prvUnlockQueue+0x46>
                        break;
 8003108:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	22ff      	movs	r2, #255	; 0xff
 800310e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003112:	f001 fba9 	bl	8004868 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003116:	f001 fb77 	bl	8004808 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003120:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003122:	e011      	b.n	8003148 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d012      	beq.n	8003152 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3310      	adds	r3, #16
 8003130:	4618      	mov	r0, r3
 8003132:	f000 fc8f 	bl	8003a54 <xTaskRemoveFromEventList>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800313c:	f000 fd68 	bl	8003c10 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003140:	7bbb      	ldrb	r3, [r7, #14]
 8003142:	3b01      	subs	r3, #1
 8003144:	b2db      	uxtb	r3, r3
 8003146:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003148:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800314c:	2b00      	cmp	r3, #0
 800314e:	dce9      	bgt.n	8003124 <prvUnlockQueue+0x60>
 8003150:	e000      	b.n	8003154 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003152:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	22ff      	movs	r2, #255	; 0xff
 8003158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800315c:	f001 fb84 	bl	8004868 <vPortExitCritical>
}
 8003160:	bf00      	nop
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003170:	f001 fb4a 	bl	8004808 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003178:	2b00      	cmp	r3, #0
 800317a:	d102      	bne.n	8003182 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800317c:	2301      	movs	r3, #1
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	e001      	b.n	8003186 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003182:	2300      	movs	r3, #0
 8003184:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003186:	f001 fb6f 	bl	8004868 <vPortExitCritical>

    return xReturn;
 800318a:	68fb      	ldr	r3, [r7, #12]
}
 800318c:	4618      	mov	r0, r3
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800319c:	f001 fb34 	bl	8004808 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d102      	bne.n	80031b2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80031ac:	2301      	movs	r3, #1
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	e001      	b.n	80031b6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80031b2:	2300      	movs	r3, #0
 80031b4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80031b6:	f001 fb57 	bl	8004868 <vPortExitCritical>

    return xReturn;
 80031ba:	68fb      	ldr	r3, [r7, #12]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031ce:	2300      	movs	r3, #0
 80031d0:	60fb      	str	r3, [r7, #12]
 80031d2:	e014      	b.n	80031fe <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80031d4:	4a0f      	ldr	r2, [pc, #60]	; (8003214 <vQueueAddToRegistry+0x50>)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10b      	bne.n	80031f8 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80031e0:	490c      	ldr	r1, [pc, #48]	; (8003214 <vQueueAddToRegistry+0x50>)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80031ea:	4a0a      	ldr	r2, [pc, #40]	; (8003214 <vQueueAddToRegistry+0x50>)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	4413      	add	r3, r2
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80031f6:	e006      	b.n	8003206 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	3301      	adds	r3, #1
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2b07      	cmp	r3, #7
 8003202:	d9e7      	bls.n	80031d4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003204:	bf00      	nop
 8003206:	bf00      	nop
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	20012ea4 	.word	0x20012ea4

08003218 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003228:	f001 faee 	bl	8004808 <vPortEnterCritical>
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003232:	b25b      	sxtb	r3, r3
 8003234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003238:	d103      	bne.n	8003242 <vQueueWaitForMessageRestricted+0x2a>
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003248:	b25b      	sxtb	r3, r3
 800324a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324e:	d103      	bne.n	8003258 <vQueueWaitForMessageRestricted+0x40>
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003258:	f001 fb06 	bl	8004868 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003260:	2b00      	cmp	r3, #0
 8003262:	d106      	bne.n	8003272 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	3324      	adds	r3, #36	; 0x24
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	68b9      	ldr	r1, [r7, #8]
 800326c:	4618      	mov	r0, r3
 800326e:	f000 fbc5 	bl	80039fc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003272:	6978      	ldr	r0, [r7, #20]
 8003274:	f7ff ff26 	bl	80030c4 <prvUnlockQueue>
    }
 8003278:	bf00      	nop
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003280:	b580      	push	{r7, lr}
 8003282:	b08c      	sub	sp, #48	; 0x30
 8003284:	af04      	add	r7, sp, #16
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	4613      	mov	r3, r2
 800328e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003290:	88fb      	ldrh	r3, [r7, #6]
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4618      	mov	r0, r3
 8003296:	f001 fbd9 	bl	8004a4c <pvPortMalloc>
 800329a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00e      	beq.n	80032c0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80032a2:	2058      	movs	r0, #88	; 0x58
 80032a4:	f001 fbd2 	bl	8004a4c <pvPortMalloc>
 80032a8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	631a      	str	r2, [r3, #48]	; 0x30
 80032b6:	e005      	b.n	80032c4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80032b8:	6978      	ldr	r0, [r7, #20]
 80032ba:	f001 fca7 	bl	8004c0c <vPortFree>
 80032be:	e001      	b.n	80032c4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80032c0:	2300      	movs	r3, #0
 80032c2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d013      	beq.n	80032f2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80032ca:	88fa      	ldrh	r2, [r7, #6]
 80032cc:	2300      	movs	r3, #0
 80032ce:	9303      	str	r3, [sp, #12]
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	9302      	str	r3, [sp, #8]
 80032d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d6:	9301      	str	r3, [sp, #4]
 80032d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	68b9      	ldr	r1, [r7, #8]
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 f80e 	bl	8003302 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80032e6:	69f8      	ldr	r0, [r7, #28]
 80032e8:	f000 f8a2 	bl	8003430 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80032ec:	2301      	movs	r3, #1
 80032ee:	61bb      	str	r3, [r7, #24]
 80032f0:	e002      	b.n	80032f8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80032f2:	f04f 33ff 	mov.w	r3, #4294967295
 80032f6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80032f8:	69bb      	ldr	r3, [r7, #24]
    }
 80032fa:	4618      	mov	r0, r3
 80032fc:	3720      	adds	r7, #32
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b088      	sub	sp, #32
 8003306:	af00      	add	r7, sp, #0
 8003308:	60f8      	str	r0, [r7, #12]
 800330a:	60b9      	str	r1, [r7, #8]
 800330c:	607a      	str	r2, [r7, #4]
 800330e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003312:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	461a      	mov	r2, r3
 800331a:	21a5      	movs	r1, #165	; 0xa5
 800331c:	f001 fdcc 	bl	8004eb8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003322:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800332a:	3b01      	subs	r3, #1
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	f023 0307 	bic.w	r3, r3, #7
 8003338:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00a      	beq.n	800335a <prvInitialiseNewTask+0x58>
        __asm volatile
 8003344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003348:	f383 8811 	msr	BASEPRI, r3
 800334c:	f3bf 8f6f 	isb	sy
 8003350:	f3bf 8f4f 	dsb	sy
 8003354:	617b      	str	r3, [r7, #20]
    }
 8003356:	bf00      	nop
 8003358:	e7fe      	b.n	8003358 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d01f      	beq.n	80033a0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003360:	2300      	movs	r3, #0
 8003362:	61fb      	str	r3, [r7, #28]
 8003364:	e012      	b.n	800338c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	4413      	add	r3, r2
 800336c:	7819      	ldrb	r1, [r3, #0]
 800336e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	4413      	add	r3, r2
 8003374:	3334      	adds	r3, #52	; 0x34
 8003376:	460a      	mov	r2, r1
 8003378:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	4413      	add	r3, r2
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d006      	beq.n	8003394 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	3301      	adds	r3, #1
 800338a:	61fb      	str	r3, [r7, #28]
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	2b09      	cmp	r3, #9
 8003390:	d9e9      	bls.n	8003366 <prvInitialiseNewTask+0x64>
 8003392:	e000      	b.n	8003396 <prvInitialiseNewTask+0x94>
            {
                break;
 8003394:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800339e:	e003      	b.n	80033a8 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80033a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80033a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	d901      	bls.n	80033b2 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80033ae:	2304      	movs	r3, #4
 80033b0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80033b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033b6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80033b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033bc:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80033be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c0:	2200      	movs	r2, #0
 80033c2:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80033c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c6:	3304      	adds	r3, #4
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff f9b3 	bl	8002734 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80033ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d0:	3318      	adds	r3, #24
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff f9ae 	bl	8002734 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80033d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033dc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e0:	f1c3 0205 	rsb	r2, r3, #5
 80033e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80033e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033ec:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80033ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f0:	3350      	adds	r3, #80	; 0x50
 80033f2:	2204      	movs	r2, #4
 80033f4:	2100      	movs	r1, #0
 80033f6:	4618      	mov	r0, r3
 80033f8:	f001 fd5e 	bl	8004eb8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80033fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fe:	3354      	adds	r3, #84	; 0x54
 8003400:	2201      	movs	r2, #1
 8003402:	2100      	movs	r1, #0
 8003404:	4618      	mov	r0, r3
 8003406:	f001 fd57 	bl	8004eb8 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	68f9      	ldr	r1, [r7, #12]
 800340e:	69b8      	ldr	r0, [r7, #24]
 8003410:	f001 f8cc 	bl	80045ac <pxPortInitialiseStack>
 8003414:	4602      	mov	r2, r0
 8003416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003418:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800341a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341c:	2b00      	cmp	r3, #0
 800341e:	d002      	beq.n	8003426 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003422:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003424:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003426:	bf00      	nop
 8003428:	3720      	adds	r7, #32
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
	...

08003430 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003438:	f001 f9e6 	bl	8004808 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800343c:	4b2c      	ldr	r3, [pc, #176]	; (80034f0 <prvAddNewTaskToReadyList+0xc0>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	3301      	adds	r3, #1
 8003442:	4a2b      	ldr	r2, [pc, #172]	; (80034f0 <prvAddNewTaskToReadyList+0xc0>)
 8003444:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003446:	4b2b      	ldr	r3, [pc, #172]	; (80034f4 <prvAddNewTaskToReadyList+0xc4>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d109      	bne.n	8003462 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800344e:	4a29      	ldr	r2, [pc, #164]	; (80034f4 <prvAddNewTaskToReadyList+0xc4>)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003454:	4b26      	ldr	r3, [pc, #152]	; (80034f0 <prvAddNewTaskToReadyList+0xc0>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d110      	bne.n	800347e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800345c:	f000 fbfc 	bl	8003c58 <prvInitialiseTaskLists>
 8003460:	e00d      	b.n	800347e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003462:	4b25      	ldr	r3, [pc, #148]	; (80034f8 <prvAddNewTaskToReadyList+0xc8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d109      	bne.n	800347e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800346a:	4b22      	ldr	r3, [pc, #136]	; (80034f4 <prvAddNewTaskToReadyList+0xc4>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003474:	429a      	cmp	r2, r3
 8003476:	d802      	bhi.n	800347e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003478:	4a1e      	ldr	r2, [pc, #120]	; (80034f4 <prvAddNewTaskToReadyList+0xc4>)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800347e:	4b1f      	ldr	r3, [pc, #124]	; (80034fc <prvAddNewTaskToReadyList+0xcc>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	3301      	adds	r3, #1
 8003484:	4a1d      	ldr	r2, [pc, #116]	; (80034fc <prvAddNewTaskToReadyList+0xcc>)
 8003486:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003488:	4b1c      	ldr	r3, [pc, #112]	; (80034fc <prvAddNewTaskToReadyList+0xcc>)
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003494:	2201      	movs	r2, #1
 8003496:	409a      	lsls	r2, r3
 8003498:	4b19      	ldr	r3, [pc, #100]	; (8003500 <prvAddNewTaskToReadyList+0xd0>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4313      	orrs	r3, r2
 800349e:	4a18      	ldr	r2, [pc, #96]	; (8003500 <prvAddNewTaskToReadyList+0xd0>)
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a6:	4613      	mov	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4a15      	ldr	r2, [pc, #84]	; (8003504 <prvAddNewTaskToReadyList+0xd4>)
 80034b0:	441a      	add	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	3304      	adds	r3, #4
 80034b6:	4619      	mov	r1, r3
 80034b8:	4610      	mov	r0, r2
 80034ba:	f7ff f948 	bl	800274e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80034be:	f001 f9d3 	bl	8004868 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80034c2:	4b0d      	ldr	r3, [pc, #52]	; (80034f8 <prvAddNewTaskToReadyList+0xc8>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00e      	beq.n	80034e8 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80034ca:	4b0a      	ldr	r3, [pc, #40]	; (80034f4 <prvAddNewTaskToReadyList+0xc4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d207      	bcs.n	80034e8 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80034d8:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <prvAddNewTaskToReadyList+0xd8>)
 80034da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	f3bf 8f4f 	dsb	sy
 80034e4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80034e8:	bf00      	nop
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	20000170 	.word	0x20000170
 80034f4:	20000098 	.word	0x20000098
 80034f8:	2000017c 	.word	0x2000017c
 80034fc:	2000018c 	.word	0x2000018c
 8003500:	20000178 	.word	0x20000178
 8003504:	2000009c 	.word	0x2000009c
 8003508:	e000ed04 	.word	0xe000ed04

0800350c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003514:	2300      	movs	r3, #0
 8003516:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d017      	beq.n	800354e <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800351e:	4b13      	ldr	r3, [pc, #76]	; (800356c <vTaskDelay+0x60>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00a      	beq.n	800353c <vTaskDelay+0x30>
        __asm volatile
 8003526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352a:	f383 8811 	msr	BASEPRI, r3
 800352e:	f3bf 8f6f 	isb	sy
 8003532:	f3bf 8f4f 	dsb	sy
 8003536:	60bb      	str	r3, [r7, #8]
    }
 8003538:	bf00      	nop
 800353a:	e7fe      	b.n	800353a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800353c:	f000 f86c 	bl	8003618 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003540:	2100      	movs	r1, #0
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 fcba 	bl	8003ebc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003548:	f000 f874 	bl	8003634 <xTaskResumeAll>
 800354c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d107      	bne.n	8003564 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8003554:	4b06      	ldr	r3, [pc, #24]	; (8003570 <vTaskDelay+0x64>)
 8003556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	f3bf 8f4f 	dsb	sy
 8003560:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003564:	bf00      	nop
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	20000198 	.word	0x20000198
 8003570:	e000ed04 	.word	0xe000ed04

08003574 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800357a:	4b20      	ldr	r3, [pc, #128]	; (80035fc <vTaskStartScheduler+0x88>)
 800357c:	9301      	str	r3, [sp, #4]
 800357e:	2300      	movs	r3, #0
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	2300      	movs	r3, #0
 8003584:	2282      	movs	r2, #130	; 0x82
 8003586:	491e      	ldr	r1, [pc, #120]	; (8003600 <vTaskStartScheduler+0x8c>)
 8003588:	481e      	ldr	r0, [pc, #120]	; (8003604 <vTaskStartScheduler+0x90>)
 800358a:	f7ff fe79 	bl	8003280 <xTaskCreate>
 800358e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d102      	bne.n	800359c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003596:	f000 fcf7 	bl	8003f88 <xTimerCreateTimerTask>
 800359a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d116      	bne.n	80035d0 <vTaskStartScheduler+0x5c>
        __asm volatile
 80035a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a6:	f383 8811 	msr	BASEPRI, r3
 80035aa:	f3bf 8f6f 	isb	sy
 80035ae:	f3bf 8f4f 	dsb	sy
 80035b2:	60bb      	str	r3, [r7, #8]
    }
 80035b4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80035b6:	4b14      	ldr	r3, [pc, #80]	; (8003608 <vTaskStartScheduler+0x94>)
 80035b8:	f04f 32ff 	mov.w	r2, #4294967295
 80035bc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80035be:	4b13      	ldr	r3, [pc, #76]	; (800360c <vTaskStartScheduler+0x98>)
 80035c0:	2201      	movs	r2, #1
 80035c2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80035c4:	4b12      	ldr	r3, [pc, #72]	; (8003610 <vTaskStartScheduler+0x9c>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80035ca:	f001 f87b 	bl	80046c4 <xPortStartScheduler>
 80035ce:	e00e      	b.n	80035ee <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d6:	d10a      	bne.n	80035ee <vTaskStartScheduler+0x7a>
        __asm volatile
 80035d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035dc:	f383 8811 	msr	BASEPRI, r3
 80035e0:	f3bf 8f6f 	isb	sy
 80035e4:	f3bf 8f4f 	dsb	sy
 80035e8:	607b      	str	r3, [r7, #4]
    }
 80035ea:	bf00      	nop
 80035ec:	e7fe      	b.n	80035ec <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80035ee:	4b09      	ldr	r3, [pc, #36]	; (8003614 <vTaskStartScheduler+0xa0>)
 80035f0:	681b      	ldr	r3, [r3, #0]
}
 80035f2:	bf00      	nop
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	20000194 	.word	0x20000194
 8003600:	080060b0 	.word	0x080060b0
 8003604:	08003c29 	.word	0x08003c29
 8003608:	20000190 	.word	0x20000190
 800360c:	2000017c 	.word	0x2000017c
 8003610:	20000174 	.word	0x20000174
 8003614:	2000000c 	.word	0x2000000c

08003618 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800361c:	4b04      	ldr	r3, [pc, #16]	; (8003630 <vTaskSuspendAll+0x18>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	3301      	adds	r3, #1
 8003622:	4a03      	ldr	r2, [pc, #12]	; (8003630 <vTaskSuspendAll+0x18>)
 8003624:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003626:	bf00      	nop
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr
 8003630:	20000198 	.word	0x20000198

08003634 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800363a:	2300      	movs	r3, #0
 800363c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800363e:	2300      	movs	r3, #0
 8003640:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003642:	4b41      	ldr	r3, [pc, #260]	; (8003748 <xTaskResumeAll+0x114>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10a      	bne.n	8003660 <xTaskResumeAll+0x2c>
        __asm volatile
 800364a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364e:	f383 8811 	msr	BASEPRI, r3
 8003652:	f3bf 8f6f 	isb	sy
 8003656:	f3bf 8f4f 	dsb	sy
 800365a:	603b      	str	r3, [r7, #0]
    }
 800365c:	bf00      	nop
 800365e:	e7fe      	b.n	800365e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003660:	f001 f8d2 	bl	8004808 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003664:	4b38      	ldr	r3, [pc, #224]	; (8003748 <xTaskResumeAll+0x114>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3b01      	subs	r3, #1
 800366a:	4a37      	ldr	r2, [pc, #220]	; (8003748 <xTaskResumeAll+0x114>)
 800366c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800366e:	4b36      	ldr	r3, [pc, #216]	; (8003748 <xTaskResumeAll+0x114>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d161      	bne.n	800373a <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003676:	4b35      	ldr	r3, [pc, #212]	; (800374c <xTaskResumeAll+0x118>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d05d      	beq.n	800373a <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800367e:	e02e      	b.n	80036de <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003680:	4b33      	ldr	r3, [pc, #204]	; (8003750 <xTaskResumeAll+0x11c>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	3318      	adds	r3, #24
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff f8bb 	bl	8002808 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	3304      	adds	r3, #4
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff f8b6 	bl	8002808 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a0:	2201      	movs	r2, #1
 80036a2:	409a      	lsls	r2, r3
 80036a4:	4b2b      	ldr	r3, [pc, #172]	; (8003754 <xTaskResumeAll+0x120>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	4a2a      	ldr	r2, [pc, #168]	; (8003754 <xTaskResumeAll+0x120>)
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b2:	4613      	mov	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4413      	add	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4a27      	ldr	r2, [pc, #156]	; (8003758 <xTaskResumeAll+0x124>)
 80036bc:	441a      	add	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	3304      	adds	r3, #4
 80036c2:	4619      	mov	r1, r3
 80036c4:	4610      	mov	r0, r2
 80036c6:	f7ff f842 	bl	800274e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ce:	4b23      	ldr	r3, [pc, #140]	; (800375c <xTaskResumeAll+0x128>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d302      	bcc.n	80036de <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 80036d8:	4b21      	ldr	r3, [pc, #132]	; (8003760 <xTaskResumeAll+0x12c>)
 80036da:	2201      	movs	r2, #1
 80036dc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036de:	4b1c      	ldr	r3, [pc, #112]	; (8003750 <xTaskResumeAll+0x11c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1cc      	bne.n	8003680 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80036ec:	f000 fb32 	bl	8003d54 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80036f0:	4b1c      	ldr	r3, [pc, #112]	; (8003764 <xTaskResumeAll+0x130>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d010      	beq.n	800371e <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80036fc:	f000 f846 	bl	800378c <xTaskIncrementTick>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8003706:	4b16      	ldr	r3, [pc, #88]	; (8003760 <xTaskResumeAll+0x12c>)
 8003708:	2201      	movs	r2, #1
 800370a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3b01      	subs	r3, #1
 8003710:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1f1      	bne.n	80036fc <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8003718:	4b12      	ldr	r3, [pc, #72]	; (8003764 <xTaskResumeAll+0x130>)
 800371a:	2200      	movs	r2, #0
 800371c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800371e:	4b10      	ldr	r3, [pc, #64]	; (8003760 <xTaskResumeAll+0x12c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d009      	beq.n	800373a <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003726:	2301      	movs	r3, #1
 8003728:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800372a:	4b0f      	ldr	r3, [pc, #60]	; (8003768 <xTaskResumeAll+0x134>)
 800372c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	f3bf 8f4f 	dsb	sy
 8003736:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800373a:	f001 f895 	bl	8004868 <vPortExitCritical>

    return xAlreadyYielded;
 800373e:	68bb      	ldr	r3, [r7, #8]
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	20000198 	.word	0x20000198
 800374c:	20000170 	.word	0x20000170
 8003750:	20000130 	.word	0x20000130
 8003754:	20000178 	.word	0x20000178
 8003758:	2000009c 	.word	0x2000009c
 800375c:	20000098 	.word	0x20000098
 8003760:	20000184 	.word	0x20000184
 8003764:	20000180 	.word	0x20000180
 8003768:	e000ed04 	.word	0xe000ed04

0800376c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003772:	4b05      	ldr	r3, [pc, #20]	; (8003788 <xTaskGetTickCount+0x1c>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003778:	687b      	ldr	r3, [r7, #4]
}
 800377a:	4618      	mov	r0, r3
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	20000174 	.word	0x20000174

0800378c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003792:	2300      	movs	r3, #0
 8003794:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003796:	4b4e      	ldr	r3, [pc, #312]	; (80038d0 <xTaskIncrementTick+0x144>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	f040 808e 	bne.w	80038bc <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80037a0:	4b4c      	ldr	r3, [pc, #304]	; (80038d4 <xTaskIncrementTick+0x148>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	3301      	adds	r3, #1
 80037a6:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80037a8:	4a4a      	ldr	r2, [pc, #296]	; (80038d4 <xTaskIncrementTick+0x148>)
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d120      	bne.n	80037f6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80037b4:	4b48      	ldr	r3, [pc, #288]	; (80038d8 <xTaskIncrementTick+0x14c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00a      	beq.n	80037d4 <xTaskIncrementTick+0x48>
        __asm volatile
 80037be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c2:	f383 8811 	msr	BASEPRI, r3
 80037c6:	f3bf 8f6f 	isb	sy
 80037ca:	f3bf 8f4f 	dsb	sy
 80037ce:	603b      	str	r3, [r7, #0]
    }
 80037d0:	bf00      	nop
 80037d2:	e7fe      	b.n	80037d2 <xTaskIncrementTick+0x46>
 80037d4:	4b40      	ldr	r3, [pc, #256]	; (80038d8 <xTaskIncrementTick+0x14c>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	4b40      	ldr	r3, [pc, #256]	; (80038dc <xTaskIncrementTick+0x150>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a3e      	ldr	r2, [pc, #248]	; (80038d8 <xTaskIncrementTick+0x14c>)
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	4a3e      	ldr	r2, [pc, #248]	; (80038dc <xTaskIncrementTick+0x150>)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6013      	str	r3, [r2, #0]
 80037e8:	4b3d      	ldr	r3, [pc, #244]	; (80038e0 <xTaskIncrementTick+0x154>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	3301      	adds	r3, #1
 80037ee:	4a3c      	ldr	r2, [pc, #240]	; (80038e0 <xTaskIncrementTick+0x154>)
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	f000 faaf 	bl	8003d54 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80037f6:	4b3b      	ldr	r3, [pc, #236]	; (80038e4 <xTaskIncrementTick+0x158>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d348      	bcc.n	8003892 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003800:	4b35      	ldr	r3, [pc, #212]	; (80038d8 <xTaskIncrementTick+0x14c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d104      	bne.n	8003814 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800380a:	4b36      	ldr	r3, [pc, #216]	; (80038e4 <xTaskIncrementTick+0x158>)
 800380c:	f04f 32ff 	mov.w	r2, #4294967295
 8003810:	601a      	str	r2, [r3, #0]
                    break;
 8003812:	e03e      	b.n	8003892 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003814:	4b30      	ldr	r3, [pc, #192]	; (80038d8 <xTaskIncrementTick+0x14c>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	429a      	cmp	r2, r3
 800382a:	d203      	bcs.n	8003834 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800382c:	4a2d      	ldr	r2, [pc, #180]	; (80038e4 <xTaskIncrementTick+0x158>)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003832:	e02e      	b.n	8003892 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	3304      	adds	r3, #4
 8003838:	4618      	mov	r0, r3
 800383a:	f7fe ffe5 	bl	8002808 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003842:	2b00      	cmp	r3, #0
 8003844:	d004      	beq.n	8003850 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	3318      	adds	r3, #24
 800384a:	4618      	mov	r0, r3
 800384c:	f7fe ffdc 	bl	8002808 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	2201      	movs	r2, #1
 8003856:	409a      	lsls	r2, r3
 8003858:	4b23      	ldr	r3, [pc, #140]	; (80038e8 <xTaskIncrementTick+0x15c>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4313      	orrs	r3, r2
 800385e:	4a22      	ldr	r2, [pc, #136]	; (80038e8 <xTaskIncrementTick+0x15c>)
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003866:	4613      	mov	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4a1f      	ldr	r2, [pc, #124]	; (80038ec <xTaskIncrementTick+0x160>)
 8003870:	441a      	add	r2, r3
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	3304      	adds	r3, #4
 8003876:	4619      	mov	r1, r3
 8003878:	4610      	mov	r0, r2
 800387a:	f7fe ff68 	bl	800274e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003882:	4b1b      	ldr	r3, [pc, #108]	; (80038f0 <xTaskIncrementTick+0x164>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	429a      	cmp	r2, r3
 800388a:	d3b9      	bcc.n	8003800 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 800388c:	2301      	movs	r3, #1
 800388e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003890:	e7b6      	b.n	8003800 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003892:	4b17      	ldr	r3, [pc, #92]	; (80038f0 <xTaskIncrementTick+0x164>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003898:	4914      	ldr	r1, [pc, #80]	; (80038ec <xTaskIncrementTick+0x160>)
 800389a:	4613      	mov	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d901      	bls.n	80038ae <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 80038aa:	2301      	movs	r3, #1
 80038ac:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80038ae:	4b11      	ldr	r3, [pc, #68]	; (80038f4 <xTaskIncrementTick+0x168>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d007      	beq.n	80038c6 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 80038b6:	2301      	movs	r3, #1
 80038b8:	617b      	str	r3, [r7, #20]
 80038ba:	e004      	b.n	80038c6 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80038bc:	4b0e      	ldr	r3, [pc, #56]	; (80038f8 <xTaskIncrementTick+0x16c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	3301      	adds	r3, #1
 80038c2:	4a0d      	ldr	r2, [pc, #52]	; (80038f8 <xTaskIncrementTick+0x16c>)
 80038c4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80038c6:	697b      	ldr	r3, [r7, #20]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3718      	adds	r7, #24
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	20000198 	.word	0x20000198
 80038d4:	20000174 	.word	0x20000174
 80038d8:	20000128 	.word	0x20000128
 80038dc:	2000012c 	.word	0x2000012c
 80038e0:	20000188 	.word	0x20000188
 80038e4:	20000190 	.word	0x20000190
 80038e8:	20000178 	.word	0x20000178
 80038ec:	2000009c 	.word	0x2000009c
 80038f0:	20000098 	.word	0x20000098
 80038f4:	20000184 	.word	0x20000184
 80038f8:	20000180 	.word	0x20000180

080038fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80038fc:	b480      	push	{r7}
 80038fe:	b087      	sub	sp, #28
 8003900:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003902:	4b27      	ldr	r3, [pc, #156]	; (80039a0 <vTaskSwitchContext+0xa4>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800390a:	4b26      	ldr	r3, [pc, #152]	; (80039a4 <vTaskSwitchContext+0xa8>)
 800390c:	2201      	movs	r2, #1
 800390e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003910:	e03f      	b.n	8003992 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8003912:	4b24      	ldr	r3, [pc, #144]	; (80039a4 <vTaskSwitchContext+0xa8>)
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003918:	4b23      	ldr	r3, [pc, #140]	; (80039a8 <vTaskSwitchContext+0xac>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	fab3 f383 	clz	r3, r3
 8003924:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003926:	7afb      	ldrb	r3, [r7, #11]
 8003928:	f1c3 031f 	rsb	r3, r3, #31
 800392c:	617b      	str	r3, [r7, #20]
 800392e:	491f      	ldr	r1, [pc, #124]	; (80039ac <vTaskSwitchContext+0xb0>)
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	4613      	mov	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10a      	bne.n	8003958 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003946:	f383 8811 	msr	BASEPRI, r3
 800394a:	f3bf 8f6f 	isb	sy
 800394e:	f3bf 8f4f 	dsb	sy
 8003952:	607b      	str	r3, [r7, #4]
    }
 8003954:	bf00      	nop
 8003956:	e7fe      	b.n	8003956 <vTaskSwitchContext+0x5a>
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	4613      	mov	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4413      	add	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4a12      	ldr	r2, [pc, #72]	; (80039ac <vTaskSwitchContext+0xb0>)
 8003964:	4413      	add	r3, r2
 8003966:	613b      	str	r3, [r7, #16]
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	605a      	str	r2, [r3, #4]
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	3308      	adds	r3, #8
 800397a:	429a      	cmp	r2, r3
 800397c:	d104      	bne.n	8003988 <vTaskSwitchContext+0x8c>
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	605a      	str	r2, [r3, #4]
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	4a08      	ldr	r2, [pc, #32]	; (80039b0 <vTaskSwitchContext+0xb4>)
 8003990:	6013      	str	r3, [r2, #0]
}
 8003992:	bf00      	nop
 8003994:	371c      	adds	r7, #28
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	20000198 	.word	0x20000198
 80039a4:	20000184 	.word	0x20000184
 80039a8:	20000178 	.word	0x20000178
 80039ac:	2000009c 	.word	0x2000009c
 80039b0:	20000098 	.word	0x20000098

080039b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10a      	bne.n	80039da <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80039c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c8:	f383 8811 	msr	BASEPRI, r3
 80039cc:	f3bf 8f6f 	isb	sy
 80039d0:	f3bf 8f4f 	dsb	sy
 80039d4:	60fb      	str	r3, [r7, #12]
    }
 80039d6:	bf00      	nop
 80039d8:	e7fe      	b.n	80039d8 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80039da:	4b07      	ldr	r3, [pc, #28]	; (80039f8 <vTaskPlaceOnEventList+0x44>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	3318      	adds	r3, #24
 80039e0:	4619      	mov	r1, r3
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7fe fed7 	bl	8002796 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80039e8:	2101      	movs	r1, #1
 80039ea:	6838      	ldr	r0, [r7, #0]
 80039ec:	f000 fa66 	bl	8003ebc <prvAddCurrentTaskToDelayedList>
}
 80039f0:	bf00      	nop
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	20000098 	.word	0x20000098

080039fc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10a      	bne.n	8003a24 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a12:	f383 8811 	msr	BASEPRI, r3
 8003a16:	f3bf 8f6f 	isb	sy
 8003a1a:	f3bf 8f4f 	dsb	sy
 8003a1e:	617b      	str	r3, [r7, #20]
    }
 8003a20:	bf00      	nop
 8003a22:	e7fe      	b.n	8003a22 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a24:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <vTaskPlaceOnEventListRestricted+0x54>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	3318      	adds	r3, #24
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f7fe fe8e 	bl	800274e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d002      	beq.n	8003a3e <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003a38:	f04f 33ff 	mov.w	r3, #4294967295
 8003a3c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	68b8      	ldr	r0, [r7, #8]
 8003a42:	f000 fa3b 	bl	8003ebc <prvAddCurrentTaskToDelayedList>
    }
 8003a46:	bf00      	nop
 8003a48:	3718      	adds	r7, #24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	20000098 	.word	0x20000098

08003a54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10a      	bne.n	8003a80 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6e:	f383 8811 	msr	BASEPRI, r3
 8003a72:	f3bf 8f6f 	isb	sy
 8003a76:	f3bf 8f4f 	dsb	sy
 8003a7a:	60fb      	str	r3, [r7, #12]
    }
 8003a7c:	bf00      	nop
 8003a7e:	e7fe      	b.n	8003a7e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	3318      	adds	r3, #24
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fe febf 	bl	8002808 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a8a:	4b1d      	ldr	r3, [pc, #116]	; (8003b00 <xTaskRemoveFromEventList+0xac>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d11c      	bne.n	8003acc <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	3304      	adds	r3, #4
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fe feb6 	bl	8002808 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	409a      	lsls	r2, r3
 8003aa4:	4b17      	ldr	r3, [pc, #92]	; (8003b04 <xTaskRemoveFromEventList+0xb0>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	4a16      	ldr	r2, [pc, #88]	; (8003b04 <xTaskRemoveFromEventList+0xb0>)
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4413      	add	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4a13      	ldr	r2, [pc, #76]	; (8003b08 <xTaskRemoveFromEventList+0xb4>)
 8003abc:	441a      	add	r2, r3
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	4610      	mov	r0, r2
 8003ac6:	f7fe fe42 	bl	800274e <vListInsertEnd>
 8003aca:	e005      	b.n	8003ad8 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	3318      	adds	r3, #24
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	480e      	ldr	r0, [pc, #56]	; (8003b0c <xTaskRemoveFromEventList+0xb8>)
 8003ad4:	f7fe fe3b 	bl	800274e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003adc:	4b0c      	ldr	r3, [pc, #48]	; (8003b10 <xTaskRemoveFromEventList+0xbc>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d905      	bls.n	8003af2 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003aea:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <xTaskRemoveFromEventList+0xc0>)
 8003aec:	2201      	movs	r2, #1
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	e001      	b.n	8003af6 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003af6:	697b      	ldr	r3, [r7, #20]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	20000198 	.word	0x20000198
 8003b04:	20000178 	.word	0x20000178
 8003b08:	2000009c 	.word	0x2000009c
 8003b0c:	20000130 	.word	0x20000130
 8003b10:	20000098 	.word	0x20000098
 8003b14:	20000184 	.word	0x20000184

08003b18 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b20:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <vTaskInternalSetTimeOutState+0x24>)
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003b28:	4b05      	ldr	r3, [pc, #20]	; (8003b40 <vTaskInternalSetTimeOutState+0x28>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	605a      	str	r2, [r3, #4]
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	20000188 	.word	0x20000188
 8003b40:	20000174 	.word	0x20000174

08003b44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b088      	sub	sp, #32
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10a      	bne.n	8003b6a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b58:	f383 8811 	msr	BASEPRI, r3
 8003b5c:	f3bf 8f6f 	isb	sy
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	613b      	str	r3, [r7, #16]
    }
 8003b66:	bf00      	nop
 8003b68:	e7fe      	b.n	8003b68 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10a      	bne.n	8003b86 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b74:	f383 8811 	msr	BASEPRI, r3
 8003b78:	f3bf 8f6f 	isb	sy
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	60fb      	str	r3, [r7, #12]
    }
 8003b82:	bf00      	nop
 8003b84:	e7fe      	b.n	8003b84 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003b86:	f000 fe3f 	bl	8004808 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003b8a:	4b1f      	ldr	r3, [pc, #124]	; (8003c08 <xTaskCheckForTimeOut+0xc4>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba2:	d102      	bne.n	8003baa <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	61fb      	str	r3, [r7, #28]
 8003ba8:	e026      	b.n	8003bf8 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	4b17      	ldr	r3, [pc, #92]	; (8003c0c <xTaskCheckForTimeOut+0xc8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d00a      	beq.n	8003bcc <xTaskCheckForTimeOut+0x88>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d305      	bcc.n	8003bcc <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	e015      	b.n	8003bf8 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d20b      	bcs.n	8003bee <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	1ad2      	subs	r2, r2, r3
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7ff ff98 	bl	8003b18 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003be8:	2300      	movs	r3, #0
 8003bea:	61fb      	str	r3, [r7, #28]
 8003bec:	e004      	b.n	8003bf8 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003bf8:	f000 fe36 	bl	8004868 <vPortExitCritical>

    return xReturn;
 8003bfc:	69fb      	ldr	r3, [r7, #28]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3720      	adds	r7, #32
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	20000174 	.word	0x20000174
 8003c0c:	20000188 	.word	0x20000188

08003c10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003c14:	4b03      	ldr	r3, [pc, #12]	; (8003c24 <vTaskMissedYield+0x14>)
 8003c16:	2201      	movs	r2, #1
 8003c18:	601a      	str	r2, [r3, #0]
}
 8003c1a:	bf00      	nop
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	20000184 	.word	0x20000184

08003c28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003c30:	f000 f852 	bl	8003cd8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c34:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <prvIdleTask+0x28>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d9f9      	bls.n	8003c30 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003c3c:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <prvIdleTask+0x2c>)
 8003c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	f3bf 8f4f 	dsb	sy
 8003c48:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003c4c:	e7f0      	b.n	8003c30 <prvIdleTask+0x8>
 8003c4e:	bf00      	nop
 8003c50:	2000009c 	.word	0x2000009c
 8003c54:	e000ed04 	.word	0xe000ed04

08003c58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c5e:	2300      	movs	r3, #0
 8003c60:	607b      	str	r3, [r7, #4]
 8003c62:	e00c      	b.n	8003c7e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4a12      	ldr	r2, [pc, #72]	; (8003cb8 <prvInitialiseTaskLists+0x60>)
 8003c70:	4413      	add	r3, r2
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fe fd3e 	bl	80026f4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	607b      	str	r3, [r7, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b04      	cmp	r3, #4
 8003c82:	d9ef      	bls.n	8003c64 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003c84:	480d      	ldr	r0, [pc, #52]	; (8003cbc <prvInitialiseTaskLists+0x64>)
 8003c86:	f7fe fd35 	bl	80026f4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003c8a:	480d      	ldr	r0, [pc, #52]	; (8003cc0 <prvInitialiseTaskLists+0x68>)
 8003c8c:	f7fe fd32 	bl	80026f4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003c90:	480c      	ldr	r0, [pc, #48]	; (8003cc4 <prvInitialiseTaskLists+0x6c>)
 8003c92:	f7fe fd2f 	bl	80026f4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003c96:	480c      	ldr	r0, [pc, #48]	; (8003cc8 <prvInitialiseTaskLists+0x70>)
 8003c98:	f7fe fd2c 	bl	80026f4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003c9c:	480b      	ldr	r0, [pc, #44]	; (8003ccc <prvInitialiseTaskLists+0x74>)
 8003c9e:	f7fe fd29 	bl	80026f4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003ca2:	4b0b      	ldr	r3, [pc, #44]	; (8003cd0 <prvInitialiseTaskLists+0x78>)
 8003ca4:	4a05      	ldr	r2, [pc, #20]	; (8003cbc <prvInitialiseTaskLists+0x64>)
 8003ca6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ca8:	4b0a      	ldr	r3, [pc, #40]	; (8003cd4 <prvInitialiseTaskLists+0x7c>)
 8003caa:	4a05      	ldr	r2, [pc, #20]	; (8003cc0 <prvInitialiseTaskLists+0x68>)
 8003cac:	601a      	str	r2, [r3, #0]
}
 8003cae:	bf00      	nop
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	2000009c 	.word	0x2000009c
 8003cbc:	20000100 	.word	0x20000100
 8003cc0:	20000114 	.word	0x20000114
 8003cc4:	20000130 	.word	0x20000130
 8003cc8:	20000144 	.word	0x20000144
 8003ccc:	2000015c 	.word	0x2000015c
 8003cd0:	20000128 	.word	0x20000128
 8003cd4:	2000012c 	.word	0x2000012c

08003cd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003cde:	e019      	b.n	8003d14 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003ce0:	f000 fd92 	bl	8004808 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ce4:	4b10      	ldr	r3, [pc, #64]	; (8003d28 <prvCheckTasksWaitingTermination+0x50>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3304      	adds	r3, #4
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7fe fd89 	bl	8002808 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003cf6:	4b0d      	ldr	r3, [pc, #52]	; (8003d2c <prvCheckTasksWaitingTermination+0x54>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	4a0b      	ldr	r2, [pc, #44]	; (8003d2c <prvCheckTasksWaitingTermination+0x54>)
 8003cfe:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003d00:	4b0b      	ldr	r3, [pc, #44]	; (8003d30 <prvCheckTasksWaitingTermination+0x58>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	3b01      	subs	r3, #1
 8003d06:	4a0a      	ldr	r2, [pc, #40]	; (8003d30 <prvCheckTasksWaitingTermination+0x58>)
 8003d08:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003d0a:	f000 fdad 	bl	8004868 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f810 	bl	8003d34 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d14:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <prvCheckTasksWaitingTermination+0x58>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1e1      	bne.n	8003ce0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003d1c:	bf00      	nop
 8003d1e:	bf00      	nop
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	20000144 	.word	0x20000144
 8003d2c:	20000170 	.word	0x20000170
 8003d30:	20000158 	.word	0x20000158

08003d34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 ff63 	bl	8004c0c <vPortFree>
                vPortFree( pxTCB );
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 ff60 	bl	8004c0c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003d4c:	bf00      	nop
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d58:	4b0a      	ldr	r3, [pc, #40]	; (8003d84 <prvResetNextTaskUnblockTime+0x30>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d104      	bne.n	8003d6c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003d62:	4b09      	ldr	r3, [pc, #36]	; (8003d88 <prvResetNextTaskUnblockTime+0x34>)
 8003d64:	f04f 32ff 	mov.w	r2, #4294967295
 8003d68:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003d6a:	e005      	b.n	8003d78 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d6c:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <prvResetNextTaskUnblockTime+0x30>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a04      	ldr	r2, [pc, #16]	; (8003d88 <prvResetNextTaskUnblockTime+0x34>)
 8003d76:	6013      	str	r3, [r2, #0]
}
 8003d78:	bf00      	nop
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	20000128 	.word	0x20000128
 8003d88:	20000190 	.word	0x20000190

08003d8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003d92:	4b0b      	ldr	r3, [pc, #44]	; (8003dc0 <xTaskGetSchedulerState+0x34>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d102      	bne.n	8003da0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	607b      	str	r3, [r7, #4]
 8003d9e:	e008      	b.n	8003db2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003da0:	4b08      	ldr	r3, [pc, #32]	; (8003dc4 <xTaskGetSchedulerState+0x38>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d102      	bne.n	8003dae <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003da8:	2302      	movs	r3, #2
 8003daa:	607b      	str	r3, [r7, #4]
 8003dac:	e001      	b.n	8003db2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003dae:	2300      	movs	r3, #0
 8003db0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003db2:	687b      	ldr	r3, [r7, #4]
    }
 8003db4:	4618      	mov	r0, r3
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	2000017c 	.word	0x2000017c
 8003dc4:	20000198 	.word	0x20000198

08003dc8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d063      	beq.n	8003ea6 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003dde:	4b34      	ldr	r3, [pc, #208]	; (8003eb0 <xTaskPriorityDisinherit+0xe8>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d00a      	beq.n	8003dfe <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dec:	f383 8811 	msr	BASEPRI, r3
 8003df0:	f3bf 8f6f 	isb	sy
 8003df4:	f3bf 8f4f 	dsb	sy
 8003df8:	60fb      	str	r3, [r7, #12]
    }
 8003dfa:	bf00      	nop
 8003dfc:	e7fe      	b.n	8003dfc <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10a      	bne.n	8003e1c <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0a:	f383 8811 	msr	BASEPRI, r3
 8003e0e:	f3bf 8f6f 	isb	sy
 8003e12:	f3bf 8f4f 	dsb	sy
 8003e16:	60bb      	str	r3, [r7, #8]
    }
 8003e18:	bf00      	nop
 8003e1a:	e7fe      	b.n	8003e1a <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e20:	1e5a      	subs	r2, r3, #1
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d039      	beq.n	8003ea6 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d135      	bne.n	8003ea6 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fe fce2 	bl	8002808 <uxListRemove>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10a      	bne.n	8003e60 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4e:	2201      	movs	r2, #1
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	43da      	mvns	r2, r3
 8003e56:	4b17      	ldr	r3, [pc, #92]	; (8003eb4 <xTaskPriorityDisinherit+0xec>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	4a15      	ldr	r2, [pc, #84]	; (8003eb4 <xTaskPriorityDisinherit+0xec>)
 8003e5e:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6c:	f1c3 0205 	rsb	r2, r3, #5
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e78:	2201      	movs	r2, #1
 8003e7a:	409a      	lsls	r2, r3
 8003e7c:	4b0d      	ldr	r3, [pc, #52]	; (8003eb4 <xTaskPriorityDisinherit+0xec>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	4a0c      	ldr	r2, [pc, #48]	; (8003eb4 <xTaskPriorityDisinherit+0xec>)
 8003e84:	6013      	str	r3, [r2, #0]
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4413      	add	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4a09      	ldr	r2, [pc, #36]	; (8003eb8 <xTaskPriorityDisinherit+0xf0>)
 8003e94:	441a      	add	r2, r3
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	3304      	adds	r3, #4
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	4610      	mov	r0, r2
 8003e9e:	f7fe fc56 	bl	800274e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003ea6:	697b      	ldr	r3, [r7, #20]
    }
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3718      	adds	r7, #24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	20000098 	.word	0x20000098
 8003eb4:	20000178 	.word	0x20000178
 8003eb8:	2000009c 	.word	0x2000009c

08003ebc <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003ec6:	4b29      	ldr	r3, [pc, #164]	; (8003f6c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ecc:	4b28      	ldr	r3, [pc, #160]	; (8003f70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fe fc98 	bl	8002808 <uxListRemove>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10b      	bne.n	8003ef6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003ede:	4b24      	ldr	r3, [pc, #144]	; (8003f70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eea:	43da      	mvns	r2, r3
 8003eec:	4b21      	ldr	r3, [pc, #132]	; (8003f74 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	4a20      	ldr	r2, [pc, #128]	; (8003f74 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003ef4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efc:	d10a      	bne.n	8003f14 <prvAddCurrentTaskToDelayedList+0x58>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d007      	beq.n	8003f14 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f04:	4b1a      	ldr	r3, [pc, #104]	; (8003f70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	3304      	adds	r3, #4
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	481a      	ldr	r0, [pc, #104]	; (8003f78 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003f0e:	f7fe fc1e 	bl	800274e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003f12:	e026      	b.n	8003f62 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4413      	add	r3, r2
 8003f1a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f1c:	4b14      	ldr	r3, [pc, #80]	; (8003f70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d209      	bcs.n	8003f40 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f2c:	4b13      	ldr	r3, [pc, #76]	; (8003f7c <prvAddCurrentTaskToDelayedList+0xc0>)
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	4b0f      	ldr	r3, [pc, #60]	; (8003f70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	3304      	adds	r3, #4
 8003f36:	4619      	mov	r1, r3
 8003f38:	4610      	mov	r0, r2
 8003f3a:	f7fe fc2c 	bl	8002796 <vListInsert>
}
 8003f3e:	e010      	b.n	8003f62 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f40:	4b0f      	ldr	r3, [pc, #60]	; (8003f80 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	4b0a      	ldr	r3, [pc, #40]	; (8003f70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	3304      	adds	r3, #4
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	4610      	mov	r0, r2
 8003f4e:	f7fe fc22 	bl	8002796 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003f52:	4b0c      	ldr	r3, [pc, #48]	; (8003f84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d202      	bcs.n	8003f62 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8003f5c:	4a09      	ldr	r2, [pc, #36]	; (8003f84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	6013      	str	r3, [r2, #0]
}
 8003f62:	bf00      	nop
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	20000174 	.word	0x20000174
 8003f70:	20000098 	.word	0x20000098
 8003f74:	20000178 	.word	0x20000178
 8003f78:	2000015c 	.word	0x2000015c
 8003f7c:	2000012c 	.word	0x2000012c
 8003f80:	20000128 	.word	0x20000128
 8003f84:	20000190 	.word	0x20000190

08003f88 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003f92:	f000 fad5 	bl	8004540 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003f96:	4b11      	ldr	r3, [pc, #68]	; (8003fdc <xTimerCreateTimerTask+0x54>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00b      	beq.n	8003fb6 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003f9e:	4b10      	ldr	r3, [pc, #64]	; (8003fe0 <xTimerCreateTimerTask+0x58>)
 8003fa0:	9301      	str	r3, [sp, #4]
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003fac:	490d      	ldr	r1, [pc, #52]	; (8003fe4 <xTimerCreateTimerTask+0x5c>)
 8003fae:	480e      	ldr	r0, [pc, #56]	; (8003fe8 <xTimerCreateTimerTask+0x60>)
 8003fb0:	f7ff f966 	bl	8003280 <xTaskCreate>
 8003fb4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10a      	bne.n	8003fd2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc0:	f383 8811 	msr	BASEPRI, r3
 8003fc4:	f3bf 8f6f 	isb	sy
 8003fc8:	f3bf 8f4f 	dsb	sy
 8003fcc:	603b      	str	r3, [r7, #0]
    }
 8003fce:	bf00      	nop
 8003fd0:	e7fe      	b.n	8003fd0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003fd2:	687b      	ldr	r3, [r7, #4]
    }
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	200001cc 	.word	0x200001cc
 8003fe0:	200001d0 	.word	0x200001d0
 8003fe4:	080060b8 	.word	0x080060b8
 8003fe8:	08004121 	.word	0x08004121

08003fec <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b08a      	sub	sp, #40	; 0x28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
 8003ff8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d10a      	bne.n	800401a <xTimerGenericCommand+0x2e>
        __asm volatile
 8004004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004008:	f383 8811 	msr	BASEPRI, r3
 800400c:	f3bf 8f6f 	isb	sy
 8004010:	f3bf 8f4f 	dsb	sy
 8004014:	623b      	str	r3, [r7, #32]
    }
 8004016:	bf00      	nop
 8004018:	e7fe      	b.n	8004018 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800401a:	4b1a      	ldr	r3, [pc, #104]	; (8004084 <xTimerGenericCommand+0x98>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d02a      	beq.n	8004078 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2b05      	cmp	r3, #5
 8004032:	dc18      	bgt.n	8004066 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004034:	f7ff feaa 	bl	8003d8c <xTaskGetSchedulerState>
 8004038:	4603      	mov	r3, r0
 800403a:	2b02      	cmp	r3, #2
 800403c:	d109      	bne.n	8004052 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800403e:	4b11      	ldr	r3, [pc, #68]	; (8004084 <xTimerGenericCommand+0x98>)
 8004040:	6818      	ldr	r0, [r3, #0]
 8004042:	f107 0114 	add.w	r1, r7, #20
 8004046:	2300      	movs	r3, #0
 8004048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800404a:	f7fe fd23 	bl	8002a94 <xQueueGenericSend>
 800404e:	6278      	str	r0, [r7, #36]	; 0x24
 8004050:	e012      	b.n	8004078 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004052:	4b0c      	ldr	r3, [pc, #48]	; (8004084 <xTimerGenericCommand+0x98>)
 8004054:	6818      	ldr	r0, [r3, #0]
 8004056:	f107 0114 	add.w	r1, r7, #20
 800405a:	2300      	movs	r3, #0
 800405c:	2200      	movs	r2, #0
 800405e:	f7fe fd19 	bl	8002a94 <xQueueGenericSend>
 8004062:	6278      	str	r0, [r7, #36]	; 0x24
 8004064:	e008      	b.n	8004078 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004066:	4b07      	ldr	r3, [pc, #28]	; (8004084 <xTimerGenericCommand+0x98>)
 8004068:	6818      	ldr	r0, [r3, #0]
 800406a:	f107 0114 	add.w	r1, r7, #20
 800406e:	2300      	movs	r3, #0
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	f7fe fe0d 	bl	8002c90 <xQueueGenericSendFromISR>
 8004076:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800407a:	4618      	mov	r0, r3
 800407c:	3728      	adds	r7, #40	; 0x28
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	200001cc 	.word	0x200001cc

08004088 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004088:	b580      	push	{r7, lr}
 800408a:	b088      	sub	sp, #32
 800408c:	af02      	add	r7, sp, #8
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004092:	4b22      	ldr	r3, [pc, #136]	; (800411c <prvProcessExpiredTimer+0x94>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	3304      	adds	r3, #4
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7fe fbb1 	bl	8002808 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d022      	beq.n	80040fa <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	699a      	ldr	r2, [r3, #24]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	18d1      	adds	r1, r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	6978      	ldr	r0, [r7, #20]
 80040c2:	f000 f8d1 	bl	8004268 <prvInsertTimerInActiveList>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d01f      	beq.n	800410c <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80040cc:	2300      	movs	r3, #0
 80040ce:	9300      	str	r3, [sp, #0]
 80040d0:	2300      	movs	r3, #0
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	2100      	movs	r1, #0
 80040d6:	6978      	ldr	r0, [r7, #20]
 80040d8:	f7ff ff88 	bl	8003fec <xTimerGenericCommand>
 80040dc:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d113      	bne.n	800410c <prvProcessExpiredTimer+0x84>
        __asm volatile
 80040e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e8:	f383 8811 	msr	BASEPRI, r3
 80040ec:	f3bf 8f6f 	isb	sy
 80040f0:	f3bf 8f4f 	dsb	sy
 80040f4:	60fb      	str	r3, [r7, #12]
    }
 80040f6:	bf00      	nop
 80040f8:	e7fe      	b.n	80040f8 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004100:	f023 0301 	bic.w	r3, r3, #1
 8004104:	b2da      	uxtb	r2, r3
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	6978      	ldr	r0, [r7, #20]
 8004112:	4798      	blx	r3
    }
 8004114:	bf00      	nop
 8004116:	3718      	adds	r7, #24
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	200001c4 	.word	0x200001c4

08004120 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004128:	f107 0308 	add.w	r3, r7, #8
 800412c:	4618      	mov	r0, r3
 800412e:	f000 f857 	bl	80041e0 <prvGetNextExpireTime>
 8004132:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	4619      	mov	r1, r3
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f000 f803 	bl	8004144 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800413e:	f000 f8d5 	bl	80042ec <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004142:	e7f1      	b.n	8004128 <prvTimerTask+0x8>

08004144 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800414e:	f7ff fa63 	bl	8003618 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004152:	f107 0308 	add.w	r3, r7, #8
 8004156:	4618      	mov	r0, r3
 8004158:	f000 f866 	bl	8004228 <prvSampleTimeNow>
 800415c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d130      	bne.n	80041c6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10a      	bne.n	8004180 <prvProcessTimerOrBlockTask+0x3c>
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	429a      	cmp	r2, r3
 8004170:	d806      	bhi.n	8004180 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004172:	f7ff fa5f 	bl	8003634 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004176:	68f9      	ldr	r1, [r7, #12]
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f7ff ff85 	bl	8004088 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800417e:	e024      	b.n	80041ca <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d008      	beq.n	8004198 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004186:	4b13      	ldr	r3, [pc, #76]	; (80041d4 <prvProcessTimerOrBlockTask+0x90>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <prvProcessTimerOrBlockTask+0x50>
 8004190:	2301      	movs	r3, #1
 8004192:	e000      	b.n	8004196 <prvProcessTimerOrBlockTask+0x52>
 8004194:	2300      	movs	r3, #0
 8004196:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004198:	4b0f      	ldr	r3, [pc, #60]	; (80041d8 <prvProcessTimerOrBlockTask+0x94>)
 800419a:	6818      	ldr	r0, [r3, #0]
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	4619      	mov	r1, r3
 80041a6:	f7ff f837 	bl	8003218 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80041aa:	f7ff fa43 	bl	8003634 <xTaskResumeAll>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10a      	bne.n	80041ca <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80041b4:	4b09      	ldr	r3, [pc, #36]	; (80041dc <prvProcessTimerOrBlockTask+0x98>)
 80041b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	f3bf 8f6f 	isb	sy
    }
 80041c4:	e001      	b.n	80041ca <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80041c6:	f7ff fa35 	bl	8003634 <xTaskResumeAll>
    }
 80041ca:	bf00      	nop
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	200001c8 	.word	0x200001c8
 80041d8:	200001cc 	.word	0x200001cc
 80041dc:	e000ed04 	.word	0xe000ed04

080041e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80041e8:	4b0e      	ldr	r3, [pc, #56]	; (8004224 <prvGetNextExpireTime+0x44>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <prvGetNextExpireTime+0x16>
 80041f2:	2201      	movs	r2, #1
 80041f4:	e000      	b.n	80041f8 <prvGetNextExpireTime+0x18>
 80041f6:	2200      	movs	r2, #0
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d105      	bne.n	8004210 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004204:	4b07      	ldr	r3, [pc, #28]	; (8004224 <prvGetNextExpireTime+0x44>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	60fb      	str	r3, [r7, #12]
 800420e:	e001      	b.n	8004214 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004210:	2300      	movs	r3, #0
 8004212:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004214:	68fb      	ldr	r3, [r7, #12]
    }
 8004216:	4618      	mov	r0, r3
 8004218:	3714      	adds	r7, #20
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	200001c4 	.word	0x200001c4

08004228 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004230:	f7ff fa9c 	bl	800376c <xTaskGetTickCount>
 8004234:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004236:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <prvSampleTimeNow+0x3c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	429a      	cmp	r2, r3
 800423e:	d205      	bcs.n	800424c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004240:	f000 f91a 	bl	8004478 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	e002      	b.n	8004252 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004252:	4a04      	ldr	r2, [pc, #16]	; (8004264 <prvSampleTimeNow+0x3c>)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004258:	68fb      	ldr	r3, [r7, #12]
    }
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	200001d4 	.word	0x200001d4

08004268 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
 8004274:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004276:	2300      	movs	r3, #0
 8004278:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	429a      	cmp	r2, r3
 800428c:	d812      	bhi.n	80042b4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	1ad2      	subs	r2, r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	429a      	cmp	r2, r3
 800429a:	d302      	bcc.n	80042a2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800429c:	2301      	movs	r3, #1
 800429e:	617b      	str	r3, [r7, #20]
 80042a0:	e01b      	b.n	80042da <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80042a2:	4b10      	ldr	r3, [pc, #64]	; (80042e4 <prvInsertTimerInActiveList+0x7c>)
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	3304      	adds	r3, #4
 80042aa:	4619      	mov	r1, r3
 80042ac:	4610      	mov	r0, r2
 80042ae:	f7fe fa72 	bl	8002796 <vListInsert>
 80042b2:	e012      	b.n	80042da <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d206      	bcs.n	80042ca <prvInsertTimerInActiveList+0x62>
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d302      	bcc.n	80042ca <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80042c4:	2301      	movs	r3, #1
 80042c6:	617b      	str	r3, [r7, #20]
 80042c8:	e007      	b.n	80042da <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80042ca:	4b07      	ldr	r3, [pc, #28]	; (80042e8 <prvInsertTimerInActiveList+0x80>)
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	3304      	adds	r3, #4
 80042d2:	4619      	mov	r1, r3
 80042d4:	4610      	mov	r0, r2
 80042d6:	f7fe fa5e 	bl	8002796 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80042da:	697b      	ldr	r3, [r7, #20]
    }
 80042dc:	4618      	mov	r0, r3
 80042de:	3718      	adds	r7, #24
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	200001c8 	.word	0x200001c8
 80042e8:	200001c4 	.word	0x200001c4

080042ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b08c      	sub	sp, #48	; 0x30
 80042f0:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80042f2:	e0ae      	b.n	8004452 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f2c0 80aa 	blt.w	8004450 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d004      	beq.n	8004312 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	3304      	adds	r3, #4
 800430c:	4618      	mov	r0, r3
 800430e:	f7fe fa7b 	bl	8002808 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004312:	1d3b      	adds	r3, r7, #4
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff ff87 	bl	8004228 <prvSampleTimeNow>
 800431a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2b09      	cmp	r3, #9
 8004320:	f200 8097 	bhi.w	8004452 <prvProcessReceivedCommands+0x166>
 8004324:	a201      	add	r2, pc, #4	; (adr r2, 800432c <prvProcessReceivedCommands+0x40>)
 8004326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432a:	bf00      	nop
 800432c:	08004355 	.word	0x08004355
 8004330:	08004355 	.word	0x08004355
 8004334:	08004355 	.word	0x08004355
 8004338:	080043c9 	.word	0x080043c9
 800433c:	080043dd 	.word	0x080043dd
 8004340:	08004427 	.word	0x08004427
 8004344:	08004355 	.word	0x08004355
 8004348:	08004355 	.word	0x08004355
 800434c:	080043c9 	.word	0x080043c9
 8004350:	080043dd 	.word	0x080043dd
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800435a:	f043 0301 	orr.w	r3, r3, #1
 800435e:	b2da      	uxtb	r2, r3
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004362:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	18d1      	adds	r1, r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6a3a      	ldr	r2, [r7, #32]
 8004372:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004374:	f7ff ff78 	bl	8004268 <prvInsertTimerInActiveList>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d069      	beq.n	8004452 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004384:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b00      	cmp	r3, #0
 8004392:	d05e      	beq.n	8004452 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	441a      	add	r2, r3
 800439c:	2300      	movs	r3, #0
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	2300      	movs	r3, #0
 80043a2:	2100      	movs	r1, #0
 80043a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043a6:	f7ff fe21 	bl	8003fec <xTimerGenericCommand>
 80043aa:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d14f      	bne.n	8004452 <prvProcessReceivedCommands+0x166>
        __asm volatile
 80043b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b6:	f383 8811 	msr	BASEPRI, r3
 80043ba:	f3bf 8f6f 	isb	sy
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	61bb      	str	r3, [r7, #24]
    }
 80043c4:	bf00      	nop
 80043c6:	e7fe      	b.n	80043c6 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80043c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043ce:	f023 0301 	bic.w	r3, r3, #1
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80043da:	e03a      	b.n	8004452 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80043dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043e2:	f043 0301 	orr.w	r3, r3, #1
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80043f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10a      	bne.n	8004412 <prvProcessReceivedCommands+0x126>
        __asm volatile
 80043fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004400:	f383 8811 	msr	BASEPRI, r3
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	617b      	str	r3, [r7, #20]
    }
 800440e:	bf00      	nop
 8004410:	e7fe      	b.n	8004410 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	699a      	ldr	r2, [r3, #24]
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	18d1      	adds	r1, r2, r3
 800441a:	6a3b      	ldr	r3, [r7, #32]
 800441c:	6a3a      	ldr	r2, [r7, #32]
 800441e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004420:	f7ff ff22 	bl	8004268 <prvInsertTimerInActiveList>
                        break;
 8004424:	e015      	b.n	8004452 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d103      	bne.n	800443c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8004434:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004436:	f000 fbe9 	bl	8004c0c <vPortFree>
 800443a:	e00a      	b.n	8004452 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004442:	f023 0301 	bic.w	r3, r3, #1
 8004446:	b2da      	uxtb	r2, r3
 8004448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800444e:	e000      	b.n	8004452 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004450:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004452:	4b08      	ldr	r3, [pc, #32]	; (8004474 <prvProcessReceivedCommands+0x188>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f107 0108 	add.w	r1, r7, #8
 800445a:	2200      	movs	r2, #0
 800445c:	4618      	mov	r0, r3
 800445e:	f7fe fcc1 	bl	8002de4 <xQueueReceive>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	f47f af45 	bne.w	80042f4 <prvProcessReceivedCommands+0x8>
        }
    }
 800446a:	bf00      	nop
 800446c:	bf00      	nop
 800446e:	3728      	adds	r7, #40	; 0x28
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	200001cc 	.word	0x200001cc

08004478 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004478:	b580      	push	{r7, lr}
 800447a:	b088      	sub	sp, #32
 800447c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800447e:	e048      	b.n	8004512 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004480:	4b2d      	ldr	r3, [pc, #180]	; (8004538 <prvSwitchTimerLists+0xc0>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800448a:	4b2b      	ldr	r3, [pc, #172]	; (8004538 <prvSwitchTimerLists+0xc0>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	3304      	adds	r3, #4
 8004498:	4618      	mov	r0, r3
 800449a:	f7fe f9b5 	bl	8002808 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d02e      	beq.n	8004512 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	4413      	add	r3, r2
 80044bc:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d90e      	bls.n	80044e4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80044d2:	4b19      	ldr	r3, [pc, #100]	; (8004538 <prvSwitchTimerLists+0xc0>)
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	3304      	adds	r3, #4
 80044da:	4619      	mov	r1, r3
 80044dc:	4610      	mov	r0, r2
 80044de:	f7fe f95a 	bl	8002796 <vListInsert>
 80044e2:	e016      	b.n	8004512 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80044e4:	2300      	movs	r3, #0
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	2300      	movs	r3, #0
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	2100      	movs	r1, #0
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f7ff fd7c 	bl	8003fec <xTimerGenericCommand>
 80044f4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d10a      	bne.n	8004512 <prvSwitchTimerLists+0x9a>
        __asm volatile
 80044fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004500:	f383 8811 	msr	BASEPRI, r3
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	603b      	str	r3, [r7, #0]
    }
 800450e:	bf00      	nop
 8004510:	e7fe      	b.n	8004510 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004512:	4b09      	ldr	r3, [pc, #36]	; (8004538 <prvSwitchTimerLists+0xc0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1b1      	bne.n	8004480 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800451c:	4b06      	ldr	r3, [pc, #24]	; (8004538 <prvSwitchTimerLists+0xc0>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004522:	4b06      	ldr	r3, [pc, #24]	; (800453c <prvSwitchTimerLists+0xc4>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a04      	ldr	r2, [pc, #16]	; (8004538 <prvSwitchTimerLists+0xc0>)
 8004528:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800452a:	4a04      	ldr	r2, [pc, #16]	; (800453c <prvSwitchTimerLists+0xc4>)
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	6013      	str	r3, [r2, #0]
    }
 8004530:	bf00      	nop
 8004532:	3718      	adds	r7, #24
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	200001c4 	.word	0x200001c4
 800453c:	200001c8 	.word	0x200001c8

08004540 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004544:	f000 f960 	bl	8004808 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004548:	4b12      	ldr	r3, [pc, #72]	; (8004594 <prvCheckForValidListAndQueue+0x54>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d11d      	bne.n	800458c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004550:	4811      	ldr	r0, [pc, #68]	; (8004598 <prvCheckForValidListAndQueue+0x58>)
 8004552:	f7fe f8cf 	bl	80026f4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004556:	4811      	ldr	r0, [pc, #68]	; (800459c <prvCheckForValidListAndQueue+0x5c>)
 8004558:	f7fe f8cc 	bl	80026f4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800455c:	4b10      	ldr	r3, [pc, #64]	; (80045a0 <prvCheckForValidListAndQueue+0x60>)
 800455e:	4a0e      	ldr	r2, [pc, #56]	; (8004598 <prvCheckForValidListAndQueue+0x58>)
 8004560:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004562:	4b10      	ldr	r3, [pc, #64]	; (80045a4 <prvCheckForValidListAndQueue+0x64>)
 8004564:	4a0d      	ldr	r2, [pc, #52]	; (800459c <prvCheckForValidListAndQueue+0x5c>)
 8004566:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004568:	2200      	movs	r2, #0
 800456a:	210c      	movs	r1, #12
 800456c:	200a      	movs	r0, #10
 800456e:	f7fe f9dd 	bl	800292c <xQueueGenericCreate>
 8004572:	4603      	mov	r3, r0
 8004574:	4a07      	ldr	r2, [pc, #28]	; (8004594 <prvCheckForValidListAndQueue+0x54>)
 8004576:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004578:	4b06      	ldr	r3, [pc, #24]	; (8004594 <prvCheckForValidListAndQueue+0x54>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d005      	beq.n	800458c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004580:	4b04      	ldr	r3, [pc, #16]	; (8004594 <prvCheckForValidListAndQueue+0x54>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4908      	ldr	r1, [pc, #32]	; (80045a8 <prvCheckForValidListAndQueue+0x68>)
 8004586:	4618      	mov	r0, r3
 8004588:	f7fe fe1c 	bl	80031c4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800458c:	f000 f96c 	bl	8004868 <vPortExitCritical>
    }
 8004590:	bf00      	nop
 8004592:	bd80      	pop	{r7, pc}
 8004594:	200001cc 	.word	0x200001cc
 8004598:	2000019c 	.word	0x2000019c
 800459c:	200001b0 	.word	0x200001b0
 80045a0:	200001c4 	.word	0x200001c4
 80045a4:	200001c8 	.word	0x200001c8
 80045a8:	080060c0 	.word	0x080060c0

080045ac <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	3b04      	subs	r3, #4
 80045bc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045c4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	3b04      	subs	r3, #4
 80045ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f023 0201 	bic.w	r2, r3, #1
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	3b04      	subs	r3, #4
 80045da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80045dc:	4a0c      	ldr	r2, [pc, #48]	; (8004610 <pxPortInitialiseStack+0x64>)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	3b14      	subs	r3, #20
 80045e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	3b04      	subs	r3, #4
 80045f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f06f 0202 	mvn.w	r2, #2
 80045fa:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	3b20      	subs	r3, #32
 8004600:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004602:	68fb      	ldr	r3, [r7, #12]
}
 8004604:	4618      	mov	r0, r3
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	08004615 	.word	0x08004615

08004614 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800461a:	2300      	movs	r3, #0
 800461c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800461e:	4b12      	ldr	r3, [pc, #72]	; (8004668 <prvTaskExitError+0x54>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004626:	d00a      	beq.n	800463e <prvTaskExitError+0x2a>
        __asm volatile
 8004628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462c:	f383 8811 	msr	BASEPRI, r3
 8004630:	f3bf 8f6f 	isb	sy
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	60fb      	str	r3, [r7, #12]
    }
 800463a:	bf00      	nop
 800463c:	e7fe      	b.n	800463c <prvTaskExitError+0x28>
        __asm volatile
 800463e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	60bb      	str	r3, [r7, #8]
    }
 8004650:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004652:	bf00      	nop
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0fc      	beq.n	8004654 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800465a:	bf00      	nop
 800465c:	bf00      	nop
 800465e:	3714      	adds	r7, #20
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	20000010 	.word	0x20000010
 800466c:	00000000 	.word	0x00000000

08004670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004670:	4b07      	ldr	r3, [pc, #28]	; (8004690 <pxCurrentTCBConst2>)
 8004672:	6819      	ldr	r1, [r3, #0]
 8004674:	6808      	ldr	r0, [r1, #0]
 8004676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800467a:	f380 8809 	msr	PSP, r0
 800467e:	f3bf 8f6f 	isb	sy
 8004682:	f04f 0000 	mov.w	r0, #0
 8004686:	f380 8811 	msr	BASEPRI, r0
 800468a:	4770      	bx	lr
 800468c:	f3af 8000 	nop.w

08004690 <pxCurrentTCBConst2>:
 8004690:	20000098 	.word	0x20000098
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004694:	bf00      	nop
 8004696:	bf00      	nop

08004698 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004698:	4808      	ldr	r0, [pc, #32]	; (80046bc <prvPortStartFirstTask+0x24>)
 800469a:	6800      	ldr	r0, [r0, #0]
 800469c:	6800      	ldr	r0, [r0, #0]
 800469e:	f380 8808 	msr	MSP, r0
 80046a2:	f04f 0000 	mov.w	r0, #0
 80046a6:	f380 8814 	msr	CONTROL, r0
 80046aa:	b662      	cpsie	i
 80046ac:	b661      	cpsie	f
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	f3bf 8f6f 	isb	sy
 80046b6:	df00      	svc	0
 80046b8:	bf00      	nop
 80046ba:	0000      	.short	0x0000
 80046bc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80046c0:	bf00      	nop
 80046c2:	bf00      	nop

080046c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80046ca:	4b46      	ldr	r3, [pc, #280]	; (80047e4 <xPortStartScheduler+0x120>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a46      	ldr	r2, [pc, #280]	; (80047e8 <xPortStartScheduler+0x124>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d10a      	bne.n	80046ea <xPortStartScheduler+0x26>
        __asm volatile
 80046d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d8:	f383 8811 	msr	BASEPRI, r3
 80046dc:	f3bf 8f6f 	isb	sy
 80046e0:	f3bf 8f4f 	dsb	sy
 80046e4:	613b      	str	r3, [r7, #16]
    }
 80046e6:	bf00      	nop
 80046e8:	e7fe      	b.n	80046e8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80046ea:	4b3e      	ldr	r3, [pc, #248]	; (80047e4 <xPortStartScheduler+0x120>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a3f      	ldr	r2, [pc, #252]	; (80047ec <xPortStartScheduler+0x128>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d10a      	bne.n	800470a <xPortStartScheduler+0x46>
        __asm volatile
 80046f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	60fb      	str	r3, [r7, #12]
    }
 8004706:	bf00      	nop
 8004708:	e7fe      	b.n	8004708 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800470a:	4b39      	ldr	r3, [pc, #228]	; (80047f0 <xPortStartScheduler+0x12c>)
 800470c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	b2db      	uxtb	r3, r3
 8004714:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	22ff      	movs	r2, #255	; 0xff
 800471a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	b2db      	uxtb	r3, r3
 8004722:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004724:	78fb      	ldrb	r3, [r7, #3]
 8004726:	b2db      	uxtb	r3, r3
 8004728:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800472c:	b2da      	uxtb	r2, r3
 800472e:	4b31      	ldr	r3, [pc, #196]	; (80047f4 <xPortStartScheduler+0x130>)
 8004730:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004732:	4b31      	ldr	r3, [pc, #196]	; (80047f8 <xPortStartScheduler+0x134>)
 8004734:	2207      	movs	r2, #7
 8004736:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004738:	e009      	b.n	800474e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800473a:	4b2f      	ldr	r3, [pc, #188]	; (80047f8 <xPortStartScheduler+0x134>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	3b01      	subs	r3, #1
 8004740:	4a2d      	ldr	r2, [pc, #180]	; (80047f8 <xPortStartScheduler+0x134>)
 8004742:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004744:	78fb      	ldrb	r3, [r7, #3]
 8004746:	b2db      	uxtb	r3, r3
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	b2db      	uxtb	r3, r3
 800474c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800474e:	78fb      	ldrb	r3, [r7, #3]
 8004750:	b2db      	uxtb	r3, r3
 8004752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004756:	2b80      	cmp	r3, #128	; 0x80
 8004758:	d0ef      	beq.n	800473a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800475a:	4b27      	ldr	r3, [pc, #156]	; (80047f8 <xPortStartScheduler+0x134>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f1c3 0307 	rsb	r3, r3, #7
 8004762:	2b04      	cmp	r3, #4
 8004764:	d00a      	beq.n	800477c <xPortStartScheduler+0xb8>
        __asm volatile
 8004766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476a:	f383 8811 	msr	BASEPRI, r3
 800476e:	f3bf 8f6f 	isb	sy
 8004772:	f3bf 8f4f 	dsb	sy
 8004776:	60bb      	str	r3, [r7, #8]
    }
 8004778:	bf00      	nop
 800477a:	e7fe      	b.n	800477a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800477c:	4b1e      	ldr	r3, [pc, #120]	; (80047f8 <xPortStartScheduler+0x134>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	021b      	lsls	r3, r3, #8
 8004782:	4a1d      	ldr	r2, [pc, #116]	; (80047f8 <xPortStartScheduler+0x134>)
 8004784:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004786:	4b1c      	ldr	r3, [pc, #112]	; (80047f8 <xPortStartScheduler+0x134>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800478e:	4a1a      	ldr	r2, [pc, #104]	; (80047f8 <xPortStartScheduler+0x134>)
 8004790:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	b2da      	uxtb	r2, r3
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800479a:	4b18      	ldr	r3, [pc, #96]	; (80047fc <xPortStartScheduler+0x138>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a17      	ldr	r2, [pc, #92]	; (80047fc <xPortStartScheduler+0x138>)
 80047a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047a4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80047a6:	4b15      	ldr	r3, [pc, #84]	; (80047fc <xPortStartScheduler+0x138>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a14      	ldr	r2, [pc, #80]	; (80047fc <xPortStartScheduler+0x138>)
 80047ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80047b0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80047b2:	f000 f8db 	bl	800496c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80047b6:	4b12      	ldr	r3, [pc, #72]	; (8004800 <xPortStartScheduler+0x13c>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80047bc:	f000 f8fa 	bl	80049b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80047c0:	4b10      	ldr	r3, [pc, #64]	; (8004804 <xPortStartScheduler+0x140>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a0f      	ldr	r2, [pc, #60]	; (8004804 <xPortStartScheduler+0x140>)
 80047c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80047ca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80047cc:	f7ff ff64 	bl	8004698 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80047d0:	f7ff f894 	bl	80038fc <vTaskSwitchContext>
    prvTaskExitError();
 80047d4:	f7ff ff1e 	bl	8004614 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	e000ed00 	.word	0xe000ed00
 80047e8:	410fc271 	.word	0x410fc271
 80047ec:	410fc270 	.word	0x410fc270
 80047f0:	e000e400 	.word	0xe000e400
 80047f4:	200001d8 	.word	0x200001d8
 80047f8:	200001dc 	.word	0x200001dc
 80047fc:	e000ed20 	.word	0xe000ed20
 8004800:	20000010 	.word	0x20000010
 8004804:	e000ef34 	.word	0xe000ef34

08004808 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
        __asm volatile
 800480e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004812:	f383 8811 	msr	BASEPRI, r3
 8004816:	f3bf 8f6f 	isb	sy
 800481a:	f3bf 8f4f 	dsb	sy
 800481e:	607b      	str	r3, [r7, #4]
    }
 8004820:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004822:	4b0f      	ldr	r3, [pc, #60]	; (8004860 <vPortEnterCritical+0x58>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	3301      	adds	r3, #1
 8004828:	4a0d      	ldr	r2, [pc, #52]	; (8004860 <vPortEnterCritical+0x58>)
 800482a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800482c:	4b0c      	ldr	r3, [pc, #48]	; (8004860 <vPortEnterCritical+0x58>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d10f      	bne.n	8004854 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004834:	4b0b      	ldr	r3, [pc, #44]	; (8004864 <vPortEnterCritical+0x5c>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00a      	beq.n	8004854 <vPortEnterCritical+0x4c>
        __asm volatile
 800483e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004842:	f383 8811 	msr	BASEPRI, r3
 8004846:	f3bf 8f6f 	isb	sy
 800484a:	f3bf 8f4f 	dsb	sy
 800484e:	603b      	str	r3, [r7, #0]
    }
 8004850:	bf00      	nop
 8004852:	e7fe      	b.n	8004852 <vPortEnterCritical+0x4a>
    }
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	20000010 	.word	0x20000010
 8004864:	e000ed04 	.word	0xe000ed04

08004868 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800486e:	4b12      	ldr	r3, [pc, #72]	; (80048b8 <vPortExitCritical+0x50>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10a      	bne.n	800488c <vPortExitCritical+0x24>
        __asm volatile
 8004876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487a:	f383 8811 	msr	BASEPRI, r3
 800487e:	f3bf 8f6f 	isb	sy
 8004882:	f3bf 8f4f 	dsb	sy
 8004886:	607b      	str	r3, [r7, #4]
    }
 8004888:	bf00      	nop
 800488a:	e7fe      	b.n	800488a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800488c:	4b0a      	ldr	r3, [pc, #40]	; (80048b8 <vPortExitCritical+0x50>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	3b01      	subs	r3, #1
 8004892:	4a09      	ldr	r2, [pc, #36]	; (80048b8 <vPortExitCritical+0x50>)
 8004894:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004896:	4b08      	ldr	r3, [pc, #32]	; (80048b8 <vPortExitCritical+0x50>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d105      	bne.n	80048aa <vPortExitCritical+0x42>
 800489e:	2300      	movs	r3, #0
 80048a0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	f383 8811 	msr	BASEPRI, r3
    }
 80048a8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80048aa:	bf00      	nop
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	20000010 	.word	0x20000010
 80048bc:	00000000 	.word	0x00000000

080048c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80048c0:	f3ef 8009 	mrs	r0, PSP
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	4b15      	ldr	r3, [pc, #84]	; (8004920 <pxCurrentTCBConst>)
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	f01e 0f10 	tst.w	lr, #16
 80048d0:	bf08      	it	eq
 80048d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80048d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048da:	6010      	str	r0, [r2, #0]
 80048dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80048e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80048e4:	f380 8811 	msr	BASEPRI, r0
 80048e8:	f3bf 8f4f 	dsb	sy
 80048ec:	f3bf 8f6f 	isb	sy
 80048f0:	f7ff f804 	bl	80038fc <vTaskSwitchContext>
 80048f4:	f04f 0000 	mov.w	r0, #0
 80048f8:	f380 8811 	msr	BASEPRI, r0
 80048fc:	bc09      	pop	{r0, r3}
 80048fe:	6819      	ldr	r1, [r3, #0]
 8004900:	6808      	ldr	r0, [r1, #0]
 8004902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004906:	f01e 0f10 	tst.w	lr, #16
 800490a:	bf08      	it	eq
 800490c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004910:	f380 8809 	msr	PSP, r0
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	f3af 8000 	nop.w

08004920 <pxCurrentTCBConst>:
 8004920:	20000098 	.word	0x20000098
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004924:	bf00      	nop
 8004926:	bf00      	nop

08004928 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
        __asm volatile
 800492e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004932:	f383 8811 	msr	BASEPRI, r3
 8004936:	f3bf 8f6f 	isb	sy
 800493a:	f3bf 8f4f 	dsb	sy
 800493e:	607b      	str	r3, [r7, #4]
    }
 8004940:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004942:	f7fe ff23 	bl	800378c <xTaskIncrementTick>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800494c:	4b06      	ldr	r3, [pc, #24]	; (8004968 <SysTick_Handler+0x40>)
 800494e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	2300      	movs	r3, #0
 8004956:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	f383 8811 	msr	BASEPRI, r3
    }
 800495e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8004960:	bf00      	nop
 8004962:	3708      	adds	r7, #8
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	e000ed04 	.word	0xe000ed04

0800496c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004970:	4b0b      	ldr	r3, [pc, #44]	; (80049a0 <vPortSetupTimerInterrupt+0x34>)
 8004972:	2200      	movs	r2, #0
 8004974:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004976:	4b0b      	ldr	r3, [pc, #44]	; (80049a4 <vPortSetupTimerInterrupt+0x38>)
 8004978:	2200      	movs	r2, #0
 800497a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800497c:	4b0a      	ldr	r3, [pc, #40]	; (80049a8 <vPortSetupTimerInterrupt+0x3c>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a0a      	ldr	r2, [pc, #40]	; (80049ac <vPortSetupTimerInterrupt+0x40>)
 8004982:	fba2 2303 	umull	r2, r3, r2, r3
 8004986:	099b      	lsrs	r3, r3, #6
 8004988:	4a09      	ldr	r2, [pc, #36]	; (80049b0 <vPortSetupTimerInterrupt+0x44>)
 800498a:	3b01      	subs	r3, #1
 800498c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800498e:	4b04      	ldr	r3, [pc, #16]	; (80049a0 <vPortSetupTimerInterrupt+0x34>)
 8004990:	2207      	movs	r2, #7
 8004992:	601a      	str	r2, [r3, #0]
}
 8004994:	bf00      	nop
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	e000e010 	.word	0xe000e010
 80049a4:	e000e018 	.word	0xe000e018
 80049a8:	20000000 	.word	0x20000000
 80049ac:	10624dd3 	.word	0x10624dd3
 80049b0:	e000e014 	.word	0xe000e014

080049b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80049b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80049c4 <vPortEnableVFP+0x10>
 80049b8:	6801      	ldr	r1, [r0, #0]
 80049ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80049be:	6001      	str	r1, [r0, #0]
 80049c0:	4770      	bx	lr
 80049c2:	0000      	.short	0x0000
 80049c4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80049c8:	bf00      	nop
 80049ca:	bf00      	nop

080049cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80049d2:	f3ef 8305 	mrs	r3, IPSR
 80049d6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2b0f      	cmp	r3, #15
 80049dc:	d914      	bls.n	8004a08 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80049de:	4a17      	ldr	r2, [pc, #92]	; (8004a3c <vPortValidateInterruptPriority+0x70>)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4413      	add	r3, r2
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80049e8:	4b15      	ldr	r3, [pc, #84]	; (8004a40 <vPortValidateInterruptPriority+0x74>)
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	7afa      	ldrb	r2, [r7, #11]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d20a      	bcs.n	8004a08 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80049f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f6:	f383 8811 	msr	BASEPRI, r3
 80049fa:	f3bf 8f6f 	isb	sy
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	607b      	str	r3, [r7, #4]
    }
 8004a04:	bf00      	nop
 8004a06:	e7fe      	b.n	8004a06 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004a08:	4b0e      	ldr	r3, [pc, #56]	; (8004a44 <vPortValidateInterruptPriority+0x78>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a10:	4b0d      	ldr	r3, [pc, #52]	; (8004a48 <vPortValidateInterruptPriority+0x7c>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d90a      	bls.n	8004a2e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1c:	f383 8811 	msr	BASEPRI, r3
 8004a20:	f3bf 8f6f 	isb	sy
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	603b      	str	r3, [r7, #0]
    }
 8004a2a:	bf00      	nop
 8004a2c:	e7fe      	b.n	8004a2c <vPortValidateInterruptPriority+0x60>
    }
 8004a2e:	bf00      	nop
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	e000e3f0 	.word	0xe000e3f0
 8004a40:	200001d8 	.word	0x200001d8
 8004a44:	e000ed0c 	.word	0xe000ed0c
 8004a48:	200001dc 	.word	0x200001dc

08004a4c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b08a      	sub	sp, #40	; 0x28
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004a54:	2300      	movs	r3, #0
 8004a56:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004a58:	f7fe fdde 	bl	8003618 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004a5c:	4b65      	ldr	r3, [pc, #404]	; (8004bf4 <pvPortMalloc+0x1a8>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004a64:	f000 f934 	bl	8004cd0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a68:	4b63      	ldr	r3, [pc, #396]	; (8004bf8 <pvPortMalloc+0x1ac>)
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f040 80a7 	bne.w	8004bc4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d02d      	beq.n	8004ad8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004a7c:	2208      	movs	r2, #8
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d227      	bcs.n	8004ad8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004a88:	2208      	movs	r2, #8
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f003 0307 	and.w	r3, r3, #7
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d021      	beq.n	8004ade <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f023 0307 	bic.w	r3, r3, #7
 8004aa0:	3308      	adds	r3, #8
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d214      	bcs.n	8004ad2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f023 0307 	bic.w	r3, r3, #7
 8004aae:	3308      	adds	r3, #8
 8004ab0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f003 0307 	and.w	r3, r3, #7
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d010      	beq.n	8004ade <pvPortMalloc+0x92>
        __asm volatile
 8004abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac0:	f383 8811 	msr	BASEPRI, r3
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	617b      	str	r3, [r7, #20]
    }
 8004ace:	bf00      	nop
 8004ad0:	e7fe      	b.n	8004ad0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ad6:	e002      	b.n	8004ade <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	607b      	str	r3, [r7, #4]
 8004adc:	e000      	b.n	8004ae0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ade:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d06e      	beq.n	8004bc4 <pvPortMalloc+0x178>
 8004ae6:	4b45      	ldr	r3, [pc, #276]	; (8004bfc <pvPortMalloc+0x1b0>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d869      	bhi.n	8004bc4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004af0:	4b43      	ldr	r3, [pc, #268]	; (8004c00 <pvPortMalloc+0x1b4>)
 8004af2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004af4:	4b42      	ldr	r3, [pc, #264]	; (8004c00 <pvPortMalloc+0x1b4>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004afa:	e004      	b.n	8004b06 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afe:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d903      	bls.n	8004b18 <pvPortMalloc+0xcc>
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1f1      	bne.n	8004afc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004b18:	4b36      	ldr	r3, [pc, #216]	; (8004bf4 <pvPortMalloc+0x1a8>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d050      	beq.n	8004bc4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b22:	6a3b      	ldr	r3, [r7, #32]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2208      	movs	r2, #8
 8004b28:	4413      	add	r3, r2
 8004b2a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	6a3b      	ldr	r3, [r7, #32]
 8004b32:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	1ad2      	subs	r2, r2, r3
 8004b3c:	2308      	movs	r3, #8
 8004b3e:	005b      	lsls	r3, r3, #1
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d91f      	bls.n	8004b84 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4413      	add	r3, r2
 8004b4a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	f003 0307 	and.w	r3, r3, #7
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00a      	beq.n	8004b6c <pvPortMalloc+0x120>
        __asm volatile
 8004b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5a:	f383 8811 	msr	BASEPRI, r3
 8004b5e:	f3bf 8f6f 	isb	sy
 8004b62:	f3bf 8f4f 	dsb	sy
 8004b66:	613b      	str	r3, [r7, #16]
    }
 8004b68:	bf00      	nop
 8004b6a:	e7fe      	b.n	8004b6a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	1ad2      	subs	r2, r2, r3
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b7e:	69b8      	ldr	r0, [r7, #24]
 8004b80:	f000 f908 	bl	8004d94 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b84:	4b1d      	ldr	r3, [pc, #116]	; (8004bfc <pvPortMalloc+0x1b0>)
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	4a1b      	ldr	r2, [pc, #108]	; (8004bfc <pvPortMalloc+0x1b0>)
 8004b90:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b92:	4b1a      	ldr	r3, [pc, #104]	; (8004bfc <pvPortMalloc+0x1b0>)
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	4b1b      	ldr	r3, [pc, #108]	; (8004c04 <pvPortMalloc+0x1b8>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d203      	bcs.n	8004ba6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b9e:	4b17      	ldr	r3, [pc, #92]	; (8004bfc <pvPortMalloc+0x1b0>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a18      	ldr	r2, [pc, #96]	; (8004c04 <pvPortMalloc+0x1b8>)
 8004ba4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba8:	685a      	ldr	r2, [r3, #4]
 8004baa:	4b13      	ldr	r3, [pc, #76]	; (8004bf8 <pvPortMalloc+0x1ac>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004bba:	4b13      	ldr	r3, [pc, #76]	; (8004c08 <pvPortMalloc+0x1bc>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	4a11      	ldr	r2, [pc, #68]	; (8004c08 <pvPortMalloc+0x1bc>)
 8004bc2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004bc4:	f7fe fd36 	bl	8003634 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	f003 0307 	and.w	r3, r3, #7
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00a      	beq.n	8004be8 <pvPortMalloc+0x19c>
        __asm volatile
 8004bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd6:	f383 8811 	msr	BASEPRI, r3
 8004bda:	f3bf 8f6f 	isb	sy
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	60fb      	str	r3, [r7, #12]
    }
 8004be4:	bf00      	nop
 8004be6:	e7fe      	b.n	8004be6 <pvPortMalloc+0x19a>
    return pvReturn;
 8004be8:	69fb      	ldr	r3, [r7, #28]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3728      	adds	r7, #40	; 0x28
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	20012de8 	.word	0x20012de8
 8004bf8:	20012dfc 	.word	0x20012dfc
 8004bfc:	20012dec 	.word	0x20012dec
 8004c00:	20012de0 	.word	0x20012de0
 8004c04:	20012df0 	.word	0x20012df0
 8004c08:	20012df4 	.word	0x20012df4

08004c0c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b086      	sub	sp, #24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d04d      	beq.n	8004cba <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004c1e:	2308      	movs	r3, #8
 8004c20:	425b      	negs	r3, r3
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	4413      	add	r3, r2
 8004c26:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	4b24      	ldr	r3, [pc, #144]	; (8004cc4 <vPortFree+0xb8>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4013      	ands	r3, r2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10a      	bne.n	8004c50 <vPortFree+0x44>
        __asm volatile
 8004c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3e:	f383 8811 	msr	BASEPRI, r3
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	60fb      	str	r3, [r7, #12]
    }
 8004c4c:	bf00      	nop
 8004c4e:	e7fe      	b.n	8004c4e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00a      	beq.n	8004c6e <vPortFree+0x62>
        __asm volatile
 8004c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5c:	f383 8811 	msr	BASEPRI, r3
 8004c60:	f3bf 8f6f 	isb	sy
 8004c64:	f3bf 8f4f 	dsb	sy
 8004c68:	60bb      	str	r3, [r7, #8]
    }
 8004c6a:	bf00      	nop
 8004c6c:	e7fe      	b.n	8004c6c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	4b14      	ldr	r3, [pc, #80]	; (8004cc4 <vPortFree+0xb8>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4013      	ands	r3, r2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d01e      	beq.n	8004cba <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d11a      	bne.n	8004cba <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	4b0e      	ldr	r3, [pc, #56]	; (8004cc4 <vPortFree+0xb8>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	43db      	mvns	r3, r3
 8004c8e:	401a      	ands	r2, r3
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004c94:	f7fe fcc0 	bl	8003618 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	4b0a      	ldr	r3, [pc, #40]	; (8004cc8 <vPortFree+0xbc>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	4a09      	ldr	r2, [pc, #36]	; (8004cc8 <vPortFree+0xbc>)
 8004ca4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004ca6:	6938      	ldr	r0, [r7, #16]
 8004ca8:	f000 f874 	bl	8004d94 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004cac:	4b07      	ldr	r3, [pc, #28]	; (8004ccc <vPortFree+0xc0>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	4a06      	ldr	r2, [pc, #24]	; (8004ccc <vPortFree+0xc0>)
 8004cb4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004cb6:	f7fe fcbd 	bl	8003634 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004cba:	bf00      	nop
 8004cbc:	3718      	adds	r7, #24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	20012dfc 	.word	0x20012dfc
 8004cc8:	20012dec 	.word	0x20012dec
 8004ccc:	20012df8 	.word	0x20012df8

08004cd0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004cd6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004cda:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004cdc:	4b27      	ldr	r3, [pc, #156]	; (8004d7c <prvHeapInit+0xac>)
 8004cde:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f003 0307 	and.w	r3, r3, #7
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00c      	beq.n	8004d04 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	3307      	adds	r3, #7
 8004cee:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f023 0307 	bic.w	r3, r3, #7
 8004cf6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	4a1f      	ldr	r2, [pc, #124]	; (8004d7c <prvHeapInit+0xac>)
 8004d00:	4413      	add	r3, r2
 8004d02:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d08:	4a1d      	ldr	r2, [pc, #116]	; (8004d80 <prvHeapInit+0xb0>)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004d0e:	4b1c      	ldr	r3, [pc, #112]	; (8004d80 <prvHeapInit+0xb0>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	4413      	add	r3, r2
 8004d1a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004d1c:	2208      	movs	r2, #8
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	1a9b      	subs	r3, r3, r2
 8004d22:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f023 0307 	bic.w	r3, r3, #7
 8004d2a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	4a15      	ldr	r2, [pc, #84]	; (8004d84 <prvHeapInit+0xb4>)
 8004d30:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004d32:	4b14      	ldr	r3, [pc, #80]	; (8004d84 <prvHeapInit+0xb4>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2200      	movs	r2, #0
 8004d38:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004d3a:	4b12      	ldr	r3, [pc, #72]	; (8004d84 <prvHeapInit+0xb4>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	1ad2      	subs	r2, r2, r3
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d50:	4b0c      	ldr	r3, [pc, #48]	; (8004d84 <prvHeapInit+0xb4>)
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	4a0a      	ldr	r2, [pc, #40]	; (8004d88 <prvHeapInit+0xb8>)
 8004d5e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	4a09      	ldr	r2, [pc, #36]	; (8004d8c <prvHeapInit+0xbc>)
 8004d66:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d68:	4b09      	ldr	r3, [pc, #36]	; (8004d90 <prvHeapInit+0xc0>)
 8004d6a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d6e:	601a      	str	r2, [r3, #0]
}
 8004d70:	bf00      	nop
 8004d72:	3714      	adds	r7, #20
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr
 8004d7c:	200001e0 	.word	0x200001e0
 8004d80:	20012de0 	.word	0x20012de0
 8004d84:	20012de8 	.word	0x20012de8
 8004d88:	20012df0 	.word	0x20012df0
 8004d8c:	20012dec 	.word	0x20012dec
 8004d90:	20012dfc 	.word	0x20012dfc

08004d94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d9c:	4b28      	ldr	r3, [pc, #160]	; (8004e40 <prvInsertBlockIntoFreeList+0xac>)
 8004d9e:	60fb      	str	r3, [r7, #12]
 8004da0:	e002      	b.n	8004da8 <prvInsertBlockIntoFreeList+0x14>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	60fb      	str	r3, [r7, #12]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d8f7      	bhi.n	8004da2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d108      	bne.n	8004dd6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	441a      	add	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	441a      	add	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d118      	bne.n	8004e1c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	4b15      	ldr	r3, [pc, #84]	; (8004e44 <prvInsertBlockIntoFreeList+0xb0>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d00d      	beq.n	8004e12 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	441a      	add	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	e008      	b.n	8004e24 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e12:	4b0c      	ldr	r3, [pc, #48]	; (8004e44 <prvInsertBlockIntoFreeList+0xb0>)
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	601a      	str	r2, [r3, #0]
 8004e1a:	e003      	b.n	8004e24 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d002      	beq.n	8004e32 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004e32:	bf00      	nop
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	20012de0 	.word	0x20012de0
 8004e44:	20012de8 	.word	0x20012de8

08004e48 <__errno>:
 8004e48:	4b01      	ldr	r3, [pc, #4]	; (8004e50 <__errno+0x8>)
 8004e4a:	6818      	ldr	r0, [r3, #0]
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	20000014 	.word	0x20000014

08004e54 <__libc_init_array>:
 8004e54:	b570      	push	{r4, r5, r6, lr}
 8004e56:	4d0d      	ldr	r5, [pc, #52]	; (8004e8c <__libc_init_array+0x38>)
 8004e58:	4c0d      	ldr	r4, [pc, #52]	; (8004e90 <__libc_init_array+0x3c>)
 8004e5a:	1b64      	subs	r4, r4, r5
 8004e5c:	10a4      	asrs	r4, r4, #2
 8004e5e:	2600      	movs	r6, #0
 8004e60:	42a6      	cmp	r6, r4
 8004e62:	d109      	bne.n	8004e78 <__libc_init_array+0x24>
 8004e64:	4d0b      	ldr	r5, [pc, #44]	; (8004e94 <__libc_init_array+0x40>)
 8004e66:	4c0c      	ldr	r4, [pc, #48]	; (8004e98 <__libc_init_array+0x44>)
 8004e68:	f001 f8ec 	bl	8006044 <_init>
 8004e6c:	1b64      	subs	r4, r4, r5
 8004e6e:	10a4      	asrs	r4, r4, #2
 8004e70:	2600      	movs	r6, #0
 8004e72:	42a6      	cmp	r6, r4
 8004e74:	d105      	bne.n	8004e82 <__libc_init_array+0x2e>
 8004e76:	bd70      	pop	{r4, r5, r6, pc}
 8004e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e7c:	4798      	blx	r3
 8004e7e:	3601      	adds	r6, #1
 8004e80:	e7ee      	b.n	8004e60 <__libc_init_array+0xc>
 8004e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e86:	4798      	blx	r3
 8004e88:	3601      	adds	r6, #1
 8004e8a:	e7f2      	b.n	8004e72 <__libc_init_array+0x1e>
 8004e8c:	08006234 	.word	0x08006234
 8004e90:	08006234 	.word	0x08006234
 8004e94:	08006234 	.word	0x08006234
 8004e98:	08006238 	.word	0x08006238

08004e9c <memcpy>:
 8004e9c:	440a      	add	r2, r1
 8004e9e:	4291      	cmp	r1, r2
 8004ea0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ea4:	d100      	bne.n	8004ea8 <memcpy+0xc>
 8004ea6:	4770      	bx	lr
 8004ea8:	b510      	push	{r4, lr}
 8004eaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004eae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004eb2:	4291      	cmp	r1, r2
 8004eb4:	d1f9      	bne.n	8004eaa <memcpy+0xe>
 8004eb6:	bd10      	pop	{r4, pc}

08004eb8 <memset>:
 8004eb8:	4402      	add	r2, r0
 8004eba:	4603      	mov	r3, r0
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d100      	bne.n	8004ec2 <memset+0xa>
 8004ec0:	4770      	bx	lr
 8004ec2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ec6:	e7f9      	b.n	8004ebc <memset+0x4>

08004ec8 <iprintf>:
 8004ec8:	b40f      	push	{r0, r1, r2, r3}
 8004eca:	4b0a      	ldr	r3, [pc, #40]	; (8004ef4 <iprintf+0x2c>)
 8004ecc:	b513      	push	{r0, r1, r4, lr}
 8004ece:	681c      	ldr	r4, [r3, #0]
 8004ed0:	b124      	cbz	r4, 8004edc <iprintf+0x14>
 8004ed2:	69a3      	ldr	r3, [r4, #24]
 8004ed4:	b913      	cbnz	r3, 8004edc <iprintf+0x14>
 8004ed6:	4620      	mov	r0, r4
 8004ed8:	f000 faea 	bl	80054b0 <__sinit>
 8004edc:	ab05      	add	r3, sp, #20
 8004ede:	9a04      	ldr	r2, [sp, #16]
 8004ee0:	68a1      	ldr	r1, [r4, #8]
 8004ee2:	9301      	str	r3, [sp, #4]
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	f000 fcd5 	bl	8005894 <_vfiprintf_r>
 8004eea:	b002      	add	sp, #8
 8004eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ef0:	b004      	add	sp, #16
 8004ef2:	4770      	bx	lr
 8004ef4:	20000014 	.word	0x20000014

08004ef8 <_puts_r>:
 8004ef8:	b570      	push	{r4, r5, r6, lr}
 8004efa:	460e      	mov	r6, r1
 8004efc:	4605      	mov	r5, r0
 8004efe:	b118      	cbz	r0, 8004f08 <_puts_r+0x10>
 8004f00:	6983      	ldr	r3, [r0, #24]
 8004f02:	b90b      	cbnz	r3, 8004f08 <_puts_r+0x10>
 8004f04:	f000 fad4 	bl	80054b0 <__sinit>
 8004f08:	69ab      	ldr	r3, [r5, #24]
 8004f0a:	68ac      	ldr	r4, [r5, #8]
 8004f0c:	b913      	cbnz	r3, 8004f14 <_puts_r+0x1c>
 8004f0e:	4628      	mov	r0, r5
 8004f10:	f000 face 	bl	80054b0 <__sinit>
 8004f14:	4b2c      	ldr	r3, [pc, #176]	; (8004fc8 <_puts_r+0xd0>)
 8004f16:	429c      	cmp	r4, r3
 8004f18:	d120      	bne.n	8004f5c <_puts_r+0x64>
 8004f1a:	686c      	ldr	r4, [r5, #4]
 8004f1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f1e:	07db      	lsls	r3, r3, #31
 8004f20:	d405      	bmi.n	8004f2e <_puts_r+0x36>
 8004f22:	89a3      	ldrh	r3, [r4, #12]
 8004f24:	0598      	lsls	r0, r3, #22
 8004f26:	d402      	bmi.n	8004f2e <_puts_r+0x36>
 8004f28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f2a:	f000 fb71 	bl	8005610 <__retarget_lock_acquire_recursive>
 8004f2e:	89a3      	ldrh	r3, [r4, #12]
 8004f30:	0719      	lsls	r1, r3, #28
 8004f32:	d51d      	bpl.n	8004f70 <_puts_r+0x78>
 8004f34:	6923      	ldr	r3, [r4, #16]
 8004f36:	b1db      	cbz	r3, 8004f70 <_puts_r+0x78>
 8004f38:	3e01      	subs	r6, #1
 8004f3a:	68a3      	ldr	r3, [r4, #8]
 8004f3c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004f40:	3b01      	subs	r3, #1
 8004f42:	60a3      	str	r3, [r4, #8]
 8004f44:	bb39      	cbnz	r1, 8004f96 <_puts_r+0x9e>
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	da38      	bge.n	8004fbc <_puts_r+0xc4>
 8004f4a:	4622      	mov	r2, r4
 8004f4c:	210a      	movs	r1, #10
 8004f4e:	4628      	mov	r0, r5
 8004f50:	f000 f8b6 	bl	80050c0 <__swbuf_r>
 8004f54:	3001      	adds	r0, #1
 8004f56:	d011      	beq.n	8004f7c <_puts_r+0x84>
 8004f58:	250a      	movs	r5, #10
 8004f5a:	e011      	b.n	8004f80 <_puts_r+0x88>
 8004f5c:	4b1b      	ldr	r3, [pc, #108]	; (8004fcc <_puts_r+0xd4>)
 8004f5e:	429c      	cmp	r4, r3
 8004f60:	d101      	bne.n	8004f66 <_puts_r+0x6e>
 8004f62:	68ac      	ldr	r4, [r5, #8]
 8004f64:	e7da      	b.n	8004f1c <_puts_r+0x24>
 8004f66:	4b1a      	ldr	r3, [pc, #104]	; (8004fd0 <_puts_r+0xd8>)
 8004f68:	429c      	cmp	r4, r3
 8004f6a:	bf08      	it	eq
 8004f6c:	68ec      	ldreq	r4, [r5, #12]
 8004f6e:	e7d5      	b.n	8004f1c <_puts_r+0x24>
 8004f70:	4621      	mov	r1, r4
 8004f72:	4628      	mov	r0, r5
 8004f74:	f000 f8f6 	bl	8005164 <__swsetup_r>
 8004f78:	2800      	cmp	r0, #0
 8004f7a:	d0dd      	beq.n	8004f38 <_puts_r+0x40>
 8004f7c:	f04f 35ff 	mov.w	r5, #4294967295
 8004f80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f82:	07da      	lsls	r2, r3, #31
 8004f84:	d405      	bmi.n	8004f92 <_puts_r+0x9a>
 8004f86:	89a3      	ldrh	r3, [r4, #12]
 8004f88:	059b      	lsls	r3, r3, #22
 8004f8a:	d402      	bmi.n	8004f92 <_puts_r+0x9a>
 8004f8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f8e:	f000 fb40 	bl	8005612 <__retarget_lock_release_recursive>
 8004f92:	4628      	mov	r0, r5
 8004f94:	bd70      	pop	{r4, r5, r6, pc}
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	da04      	bge.n	8004fa4 <_puts_r+0xac>
 8004f9a:	69a2      	ldr	r2, [r4, #24]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	dc06      	bgt.n	8004fae <_puts_r+0xb6>
 8004fa0:	290a      	cmp	r1, #10
 8004fa2:	d004      	beq.n	8004fae <_puts_r+0xb6>
 8004fa4:	6823      	ldr	r3, [r4, #0]
 8004fa6:	1c5a      	adds	r2, r3, #1
 8004fa8:	6022      	str	r2, [r4, #0]
 8004faa:	7019      	strb	r1, [r3, #0]
 8004fac:	e7c5      	b.n	8004f3a <_puts_r+0x42>
 8004fae:	4622      	mov	r2, r4
 8004fb0:	4628      	mov	r0, r5
 8004fb2:	f000 f885 	bl	80050c0 <__swbuf_r>
 8004fb6:	3001      	adds	r0, #1
 8004fb8:	d1bf      	bne.n	8004f3a <_puts_r+0x42>
 8004fba:	e7df      	b.n	8004f7c <_puts_r+0x84>
 8004fbc:	6823      	ldr	r3, [r4, #0]
 8004fbe:	250a      	movs	r5, #10
 8004fc0:	1c5a      	adds	r2, r3, #1
 8004fc2:	6022      	str	r2, [r4, #0]
 8004fc4:	701d      	strb	r5, [r3, #0]
 8004fc6:	e7db      	b.n	8004f80 <_puts_r+0x88>
 8004fc8:	080061b8 	.word	0x080061b8
 8004fcc:	080061d8 	.word	0x080061d8
 8004fd0:	08006198 	.word	0x08006198

08004fd4 <puts>:
 8004fd4:	4b02      	ldr	r3, [pc, #8]	; (8004fe0 <puts+0xc>)
 8004fd6:	4601      	mov	r1, r0
 8004fd8:	6818      	ldr	r0, [r3, #0]
 8004fda:	f7ff bf8d 	b.w	8004ef8 <_puts_r>
 8004fde:	bf00      	nop
 8004fe0:	20000014 	.word	0x20000014

08004fe4 <srand>:
 8004fe4:	b538      	push	{r3, r4, r5, lr}
 8004fe6:	4b10      	ldr	r3, [pc, #64]	; (8005028 <srand+0x44>)
 8004fe8:	681d      	ldr	r5, [r3, #0]
 8004fea:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004fec:	4604      	mov	r4, r0
 8004fee:	b9b3      	cbnz	r3, 800501e <srand+0x3a>
 8004ff0:	2018      	movs	r0, #24
 8004ff2:	f000 fb73 	bl	80056dc <malloc>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	63a8      	str	r0, [r5, #56]	; 0x38
 8004ffa:	b920      	cbnz	r0, 8005006 <srand+0x22>
 8004ffc:	4b0b      	ldr	r3, [pc, #44]	; (800502c <srand+0x48>)
 8004ffe:	480c      	ldr	r0, [pc, #48]	; (8005030 <srand+0x4c>)
 8005000:	2142      	movs	r1, #66	; 0x42
 8005002:	f000 f91d 	bl	8005240 <__assert_func>
 8005006:	490b      	ldr	r1, [pc, #44]	; (8005034 <srand+0x50>)
 8005008:	4b0b      	ldr	r3, [pc, #44]	; (8005038 <srand+0x54>)
 800500a:	e9c0 1300 	strd	r1, r3, [r0]
 800500e:	4b0b      	ldr	r3, [pc, #44]	; (800503c <srand+0x58>)
 8005010:	6083      	str	r3, [r0, #8]
 8005012:	230b      	movs	r3, #11
 8005014:	8183      	strh	r3, [r0, #12]
 8005016:	2100      	movs	r1, #0
 8005018:	2001      	movs	r0, #1
 800501a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800501e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005020:	2200      	movs	r2, #0
 8005022:	611c      	str	r4, [r3, #16]
 8005024:	615a      	str	r2, [r3, #20]
 8005026:	bd38      	pop	{r3, r4, r5, pc}
 8005028:	20000014 	.word	0x20000014
 800502c:	080060e4 	.word	0x080060e4
 8005030:	080060fb 	.word	0x080060fb
 8005034:	abcd330e 	.word	0xabcd330e
 8005038:	e66d1234 	.word	0xe66d1234
 800503c:	0005deec 	.word	0x0005deec

08005040 <rand>:
 8005040:	4b17      	ldr	r3, [pc, #92]	; (80050a0 <rand+0x60>)
 8005042:	b510      	push	{r4, lr}
 8005044:	681c      	ldr	r4, [r3, #0]
 8005046:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005048:	b9b3      	cbnz	r3, 8005078 <rand+0x38>
 800504a:	2018      	movs	r0, #24
 800504c:	f000 fb46 	bl	80056dc <malloc>
 8005050:	63a0      	str	r0, [r4, #56]	; 0x38
 8005052:	b928      	cbnz	r0, 8005060 <rand+0x20>
 8005054:	4602      	mov	r2, r0
 8005056:	4b13      	ldr	r3, [pc, #76]	; (80050a4 <rand+0x64>)
 8005058:	4813      	ldr	r0, [pc, #76]	; (80050a8 <rand+0x68>)
 800505a:	214e      	movs	r1, #78	; 0x4e
 800505c:	f000 f8f0 	bl	8005240 <__assert_func>
 8005060:	4a12      	ldr	r2, [pc, #72]	; (80050ac <rand+0x6c>)
 8005062:	4b13      	ldr	r3, [pc, #76]	; (80050b0 <rand+0x70>)
 8005064:	e9c0 2300 	strd	r2, r3, [r0]
 8005068:	4b12      	ldr	r3, [pc, #72]	; (80050b4 <rand+0x74>)
 800506a:	6083      	str	r3, [r0, #8]
 800506c:	230b      	movs	r3, #11
 800506e:	8183      	strh	r3, [r0, #12]
 8005070:	2201      	movs	r2, #1
 8005072:	2300      	movs	r3, #0
 8005074:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005078:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800507a:	480f      	ldr	r0, [pc, #60]	; (80050b8 <rand+0x78>)
 800507c:	690a      	ldr	r2, [r1, #16]
 800507e:	694b      	ldr	r3, [r1, #20]
 8005080:	4c0e      	ldr	r4, [pc, #56]	; (80050bc <rand+0x7c>)
 8005082:	4350      	muls	r0, r2
 8005084:	fb04 0003 	mla	r0, r4, r3, r0
 8005088:	fba2 3404 	umull	r3, r4, r2, r4
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	4404      	add	r4, r0
 8005090:	f144 0000 	adc.w	r0, r4, #0
 8005094:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8005098:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800509c:	bd10      	pop	{r4, pc}
 800509e:	bf00      	nop
 80050a0:	20000014 	.word	0x20000014
 80050a4:	080060e4 	.word	0x080060e4
 80050a8:	080060fb 	.word	0x080060fb
 80050ac:	abcd330e 	.word	0xabcd330e
 80050b0:	e66d1234 	.word	0xe66d1234
 80050b4:	0005deec 	.word	0x0005deec
 80050b8:	5851f42d 	.word	0x5851f42d
 80050bc:	4c957f2d 	.word	0x4c957f2d

080050c0 <__swbuf_r>:
 80050c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c2:	460e      	mov	r6, r1
 80050c4:	4614      	mov	r4, r2
 80050c6:	4605      	mov	r5, r0
 80050c8:	b118      	cbz	r0, 80050d2 <__swbuf_r+0x12>
 80050ca:	6983      	ldr	r3, [r0, #24]
 80050cc:	b90b      	cbnz	r3, 80050d2 <__swbuf_r+0x12>
 80050ce:	f000 f9ef 	bl	80054b0 <__sinit>
 80050d2:	4b21      	ldr	r3, [pc, #132]	; (8005158 <__swbuf_r+0x98>)
 80050d4:	429c      	cmp	r4, r3
 80050d6:	d12b      	bne.n	8005130 <__swbuf_r+0x70>
 80050d8:	686c      	ldr	r4, [r5, #4]
 80050da:	69a3      	ldr	r3, [r4, #24]
 80050dc:	60a3      	str	r3, [r4, #8]
 80050de:	89a3      	ldrh	r3, [r4, #12]
 80050e0:	071a      	lsls	r2, r3, #28
 80050e2:	d52f      	bpl.n	8005144 <__swbuf_r+0x84>
 80050e4:	6923      	ldr	r3, [r4, #16]
 80050e6:	b36b      	cbz	r3, 8005144 <__swbuf_r+0x84>
 80050e8:	6923      	ldr	r3, [r4, #16]
 80050ea:	6820      	ldr	r0, [r4, #0]
 80050ec:	1ac0      	subs	r0, r0, r3
 80050ee:	6963      	ldr	r3, [r4, #20]
 80050f0:	b2f6      	uxtb	r6, r6
 80050f2:	4283      	cmp	r3, r0
 80050f4:	4637      	mov	r7, r6
 80050f6:	dc04      	bgt.n	8005102 <__swbuf_r+0x42>
 80050f8:	4621      	mov	r1, r4
 80050fa:	4628      	mov	r0, r5
 80050fc:	f000 f944 	bl	8005388 <_fflush_r>
 8005100:	bb30      	cbnz	r0, 8005150 <__swbuf_r+0x90>
 8005102:	68a3      	ldr	r3, [r4, #8]
 8005104:	3b01      	subs	r3, #1
 8005106:	60a3      	str	r3, [r4, #8]
 8005108:	6823      	ldr	r3, [r4, #0]
 800510a:	1c5a      	adds	r2, r3, #1
 800510c:	6022      	str	r2, [r4, #0]
 800510e:	701e      	strb	r6, [r3, #0]
 8005110:	6963      	ldr	r3, [r4, #20]
 8005112:	3001      	adds	r0, #1
 8005114:	4283      	cmp	r3, r0
 8005116:	d004      	beq.n	8005122 <__swbuf_r+0x62>
 8005118:	89a3      	ldrh	r3, [r4, #12]
 800511a:	07db      	lsls	r3, r3, #31
 800511c:	d506      	bpl.n	800512c <__swbuf_r+0x6c>
 800511e:	2e0a      	cmp	r6, #10
 8005120:	d104      	bne.n	800512c <__swbuf_r+0x6c>
 8005122:	4621      	mov	r1, r4
 8005124:	4628      	mov	r0, r5
 8005126:	f000 f92f 	bl	8005388 <_fflush_r>
 800512a:	b988      	cbnz	r0, 8005150 <__swbuf_r+0x90>
 800512c:	4638      	mov	r0, r7
 800512e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005130:	4b0a      	ldr	r3, [pc, #40]	; (800515c <__swbuf_r+0x9c>)
 8005132:	429c      	cmp	r4, r3
 8005134:	d101      	bne.n	800513a <__swbuf_r+0x7a>
 8005136:	68ac      	ldr	r4, [r5, #8]
 8005138:	e7cf      	b.n	80050da <__swbuf_r+0x1a>
 800513a:	4b09      	ldr	r3, [pc, #36]	; (8005160 <__swbuf_r+0xa0>)
 800513c:	429c      	cmp	r4, r3
 800513e:	bf08      	it	eq
 8005140:	68ec      	ldreq	r4, [r5, #12]
 8005142:	e7ca      	b.n	80050da <__swbuf_r+0x1a>
 8005144:	4621      	mov	r1, r4
 8005146:	4628      	mov	r0, r5
 8005148:	f000 f80c 	bl	8005164 <__swsetup_r>
 800514c:	2800      	cmp	r0, #0
 800514e:	d0cb      	beq.n	80050e8 <__swbuf_r+0x28>
 8005150:	f04f 37ff 	mov.w	r7, #4294967295
 8005154:	e7ea      	b.n	800512c <__swbuf_r+0x6c>
 8005156:	bf00      	nop
 8005158:	080061b8 	.word	0x080061b8
 800515c:	080061d8 	.word	0x080061d8
 8005160:	08006198 	.word	0x08006198

08005164 <__swsetup_r>:
 8005164:	4b32      	ldr	r3, [pc, #200]	; (8005230 <__swsetup_r+0xcc>)
 8005166:	b570      	push	{r4, r5, r6, lr}
 8005168:	681d      	ldr	r5, [r3, #0]
 800516a:	4606      	mov	r6, r0
 800516c:	460c      	mov	r4, r1
 800516e:	b125      	cbz	r5, 800517a <__swsetup_r+0x16>
 8005170:	69ab      	ldr	r3, [r5, #24]
 8005172:	b913      	cbnz	r3, 800517a <__swsetup_r+0x16>
 8005174:	4628      	mov	r0, r5
 8005176:	f000 f99b 	bl	80054b0 <__sinit>
 800517a:	4b2e      	ldr	r3, [pc, #184]	; (8005234 <__swsetup_r+0xd0>)
 800517c:	429c      	cmp	r4, r3
 800517e:	d10f      	bne.n	80051a0 <__swsetup_r+0x3c>
 8005180:	686c      	ldr	r4, [r5, #4]
 8005182:	89a3      	ldrh	r3, [r4, #12]
 8005184:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005188:	0719      	lsls	r1, r3, #28
 800518a:	d42c      	bmi.n	80051e6 <__swsetup_r+0x82>
 800518c:	06dd      	lsls	r5, r3, #27
 800518e:	d411      	bmi.n	80051b4 <__swsetup_r+0x50>
 8005190:	2309      	movs	r3, #9
 8005192:	6033      	str	r3, [r6, #0]
 8005194:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005198:	81a3      	strh	r3, [r4, #12]
 800519a:	f04f 30ff 	mov.w	r0, #4294967295
 800519e:	e03e      	b.n	800521e <__swsetup_r+0xba>
 80051a0:	4b25      	ldr	r3, [pc, #148]	; (8005238 <__swsetup_r+0xd4>)
 80051a2:	429c      	cmp	r4, r3
 80051a4:	d101      	bne.n	80051aa <__swsetup_r+0x46>
 80051a6:	68ac      	ldr	r4, [r5, #8]
 80051a8:	e7eb      	b.n	8005182 <__swsetup_r+0x1e>
 80051aa:	4b24      	ldr	r3, [pc, #144]	; (800523c <__swsetup_r+0xd8>)
 80051ac:	429c      	cmp	r4, r3
 80051ae:	bf08      	it	eq
 80051b0:	68ec      	ldreq	r4, [r5, #12]
 80051b2:	e7e6      	b.n	8005182 <__swsetup_r+0x1e>
 80051b4:	0758      	lsls	r0, r3, #29
 80051b6:	d512      	bpl.n	80051de <__swsetup_r+0x7a>
 80051b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051ba:	b141      	cbz	r1, 80051ce <__swsetup_r+0x6a>
 80051bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051c0:	4299      	cmp	r1, r3
 80051c2:	d002      	beq.n	80051ca <__swsetup_r+0x66>
 80051c4:	4630      	mov	r0, r6
 80051c6:	f000 fa91 	bl	80056ec <_free_r>
 80051ca:	2300      	movs	r3, #0
 80051cc:	6363      	str	r3, [r4, #52]	; 0x34
 80051ce:	89a3      	ldrh	r3, [r4, #12]
 80051d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80051d4:	81a3      	strh	r3, [r4, #12]
 80051d6:	2300      	movs	r3, #0
 80051d8:	6063      	str	r3, [r4, #4]
 80051da:	6923      	ldr	r3, [r4, #16]
 80051dc:	6023      	str	r3, [r4, #0]
 80051de:	89a3      	ldrh	r3, [r4, #12]
 80051e0:	f043 0308 	orr.w	r3, r3, #8
 80051e4:	81a3      	strh	r3, [r4, #12]
 80051e6:	6923      	ldr	r3, [r4, #16]
 80051e8:	b94b      	cbnz	r3, 80051fe <__swsetup_r+0x9a>
 80051ea:	89a3      	ldrh	r3, [r4, #12]
 80051ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80051f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051f4:	d003      	beq.n	80051fe <__swsetup_r+0x9a>
 80051f6:	4621      	mov	r1, r4
 80051f8:	4630      	mov	r0, r6
 80051fa:	f000 fa2f 	bl	800565c <__smakebuf_r>
 80051fe:	89a0      	ldrh	r0, [r4, #12]
 8005200:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005204:	f010 0301 	ands.w	r3, r0, #1
 8005208:	d00a      	beq.n	8005220 <__swsetup_r+0xbc>
 800520a:	2300      	movs	r3, #0
 800520c:	60a3      	str	r3, [r4, #8]
 800520e:	6963      	ldr	r3, [r4, #20]
 8005210:	425b      	negs	r3, r3
 8005212:	61a3      	str	r3, [r4, #24]
 8005214:	6923      	ldr	r3, [r4, #16]
 8005216:	b943      	cbnz	r3, 800522a <__swsetup_r+0xc6>
 8005218:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800521c:	d1ba      	bne.n	8005194 <__swsetup_r+0x30>
 800521e:	bd70      	pop	{r4, r5, r6, pc}
 8005220:	0781      	lsls	r1, r0, #30
 8005222:	bf58      	it	pl
 8005224:	6963      	ldrpl	r3, [r4, #20]
 8005226:	60a3      	str	r3, [r4, #8]
 8005228:	e7f4      	b.n	8005214 <__swsetup_r+0xb0>
 800522a:	2000      	movs	r0, #0
 800522c:	e7f7      	b.n	800521e <__swsetup_r+0xba>
 800522e:	bf00      	nop
 8005230:	20000014 	.word	0x20000014
 8005234:	080061b8 	.word	0x080061b8
 8005238:	080061d8 	.word	0x080061d8
 800523c:	08006198 	.word	0x08006198

08005240 <__assert_func>:
 8005240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005242:	4614      	mov	r4, r2
 8005244:	461a      	mov	r2, r3
 8005246:	4b09      	ldr	r3, [pc, #36]	; (800526c <__assert_func+0x2c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4605      	mov	r5, r0
 800524c:	68d8      	ldr	r0, [r3, #12]
 800524e:	b14c      	cbz	r4, 8005264 <__assert_func+0x24>
 8005250:	4b07      	ldr	r3, [pc, #28]	; (8005270 <__assert_func+0x30>)
 8005252:	9100      	str	r1, [sp, #0]
 8005254:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005258:	4906      	ldr	r1, [pc, #24]	; (8005274 <__assert_func+0x34>)
 800525a:	462b      	mov	r3, r5
 800525c:	f000 f9a6 	bl	80055ac <fiprintf>
 8005260:	f000 fe42 	bl	8005ee8 <abort>
 8005264:	4b04      	ldr	r3, [pc, #16]	; (8005278 <__assert_func+0x38>)
 8005266:	461c      	mov	r4, r3
 8005268:	e7f3      	b.n	8005252 <__assert_func+0x12>
 800526a:	bf00      	nop
 800526c:	20000014 	.word	0x20000014
 8005270:	0800615a 	.word	0x0800615a
 8005274:	08006167 	.word	0x08006167
 8005278:	08006195 	.word	0x08006195

0800527c <__sflush_r>:
 800527c:	898a      	ldrh	r2, [r1, #12]
 800527e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005282:	4605      	mov	r5, r0
 8005284:	0710      	lsls	r0, r2, #28
 8005286:	460c      	mov	r4, r1
 8005288:	d458      	bmi.n	800533c <__sflush_r+0xc0>
 800528a:	684b      	ldr	r3, [r1, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	dc05      	bgt.n	800529c <__sflush_r+0x20>
 8005290:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005292:	2b00      	cmp	r3, #0
 8005294:	dc02      	bgt.n	800529c <__sflush_r+0x20>
 8005296:	2000      	movs	r0, #0
 8005298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800529c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800529e:	2e00      	cmp	r6, #0
 80052a0:	d0f9      	beq.n	8005296 <__sflush_r+0x1a>
 80052a2:	2300      	movs	r3, #0
 80052a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80052a8:	682f      	ldr	r7, [r5, #0]
 80052aa:	602b      	str	r3, [r5, #0]
 80052ac:	d032      	beq.n	8005314 <__sflush_r+0x98>
 80052ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80052b0:	89a3      	ldrh	r3, [r4, #12]
 80052b2:	075a      	lsls	r2, r3, #29
 80052b4:	d505      	bpl.n	80052c2 <__sflush_r+0x46>
 80052b6:	6863      	ldr	r3, [r4, #4]
 80052b8:	1ac0      	subs	r0, r0, r3
 80052ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052bc:	b10b      	cbz	r3, 80052c2 <__sflush_r+0x46>
 80052be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052c0:	1ac0      	subs	r0, r0, r3
 80052c2:	2300      	movs	r3, #0
 80052c4:	4602      	mov	r2, r0
 80052c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052c8:	6a21      	ldr	r1, [r4, #32]
 80052ca:	4628      	mov	r0, r5
 80052cc:	47b0      	blx	r6
 80052ce:	1c43      	adds	r3, r0, #1
 80052d0:	89a3      	ldrh	r3, [r4, #12]
 80052d2:	d106      	bne.n	80052e2 <__sflush_r+0x66>
 80052d4:	6829      	ldr	r1, [r5, #0]
 80052d6:	291d      	cmp	r1, #29
 80052d8:	d82c      	bhi.n	8005334 <__sflush_r+0xb8>
 80052da:	4a2a      	ldr	r2, [pc, #168]	; (8005384 <__sflush_r+0x108>)
 80052dc:	40ca      	lsrs	r2, r1
 80052de:	07d6      	lsls	r6, r2, #31
 80052e0:	d528      	bpl.n	8005334 <__sflush_r+0xb8>
 80052e2:	2200      	movs	r2, #0
 80052e4:	6062      	str	r2, [r4, #4]
 80052e6:	04d9      	lsls	r1, r3, #19
 80052e8:	6922      	ldr	r2, [r4, #16]
 80052ea:	6022      	str	r2, [r4, #0]
 80052ec:	d504      	bpl.n	80052f8 <__sflush_r+0x7c>
 80052ee:	1c42      	adds	r2, r0, #1
 80052f0:	d101      	bne.n	80052f6 <__sflush_r+0x7a>
 80052f2:	682b      	ldr	r3, [r5, #0]
 80052f4:	b903      	cbnz	r3, 80052f8 <__sflush_r+0x7c>
 80052f6:	6560      	str	r0, [r4, #84]	; 0x54
 80052f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052fa:	602f      	str	r7, [r5, #0]
 80052fc:	2900      	cmp	r1, #0
 80052fe:	d0ca      	beq.n	8005296 <__sflush_r+0x1a>
 8005300:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005304:	4299      	cmp	r1, r3
 8005306:	d002      	beq.n	800530e <__sflush_r+0x92>
 8005308:	4628      	mov	r0, r5
 800530a:	f000 f9ef 	bl	80056ec <_free_r>
 800530e:	2000      	movs	r0, #0
 8005310:	6360      	str	r0, [r4, #52]	; 0x34
 8005312:	e7c1      	b.n	8005298 <__sflush_r+0x1c>
 8005314:	6a21      	ldr	r1, [r4, #32]
 8005316:	2301      	movs	r3, #1
 8005318:	4628      	mov	r0, r5
 800531a:	47b0      	blx	r6
 800531c:	1c41      	adds	r1, r0, #1
 800531e:	d1c7      	bne.n	80052b0 <__sflush_r+0x34>
 8005320:	682b      	ldr	r3, [r5, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d0c4      	beq.n	80052b0 <__sflush_r+0x34>
 8005326:	2b1d      	cmp	r3, #29
 8005328:	d001      	beq.n	800532e <__sflush_r+0xb2>
 800532a:	2b16      	cmp	r3, #22
 800532c:	d101      	bne.n	8005332 <__sflush_r+0xb6>
 800532e:	602f      	str	r7, [r5, #0]
 8005330:	e7b1      	b.n	8005296 <__sflush_r+0x1a>
 8005332:	89a3      	ldrh	r3, [r4, #12]
 8005334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005338:	81a3      	strh	r3, [r4, #12]
 800533a:	e7ad      	b.n	8005298 <__sflush_r+0x1c>
 800533c:	690f      	ldr	r7, [r1, #16]
 800533e:	2f00      	cmp	r7, #0
 8005340:	d0a9      	beq.n	8005296 <__sflush_r+0x1a>
 8005342:	0793      	lsls	r3, r2, #30
 8005344:	680e      	ldr	r6, [r1, #0]
 8005346:	bf08      	it	eq
 8005348:	694b      	ldreq	r3, [r1, #20]
 800534a:	600f      	str	r7, [r1, #0]
 800534c:	bf18      	it	ne
 800534e:	2300      	movne	r3, #0
 8005350:	eba6 0807 	sub.w	r8, r6, r7
 8005354:	608b      	str	r3, [r1, #8]
 8005356:	f1b8 0f00 	cmp.w	r8, #0
 800535a:	dd9c      	ble.n	8005296 <__sflush_r+0x1a>
 800535c:	6a21      	ldr	r1, [r4, #32]
 800535e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005360:	4643      	mov	r3, r8
 8005362:	463a      	mov	r2, r7
 8005364:	4628      	mov	r0, r5
 8005366:	47b0      	blx	r6
 8005368:	2800      	cmp	r0, #0
 800536a:	dc06      	bgt.n	800537a <__sflush_r+0xfe>
 800536c:	89a3      	ldrh	r3, [r4, #12]
 800536e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005372:	81a3      	strh	r3, [r4, #12]
 8005374:	f04f 30ff 	mov.w	r0, #4294967295
 8005378:	e78e      	b.n	8005298 <__sflush_r+0x1c>
 800537a:	4407      	add	r7, r0
 800537c:	eba8 0800 	sub.w	r8, r8, r0
 8005380:	e7e9      	b.n	8005356 <__sflush_r+0xda>
 8005382:	bf00      	nop
 8005384:	20400001 	.word	0x20400001

08005388 <_fflush_r>:
 8005388:	b538      	push	{r3, r4, r5, lr}
 800538a:	690b      	ldr	r3, [r1, #16]
 800538c:	4605      	mov	r5, r0
 800538e:	460c      	mov	r4, r1
 8005390:	b913      	cbnz	r3, 8005398 <_fflush_r+0x10>
 8005392:	2500      	movs	r5, #0
 8005394:	4628      	mov	r0, r5
 8005396:	bd38      	pop	{r3, r4, r5, pc}
 8005398:	b118      	cbz	r0, 80053a2 <_fflush_r+0x1a>
 800539a:	6983      	ldr	r3, [r0, #24]
 800539c:	b90b      	cbnz	r3, 80053a2 <_fflush_r+0x1a>
 800539e:	f000 f887 	bl	80054b0 <__sinit>
 80053a2:	4b14      	ldr	r3, [pc, #80]	; (80053f4 <_fflush_r+0x6c>)
 80053a4:	429c      	cmp	r4, r3
 80053a6:	d11b      	bne.n	80053e0 <_fflush_r+0x58>
 80053a8:	686c      	ldr	r4, [r5, #4]
 80053aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d0ef      	beq.n	8005392 <_fflush_r+0xa>
 80053b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80053b4:	07d0      	lsls	r0, r2, #31
 80053b6:	d404      	bmi.n	80053c2 <_fflush_r+0x3a>
 80053b8:	0599      	lsls	r1, r3, #22
 80053ba:	d402      	bmi.n	80053c2 <_fflush_r+0x3a>
 80053bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053be:	f000 f927 	bl	8005610 <__retarget_lock_acquire_recursive>
 80053c2:	4628      	mov	r0, r5
 80053c4:	4621      	mov	r1, r4
 80053c6:	f7ff ff59 	bl	800527c <__sflush_r>
 80053ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053cc:	07da      	lsls	r2, r3, #31
 80053ce:	4605      	mov	r5, r0
 80053d0:	d4e0      	bmi.n	8005394 <_fflush_r+0xc>
 80053d2:	89a3      	ldrh	r3, [r4, #12]
 80053d4:	059b      	lsls	r3, r3, #22
 80053d6:	d4dd      	bmi.n	8005394 <_fflush_r+0xc>
 80053d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053da:	f000 f91a 	bl	8005612 <__retarget_lock_release_recursive>
 80053de:	e7d9      	b.n	8005394 <_fflush_r+0xc>
 80053e0:	4b05      	ldr	r3, [pc, #20]	; (80053f8 <_fflush_r+0x70>)
 80053e2:	429c      	cmp	r4, r3
 80053e4:	d101      	bne.n	80053ea <_fflush_r+0x62>
 80053e6:	68ac      	ldr	r4, [r5, #8]
 80053e8:	e7df      	b.n	80053aa <_fflush_r+0x22>
 80053ea:	4b04      	ldr	r3, [pc, #16]	; (80053fc <_fflush_r+0x74>)
 80053ec:	429c      	cmp	r4, r3
 80053ee:	bf08      	it	eq
 80053f0:	68ec      	ldreq	r4, [r5, #12]
 80053f2:	e7da      	b.n	80053aa <_fflush_r+0x22>
 80053f4:	080061b8 	.word	0x080061b8
 80053f8:	080061d8 	.word	0x080061d8
 80053fc:	08006198 	.word	0x08006198

08005400 <std>:
 8005400:	2300      	movs	r3, #0
 8005402:	b510      	push	{r4, lr}
 8005404:	4604      	mov	r4, r0
 8005406:	e9c0 3300 	strd	r3, r3, [r0]
 800540a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800540e:	6083      	str	r3, [r0, #8]
 8005410:	8181      	strh	r1, [r0, #12]
 8005412:	6643      	str	r3, [r0, #100]	; 0x64
 8005414:	81c2      	strh	r2, [r0, #14]
 8005416:	6183      	str	r3, [r0, #24]
 8005418:	4619      	mov	r1, r3
 800541a:	2208      	movs	r2, #8
 800541c:	305c      	adds	r0, #92	; 0x5c
 800541e:	f7ff fd4b 	bl	8004eb8 <memset>
 8005422:	4b05      	ldr	r3, [pc, #20]	; (8005438 <std+0x38>)
 8005424:	6263      	str	r3, [r4, #36]	; 0x24
 8005426:	4b05      	ldr	r3, [pc, #20]	; (800543c <std+0x3c>)
 8005428:	62a3      	str	r3, [r4, #40]	; 0x28
 800542a:	4b05      	ldr	r3, [pc, #20]	; (8005440 <std+0x40>)
 800542c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800542e:	4b05      	ldr	r3, [pc, #20]	; (8005444 <std+0x44>)
 8005430:	6224      	str	r4, [r4, #32]
 8005432:	6323      	str	r3, [r4, #48]	; 0x30
 8005434:	bd10      	pop	{r4, pc}
 8005436:	bf00      	nop
 8005438:	08005e3d 	.word	0x08005e3d
 800543c:	08005e5f 	.word	0x08005e5f
 8005440:	08005e97 	.word	0x08005e97
 8005444:	08005ebb 	.word	0x08005ebb

08005448 <_cleanup_r>:
 8005448:	4901      	ldr	r1, [pc, #4]	; (8005450 <_cleanup_r+0x8>)
 800544a:	f000 b8c1 	b.w	80055d0 <_fwalk_reent>
 800544e:	bf00      	nop
 8005450:	08005389 	.word	0x08005389

08005454 <__sfmoreglue>:
 8005454:	b570      	push	{r4, r5, r6, lr}
 8005456:	1e4a      	subs	r2, r1, #1
 8005458:	2568      	movs	r5, #104	; 0x68
 800545a:	4355      	muls	r5, r2
 800545c:	460e      	mov	r6, r1
 800545e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005462:	f000 f993 	bl	800578c <_malloc_r>
 8005466:	4604      	mov	r4, r0
 8005468:	b140      	cbz	r0, 800547c <__sfmoreglue+0x28>
 800546a:	2100      	movs	r1, #0
 800546c:	e9c0 1600 	strd	r1, r6, [r0]
 8005470:	300c      	adds	r0, #12
 8005472:	60a0      	str	r0, [r4, #8]
 8005474:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005478:	f7ff fd1e 	bl	8004eb8 <memset>
 800547c:	4620      	mov	r0, r4
 800547e:	bd70      	pop	{r4, r5, r6, pc}

08005480 <__sfp_lock_acquire>:
 8005480:	4801      	ldr	r0, [pc, #4]	; (8005488 <__sfp_lock_acquire+0x8>)
 8005482:	f000 b8c5 	b.w	8005610 <__retarget_lock_acquire_recursive>
 8005486:	bf00      	nop
 8005488:	20012eec 	.word	0x20012eec

0800548c <__sfp_lock_release>:
 800548c:	4801      	ldr	r0, [pc, #4]	; (8005494 <__sfp_lock_release+0x8>)
 800548e:	f000 b8c0 	b.w	8005612 <__retarget_lock_release_recursive>
 8005492:	bf00      	nop
 8005494:	20012eec 	.word	0x20012eec

08005498 <__sinit_lock_acquire>:
 8005498:	4801      	ldr	r0, [pc, #4]	; (80054a0 <__sinit_lock_acquire+0x8>)
 800549a:	f000 b8b9 	b.w	8005610 <__retarget_lock_acquire_recursive>
 800549e:	bf00      	nop
 80054a0:	20012ee7 	.word	0x20012ee7

080054a4 <__sinit_lock_release>:
 80054a4:	4801      	ldr	r0, [pc, #4]	; (80054ac <__sinit_lock_release+0x8>)
 80054a6:	f000 b8b4 	b.w	8005612 <__retarget_lock_release_recursive>
 80054aa:	bf00      	nop
 80054ac:	20012ee7 	.word	0x20012ee7

080054b0 <__sinit>:
 80054b0:	b510      	push	{r4, lr}
 80054b2:	4604      	mov	r4, r0
 80054b4:	f7ff fff0 	bl	8005498 <__sinit_lock_acquire>
 80054b8:	69a3      	ldr	r3, [r4, #24]
 80054ba:	b11b      	cbz	r3, 80054c4 <__sinit+0x14>
 80054bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054c0:	f7ff bff0 	b.w	80054a4 <__sinit_lock_release>
 80054c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80054c8:	6523      	str	r3, [r4, #80]	; 0x50
 80054ca:	4b13      	ldr	r3, [pc, #76]	; (8005518 <__sinit+0x68>)
 80054cc:	4a13      	ldr	r2, [pc, #76]	; (800551c <__sinit+0x6c>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80054d2:	42a3      	cmp	r3, r4
 80054d4:	bf04      	itt	eq
 80054d6:	2301      	moveq	r3, #1
 80054d8:	61a3      	streq	r3, [r4, #24]
 80054da:	4620      	mov	r0, r4
 80054dc:	f000 f820 	bl	8005520 <__sfp>
 80054e0:	6060      	str	r0, [r4, #4]
 80054e2:	4620      	mov	r0, r4
 80054e4:	f000 f81c 	bl	8005520 <__sfp>
 80054e8:	60a0      	str	r0, [r4, #8]
 80054ea:	4620      	mov	r0, r4
 80054ec:	f000 f818 	bl	8005520 <__sfp>
 80054f0:	2200      	movs	r2, #0
 80054f2:	60e0      	str	r0, [r4, #12]
 80054f4:	2104      	movs	r1, #4
 80054f6:	6860      	ldr	r0, [r4, #4]
 80054f8:	f7ff ff82 	bl	8005400 <std>
 80054fc:	68a0      	ldr	r0, [r4, #8]
 80054fe:	2201      	movs	r2, #1
 8005500:	2109      	movs	r1, #9
 8005502:	f7ff ff7d 	bl	8005400 <std>
 8005506:	68e0      	ldr	r0, [r4, #12]
 8005508:	2202      	movs	r2, #2
 800550a:	2112      	movs	r1, #18
 800550c:	f7ff ff78 	bl	8005400 <std>
 8005510:	2301      	movs	r3, #1
 8005512:	61a3      	str	r3, [r4, #24]
 8005514:	e7d2      	b.n	80054bc <__sinit+0xc>
 8005516:	bf00      	nop
 8005518:	080060e0 	.word	0x080060e0
 800551c:	08005449 	.word	0x08005449

08005520 <__sfp>:
 8005520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005522:	4607      	mov	r7, r0
 8005524:	f7ff ffac 	bl	8005480 <__sfp_lock_acquire>
 8005528:	4b1e      	ldr	r3, [pc, #120]	; (80055a4 <__sfp+0x84>)
 800552a:	681e      	ldr	r6, [r3, #0]
 800552c:	69b3      	ldr	r3, [r6, #24]
 800552e:	b913      	cbnz	r3, 8005536 <__sfp+0x16>
 8005530:	4630      	mov	r0, r6
 8005532:	f7ff ffbd 	bl	80054b0 <__sinit>
 8005536:	3648      	adds	r6, #72	; 0x48
 8005538:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800553c:	3b01      	subs	r3, #1
 800553e:	d503      	bpl.n	8005548 <__sfp+0x28>
 8005540:	6833      	ldr	r3, [r6, #0]
 8005542:	b30b      	cbz	r3, 8005588 <__sfp+0x68>
 8005544:	6836      	ldr	r6, [r6, #0]
 8005546:	e7f7      	b.n	8005538 <__sfp+0x18>
 8005548:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800554c:	b9d5      	cbnz	r5, 8005584 <__sfp+0x64>
 800554e:	4b16      	ldr	r3, [pc, #88]	; (80055a8 <__sfp+0x88>)
 8005550:	60e3      	str	r3, [r4, #12]
 8005552:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005556:	6665      	str	r5, [r4, #100]	; 0x64
 8005558:	f000 f859 	bl	800560e <__retarget_lock_init_recursive>
 800555c:	f7ff ff96 	bl	800548c <__sfp_lock_release>
 8005560:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005564:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005568:	6025      	str	r5, [r4, #0]
 800556a:	61a5      	str	r5, [r4, #24]
 800556c:	2208      	movs	r2, #8
 800556e:	4629      	mov	r1, r5
 8005570:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005574:	f7ff fca0 	bl	8004eb8 <memset>
 8005578:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800557c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005580:	4620      	mov	r0, r4
 8005582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005584:	3468      	adds	r4, #104	; 0x68
 8005586:	e7d9      	b.n	800553c <__sfp+0x1c>
 8005588:	2104      	movs	r1, #4
 800558a:	4638      	mov	r0, r7
 800558c:	f7ff ff62 	bl	8005454 <__sfmoreglue>
 8005590:	4604      	mov	r4, r0
 8005592:	6030      	str	r0, [r6, #0]
 8005594:	2800      	cmp	r0, #0
 8005596:	d1d5      	bne.n	8005544 <__sfp+0x24>
 8005598:	f7ff ff78 	bl	800548c <__sfp_lock_release>
 800559c:	230c      	movs	r3, #12
 800559e:	603b      	str	r3, [r7, #0]
 80055a0:	e7ee      	b.n	8005580 <__sfp+0x60>
 80055a2:	bf00      	nop
 80055a4:	080060e0 	.word	0x080060e0
 80055a8:	ffff0001 	.word	0xffff0001

080055ac <fiprintf>:
 80055ac:	b40e      	push	{r1, r2, r3}
 80055ae:	b503      	push	{r0, r1, lr}
 80055b0:	4601      	mov	r1, r0
 80055b2:	ab03      	add	r3, sp, #12
 80055b4:	4805      	ldr	r0, [pc, #20]	; (80055cc <fiprintf+0x20>)
 80055b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80055ba:	6800      	ldr	r0, [r0, #0]
 80055bc:	9301      	str	r3, [sp, #4]
 80055be:	f000 f969 	bl	8005894 <_vfiprintf_r>
 80055c2:	b002      	add	sp, #8
 80055c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80055c8:	b003      	add	sp, #12
 80055ca:	4770      	bx	lr
 80055cc:	20000014 	.word	0x20000014

080055d0 <_fwalk_reent>:
 80055d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055d4:	4606      	mov	r6, r0
 80055d6:	4688      	mov	r8, r1
 80055d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80055dc:	2700      	movs	r7, #0
 80055de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80055e2:	f1b9 0901 	subs.w	r9, r9, #1
 80055e6:	d505      	bpl.n	80055f4 <_fwalk_reent+0x24>
 80055e8:	6824      	ldr	r4, [r4, #0]
 80055ea:	2c00      	cmp	r4, #0
 80055ec:	d1f7      	bne.n	80055de <_fwalk_reent+0xe>
 80055ee:	4638      	mov	r0, r7
 80055f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055f4:	89ab      	ldrh	r3, [r5, #12]
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d907      	bls.n	800560a <_fwalk_reent+0x3a>
 80055fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80055fe:	3301      	adds	r3, #1
 8005600:	d003      	beq.n	800560a <_fwalk_reent+0x3a>
 8005602:	4629      	mov	r1, r5
 8005604:	4630      	mov	r0, r6
 8005606:	47c0      	blx	r8
 8005608:	4307      	orrs	r7, r0
 800560a:	3568      	adds	r5, #104	; 0x68
 800560c:	e7e9      	b.n	80055e2 <_fwalk_reent+0x12>

0800560e <__retarget_lock_init_recursive>:
 800560e:	4770      	bx	lr

08005610 <__retarget_lock_acquire_recursive>:
 8005610:	4770      	bx	lr

08005612 <__retarget_lock_release_recursive>:
 8005612:	4770      	bx	lr

08005614 <__swhatbuf_r>:
 8005614:	b570      	push	{r4, r5, r6, lr}
 8005616:	460e      	mov	r6, r1
 8005618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800561c:	2900      	cmp	r1, #0
 800561e:	b096      	sub	sp, #88	; 0x58
 8005620:	4614      	mov	r4, r2
 8005622:	461d      	mov	r5, r3
 8005624:	da07      	bge.n	8005636 <__swhatbuf_r+0x22>
 8005626:	2300      	movs	r3, #0
 8005628:	602b      	str	r3, [r5, #0]
 800562a:	89b3      	ldrh	r3, [r6, #12]
 800562c:	061a      	lsls	r2, r3, #24
 800562e:	d410      	bmi.n	8005652 <__swhatbuf_r+0x3e>
 8005630:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005634:	e00e      	b.n	8005654 <__swhatbuf_r+0x40>
 8005636:	466a      	mov	r2, sp
 8005638:	f000 fc6e 	bl	8005f18 <_fstat_r>
 800563c:	2800      	cmp	r0, #0
 800563e:	dbf2      	blt.n	8005626 <__swhatbuf_r+0x12>
 8005640:	9a01      	ldr	r2, [sp, #4]
 8005642:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005646:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800564a:	425a      	negs	r2, r3
 800564c:	415a      	adcs	r2, r3
 800564e:	602a      	str	r2, [r5, #0]
 8005650:	e7ee      	b.n	8005630 <__swhatbuf_r+0x1c>
 8005652:	2340      	movs	r3, #64	; 0x40
 8005654:	2000      	movs	r0, #0
 8005656:	6023      	str	r3, [r4, #0]
 8005658:	b016      	add	sp, #88	; 0x58
 800565a:	bd70      	pop	{r4, r5, r6, pc}

0800565c <__smakebuf_r>:
 800565c:	898b      	ldrh	r3, [r1, #12]
 800565e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005660:	079d      	lsls	r5, r3, #30
 8005662:	4606      	mov	r6, r0
 8005664:	460c      	mov	r4, r1
 8005666:	d507      	bpl.n	8005678 <__smakebuf_r+0x1c>
 8005668:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800566c:	6023      	str	r3, [r4, #0]
 800566e:	6123      	str	r3, [r4, #16]
 8005670:	2301      	movs	r3, #1
 8005672:	6163      	str	r3, [r4, #20]
 8005674:	b002      	add	sp, #8
 8005676:	bd70      	pop	{r4, r5, r6, pc}
 8005678:	ab01      	add	r3, sp, #4
 800567a:	466a      	mov	r2, sp
 800567c:	f7ff ffca 	bl	8005614 <__swhatbuf_r>
 8005680:	9900      	ldr	r1, [sp, #0]
 8005682:	4605      	mov	r5, r0
 8005684:	4630      	mov	r0, r6
 8005686:	f000 f881 	bl	800578c <_malloc_r>
 800568a:	b948      	cbnz	r0, 80056a0 <__smakebuf_r+0x44>
 800568c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005690:	059a      	lsls	r2, r3, #22
 8005692:	d4ef      	bmi.n	8005674 <__smakebuf_r+0x18>
 8005694:	f023 0303 	bic.w	r3, r3, #3
 8005698:	f043 0302 	orr.w	r3, r3, #2
 800569c:	81a3      	strh	r3, [r4, #12]
 800569e:	e7e3      	b.n	8005668 <__smakebuf_r+0xc>
 80056a0:	4b0d      	ldr	r3, [pc, #52]	; (80056d8 <__smakebuf_r+0x7c>)
 80056a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80056a4:	89a3      	ldrh	r3, [r4, #12]
 80056a6:	6020      	str	r0, [r4, #0]
 80056a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ac:	81a3      	strh	r3, [r4, #12]
 80056ae:	9b00      	ldr	r3, [sp, #0]
 80056b0:	6163      	str	r3, [r4, #20]
 80056b2:	9b01      	ldr	r3, [sp, #4]
 80056b4:	6120      	str	r0, [r4, #16]
 80056b6:	b15b      	cbz	r3, 80056d0 <__smakebuf_r+0x74>
 80056b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056bc:	4630      	mov	r0, r6
 80056be:	f000 fc3d 	bl	8005f3c <_isatty_r>
 80056c2:	b128      	cbz	r0, 80056d0 <__smakebuf_r+0x74>
 80056c4:	89a3      	ldrh	r3, [r4, #12]
 80056c6:	f023 0303 	bic.w	r3, r3, #3
 80056ca:	f043 0301 	orr.w	r3, r3, #1
 80056ce:	81a3      	strh	r3, [r4, #12]
 80056d0:	89a0      	ldrh	r0, [r4, #12]
 80056d2:	4305      	orrs	r5, r0
 80056d4:	81a5      	strh	r5, [r4, #12]
 80056d6:	e7cd      	b.n	8005674 <__smakebuf_r+0x18>
 80056d8:	08005449 	.word	0x08005449

080056dc <malloc>:
 80056dc:	4b02      	ldr	r3, [pc, #8]	; (80056e8 <malloc+0xc>)
 80056de:	4601      	mov	r1, r0
 80056e0:	6818      	ldr	r0, [r3, #0]
 80056e2:	f000 b853 	b.w	800578c <_malloc_r>
 80056e6:	bf00      	nop
 80056e8:	20000014 	.word	0x20000014

080056ec <_free_r>:
 80056ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056ee:	2900      	cmp	r1, #0
 80056f0:	d048      	beq.n	8005784 <_free_r+0x98>
 80056f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056f6:	9001      	str	r0, [sp, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f1a1 0404 	sub.w	r4, r1, #4
 80056fe:	bfb8      	it	lt
 8005700:	18e4      	addlt	r4, r4, r3
 8005702:	f000 fc3d 	bl	8005f80 <__malloc_lock>
 8005706:	4a20      	ldr	r2, [pc, #128]	; (8005788 <_free_r+0x9c>)
 8005708:	9801      	ldr	r0, [sp, #4]
 800570a:	6813      	ldr	r3, [r2, #0]
 800570c:	4615      	mov	r5, r2
 800570e:	b933      	cbnz	r3, 800571e <_free_r+0x32>
 8005710:	6063      	str	r3, [r4, #4]
 8005712:	6014      	str	r4, [r2, #0]
 8005714:	b003      	add	sp, #12
 8005716:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800571a:	f000 bc37 	b.w	8005f8c <__malloc_unlock>
 800571e:	42a3      	cmp	r3, r4
 8005720:	d90b      	bls.n	800573a <_free_r+0x4e>
 8005722:	6821      	ldr	r1, [r4, #0]
 8005724:	1862      	adds	r2, r4, r1
 8005726:	4293      	cmp	r3, r2
 8005728:	bf04      	itt	eq
 800572a:	681a      	ldreq	r2, [r3, #0]
 800572c:	685b      	ldreq	r3, [r3, #4]
 800572e:	6063      	str	r3, [r4, #4]
 8005730:	bf04      	itt	eq
 8005732:	1852      	addeq	r2, r2, r1
 8005734:	6022      	streq	r2, [r4, #0]
 8005736:	602c      	str	r4, [r5, #0]
 8005738:	e7ec      	b.n	8005714 <_free_r+0x28>
 800573a:	461a      	mov	r2, r3
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	b10b      	cbz	r3, 8005744 <_free_r+0x58>
 8005740:	42a3      	cmp	r3, r4
 8005742:	d9fa      	bls.n	800573a <_free_r+0x4e>
 8005744:	6811      	ldr	r1, [r2, #0]
 8005746:	1855      	adds	r5, r2, r1
 8005748:	42a5      	cmp	r5, r4
 800574a:	d10b      	bne.n	8005764 <_free_r+0x78>
 800574c:	6824      	ldr	r4, [r4, #0]
 800574e:	4421      	add	r1, r4
 8005750:	1854      	adds	r4, r2, r1
 8005752:	42a3      	cmp	r3, r4
 8005754:	6011      	str	r1, [r2, #0]
 8005756:	d1dd      	bne.n	8005714 <_free_r+0x28>
 8005758:	681c      	ldr	r4, [r3, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	6053      	str	r3, [r2, #4]
 800575e:	4421      	add	r1, r4
 8005760:	6011      	str	r1, [r2, #0]
 8005762:	e7d7      	b.n	8005714 <_free_r+0x28>
 8005764:	d902      	bls.n	800576c <_free_r+0x80>
 8005766:	230c      	movs	r3, #12
 8005768:	6003      	str	r3, [r0, #0]
 800576a:	e7d3      	b.n	8005714 <_free_r+0x28>
 800576c:	6825      	ldr	r5, [r4, #0]
 800576e:	1961      	adds	r1, r4, r5
 8005770:	428b      	cmp	r3, r1
 8005772:	bf04      	itt	eq
 8005774:	6819      	ldreq	r1, [r3, #0]
 8005776:	685b      	ldreq	r3, [r3, #4]
 8005778:	6063      	str	r3, [r4, #4]
 800577a:	bf04      	itt	eq
 800577c:	1949      	addeq	r1, r1, r5
 800577e:	6021      	streq	r1, [r4, #0]
 8005780:	6054      	str	r4, [r2, #4]
 8005782:	e7c7      	b.n	8005714 <_free_r+0x28>
 8005784:	b003      	add	sp, #12
 8005786:	bd30      	pop	{r4, r5, pc}
 8005788:	20012e00 	.word	0x20012e00

0800578c <_malloc_r>:
 800578c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800578e:	1ccd      	adds	r5, r1, #3
 8005790:	f025 0503 	bic.w	r5, r5, #3
 8005794:	3508      	adds	r5, #8
 8005796:	2d0c      	cmp	r5, #12
 8005798:	bf38      	it	cc
 800579a:	250c      	movcc	r5, #12
 800579c:	2d00      	cmp	r5, #0
 800579e:	4606      	mov	r6, r0
 80057a0:	db01      	blt.n	80057a6 <_malloc_r+0x1a>
 80057a2:	42a9      	cmp	r1, r5
 80057a4:	d903      	bls.n	80057ae <_malloc_r+0x22>
 80057a6:	230c      	movs	r3, #12
 80057a8:	6033      	str	r3, [r6, #0]
 80057aa:	2000      	movs	r0, #0
 80057ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057ae:	f000 fbe7 	bl	8005f80 <__malloc_lock>
 80057b2:	4921      	ldr	r1, [pc, #132]	; (8005838 <_malloc_r+0xac>)
 80057b4:	680a      	ldr	r2, [r1, #0]
 80057b6:	4614      	mov	r4, r2
 80057b8:	b99c      	cbnz	r4, 80057e2 <_malloc_r+0x56>
 80057ba:	4f20      	ldr	r7, [pc, #128]	; (800583c <_malloc_r+0xb0>)
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	b923      	cbnz	r3, 80057ca <_malloc_r+0x3e>
 80057c0:	4621      	mov	r1, r4
 80057c2:	4630      	mov	r0, r6
 80057c4:	f000 fb2a 	bl	8005e1c <_sbrk_r>
 80057c8:	6038      	str	r0, [r7, #0]
 80057ca:	4629      	mov	r1, r5
 80057cc:	4630      	mov	r0, r6
 80057ce:	f000 fb25 	bl	8005e1c <_sbrk_r>
 80057d2:	1c43      	adds	r3, r0, #1
 80057d4:	d123      	bne.n	800581e <_malloc_r+0x92>
 80057d6:	230c      	movs	r3, #12
 80057d8:	6033      	str	r3, [r6, #0]
 80057da:	4630      	mov	r0, r6
 80057dc:	f000 fbd6 	bl	8005f8c <__malloc_unlock>
 80057e0:	e7e3      	b.n	80057aa <_malloc_r+0x1e>
 80057e2:	6823      	ldr	r3, [r4, #0]
 80057e4:	1b5b      	subs	r3, r3, r5
 80057e6:	d417      	bmi.n	8005818 <_malloc_r+0x8c>
 80057e8:	2b0b      	cmp	r3, #11
 80057ea:	d903      	bls.n	80057f4 <_malloc_r+0x68>
 80057ec:	6023      	str	r3, [r4, #0]
 80057ee:	441c      	add	r4, r3
 80057f0:	6025      	str	r5, [r4, #0]
 80057f2:	e004      	b.n	80057fe <_malloc_r+0x72>
 80057f4:	6863      	ldr	r3, [r4, #4]
 80057f6:	42a2      	cmp	r2, r4
 80057f8:	bf0c      	ite	eq
 80057fa:	600b      	streq	r3, [r1, #0]
 80057fc:	6053      	strne	r3, [r2, #4]
 80057fe:	4630      	mov	r0, r6
 8005800:	f000 fbc4 	bl	8005f8c <__malloc_unlock>
 8005804:	f104 000b 	add.w	r0, r4, #11
 8005808:	1d23      	adds	r3, r4, #4
 800580a:	f020 0007 	bic.w	r0, r0, #7
 800580e:	1ac2      	subs	r2, r0, r3
 8005810:	d0cc      	beq.n	80057ac <_malloc_r+0x20>
 8005812:	1a1b      	subs	r3, r3, r0
 8005814:	50a3      	str	r3, [r4, r2]
 8005816:	e7c9      	b.n	80057ac <_malloc_r+0x20>
 8005818:	4622      	mov	r2, r4
 800581a:	6864      	ldr	r4, [r4, #4]
 800581c:	e7cc      	b.n	80057b8 <_malloc_r+0x2c>
 800581e:	1cc4      	adds	r4, r0, #3
 8005820:	f024 0403 	bic.w	r4, r4, #3
 8005824:	42a0      	cmp	r0, r4
 8005826:	d0e3      	beq.n	80057f0 <_malloc_r+0x64>
 8005828:	1a21      	subs	r1, r4, r0
 800582a:	4630      	mov	r0, r6
 800582c:	f000 faf6 	bl	8005e1c <_sbrk_r>
 8005830:	3001      	adds	r0, #1
 8005832:	d1dd      	bne.n	80057f0 <_malloc_r+0x64>
 8005834:	e7cf      	b.n	80057d6 <_malloc_r+0x4a>
 8005836:	bf00      	nop
 8005838:	20012e00 	.word	0x20012e00
 800583c:	20012e04 	.word	0x20012e04

08005840 <__sfputc_r>:
 8005840:	6893      	ldr	r3, [r2, #8]
 8005842:	3b01      	subs	r3, #1
 8005844:	2b00      	cmp	r3, #0
 8005846:	b410      	push	{r4}
 8005848:	6093      	str	r3, [r2, #8]
 800584a:	da08      	bge.n	800585e <__sfputc_r+0x1e>
 800584c:	6994      	ldr	r4, [r2, #24]
 800584e:	42a3      	cmp	r3, r4
 8005850:	db01      	blt.n	8005856 <__sfputc_r+0x16>
 8005852:	290a      	cmp	r1, #10
 8005854:	d103      	bne.n	800585e <__sfputc_r+0x1e>
 8005856:	f85d 4b04 	ldr.w	r4, [sp], #4
 800585a:	f7ff bc31 	b.w	80050c0 <__swbuf_r>
 800585e:	6813      	ldr	r3, [r2, #0]
 8005860:	1c58      	adds	r0, r3, #1
 8005862:	6010      	str	r0, [r2, #0]
 8005864:	7019      	strb	r1, [r3, #0]
 8005866:	4608      	mov	r0, r1
 8005868:	f85d 4b04 	ldr.w	r4, [sp], #4
 800586c:	4770      	bx	lr

0800586e <__sfputs_r>:
 800586e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005870:	4606      	mov	r6, r0
 8005872:	460f      	mov	r7, r1
 8005874:	4614      	mov	r4, r2
 8005876:	18d5      	adds	r5, r2, r3
 8005878:	42ac      	cmp	r4, r5
 800587a:	d101      	bne.n	8005880 <__sfputs_r+0x12>
 800587c:	2000      	movs	r0, #0
 800587e:	e007      	b.n	8005890 <__sfputs_r+0x22>
 8005880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005884:	463a      	mov	r2, r7
 8005886:	4630      	mov	r0, r6
 8005888:	f7ff ffda 	bl	8005840 <__sfputc_r>
 800588c:	1c43      	adds	r3, r0, #1
 800588e:	d1f3      	bne.n	8005878 <__sfputs_r+0xa>
 8005890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005894 <_vfiprintf_r>:
 8005894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005898:	460d      	mov	r5, r1
 800589a:	b09d      	sub	sp, #116	; 0x74
 800589c:	4614      	mov	r4, r2
 800589e:	4698      	mov	r8, r3
 80058a0:	4606      	mov	r6, r0
 80058a2:	b118      	cbz	r0, 80058ac <_vfiprintf_r+0x18>
 80058a4:	6983      	ldr	r3, [r0, #24]
 80058a6:	b90b      	cbnz	r3, 80058ac <_vfiprintf_r+0x18>
 80058a8:	f7ff fe02 	bl	80054b0 <__sinit>
 80058ac:	4b89      	ldr	r3, [pc, #548]	; (8005ad4 <_vfiprintf_r+0x240>)
 80058ae:	429d      	cmp	r5, r3
 80058b0:	d11b      	bne.n	80058ea <_vfiprintf_r+0x56>
 80058b2:	6875      	ldr	r5, [r6, #4]
 80058b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058b6:	07d9      	lsls	r1, r3, #31
 80058b8:	d405      	bmi.n	80058c6 <_vfiprintf_r+0x32>
 80058ba:	89ab      	ldrh	r3, [r5, #12]
 80058bc:	059a      	lsls	r2, r3, #22
 80058be:	d402      	bmi.n	80058c6 <_vfiprintf_r+0x32>
 80058c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058c2:	f7ff fea5 	bl	8005610 <__retarget_lock_acquire_recursive>
 80058c6:	89ab      	ldrh	r3, [r5, #12]
 80058c8:	071b      	lsls	r3, r3, #28
 80058ca:	d501      	bpl.n	80058d0 <_vfiprintf_r+0x3c>
 80058cc:	692b      	ldr	r3, [r5, #16]
 80058ce:	b9eb      	cbnz	r3, 800590c <_vfiprintf_r+0x78>
 80058d0:	4629      	mov	r1, r5
 80058d2:	4630      	mov	r0, r6
 80058d4:	f7ff fc46 	bl	8005164 <__swsetup_r>
 80058d8:	b1c0      	cbz	r0, 800590c <_vfiprintf_r+0x78>
 80058da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058dc:	07dc      	lsls	r4, r3, #31
 80058de:	d50e      	bpl.n	80058fe <_vfiprintf_r+0x6a>
 80058e0:	f04f 30ff 	mov.w	r0, #4294967295
 80058e4:	b01d      	add	sp, #116	; 0x74
 80058e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ea:	4b7b      	ldr	r3, [pc, #492]	; (8005ad8 <_vfiprintf_r+0x244>)
 80058ec:	429d      	cmp	r5, r3
 80058ee:	d101      	bne.n	80058f4 <_vfiprintf_r+0x60>
 80058f0:	68b5      	ldr	r5, [r6, #8]
 80058f2:	e7df      	b.n	80058b4 <_vfiprintf_r+0x20>
 80058f4:	4b79      	ldr	r3, [pc, #484]	; (8005adc <_vfiprintf_r+0x248>)
 80058f6:	429d      	cmp	r5, r3
 80058f8:	bf08      	it	eq
 80058fa:	68f5      	ldreq	r5, [r6, #12]
 80058fc:	e7da      	b.n	80058b4 <_vfiprintf_r+0x20>
 80058fe:	89ab      	ldrh	r3, [r5, #12]
 8005900:	0598      	lsls	r0, r3, #22
 8005902:	d4ed      	bmi.n	80058e0 <_vfiprintf_r+0x4c>
 8005904:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005906:	f7ff fe84 	bl	8005612 <__retarget_lock_release_recursive>
 800590a:	e7e9      	b.n	80058e0 <_vfiprintf_r+0x4c>
 800590c:	2300      	movs	r3, #0
 800590e:	9309      	str	r3, [sp, #36]	; 0x24
 8005910:	2320      	movs	r3, #32
 8005912:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005916:	f8cd 800c 	str.w	r8, [sp, #12]
 800591a:	2330      	movs	r3, #48	; 0x30
 800591c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005ae0 <_vfiprintf_r+0x24c>
 8005920:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005924:	f04f 0901 	mov.w	r9, #1
 8005928:	4623      	mov	r3, r4
 800592a:	469a      	mov	sl, r3
 800592c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005930:	b10a      	cbz	r2, 8005936 <_vfiprintf_r+0xa2>
 8005932:	2a25      	cmp	r2, #37	; 0x25
 8005934:	d1f9      	bne.n	800592a <_vfiprintf_r+0x96>
 8005936:	ebba 0b04 	subs.w	fp, sl, r4
 800593a:	d00b      	beq.n	8005954 <_vfiprintf_r+0xc0>
 800593c:	465b      	mov	r3, fp
 800593e:	4622      	mov	r2, r4
 8005940:	4629      	mov	r1, r5
 8005942:	4630      	mov	r0, r6
 8005944:	f7ff ff93 	bl	800586e <__sfputs_r>
 8005948:	3001      	adds	r0, #1
 800594a:	f000 80aa 	beq.w	8005aa2 <_vfiprintf_r+0x20e>
 800594e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005950:	445a      	add	r2, fp
 8005952:	9209      	str	r2, [sp, #36]	; 0x24
 8005954:	f89a 3000 	ldrb.w	r3, [sl]
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 80a2 	beq.w	8005aa2 <_vfiprintf_r+0x20e>
 800595e:	2300      	movs	r3, #0
 8005960:	f04f 32ff 	mov.w	r2, #4294967295
 8005964:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005968:	f10a 0a01 	add.w	sl, sl, #1
 800596c:	9304      	str	r3, [sp, #16]
 800596e:	9307      	str	r3, [sp, #28]
 8005970:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005974:	931a      	str	r3, [sp, #104]	; 0x68
 8005976:	4654      	mov	r4, sl
 8005978:	2205      	movs	r2, #5
 800597a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800597e:	4858      	ldr	r0, [pc, #352]	; (8005ae0 <_vfiprintf_r+0x24c>)
 8005980:	f7fa fc26 	bl	80001d0 <memchr>
 8005984:	9a04      	ldr	r2, [sp, #16]
 8005986:	b9d8      	cbnz	r0, 80059c0 <_vfiprintf_r+0x12c>
 8005988:	06d1      	lsls	r1, r2, #27
 800598a:	bf44      	itt	mi
 800598c:	2320      	movmi	r3, #32
 800598e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005992:	0713      	lsls	r3, r2, #28
 8005994:	bf44      	itt	mi
 8005996:	232b      	movmi	r3, #43	; 0x2b
 8005998:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800599c:	f89a 3000 	ldrb.w	r3, [sl]
 80059a0:	2b2a      	cmp	r3, #42	; 0x2a
 80059a2:	d015      	beq.n	80059d0 <_vfiprintf_r+0x13c>
 80059a4:	9a07      	ldr	r2, [sp, #28]
 80059a6:	4654      	mov	r4, sl
 80059a8:	2000      	movs	r0, #0
 80059aa:	f04f 0c0a 	mov.w	ip, #10
 80059ae:	4621      	mov	r1, r4
 80059b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059b4:	3b30      	subs	r3, #48	; 0x30
 80059b6:	2b09      	cmp	r3, #9
 80059b8:	d94e      	bls.n	8005a58 <_vfiprintf_r+0x1c4>
 80059ba:	b1b0      	cbz	r0, 80059ea <_vfiprintf_r+0x156>
 80059bc:	9207      	str	r2, [sp, #28]
 80059be:	e014      	b.n	80059ea <_vfiprintf_r+0x156>
 80059c0:	eba0 0308 	sub.w	r3, r0, r8
 80059c4:	fa09 f303 	lsl.w	r3, r9, r3
 80059c8:	4313      	orrs	r3, r2
 80059ca:	9304      	str	r3, [sp, #16]
 80059cc:	46a2      	mov	sl, r4
 80059ce:	e7d2      	b.n	8005976 <_vfiprintf_r+0xe2>
 80059d0:	9b03      	ldr	r3, [sp, #12]
 80059d2:	1d19      	adds	r1, r3, #4
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	9103      	str	r1, [sp, #12]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	bfbb      	ittet	lt
 80059dc:	425b      	neglt	r3, r3
 80059de:	f042 0202 	orrlt.w	r2, r2, #2
 80059e2:	9307      	strge	r3, [sp, #28]
 80059e4:	9307      	strlt	r3, [sp, #28]
 80059e6:	bfb8      	it	lt
 80059e8:	9204      	strlt	r2, [sp, #16]
 80059ea:	7823      	ldrb	r3, [r4, #0]
 80059ec:	2b2e      	cmp	r3, #46	; 0x2e
 80059ee:	d10c      	bne.n	8005a0a <_vfiprintf_r+0x176>
 80059f0:	7863      	ldrb	r3, [r4, #1]
 80059f2:	2b2a      	cmp	r3, #42	; 0x2a
 80059f4:	d135      	bne.n	8005a62 <_vfiprintf_r+0x1ce>
 80059f6:	9b03      	ldr	r3, [sp, #12]
 80059f8:	1d1a      	adds	r2, r3, #4
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	9203      	str	r2, [sp, #12]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	bfb8      	it	lt
 8005a02:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a06:	3402      	adds	r4, #2
 8005a08:	9305      	str	r3, [sp, #20]
 8005a0a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005af0 <_vfiprintf_r+0x25c>
 8005a0e:	7821      	ldrb	r1, [r4, #0]
 8005a10:	2203      	movs	r2, #3
 8005a12:	4650      	mov	r0, sl
 8005a14:	f7fa fbdc 	bl	80001d0 <memchr>
 8005a18:	b140      	cbz	r0, 8005a2c <_vfiprintf_r+0x198>
 8005a1a:	2340      	movs	r3, #64	; 0x40
 8005a1c:	eba0 000a 	sub.w	r0, r0, sl
 8005a20:	fa03 f000 	lsl.w	r0, r3, r0
 8005a24:	9b04      	ldr	r3, [sp, #16]
 8005a26:	4303      	orrs	r3, r0
 8005a28:	3401      	adds	r4, #1
 8005a2a:	9304      	str	r3, [sp, #16]
 8005a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a30:	482c      	ldr	r0, [pc, #176]	; (8005ae4 <_vfiprintf_r+0x250>)
 8005a32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a36:	2206      	movs	r2, #6
 8005a38:	f7fa fbca 	bl	80001d0 <memchr>
 8005a3c:	2800      	cmp	r0, #0
 8005a3e:	d03f      	beq.n	8005ac0 <_vfiprintf_r+0x22c>
 8005a40:	4b29      	ldr	r3, [pc, #164]	; (8005ae8 <_vfiprintf_r+0x254>)
 8005a42:	bb1b      	cbnz	r3, 8005a8c <_vfiprintf_r+0x1f8>
 8005a44:	9b03      	ldr	r3, [sp, #12]
 8005a46:	3307      	adds	r3, #7
 8005a48:	f023 0307 	bic.w	r3, r3, #7
 8005a4c:	3308      	adds	r3, #8
 8005a4e:	9303      	str	r3, [sp, #12]
 8005a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a52:	443b      	add	r3, r7
 8005a54:	9309      	str	r3, [sp, #36]	; 0x24
 8005a56:	e767      	b.n	8005928 <_vfiprintf_r+0x94>
 8005a58:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a5c:	460c      	mov	r4, r1
 8005a5e:	2001      	movs	r0, #1
 8005a60:	e7a5      	b.n	80059ae <_vfiprintf_r+0x11a>
 8005a62:	2300      	movs	r3, #0
 8005a64:	3401      	adds	r4, #1
 8005a66:	9305      	str	r3, [sp, #20]
 8005a68:	4619      	mov	r1, r3
 8005a6a:	f04f 0c0a 	mov.w	ip, #10
 8005a6e:	4620      	mov	r0, r4
 8005a70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a74:	3a30      	subs	r2, #48	; 0x30
 8005a76:	2a09      	cmp	r2, #9
 8005a78:	d903      	bls.n	8005a82 <_vfiprintf_r+0x1ee>
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d0c5      	beq.n	8005a0a <_vfiprintf_r+0x176>
 8005a7e:	9105      	str	r1, [sp, #20]
 8005a80:	e7c3      	b.n	8005a0a <_vfiprintf_r+0x176>
 8005a82:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a86:	4604      	mov	r4, r0
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e7f0      	b.n	8005a6e <_vfiprintf_r+0x1da>
 8005a8c:	ab03      	add	r3, sp, #12
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	462a      	mov	r2, r5
 8005a92:	4b16      	ldr	r3, [pc, #88]	; (8005aec <_vfiprintf_r+0x258>)
 8005a94:	a904      	add	r1, sp, #16
 8005a96:	4630      	mov	r0, r6
 8005a98:	f3af 8000 	nop.w
 8005a9c:	4607      	mov	r7, r0
 8005a9e:	1c78      	adds	r0, r7, #1
 8005aa0:	d1d6      	bne.n	8005a50 <_vfiprintf_r+0x1bc>
 8005aa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005aa4:	07d9      	lsls	r1, r3, #31
 8005aa6:	d405      	bmi.n	8005ab4 <_vfiprintf_r+0x220>
 8005aa8:	89ab      	ldrh	r3, [r5, #12]
 8005aaa:	059a      	lsls	r2, r3, #22
 8005aac:	d402      	bmi.n	8005ab4 <_vfiprintf_r+0x220>
 8005aae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ab0:	f7ff fdaf 	bl	8005612 <__retarget_lock_release_recursive>
 8005ab4:	89ab      	ldrh	r3, [r5, #12]
 8005ab6:	065b      	lsls	r3, r3, #25
 8005ab8:	f53f af12 	bmi.w	80058e0 <_vfiprintf_r+0x4c>
 8005abc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005abe:	e711      	b.n	80058e4 <_vfiprintf_r+0x50>
 8005ac0:	ab03      	add	r3, sp, #12
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	462a      	mov	r2, r5
 8005ac6:	4b09      	ldr	r3, [pc, #36]	; (8005aec <_vfiprintf_r+0x258>)
 8005ac8:	a904      	add	r1, sp, #16
 8005aca:	4630      	mov	r0, r6
 8005acc:	f000 f880 	bl	8005bd0 <_printf_i>
 8005ad0:	e7e4      	b.n	8005a9c <_vfiprintf_r+0x208>
 8005ad2:	bf00      	nop
 8005ad4:	080061b8 	.word	0x080061b8
 8005ad8:	080061d8 	.word	0x080061d8
 8005adc:	08006198 	.word	0x08006198
 8005ae0:	080061f8 	.word	0x080061f8
 8005ae4:	08006202 	.word	0x08006202
 8005ae8:	00000000 	.word	0x00000000
 8005aec:	0800586f 	.word	0x0800586f
 8005af0:	080061fe 	.word	0x080061fe

08005af4 <_printf_common>:
 8005af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005af8:	4616      	mov	r6, r2
 8005afa:	4699      	mov	r9, r3
 8005afc:	688a      	ldr	r2, [r1, #8]
 8005afe:	690b      	ldr	r3, [r1, #16]
 8005b00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b04:	4293      	cmp	r3, r2
 8005b06:	bfb8      	it	lt
 8005b08:	4613      	movlt	r3, r2
 8005b0a:	6033      	str	r3, [r6, #0]
 8005b0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b10:	4607      	mov	r7, r0
 8005b12:	460c      	mov	r4, r1
 8005b14:	b10a      	cbz	r2, 8005b1a <_printf_common+0x26>
 8005b16:	3301      	adds	r3, #1
 8005b18:	6033      	str	r3, [r6, #0]
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	0699      	lsls	r1, r3, #26
 8005b1e:	bf42      	ittt	mi
 8005b20:	6833      	ldrmi	r3, [r6, #0]
 8005b22:	3302      	addmi	r3, #2
 8005b24:	6033      	strmi	r3, [r6, #0]
 8005b26:	6825      	ldr	r5, [r4, #0]
 8005b28:	f015 0506 	ands.w	r5, r5, #6
 8005b2c:	d106      	bne.n	8005b3c <_printf_common+0x48>
 8005b2e:	f104 0a19 	add.w	sl, r4, #25
 8005b32:	68e3      	ldr	r3, [r4, #12]
 8005b34:	6832      	ldr	r2, [r6, #0]
 8005b36:	1a9b      	subs	r3, r3, r2
 8005b38:	42ab      	cmp	r3, r5
 8005b3a:	dc26      	bgt.n	8005b8a <_printf_common+0x96>
 8005b3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b40:	1e13      	subs	r3, r2, #0
 8005b42:	6822      	ldr	r2, [r4, #0]
 8005b44:	bf18      	it	ne
 8005b46:	2301      	movne	r3, #1
 8005b48:	0692      	lsls	r2, r2, #26
 8005b4a:	d42b      	bmi.n	8005ba4 <_printf_common+0xb0>
 8005b4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b50:	4649      	mov	r1, r9
 8005b52:	4638      	mov	r0, r7
 8005b54:	47c0      	blx	r8
 8005b56:	3001      	adds	r0, #1
 8005b58:	d01e      	beq.n	8005b98 <_printf_common+0xa4>
 8005b5a:	6823      	ldr	r3, [r4, #0]
 8005b5c:	68e5      	ldr	r5, [r4, #12]
 8005b5e:	6832      	ldr	r2, [r6, #0]
 8005b60:	f003 0306 	and.w	r3, r3, #6
 8005b64:	2b04      	cmp	r3, #4
 8005b66:	bf08      	it	eq
 8005b68:	1aad      	subeq	r5, r5, r2
 8005b6a:	68a3      	ldr	r3, [r4, #8]
 8005b6c:	6922      	ldr	r2, [r4, #16]
 8005b6e:	bf0c      	ite	eq
 8005b70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b74:	2500      	movne	r5, #0
 8005b76:	4293      	cmp	r3, r2
 8005b78:	bfc4      	itt	gt
 8005b7a:	1a9b      	subgt	r3, r3, r2
 8005b7c:	18ed      	addgt	r5, r5, r3
 8005b7e:	2600      	movs	r6, #0
 8005b80:	341a      	adds	r4, #26
 8005b82:	42b5      	cmp	r5, r6
 8005b84:	d11a      	bne.n	8005bbc <_printf_common+0xc8>
 8005b86:	2000      	movs	r0, #0
 8005b88:	e008      	b.n	8005b9c <_printf_common+0xa8>
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	4652      	mov	r2, sl
 8005b8e:	4649      	mov	r1, r9
 8005b90:	4638      	mov	r0, r7
 8005b92:	47c0      	blx	r8
 8005b94:	3001      	adds	r0, #1
 8005b96:	d103      	bne.n	8005ba0 <_printf_common+0xac>
 8005b98:	f04f 30ff 	mov.w	r0, #4294967295
 8005b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ba0:	3501      	adds	r5, #1
 8005ba2:	e7c6      	b.n	8005b32 <_printf_common+0x3e>
 8005ba4:	18e1      	adds	r1, r4, r3
 8005ba6:	1c5a      	adds	r2, r3, #1
 8005ba8:	2030      	movs	r0, #48	; 0x30
 8005baa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bae:	4422      	add	r2, r4
 8005bb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bb8:	3302      	adds	r3, #2
 8005bba:	e7c7      	b.n	8005b4c <_printf_common+0x58>
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	4622      	mov	r2, r4
 8005bc0:	4649      	mov	r1, r9
 8005bc2:	4638      	mov	r0, r7
 8005bc4:	47c0      	blx	r8
 8005bc6:	3001      	adds	r0, #1
 8005bc8:	d0e6      	beq.n	8005b98 <_printf_common+0xa4>
 8005bca:	3601      	adds	r6, #1
 8005bcc:	e7d9      	b.n	8005b82 <_printf_common+0x8e>
	...

08005bd0 <_printf_i>:
 8005bd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bd4:	460c      	mov	r4, r1
 8005bd6:	4691      	mov	r9, r2
 8005bd8:	7e27      	ldrb	r7, [r4, #24]
 8005bda:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005bdc:	2f78      	cmp	r7, #120	; 0x78
 8005bde:	4680      	mov	r8, r0
 8005be0:	469a      	mov	sl, r3
 8005be2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005be6:	d807      	bhi.n	8005bf8 <_printf_i+0x28>
 8005be8:	2f62      	cmp	r7, #98	; 0x62
 8005bea:	d80a      	bhi.n	8005c02 <_printf_i+0x32>
 8005bec:	2f00      	cmp	r7, #0
 8005bee:	f000 80d8 	beq.w	8005da2 <_printf_i+0x1d2>
 8005bf2:	2f58      	cmp	r7, #88	; 0x58
 8005bf4:	f000 80a3 	beq.w	8005d3e <_printf_i+0x16e>
 8005bf8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005bfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c00:	e03a      	b.n	8005c78 <_printf_i+0xa8>
 8005c02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c06:	2b15      	cmp	r3, #21
 8005c08:	d8f6      	bhi.n	8005bf8 <_printf_i+0x28>
 8005c0a:	a001      	add	r0, pc, #4	; (adr r0, 8005c10 <_printf_i+0x40>)
 8005c0c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005c10:	08005c69 	.word	0x08005c69
 8005c14:	08005c7d 	.word	0x08005c7d
 8005c18:	08005bf9 	.word	0x08005bf9
 8005c1c:	08005bf9 	.word	0x08005bf9
 8005c20:	08005bf9 	.word	0x08005bf9
 8005c24:	08005bf9 	.word	0x08005bf9
 8005c28:	08005c7d 	.word	0x08005c7d
 8005c2c:	08005bf9 	.word	0x08005bf9
 8005c30:	08005bf9 	.word	0x08005bf9
 8005c34:	08005bf9 	.word	0x08005bf9
 8005c38:	08005bf9 	.word	0x08005bf9
 8005c3c:	08005d89 	.word	0x08005d89
 8005c40:	08005cad 	.word	0x08005cad
 8005c44:	08005d6b 	.word	0x08005d6b
 8005c48:	08005bf9 	.word	0x08005bf9
 8005c4c:	08005bf9 	.word	0x08005bf9
 8005c50:	08005dab 	.word	0x08005dab
 8005c54:	08005bf9 	.word	0x08005bf9
 8005c58:	08005cad 	.word	0x08005cad
 8005c5c:	08005bf9 	.word	0x08005bf9
 8005c60:	08005bf9 	.word	0x08005bf9
 8005c64:	08005d73 	.word	0x08005d73
 8005c68:	680b      	ldr	r3, [r1, #0]
 8005c6a:	1d1a      	adds	r2, r3, #4
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	600a      	str	r2, [r1, #0]
 8005c70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e0a3      	b.n	8005dc4 <_printf_i+0x1f4>
 8005c7c:	6825      	ldr	r5, [r4, #0]
 8005c7e:	6808      	ldr	r0, [r1, #0]
 8005c80:	062e      	lsls	r6, r5, #24
 8005c82:	f100 0304 	add.w	r3, r0, #4
 8005c86:	d50a      	bpl.n	8005c9e <_printf_i+0xce>
 8005c88:	6805      	ldr	r5, [r0, #0]
 8005c8a:	600b      	str	r3, [r1, #0]
 8005c8c:	2d00      	cmp	r5, #0
 8005c8e:	da03      	bge.n	8005c98 <_printf_i+0xc8>
 8005c90:	232d      	movs	r3, #45	; 0x2d
 8005c92:	426d      	negs	r5, r5
 8005c94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c98:	485e      	ldr	r0, [pc, #376]	; (8005e14 <_printf_i+0x244>)
 8005c9a:	230a      	movs	r3, #10
 8005c9c:	e019      	b.n	8005cd2 <_printf_i+0x102>
 8005c9e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005ca2:	6805      	ldr	r5, [r0, #0]
 8005ca4:	600b      	str	r3, [r1, #0]
 8005ca6:	bf18      	it	ne
 8005ca8:	b22d      	sxthne	r5, r5
 8005caa:	e7ef      	b.n	8005c8c <_printf_i+0xbc>
 8005cac:	680b      	ldr	r3, [r1, #0]
 8005cae:	6825      	ldr	r5, [r4, #0]
 8005cb0:	1d18      	adds	r0, r3, #4
 8005cb2:	6008      	str	r0, [r1, #0]
 8005cb4:	0628      	lsls	r0, r5, #24
 8005cb6:	d501      	bpl.n	8005cbc <_printf_i+0xec>
 8005cb8:	681d      	ldr	r5, [r3, #0]
 8005cba:	e002      	b.n	8005cc2 <_printf_i+0xf2>
 8005cbc:	0669      	lsls	r1, r5, #25
 8005cbe:	d5fb      	bpl.n	8005cb8 <_printf_i+0xe8>
 8005cc0:	881d      	ldrh	r5, [r3, #0]
 8005cc2:	4854      	ldr	r0, [pc, #336]	; (8005e14 <_printf_i+0x244>)
 8005cc4:	2f6f      	cmp	r7, #111	; 0x6f
 8005cc6:	bf0c      	ite	eq
 8005cc8:	2308      	moveq	r3, #8
 8005cca:	230a      	movne	r3, #10
 8005ccc:	2100      	movs	r1, #0
 8005cce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cd2:	6866      	ldr	r6, [r4, #4]
 8005cd4:	60a6      	str	r6, [r4, #8]
 8005cd6:	2e00      	cmp	r6, #0
 8005cd8:	bfa2      	ittt	ge
 8005cda:	6821      	ldrge	r1, [r4, #0]
 8005cdc:	f021 0104 	bicge.w	r1, r1, #4
 8005ce0:	6021      	strge	r1, [r4, #0]
 8005ce2:	b90d      	cbnz	r5, 8005ce8 <_printf_i+0x118>
 8005ce4:	2e00      	cmp	r6, #0
 8005ce6:	d04d      	beq.n	8005d84 <_printf_i+0x1b4>
 8005ce8:	4616      	mov	r6, r2
 8005cea:	fbb5 f1f3 	udiv	r1, r5, r3
 8005cee:	fb03 5711 	mls	r7, r3, r1, r5
 8005cf2:	5dc7      	ldrb	r7, [r0, r7]
 8005cf4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005cf8:	462f      	mov	r7, r5
 8005cfa:	42bb      	cmp	r3, r7
 8005cfc:	460d      	mov	r5, r1
 8005cfe:	d9f4      	bls.n	8005cea <_printf_i+0x11a>
 8005d00:	2b08      	cmp	r3, #8
 8005d02:	d10b      	bne.n	8005d1c <_printf_i+0x14c>
 8005d04:	6823      	ldr	r3, [r4, #0]
 8005d06:	07df      	lsls	r7, r3, #31
 8005d08:	d508      	bpl.n	8005d1c <_printf_i+0x14c>
 8005d0a:	6923      	ldr	r3, [r4, #16]
 8005d0c:	6861      	ldr	r1, [r4, #4]
 8005d0e:	4299      	cmp	r1, r3
 8005d10:	bfde      	ittt	le
 8005d12:	2330      	movle	r3, #48	; 0x30
 8005d14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d18:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d1c:	1b92      	subs	r2, r2, r6
 8005d1e:	6122      	str	r2, [r4, #16]
 8005d20:	f8cd a000 	str.w	sl, [sp]
 8005d24:	464b      	mov	r3, r9
 8005d26:	aa03      	add	r2, sp, #12
 8005d28:	4621      	mov	r1, r4
 8005d2a:	4640      	mov	r0, r8
 8005d2c:	f7ff fee2 	bl	8005af4 <_printf_common>
 8005d30:	3001      	adds	r0, #1
 8005d32:	d14c      	bne.n	8005dce <_printf_i+0x1fe>
 8005d34:	f04f 30ff 	mov.w	r0, #4294967295
 8005d38:	b004      	add	sp, #16
 8005d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d3e:	4835      	ldr	r0, [pc, #212]	; (8005e14 <_printf_i+0x244>)
 8005d40:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d44:	6823      	ldr	r3, [r4, #0]
 8005d46:	680e      	ldr	r6, [r1, #0]
 8005d48:	061f      	lsls	r7, r3, #24
 8005d4a:	f856 5b04 	ldr.w	r5, [r6], #4
 8005d4e:	600e      	str	r6, [r1, #0]
 8005d50:	d514      	bpl.n	8005d7c <_printf_i+0x1ac>
 8005d52:	07d9      	lsls	r1, r3, #31
 8005d54:	bf44      	itt	mi
 8005d56:	f043 0320 	orrmi.w	r3, r3, #32
 8005d5a:	6023      	strmi	r3, [r4, #0]
 8005d5c:	b91d      	cbnz	r5, 8005d66 <_printf_i+0x196>
 8005d5e:	6823      	ldr	r3, [r4, #0]
 8005d60:	f023 0320 	bic.w	r3, r3, #32
 8005d64:	6023      	str	r3, [r4, #0]
 8005d66:	2310      	movs	r3, #16
 8005d68:	e7b0      	b.n	8005ccc <_printf_i+0xfc>
 8005d6a:	6823      	ldr	r3, [r4, #0]
 8005d6c:	f043 0320 	orr.w	r3, r3, #32
 8005d70:	6023      	str	r3, [r4, #0]
 8005d72:	2378      	movs	r3, #120	; 0x78
 8005d74:	4828      	ldr	r0, [pc, #160]	; (8005e18 <_printf_i+0x248>)
 8005d76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d7a:	e7e3      	b.n	8005d44 <_printf_i+0x174>
 8005d7c:	065e      	lsls	r6, r3, #25
 8005d7e:	bf48      	it	mi
 8005d80:	b2ad      	uxthmi	r5, r5
 8005d82:	e7e6      	b.n	8005d52 <_printf_i+0x182>
 8005d84:	4616      	mov	r6, r2
 8005d86:	e7bb      	b.n	8005d00 <_printf_i+0x130>
 8005d88:	680b      	ldr	r3, [r1, #0]
 8005d8a:	6826      	ldr	r6, [r4, #0]
 8005d8c:	6960      	ldr	r0, [r4, #20]
 8005d8e:	1d1d      	adds	r5, r3, #4
 8005d90:	600d      	str	r5, [r1, #0]
 8005d92:	0635      	lsls	r5, r6, #24
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	d501      	bpl.n	8005d9c <_printf_i+0x1cc>
 8005d98:	6018      	str	r0, [r3, #0]
 8005d9a:	e002      	b.n	8005da2 <_printf_i+0x1d2>
 8005d9c:	0671      	lsls	r1, r6, #25
 8005d9e:	d5fb      	bpl.n	8005d98 <_printf_i+0x1c8>
 8005da0:	8018      	strh	r0, [r3, #0]
 8005da2:	2300      	movs	r3, #0
 8005da4:	6123      	str	r3, [r4, #16]
 8005da6:	4616      	mov	r6, r2
 8005da8:	e7ba      	b.n	8005d20 <_printf_i+0x150>
 8005daa:	680b      	ldr	r3, [r1, #0]
 8005dac:	1d1a      	adds	r2, r3, #4
 8005dae:	600a      	str	r2, [r1, #0]
 8005db0:	681e      	ldr	r6, [r3, #0]
 8005db2:	6862      	ldr	r2, [r4, #4]
 8005db4:	2100      	movs	r1, #0
 8005db6:	4630      	mov	r0, r6
 8005db8:	f7fa fa0a 	bl	80001d0 <memchr>
 8005dbc:	b108      	cbz	r0, 8005dc2 <_printf_i+0x1f2>
 8005dbe:	1b80      	subs	r0, r0, r6
 8005dc0:	6060      	str	r0, [r4, #4]
 8005dc2:	6863      	ldr	r3, [r4, #4]
 8005dc4:	6123      	str	r3, [r4, #16]
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dcc:	e7a8      	b.n	8005d20 <_printf_i+0x150>
 8005dce:	6923      	ldr	r3, [r4, #16]
 8005dd0:	4632      	mov	r2, r6
 8005dd2:	4649      	mov	r1, r9
 8005dd4:	4640      	mov	r0, r8
 8005dd6:	47d0      	blx	sl
 8005dd8:	3001      	adds	r0, #1
 8005dda:	d0ab      	beq.n	8005d34 <_printf_i+0x164>
 8005ddc:	6823      	ldr	r3, [r4, #0]
 8005dde:	079b      	lsls	r3, r3, #30
 8005de0:	d413      	bmi.n	8005e0a <_printf_i+0x23a>
 8005de2:	68e0      	ldr	r0, [r4, #12]
 8005de4:	9b03      	ldr	r3, [sp, #12]
 8005de6:	4298      	cmp	r0, r3
 8005de8:	bfb8      	it	lt
 8005dea:	4618      	movlt	r0, r3
 8005dec:	e7a4      	b.n	8005d38 <_printf_i+0x168>
 8005dee:	2301      	movs	r3, #1
 8005df0:	4632      	mov	r2, r6
 8005df2:	4649      	mov	r1, r9
 8005df4:	4640      	mov	r0, r8
 8005df6:	47d0      	blx	sl
 8005df8:	3001      	adds	r0, #1
 8005dfa:	d09b      	beq.n	8005d34 <_printf_i+0x164>
 8005dfc:	3501      	adds	r5, #1
 8005dfe:	68e3      	ldr	r3, [r4, #12]
 8005e00:	9903      	ldr	r1, [sp, #12]
 8005e02:	1a5b      	subs	r3, r3, r1
 8005e04:	42ab      	cmp	r3, r5
 8005e06:	dcf2      	bgt.n	8005dee <_printf_i+0x21e>
 8005e08:	e7eb      	b.n	8005de2 <_printf_i+0x212>
 8005e0a:	2500      	movs	r5, #0
 8005e0c:	f104 0619 	add.w	r6, r4, #25
 8005e10:	e7f5      	b.n	8005dfe <_printf_i+0x22e>
 8005e12:	bf00      	nop
 8005e14:	08006209 	.word	0x08006209
 8005e18:	0800621a 	.word	0x0800621a

08005e1c <_sbrk_r>:
 8005e1c:	b538      	push	{r3, r4, r5, lr}
 8005e1e:	4d06      	ldr	r5, [pc, #24]	; (8005e38 <_sbrk_r+0x1c>)
 8005e20:	2300      	movs	r3, #0
 8005e22:	4604      	mov	r4, r0
 8005e24:	4608      	mov	r0, r1
 8005e26:	602b      	str	r3, [r5, #0]
 8005e28:	f7fa ffae 	bl	8000d88 <_sbrk>
 8005e2c:	1c43      	adds	r3, r0, #1
 8005e2e:	d102      	bne.n	8005e36 <_sbrk_r+0x1a>
 8005e30:	682b      	ldr	r3, [r5, #0]
 8005e32:	b103      	cbz	r3, 8005e36 <_sbrk_r+0x1a>
 8005e34:	6023      	str	r3, [r4, #0]
 8005e36:	bd38      	pop	{r3, r4, r5, pc}
 8005e38:	20012ef0 	.word	0x20012ef0

08005e3c <__sread>:
 8005e3c:	b510      	push	{r4, lr}
 8005e3e:	460c      	mov	r4, r1
 8005e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e44:	f000 f8a8 	bl	8005f98 <_read_r>
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	bfab      	itete	ge
 8005e4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e4e:	89a3      	ldrhlt	r3, [r4, #12]
 8005e50:	181b      	addge	r3, r3, r0
 8005e52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e56:	bfac      	ite	ge
 8005e58:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e5a:	81a3      	strhlt	r3, [r4, #12]
 8005e5c:	bd10      	pop	{r4, pc}

08005e5e <__swrite>:
 8005e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e62:	461f      	mov	r7, r3
 8005e64:	898b      	ldrh	r3, [r1, #12]
 8005e66:	05db      	lsls	r3, r3, #23
 8005e68:	4605      	mov	r5, r0
 8005e6a:	460c      	mov	r4, r1
 8005e6c:	4616      	mov	r6, r2
 8005e6e:	d505      	bpl.n	8005e7c <__swrite+0x1e>
 8005e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e74:	2302      	movs	r3, #2
 8005e76:	2200      	movs	r2, #0
 8005e78:	f000 f870 	bl	8005f5c <_lseek_r>
 8005e7c:	89a3      	ldrh	r3, [r4, #12]
 8005e7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e86:	81a3      	strh	r3, [r4, #12]
 8005e88:	4632      	mov	r2, r6
 8005e8a:	463b      	mov	r3, r7
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e92:	f000 b817 	b.w	8005ec4 <_write_r>

08005e96 <__sseek>:
 8005e96:	b510      	push	{r4, lr}
 8005e98:	460c      	mov	r4, r1
 8005e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e9e:	f000 f85d 	bl	8005f5c <_lseek_r>
 8005ea2:	1c43      	adds	r3, r0, #1
 8005ea4:	89a3      	ldrh	r3, [r4, #12]
 8005ea6:	bf15      	itete	ne
 8005ea8:	6560      	strne	r0, [r4, #84]	; 0x54
 8005eaa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005eae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005eb2:	81a3      	strheq	r3, [r4, #12]
 8005eb4:	bf18      	it	ne
 8005eb6:	81a3      	strhne	r3, [r4, #12]
 8005eb8:	bd10      	pop	{r4, pc}

08005eba <__sclose>:
 8005eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ebe:	f000 b81b 	b.w	8005ef8 <_close_r>
	...

08005ec4 <_write_r>:
 8005ec4:	b538      	push	{r3, r4, r5, lr}
 8005ec6:	4d07      	ldr	r5, [pc, #28]	; (8005ee4 <_write_r+0x20>)
 8005ec8:	4604      	mov	r4, r0
 8005eca:	4608      	mov	r0, r1
 8005ecc:	4611      	mov	r1, r2
 8005ece:	2200      	movs	r2, #0
 8005ed0:	602a      	str	r2, [r5, #0]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	f7fa ff07 	bl	8000ce6 <_write>
 8005ed8:	1c43      	adds	r3, r0, #1
 8005eda:	d102      	bne.n	8005ee2 <_write_r+0x1e>
 8005edc:	682b      	ldr	r3, [r5, #0]
 8005ede:	b103      	cbz	r3, 8005ee2 <_write_r+0x1e>
 8005ee0:	6023      	str	r3, [r4, #0]
 8005ee2:	bd38      	pop	{r3, r4, r5, pc}
 8005ee4:	20012ef0 	.word	0x20012ef0

08005ee8 <abort>:
 8005ee8:	b508      	push	{r3, lr}
 8005eea:	2006      	movs	r0, #6
 8005eec:	f000 f88e 	bl	800600c <raise>
 8005ef0:	2001      	movs	r0, #1
 8005ef2:	f7fa fed1 	bl	8000c98 <_exit>
	...

08005ef8 <_close_r>:
 8005ef8:	b538      	push	{r3, r4, r5, lr}
 8005efa:	4d06      	ldr	r5, [pc, #24]	; (8005f14 <_close_r+0x1c>)
 8005efc:	2300      	movs	r3, #0
 8005efe:	4604      	mov	r4, r0
 8005f00:	4608      	mov	r0, r1
 8005f02:	602b      	str	r3, [r5, #0]
 8005f04:	f7fa ff0b 	bl	8000d1e <_close>
 8005f08:	1c43      	adds	r3, r0, #1
 8005f0a:	d102      	bne.n	8005f12 <_close_r+0x1a>
 8005f0c:	682b      	ldr	r3, [r5, #0]
 8005f0e:	b103      	cbz	r3, 8005f12 <_close_r+0x1a>
 8005f10:	6023      	str	r3, [r4, #0]
 8005f12:	bd38      	pop	{r3, r4, r5, pc}
 8005f14:	20012ef0 	.word	0x20012ef0

08005f18 <_fstat_r>:
 8005f18:	b538      	push	{r3, r4, r5, lr}
 8005f1a:	4d07      	ldr	r5, [pc, #28]	; (8005f38 <_fstat_r+0x20>)
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	4604      	mov	r4, r0
 8005f20:	4608      	mov	r0, r1
 8005f22:	4611      	mov	r1, r2
 8005f24:	602b      	str	r3, [r5, #0]
 8005f26:	f7fa ff06 	bl	8000d36 <_fstat>
 8005f2a:	1c43      	adds	r3, r0, #1
 8005f2c:	d102      	bne.n	8005f34 <_fstat_r+0x1c>
 8005f2e:	682b      	ldr	r3, [r5, #0]
 8005f30:	b103      	cbz	r3, 8005f34 <_fstat_r+0x1c>
 8005f32:	6023      	str	r3, [r4, #0]
 8005f34:	bd38      	pop	{r3, r4, r5, pc}
 8005f36:	bf00      	nop
 8005f38:	20012ef0 	.word	0x20012ef0

08005f3c <_isatty_r>:
 8005f3c:	b538      	push	{r3, r4, r5, lr}
 8005f3e:	4d06      	ldr	r5, [pc, #24]	; (8005f58 <_isatty_r+0x1c>)
 8005f40:	2300      	movs	r3, #0
 8005f42:	4604      	mov	r4, r0
 8005f44:	4608      	mov	r0, r1
 8005f46:	602b      	str	r3, [r5, #0]
 8005f48:	f7fa ff05 	bl	8000d56 <_isatty>
 8005f4c:	1c43      	adds	r3, r0, #1
 8005f4e:	d102      	bne.n	8005f56 <_isatty_r+0x1a>
 8005f50:	682b      	ldr	r3, [r5, #0]
 8005f52:	b103      	cbz	r3, 8005f56 <_isatty_r+0x1a>
 8005f54:	6023      	str	r3, [r4, #0]
 8005f56:	bd38      	pop	{r3, r4, r5, pc}
 8005f58:	20012ef0 	.word	0x20012ef0

08005f5c <_lseek_r>:
 8005f5c:	b538      	push	{r3, r4, r5, lr}
 8005f5e:	4d07      	ldr	r5, [pc, #28]	; (8005f7c <_lseek_r+0x20>)
 8005f60:	4604      	mov	r4, r0
 8005f62:	4608      	mov	r0, r1
 8005f64:	4611      	mov	r1, r2
 8005f66:	2200      	movs	r2, #0
 8005f68:	602a      	str	r2, [r5, #0]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	f7fa fefe 	bl	8000d6c <_lseek>
 8005f70:	1c43      	adds	r3, r0, #1
 8005f72:	d102      	bne.n	8005f7a <_lseek_r+0x1e>
 8005f74:	682b      	ldr	r3, [r5, #0]
 8005f76:	b103      	cbz	r3, 8005f7a <_lseek_r+0x1e>
 8005f78:	6023      	str	r3, [r4, #0]
 8005f7a:	bd38      	pop	{r3, r4, r5, pc}
 8005f7c:	20012ef0 	.word	0x20012ef0

08005f80 <__malloc_lock>:
 8005f80:	4801      	ldr	r0, [pc, #4]	; (8005f88 <__malloc_lock+0x8>)
 8005f82:	f7ff bb45 	b.w	8005610 <__retarget_lock_acquire_recursive>
 8005f86:	bf00      	nop
 8005f88:	20012ee8 	.word	0x20012ee8

08005f8c <__malloc_unlock>:
 8005f8c:	4801      	ldr	r0, [pc, #4]	; (8005f94 <__malloc_unlock+0x8>)
 8005f8e:	f7ff bb40 	b.w	8005612 <__retarget_lock_release_recursive>
 8005f92:	bf00      	nop
 8005f94:	20012ee8 	.word	0x20012ee8

08005f98 <_read_r>:
 8005f98:	b538      	push	{r3, r4, r5, lr}
 8005f9a:	4d07      	ldr	r5, [pc, #28]	; (8005fb8 <_read_r+0x20>)
 8005f9c:	4604      	mov	r4, r0
 8005f9e:	4608      	mov	r0, r1
 8005fa0:	4611      	mov	r1, r2
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	602a      	str	r2, [r5, #0]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	f7fa fe80 	bl	8000cac <_read>
 8005fac:	1c43      	adds	r3, r0, #1
 8005fae:	d102      	bne.n	8005fb6 <_read_r+0x1e>
 8005fb0:	682b      	ldr	r3, [r5, #0]
 8005fb2:	b103      	cbz	r3, 8005fb6 <_read_r+0x1e>
 8005fb4:	6023      	str	r3, [r4, #0]
 8005fb6:	bd38      	pop	{r3, r4, r5, pc}
 8005fb8:	20012ef0 	.word	0x20012ef0

08005fbc <_raise_r>:
 8005fbc:	291f      	cmp	r1, #31
 8005fbe:	b538      	push	{r3, r4, r5, lr}
 8005fc0:	4604      	mov	r4, r0
 8005fc2:	460d      	mov	r5, r1
 8005fc4:	d904      	bls.n	8005fd0 <_raise_r+0x14>
 8005fc6:	2316      	movs	r3, #22
 8005fc8:	6003      	str	r3, [r0, #0]
 8005fca:	f04f 30ff 	mov.w	r0, #4294967295
 8005fce:	bd38      	pop	{r3, r4, r5, pc}
 8005fd0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005fd2:	b112      	cbz	r2, 8005fda <_raise_r+0x1e>
 8005fd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005fd8:	b94b      	cbnz	r3, 8005fee <_raise_r+0x32>
 8005fda:	4620      	mov	r0, r4
 8005fdc:	f000 f830 	bl	8006040 <_getpid_r>
 8005fe0:	462a      	mov	r2, r5
 8005fe2:	4601      	mov	r1, r0
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fea:	f000 b817 	b.w	800601c <_kill_r>
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d00a      	beq.n	8006008 <_raise_r+0x4c>
 8005ff2:	1c59      	adds	r1, r3, #1
 8005ff4:	d103      	bne.n	8005ffe <_raise_r+0x42>
 8005ff6:	2316      	movs	r3, #22
 8005ff8:	6003      	str	r3, [r0, #0]
 8005ffa:	2001      	movs	r0, #1
 8005ffc:	e7e7      	b.n	8005fce <_raise_r+0x12>
 8005ffe:	2400      	movs	r4, #0
 8006000:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006004:	4628      	mov	r0, r5
 8006006:	4798      	blx	r3
 8006008:	2000      	movs	r0, #0
 800600a:	e7e0      	b.n	8005fce <_raise_r+0x12>

0800600c <raise>:
 800600c:	4b02      	ldr	r3, [pc, #8]	; (8006018 <raise+0xc>)
 800600e:	4601      	mov	r1, r0
 8006010:	6818      	ldr	r0, [r3, #0]
 8006012:	f7ff bfd3 	b.w	8005fbc <_raise_r>
 8006016:	bf00      	nop
 8006018:	20000014 	.word	0x20000014

0800601c <_kill_r>:
 800601c:	b538      	push	{r3, r4, r5, lr}
 800601e:	4d07      	ldr	r5, [pc, #28]	; (800603c <_kill_r+0x20>)
 8006020:	2300      	movs	r3, #0
 8006022:	4604      	mov	r4, r0
 8006024:	4608      	mov	r0, r1
 8006026:	4611      	mov	r1, r2
 8006028:	602b      	str	r3, [r5, #0]
 800602a:	f7fa fe25 	bl	8000c78 <_kill>
 800602e:	1c43      	adds	r3, r0, #1
 8006030:	d102      	bne.n	8006038 <_kill_r+0x1c>
 8006032:	682b      	ldr	r3, [r5, #0]
 8006034:	b103      	cbz	r3, 8006038 <_kill_r+0x1c>
 8006036:	6023      	str	r3, [r4, #0]
 8006038:	bd38      	pop	{r3, r4, r5, pc}
 800603a:	bf00      	nop
 800603c:	20012ef0 	.word	0x20012ef0

08006040 <_getpid_r>:
 8006040:	f7fa be12 	b.w	8000c68 <_getpid>

08006044 <_init>:
 8006044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006046:	bf00      	nop
 8006048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800604a:	bc08      	pop	{r3}
 800604c:	469e      	mov	lr, r3
 800604e:	4770      	bx	lr

08006050 <_fini>:
 8006050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006052:	bf00      	nop
 8006054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006056:	bc08      	pop	{r3}
 8006058:	469e      	mov	lr, r3
 800605a:	4770      	bx	lr
