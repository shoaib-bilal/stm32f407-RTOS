
010FreeRTOSCountingSemaTasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ea0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08006030  08006030  00016030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800614c  0800614c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800614c  0800614c  0001614c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006154  08006154  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006154  08006154  00016154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006158  08006158  00016158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800615c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00012f78  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012ff0  20012ff0  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017c25  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e5c  00000000  00000000  00037ccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001108  00000000  00000000  0003ab30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001000  00000000  00000000  0003bc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f7d  00000000  00000000  0003cc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000139d1  00000000  00000000  0005fbb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4a94  00000000  00000000  00073586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014801a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b0c  00000000  00000000  00148070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006018 	.word	0x08006018

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006018 	.word	0x08006018

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000586:	2b00      	cmp	r3, #0
 8000588:	db0b      	blt.n	80005a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	f003 021f 	and.w	r2, r3, #31
 8000590:	4907      	ldr	r1, [pc, #28]	; (80005b0 <__NVIC_EnableIRQ+0x38>)
 8000592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000596:	095b      	lsrs	r3, r3, #5
 8000598:	2001      	movs	r0, #1
 800059a:	fa00 f202 	lsl.w	r2, r0, r2
 800059e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	e000e100 	.word	0xe000e100

080005b4 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	db0c      	blt.n	80005e0 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	f003 021f 	and.w	r2, r3, #31
 80005cc:	4907      	ldr	r1, [pc, #28]	; (80005ec <__NVIC_SetPendingIRQ+0x38>)
 80005ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d2:	095b      	lsrs	r3, r3, #5
 80005d4:	2001      	movs	r0, #1
 80005d6:	fa00 f202 	lsl.w	r2, r0, r2
 80005da:	3340      	adds	r3, #64	; 0x40
 80005dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	e000e100 	.word	0xe000e100

080005f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	6039      	str	r1, [r7, #0]
 80005fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000600:	2b00      	cmp	r3, #0
 8000602:	db0a      	blt.n	800061a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	b2da      	uxtb	r2, r3
 8000608:	490c      	ldr	r1, [pc, #48]	; (800063c <__NVIC_SetPriority+0x4c>)
 800060a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060e:	0112      	lsls	r2, r2, #4
 8000610:	b2d2      	uxtb	r2, r2
 8000612:	440b      	add	r3, r1
 8000614:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000618:	e00a      	b.n	8000630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	b2da      	uxtb	r2, r3
 800061e:	4908      	ldr	r1, [pc, #32]	; (8000640 <__NVIC_SetPriority+0x50>)
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	f003 030f 	and.w	r3, r3, #15
 8000626:	3b04      	subs	r3, #4
 8000628:	0112      	lsls	r2, r2, #4
 800062a:	b2d2      	uxtb	r2, r2
 800062c:	440b      	add	r3, r1
 800062e:	761a      	strb	r2, [r3, #24]
}
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	e000e100 	.word	0xe000e100
 8000640:	e000ed00 	.word	0xe000ed00

08000644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064a:	f000 fc3b 	bl	8000ec4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064e:	f000 f843 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000652:	f000 f8d5 	bl	8000800 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000656:	f000 f8a9 	bl	80007ac <MX_USART2_UART_Init>
	//SEGGER_UART_init(500000);

	//SEGGER_SYSVIEW_Conf();
	//SEGGER_SYSVIEW_Start();

  sprintf(usr_msg,"Demo of usage of counting semaphore. \r\n");
 800065a:	4916      	ldr	r1, [pc, #88]	; (80006b4 <main+0x70>)
 800065c:	4816      	ldr	r0, [pc, #88]	; (80006b8 <main+0x74>)
 800065e:	f005 f8bb 	bl	80057d8 <siprintf>
  print_msg(usr_msg);
 8000662:	4815      	ldr	r0, [pc, #84]	; (80006b8 <main+0x74>)
 8000664:	f000 fa64 	bl	8000b30 <print_msg>

  CountingSemaphore = xSemaphoreCreateCounting(10,0);
 8000668:	2100      	movs	r1, #0
 800066a:	200a      	movs	r0, #10
 800066c:	f002 fb0c 	bl	8002c88 <xQueueCreateCountingSemaphore>
 8000670:	4603      	mov	r3, r0
 8000672:	4a12      	ldr	r2, [pc, #72]	; (80006bc <main+0x78>)
 8000674:	6013      	str	r3, [r2, #0]

  if(CountingSemaphore!= NULL)
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <main+0x78>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d019      	beq.n	80006b2 <main+0x6e>
  {
	  prvSetupSoftwareInterrupt();
 800067e:	f000 fa6d 	bl	8000b5c <prvSetupSoftwareInterrupt>

	  xTaskCreate(vHandlertask, "Handler", 500, NULL, 1, &periodic_handle);
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <main+0x7c>)
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	2300      	movs	r3, #0
 800068c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000690:	490c      	ldr	r1, [pc, #48]	; (80006c4 <main+0x80>)
 8000692:	480d      	ldr	r0, [pc, #52]	; (80006c8 <main+0x84>)
 8000694:	f003 f8e2 	bl	800385c <xTaskCreate>

	  xTaskCreate(vPeriodictask, "Periodic", 500, NULL, 3, &button_handle);
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <main+0x88>)
 800069a:	9301      	str	r3, [sp, #4]
 800069c:	2303      	movs	r3, #3
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	2300      	movs	r3, #0
 80006a2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006a6:	490a      	ldr	r1, [pc, #40]	; (80006d0 <main+0x8c>)
 80006a8:	480a      	ldr	r0, [pc, #40]	; (80006d4 <main+0x90>)
 80006aa:	f003 f8d7 	bl	800385c <xTaskCreate>

	  vTaskStartScheduler();
 80006ae:	f003 fa4f 	bl	8003b50 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b2:	e7fe      	b.n	80006b2 <main+0x6e>
 80006b4:	08006030 	.word	0x08006030
 80006b8:	20000094 	.word	0x20000094
 80006bc:	20012f08 	.word	0x20012f08
 80006c0:	20012f0c 	.word	0x20012f0c
 80006c4:	08006058 	.word	0x08006058
 80006c8:	08000abd 	.word	0x08000abd
 80006cc:	20012f04 	.word	0x20012f04
 80006d0:	08006060 	.word	0x08006060
 80006d4:	08000af1 	.word	0x08000af1

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	; 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	2230      	movs	r2, #48	; 0x30
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f005 f86e 	bl	80057c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <SystemClock_Config+0xcc>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	4a27      	ldr	r2, [pc, #156]	; (80007a4 <SystemClock_Config+0xcc>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	; 0x40
 800070c:	4b25      	ldr	r3, [pc, #148]	; (80007a4 <SystemClock_Config+0xcc>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <SystemClock_Config+0xd0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <SystemClock_Config+0xd0>)
 8000722:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <SystemClock_Config+0xd0>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000734:	2302      	movs	r3, #2
 8000736:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000738:	2301      	movs	r3, #1
 800073a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073c:	2310      	movs	r3, #16
 800073e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000740:	2302      	movs	r3, #2
 8000742:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000744:	2300      	movs	r3, #0
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000748:	2308      	movs	r3, #8
 800074a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800074c:	23a8      	movs	r3, #168	; 0xa8
 800074e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000750:	2302      	movs	r3, #2
 8000752:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000754:	2307      	movs	r3, #7
 8000756:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000758:	f107 0320 	add.w	r3, r7, #32
 800075c:	4618      	mov	r0, r3
 800075e:	f000 fe8b 	bl	8001478 <HAL_RCC_OscConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000768:	f000 fa48 	bl	8000bfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076c:	230f      	movs	r3, #15
 800076e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000770:	2302      	movs	r3, #2
 8000772:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000778:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800077c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800077e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000782:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	2105      	movs	r1, #5
 800078a:	4618      	mov	r0, r3
 800078c:	f001 f8ec 	bl	8001968 <HAL_RCC_ClockConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000796:	f000 fa31 	bl	8000bfc <Error_Handler>
  }
}
 800079a:	bf00      	nop
 800079c:	3750      	adds	r7, #80	; 0x50
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40007000 	.word	0x40007000

080007ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007b2:	4a12      	ldr	r2, [pc, #72]	; (80007fc <MX_USART2_UART_Init+0x50>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007e4:	f001 fd9c 	bl	8002320 <HAL_UART_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ee:	f000 fa05 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20012f10 	.word	0x20012f10
 80007fc:	40004400 	.word	0x40004400

08000800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08c      	sub	sp, #48	; 0x30
 8000804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	61bb      	str	r3, [r7, #24]
 800081a:	4ba2      	ldr	r3, [pc, #648]	; (8000aa4 <MX_GPIO_Init+0x2a4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4aa1      	ldr	r2, [pc, #644]	; (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000820:	f043 0310 	orr.w	r3, r3, #16
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b9f      	ldr	r3, [pc, #636]	; (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0310 	and.w	r3, r3, #16
 800082e:	61bb      	str	r3, [r7, #24]
 8000830:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
 8000836:	4b9b      	ldr	r3, [pc, #620]	; (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a9a      	ldr	r2, [pc, #616]	; (8000aa4 <MX_GPIO_Init+0x2a4>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b98      	ldr	r3, [pc, #608]	; (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	4b94      	ldr	r3, [pc, #592]	; (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a93      	ldr	r2, [pc, #588]	; (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b91      	ldr	r3, [pc, #580]	; (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	4b8d      	ldr	r3, [pc, #564]	; (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a8c      	ldr	r2, [pc, #560]	; (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b8a      	ldr	r3, [pc, #552]	; (8000aa4 <MX_GPIO_Init+0x2a4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	4b86      	ldr	r3, [pc, #536]	; (8000aa4 <MX_GPIO_Init+0x2a4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a85      	ldr	r2, [pc, #532]	; (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b83      	ldr	r3, [pc, #524]	; (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	4b7f      	ldr	r3, [pc, #508]	; (8000aa4 <MX_GPIO_Init+0x2a4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a7e      	ldr	r2, [pc, #504]	; (8000aa4 <MX_GPIO_Init+0x2a4>)
 80008ac:	f043 0308 	orr.w	r3, r3, #8
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b7c      	ldr	r3, [pc, #496]	; (8000aa4 <MX_GPIO_Init+0x2a4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0308 	and.w	r3, r3, #8
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2108      	movs	r1, #8
 80008c2:	4879      	ldr	r0, [pc, #484]	; (8000aa8 <MX_GPIO_Init+0x2a8>)
 80008c4:	f000 fdbe 	bl	8001444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008c8:	2201      	movs	r2, #1
 80008ca:	2101      	movs	r1, #1
 80008cc:	4877      	ldr	r0, [pc, #476]	; (8000aac <MX_GPIO_Init+0x2ac>)
 80008ce:	f000 fdb9 	bl	8001444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008d2:	2200      	movs	r2, #0
 80008d4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008d8:	4875      	ldr	r0, [pc, #468]	; (8000ab0 <MX_GPIO_Init+0x2b0>)
 80008da:	f000 fdb3 	bl	8001444 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008de:	2308      	movs	r3, #8
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e2:	2301      	movs	r3, #1
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	486c      	ldr	r0, [pc, #432]	; (8000aa8 <MX_GPIO_Init+0x2a8>)
 80008f6:	f000 fc09 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008fa:	2301      	movs	r3, #1
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	4866      	ldr	r0, [pc, #408]	; (8000aac <MX_GPIO_Init+0x2ac>)
 8000912:	f000 fbfb 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000916:	2308      	movs	r3, #8
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000926:	2305      	movs	r3, #5
 8000928:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	485e      	ldr	r0, [pc, #376]	; (8000aac <MX_GPIO_Init+0x2ac>)
 8000932:	f000 fbeb 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000936:	2301      	movs	r3, #1
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800093a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	485a      	ldr	r0, [pc, #360]	; (8000ab4 <MX_GPIO_Init+0x2b4>)
 800094c:	f000 fbde 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000950:	2310      	movs	r3, #16
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000960:	2306      	movs	r3, #6
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4619      	mov	r1, r3
 800096a:	4852      	ldr	r0, [pc, #328]	; (8000ab4 <MX_GPIO_Init+0x2b4>)
 800096c:	f000 fbce 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000970:	23e0      	movs	r3, #224	; 0xe0
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000980:	2305      	movs	r3, #5
 8000982:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	484a      	ldr	r0, [pc, #296]	; (8000ab4 <MX_GPIO_Init+0x2b4>)
 800098c:	f000 fbbe 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000990:	2304      	movs	r3, #4
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000994:	2300      	movs	r3, #0
 8000996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	4845      	ldr	r0, [pc, #276]	; (8000ab8 <MX_GPIO_Init+0x2b8>)
 80009a4:	f000 fbb2 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009ba:	2305      	movs	r3, #5
 80009bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	483c      	ldr	r0, [pc, #240]	; (8000ab8 <MX_GPIO_Init+0x2b8>)
 80009c6:	f000 fba1 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009ca:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009ce:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	4833      	ldr	r0, [pc, #204]	; (8000ab0 <MX_GPIO_Init+0x2b0>)
 80009e4:	f000 fb92 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009e8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	2302      	movs	r3, #2
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009fa:	2306      	movs	r3, #6
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4829      	ldr	r0, [pc, #164]	; (8000aac <MX_GPIO_Init+0x2ac>)
 8000a06:	f000 fb81 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000a0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4825      	ldr	r0, [pc, #148]	; (8000ab4 <MX_GPIO_Init+0x2b4>)
 8000a20:	f000 fb74 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a24:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a36:	230a      	movs	r3, #10
 8000a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	481c      	ldr	r0, [pc, #112]	; (8000ab4 <MX_GPIO_Init+0x2b4>)
 8000a42:	f000 fb63 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a46:	2320      	movs	r3, #32
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	4619      	mov	r1, r3
 8000a58:	4815      	ldr	r0, [pc, #84]	; (8000ab0 <MX_GPIO_Init+0x2b0>)
 8000a5a:	f000 fb57 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a5e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a64:	2312      	movs	r3, #18
 8000a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a70:	2304      	movs	r3, #4
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	4619      	mov	r1, r3
 8000a7a:	480f      	ldr	r0, [pc, #60]	; (8000ab8 <MX_GPIO_Init+0x2b8>)
 8000a7c:	f000 fb46 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a80:	2302      	movs	r3, #2
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a84:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <MX_GPIO_Init+0x2a8>)
 8000a96:	f000 fb39 	bl	800110c <HAL_GPIO_Init>

}
 8000a9a:	bf00      	nop
 8000a9c:	3730      	adds	r7, #48	; 0x30
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40020800 	.word	0x40020800
 8000ab0:	40020c00 	.word	0x40020c00
 8000ab4:	40020000 	.word	0x40020000
 8000ab8:	40020400 	.word	0x40020400

08000abc <vHandlertask>:

/* USER CODE BEGIN 4 */

static void vHandlertask(void *pvparameters)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
		/* Use the semaphore to wait for the event.  The semaphore was created
		before the scheduler was started so before this task ran for the first
		time.  The task blocks indefinitely meaning this function call will only
		return once the semaphore has been successfully obtained - so there is no
		need to check the returned value. */
		xSemaphoreTake( CountingSemaphore, portMAX_DELAY );
 8000ac4:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <vHandlertask+0x28>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8000acc:	4618      	mov	r0, r3
 8000ace:	f002 fc33 	bl	8003338 <xQueueSemaphoreTake>

		/* To get here the event must have occurred.  Process the event (in this
		case we just print out a message). */
		sprintf(usr_msg, "Handler task - Processing event.\r\n");
 8000ad2:	4905      	ldr	r1, [pc, #20]	; (8000ae8 <vHandlertask+0x2c>)
 8000ad4:	4805      	ldr	r0, [pc, #20]	; (8000aec <vHandlertask+0x30>)
 8000ad6:	f004 fe7f 	bl	80057d8 <siprintf>
		print_msg(usr_msg);
 8000ada:	4804      	ldr	r0, [pc, #16]	; (8000aec <vHandlertask+0x30>)
 8000adc:	f000 f828 	bl	8000b30 <print_msg>
		xSemaphoreTake( CountingSemaphore, portMAX_DELAY );
 8000ae0:	e7f0      	b.n	8000ac4 <vHandlertask+0x8>
 8000ae2:	bf00      	nop
 8000ae4:	20012f08 	.word	0x20012f08
 8000ae8:	0800606c 	.word	0x0800606c
 8000aec:	20000094 	.word	0x20000094

08000af0 <vPeriodictask>:
		//SEGGER_SYSVIEW_PrintfTarget("Handler task - Processing event.\r\n");
	}
}
static void vPeriodictask(void *pvparameters)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		vTaskDelay(pdMS_TO_TICKS(500));
 8000af8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000afc:	f002 fff4 	bl	8003ae8 <vTaskDelay>

		sprintf(usr_msg,"Periodic ask pending the interrupt.\r\n");
 8000b00:	4908      	ldr	r1, [pc, #32]	; (8000b24 <vPeriodictask+0x34>)
 8000b02:	4809      	ldr	r0, [pc, #36]	; (8000b28 <vPeriodictask+0x38>)
 8000b04:	f004 fe68 	bl	80057d8 <siprintf>
		print_msg(usr_msg);
 8000b08:	4807      	ldr	r0, [pc, #28]	; (8000b28 <vPeriodictask+0x38>)
 8000b0a:	f000 f811 	bl	8000b30 <print_msg>

		//SEGGER_SYSVIEW_PrintfTarget("Periodic ask pending the interrupt.\r\n");

		NVIC_SetPendingIRQ(EXTI15_10_IRQn);
 8000b0e:	2028      	movs	r0, #40	; 0x28
 8000b10:	f7ff fd50 	bl	80005b4 <__NVIC_SetPendingIRQ>

		sprintf(usr_msg,"Periodic task resuming.\r\n");
 8000b14:	4905      	ldr	r1, [pc, #20]	; (8000b2c <vPeriodictask+0x3c>)
 8000b16:	4804      	ldr	r0, [pc, #16]	; (8000b28 <vPeriodictask+0x38>)
 8000b18:	f004 fe5e 	bl	80057d8 <siprintf>
		print_msg(usr_msg);
 8000b1c:	4802      	ldr	r0, [pc, #8]	; (8000b28 <vPeriodictask+0x38>)
 8000b1e:	f000 f807 	bl	8000b30 <print_msg>
		vTaskDelay(pdMS_TO_TICKS(500));
 8000b22:	e7e9      	b.n	8000af8 <vPeriodictask+0x8>
 8000b24:	08006090 	.word	0x08006090
 8000b28:	20000094 	.word	0x20000094
 8000b2c:	080060b8 	.word	0x080060b8

08000b30 <print_msg>:

	}
}

void print_msg(char *usr_msg)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)usr_msg, strlen(usr_msg), HAL_MAX_DELAY);
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff fb49 	bl	80001d0 <strlen>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
 8000b46:	6879      	ldr	r1, [r7, #4]
 8000b48:	4803      	ldr	r0, [pc, #12]	; (8000b58 <print_msg+0x28>)
 8000b4a:	f001 fc36 	bl	80023ba <HAL_UART_Transmit>
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20012f10 	.word	0x20012f10

08000b5c <prvSetupSoftwareInterrupt>:

static void prvSetupSoftwareInterrupt()
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0

	/* The interrupt service routine uses an (interrupt safe) FreeRTOS API
	function so the interrupt priority must be at or below the priority defined
	by configSYSCALL_INTERRUPT_PRIORITY. */

	NVIC_SetPriority( EXTI15_10_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY );
 8000b60:	2105      	movs	r1, #5
 8000b62:	2028      	movs	r0, #40	; 0x28
 8000b64:	f7ff fd44 	bl	80005f0 <__NVIC_SetPriority>

	/* Enable the interrupt. */
	NVIC_EnableIRQ( EXTI15_10_IRQn );
 8000b68:	2028      	movs	r0, #40	; 0x28
 8000b6a:	f7ff fd05 	bl	8000578 <__NVIC_EnableIRQ>
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0

	BaseType_t xHigherPriorityTaskWoken= pdFALSE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
		events getting lost.  This simulates multiple interrupts being taken by the
		processor, even though in this case the events are simulated within a single
		interrupt occurrence.*/


	sprintf(usr_msg,"==>Button_handler\r\n");
 8000b7e:	4912      	ldr	r1, [pc, #72]	; (8000bc8 <EXTI15_10_IRQHandler+0x54>)
 8000b80:	4812      	ldr	r0, [pc, #72]	; (8000bcc <EXTI15_10_IRQHandler+0x58>)
 8000b82:	f004 fe29 	bl	80057d8 <siprintf>
	print_msg(usr_msg);
 8000b86:	4811      	ldr	r0, [pc, #68]	; (8000bcc <EXTI15_10_IRQHandler+0x58>)
 8000b88:	f7ff ffd2 	bl	8000b30 <print_msg>
	//traceISR_ENTER();
	//SEGGER_SYSVIEW_PrintfTarget("==>Button_handler\r\n");

	xSemaphoreGiveFromISR(CountingSemaphore,&xHigherPriorityTaskWoken);
 8000b8c:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <EXTI15_10_IRQHandler+0x5c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	1d3a      	adds	r2, r7, #4
 8000b92:	4611      	mov	r1, r2
 8000b94:	4618      	mov	r0, r3
 8000b96:	f002 fa53 	bl	8003040 <xQueueGiveFromISR>
	xSemaphoreGiveFromISR(CountingSemaphore,&xHigherPriorityTaskWoken);
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <EXTI15_10_IRQHandler+0x5c>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	1d3a      	adds	r2, r7, #4
 8000ba0:	4611      	mov	r1, r2
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f002 fa4c 	bl	8003040 <xQueueGiveFromISR>
	NOTE: The syntax for forcing a context switch within an ISR varies between
	FreeRTOS ports.  The portEND_SWITCHING_ISR() macro is provided as part of
	the Cortex M3 port layer for this purpose.  taskYIELD() must never be called
	from an ISR! */

	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d007      	beq.n	8000bbe <EXTI15_10_IRQHandler+0x4a>
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <EXTI15_10_IRQHandler+0x60>)
 8000bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	f3bf 8f4f 	dsb	sy
 8000bba:	f3bf 8f6f 	isb	sy
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	080060d4 	.word	0x080060d4
 8000bcc:	20000094 	.word	0x20000094
 8000bd0:	20012f08 	.word	0x20012f08
 8000bd4:	e000ed04 	.word	0xe000ed04

08000bd8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d101      	bne.n	8000bee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bea:	f000 f98d 	bl	8000f08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40001000 	.word	0x40001000

08000bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c00:	b672      	cpsid	i
}
 8000c02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <Error_Handler+0x8>
	...

08000c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	4a0f      	ldr	r2, [pc, #60]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	603b      	str	r3, [r7, #0]
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c32:	4a08      	ldr	r2, [pc, #32]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c38:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	40023800 	.word	0x40023800

08000c58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	; 0x28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a1a      	ldr	r2, [pc, #104]	; (8000ce0 <HAL_UART_MspInit+0x88>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d12d      	bne.n	8000cd6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <HAL_UART_MspInit+0x8c>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	4a18      	ldr	r2, [pc, #96]	; (8000ce4 <HAL_UART_MspInit+0x8c>)
 8000c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c88:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <HAL_UART_MspInit+0x8c>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_UART_MspInit+0x8c>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a11      	ldr	r2, [pc, #68]	; (8000ce4 <HAL_UART_MspInit+0x8c>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <HAL_UART_MspInit+0x8c>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cb2:	230c      	movs	r3, #12
 8000cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cc2:	2307      	movs	r3, #7
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4806      	ldr	r0, [pc, #24]	; (8000ce8 <HAL_UART_MspInit+0x90>)
 8000cce:	f000 fa1d 	bl	800110c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

    vInitPrioGroupValue();
 8000cd2:	f004 f9a1 	bl	8005018 <vInitPrioGroupValue>

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cd6:	bf00      	nop
 8000cd8:	3728      	adds	r7, #40	; 0x28
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40004400 	.word	0x40004400
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020000 	.word	0x40020000

08000cec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08c      	sub	sp, #48	; 0x30
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	6879      	ldr	r1, [r7, #4]
 8000d00:	2036      	movs	r0, #54	; 0x36
 8000d02:	f000 f9d9 	bl	80010b8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d06:	2036      	movs	r0, #54	; 0x36
 8000d08:	f000 f9f2 	bl	80010f0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	4b1f      	ldr	r3, [pc, #124]	; (8000d90 <HAL_InitTick+0xa4>)
 8000d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d14:	4a1e      	ldr	r2, [pc, #120]	; (8000d90 <HAL_InitTick+0xa4>)
 8000d16:	f043 0310 	orr.w	r3, r3, #16
 8000d1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1c:	4b1c      	ldr	r3, [pc, #112]	; (8000d90 <HAL_InitTick+0xa4>)
 8000d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d20:	f003 0310 	and.w	r3, r3, #16
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d28:	f107 0210 	add.w	r2, r7, #16
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	4611      	mov	r1, r2
 8000d32:	4618      	mov	r0, r3
 8000d34:	f001 f814 	bl	8001d60 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d38:	f000 ffea 	bl	8001d10 <HAL_RCC_GetPCLK1Freq>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d44:	4a13      	ldr	r2, [pc, #76]	; (8000d94 <HAL_InitTick+0xa8>)
 8000d46:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4a:	0c9b      	lsrs	r3, r3, #18
 8000d4c:	3b01      	subs	r3, #1
 8000d4e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <HAL_InitTick+0xac>)
 8000d52:	4a12      	ldr	r2, [pc, #72]	; (8000d9c <HAL_InitTick+0xb0>)
 8000d54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <HAL_InitTick+0xac>)
 8000d58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d5c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d5e:	4a0e      	ldr	r2, [pc, #56]	; (8000d98 <HAL_InitTick+0xac>)
 8000d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d62:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <HAL_InitTick+0xac>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <HAL_InitTick+0xac>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000d70:	4809      	ldr	r0, [pc, #36]	; (8000d98 <HAL_InitTick+0xac>)
 8000d72:	f001 f827 	bl	8001dc4 <HAL_TIM_Base_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d104      	bne.n	8000d86 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000d7c:	4806      	ldr	r0, [pc, #24]	; (8000d98 <HAL_InitTick+0xac>)
 8000d7e:	f001 f87b 	bl	8001e78 <HAL_TIM_Base_Start_IT>
 8000d82:	4603      	mov	r3, r0
 8000d84:	e000      	b.n	8000d88 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3730      	adds	r7, #48	; 0x30
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40023800 	.word	0x40023800
 8000d94:	431bde83 	.word	0x431bde83
 8000d98:	20012f54 	.word	0x20012f54
 8000d9c:	40001000 	.word	0x40001000

08000da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <NMI_Handler+0x4>

08000da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <HardFault_Handler+0x4>

08000dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <MemManage_Handler+0x4>

08000db2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <BusFault_Handler+0x4>

08000db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <UsageFault_Handler+0x4>

08000dbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <TIM6_DAC_IRQHandler+0x10>)
 8000dd2:	f001 f8c1 	bl	8001f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20012f54 	.word	0x20012f54

08000de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de8:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <_sbrk+0x5c>)
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <_sbrk+0x60>)
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d102      	bne.n	8000e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <_sbrk+0x64>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <_sbrk+0x68>)
 8000e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d207      	bcs.n	8000e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e10:	f004 fca2 	bl	8005758 <__errno>
 8000e14:	4603      	mov	r3, r0
 8000e16:	220c      	movs	r2, #12
 8000e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1e:	e009      	b.n	8000e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e26:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <_sbrk+0x64>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <_sbrk+0x64>)
 8000e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e32:	68fb      	ldr	r3, [r7, #12]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20020000 	.word	0x20020000
 8000e40:	00000400 	.word	0x00000400
 8000e44:	20000190 	.word	0x20000190
 8000e48:	20012ff0 	.word	0x20012ff0

08000e4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <SystemInit+0x20>)
 8000e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e56:	4a05      	ldr	r2, [pc, #20]	; (8000e6c <SystemInit+0x20>)
 8000e58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e74:	480d      	ldr	r0, [pc, #52]	; (8000eac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e76:	490e      	ldr	r1, [pc, #56]	; (8000eb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e78:	4a0e      	ldr	r2, [pc, #56]	; (8000eb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e7c:	e002      	b.n	8000e84 <LoopCopyDataInit>

08000e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e82:	3304      	adds	r3, #4

08000e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e88:	d3f9      	bcc.n	8000e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8a:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e8c:	4c0b      	ldr	r4, [pc, #44]	; (8000ebc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e90:	e001      	b.n	8000e96 <LoopFillZerobss>

08000e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e94:	3204      	adds	r2, #4

08000e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e98:	d3fb      	bcc.n	8000e92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e9a:	f7ff ffd7 	bl	8000e4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e9e:	f004 fc61 	bl	8005764 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea2:	f7ff fbcf 	bl	8000644 <main>
  bx  lr    
 8000ea6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ea8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000eb4:	0800615c 	.word	0x0800615c
  ldr r2, =_sbss
 8000eb8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000ebc:	20012ff0 	.word	0x20012ff0

08000ec0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec0:	e7fe      	b.n	8000ec0 <ADC_IRQHandler>
	...

08000ec4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ec8:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	; (8000f04 <HAL_Init+0x40>)
 8000ece:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <HAL_Init+0x40>)
 8000eda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <HAL_Init+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a07      	ldr	r2, [pc, #28]	; (8000f04 <HAL_Init+0x40>)
 8000ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eec:	2003      	movs	r0, #3
 8000eee:	f000 f8d8 	bl	80010a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f7ff fefa 	bl	8000cec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef8:	f7ff fe86 	bl	8000c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40023c00 	.word	0x40023c00

08000f08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_IncTick+0x20>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_IncTick+0x24>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4413      	add	r3, r2
 8000f18:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <HAL_IncTick+0x24>)
 8000f1a:	6013      	str	r3, [r2, #0]
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	20012f9c 	.word	0x20012f9c

08000f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return uwTick;
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <HAL_GetTick+0x14>)
 8000f36:	681b      	ldr	r3, [r3, #0]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20012f9c 	.word	0x20012f9c

08000f48 <__NVIC_SetPriorityGrouping>:
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <__NVIC_SetPriorityGrouping+0x44>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5e:	68ba      	ldr	r2, [r7, #8]
 8000f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f64:	4013      	ands	r3, r2
 8000f66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f7a:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <__NVIC_SetPriorityGrouping+0x44>)
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	60d3      	str	r3, [r2, #12]
}
 8000f80:	bf00      	nop
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_GetPriorityGrouping>:
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f94:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	0a1b      	lsrs	r3, r3, #8
 8000f9a:	f003 0307 	and.w	r3, r3, #7
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_EnableIRQ>:
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	db0b      	blt.n	8000fd6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	f003 021f 	and.w	r2, r3, #31
 8000fc4:	4907      	ldr	r1, [pc, #28]	; (8000fe4 <__NVIC_EnableIRQ+0x38>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	095b      	lsrs	r3, r3, #5
 8000fcc:	2001      	movs	r0, #1
 8000fce:	fa00 f202 	lsl.w	r2, r0, r2
 8000fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000e100 	.word	0xe000e100

08000fe8 <__NVIC_SetPriority>:
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	db0a      	blt.n	8001012 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	490c      	ldr	r1, [pc, #48]	; (8001034 <__NVIC_SetPriority+0x4c>)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	0112      	lsls	r2, r2, #4
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	440b      	add	r3, r1
 800100c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001010:	e00a      	b.n	8001028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4908      	ldr	r1, [pc, #32]	; (8001038 <__NVIC_SetPriority+0x50>)
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	f003 030f 	and.w	r3, r3, #15
 800101e:	3b04      	subs	r3, #4
 8001020:	0112      	lsls	r2, r2, #4
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	440b      	add	r3, r1
 8001026:	761a      	strb	r2, [r3, #24]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000e100 	.word	0xe000e100
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	; 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	f1c3 0307 	rsb	r3, r3, #7
 8001056:	2b04      	cmp	r3, #4
 8001058:	bf28      	it	cs
 800105a:	2304      	movcs	r3, #4
 800105c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3304      	adds	r3, #4
 8001062:	2b06      	cmp	r3, #6
 8001064:	d902      	bls.n	800106c <NVIC_EncodePriority+0x30>
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3b03      	subs	r3, #3
 800106a:	e000      	b.n	800106e <NVIC_EncodePriority+0x32>
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	f04f 32ff 	mov.w	r2, #4294967295
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43da      	mvns	r2, r3
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	401a      	ands	r2, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001084:	f04f 31ff 	mov.w	r1, #4294967295
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	fa01 f303 	lsl.w	r3, r1, r3
 800108e:	43d9      	mvns	r1, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	4313      	orrs	r3, r2
         );
}
 8001096:	4618      	mov	r0, r3
 8001098:	3724      	adds	r7, #36	; 0x24
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff ff4c 	bl	8000f48 <__NVIC_SetPriorityGrouping>
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ca:	f7ff ff61 	bl	8000f90 <__NVIC_GetPriorityGrouping>
 80010ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	68b9      	ldr	r1, [r7, #8]
 80010d4:	6978      	ldr	r0, [r7, #20]
 80010d6:	f7ff ffb1 	bl	800103c <NVIC_EncodePriority>
 80010da:	4602      	mov	r2, r0
 80010dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e0:	4611      	mov	r1, r2
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff ff80 	bl	8000fe8 <__NVIC_SetPriority>
}
 80010e8:	bf00      	nop
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff ff54 	bl	8000fac <__NVIC_EnableIRQ>
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800111e:	2300      	movs	r3, #0
 8001120:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
 8001126:	e16b      	b.n	8001400 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001128:	2201      	movs	r2, #1
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	429a      	cmp	r2, r3
 8001142:	f040 815a 	bne.w	80013fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f003 0303 	and.w	r3, r3, #3
 800114e:	2b01      	cmp	r3, #1
 8001150:	d005      	beq.n	800115e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800115a:	2b02      	cmp	r3, #2
 800115c:	d130      	bne.n	80011c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	2203      	movs	r2, #3
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	68da      	ldr	r2, [r3, #12]
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001194:	2201      	movs	r2, #1
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	091b      	lsrs	r3, r3, #4
 80011aa:	f003 0201 	and.w	r2, r3, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	2b03      	cmp	r3, #3
 80011ca:	d017      	beq.n	80011fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	2203      	movs	r2, #3
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 0303 	and.w	r3, r3, #3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d123      	bne.n	8001250 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	08da      	lsrs	r2, r3, #3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3208      	adds	r2, #8
 8001210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001214:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	f003 0307 	and.w	r3, r3, #7
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	220f      	movs	r2, #15
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	691a      	ldr	r2, [r3, #16]
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	08da      	lsrs	r2, r3, #3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	3208      	adds	r2, #8
 800124a:	69b9      	ldr	r1, [r7, #24]
 800124c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	2203      	movs	r2, #3
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0203 	and.w	r2, r3, #3
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800128c:	2b00      	cmp	r3, #0
 800128e:	f000 80b4 	beq.w	80013fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	4b60      	ldr	r3, [pc, #384]	; (8001418 <HAL_GPIO_Init+0x30c>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	4a5f      	ldr	r2, [pc, #380]	; (8001418 <HAL_GPIO_Init+0x30c>)
 800129c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a0:	6453      	str	r3, [r2, #68]	; 0x44
 80012a2:	4b5d      	ldr	r3, [pc, #372]	; (8001418 <HAL_GPIO_Init+0x30c>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ae:	4a5b      	ldr	r2, [pc, #364]	; (800141c <HAL_GPIO_Init+0x310>)
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	089b      	lsrs	r3, r3, #2
 80012b4:	3302      	adds	r3, #2
 80012b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	220f      	movs	r2, #15
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4013      	ands	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a52      	ldr	r2, [pc, #328]	; (8001420 <HAL_GPIO_Init+0x314>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d02b      	beq.n	8001332 <HAL_GPIO_Init+0x226>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a51      	ldr	r2, [pc, #324]	; (8001424 <HAL_GPIO_Init+0x318>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d025      	beq.n	800132e <HAL_GPIO_Init+0x222>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a50      	ldr	r2, [pc, #320]	; (8001428 <HAL_GPIO_Init+0x31c>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d01f      	beq.n	800132a <HAL_GPIO_Init+0x21e>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a4f      	ldr	r2, [pc, #316]	; (800142c <HAL_GPIO_Init+0x320>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d019      	beq.n	8001326 <HAL_GPIO_Init+0x21a>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a4e      	ldr	r2, [pc, #312]	; (8001430 <HAL_GPIO_Init+0x324>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d013      	beq.n	8001322 <HAL_GPIO_Init+0x216>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a4d      	ldr	r2, [pc, #308]	; (8001434 <HAL_GPIO_Init+0x328>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d00d      	beq.n	800131e <HAL_GPIO_Init+0x212>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a4c      	ldr	r2, [pc, #304]	; (8001438 <HAL_GPIO_Init+0x32c>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d007      	beq.n	800131a <HAL_GPIO_Init+0x20e>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a4b      	ldr	r2, [pc, #300]	; (800143c <HAL_GPIO_Init+0x330>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d101      	bne.n	8001316 <HAL_GPIO_Init+0x20a>
 8001312:	2307      	movs	r3, #7
 8001314:	e00e      	b.n	8001334 <HAL_GPIO_Init+0x228>
 8001316:	2308      	movs	r3, #8
 8001318:	e00c      	b.n	8001334 <HAL_GPIO_Init+0x228>
 800131a:	2306      	movs	r3, #6
 800131c:	e00a      	b.n	8001334 <HAL_GPIO_Init+0x228>
 800131e:	2305      	movs	r3, #5
 8001320:	e008      	b.n	8001334 <HAL_GPIO_Init+0x228>
 8001322:	2304      	movs	r3, #4
 8001324:	e006      	b.n	8001334 <HAL_GPIO_Init+0x228>
 8001326:	2303      	movs	r3, #3
 8001328:	e004      	b.n	8001334 <HAL_GPIO_Init+0x228>
 800132a:	2302      	movs	r3, #2
 800132c:	e002      	b.n	8001334 <HAL_GPIO_Init+0x228>
 800132e:	2301      	movs	r3, #1
 8001330:	e000      	b.n	8001334 <HAL_GPIO_Init+0x228>
 8001332:	2300      	movs	r3, #0
 8001334:	69fa      	ldr	r2, [r7, #28]
 8001336:	f002 0203 	and.w	r2, r2, #3
 800133a:	0092      	lsls	r2, r2, #2
 800133c:	4093      	lsls	r3, r2
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001344:	4935      	ldr	r1, [pc, #212]	; (800141c <HAL_GPIO_Init+0x310>)
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	089b      	lsrs	r3, r3, #2
 800134a:	3302      	adds	r3, #2
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001352:	4b3b      	ldr	r3, [pc, #236]	; (8001440 <HAL_GPIO_Init+0x334>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	43db      	mvns	r3, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4013      	ands	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001376:	4a32      	ldr	r2, [pc, #200]	; (8001440 <HAL_GPIO_Init+0x334>)
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800137c:	4b30      	ldr	r3, [pc, #192]	; (8001440 <HAL_GPIO_Init+0x334>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013a0:	4a27      	ldr	r2, [pc, #156]	; (8001440 <HAL_GPIO_Init+0x334>)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013a6:	4b26      	ldr	r3, [pc, #152]	; (8001440 <HAL_GPIO_Init+0x334>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4013      	ands	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ca:	4a1d      	ldr	r2, [pc, #116]	; (8001440 <HAL_GPIO_Init+0x334>)
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013d0:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <HAL_GPIO_Init+0x334>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013f4:	4a12      	ldr	r2, [pc, #72]	; (8001440 <HAL_GPIO_Init+0x334>)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3301      	adds	r3, #1
 80013fe:	61fb      	str	r3, [r7, #28]
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	2b0f      	cmp	r3, #15
 8001404:	f67f ae90 	bls.w	8001128 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	3724      	adds	r7, #36	; 0x24
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800
 800141c:	40013800 	.word	0x40013800
 8001420:	40020000 	.word	0x40020000
 8001424:	40020400 	.word	0x40020400
 8001428:	40020800 	.word	0x40020800
 800142c:	40020c00 	.word	0x40020c00
 8001430:	40021000 	.word	0x40021000
 8001434:	40021400 	.word	0x40021400
 8001438:	40021800 	.word	0x40021800
 800143c:	40021c00 	.word	0x40021c00
 8001440:	40013c00 	.word	0x40013c00

08001444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	807b      	strh	r3, [r7, #2]
 8001450:	4613      	mov	r3, r2
 8001452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001454:	787b      	ldrb	r3, [r7, #1]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800145a:	887a      	ldrh	r2, [r7, #2]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001460:	e003      	b.n	800146a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001462:	887b      	ldrh	r3, [r7, #2]
 8001464:	041a      	lsls	r2, r3, #16
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	619a      	str	r2, [r3, #24]
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e264      	b.n	8001954 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	2b00      	cmp	r3, #0
 8001494:	d075      	beq.n	8001582 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001496:	4ba3      	ldr	r3, [pc, #652]	; (8001724 <HAL_RCC_OscConfig+0x2ac>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 030c 	and.w	r3, r3, #12
 800149e:	2b04      	cmp	r3, #4
 80014a0:	d00c      	beq.n	80014bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014a2:	4ba0      	ldr	r3, [pc, #640]	; (8001724 <HAL_RCC_OscConfig+0x2ac>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014aa:	2b08      	cmp	r3, #8
 80014ac:	d112      	bne.n	80014d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ae:	4b9d      	ldr	r3, [pc, #628]	; (8001724 <HAL_RCC_OscConfig+0x2ac>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014ba:	d10b      	bne.n	80014d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014bc:	4b99      	ldr	r3, [pc, #612]	; (8001724 <HAL_RCC_OscConfig+0x2ac>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d05b      	beq.n	8001580 <HAL_RCC_OscConfig+0x108>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d157      	bne.n	8001580 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e23f      	b.n	8001954 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014dc:	d106      	bne.n	80014ec <HAL_RCC_OscConfig+0x74>
 80014de:	4b91      	ldr	r3, [pc, #580]	; (8001724 <HAL_RCC_OscConfig+0x2ac>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a90      	ldr	r2, [pc, #576]	; (8001724 <HAL_RCC_OscConfig+0x2ac>)
 80014e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	e01d      	b.n	8001528 <HAL_RCC_OscConfig+0xb0>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014f4:	d10c      	bne.n	8001510 <HAL_RCC_OscConfig+0x98>
 80014f6:	4b8b      	ldr	r3, [pc, #556]	; (8001724 <HAL_RCC_OscConfig+0x2ac>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a8a      	ldr	r2, [pc, #552]	; (8001724 <HAL_RCC_OscConfig+0x2ac>)
 80014fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	4b88      	ldr	r3, [pc, #544]	; (8001724 <HAL_RCC_OscConfig+0x2ac>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a87      	ldr	r2, [pc, #540]	; (8001724 <HAL_RCC_OscConfig+0x2ac>)
 8001508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	e00b      	b.n	8001528 <HAL_RCC_OscConfig+0xb0>
 8001510:	4b84      	ldr	r3, [pc, #528]	; (8001724 <HAL_RCC_OscConfig+0x2ac>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a83      	ldr	r2, [pc, #524]	; (8001724 <HAL_RCC_OscConfig+0x2ac>)
 8001516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800151a:	6013      	str	r3, [r2, #0]
 800151c:	4b81      	ldr	r3, [pc, #516]	; (8001724 <HAL_RCC_OscConfig+0x2ac>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a80      	ldr	r2, [pc, #512]	; (8001724 <HAL_RCC_OscConfig+0x2ac>)
 8001522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001526:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d013      	beq.n	8001558 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001530:	f7ff fcfe 	bl	8000f30 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001538:	f7ff fcfa 	bl	8000f30 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b64      	cmp	r3, #100	; 0x64
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e204      	b.n	8001954 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800154a:	4b76      	ldr	r3, [pc, #472]	; (8001724 <HAL_RCC_OscConfig+0x2ac>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0f0      	beq.n	8001538 <HAL_RCC_OscConfig+0xc0>
 8001556:	e014      	b.n	8001582 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001558:	f7ff fcea 	bl	8000f30 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001560:	f7ff fce6 	bl	8000f30 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b64      	cmp	r3, #100	; 0x64
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e1f0      	b.n	8001954 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001572:	4b6c      	ldr	r3, [pc, #432]	; (8001724 <HAL_RCC_OscConfig+0x2ac>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f0      	bne.n	8001560 <HAL_RCC_OscConfig+0xe8>
 800157e:	e000      	b.n	8001582 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d063      	beq.n	8001656 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800158e:	4b65      	ldr	r3, [pc, #404]	; (8001724 <HAL_RCC_OscConfig+0x2ac>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 030c 	and.w	r3, r3, #12
 8001596:	2b00      	cmp	r3, #0
 8001598:	d00b      	beq.n	80015b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800159a:	4b62      	ldr	r3, [pc, #392]	; (8001724 <HAL_RCC_OscConfig+0x2ac>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015a2:	2b08      	cmp	r3, #8
 80015a4:	d11c      	bne.n	80015e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015a6:	4b5f      	ldr	r3, [pc, #380]	; (8001724 <HAL_RCC_OscConfig+0x2ac>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d116      	bne.n	80015e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b2:	4b5c      	ldr	r3, [pc, #368]	; (8001724 <HAL_RCC_OscConfig+0x2ac>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d005      	beq.n	80015ca <HAL_RCC_OscConfig+0x152>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d001      	beq.n	80015ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e1c4      	b.n	8001954 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ca:	4b56      	ldr	r3, [pc, #344]	; (8001724 <HAL_RCC_OscConfig+0x2ac>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	4952      	ldr	r1, [pc, #328]	; (8001724 <HAL_RCC_OscConfig+0x2ac>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015de:	e03a      	b.n	8001656 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d020      	beq.n	800162a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e8:	4b4f      	ldr	r3, [pc, #316]	; (8001728 <HAL_RCC_OscConfig+0x2b0>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ee:	f7ff fc9f 	bl	8000f30 <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015f6:	f7ff fc9b 	bl	8000f30 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e1a5      	b.n	8001954 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001608:	4b46      	ldr	r3, [pc, #280]	; (8001724 <HAL_RCC_OscConfig+0x2ac>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0f0      	beq.n	80015f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001614:	4b43      	ldr	r3, [pc, #268]	; (8001724 <HAL_RCC_OscConfig+0x2ac>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	4940      	ldr	r1, [pc, #256]	; (8001724 <HAL_RCC_OscConfig+0x2ac>)
 8001624:	4313      	orrs	r3, r2
 8001626:	600b      	str	r3, [r1, #0]
 8001628:	e015      	b.n	8001656 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800162a:	4b3f      	ldr	r3, [pc, #252]	; (8001728 <HAL_RCC_OscConfig+0x2b0>)
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001630:	f7ff fc7e 	bl	8000f30 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001638:	f7ff fc7a 	bl	8000f30 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e184      	b.n	8001954 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800164a:	4b36      	ldr	r3, [pc, #216]	; (8001724 <HAL_RCC_OscConfig+0x2ac>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1f0      	bne.n	8001638 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	2b00      	cmp	r3, #0
 8001660:	d030      	beq.n	80016c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d016      	beq.n	8001698 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800166a:	4b30      	ldr	r3, [pc, #192]	; (800172c <HAL_RCC_OscConfig+0x2b4>)
 800166c:	2201      	movs	r2, #1
 800166e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001670:	f7ff fc5e 	bl	8000f30 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001678:	f7ff fc5a 	bl	8000f30 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e164      	b.n	8001954 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800168a:	4b26      	ldr	r3, [pc, #152]	; (8001724 <HAL_RCC_OscConfig+0x2ac>)
 800168c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0f0      	beq.n	8001678 <HAL_RCC_OscConfig+0x200>
 8001696:	e015      	b.n	80016c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001698:	4b24      	ldr	r3, [pc, #144]	; (800172c <HAL_RCC_OscConfig+0x2b4>)
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169e:	f7ff fc47 	bl	8000f30 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016a6:	f7ff fc43 	bl	8000f30 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e14d      	b.n	8001954 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b8:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <HAL_RCC_OscConfig+0x2ac>)
 80016ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1f0      	bne.n	80016a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 80a0 	beq.w	8001812 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016d2:	2300      	movs	r3, #0
 80016d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016d6:	4b13      	ldr	r3, [pc, #76]	; (8001724 <HAL_RCC_OscConfig+0x2ac>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10f      	bne.n	8001702 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <HAL_RCC_OscConfig+0x2ac>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	4a0e      	ldr	r2, [pc, #56]	; (8001724 <HAL_RCC_OscConfig+0x2ac>)
 80016ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f0:	6413      	str	r3, [r2, #64]	; 0x40
 80016f2:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <HAL_RCC_OscConfig+0x2ac>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016fe:	2301      	movs	r3, #1
 8001700:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001702:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <HAL_RCC_OscConfig+0x2b8>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800170a:	2b00      	cmp	r3, #0
 800170c:	d121      	bne.n	8001752 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800170e:	4b08      	ldr	r3, [pc, #32]	; (8001730 <HAL_RCC_OscConfig+0x2b8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a07      	ldr	r2, [pc, #28]	; (8001730 <HAL_RCC_OscConfig+0x2b8>)
 8001714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800171a:	f7ff fc09 	bl	8000f30 <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001720:	e011      	b.n	8001746 <HAL_RCC_OscConfig+0x2ce>
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800
 8001728:	42470000 	.word	0x42470000
 800172c:	42470e80 	.word	0x42470e80
 8001730:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001734:	f7ff fbfc 	bl	8000f30 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e106      	b.n	8001954 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001746:	4b85      	ldr	r3, [pc, #532]	; (800195c <HAL_RCC_OscConfig+0x4e4>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0f0      	beq.n	8001734 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d106      	bne.n	8001768 <HAL_RCC_OscConfig+0x2f0>
 800175a:	4b81      	ldr	r3, [pc, #516]	; (8001960 <HAL_RCC_OscConfig+0x4e8>)
 800175c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175e:	4a80      	ldr	r2, [pc, #512]	; (8001960 <HAL_RCC_OscConfig+0x4e8>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6713      	str	r3, [r2, #112]	; 0x70
 8001766:	e01c      	b.n	80017a2 <HAL_RCC_OscConfig+0x32a>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	2b05      	cmp	r3, #5
 800176e:	d10c      	bne.n	800178a <HAL_RCC_OscConfig+0x312>
 8001770:	4b7b      	ldr	r3, [pc, #492]	; (8001960 <HAL_RCC_OscConfig+0x4e8>)
 8001772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001774:	4a7a      	ldr	r2, [pc, #488]	; (8001960 <HAL_RCC_OscConfig+0x4e8>)
 8001776:	f043 0304 	orr.w	r3, r3, #4
 800177a:	6713      	str	r3, [r2, #112]	; 0x70
 800177c:	4b78      	ldr	r3, [pc, #480]	; (8001960 <HAL_RCC_OscConfig+0x4e8>)
 800177e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001780:	4a77      	ldr	r2, [pc, #476]	; (8001960 <HAL_RCC_OscConfig+0x4e8>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	6713      	str	r3, [r2, #112]	; 0x70
 8001788:	e00b      	b.n	80017a2 <HAL_RCC_OscConfig+0x32a>
 800178a:	4b75      	ldr	r3, [pc, #468]	; (8001960 <HAL_RCC_OscConfig+0x4e8>)
 800178c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178e:	4a74      	ldr	r2, [pc, #464]	; (8001960 <HAL_RCC_OscConfig+0x4e8>)
 8001790:	f023 0301 	bic.w	r3, r3, #1
 8001794:	6713      	str	r3, [r2, #112]	; 0x70
 8001796:	4b72      	ldr	r3, [pc, #456]	; (8001960 <HAL_RCC_OscConfig+0x4e8>)
 8001798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179a:	4a71      	ldr	r2, [pc, #452]	; (8001960 <HAL_RCC_OscConfig+0x4e8>)
 800179c:	f023 0304 	bic.w	r3, r3, #4
 80017a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d015      	beq.n	80017d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017aa:	f7ff fbc1 	bl	8000f30 <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b0:	e00a      	b.n	80017c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017b2:	f7ff fbbd 	bl	8000f30 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e0c5      	b.n	8001954 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c8:	4b65      	ldr	r3, [pc, #404]	; (8001960 <HAL_RCC_OscConfig+0x4e8>)
 80017ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0ee      	beq.n	80017b2 <HAL_RCC_OscConfig+0x33a>
 80017d4:	e014      	b.n	8001800 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d6:	f7ff fbab 	bl	8000f30 <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017dc:	e00a      	b.n	80017f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017de:	f7ff fba7 	bl	8000f30 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e0af      	b.n	8001954 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f4:	4b5a      	ldr	r3, [pc, #360]	; (8001960 <HAL_RCC_OscConfig+0x4e8>)
 80017f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1ee      	bne.n	80017de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001800:	7dfb      	ldrb	r3, [r7, #23]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d105      	bne.n	8001812 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001806:	4b56      	ldr	r3, [pc, #344]	; (8001960 <HAL_RCC_OscConfig+0x4e8>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	4a55      	ldr	r2, [pc, #340]	; (8001960 <HAL_RCC_OscConfig+0x4e8>)
 800180c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001810:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 809b 	beq.w	8001952 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800181c:	4b50      	ldr	r3, [pc, #320]	; (8001960 <HAL_RCC_OscConfig+0x4e8>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f003 030c 	and.w	r3, r3, #12
 8001824:	2b08      	cmp	r3, #8
 8001826:	d05c      	beq.n	80018e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	2b02      	cmp	r3, #2
 800182e:	d141      	bne.n	80018b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001830:	4b4c      	ldr	r3, [pc, #304]	; (8001964 <HAL_RCC_OscConfig+0x4ec>)
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001836:	f7ff fb7b 	bl	8000f30 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800183e:	f7ff fb77 	bl	8000f30 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e081      	b.n	8001954 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001850:	4b43      	ldr	r3, [pc, #268]	; (8001960 <HAL_RCC_OscConfig+0x4e8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1f0      	bne.n	800183e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	69da      	ldr	r2, [r3, #28]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	431a      	orrs	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	019b      	lsls	r3, r3, #6
 800186c:	431a      	orrs	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001872:	085b      	lsrs	r3, r3, #1
 8001874:	3b01      	subs	r3, #1
 8001876:	041b      	lsls	r3, r3, #16
 8001878:	431a      	orrs	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187e:	061b      	lsls	r3, r3, #24
 8001880:	4937      	ldr	r1, [pc, #220]	; (8001960 <HAL_RCC_OscConfig+0x4e8>)
 8001882:	4313      	orrs	r3, r2
 8001884:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001886:	4b37      	ldr	r3, [pc, #220]	; (8001964 <HAL_RCC_OscConfig+0x4ec>)
 8001888:	2201      	movs	r2, #1
 800188a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188c:	f7ff fb50 	bl	8000f30 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001894:	f7ff fb4c 	bl	8000f30 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e056      	b.n	8001954 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a6:	4b2e      	ldr	r3, [pc, #184]	; (8001960 <HAL_RCC_OscConfig+0x4e8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d0f0      	beq.n	8001894 <HAL_RCC_OscConfig+0x41c>
 80018b2:	e04e      	b.n	8001952 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b4:	4b2b      	ldr	r3, [pc, #172]	; (8001964 <HAL_RCC_OscConfig+0x4ec>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ba:	f7ff fb39 	bl	8000f30 <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c2:	f7ff fb35 	bl	8000f30 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e03f      	b.n	8001954 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018d4:	4b22      	ldr	r3, [pc, #136]	; (8001960 <HAL_RCC_OscConfig+0x4e8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1f0      	bne.n	80018c2 <HAL_RCC_OscConfig+0x44a>
 80018e0:	e037      	b.n	8001952 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d101      	bne.n	80018ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e032      	b.n	8001954 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018ee:	4b1c      	ldr	r3, [pc, #112]	; (8001960 <HAL_RCC_OscConfig+0x4e8>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d028      	beq.n	800194e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001906:	429a      	cmp	r2, r3
 8001908:	d121      	bne.n	800194e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001914:	429a      	cmp	r2, r3
 8001916:	d11a      	bne.n	800194e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800191e:	4013      	ands	r3, r2
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001924:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001926:	4293      	cmp	r3, r2
 8001928:	d111      	bne.n	800194e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001934:	085b      	lsrs	r3, r3, #1
 8001936:	3b01      	subs	r3, #1
 8001938:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800193a:	429a      	cmp	r2, r3
 800193c:	d107      	bne.n	800194e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001948:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800194a:	429a      	cmp	r2, r3
 800194c:	d001      	beq.n	8001952 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e000      	b.n	8001954 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40007000 	.word	0x40007000
 8001960:	40023800 	.word	0x40023800
 8001964:	42470060 	.word	0x42470060

08001968 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d101      	bne.n	800197c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e0cc      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800197c:	4b68      	ldr	r3, [pc, #416]	; (8001b20 <HAL_RCC_ClockConfig+0x1b8>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	429a      	cmp	r2, r3
 8001988:	d90c      	bls.n	80019a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198a:	4b65      	ldr	r3, [pc, #404]	; (8001b20 <HAL_RCC_ClockConfig+0x1b8>)
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001992:	4b63      	ldr	r3, [pc, #396]	; (8001b20 <HAL_RCC_ClockConfig+0x1b8>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d001      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e0b8      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d020      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d005      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019bc:	4b59      	ldr	r3, [pc, #356]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	4a58      	ldr	r2, [pc, #352]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 80019c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0308 	and.w	r3, r3, #8
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d005      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019d4:	4b53      	ldr	r3, [pc, #332]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	4a52      	ldr	r2, [pc, #328]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 80019da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019e0:	4b50      	ldr	r3, [pc, #320]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	494d      	ldr	r1, [pc, #308]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d044      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d107      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a06:	4b47      	ldr	r3, [pc, #284]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d119      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e07f      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d003      	beq.n	8001a26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a22:	2b03      	cmp	r3, #3
 8001a24:	d107      	bne.n	8001a36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a26:	4b3f      	ldr	r3, [pc, #252]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d109      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e06f      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a36:	4b3b      	ldr	r3, [pc, #236]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e067      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a46:	4b37      	ldr	r3, [pc, #220]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f023 0203 	bic.w	r2, r3, #3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	4934      	ldr	r1, [pc, #208]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a58:	f7ff fa6a 	bl	8000f30 <HAL_GetTick>
 8001a5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5e:	e00a      	b.n	8001a76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a60:	f7ff fa66 	bl	8000f30 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e04f      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a76:	4b2b      	ldr	r3, [pc, #172]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 020c 	and.w	r2, r3, #12
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d1eb      	bne.n	8001a60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a88:	4b25      	ldr	r3, [pc, #148]	; (8001b20 <HAL_RCC_ClockConfig+0x1b8>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d20c      	bcs.n	8001ab0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a96:	4b22      	ldr	r3, [pc, #136]	; (8001b20 <HAL_RCC_ClockConfig+0x1b8>)
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9e:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d001      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e032      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d008      	beq.n	8001ace <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001abc:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	4916      	ldr	r1, [pc, #88]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d009      	beq.n	8001aee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ada:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	490e      	ldr	r1, [pc, #56]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001aee:	f000 f821 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 8001af2:	4602      	mov	r2, r0
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	091b      	lsrs	r3, r3, #4
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	490a      	ldr	r1, [pc, #40]	; (8001b28 <HAL_RCC_ClockConfig+0x1c0>)
 8001b00:	5ccb      	ldrb	r3, [r1, r3]
 8001b02:	fa22 f303 	lsr.w	r3, r2, r3
 8001b06:	4a09      	ldr	r2, [pc, #36]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001b08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b0a:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <HAL_RCC_ClockConfig+0x1c8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff f8ec 	bl	8000cec <HAL_InitTick>

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40023c00 	.word	0x40023c00
 8001b24:	40023800 	.word	0x40023800
 8001b28:	08006100 	.word	0x08006100
 8001b2c:	20000000 	.word	0x20000000
 8001b30:	20000004 	.word	0x20000004

08001b34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b34:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b38:	b084      	sub	sp, #16
 8001b3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	2300      	movs	r3, #0
 8001b46:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b4c:	4b67      	ldr	r3, [pc, #412]	; (8001cec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 030c 	and.w	r3, r3, #12
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d00d      	beq.n	8001b74 <HAL_RCC_GetSysClockFreq+0x40>
 8001b58:	2b08      	cmp	r3, #8
 8001b5a:	f200 80bd 	bhi.w	8001cd8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d002      	beq.n	8001b68 <HAL_RCC_GetSysClockFreq+0x34>
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	d003      	beq.n	8001b6e <HAL_RCC_GetSysClockFreq+0x3a>
 8001b66:	e0b7      	b.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b68:	4b61      	ldr	r3, [pc, #388]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b6a:	60bb      	str	r3, [r7, #8]
       break;
 8001b6c:	e0b7      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b6e:	4b61      	ldr	r3, [pc, #388]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001b70:	60bb      	str	r3, [r7, #8]
      break;
 8001b72:	e0b4      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b74:	4b5d      	ldr	r3, [pc, #372]	; (8001cec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b7c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b7e:	4b5b      	ldr	r3, [pc, #364]	; (8001cec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d04d      	beq.n	8001c26 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b8a:	4b58      	ldr	r3, [pc, #352]	; (8001cec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	099b      	lsrs	r3, r3, #6
 8001b90:	461a      	mov	r2, r3
 8001b92:	f04f 0300 	mov.w	r3, #0
 8001b96:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b9a:	f04f 0100 	mov.w	r1, #0
 8001b9e:	ea02 0800 	and.w	r8, r2, r0
 8001ba2:	ea03 0901 	and.w	r9, r3, r1
 8001ba6:	4640      	mov	r0, r8
 8001ba8:	4649      	mov	r1, r9
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	f04f 0300 	mov.w	r3, #0
 8001bb2:	014b      	lsls	r3, r1, #5
 8001bb4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001bb8:	0142      	lsls	r2, r0, #5
 8001bba:	4610      	mov	r0, r2
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	ebb0 0008 	subs.w	r0, r0, r8
 8001bc2:	eb61 0109 	sbc.w	r1, r1, r9
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	018b      	lsls	r3, r1, #6
 8001bd0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001bd4:	0182      	lsls	r2, r0, #6
 8001bd6:	1a12      	subs	r2, r2, r0
 8001bd8:	eb63 0301 	sbc.w	r3, r3, r1
 8001bdc:	f04f 0000 	mov.w	r0, #0
 8001be0:	f04f 0100 	mov.w	r1, #0
 8001be4:	00d9      	lsls	r1, r3, #3
 8001be6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001bea:	00d0      	lsls	r0, r2, #3
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	eb12 0208 	adds.w	r2, r2, r8
 8001bf4:	eb43 0309 	adc.w	r3, r3, r9
 8001bf8:	f04f 0000 	mov.w	r0, #0
 8001bfc:	f04f 0100 	mov.w	r1, #0
 8001c00:	0259      	lsls	r1, r3, #9
 8001c02:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001c06:	0250      	lsls	r0, r2, #9
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	461a      	mov	r2, r3
 8001c14:	f04f 0300 	mov.w	r3, #0
 8001c18:	f7fe fb32 	bl	8000280 <__aeabi_uldivmod>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4613      	mov	r3, r2
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	e04a      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c26:	4b31      	ldr	r3, [pc, #196]	; (8001cec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	099b      	lsrs	r3, r3, #6
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	f04f 0300 	mov.w	r3, #0
 8001c32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c36:	f04f 0100 	mov.w	r1, #0
 8001c3a:	ea02 0400 	and.w	r4, r2, r0
 8001c3e:	ea03 0501 	and.w	r5, r3, r1
 8001c42:	4620      	mov	r0, r4
 8001c44:	4629      	mov	r1, r5
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	f04f 0300 	mov.w	r3, #0
 8001c4e:	014b      	lsls	r3, r1, #5
 8001c50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c54:	0142      	lsls	r2, r0, #5
 8001c56:	4610      	mov	r0, r2
 8001c58:	4619      	mov	r1, r3
 8001c5a:	1b00      	subs	r0, r0, r4
 8001c5c:	eb61 0105 	sbc.w	r1, r1, r5
 8001c60:	f04f 0200 	mov.w	r2, #0
 8001c64:	f04f 0300 	mov.w	r3, #0
 8001c68:	018b      	lsls	r3, r1, #6
 8001c6a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c6e:	0182      	lsls	r2, r0, #6
 8001c70:	1a12      	subs	r2, r2, r0
 8001c72:	eb63 0301 	sbc.w	r3, r3, r1
 8001c76:	f04f 0000 	mov.w	r0, #0
 8001c7a:	f04f 0100 	mov.w	r1, #0
 8001c7e:	00d9      	lsls	r1, r3, #3
 8001c80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c84:	00d0      	lsls	r0, r2, #3
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	1912      	adds	r2, r2, r4
 8001c8c:	eb45 0303 	adc.w	r3, r5, r3
 8001c90:	f04f 0000 	mov.w	r0, #0
 8001c94:	f04f 0100 	mov.w	r1, #0
 8001c98:	0299      	lsls	r1, r3, #10
 8001c9a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001c9e:	0290      	lsls	r0, r2, #10
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	461a      	mov	r2, r3
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	f7fe fae6 	bl	8000280 <__aeabi_uldivmod>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4613      	mov	r3, r2
 8001cba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	0c1b      	lsrs	r3, r3, #16
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd4:	60bb      	str	r3, [r7, #8]
      break;
 8001cd6:	e002      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cd8:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001cda:	60bb      	str	r3, [r7, #8]
      break;
 8001cdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cde:	68bb      	ldr	r3, [r7, #8]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	00f42400 	.word	0x00f42400
 8001cf4:	007a1200 	.word	0x007a1200

08001cf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cfc:	4b03      	ldr	r3, [pc, #12]	; (8001d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	20000000 	.word	0x20000000

08001d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d14:	f7ff fff0 	bl	8001cf8 <HAL_RCC_GetHCLKFreq>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	0a9b      	lsrs	r3, r3, #10
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	4903      	ldr	r1, [pc, #12]	; (8001d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d26:	5ccb      	ldrb	r3, [r1, r3]
 8001d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40023800 	.word	0x40023800
 8001d34:	08006110 	.word	0x08006110

08001d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d3c:	f7ff ffdc 	bl	8001cf8 <HAL_RCC_GetHCLKFreq>
 8001d40:	4602      	mov	r2, r0
 8001d42:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	0b5b      	lsrs	r3, r3, #13
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	4903      	ldr	r1, [pc, #12]	; (8001d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d4e:	5ccb      	ldrb	r3, [r1, r3]
 8001d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	08006110 	.word	0x08006110

08001d60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	220f      	movs	r2, #15
 8001d6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d70:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <HAL_RCC_GetClockConfig+0x5c>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 0203 	and.w	r2, r3, #3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <HAL_RCC_GetClockConfig+0x5c>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <HAL_RCC_GetClockConfig+0x5c>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d94:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <HAL_RCC_GetClockConfig+0x5c>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	08db      	lsrs	r3, r3, #3
 8001d9a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001da2:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <HAL_RCC_GetClockConfig+0x60>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0207 	and.w	r2, r3, #7
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	601a      	str	r2, [r3, #0]
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40023c00 	.word	0x40023c00

08001dc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e041      	b.n	8001e5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d106      	bne.n	8001df0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f839 	bl	8001e62 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2202      	movs	r2, #2
 8001df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3304      	adds	r3, #4
 8001e00:	4619      	mov	r1, r3
 8001e02:	4610      	mov	r0, r2
 8001e04:	f000 f9d8 	bl	80021b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d001      	beq.n	8001e90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e04e      	b.n	8001f2e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2202      	movs	r2, #2
 8001e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68da      	ldr	r2, [r3, #12]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0201 	orr.w	r2, r2, #1
 8001ea6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a23      	ldr	r2, [pc, #140]	; (8001f3c <HAL_TIM_Base_Start_IT+0xc4>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d022      	beq.n	8001ef8 <HAL_TIM_Base_Start_IT+0x80>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eba:	d01d      	beq.n	8001ef8 <HAL_TIM_Base_Start_IT+0x80>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a1f      	ldr	r2, [pc, #124]	; (8001f40 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d018      	beq.n	8001ef8 <HAL_TIM_Base_Start_IT+0x80>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a1e      	ldr	r2, [pc, #120]	; (8001f44 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d013      	beq.n	8001ef8 <HAL_TIM_Base_Start_IT+0x80>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a1c      	ldr	r2, [pc, #112]	; (8001f48 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d00e      	beq.n	8001ef8 <HAL_TIM_Base_Start_IT+0x80>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a1b      	ldr	r2, [pc, #108]	; (8001f4c <HAL_TIM_Base_Start_IT+0xd4>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d009      	beq.n	8001ef8 <HAL_TIM_Base_Start_IT+0x80>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a19      	ldr	r2, [pc, #100]	; (8001f50 <HAL_TIM_Base_Start_IT+0xd8>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d004      	beq.n	8001ef8 <HAL_TIM_Base_Start_IT+0x80>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a18      	ldr	r2, [pc, #96]	; (8001f54 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d111      	bne.n	8001f1c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2b06      	cmp	r3, #6
 8001f08:	d010      	beq.n	8001f2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f042 0201 	orr.w	r2, r2, #1
 8001f18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f1a:	e007      	b.n	8001f2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0201 	orr.w	r2, r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	40010000 	.word	0x40010000
 8001f40:	40000400 	.word	0x40000400
 8001f44:	40000800 	.word	0x40000800
 8001f48:	40000c00 	.word	0x40000c00
 8001f4c:	40010400 	.word	0x40010400
 8001f50:	40014000 	.word	0x40014000
 8001f54:	40001800 	.word	0x40001800

08001f58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d122      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d11b      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f06f 0202 	mvn.w	r2, #2
 8001f84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f8ee 	bl	800217c <HAL_TIM_IC_CaptureCallback>
 8001fa0:	e005      	b.n	8001fae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f8e0 	bl	8002168 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f8f1 	bl	8002190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	d122      	bne.n	8002008 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b04      	cmp	r3, #4
 8001fce:	d11b      	bne.n	8002008 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f06f 0204 	mvn.w	r2, #4
 8001fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2202      	movs	r2, #2
 8001fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f8c4 	bl	800217c <HAL_TIM_IC_CaptureCallback>
 8001ff4:	e005      	b.n	8002002 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f8b6 	bl	8002168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f8c7 	bl	8002190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b08      	cmp	r3, #8
 8002014:	d122      	bne.n	800205c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f003 0308 	and.w	r3, r3, #8
 8002020:	2b08      	cmp	r3, #8
 8002022:	d11b      	bne.n	800205c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f06f 0208 	mvn.w	r2, #8
 800202c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2204      	movs	r2, #4
 8002032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	f003 0303 	and.w	r3, r3, #3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f89a 	bl	800217c <HAL_TIM_IC_CaptureCallback>
 8002048:	e005      	b.n	8002056 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f88c 	bl	8002168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 f89d 	bl	8002190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	f003 0310 	and.w	r3, r3, #16
 8002066:	2b10      	cmp	r3, #16
 8002068:	d122      	bne.n	80020b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	f003 0310 	and.w	r3, r3, #16
 8002074:	2b10      	cmp	r3, #16
 8002076:	d11b      	bne.n	80020b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f06f 0210 	mvn.w	r2, #16
 8002080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2208      	movs	r2, #8
 8002086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f870 	bl	800217c <HAL_TIM_IC_CaptureCallback>
 800209c:	e005      	b.n	80020aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f862 	bl	8002168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 f873 	bl	8002190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d10e      	bne.n	80020dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d107      	bne.n	80020dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f06f 0201 	mvn.w	r2, #1
 80020d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7fe fd7e 	bl	8000bd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e6:	2b80      	cmp	r3, #128	; 0x80
 80020e8:	d10e      	bne.n	8002108 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f4:	2b80      	cmp	r3, #128	; 0x80
 80020f6:	d107      	bne.n	8002108 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f902 	bl	800230c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002112:	2b40      	cmp	r3, #64	; 0x40
 8002114:	d10e      	bne.n	8002134 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002120:	2b40      	cmp	r3, #64	; 0x40
 8002122:	d107      	bne.n	8002134 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800212c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f838 	bl	80021a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f003 0320 	and.w	r3, r3, #32
 800213e:	2b20      	cmp	r3, #32
 8002140:	d10e      	bne.n	8002160 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f003 0320 	and.w	r3, r3, #32
 800214c:	2b20      	cmp	r3, #32
 800214e:	d107      	bne.n	8002160 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f06f 0220 	mvn.w	r2, #32
 8002158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f8cc 	bl	80022f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a40      	ldr	r2, [pc, #256]	; (80022cc <TIM_Base_SetConfig+0x114>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d013      	beq.n	80021f8 <TIM_Base_SetConfig+0x40>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021d6:	d00f      	beq.n	80021f8 <TIM_Base_SetConfig+0x40>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a3d      	ldr	r2, [pc, #244]	; (80022d0 <TIM_Base_SetConfig+0x118>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d00b      	beq.n	80021f8 <TIM_Base_SetConfig+0x40>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a3c      	ldr	r2, [pc, #240]	; (80022d4 <TIM_Base_SetConfig+0x11c>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d007      	beq.n	80021f8 <TIM_Base_SetConfig+0x40>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a3b      	ldr	r2, [pc, #236]	; (80022d8 <TIM_Base_SetConfig+0x120>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d003      	beq.n	80021f8 <TIM_Base_SetConfig+0x40>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a3a      	ldr	r2, [pc, #232]	; (80022dc <TIM_Base_SetConfig+0x124>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d108      	bne.n	800220a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	4313      	orrs	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a2f      	ldr	r2, [pc, #188]	; (80022cc <TIM_Base_SetConfig+0x114>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d02b      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002218:	d027      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a2c      	ldr	r2, [pc, #176]	; (80022d0 <TIM_Base_SetConfig+0x118>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d023      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a2b      	ldr	r2, [pc, #172]	; (80022d4 <TIM_Base_SetConfig+0x11c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d01f      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a2a      	ldr	r2, [pc, #168]	; (80022d8 <TIM_Base_SetConfig+0x120>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d01b      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a29      	ldr	r2, [pc, #164]	; (80022dc <TIM_Base_SetConfig+0x124>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d017      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a28      	ldr	r2, [pc, #160]	; (80022e0 <TIM_Base_SetConfig+0x128>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d013      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a27      	ldr	r2, [pc, #156]	; (80022e4 <TIM_Base_SetConfig+0x12c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d00f      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a26      	ldr	r2, [pc, #152]	; (80022e8 <TIM_Base_SetConfig+0x130>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d00b      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a25      	ldr	r2, [pc, #148]	; (80022ec <TIM_Base_SetConfig+0x134>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d007      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a24      	ldr	r2, [pc, #144]	; (80022f0 <TIM_Base_SetConfig+0x138>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d003      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a23      	ldr	r2, [pc, #140]	; (80022f4 <TIM_Base_SetConfig+0x13c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d108      	bne.n	800227c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002270:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	4313      	orrs	r3, r2
 800227a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	4313      	orrs	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a0a      	ldr	r2, [pc, #40]	; (80022cc <TIM_Base_SetConfig+0x114>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d003      	beq.n	80022b0 <TIM_Base_SetConfig+0xf8>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a0c      	ldr	r2, [pc, #48]	; (80022dc <TIM_Base_SetConfig+0x124>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d103      	bne.n	80022b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	691a      	ldr	r2, [r3, #16]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	615a      	str	r2, [r3, #20]
}
 80022be:	bf00      	nop
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	40010000 	.word	0x40010000
 80022d0:	40000400 	.word	0x40000400
 80022d4:	40000800 	.word	0x40000800
 80022d8:	40000c00 	.word	0x40000c00
 80022dc:	40010400 	.word	0x40010400
 80022e0:	40014000 	.word	0x40014000
 80022e4:	40014400 	.word	0x40014400
 80022e8:	40014800 	.word	0x40014800
 80022ec:	40001800 	.word	0x40001800
 80022f0:	40001c00 	.word	0x40001c00
 80022f4:	40002000 	.word	0x40002000

080022f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e03f      	b.n	80023b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d106      	bne.n	800234c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7fe fc86 	bl	8000c58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2224      	movs	r2, #36	; 0x24
 8002350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68da      	ldr	r2, [r3, #12]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002362:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 f929 	bl	80025bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	691a      	ldr	r2, [r3, #16]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002378:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	695a      	ldr	r2, [r3, #20]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002388:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002398:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2220      	movs	r2, #32
 80023a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2220      	movs	r2, #32
 80023ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b08a      	sub	sp, #40	; 0x28
 80023be:	af02      	add	r7, sp, #8
 80023c0:	60f8      	str	r0, [r7, #12]
 80023c2:	60b9      	str	r1, [r7, #8]
 80023c4:	603b      	str	r3, [r7, #0]
 80023c6:	4613      	mov	r3, r2
 80023c8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b20      	cmp	r3, #32
 80023d8:	d17c      	bne.n	80024d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d002      	beq.n	80023e6 <HAL_UART_Transmit+0x2c>
 80023e0:	88fb      	ldrh	r3, [r7, #6]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e075      	b.n	80024d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d101      	bne.n	80023f8 <HAL_UART_Transmit+0x3e>
 80023f4:	2302      	movs	r3, #2
 80023f6:	e06e      	b.n	80024d6 <HAL_UART_Transmit+0x11c>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2221      	movs	r2, #33	; 0x21
 800240a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800240e:	f7fe fd8f 	bl	8000f30 <HAL_GetTick>
 8002412:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	88fa      	ldrh	r2, [r7, #6]
 8002418:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	88fa      	ldrh	r2, [r7, #6]
 800241e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002428:	d108      	bne.n	800243c <HAL_UART_Transmit+0x82>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d104      	bne.n	800243c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	61bb      	str	r3, [r7, #24]
 800243a:	e003      	b.n	8002444 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002440:	2300      	movs	r3, #0
 8002442:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800244c:	e02a      	b.n	80024a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	2200      	movs	r2, #0
 8002456:	2180      	movs	r1, #128	; 0x80
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f000 f840 	bl	80024de <UART_WaitOnFlagUntilTimeout>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e036      	b.n	80024d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10b      	bne.n	8002486 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	461a      	mov	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800247c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	3302      	adds	r3, #2
 8002482:	61bb      	str	r3, [r7, #24]
 8002484:	e007      	b.n	8002496 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	781a      	ldrb	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	3301      	adds	r3, #1
 8002494:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800249a:	b29b      	uxth	r3, r3
 800249c:	3b01      	subs	r3, #1
 800249e:	b29a      	uxth	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1cf      	bne.n	800244e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	2200      	movs	r2, #0
 80024b6:	2140      	movs	r1, #64	; 0x40
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f000 f810 	bl	80024de <UART_WaitOnFlagUntilTimeout>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e006      	b.n	80024d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2220      	movs	r2, #32
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80024d0:	2300      	movs	r3, #0
 80024d2:	e000      	b.n	80024d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80024d4:	2302      	movs	r3, #2
  }
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3720      	adds	r7, #32
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b090      	sub	sp, #64	; 0x40
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	60f8      	str	r0, [r7, #12]
 80024e6:	60b9      	str	r1, [r7, #8]
 80024e8:	603b      	str	r3, [r7, #0]
 80024ea:	4613      	mov	r3, r2
 80024ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024ee:	e050      	b.n	8002592 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f6:	d04c      	beq.n	8002592 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80024f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d007      	beq.n	800250e <UART_WaitOnFlagUntilTimeout+0x30>
 80024fe:	f7fe fd17 	bl	8000f30 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800250a:	429a      	cmp	r2, r3
 800250c:	d241      	bcs.n	8002592 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	330c      	adds	r3, #12
 8002514:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002518:	e853 3f00 	ldrex	r3, [r3]
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002524:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	330c      	adds	r3, #12
 800252c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800252e:	637a      	str	r2, [r7, #52]	; 0x34
 8002530:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002532:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002534:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002536:	e841 2300 	strex	r3, r2, [r1]
 800253a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800253c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1e5      	bne.n	800250e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	3314      	adds	r3, #20
 8002548:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	e853 3f00 	ldrex	r3, [r3]
 8002550:	613b      	str	r3, [r7, #16]
   return(result);
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	f023 0301 	bic.w	r3, r3, #1
 8002558:	63bb      	str	r3, [r7, #56]	; 0x38
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	3314      	adds	r3, #20
 8002560:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002562:	623a      	str	r2, [r7, #32]
 8002564:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002566:	69f9      	ldr	r1, [r7, #28]
 8002568:	6a3a      	ldr	r2, [r7, #32]
 800256a:	e841 2300 	strex	r3, r2, [r1]
 800256e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1e5      	bne.n	8002542 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2220      	movs	r2, #32
 800257a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2220      	movs	r2, #32
 8002582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e00f      	b.n	80025b2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	4013      	ands	r3, r2
 800259c:	68ba      	ldr	r2, [r7, #8]
 800259e:	429a      	cmp	r2, r3
 80025a0:	bf0c      	ite	eq
 80025a2:	2301      	moveq	r3, #1
 80025a4:	2300      	movne	r3, #0
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	461a      	mov	r2, r3
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d09f      	beq.n	80024f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3740      	adds	r7, #64	; 0x40
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
	...

080025bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025c0:	b09f      	sub	sp, #124	; 0x7c
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80025d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025d2:	68d9      	ldr	r1, [r3, #12]
 80025d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	ea40 0301 	orr.w	r3, r0, r1
 80025dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025e0:	689a      	ldr	r2, [r3, #8]
 80025e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	431a      	orrs	r2, r3
 80025e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	431a      	orrs	r2, r3
 80025ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80025f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002600:	f021 010c 	bic.w	r1, r1, #12
 8002604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800260a:	430b      	orrs	r3, r1
 800260c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800260e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800261a:	6999      	ldr	r1, [r3, #24]
 800261c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	ea40 0301 	orr.w	r3, r0, r1
 8002624:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	4bc5      	ldr	r3, [pc, #788]	; (8002940 <UART_SetConfig+0x384>)
 800262c:	429a      	cmp	r2, r3
 800262e:	d004      	beq.n	800263a <UART_SetConfig+0x7e>
 8002630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	4bc3      	ldr	r3, [pc, #780]	; (8002944 <UART_SetConfig+0x388>)
 8002636:	429a      	cmp	r2, r3
 8002638:	d103      	bne.n	8002642 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800263a:	f7ff fb7d 	bl	8001d38 <HAL_RCC_GetPCLK2Freq>
 800263e:	6778      	str	r0, [r7, #116]	; 0x74
 8002640:	e002      	b.n	8002648 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002642:	f7ff fb65 	bl	8001d10 <HAL_RCC_GetPCLK1Freq>
 8002646:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800264a:	69db      	ldr	r3, [r3, #28]
 800264c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002650:	f040 80b6 	bne.w	80027c0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002654:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002656:	461c      	mov	r4, r3
 8002658:	f04f 0500 	mov.w	r5, #0
 800265c:	4622      	mov	r2, r4
 800265e:	462b      	mov	r3, r5
 8002660:	1891      	adds	r1, r2, r2
 8002662:	6439      	str	r1, [r7, #64]	; 0x40
 8002664:	415b      	adcs	r3, r3
 8002666:	647b      	str	r3, [r7, #68]	; 0x44
 8002668:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800266c:	1912      	adds	r2, r2, r4
 800266e:	eb45 0303 	adc.w	r3, r5, r3
 8002672:	f04f 0000 	mov.w	r0, #0
 8002676:	f04f 0100 	mov.w	r1, #0
 800267a:	00d9      	lsls	r1, r3, #3
 800267c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002680:	00d0      	lsls	r0, r2, #3
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	1911      	adds	r1, r2, r4
 8002688:	6639      	str	r1, [r7, #96]	; 0x60
 800268a:	416b      	adcs	r3, r5
 800268c:	667b      	str	r3, [r7, #100]	; 0x64
 800268e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	461a      	mov	r2, r3
 8002694:	f04f 0300 	mov.w	r3, #0
 8002698:	1891      	adds	r1, r2, r2
 800269a:	63b9      	str	r1, [r7, #56]	; 0x38
 800269c:	415b      	adcs	r3, r3
 800269e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80026a4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80026a8:	f7fd fdea 	bl	8000280 <__aeabi_uldivmod>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	4ba5      	ldr	r3, [pc, #660]	; (8002948 <UART_SetConfig+0x38c>)
 80026b2:	fba3 2302 	umull	r2, r3, r3, r2
 80026b6:	095b      	lsrs	r3, r3, #5
 80026b8:	011e      	lsls	r6, r3, #4
 80026ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026bc:	461c      	mov	r4, r3
 80026be:	f04f 0500 	mov.w	r5, #0
 80026c2:	4622      	mov	r2, r4
 80026c4:	462b      	mov	r3, r5
 80026c6:	1891      	adds	r1, r2, r2
 80026c8:	6339      	str	r1, [r7, #48]	; 0x30
 80026ca:	415b      	adcs	r3, r3
 80026cc:	637b      	str	r3, [r7, #52]	; 0x34
 80026ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80026d2:	1912      	adds	r2, r2, r4
 80026d4:	eb45 0303 	adc.w	r3, r5, r3
 80026d8:	f04f 0000 	mov.w	r0, #0
 80026dc:	f04f 0100 	mov.w	r1, #0
 80026e0:	00d9      	lsls	r1, r3, #3
 80026e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026e6:	00d0      	lsls	r0, r2, #3
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	1911      	adds	r1, r2, r4
 80026ee:	65b9      	str	r1, [r7, #88]	; 0x58
 80026f0:	416b      	adcs	r3, r5
 80026f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	461a      	mov	r2, r3
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	1891      	adds	r1, r2, r2
 8002700:	62b9      	str	r1, [r7, #40]	; 0x28
 8002702:	415b      	adcs	r3, r3
 8002704:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002706:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800270a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800270e:	f7fd fdb7 	bl	8000280 <__aeabi_uldivmod>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	4b8c      	ldr	r3, [pc, #560]	; (8002948 <UART_SetConfig+0x38c>)
 8002718:	fba3 1302 	umull	r1, r3, r3, r2
 800271c:	095b      	lsrs	r3, r3, #5
 800271e:	2164      	movs	r1, #100	; 0x64
 8002720:	fb01 f303 	mul.w	r3, r1, r3
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	3332      	adds	r3, #50	; 0x32
 800272a:	4a87      	ldr	r2, [pc, #540]	; (8002948 <UART_SetConfig+0x38c>)
 800272c:	fba2 2303 	umull	r2, r3, r2, r3
 8002730:	095b      	lsrs	r3, r3, #5
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002738:	441e      	add	r6, r3
 800273a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800273c:	4618      	mov	r0, r3
 800273e:	f04f 0100 	mov.w	r1, #0
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	1894      	adds	r4, r2, r2
 8002748:	623c      	str	r4, [r7, #32]
 800274a:	415b      	adcs	r3, r3
 800274c:	627b      	str	r3, [r7, #36]	; 0x24
 800274e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002752:	1812      	adds	r2, r2, r0
 8002754:	eb41 0303 	adc.w	r3, r1, r3
 8002758:	f04f 0400 	mov.w	r4, #0
 800275c:	f04f 0500 	mov.w	r5, #0
 8002760:	00dd      	lsls	r5, r3, #3
 8002762:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002766:	00d4      	lsls	r4, r2, #3
 8002768:	4622      	mov	r2, r4
 800276a:	462b      	mov	r3, r5
 800276c:	1814      	adds	r4, r2, r0
 800276e:	653c      	str	r4, [r7, #80]	; 0x50
 8002770:	414b      	adcs	r3, r1
 8002772:	657b      	str	r3, [r7, #84]	; 0x54
 8002774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	461a      	mov	r2, r3
 800277a:	f04f 0300 	mov.w	r3, #0
 800277e:	1891      	adds	r1, r2, r2
 8002780:	61b9      	str	r1, [r7, #24]
 8002782:	415b      	adcs	r3, r3
 8002784:	61fb      	str	r3, [r7, #28]
 8002786:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800278a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800278e:	f7fd fd77 	bl	8000280 <__aeabi_uldivmod>
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	4b6c      	ldr	r3, [pc, #432]	; (8002948 <UART_SetConfig+0x38c>)
 8002798:	fba3 1302 	umull	r1, r3, r3, r2
 800279c:	095b      	lsrs	r3, r3, #5
 800279e:	2164      	movs	r1, #100	; 0x64
 80027a0:	fb01 f303 	mul.w	r3, r1, r3
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	3332      	adds	r3, #50	; 0x32
 80027aa:	4a67      	ldr	r2, [pc, #412]	; (8002948 <UART_SetConfig+0x38c>)
 80027ac:	fba2 2303 	umull	r2, r3, r2, r3
 80027b0:	095b      	lsrs	r3, r3, #5
 80027b2:	f003 0207 	and.w	r2, r3, #7
 80027b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4432      	add	r2, r6
 80027bc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80027be:	e0b9      	b.n	8002934 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027c2:	461c      	mov	r4, r3
 80027c4:	f04f 0500 	mov.w	r5, #0
 80027c8:	4622      	mov	r2, r4
 80027ca:	462b      	mov	r3, r5
 80027cc:	1891      	adds	r1, r2, r2
 80027ce:	6139      	str	r1, [r7, #16]
 80027d0:	415b      	adcs	r3, r3
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80027d8:	1912      	adds	r2, r2, r4
 80027da:	eb45 0303 	adc.w	r3, r5, r3
 80027de:	f04f 0000 	mov.w	r0, #0
 80027e2:	f04f 0100 	mov.w	r1, #0
 80027e6:	00d9      	lsls	r1, r3, #3
 80027e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027ec:	00d0      	lsls	r0, r2, #3
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	eb12 0804 	adds.w	r8, r2, r4
 80027f6:	eb43 0905 	adc.w	r9, r3, r5
 80027fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	4618      	mov	r0, r3
 8002800:	f04f 0100 	mov.w	r1, #0
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	f04f 0300 	mov.w	r3, #0
 800280c:	008b      	lsls	r3, r1, #2
 800280e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002812:	0082      	lsls	r2, r0, #2
 8002814:	4640      	mov	r0, r8
 8002816:	4649      	mov	r1, r9
 8002818:	f7fd fd32 	bl	8000280 <__aeabi_uldivmod>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	4b49      	ldr	r3, [pc, #292]	; (8002948 <UART_SetConfig+0x38c>)
 8002822:	fba3 2302 	umull	r2, r3, r3, r2
 8002826:	095b      	lsrs	r3, r3, #5
 8002828:	011e      	lsls	r6, r3, #4
 800282a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800282c:	4618      	mov	r0, r3
 800282e:	f04f 0100 	mov.w	r1, #0
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	1894      	adds	r4, r2, r2
 8002838:	60bc      	str	r4, [r7, #8]
 800283a:	415b      	adcs	r3, r3
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002842:	1812      	adds	r2, r2, r0
 8002844:	eb41 0303 	adc.w	r3, r1, r3
 8002848:	f04f 0400 	mov.w	r4, #0
 800284c:	f04f 0500 	mov.w	r5, #0
 8002850:	00dd      	lsls	r5, r3, #3
 8002852:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002856:	00d4      	lsls	r4, r2, #3
 8002858:	4622      	mov	r2, r4
 800285a:	462b      	mov	r3, r5
 800285c:	1814      	adds	r4, r2, r0
 800285e:	64bc      	str	r4, [r7, #72]	; 0x48
 8002860:	414b      	adcs	r3, r1
 8002862:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	4618      	mov	r0, r3
 800286a:	f04f 0100 	mov.w	r1, #0
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	f04f 0300 	mov.w	r3, #0
 8002876:	008b      	lsls	r3, r1, #2
 8002878:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800287c:	0082      	lsls	r2, r0, #2
 800287e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002882:	f7fd fcfd 	bl	8000280 <__aeabi_uldivmod>
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	4b2f      	ldr	r3, [pc, #188]	; (8002948 <UART_SetConfig+0x38c>)
 800288c:	fba3 1302 	umull	r1, r3, r3, r2
 8002890:	095b      	lsrs	r3, r3, #5
 8002892:	2164      	movs	r1, #100	; 0x64
 8002894:	fb01 f303 	mul.w	r3, r1, r3
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	011b      	lsls	r3, r3, #4
 800289c:	3332      	adds	r3, #50	; 0x32
 800289e:	4a2a      	ldr	r2, [pc, #168]	; (8002948 <UART_SetConfig+0x38c>)
 80028a0:	fba2 2303 	umull	r2, r3, r2, r3
 80028a4:	095b      	lsrs	r3, r3, #5
 80028a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028aa:	441e      	add	r6, r3
 80028ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028ae:	4618      	mov	r0, r3
 80028b0:	f04f 0100 	mov.w	r1, #0
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	1894      	adds	r4, r2, r2
 80028ba:	603c      	str	r4, [r7, #0]
 80028bc:	415b      	adcs	r3, r3
 80028be:	607b      	str	r3, [r7, #4]
 80028c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028c4:	1812      	adds	r2, r2, r0
 80028c6:	eb41 0303 	adc.w	r3, r1, r3
 80028ca:	f04f 0400 	mov.w	r4, #0
 80028ce:	f04f 0500 	mov.w	r5, #0
 80028d2:	00dd      	lsls	r5, r3, #3
 80028d4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80028d8:	00d4      	lsls	r4, r2, #3
 80028da:	4622      	mov	r2, r4
 80028dc:	462b      	mov	r3, r5
 80028de:	eb12 0a00 	adds.w	sl, r2, r0
 80028e2:	eb43 0b01 	adc.w	fp, r3, r1
 80028e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f04f 0100 	mov.w	r1, #0
 80028f0:	f04f 0200 	mov.w	r2, #0
 80028f4:	f04f 0300 	mov.w	r3, #0
 80028f8:	008b      	lsls	r3, r1, #2
 80028fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80028fe:	0082      	lsls	r2, r0, #2
 8002900:	4650      	mov	r0, sl
 8002902:	4659      	mov	r1, fp
 8002904:	f7fd fcbc 	bl	8000280 <__aeabi_uldivmod>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4b0e      	ldr	r3, [pc, #56]	; (8002948 <UART_SetConfig+0x38c>)
 800290e:	fba3 1302 	umull	r1, r3, r3, r2
 8002912:	095b      	lsrs	r3, r3, #5
 8002914:	2164      	movs	r1, #100	; 0x64
 8002916:	fb01 f303 	mul.w	r3, r1, r3
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	3332      	adds	r3, #50	; 0x32
 8002920:	4a09      	ldr	r2, [pc, #36]	; (8002948 <UART_SetConfig+0x38c>)
 8002922:	fba2 2303 	umull	r2, r3, r2, r3
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	f003 020f 	and.w	r2, r3, #15
 800292c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4432      	add	r2, r6
 8002932:	609a      	str	r2, [r3, #8]
}
 8002934:	bf00      	nop
 8002936:	377c      	adds	r7, #124	; 0x7c
 8002938:	46bd      	mov	sp, r7
 800293a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800293e:	bf00      	nop
 8002940:	40011000 	.word	0x40011000
 8002944:	40011400 	.word	0x40011400
 8002948:	51eb851f 	.word	0x51eb851f

0800294c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f103 0208 	add.w	r2, r3, #8
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f04f 32ff 	mov.w	r2, #4294967295
 8002964:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f103 0208 	add.w	r2, r3, #8
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f103 0208 	add.w	r2, r3, #8
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80029a6:	b480      	push	{r7}
 80029a8:	b085      	sub	sp, #20
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
 80029ae:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	601a      	str	r2, [r3, #0]
}
 80029e2:	bf00      	nop
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80029ee:	b480      	push	{r7}
 80029f0:	b085      	sub	sp, #20
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
 80029f6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a04:	d103      	bne.n	8002a0e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	e00c      	b.n	8002a28 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	3308      	adds	r3, #8
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	e002      	b.n	8002a1c <vListInsert+0x2e>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d2f6      	bcs.n	8002a16 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	601a      	str	r2, [r3, #0]
}
 8002a54:	bf00      	nop
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6892      	ldr	r2, [r2, #8]
 8002a76:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6852      	ldr	r2, [r2, #4]
 8002a80:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d103      	bne.n	8002a94 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	1e5a      	subs	r2, r3, #1
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10a      	bne.n	8002ade <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002acc:	f383 8811 	msr	BASEPRI, r3
 8002ad0:	f3bf 8f6f 	isb	sy
 8002ad4:	f3bf 8f4f 	dsb	sy
 8002ad8:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002ada:	bf00      	nop
 8002adc:	e7fe      	b.n	8002adc <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002ade:	f002 fb19 	bl	8005114 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aea:	68f9      	ldr	r1, [r7, #12]
 8002aec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002aee:	fb01 f303 	mul.w	r3, r1, r3
 8002af2:	441a      	add	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	68f9      	ldr	r1, [r7, #12]
 8002b12:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b14:	fb01 f303 	mul.w	r3, r1, r3
 8002b18:	441a      	add	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	22ff      	movs	r2, #255	; 0xff
 8002b22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	22ff      	movs	r2, #255	; 0xff
 8002b2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d114      	bne.n	8002b5e <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d01a      	beq.n	8002b72 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	3310      	adds	r3, #16
 8002b40:	4618      	mov	r0, r3
 8002b42:	f001 fa75 	bl	8004030 <xTaskRemoveFromEventList>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d012      	beq.n	8002b72 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <xQueueGenericReset+0xcc>)
 8002b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	f3bf 8f4f 	dsb	sy
 8002b58:	f3bf 8f6f 	isb	sy
 8002b5c:	e009      	b.n	8002b72 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	3310      	adds	r3, #16
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff fef2 	bl	800294c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	3324      	adds	r3, #36	; 0x24
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff feed 	bl	800294c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002b72:	f002 faff 	bl	8005174 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002b76:	2301      	movs	r3, #1
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	e000ed04 	.word	0xe000ed04

08002b84 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08c      	sub	sp, #48	; 0x30
 8002b88:	af02      	add	r7, sp, #8
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10a      	bne.n	8002bae <xQueueGenericCreate+0x2a>
        __asm volatile
 8002b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9c:	f383 8811 	msr	BASEPRI, r3
 8002ba0:	f3bf 8f6f 	isb	sy
 8002ba4:	f3bf 8f4f 	dsb	sy
 8002ba8:	61bb      	str	r3, [r7, #24]
    }
 8002baa:	bf00      	nop
 8002bac:	e7fe      	b.n	8002bac <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	fb02 f303 	mul.w	r3, r2, r3
 8002bb6:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d006      	beq.n	8002bcc <xQueueGenericCreate+0x48>
 8002bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d101      	bne.n	8002bd0 <xQueueGenericCreate+0x4c>
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e000      	b.n	8002bd2 <xQueueGenericCreate+0x4e>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10a      	bne.n	8002bec <xQueueGenericCreate+0x68>
        __asm volatile
 8002bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bda:	f383 8811 	msr	BASEPRI, r3
 8002bde:	f3bf 8f6f 	isb	sy
 8002be2:	f3bf 8f4f 	dsb	sy
 8002be6:	617b      	str	r3, [r7, #20]
    }
 8002be8:	bf00      	nop
 8002bea:	e7fe      	b.n	8002bea <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bee:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002bf2:	d90a      	bls.n	8002c0a <xQueueGenericCreate+0x86>
        __asm volatile
 8002bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf8:	f383 8811 	msr	BASEPRI, r3
 8002bfc:	f3bf 8f6f 	isb	sy
 8002c00:	f3bf 8f4f 	dsb	sy
 8002c04:	613b      	str	r3, [r7, #16]
    }
 8002c06:	bf00      	nop
 8002c08:	e7fe      	b.n	8002c08 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	3350      	adds	r3, #80	; 0x50
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f002 fba4 	bl	800535c <pvPortMalloc>
 8002c14:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00d      	beq.n	8002c38 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	3350      	adds	r3, #80	; 0x50
 8002c24:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c26:	79fa      	ldrb	r2, [r7, #7]
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	69fa      	ldr	r2, [r7, #28]
 8002c30:	68b9      	ldr	r1, [r7, #8]
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 f805 	bl	8002c42 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002c38:	6a3b      	ldr	r3, [r7, #32]
    }
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3728      	adds	r7, #40	; 0x28
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b084      	sub	sp, #16
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	60f8      	str	r0, [r7, #12]
 8002c4a:	60b9      	str	r1, [r7, #8]
 8002c4c:	607a      	str	r2, [r7, #4]
 8002c4e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d103      	bne.n	8002c5e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	e002      	b.n	8002c64 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c70:	2101      	movs	r1, #1
 8002c72:	69b8      	ldr	r0, [r7, #24]
 8002c74:	f7ff ff1e 	bl	8002ab4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	78fa      	ldrb	r2, [r7, #3]
 8002c7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002c80:	bf00      	nop
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle;

        configASSERT( uxMaxCount != 0 );
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10a      	bne.n	8002cae <xQueueCreateCountingSemaphore+0x26>
        __asm volatile
 8002c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9c:	f383 8811 	msr	BASEPRI, r3
 8002ca0:	f3bf 8f6f 	isb	sy
 8002ca4:	f3bf 8f4f 	dsb	sy
 8002ca8:	613b      	str	r3, [r7, #16]
    }
 8002caa:	bf00      	nop
 8002cac:	e7fe      	b.n	8002cac <xQueueCreateCountingSemaphore+0x24>
        configASSERT( uxInitialCount <= uxMaxCount );
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d90a      	bls.n	8002ccc <xQueueCreateCountingSemaphore+0x44>
        __asm volatile
 8002cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cba:	f383 8811 	msr	BASEPRI, r3
 8002cbe:	f3bf 8f6f 	isb	sy
 8002cc2:	f3bf 8f4f 	dsb	sy
 8002cc6:	60fb      	str	r3, [r7, #12]
    }
 8002cc8:	bf00      	nop
 8002cca:	e7fe      	b.n	8002cca <xQueueCreateCountingSemaphore+0x42>

        xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002ccc:	2202      	movs	r2, #2
 8002cce:	2100      	movs	r1, #0
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7ff ff57 	bl	8002b84 <xQueueGenericCreate>
 8002cd6:	6178      	str	r0, [r7, #20]

        if( xHandle != NULL )
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d002      	beq.n	8002ce4 <xQueueCreateCountingSemaphore+0x5c>
        {
            ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	639a      	str	r2, [r3, #56]	; 0x38
        else
        {
            traceCREATE_COUNTING_SEMAPHORE_FAILED();
        }

        return xHandle;
 8002ce4:	697b      	ldr	r3, [r7, #20]
    }
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
	...

08002cf0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08e      	sub	sp, #56	; 0x38
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
 8002cfc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10a      	bne.n	8002d22 <xQueueGenericSend+0x32>
        __asm volatile
 8002d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d10:	f383 8811 	msr	BASEPRI, r3
 8002d14:	f3bf 8f6f 	isb	sy
 8002d18:	f3bf 8f4f 	dsb	sy
 8002d1c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002d1e:	bf00      	nop
 8002d20:	e7fe      	b.n	8002d20 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d103      	bne.n	8002d30 <xQueueGenericSend+0x40>
 8002d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <xQueueGenericSend+0x44>
 8002d30:	2301      	movs	r3, #1
 8002d32:	e000      	b.n	8002d36 <xQueueGenericSend+0x46>
 8002d34:	2300      	movs	r3, #0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10a      	bne.n	8002d50 <xQueueGenericSend+0x60>
        __asm volatile
 8002d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3e:	f383 8811 	msr	BASEPRI, r3
 8002d42:	f3bf 8f6f 	isb	sy
 8002d46:	f3bf 8f4f 	dsb	sy
 8002d4a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002d4c:	bf00      	nop
 8002d4e:	e7fe      	b.n	8002d4e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d103      	bne.n	8002d5e <xQueueGenericSend+0x6e>
 8002d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <xQueueGenericSend+0x72>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <xQueueGenericSend+0x74>
 8002d62:	2300      	movs	r3, #0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10a      	bne.n	8002d7e <xQueueGenericSend+0x8e>
        __asm volatile
 8002d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6c:	f383 8811 	msr	BASEPRI, r3
 8002d70:	f3bf 8f6f 	isb	sy
 8002d74:	f3bf 8f4f 	dsb	sy
 8002d78:	623b      	str	r3, [r7, #32]
    }
 8002d7a:	bf00      	nop
 8002d7c:	e7fe      	b.n	8002d7c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d7e:	f001 faf3 	bl	8004368 <xTaskGetSchedulerState>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d102      	bne.n	8002d8e <xQueueGenericSend+0x9e>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <xQueueGenericSend+0xa2>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <xQueueGenericSend+0xa4>
 8002d92:	2300      	movs	r3, #0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10a      	bne.n	8002dae <xQueueGenericSend+0xbe>
        __asm volatile
 8002d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9c:	f383 8811 	msr	BASEPRI, r3
 8002da0:	f3bf 8f6f 	isb	sy
 8002da4:	f3bf 8f4f 	dsb	sy
 8002da8:	61fb      	str	r3, [r7, #28]
    }
 8002daa:	bf00      	nop
 8002dac:	e7fe      	b.n	8002dac <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002dae:	f002 f9b1 	bl	8005114 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d302      	bcc.n	8002dc4 <xQueueGenericSend+0xd4>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d129      	bne.n	8002e18 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	68b9      	ldr	r1, [r7, #8]
 8002dc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dca:	f000 fbd9 	bl	8003580 <prvCopyDataToQueue>
 8002dce:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d010      	beq.n	8002dfa <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dda:	3324      	adds	r3, #36	; 0x24
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f001 f927 	bl	8004030 <xTaskRemoveFromEventList>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d013      	beq.n	8002e10 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002de8:	4b3f      	ldr	r3, [pc, #252]	; (8002ee8 <xQueueGenericSend+0x1f8>)
 8002dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	f3bf 8f4f 	dsb	sy
 8002df4:	f3bf 8f6f 	isb	sy
 8002df8:	e00a      	b.n	8002e10 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d007      	beq.n	8002e10 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002e00:	4b39      	ldr	r3, [pc, #228]	; (8002ee8 <xQueueGenericSend+0x1f8>)
 8002e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	f3bf 8f4f 	dsb	sy
 8002e0c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002e10:	f002 f9b0 	bl	8005174 <vPortExitCritical>
                return pdPASS;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e063      	b.n	8002ee0 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d103      	bne.n	8002e26 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002e1e:	f002 f9a9 	bl	8005174 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8002e22:	2300      	movs	r3, #0
 8002e24:	e05c      	b.n	8002ee0 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d106      	bne.n	8002e3a <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002e2c:	f107 0314 	add.w	r3, r7, #20
 8002e30:	4618      	mov	r0, r3
 8002e32:	f001 f95f 	bl	80040f4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002e36:	2301      	movs	r3, #1
 8002e38:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002e3a:	f002 f99b 	bl	8005174 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002e3e:	f000 fed9 	bl	8003bf4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002e42:	f002 f967 	bl	8005114 <vPortEnterCritical>
 8002e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e4c:	b25b      	sxtb	r3, r3
 8002e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e52:	d103      	bne.n	8002e5c <xQueueGenericSend+0x16c>
 8002e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e62:	b25b      	sxtb	r3, r3
 8002e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e68:	d103      	bne.n	8002e72 <xQueueGenericSend+0x182>
 8002e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e72:	f002 f97f 	bl	8005174 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e76:	1d3a      	adds	r2, r7, #4
 8002e78:	f107 0314 	add.w	r3, r7, #20
 8002e7c:	4611      	mov	r1, r2
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f001 f94e 	bl	8004120 <xTaskCheckForTimeOut>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d124      	bne.n	8002ed4 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002e8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e8c:	f000 fc70 	bl	8003770 <prvIsQueueFull>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d018      	beq.n	8002ec8 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e98:	3310      	adds	r3, #16
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	4611      	mov	r1, r2
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f001 f876 	bl	8003f90 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002ea4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ea6:	f000 fbfb 	bl	80036a0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002eaa:	f000 feb1 	bl	8003c10 <xTaskResumeAll>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f47f af7c 	bne.w	8002dae <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002eb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <xQueueGenericSend+0x1f8>)
 8002eb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	f3bf 8f4f 	dsb	sy
 8002ec2:	f3bf 8f6f 	isb	sy
 8002ec6:	e772      	b.n	8002dae <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002ec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eca:	f000 fbe9 	bl	80036a0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002ece:	f000 fe9f 	bl	8003c10 <xTaskResumeAll>
 8002ed2:	e76c      	b.n	8002dae <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002ed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ed6:	f000 fbe3 	bl	80036a0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002eda:	f000 fe99 	bl	8003c10 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8002ede:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3738      	adds	r7, #56	; 0x38
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	e000ed04 	.word	0xe000ed04

08002eec <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b090      	sub	sp, #64	; 0x40
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
 8002ef8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10a      	bne.n	8002f1a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f08:	f383 8811 	msr	BASEPRI, r3
 8002f0c:	f3bf 8f6f 	isb	sy
 8002f10:	f3bf 8f4f 	dsb	sy
 8002f14:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002f16:	bf00      	nop
 8002f18:	e7fe      	b.n	8002f18 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d103      	bne.n	8002f28 <xQueueGenericSendFromISR+0x3c>
 8002f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <xQueueGenericSendFromISR+0x40>
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e000      	b.n	8002f2e <xQueueGenericSendFromISR+0x42>
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10a      	bne.n	8002f48 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f36:	f383 8811 	msr	BASEPRI, r3
 8002f3a:	f3bf 8f6f 	isb	sy
 8002f3e:	f3bf 8f4f 	dsb	sy
 8002f42:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002f44:	bf00      	nop
 8002f46:	e7fe      	b.n	8002f46 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d103      	bne.n	8002f56 <xQueueGenericSendFromISR+0x6a>
 8002f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d101      	bne.n	8002f5a <xQueueGenericSendFromISR+0x6e>
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <xQueueGenericSendFromISR+0x70>
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10a      	bne.n	8002f76 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f64:	f383 8811 	msr	BASEPRI, r3
 8002f68:	f3bf 8f6f 	isb	sy
 8002f6c:	f3bf 8f4f 	dsb	sy
 8002f70:	623b      	str	r3, [r7, #32]
    }
 8002f72:	bf00      	nop
 8002f74:	e7fe      	b.n	8002f74 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f76:	f002 f9b1 	bl	80052dc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002f7a:	f3ef 8211 	mrs	r2, BASEPRI
 8002f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f82:	f383 8811 	msr	BASEPRI, r3
 8002f86:	f3bf 8f6f 	isb	sy
 8002f8a:	f3bf 8f4f 	dsb	sy
 8002f8e:	61fa      	str	r2, [r7, #28]
 8002f90:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002f92:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f94:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d302      	bcc.n	8002fa8 <xQueueGenericSendFromISR+0xbc>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d13e      	bne.n	8003026 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002faa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	68b9      	ldr	r1, [r7, #8]
 8002fbc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002fbe:	f000 fadf 	bl	8003580 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002fc2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fca:	d112      	bne.n	8002ff2 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d025      	beq.n	8003020 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd6:	3324      	adds	r3, #36	; 0x24
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f001 f829 	bl	8004030 <xTaskRemoveFromEventList>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d01d      	beq.n	8003020 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d01a      	beq.n	8003020 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	e016      	b.n	8003020 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002ff2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002ff6:	2b7f      	cmp	r3, #127	; 0x7f
 8002ff8:	d10a      	bne.n	8003010 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8002ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffe:	f383 8811 	msr	BASEPRI, r3
 8003002:	f3bf 8f6f 	isb	sy
 8003006:	f3bf 8f4f 	dsb	sy
 800300a:	617b      	str	r3, [r7, #20]
    }
 800300c:	bf00      	nop
 800300e:	e7fe      	b.n	800300e <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003010:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003014:	3301      	adds	r3, #1
 8003016:	b2db      	uxtb	r3, r3
 8003018:	b25a      	sxtb	r2, r3
 800301a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003020:	2301      	movs	r3, #1
 8003022:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8003024:	e001      	b.n	800302a <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8003026:	2300      	movs	r3, #0
 8003028:	63fb      	str	r3, [r7, #60]	; 0x3c
 800302a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800302c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003034:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003038:	4618      	mov	r0, r3
 800303a:	3740      	adds	r7, #64	; 0x40
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b08e      	sub	sp, #56	; 0x38
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	633b      	str	r3, [r7, #48]	; 0x30
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 800304e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10a      	bne.n	800306a <xQueueGiveFromISR+0x2a>
        __asm volatile
 8003054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003058:	f383 8811 	msr	BASEPRI, r3
 800305c:	f3bf 8f6f 	isb	sy
 8003060:	f3bf 8f4f 	dsb	sy
 8003064:	623b      	str	r3, [r7, #32]
    }
 8003066:	bf00      	nop
 8003068:	e7fe      	b.n	8003068 <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800306a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00a      	beq.n	8003088 <xQueueGiveFromISR+0x48>
        __asm volatile
 8003072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003076:	f383 8811 	msr	BASEPRI, r3
 800307a:	f3bf 8f6f 	isb	sy
 800307e:	f3bf 8f4f 	dsb	sy
 8003082:	61fb      	str	r3, [r7, #28]
    }
 8003084:	bf00      	nop
 8003086:	e7fe      	b.n	8003086 <xQueueGiveFromISR+0x46>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d103      	bne.n	8003098 <xQueueGiveFromISR+0x58>
 8003090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <xQueueGiveFromISR+0x5c>
 8003098:	2301      	movs	r3, #1
 800309a:	e000      	b.n	800309e <xQueueGiveFromISR+0x5e>
 800309c:	2300      	movs	r3, #0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10a      	bne.n	80030b8 <xQueueGiveFromISR+0x78>
        __asm volatile
 80030a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a6:	f383 8811 	msr	BASEPRI, r3
 80030aa:	f3bf 8f6f 	isb	sy
 80030ae:	f3bf 8f4f 	dsb	sy
 80030b2:	61bb      	str	r3, [r7, #24]
    }
 80030b4:	bf00      	nop
 80030b6:	e7fe      	b.n	80030b6 <xQueueGiveFromISR+0x76>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80030b8:	f002 f910 	bl	80052dc <vPortValidateInterruptPriority>
        __asm volatile
 80030bc:	f3ef 8211 	mrs	r2, BASEPRI
 80030c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c4:	f383 8811 	msr	BASEPRI, r3
 80030c8:	f3bf 8f6f 	isb	sy
 80030cc:	f3bf 8f4f 	dsb	sy
 80030d0:	617a      	str	r2, [r7, #20]
 80030d2:	613b      	str	r3, [r7, #16]
        return ulOriginalBASEPRI;
 80030d4:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80030d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030dc:	62bb      	str	r3, [r7, #40]	; 0x28

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 80030de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d23a      	bcs.n	800315e <xQueueGiveFromISR+0x11e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80030e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80030f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f4:	1c5a      	adds	r2, r3, #1
 80030f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f8:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80030fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80030fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003102:	d112      	bne.n	800312a <xQueueGiveFromISR+0xea>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	2b00      	cmp	r3, #0
 800310a:	d025      	beq.n	8003158 <xQueueGiveFromISR+0x118>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800310c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310e:	3324      	adds	r3, #36	; 0x24
 8003110:	4618      	mov	r0, r3
 8003112:	f000 ff8d 	bl	8004030 <xTaskRemoveFromEventList>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d01d      	beq.n	8003158 <xQueueGiveFromISR+0x118>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d01a      	beq.n	8003158 <xQueueGiveFromISR+0x118>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	2201      	movs	r2, #1
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	e016      	b.n	8003158 <xQueueGiveFromISR+0x118>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800312a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800312e:	2b7f      	cmp	r3, #127	; 0x7f
 8003130:	d10a      	bne.n	8003148 <xQueueGiveFromISR+0x108>
        __asm volatile
 8003132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003136:	f383 8811 	msr	BASEPRI, r3
 800313a:	f3bf 8f6f 	isb	sy
 800313e:	f3bf 8f4f 	dsb	sy
 8003142:	60fb      	str	r3, [r7, #12]
    }
 8003144:	bf00      	nop
 8003146:	e7fe      	b.n	8003146 <xQueueGiveFromISR+0x106>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800314c:	3301      	adds	r3, #1
 800314e:	b2db      	uxtb	r3, r3
 8003150:	b25a      	sxtb	r2, r3
 8003152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003158:	2301      	movs	r3, #1
 800315a:	637b      	str	r3, [r7, #52]	; 0x34
 800315c:	e001      	b.n	8003162 <xQueueGiveFromISR+0x122>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800315e:	2300      	movs	r3, #0
 8003160:	637b      	str	r3, [r7, #52]	; 0x34
 8003162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003164:	60bb      	str	r3, [r7, #8]
        __asm volatile
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	f383 8811 	msr	BASEPRI, r3
    }
 800316c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800316e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003170:	4618      	mov	r0, r3
 8003172:	3738      	adds	r7, #56	; 0x38
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b08c      	sub	sp, #48	; 0x30
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003184:	2300      	movs	r3, #0
 8003186:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800318c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10a      	bne.n	80031a8 <xQueueReceive+0x30>
        __asm volatile
 8003192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003196:	f383 8811 	msr	BASEPRI, r3
 800319a:	f3bf 8f6f 	isb	sy
 800319e:	f3bf 8f4f 	dsb	sy
 80031a2:	623b      	str	r3, [r7, #32]
    }
 80031a4:	bf00      	nop
 80031a6:	e7fe      	b.n	80031a6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d103      	bne.n	80031b6 <xQueueReceive+0x3e>
 80031ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <xQueueReceive+0x42>
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <xQueueReceive+0x44>
 80031ba:	2300      	movs	r3, #0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10a      	bne.n	80031d6 <xQueueReceive+0x5e>
        __asm volatile
 80031c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c4:	f383 8811 	msr	BASEPRI, r3
 80031c8:	f3bf 8f6f 	isb	sy
 80031cc:	f3bf 8f4f 	dsb	sy
 80031d0:	61fb      	str	r3, [r7, #28]
    }
 80031d2:	bf00      	nop
 80031d4:	e7fe      	b.n	80031d4 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031d6:	f001 f8c7 	bl	8004368 <xTaskGetSchedulerState>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d102      	bne.n	80031e6 <xQueueReceive+0x6e>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <xQueueReceive+0x72>
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <xQueueReceive+0x74>
 80031ea:	2300      	movs	r3, #0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10a      	bne.n	8003206 <xQueueReceive+0x8e>
        __asm volatile
 80031f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f4:	f383 8811 	msr	BASEPRI, r3
 80031f8:	f3bf 8f6f 	isb	sy
 80031fc:	f3bf 8f4f 	dsb	sy
 8003200:	61bb      	str	r3, [r7, #24]
    }
 8003202:	bf00      	nop
 8003204:	e7fe      	b.n	8003204 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003206:	f001 ff85 	bl	8005114 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800320a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	2b00      	cmp	r3, #0
 8003214:	d01f      	beq.n	8003256 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003216:	68b9      	ldr	r1, [r7, #8]
 8003218:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800321a:	f000 fa1b 	bl	8003654 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	1e5a      	subs	r2, r3, #1
 8003222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003224:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00f      	beq.n	800324e <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800322e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003230:	3310      	adds	r3, #16
 8003232:	4618      	mov	r0, r3
 8003234:	f000 fefc 	bl	8004030 <xTaskRemoveFromEventList>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d007      	beq.n	800324e <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800323e:	4b3d      	ldr	r3, [pc, #244]	; (8003334 <xQueueReceive+0x1bc>)
 8003240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	f3bf 8f4f 	dsb	sy
 800324a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800324e:	f001 ff91 	bl	8005174 <vPortExitCritical>
                return pdPASS;
 8003252:	2301      	movs	r3, #1
 8003254:	e069      	b.n	800332a <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d103      	bne.n	8003264 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800325c:	f001 ff8a 	bl	8005174 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003260:	2300      	movs	r3, #0
 8003262:	e062      	b.n	800332a <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003266:	2b00      	cmp	r3, #0
 8003268:	d106      	bne.n	8003278 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800326a:	f107 0310 	add.w	r3, r7, #16
 800326e:	4618      	mov	r0, r3
 8003270:	f000 ff40 	bl	80040f4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003274:	2301      	movs	r3, #1
 8003276:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003278:	f001 ff7c 	bl	8005174 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800327c:	f000 fcba 	bl	8003bf4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003280:	f001 ff48 	bl	8005114 <vPortEnterCritical>
 8003284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003286:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800328a:	b25b      	sxtb	r3, r3
 800328c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003290:	d103      	bne.n	800329a <xQueueReceive+0x122>
 8003292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800329a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032a0:	b25b      	sxtb	r3, r3
 80032a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a6:	d103      	bne.n	80032b0 <xQueueReceive+0x138>
 80032a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032b0:	f001 ff60 	bl	8005174 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032b4:	1d3a      	adds	r2, r7, #4
 80032b6:	f107 0310 	add.w	r3, r7, #16
 80032ba:	4611      	mov	r1, r2
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 ff2f 	bl	8004120 <xTaskCheckForTimeOut>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d123      	bne.n	8003310 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032ca:	f000 fa3b 	bl	8003744 <prvIsQueueEmpty>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d017      	beq.n	8003304 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80032d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d6:	3324      	adds	r3, #36	; 0x24
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	4611      	mov	r1, r2
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 fe57 	bl	8003f90 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80032e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032e4:	f000 f9dc 	bl	80036a0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80032e8:	f000 fc92 	bl	8003c10 <xTaskResumeAll>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d189      	bne.n	8003206 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80032f2:	4b10      	ldr	r3, [pc, #64]	; (8003334 <xQueueReceive+0x1bc>)
 80032f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	f3bf 8f4f 	dsb	sy
 80032fe:	f3bf 8f6f 	isb	sy
 8003302:	e780      	b.n	8003206 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003304:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003306:	f000 f9cb 	bl	80036a0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800330a:	f000 fc81 	bl	8003c10 <xTaskResumeAll>
 800330e:	e77a      	b.n	8003206 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003312:	f000 f9c5 	bl	80036a0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003316:	f000 fc7b 	bl	8003c10 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800331a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800331c:	f000 fa12 	bl	8003744 <prvIsQueueEmpty>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	f43f af6f 	beq.w	8003206 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003328:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800332a:	4618      	mov	r0, r3
 800332c:	3730      	adds	r7, #48	; 0x30
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	e000ed04 	.word	0xe000ed04

08003338 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b08e      	sub	sp, #56	; 0x38
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003342:	2300      	movs	r3, #0
 8003344:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800334a:	2300      	movs	r3, #0
 800334c:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800334e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10a      	bne.n	800336a <xQueueSemaphoreTake+0x32>
        __asm volatile
 8003354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003358:	f383 8811 	msr	BASEPRI, r3
 800335c:	f3bf 8f6f 	isb	sy
 8003360:	f3bf 8f4f 	dsb	sy
 8003364:	623b      	str	r3, [r7, #32]
    }
 8003366:	bf00      	nop
 8003368:	e7fe      	b.n	8003368 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800336a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00a      	beq.n	8003388 <xQueueSemaphoreTake+0x50>
        __asm volatile
 8003372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003376:	f383 8811 	msr	BASEPRI, r3
 800337a:	f3bf 8f6f 	isb	sy
 800337e:	f3bf 8f4f 	dsb	sy
 8003382:	61fb      	str	r3, [r7, #28]
    }
 8003384:	bf00      	nop
 8003386:	e7fe      	b.n	8003386 <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003388:	f000 ffee 	bl	8004368 <xTaskGetSchedulerState>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d102      	bne.n	8003398 <xQueueSemaphoreTake+0x60>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <xQueueSemaphoreTake+0x64>
 8003398:	2301      	movs	r3, #1
 800339a:	e000      	b.n	800339e <xQueueSemaphoreTake+0x66>
 800339c:	2300      	movs	r3, #0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10a      	bne.n	80033b8 <xQueueSemaphoreTake+0x80>
        __asm volatile
 80033a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a6:	f383 8811 	msr	BASEPRI, r3
 80033aa:	f3bf 8f6f 	isb	sy
 80033ae:	f3bf 8f4f 	dsb	sy
 80033b2:	61bb      	str	r3, [r7, #24]
    }
 80033b4:	bf00      	nop
 80033b6:	e7fe      	b.n	80033b6 <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80033b8:	f001 feac 	bl	8005114 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80033bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c0:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80033c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d024      	beq.n	8003412 <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80033c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ca:	1e5a      	subs	r2, r3, #1
 80033cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ce:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d104      	bne.n	80033e2 <xQueueSemaphoreTake+0xaa>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80033d8:	f001 f962 	bl	80046a0 <pvTaskIncrementMutexHeldCount>
 80033dc:	4602      	mov	r2, r0
 80033de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e0:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00f      	beq.n	800340a <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ec:	3310      	adds	r3, #16
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 fe1e 	bl	8004030 <xTaskRemoveFromEventList>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d007      	beq.n	800340a <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80033fa:	4b54      	ldr	r3, [pc, #336]	; (800354c <xQueueSemaphoreTake+0x214>)
 80033fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	f3bf 8f4f 	dsb	sy
 8003406:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800340a:	f001 feb3 	bl	8005174 <vPortExitCritical>
                return pdPASS;
 800340e:	2301      	movs	r3, #1
 8003410:	e097      	b.n	8003542 <xQueueSemaphoreTake+0x20a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d111      	bne.n	800343c <xQueueSemaphoreTake+0x104>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8003418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00a      	beq.n	8003434 <xQueueSemaphoreTake+0xfc>
        __asm volatile
 800341e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003422:	f383 8811 	msr	BASEPRI, r3
 8003426:	f3bf 8f6f 	isb	sy
 800342a:	f3bf 8f4f 	dsb	sy
 800342e:	617b      	str	r3, [r7, #20]
    }
 8003430:	bf00      	nop
 8003432:	e7fe      	b.n	8003432 <xQueueSemaphoreTake+0xfa>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003434:	f001 fe9e 	bl	8005174 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003438:	2300      	movs	r3, #0
 800343a:	e082      	b.n	8003542 <xQueueSemaphoreTake+0x20a>
                }
                else if( xEntryTimeSet == pdFALSE )
 800343c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800343e:	2b00      	cmp	r3, #0
 8003440:	d106      	bne.n	8003450 <xQueueSemaphoreTake+0x118>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003442:	f107 030c 	add.w	r3, r7, #12
 8003446:	4618      	mov	r0, r3
 8003448:	f000 fe54 	bl	80040f4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800344c:	2301      	movs	r3, #1
 800344e:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003450:	f001 fe90 	bl	8005174 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003454:	f000 fbce 	bl	8003bf4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003458:	f001 fe5c 	bl	8005114 <vPortEnterCritical>
 800345c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003462:	b25b      	sxtb	r3, r3
 8003464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003468:	d103      	bne.n	8003472 <xQueueSemaphoreTake+0x13a>
 800346a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003474:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003478:	b25b      	sxtb	r3, r3
 800347a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347e:	d103      	bne.n	8003488 <xQueueSemaphoreTake+0x150>
 8003480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003488:	f001 fe74 	bl	8005174 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800348c:	463a      	mov	r2, r7
 800348e:	f107 030c 	add.w	r3, r7, #12
 8003492:	4611      	mov	r1, r2
 8003494:	4618      	mov	r0, r3
 8003496:	f000 fe43 	bl	8004120 <xTaskCheckForTimeOut>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d132      	bne.n	8003506 <xQueueSemaphoreTake+0x1ce>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034a2:	f000 f94f 	bl	8003744 <prvIsQueueEmpty>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d026      	beq.n	80034fa <xQueueSemaphoreTake+0x1c2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d109      	bne.n	80034c8 <xQueueSemaphoreTake+0x190>
                        {
                            taskENTER_CRITICAL();
 80034b4:	f001 fe2e 	bl	8005114 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80034b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 ff71 	bl	80043a4 <xTaskPriorityInherit>
 80034c2:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 80034c4:	f001 fe56 	bl	8005174 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80034c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ca:	3324      	adds	r3, #36	; 0x24
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	4611      	mov	r1, r2
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 fd5d 	bl	8003f90 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80034d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034d8:	f000 f8e2 	bl	80036a0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80034dc:	f000 fb98 	bl	8003c10 <xTaskResumeAll>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f47f af68 	bne.w	80033b8 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 80034e8:	4b18      	ldr	r3, [pc, #96]	; (800354c <xQueueSemaphoreTake+0x214>)
 80034ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	f3bf 8f4f 	dsb	sy
 80034f4:	f3bf 8f6f 	isb	sy
 80034f8:	e75e      	b.n	80033b8 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80034fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034fc:	f000 f8d0 	bl	80036a0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003500:	f000 fb86 	bl	8003c10 <xTaskResumeAll>
 8003504:	e758      	b.n	80033b8 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8003506:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003508:	f000 f8ca 	bl	80036a0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800350c:	f000 fb80 	bl	8003c10 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003510:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003512:	f000 f917 	bl	8003744 <prvIsQueueEmpty>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	f43f af4d 	beq.w	80033b8 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 800351e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00d      	beq.n	8003540 <xQueueSemaphoreTake+0x208>
                        {
                            taskENTER_CRITICAL();
 8003524:	f001 fdf6 	bl	8005114 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003528:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800352a:	f000 f811 	bl	8003550 <prvGetDisinheritPriorityAfterTimeout>
 800352e:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003536:	4618      	mov	r0, r3
 8003538:	f001 f824 	bl	8004584 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 800353c:	f001 fe1a 	bl	8005174 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003540:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003542:	4618      	mov	r0, r3
 8003544:	3738      	adds	r7, #56	; 0x38
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	e000ed04 	.word	0xe000ed04

08003550 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	2b00      	cmp	r3, #0
 800355e:	d006      	beq.n	800356e <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f1c3 0305 	rsb	r3, r3, #5
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	e001      	b.n	8003572 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800356e:	2300      	movs	r3, #0
 8003570:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8003572:	68fb      	ldr	r3, [r7, #12]
    }
 8003574:	4618      	mov	r0, r3
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800358c:	2300      	movs	r3, #0
 800358e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003594:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10d      	bne.n	80035ba <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d14d      	bne.n	8003642 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 ff70 	bl	8004490 <xTaskPriorityDisinherit>
 80035b0:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	609a      	str	r2, [r3, #8]
 80035b8:	e043      	b.n	8003642 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d119      	bne.n	80035f4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6858      	ldr	r0, [r3, #4]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	461a      	mov	r2, r3
 80035ca:	68b9      	ldr	r1, [r7, #8]
 80035cc:	f002 f8ee 	bl	80057ac <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	441a      	add	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d32b      	bcc.n	8003642 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	605a      	str	r2, [r3, #4]
 80035f2:	e026      	b.n	8003642 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	68d8      	ldr	r0, [r3, #12]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fc:	461a      	mov	r2, r3
 80035fe:	68b9      	ldr	r1, [r7, #8]
 8003600:	f002 f8d4 	bl	80057ac <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	425b      	negs	r3, r3
 800360e:	441a      	add	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	68da      	ldr	r2, [r3, #12]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	429a      	cmp	r2, r3
 800361e:	d207      	bcs.n	8003630 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	425b      	negs	r3, r3
 800362a:	441a      	add	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b02      	cmp	r3, #2
 8003634:	d105      	bne.n	8003642 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d002      	beq.n	8003642 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	3b01      	subs	r3, #1
 8003640:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1c5a      	adds	r2, r3, #1
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800364a:	697b      	ldr	r3, [r7, #20]
}
 800364c:	4618      	mov	r0, r3
 800364e:	3718      	adds	r7, #24
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	2b00      	cmp	r3, #0
 8003664:	d018      	beq.n	8003698 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	441a      	add	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68da      	ldr	r2, [r3, #12]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	429a      	cmp	r2, r3
 800367e:	d303      	bcc.n	8003688 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68d9      	ldr	r1, [r3, #12]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003690:	461a      	mov	r2, r3
 8003692:	6838      	ldr	r0, [r7, #0]
 8003694:	f002 f88a 	bl	80057ac <memcpy>
    }
}
 8003698:	bf00      	nop
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80036a8:	f001 fd34 	bl	8005114 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036b2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80036b4:	e011      	b.n	80036da <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d012      	beq.n	80036e4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	3324      	adds	r3, #36	; 0x24
 80036c2:	4618      	mov	r0, r3
 80036c4:	f000 fcb4 	bl	8004030 <xTaskRemoveFromEventList>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80036ce:	f000 fd8d 	bl	80041ec <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
 80036d4:	3b01      	subs	r3, #1
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80036da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	dce9      	bgt.n	80036b6 <prvUnlockQueue+0x16>
 80036e2:	e000      	b.n	80036e6 <prvUnlockQueue+0x46>
                        break;
 80036e4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	22ff      	movs	r2, #255	; 0xff
 80036ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80036ee:	f001 fd41 	bl	8005174 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80036f2:	f001 fd0f 	bl	8005114 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036fc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80036fe:	e011      	b.n	8003724 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d012      	beq.n	800372e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3310      	adds	r3, #16
 800370c:	4618      	mov	r0, r3
 800370e:	f000 fc8f 	bl	8004030 <xTaskRemoveFromEventList>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003718:	f000 fd68 	bl	80041ec <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800371c:	7bbb      	ldrb	r3, [r7, #14]
 800371e:	3b01      	subs	r3, #1
 8003720:	b2db      	uxtb	r3, r3
 8003722:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003724:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003728:	2b00      	cmp	r3, #0
 800372a:	dce9      	bgt.n	8003700 <prvUnlockQueue+0x60>
 800372c:	e000      	b.n	8003730 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800372e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	22ff      	movs	r2, #255	; 0xff
 8003734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003738:	f001 fd1c 	bl	8005174 <vPortExitCritical>
}
 800373c:	bf00      	nop
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800374c:	f001 fce2 	bl	8005114 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003754:	2b00      	cmp	r3, #0
 8003756:	d102      	bne.n	800375e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003758:	2301      	movs	r3, #1
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	e001      	b.n	8003762 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800375e:	2300      	movs	r3, #0
 8003760:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003762:	f001 fd07 	bl	8005174 <vPortExitCritical>

    return xReturn;
 8003766:	68fb      	ldr	r3, [r7, #12]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003778:	f001 fccc 	bl	8005114 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003784:	429a      	cmp	r2, r3
 8003786:	d102      	bne.n	800378e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003788:	2301      	movs	r3, #1
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	e001      	b.n	8003792 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800378e:	2300      	movs	r3, #0
 8003790:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003792:	f001 fcef 	bl	8005174 <vPortExitCritical>

    return xReturn;
 8003796:	68fb      	ldr	r3, [r7, #12]
}
 8003798:	4618      	mov	r0, r3
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80037aa:	2300      	movs	r3, #0
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	e014      	b.n	80037da <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80037b0:	4a0f      	ldr	r2, [pc, #60]	; (80037f0 <vQueueAddToRegistry+0x50>)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10b      	bne.n	80037d4 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80037bc:	490c      	ldr	r1, [pc, #48]	; (80037f0 <vQueueAddToRegistry+0x50>)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80037c6:	4a0a      	ldr	r2, [pc, #40]	; (80037f0 <vQueueAddToRegistry+0x50>)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	4413      	add	r3, r2
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80037d2:	e006      	b.n	80037e2 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	3301      	adds	r3, #1
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2b07      	cmp	r3, #7
 80037de:	d9e7      	bls.n	80037b0 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80037e0:	bf00      	nop
 80037e2:	bf00      	nop
 80037e4:	3714      	adds	r7, #20
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	20012fa0 	.word	0x20012fa0

080037f4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003804:	f001 fc86 	bl	8005114 <vPortEnterCritical>
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800380e:	b25b      	sxtb	r3, r3
 8003810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003814:	d103      	bne.n	800381e <vQueueWaitForMessageRestricted+0x2a>
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003824:	b25b      	sxtb	r3, r3
 8003826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382a:	d103      	bne.n	8003834 <vQueueWaitForMessageRestricted+0x40>
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003834:	f001 fc9e 	bl	8005174 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383c:	2b00      	cmp	r3, #0
 800383e:	d106      	bne.n	800384e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	3324      	adds	r3, #36	; 0x24
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	68b9      	ldr	r1, [r7, #8]
 8003848:	4618      	mov	r0, r3
 800384a:	f000 fbc5 	bl	8003fd8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800384e:	6978      	ldr	r0, [r7, #20]
 8003850:	f7ff ff26 	bl	80036a0 <prvUnlockQueue>
    }
 8003854:	bf00      	nop
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800385c:	b580      	push	{r7, lr}
 800385e:	b08c      	sub	sp, #48	; 0x30
 8003860:	af04      	add	r7, sp, #16
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	603b      	str	r3, [r7, #0]
 8003868:	4613      	mov	r3, r2
 800386a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800386c:	88fb      	ldrh	r3, [r7, #6]
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4618      	mov	r0, r3
 8003872:	f001 fd73 	bl	800535c <pvPortMalloc>
 8003876:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00e      	beq.n	800389c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800387e:	2058      	movs	r0, #88	; 0x58
 8003880:	f001 fd6c 	bl	800535c <pvPortMalloc>
 8003884:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d003      	beq.n	8003894 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	631a      	str	r2, [r3, #48]	; 0x30
 8003892:	e005      	b.n	80038a0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003894:	6978      	ldr	r0, [r7, #20]
 8003896:	f001 fe41 	bl	800551c <vPortFree>
 800389a:	e001      	b.n	80038a0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800389c:	2300      	movs	r3, #0
 800389e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d013      	beq.n	80038ce <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80038a6:	88fa      	ldrh	r2, [r7, #6]
 80038a8:	2300      	movs	r3, #0
 80038aa:	9303      	str	r3, [sp, #12]
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	9302      	str	r3, [sp, #8]
 80038b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b2:	9301      	str	r3, [sp, #4]
 80038b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	68b9      	ldr	r1, [r7, #8]
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f000 f80e 	bl	80038de <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80038c2:	69f8      	ldr	r0, [r7, #28]
 80038c4:	f000 f8a2 	bl	8003a0c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80038c8:	2301      	movs	r3, #1
 80038ca:	61bb      	str	r3, [r7, #24]
 80038cc:	e002      	b.n	80038d4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80038ce:	f04f 33ff 	mov.w	r3, #4294967295
 80038d2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80038d4:	69bb      	ldr	r3, [r7, #24]
    }
 80038d6:	4618      	mov	r0, r3
 80038d8:	3720      	adds	r7, #32
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b088      	sub	sp, #32
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	60f8      	str	r0, [r7, #12]
 80038e6:	60b9      	str	r1, [r7, #8]
 80038e8:	607a      	str	r2, [r7, #4]
 80038ea:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80038ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ee:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	461a      	mov	r2, r3
 80038f6:	21a5      	movs	r1, #165	; 0xa5
 80038f8:	f001 ff66 	bl	80057c8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80038fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003906:	3b01      	subs	r3, #1
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4413      	add	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	f023 0307 	bic.w	r3, r3, #7
 8003914:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00a      	beq.n	8003936 <prvInitialiseNewTask+0x58>
        __asm volatile
 8003920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003924:	f383 8811 	msr	BASEPRI, r3
 8003928:	f3bf 8f6f 	isb	sy
 800392c:	f3bf 8f4f 	dsb	sy
 8003930:	617b      	str	r3, [r7, #20]
    }
 8003932:	bf00      	nop
 8003934:	e7fe      	b.n	8003934 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d01f      	beq.n	800397c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800393c:	2300      	movs	r3, #0
 800393e:	61fb      	str	r3, [r7, #28]
 8003940:	e012      	b.n	8003968 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	4413      	add	r3, r2
 8003948:	7819      	ldrb	r1, [r3, #0]
 800394a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	4413      	add	r3, r2
 8003950:	3334      	adds	r3, #52	; 0x34
 8003952:	460a      	mov	r2, r1
 8003954:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	4413      	add	r3, r2
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d006      	beq.n	8003970 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	3301      	adds	r3, #1
 8003966:	61fb      	str	r3, [r7, #28]
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	2b09      	cmp	r3, #9
 800396c:	d9e9      	bls.n	8003942 <prvInitialiseNewTask+0x64>
 800396e:	e000      	b.n	8003972 <prvInitialiseNewTask+0x94>
            {
                break;
 8003970:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800397a:	e003      	b.n	8003984 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800397c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397e:	2200      	movs	r2, #0
 8003980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003986:	2b04      	cmp	r3, #4
 8003988:	d901      	bls.n	800398e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800398a:	2304      	movs	r3, #4
 800398c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800398e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003990:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003992:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003996:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003998:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800399a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399c:	2200      	movs	r2, #0
 800399e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80039a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a2:	3304      	adds	r3, #4
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fe fff1 	bl	800298c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80039aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ac:	3318      	adds	r3, #24
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fe ffec 	bl	800298c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80039b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039b8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039bc:	f1c3 0205 	rsb	r2, r3, #5
 80039c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80039c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039c8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80039ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039cc:	3350      	adds	r3, #80	; 0x50
 80039ce:	2204      	movs	r2, #4
 80039d0:	2100      	movs	r1, #0
 80039d2:	4618      	mov	r0, r3
 80039d4:	f001 fef8 	bl	80057c8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80039d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039da:	3354      	adds	r3, #84	; 0x54
 80039dc:	2201      	movs	r2, #1
 80039de:	2100      	movs	r1, #0
 80039e0:	4618      	mov	r0, r3
 80039e2:	f001 fef1 	bl	80057c8 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	68f9      	ldr	r1, [r7, #12]
 80039ea:	69b8      	ldr	r0, [r7, #24]
 80039ec:	f001 f9e4 	bl	8004db8 <pxPortInitialiseStack>
 80039f0:	4602      	mov	r2, r0
 80039f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80039f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d002      	beq.n	8003a02 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80039fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a00:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003a02:	bf00      	nop
 8003a04:	3720      	adds	r7, #32
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
	...

08003a0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003a14:	f001 fb7e 	bl	8005114 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003a18:	4b2c      	ldr	r3, [pc, #176]	; (8003acc <prvAddNewTaskToReadyList+0xc0>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	4a2b      	ldr	r2, [pc, #172]	; (8003acc <prvAddNewTaskToReadyList+0xc0>)
 8003a20:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003a22:	4b2b      	ldr	r3, [pc, #172]	; (8003ad0 <prvAddNewTaskToReadyList+0xc4>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d109      	bne.n	8003a3e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003a2a:	4a29      	ldr	r2, [pc, #164]	; (8003ad0 <prvAddNewTaskToReadyList+0xc4>)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a30:	4b26      	ldr	r3, [pc, #152]	; (8003acc <prvAddNewTaskToReadyList+0xc0>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d110      	bne.n	8003a5a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003a38:	f000 fbfc 	bl	8004234 <prvInitialiseTaskLists>
 8003a3c:	e00d      	b.n	8003a5a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003a3e:	4b25      	ldr	r3, [pc, #148]	; (8003ad4 <prvAddNewTaskToReadyList+0xc8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d109      	bne.n	8003a5a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a46:	4b22      	ldr	r3, [pc, #136]	; (8003ad0 <prvAddNewTaskToReadyList+0xc4>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d802      	bhi.n	8003a5a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003a54:	4a1e      	ldr	r2, [pc, #120]	; (8003ad0 <prvAddNewTaskToReadyList+0xc4>)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003a5a:	4b1f      	ldr	r3, [pc, #124]	; (8003ad8 <prvAddNewTaskToReadyList+0xcc>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	4a1d      	ldr	r2, [pc, #116]	; (8003ad8 <prvAddNewTaskToReadyList+0xcc>)
 8003a62:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003a64:	4b1c      	ldr	r3, [pc, #112]	; (8003ad8 <prvAddNewTaskToReadyList+0xcc>)
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a70:	2201      	movs	r2, #1
 8003a72:	409a      	lsls	r2, r3
 8003a74:	4b19      	ldr	r3, [pc, #100]	; (8003adc <prvAddNewTaskToReadyList+0xd0>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	4a18      	ldr	r2, [pc, #96]	; (8003adc <prvAddNewTaskToReadyList+0xd0>)
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a82:	4613      	mov	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4413      	add	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4a15      	ldr	r2, [pc, #84]	; (8003ae0 <prvAddNewTaskToReadyList+0xd4>)
 8003a8c:	441a      	add	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	3304      	adds	r3, #4
 8003a92:	4619      	mov	r1, r3
 8003a94:	4610      	mov	r0, r2
 8003a96:	f7fe ff86 	bl	80029a6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003a9a:	f001 fb6b 	bl	8005174 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003a9e:	4b0d      	ldr	r3, [pc, #52]	; (8003ad4 <prvAddNewTaskToReadyList+0xc8>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00e      	beq.n	8003ac4 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003aa6:	4b0a      	ldr	r3, [pc, #40]	; (8003ad0 <prvAddNewTaskToReadyList+0xc4>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d207      	bcs.n	8003ac4 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003ab4:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <prvAddNewTaskToReadyList+0xd8>)
 8003ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003ac4:	bf00      	nop
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	2000026c 	.word	0x2000026c
 8003ad0:	20000194 	.word	0x20000194
 8003ad4:	20000278 	.word	0x20000278
 8003ad8:	20000288 	.word	0x20000288
 8003adc:	20000274 	.word	0x20000274
 8003ae0:	20000198 	.word	0x20000198
 8003ae4:	e000ed04 	.word	0xe000ed04

08003ae8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003af0:	2300      	movs	r3, #0
 8003af2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d017      	beq.n	8003b2a <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8003afa:	4b13      	ldr	r3, [pc, #76]	; (8003b48 <vTaskDelay+0x60>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00a      	beq.n	8003b18 <vTaskDelay+0x30>
        __asm volatile
 8003b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b06:	f383 8811 	msr	BASEPRI, r3
 8003b0a:	f3bf 8f6f 	isb	sy
 8003b0e:	f3bf 8f4f 	dsb	sy
 8003b12:	60bb      	str	r3, [r7, #8]
    }
 8003b14:	bf00      	nop
 8003b16:	e7fe      	b.n	8003b16 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8003b18:	f000 f86c 	bl	8003bf4 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 fdd2 	bl	80046c8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003b24:	f000 f874 	bl	8003c10 <xTaskResumeAll>
 8003b28:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d107      	bne.n	8003b40 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8003b30:	4b06      	ldr	r3, [pc, #24]	; (8003b4c <vTaskDelay+0x64>)
 8003b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	f3bf 8f4f 	dsb	sy
 8003b3c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003b40:	bf00      	nop
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	20000294 	.word	0x20000294
 8003b4c:	e000ed04 	.word	0xe000ed04

08003b50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003b56:	4b20      	ldr	r3, [pc, #128]	; (8003bd8 <vTaskStartScheduler+0x88>)
 8003b58:	9301      	str	r3, [sp, #4]
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	2300      	movs	r3, #0
 8003b60:	2282      	movs	r2, #130	; 0x82
 8003b62:	491e      	ldr	r1, [pc, #120]	; (8003bdc <vTaskStartScheduler+0x8c>)
 8003b64:	481e      	ldr	r0, [pc, #120]	; (8003be0 <vTaskStartScheduler+0x90>)
 8003b66:	f7ff fe79 	bl	800385c <xTaskCreate>
 8003b6a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d102      	bne.n	8003b78 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003b72:	f000 fe0f 	bl	8004794 <xTimerCreateTimerTask>
 8003b76:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d116      	bne.n	8003bac <vTaskStartScheduler+0x5c>
        __asm volatile
 8003b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b82:	f383 8811 	msr	BASEPRI, r3
 8003b86:	f3bf 8f6f 	isb	sy
 8003b8a:	f3bf 8f4f 	dsb	sy
 8003b8e:	60bb      	str	r3, [r7, #8]
    }
 8003b90:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003b92:	4b14      	ldr	r3, [pc, #80]	; (8003be4 <vTaskStartScheduler+0x94>)
 8003b94:	f04f 32ff 	mov.w	r2, #4294967295
 8003b98:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003b9a:	4b13      	ldr	r3, [pc, #76]	; (8003be8 <vTaskStartScheduler+0x98>)
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003ba0:	4b12      	ldr	r3, [pc, #72]	; (8003bec <vTaskStartScheduler+0x9c>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003ba6:	f001 f995 	bl	8004ed4 <xPortStartScheduler>
 8003baa:	e00e      	b.n	8003bca <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb2:	d10a      	bne.n	8003bca <vTaskStartScheduler+0x7a>
        __asm volatile
 8003bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb8:	f383 8811 	msr	BASEPRI, r3
 8003bbc:	f3bf 8f6f 	isb	sy
 8003bc0:	f3bf 8f4f 	dsb	sy
 8003bc4:	607b      	str	r3, [r7, #4]
    }
 8003bc6:	bf00      	nop
 8003bc8:	e7fe      	b.n	8003bc8 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003bca:	4b09      	ldr	r3, [pc, #36]	; (8003bf0 <vTaskStartScheduler+0xa0>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
}
 8003bce:	bf00      	nop
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	20000290 	.word	0x20000290
 8003bdc:	080060e8 	.word	0x080060e8
 8003be0:	08004205 	.word	0x08004205
 8003be4:	2000028c 	.word	0x2000028c
 8003be8:	20000278 	.word	0x20000278
 8003bec:	20000270 	.word	0x20000270
 8003bf0:	2000000c 	.word	0x2000000c

08003bf4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003bf8:	4b04      	ldr	r3, [pc, #16]	; (8003c0c <vTaskSuspendAll+0x18>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	4a03      	ldr	r2, [pc, #12]	; (8003c0c <vTaskSuspendAll+0x18>)
 8003c00:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003c02:	bf00      	nop
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	20000294 	.word	0x20000294

08003c10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003c16:	2300      	movs	r3, #0
 8003c18:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003c1e:	4b41      	ldr	r3, [pc, #260]	; (8003d24 <xTaskResumeAll+0x114>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10a      	bne.n	8003c3c <xTaskResumeAll+0x2c>
        __asm volatile
 8003c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2a:	f383 8811 	msr	BASEPRI, r3
 8003c2e:	f3bf 8f6f 	isb	sy
 8003c32:	f3bf 8f4f 	dsb	sy
 8003c36:	603b      	str	r3, [r7, #0]
    }
 8003c38:	bf00      	nop
 8003c3a:	e7fe      	b.n	8003c3a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003c3c:	f001 fa6a 	bl	8005114 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003c40:	4b38      	ldr	r3, [pc, #224]	; (8003d24 <xTaskResumeAll+0x114>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	3b01      	subs	r3, #1
 8003c46:	4a37      	ldr	r2, [pc, #220]	; (8003d24 <xTaskResumeAll+0x114>)
 8003c48:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c4a:	4b36      	ldr	r3, [pc, #216]	; (8003d24 <xTaskResumeAll+0x114>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d161      	bne.n	8003d16 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c52:	4b35      	ldr	r3, [pc, #212]	; (8003d28 <xTaskResumeAll+0x118>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d05d      	beq.n	8003d16 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c5a:	e02e      	b.n	8003cba <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c5c:	4b33      	ldr	r3, [pc, #204]	; (8003d2c <xTaskResumeAll+0x11c>)
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	3318      	adds	r3, #24
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7fe fef9 	bl	8002a60 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	3304      	adds	r3, #4
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fe fef4 	bl	8002a60 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	409a      	lsls	r2, r3
 8003c80:	4b2b      	ldr	r3, [pc, #172]	; (8003d30 <xTaskResumeAll+0x120>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	4a2a      	ldr	r2, [pc, #168]	; (8003d30 <xTaskResumeAll+0x120>)
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c8e:	4613      	mov	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4a27      	ldr	r2, [pc, #156]	; (8003d34 <xTaskResumeAll+0x124>)
 8003c98:	441a      	add	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	f7fe fe80 	bl	80029a6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003caa:	4b23      	ldr	r3, [pc, #140]	; (8003d38 <xTaskResumeAll+0x128>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d302      	bcc.n	8003cba <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8003cb4:	4b21      	ldr	r3, [pc, #132]	; (8003d3c <xTaskResumeAll+0x12c>)
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cba:	4b1c      	ldr	r3, [pc, #112]	; (8003d2c <xTaskResumeAll+0x11c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1cc      	bne.n	8003c5c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003cc8:	f000 fb32 	bl	8004330 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003ccc:	4b1c      	ldr	r3, [pc, #112]	; (8003d40 <xTaskResumeAll+0x130>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d010      	beq.n	8003cfa <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003cd8:	f000 f846 	bl	8003d68 <xTaskIncrementTick>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d002      	beq.n	8003ce8 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8003ce2:	4b16      	ldr	r3, [pc, #88]	; (8003d3c <xTaskResumeAll+0x12c>)
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3b01      	subs	r3, #1
 8003cec:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1f1      	bne.n	8003cd8 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8003cf4:	4b12      	ldr	r3, [pc, #72]	; (8003d40 <xTaskResumeAll+0x130>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003cfa:	4b10      	ldr	r3, [pc, #64]	; (8003d3c <xTaskResumeAll+0x12c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d009      	beq.n	8003d16 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003d02:	2301      	movs	r3, #1
 8003d04:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003d06:	4b0f      	ldr	r3, [pc, #60]	; (8003d44 <xTaskResumeAll+0x134>)
 8003d08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d0c:	601a      	str	r2, [r3, #0]
 8003d0e:	f3bf 8f4f 	dsb	sy
 8003d12:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003d16:	f001 fa2d 	bl	8005174 <vPortExitCritical>

    return xAlreadyYielded;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	20000294 	.word	0x20000294
 8003d28:	2000026c 	.word	0x2000026c
 8003d2c:	2000022c 	.word	0x2000022c
 8003d30:	20000274 	.word	0x20000274
 8003d34:	20000198 	.word	0x20000198
 8003d38:	20000194 	.word	0x20000194
 8003d3c:	20000280 	.word	0x20000280
 8003d40:	2000027c 	.word	0x2000027c
 8003d44:	e000ed04 	.word	0xe000ed04

08003d48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003d4e:	4b05      	ldr	r3, [pc, #20]	; (8003d64 <xTaskGetTickCount+0x1c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003d54:	687b      	ldr	r3, [r7, #4]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	20000270 	.word	0x20000270

08003d68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d72:	4b4e      	ldr	r3, [pc, #312]	; (8003eac <xTaskIncrementTick+0x144>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f040 808e 	bne.w	8003e98 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d7c:	4b4c      	ldr	r3, [pc, #304]	; (8003eb0 <xTaskIncrementTick+0x148>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3301      	adds	r3, #1
 8003d82:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003d84:	4a4a      	ldr	r2, [pc, #296]	; (8003eb0 <xTaskIncrementTick+0x148>)
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d120      	bne.n	8003dd2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003d90:	4b48      	ldr	r3, [pc, #288]	; (8003eb4 <xTaskIncrementTick+0x14c>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <xTaskIncrementTick+0x48>
        __asm volatile
 8003d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9e:	f383 8811 	msr	BASEPRI, r3
 8003da2:	f3bf 8f6f 	isb	sy
 8003da6:	f3bf 8f4f 	dsb	sy
 8003daa:	603b      	str	r3, [r7, #0]
    }
 8003dac:	bf00      	nop
 8003dae:	e7fe      	b.n	8003dae <xTaskIncrementTick+0x46>
 8003db0:	4b40      	ldr	r3, [pc, #256]	; (8003eb4 <xTaskIncrementTick+0x14c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	60fb      	str	r3, [r7, #12]
 8003db6:	4b40      	ldr	r3, [pc, #256]	; (8003eb8 <xTaskIncrementTick+0x150>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a3e      	ldr	r2, [pc, #248]	; (8003eb4 <xTaskIncrementTick+0x14c>)
 8003dbc:	6013      	str	r3, [r2, #0]
 8003dbe:	4a3e      	ldr	r2, [pc, #248]	; (8003eb8 <xTaskIncrementTick+0x150>)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6013      	str	r3, [r2, #0]
 8003dc4:	4b3d      	ldr	r3, [pc, #244]	; (8003ebc <xTaskIncrementTick+0x154>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	4a3c      	ldr	r2, [pc, #240]	; (8003ebc <xTaskIncrementTick+0x154>)
 8003dcc:	6013      	str	r3, [r2, #0]
 8003dce:	f000 faaf 	bl	8004330 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003dd2:	4b3b      	ldr	r3, [pc, #236]	; (8003ec0 <xTaskIncrementTick+0x158>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d348      	bcc.n	8003e6e <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ddc:	4b35      	ldr	r3, [pc, #212]	; (8003eb4 <xTaskIncrementTick+0x14c>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d104      	bne.n	8003df0 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003de6:	4b36      	ldr	r3, [pc, #216]	; (8003ec0 <xTaskIncrementTick+0x158>)
 8003de8:	f04f 32ff 	mov.w	r2, #4294967295
 8003dec:	601a      	str	r2, [r3, #0]
                    break;
 8003dee:	e03e      	b.n	8003e6e <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003df0:	4b30      	ldr	r3, [pc, #192]	; (8003eb4 <xTaskIncrementTick+0x14c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d203      	bcs.n	8003e10 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003e08:	4a2d      	ldr	r2, [pc, #180]	; (8003ec0 <xTaskIncrementTick+0x158>)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003e0e:	e02e      	b.n	8003e6e <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	3304      	adds	r3, #4
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fe fe23 	bl	8002a60 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d004      	beq.n	8003e2c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	3318      	adds	r3, #24
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fe fe1a 	bl	8002a60 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e30:	2201      	movs	r2, #1
 8003e32:	409a      	lsls	r2, r3
 8003e34:	4b23      	ldr	r3, [pc, #140]	; (8003ec4 <xTaskIncrementTick+0x15c>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	4a22      	ldr	r2, [pc, #136]	; (8003ec4 <xTaskIncrementTick+0x15c>)
 8003e3c:	6013      	str	r3, [r2, #0]
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e42:	4613      	mov	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4413      	add	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4a1f      	ldr	r2, [pc, #124]	; (8003ec8 <xTaskIncrementTick+0x160>)
 8003e4c:	441a      	add	r2, r3
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	3304      	adds	r3, #4
 8003e52:	4619      	mov	r1, r3
 8003e54:	4610      	mov	r0, r2
 8003e56:	f7fe fda6 	bl	80029a6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e5e:	4b1b      	ldr	r3, [pc, #108]	; (8003ecc <xTaskIncrementTick+0x164>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d3b9      	bcc.n	8003ddc <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e6c:	e7b6      	b.n	8003ddc <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e6e:	4b17      	ldr	r3, [pc, #92]	; (8003ecc <xTaskIncrementTick+0x164>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e74:	4914      	ldr	r1, [pc, #80]	; (8003ec8 <xTaskIncrementTick+0x160>)
 8003e76:	4613      	mov	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	4413      	add	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	440b      	add	r3, r1
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d901      	bls.n	8003e8a <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8003e86:	2301      	movs	r3, #1
 8003e88:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003e8a:	4b11      	ldr	r3, [pc, #68]	; (8003ed0 <xTaskIncrementTick+0x168>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d007      	beq.n	8003ea2 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8003e92:	2301      	movs	r3, #1
 8003e94:	617b      	str	r3, [r7, #20]
 8003e96:	e004      	b.n	8003ea2 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003e98:	4b0e      	ldr	r3, [pc, #56]	; (8003ed4 <xTaskIncrementTick+0x16c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	4a0d      	ldr	r2, [pc, #52]	; (8003ed4 <xTaskIncrementTick+0x16c>)
 8003ea0:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003ea2:	697b      	ldr	r3, [r7, #20]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	20000294 	.word	0x20000294
 8003eb0:	20000270 	.word	0x20000270
 8003eb4:	20000224 	.word	0x20000224
 8003eb8:	20000228 	.word	0x20000228
 8003ebc:	20000284 	.word	0x20000284
 8003ec0:	2000028c 	.word	0x2000028c
 8003ec4:	20000274 	.word	0x20000274
 8003ec8:	20000198 	.word	0x20000198
 8003ecc:	20000194 	.word	0x20000194
 8003ed0:	20000280 	.word	0x20000280
 8003ed4:	2000027c 	.word	0x2000027c

08003ed8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b087      	sub	sp, #28
 8003edc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ede:	4b27      	ldr	r3, [pc, #156]	; (8003f7c <vTaskSwitchContext+0xa4>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003ee6:	4b26      	ldr	r3, [pc, #152]	; (8003f80 <vTaskSwitchContext+0xa8>)
 8003ee8:	2201      	movs	r2, #1
 8003eea:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003eec:	e03f      	b.n	8003f6e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8003eee:	4b24      	ldr	r3, [pc, #144]	; (8003f80 <vTaskSwitchContext+0xa8>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ef4:	4b23      	ldr	r3, [pc, #140]	; (8003f84 <vTaskSwitchContext+0xac>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	fab3 f383 	clz	r3, r3
 8003f00:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003f02:	7afb      	ldrb	r3, [r7, #11]
 8003f04:	f1c3 031f 	rsb	r3, r3, #31
 8003f08:	617b      	str	r3, [r7, #20]
 8003f0a:	491f      	ldr	r1, [pc, #124]	; (8003f88 <vTaskSwitchContext+0xb0>)
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	440b      	add	r3, r1
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10a      	bne.n	8003f34 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f22:	f383 8811 	msr	BASEPRI, r3
 8003f26:	f3bf 8f6f 	isb	sy
 8003f2a:	f3bf 8f4f 	dsb	sy
 8003f2e:	607b      	str	r3, [r7, #4]
    }
 8003f30:	bf00      	nop
 8003f32:	e7fe      	b.n	8003f32 <vTaskSwitchContext+0x5a>
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	4613      	mov	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4413      	add	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4a12      	ldr	r2, [pc, #72]	; (8003f88 <vTaskSwitchContext+0xb0>)
 8003f40:	4413      	add	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	605a      	str	r2, [r3, #4]
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	3308      	adds	r3, #8
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d104      	bne.n	8003f64 <vTaskSwitchContext+0x8c>
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	605a      	str	r2, [r3, #4]
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	4a08      	ldr	r2, [pc, #32]	; (8003f8c <vTaskSwitchContext+0xb4>)
 8003f6c:	6013      	str	r3, [r2, #0]
}
 8003f6e:	bf00      	nop
 8003f70:	371c      	adds	r7, #28
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	20000294 	.word	0x20000294
 8003f80:	20000280 	.word	0x20000280
 8003f84:	20000274 	.word	0x20000274
 8003f88:	20000198 	.word	0x20000198
 8003f8c:	20000194 	.word	0x20000194

08003f90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10a      	bne.n	8003fb6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa4:	f383 8811 	msr	BASEPRI, r3
 8003fa8:	f3bf 8f6f 	isb	sy
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	60fb      	str	r3, [r7, #12]
    }
 8003fb2:	bf00      	nop
 8003fb4:	e7fe      	b.n	8003fb4 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fb6:	4b07      	ldr	r3, [pc, #28]	; (8003fd4 <vTaskPlaceOnEventList+0x44>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	3318      	adds	r3, #24
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7fe fd15 	bl	80029ee <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	6838      	ldr	r0, [r7, #0]
 8003fc8:	f000 fb7e 	bl	80046c8 <prvAddCurrentTaskToDelayedList>
}
 8003fcc:	bf00      	nop
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	20000194 	.word	0x20000194

08003fd8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10a      	bne.n	8004000 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fee:	f383 8811 	msr	BASEPRI, r3
 8003ff2:	f3bf 8f6f 	isb	sy
 8003ff6:	f3bf 8f4f 	dsb	sy
 8003ffa:	617b      	str	r3, [r7, #20]
    }
 8003ffc:	bf00      	nop
 8003ffe:	e7fe      	b.n	8003ffe <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004000:	4b0a      	ldr	r3, [pc, #40]	; (800402c <vTaskPlaceOnEventListRestricted+0x54>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3318      	adds	r3, #24
 8004006:	4619      	mov	r1, r3
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f7fe fccc 	bl	80029a6 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d002      	beq.n	800401a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8004014:	f04f 33ff 	mov.w	r3, #4294967295
 8004018:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800401a:	6879      	ldr	r1, [r7, #4]
 800401c:	68b8      	ldr	r0, [r7, #8]
 800401e:	f000 fb53 	bl	80046c8 <prvAddCurrentTaskToDelayedList>
    }
 8004022:	bf00      	nop
 8004024:	3718      	adds	r7, #24
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	20000194 	.word	0x20000194

08004030 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10a      	bne.n	800405c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8004046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404a:	f383 8811 	msr	BASEPRI, r3
 800404e:	f3bf 8f6f 	isb	sy
 8004052:	f3bf 8f4f 	dsb	sy
 8004056:	60fb      	str	r3, [r7, #12]
    }
 8004058:	bf00      	nop
 800405a:	e7fe      	b.n	800405a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	3318      	adds	r3, #24
 8004060:	4618      	mov	r0, r3
 8004062:	f7fe fcfd 	bl	8002a60 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004066:	4b1d      	ldr	r3, [pc, #116]	; (80040dc <xTaskRemoveFromEventList+0xac>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d11c      	bne.n	80040a8 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	3304      	adds	r3, #4
 8004072:	4618      	mov	r0, r3
 8004074:	f7fe fcf4 	bl	8002a60 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407c:	2201      	movs	r2, #1
 800407e:	409a      	lsls	r2, r3
 8004080:	4b17      	ldr	r3, [pc, #92]	; (80040e0 <xTaskRemoveFromEventList+0xb0>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4313      	orrs	r3, r2
 8004086:	4a16      	ldr	r2, [pc, #88]	; (80040e0 <xTaskRemoveFromEventList+0xb0>)
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800408e:	4613      	mov	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4a13      	ldr	r2, [pc, #76]	; (80040e4 <xTaskRemoveFromEventList+0xb4>)
 8004098:	441a      	add	r2, r3
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	3304      	adds	r3, #4
 800409e:	4619      	mov	r1, r3
 80040a0:	4610      	mov	r0, r2
 80040a2:	f7fe fc80 	bl	80029a6 <vListInsertEnd>
 80040a6:	e005      	b.n	80040b4 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	3318      	adds	r3, #24
 80040ac:	4619      	mov	r1, r3
 80040ae:	480e      	ldr	r0, [pc, #56]	; (80040e8 <xTaskRemoveFromEventList+0xb8>)
 80040b0:	f7fe fc79 	bl	80029a6 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b8:	4b0c      	ldr	r3, [pc, #48]	; (80040ec <xTaskRemoveFromEventList+0xbc>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040be:	429a      	cmp	r2, r3
 80040c0:	d905      	bls.n	80040ce <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80040c2:	2301      	movs	r3, #1
 80040c4:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80040c6:	4b0a      	ldr	r3, [pc, #40]	; (80040f0 <xTaskRemoveFromEventList+0xc0>)
 80040c8:	2201      	movs	r2, #1
 80040ca:	601a      	str	r2, [r3, #0]
 80040cc:	e001      	b.n	80040d2 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 80040ce:	2300      	movs	r3, #0
 80040d0:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80040d2:	697b      	ldr	r3, [r7, #20]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3718      	adds	r7, #24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	20000294 	.word	0x20000294
 80040e0:	20000274 	.word	0x20000274
 80040e4:	20000198 	.word	0x20000198
 80040e8:	2000022c 	.word	0x2000022c
 80040ec:	20000194 	.word	0x20000194
 80040f0:	20000280 	.word	0x20000280

080040f4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80040fc:	4b06      	ldr	r3, [pc, #24]	; (8004118 <vTaskInternalSetTimeOutState+0x24>)
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004104:	4b05      	ldr	r3, [pc, #20]	; (800411c <vTaskInternalSetTimeOutState+0x28>)
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	605a      	str	r2, [r3, #4]
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	20000284 	.word	0x20000284
 800411c:	20000270 	.word	0x20000270

08004120 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b088      	sub	sp, #32
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10a      	bne.n	8004146 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004134:	f383 8811 	msr	BASEPRI, r3
 8004138:	f3bf 8f6f 	isb	sy
 800413c:	f3bf 8f4f 	dsb	sy
 8004140:	613b      	str	r3, [r7, #16]
    }
 8004142:	bf00      	nop
 8004144:	e7fe      	b.n	8004144 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10a      	bne.n	8004162 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800414c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004150:	f383 8811 	msr	BASEPRI, r3
 8004154:	f3bf 8f6f 	isb	sy
 8004158:	f3bf 8f4f 	dsb	sy
 800415c:	60fb      	str	r3, [r7, #12]
    }
 800415e:	bf00      	nop
 8004160:	e7fe      	b.n	8004160 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004162:	f000 ffd7 	bl	8005114 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004166:	4b1f      	ldr	r3, [pc, #124]	; (80041e4 <xTaskCheckForTimeOut+0xc4>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417e:	d102      	bne.n	8004186 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004180:	2300      	movs	r3, #0
 8004182:	61fb      	str	r3, [r7, #28]
 8004184:	e026      	b.n	80041d4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	4b17      	ldr	r3, [pc, #92]	; (80041e8 <xTaskCheckForTimeOut+0xc8>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	429a      	cmp	r2, r3
 8004190:	d00a      	beq.n	80041a8 <xTaskCheckForTimeOut+0x88>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	429a      	cmp	r2, r3
 800419a:	d305      	bcc.n	80041a8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800419c:	2301      	movs	r3, #1
 800419e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	2200      	movs	r2, #0
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	e015      	b.n	80041d4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d20b      	bcs.n	80041ca <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	1ad2      	subs	r2, r2, r3
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7ff ff98 	bl	80040f4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80041c4:	2300      	movs	r3, #0
 80041c6:	61fb      	str	r3, [r7, #28]
 80041c8:	e004      	b.n	80041d4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80041d0:	2301      	movs	r3, #1
 80041d2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80041d4:	f000 ffce 	bl	8005174 <vPortExitCritical>

    return xReturn;
 80041d8:	69fb      	ldr	r3, [r7, #28]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3720      	adds	r7, #32
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	20000270 	.word	0x20000270
 80041e8:	20000284 	.word	0x20000284

080041ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80041f0:	4b03      	ldr	r3, [pc, #12]	; (8004200 <vTaskMissedYield+0x14>)
 80041f2:	2201      	movs	r2, #1
 80041f4:	601a      	str	r2, [r3, #0]
}
 80041f6:	bf00      	nop
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr
 8004200:	20000280 	.word	0x20000280

08004204 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800420c:	f000 f852 	bl	80042b4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004210:	4b06      	ldr	r3, [pc, #24]	; (800422c <prvIdleTask+0x28>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d9f9      	bls.n	800420c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004218:	4b05      	ldr	r3, [pc, #20]	; (8004230 <prvIdleTask+0x2c>)
 800421a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	f3bf 8f4f 	dsb	sy
 8004224:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004228:	e7f0      	b.n	800420c <prvIdleTask+0x8>
 800422a:	bf00      	nop
 800422c:	20000198 	.word	0x20000198
 8004230:	e000ed04 	.word	0xe000ed04

08004234 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800423a:	2300      	movs	r3, #0
 800423c:	607b      	str	r3, [r7, #4]
 800423e:	e00c      	b.n	800425a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	4613      	mov	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4413      	add	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4a12      	ldr	r2, [pc, #72]	; (8004294 <prvInitialiseTaskLists+0x60>)
 800424c:	4413      	add	r3, r2
 800424e:	4618      	mov	r0, r3
 8004250:	f7fe fb7c 	bl	800294c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	3301      	adds	r3, #1
 8004258:	607b      	str	r3, [r7, #4]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b04      	cmp	r3, #4
 800425e:	d9ef      	bls.n	8004240 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004260:	480d      	ldr	r0, [pc, #52]	; (8004298 <prvInitialiseTaskLists+0x64>)
 8004262:	f7fe fb73 	bl	800294c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004266:	480d      	ldr	r0, [pc, #52]	; (800429c <prvInitialiseTaskLists+0x68>)
 8004268:	f7fe fb70 	bl	800294c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800426c:	480c      	ldr	r0, [pc, #48]	; (80042a0 <prvInitialiseTaskLists+0x6c>)
 800426e:	f7fe fb6d 	bl	800294c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004272:	480c      	ldr	r0, [pc, #48]	; (80042a4 <prvInitialiseTaskLists+0x70>)
 8004274:	f7fe fb6a 	bl	800294c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004278:	480b      	ldr	r0, [pc, #44]	; (80042a8 <prvInitialiseTaskLists+0x74>)
 800427a:	f7fe fb67 	bl	800294c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800427e:	4b0b      	ldr	r3, [pc, #44]	; (80042ac <prvInitialiseTaskLists+0x78>)
 8004280:	4a05      	ldr	r2, [pc, #20]	; (8004298 <prvInitialiseTaskLists+0x64>)
 8004282:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004284:	4b0a      	ldr	r3, [pc, #40]	; (80042b0 <prvInitialiseTaskLists+0x7c>)
 8004286:	4a05      	ldr	r2, [pc, #20]	; (800429c <prvInitialiseTaskLists+0x68>)
 8004288:	601a      	str	r2, [r3, #0]
}
 800428a:	bf00      	nop
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	20000198 	.word	0x20000198
 8004298:	200001fc 	.word	0x200001fc
 800429c:	20000210 	.word	0x20000210
 80042a0:	2000022c 	.word	0x2000022c
 80042a4:	20000240 	.word	0x20000240
 80042a8:	20000258 	.word	0x20000258
 80042ac:	20000224 	.word	0x20000224
 80042b0:	20000228 	.word	0x20000228

080042b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042ba:	e019      	b.n	80042f0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80042bc:	f000 ff2a 	bl	8005114 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042c0:	4b10      	ldr	r3, [pc, #64]	; (8004304 <prvCheckTasksWaitingTermination+0x50>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3304      	adds	r3, #4
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7fe fbc7 	bl	8002a60 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80042d2:	4b0d      	ldr	r3, [pc, #52]	; (8004308 <prvCheckTasksWaitingTermination+0x54>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	3b01      	subs	r3, #1
 80042d8:	4a0b      	ldr	r2, [pc, #44]	; (8004308 <prvCheckTasksWaitingTermination+0x54>)
 80042da:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80042dc:	4b0b      	ldr	r3, [pc, #44]	; (800430c <prvCheckTasksWaitingTermination+0x58>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3b01      	subs	r3, #1
 80042e2:	4a0a      	ldr	r2, [pc, #40]	; (800430c <prvCheckTasksWaitingTermination+0x58>)
 80042e4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80042e6:	f000 ff45 	bl	8005174 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f810 	bl	8004310 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042f0:	4b06      	ldr	r3, [pc, #24]	; (800430c <prvCheckTasksWaitingTermination+0x58>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1e1      	bne.n	80042bc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80042f8:	bf00      	nop
 80042fa:	bf00      	nop
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	20000240 	.word	0x20000240
 8004308:	2000026c 	.word	0x2000026c
 800430c:	20000254 	.word	0x20000254

08004310 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431c:	4618      	mov	r0, r3
 800431e:	f001 f8fd 	bl	800551c <vPortFree>
                vPortFree( pxTCB );
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f001 f8fa 	bl	800551c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004328:	bf00      	nop
 800432a:	3708      	adds	r7, #8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004334:	4b0a      	ldr	r3, [pc, #40]	; (8004360 <prvResetNextTaskUnblockTime+0x30>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d104      	bne.n	8004348 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800433e:	4b09      	ldr	r3, [pc, #36]	; (8004364 <prvResetNextTaskUnblockTime+0x34>)
 8004340:	f04f 32ff 	mov.w	r2, #4294967295
 8004344:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004346:	e005      	b.n	8004354 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004348:	4b05      	ldr	r3, [pc, #20]	; (8004360 <prvResetNextTaskUnblockTime+0x30>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a04      	ldr	r2, [pc, #16]	; (8004364 <prvResetNextTaskUnblockTime+0x34>)
 8004352:	6013      	str	r3, [r2, #0]
}
 8004354:	bf00      	nop
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	20000224 	.word	0x20000224
 8004364:	2000028c 	.word	0x2000028c

08004368 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800436e:	4b0b      	ldr	r3, [pc, #44]	; (800439c <xTaskGetSchedulerState+0x34>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d102      	bne.n	800437c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004376:	2301      	movs	r3, #1
 8004378:	607b      	str	r3, [r7, #4]
 800437a:	e008      	b.n	800438e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800437c:	4b08      	ldr	r3, [pc, #32]	; (80043a0 <xTaskGetSchedulerState+0x38>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d102      	bne.n	800438a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004384:	2302      	movs	r3, #2
 8004386:	607b      	str	r3, [r7, #4]
 8004388:	e001      	b.n	800438e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800438a:	2300      	movs	r3, #0
 800438c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800438e:	687b      	ldr	r3, [r7, #4]
    }
 8004390:	4618      	mov	r0, r3
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	20000278 	.word	0x20000278
 80043a0:	20000294 	.word	0x20000294

080043a4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 80043b0:	2300      	movs	r3, #0
 80043b2:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d05e      	beq.n	8004478 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043be:	4b31      	ldr	r3, [pc, #196]	; (8004484 <xTaskPriorityInherit+0xe0>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d24e      	bcs.n	8004466 <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	db06      	blt.n	80043de <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043d0:	4b2c      	ldr	r3, [pc, #176]	; (8004484 <xTaskPriorityInherit+0xe0>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d6:	f1c3 0205 	rsb	r2, r3, #5
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	6959      	ldr	r1, [r3, #20]
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e6:	4613      	mov	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4413      	add	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	4a26      	ldr	r2, [pc, #152]	; (8004488 <xTaskPriorityInherit+0xe4>)
 80043f0:	4413      	add	r3, r2
 80043f2:	4299      	cmp	r1, r3
 80043f4:	d12f      	bne.n	8004456 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	3304      	adds	r3, #4
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fe fb30 	bl	8002a60 <uxListRemove>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10a      	bne.n	800441c <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440a:	2201      	movs	r2, #1
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	43da      	mvns	r2, r3
 8004412:	4b1e      	ldr	r3, [pc, #120]	; (800448c <xTaskPriorityInherit+0xe8>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4013      	ands	r3, r2
 8004418:	4a1c      	ldr	r2, [pc, #112]	; (800448c <xTaskPriorityInherit+0xe8>)
 800441a:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800441c:	4b19      	ldr	r3, [pc, #100]	; (8004484 <xTaskPriorityInherit+0xe0>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442a:	2201      	movs	r2, #1
 800442c:	409a      	lsls	r2, r3
 800442e:	4b17      	ldr	r3, [pc, #92]	; (800448c <xTaskPriorityInherit+0xe8>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4313      	orrs	r3, r2
 8004434:	4a15      	ldr	r2, [pc, #84]	; (800448c <xTaskPriorityInherit+0xe8>)
 8004436:	6013      	str	r3, [r2, #0]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800443c:	4613      	mov	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4413      	add	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4a10      	ldr	r2, [pc, #64]	; (8004488 <xTaskPriorityInherit+0xe4>)
 8004446:	441a      	add	r2, r3
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	3304      	adds	r3, #4
 800444c:	4619      	mov	r1, r3
 800444e:	4610      	mov	r0, r2
 8004450:	f7fe faa9 	bl	80029a6 <vListInsertEnd>
 8004454:	e004      	b.n	8004460 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004456:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <xTaskPriorityInherit+0xe0>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8004460:	2301      	movs	r3, #1
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	e008      	b.n	8004478 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800446a:	4b06      	ldr	r3, [pc, #24]	; (8004484 <xTaskPriorityInherit+0xe0>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004470:	429a      	cmp	r2, r3
 8004472:	d201      	bcs.n	8004478 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8004474:	2301      	movs	r3, #1
 8004476:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004478:	68fb      	ldr	r3, [r7, #12]
    }
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20000194 	.word	0x20000194
 8004488:	20000198 	.word	0x20000198
 800448c:	20000274 	.word	0x20000274

08004490 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800449c:	2300      	movs	r3, #0
 800449e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d063      	beq.n	800456e <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80044a6:	4b34      	ldr	r3, [pc, #208]	; (8004578 <xTaskPriorityDisinherit+0xe8>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d00a      	beq.n	80044c6 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80044b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b4:	f383 8811 	msr	BASEPRI, r3
 80044b8:	f3bf 8f6f 	isb	sy
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	60fb      	str	r3, [r7, #12]
    }
 80044c2:	bf00      	nop
 80044c4:	e7fe      	b.n	80044c4 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10a      	bne.n	80044e4 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80044ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	60bb      	str	r3, [r7, #8]
    }
 80044e0:	bf00      	nop
 80044e2:	e7fe      	b.n	80044e2 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e8:	1e5a      	subs	r2, r3, #1
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d039      	beq.n	800456e <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d135      	bne.n	800456e <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	3304      	adds	r3, #4
 8004506:	4618      	mov	r0, r3
 8004508:	f7fe faaa 	bl	8002a60 <uxListRemove>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10a      	bne.n	8004528 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004516:	2201      	movs	r2, #1
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	43da      	mvns	r2, r3
 800451e:	4b17      	ldr	r3, [pc, #92]	; (800457c <xTaskPriorityDisinherit+0xec>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4013      	ands	r3, r2
 8004524:	4a15      	ldr	r2, [pc, #84]	; (800457c <xTaskPriorityDisinherit+0xec>)
 8004526:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004534:	f1c3 0205 	rsb	r2, r3, #5
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004540:	2201      	movs	r2, #1
 8004542:	409a      	lsls	r2, r3
 8004544:	4b0d      	ldr	r3, [pc, #52]	; (800457c <xTaskPriorityDisinherit+0xec>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4313      	orrs	r3, r2
 800454a:	4a0c      	ldr	r2, [pc, #48]	; (800457c <xTaskPriorityDisinherit+0xec>)
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004552:	4613      	mov	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4a09      	ldr	r2, [pc, #36]	; (8004580 <xTaskPriorityDisinherit+0xf0>)
 800455c:	441a      	add	r2, r3
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	3304      	adds	r3, #4
 8004562:	4619      	mov	r1, r3
 8004564:	4610      	mov	r0, r2
 8004566:	f7fe fa1e 	bl	80029a6 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800456a:	2301      	movs	r3, #1
 800456c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800456e:	697b      	ldr	r3, [r7, #20]
    }
 8004570:	4618      	mov	r0, r3
 8004572:	3718      	adds	r7, #24
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	20000194 	.word	0x20000194
 800457c:	20000274 	.word	0x20000274
 8004580:	20000198 	.word	0x20000198

08004584 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8004584:	b580      	push	{r7, lr}
 8004586:	b088      	sub	sp, #32
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004592:	2301      	movs	r3, #1
 8004594:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d077      	beq.n	800468c <vTaskPriorityDisinheritAfterTimeout+0x108>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10a      	bne.n	80045ba <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 80045a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a8:	f383 8811 	msr	BASEPRI, r3
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	60fb      	str	r3, [r7, #12]
    }
 80045b6:	bf00      	nop
 80045b8:	e7fe      	b.n	80045b8 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045be:	683a      	ldr	r2, [r7, #0]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d902      	bls.n	80045ca <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	61fb      	str	r3, [r7, #28]
 80045c8:	e002      	b.n	80045d0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045ce:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d4:	69fa      	ldr	r2, [r7, #28]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d058      	beq.n	800468c <vTaskPriorityDisinheritAfterTimeout+0x108>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d153      	bne.n	800468c <vTaskPriorityDisinheritAfterTimeout+0x108>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80045e4:	4b2b      	ldr	r3, [pc, #172]	; (8004694 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d10a      	bne.n	8004604 <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 80045ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	60bb      	str	r3, [r7, #8]
    }
 8004600:	bf00      	nop
 8004602:	e7fe      	b.n	8004602 <vTaskPriorityDisinheritAfterTimeout+0x7e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004608:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	69fa      	ldr	r2, [r7, #28]
 800460e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	2b00      	cmp	r3, #0
 8004616:	db04      	blt.n	8004622 <vTaskPriorityDisinheritAfterTimeout+0x9e>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	f1c3 0205 	rsb	r2, r3, #5
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	6959      	ldr	r1, [r3, #20]
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	4613      	mov	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4413      	add	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4a19      	ldr	r2, [pc, #100]	; (8004698 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004632:	4413      	add	r3, r2
 8004634:	4299      	cmp	r1, r3
 8004636:	d129      	bne.n	800468c <vTaskPriorityDisinheritAfterTimeout+0x108>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	3304      	adds	r3, #4
 800463c:	4618      	mov	r0, r3
 800463e:	f7fe fa0f 	bl	8002a60 <uxListRemove>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10a      	bne.n	800465e <vTaskPriorityDisinheritAfterTimeout+0xda>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	2201      	movs	r2, #1
 800464e:	fa02 f303 	lsl.w	r3, r2, r3
 8004652:	43da      	mvns	r2, r3
 8004654:	4b11      	ldr	r3, [pc, #68]	; (800469c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4013      	ands	r3, r2
 800465a:	4a10      	ldr	r2, [pc, #64]	; (800469c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800465c:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004662:	2201      	movs	r2, #1
 8004664:	409a      	lsls	r2, r3
 8004666:	4b0d      	ldr	r3, [pc, #52]	; (800469c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4313      	orrs	r3, r2
 800466c:	4a0b      	ldr	r2, [pc, #44]	; (800469c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800466e:	6013      	str	r3, [r2, #0]
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004674:	4613      	mov	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4413      	add	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4a06      	ldr	r2, [pc, #24]	; (8004698 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800467e:	441a      	add	r2, r3
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	3304      	adds	r3, #4
 8004684:	4619      	mov	r1, r3
 8004686:	4610      	mov	r0, r2
 8004688:	f7fe f98d 	bl	80029a6 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800468c:	bf00      	nop
 800468e:	3720      	adds	r7, #32
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}
 8004694:	20000194 	.word	0x20000194
 8004698:	20000198 	.word	0x20000198
 800469c:	20000274 	.word	0x20000274

080046a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 80046a4:	4b07      	ldr	r3, [pc, #28]	; (80046c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d004      	beq.n	80046b6 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 80046ac:	4b05      	ldr	r3, [pc, #20]	; (80046c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046b2:	3201      	adds	r2, #1
 80046b4:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 80046b6:	4b03      	ldr	r3, [pc, #12]	; (80046c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80046b8:	681b      	ldr	r3, [r3, #0]
    }
 80046ba:	4618      	mov	r0, r3
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr
 80046c4:	20000194 	.word	0x20000194

080046c8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80046d2:	4b29      	ldr	r3, [pc, #164]	; (8004778 <prvAddCurrentTaskToDelayedList+0xb0>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046d8:	4b28      	ldr	r3, [pc, #160]	; (800477c <prvAddCurrentTaskToDelayedList+0xb4>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3304      	adds	r3, #4
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fe f9be 	bl	8002a60 <uxListRemove>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10b      	bne.n	8004702 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80046ea:	4b24      	ldr	r3, [pc, #144]	; (800477c <prvAddCurrentTaskToDelayedList+0xb4>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f0:	2201      	movs	r2, #1
 80046f2:	fa02 f303 	lsl.w	r3, r2, r3
 80046f6:	43da      	mvns	r2, r3
 80046f8:	4b21      	ldr	r3, [pc, #132]	; (8004780 <prvAddCurrentTaskToDelayedList+0xb8>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4013      	ands	r3, r2
 80046fe:	4a20      	ldr	r2, [pc, #128]	; (8004780 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004700:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004708:	d10a      	bne.n	8004720 <prvAddCurrentTaskToDelayedList+0x58>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d007      	beq.n	8004720 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004710:	4b1a      	ldr	r3, [pc, #104]	; (800477c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	3304      	adds	r3, #4
 8004716:	4619      	mov	r1, r3
 8004718:	481a      	ldr	r0, [pc, #104]	; (8004784 <prvAddCurrentTaskToDelayedList+0xbc>)
 800471a:	f7fe f944 	bl	80029a6 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800471e:	e026      	b.n	800476e <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4413      	add	r3, r2
 8004726:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004728:	4b14      	ldr	r3, [pc, #80]	; (800477c <prvAddCurrentTaskToDelayedList+0xb4>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	429a      	cmp	r2, r3
 8004736:	d209      	bcs.n	800474c <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004738:	4b13      	ldr	r3, [pc, #76]	; (8004788 <prvAddCurrentTaskToDelayedList+0xc0>)
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	4b0f      	ldr	r3, [pc, #60]	; (800477c <prvAddCurrentTaskToDelayedList+0xb4>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3304      	adds	r3, #4
 8004742:	4619      	mov	r1, r3
 8004744:	4610      	mov	r0, r2
 8004746:	f7fe f952 	bl	80029ee <vListInsert>
}
 800474a:	e010      	b.n	800476e <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800474c:	4b0f      	ldr	r3, [pc, #60]	; (800478c <prvAddCurrentTaskToDelayedList+0xc4>)
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	4b0a      	ldr	r3, [pc, #40]	; (800477c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	3304      	adds	r3, #4
 8004756:	4619      	mov	r1, r3
 8004758:	4610      	mov	r0, r2
 800475a:	f7fe f948 	bl	80029ee <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800475e:	4b0c      	ldr	r3, [pc, #48]	; (8004790 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	429a      	cmp	r2, r3
 8004766:	d202      	bcs.n	800476e <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8004768:	4a09      	ldr	r2, [pc, #36]	; (8004790 <prvAddCurrentTaskToDelayedList+0xc8>)
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	6013      	str	r3, [r2, #0]
}
 800476e:	bf00      	nop
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	20000270 	.word	0x20000270
 800477c:	20000194 	.word	0x20000194
 8004780:	20000274 	.word	0x20000274
 8004784:	20000258 	.word	0x20000258
 8004788:	20000228 	.word	0x20000228
 800478c:	20000224 	.word	0x20000224
 8004790:	2000028c 	.word	0x2000028c

08004794 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800479a:	2300      	movs	r3, #0
 800479c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800479e:	f000 fad5 	bl	8004d4c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80047a2:	4b11      	ldr	r3, [pc, #68]	; (80047e8 <xTimerCreateTimerTask+0x54>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00b      	beq.n	80047c2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80047aa:	4b10      	ldr	r3, [pc, #64]	; (80047ec <xTimerCreateTimerTask+0x58>)
 80047ac:	9301      	str	r3, [sp, #4]
 80047ae:	2302      	movs	r3, #2
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	2300      	movs	r3, #0
 80047b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80047b8:	490d      	ldr	r1, [pc, #52]	; (80047f0 <xTimerCreateTimerTask+0x5c>)
 80047ba:	480e      	ldr	r0, [pc, #56]	; (80047f4 <xTimerCreateTimerTask+0x60>)
 80047bc:	f7ff f84e 	bl	800385c <xTaskCreate>
 80047c0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10a      	bne.n	80047de <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80047c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047cc:	f383 8811 	msr	BASEPRI, r3
 80047d0:	f3bf 8f6f 	isb	sy
 80047d4:	f3bf 8f4f 	dsb	sy
 80047d8:	603b      	str	r3, [r7, #0]
    }
 80047da:	bf00      	nop
 80047dc:	e7fe      	b.n	80047dc <xTimerCreateTimerTask+0x48>
        return xReturn;
 80047de:	687b      	ldr	r3, [r7, #4]
    }
 80047e0:	4618      	mov	r0, r3
 80047e2:	3708      	adds	r7, #8
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	200002c8 	.word	0x200002c8
 80047ec:	200002cc 	.word	0x200002cc
 80047f0:	080060f0 	.word	0x080060f0
 80047f4:	0800492d 	.word	0x0800492d

080047f8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b08a      	sub	sp, #40	; 0x28
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
 8004804:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8004806:	2300      	movs	r3, #0
 8004808:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10a      	bne.n	8004826 <xTimerGenericCommand+0x2e>
        __asm volatile
 8004810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	623b      	str	r3, [r7, #32]
    }
 8004822:	bf00      	nop
 8004824:	e7fe      	b.n	8004824 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8004826:	4b1a      	ldr	r3, [pc, #104]	; (8004890 <xTimerGenericCommand+0x98>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d02a      	beq.n	8004884 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	2b05      	cmp	r3, #5
 800483e:	dc18      	bgt.n	8004872 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004840:	f7ff fd92 	bl	8004368 <xTaskGetSchedulerState>
 8004844:	4603      	mov	r3, r0
 8004846:	2b02      	cmp	r3, #2
 8004848:	d109      	bne.n	800485e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800484a:	4b11      	ldr	r3, [pc, #68]	; (8004890 <xTimerGenericCommand+0x98>)
 800484c:	6818      	ldr	r0, [r3, #0]
 800484e:	f107 0114 	add.w	r1, r7, #20
 8004852:	2300      	movs	r3, #0
 8004854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004856:	f7fe fa4b 	bl	8002cf0 <xQueueGenericSend>
 800485a:	6278      	str	r0, [r7, #36]	; 0x24
 800485c:	e012      	b.n	8004884 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800485e:	4b0c      	ldr	r3, [pc, #48]	; (8004890 <xTimerGenericCommand+0x98>)
 8004860:	6818      	ldr	r0, [r3, #0]
 8004862:	f107 0114 	add.w	r1, r7, #20
 8004866:	2300      	movs	r3, #0
 8004868:	2200      	movs	r2, #0
 800486a:	f7fe fa41 	bl	8002cf0 <xQueueGenericSend>
 800486e:	6278      	str	r0, [r7, #36]	; 0x24
 8004870:	e008      	b.n	8004884 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004872:	4b07      	ldr	r3, [pc, #28]	; (8004890 <xTimerGenericCommand+0x98>)
 8004874:	6818      	ldr	r0, [r3, #0]
 8004876:	f107 0114 	add.w	r1, r7, #20
 800487a:	2300      	movs	r3, #0
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	f7fe fb35 	bl	8002eec <xQueueGenericSendFromISR>
 8004882:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004886:	4618      	mov	r0, r3
 8004888:	3728      	adds	r7, #40	; 0x28
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	200002c8 	.word	0x200002c8

08004894 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004894:	b580      	push	{r7, lr}
 8004896:	b088      	sub	sp, #32
 8004898:	af02      	add	r7, sp, #8
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800489e:	4b22      	ldr	r3, [pc, #136]	; (8004928 <prvProcessExpiredTimer+0x94>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	3304      	adds	r3, #4
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7fe f8d7 	bl	8002a60 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d022      	beq.n	8004906 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	699a      	ldr	r2, [r3, #24]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	18d1      	adds	r1, r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	6978      	ldr	r0, [r7, #20]
 80048ce:	f000 f8d1 	bl	8004a74 <prvInsertTimerInActiveList>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d01f      	beq.n	8004918 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048d8:	2300      	movs	r3, #0
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	2300      	movs	r3, #0
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	2100      	movs	r1, #0
 80048e2:	6978      	ldr	r0, [r7, #20]
 80048e4:	f7ff ff88 	bl	80047f8 <xTimerGenericCommand>
 80048e8:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d113      	bne.n	8004918 <prvProcessExpiredTimer+0x84>
        __asm volatile
 80048f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	60fb      	str	r3, [r7, #12]
    }
 8004902:	bf00      	nop
 8004904:	e7fe      	b.n	8004904 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800490c:	f023 0301 	bic.w	r3, r3, #1
 8004910:	b2da      	uxtb	r2, r3
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	6978      	ldr	r0, [r7, #20]
 800491e:	4798      	blx	r3
    }
 8004920:	bf00      	nop
 8004922:	3718      	adds	r7, #24
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	200002c0 	.word	0x200002c0

0800492c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004934:	f107 0308 	add.w	r3, r7, #8
 8004938:	4618      	mov	r0, r3
 800493a:	f000 f857 	bl	80049ec <prvGetNextExpireTime>
 800493e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	4619      	mov	r1, r3
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f000 f803 	bl	8004950 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800494a:	f000 f8d5 	bl	8004af8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800494e:	e7f1      	b.n	8004934 <prvTimerTask+0x8>

08004950 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800495a:	f7ff f94b 	bl	8003bf4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800495e:	f107 0308 	add.w	r3, r7, #8
 8004962:	4618      	mov	r0, r3
 8004964:	f000 f866 	bl	8004a34 <prvSampleTimeNow>
 8004968:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d130      	bne.n	80049d2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10a      	bne.n	800498c <prvProcessTimerOrBlockTask+0x3c>
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	429a      	cmp	r2, r3
 800497c:	d806      	bhi.n	800498c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800497e:	f7ff f947 	bl	8003c10 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004982:	68f9      	ldr	r1, [r7, #12]
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f7ff ff85 	bl	8004894 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800498a:	e024      	b.n	80049d6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d008      	beq.n	80049a4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004992:	4b13      	ldr	r3, [pc, #76]	; (80049e0 <prvProcessTimerOrBlockTask+0x90>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d101      	bne.n	80049a0 <prvProcessTimerOrBlockTask+0x50>
 800499c:	2301      	movs	r3, #1
 800499e:	e000      	b.n	80049a2 <prvProcessTimerOrBlockTask+0x52>
 80049a0:	2300      	movs	r3, #0
 80049a2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80049a4:	4b0f      	ldr	r3, [pc, #60]	; (80049e4 <prvProcessTimerOrBlockTask+0x94>)
 80049a6:	6818      	ldr	r0, [r3, #0]
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	4619      	mov	r1, r3
 80049b2:	f7fe ff1f 	bl	80037f4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80049b6:	f7ff f92b 	bl	8003c10 <xTaskResumeAll>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10a      	bne.n	80049d6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80049c0:	4b09      	ldr	r3, [pc, #36]	; (80049e8 <prvProcessTimerOrBlockTask+0x98>)
 80049c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049c6:	601a      	str	r2, [r3, #0]
 80049c8:	f3bf 8f4f 	dsb	sy
 80049cc:	f3bf 8f6f 	isb	sy
    }
 80049d0:	e001      	b.n	80049d6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80049d2:	f7ff f91d 	bl	8003c10 <xTaskResumeAll>
    }
 80049d6:	bf00      	nop
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	200002c4 	.word	0x200002c4
 80049e4:	200002c8 	.word	0x200002c8
 80049e8:	e000ed04 	.word	0xe000ed04

080049ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80049f4:	4b0e      	ldr	r3, [pc, #56]	; (8004a30 <prvGetNextExpireTime+0x44>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <prvGetNextExpireTime+0x16>
 80049fe:	2201      	movs	r2, #1
 8004a00:	e000      	b.n	8004a04 <prvGetNextExpireTime+0x18>
 8004a02:	2200      	movs	r2, #0
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d105      	bne.n	8004a1c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a10:	4b07      	ldr	r3, [pc, #28]	; (8004a30 <prvGetNextExpireTime+0x44>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	60fb      	str	r3, [r7, #12]
 8004a1a:	e001      	b.n	8004a20 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004a20:	68fb      	ldr	r3, [r7, #12]
    }
 8004a22:	4618      	mov	r0, r3
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	200002c0 	.word	0x200002c0

08004a34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004a3c:	f7ff f984 	bl	8003d48 <xTaskGetTickCount>
 8004a40:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004a42:	4b0b      	ldr	r3, [pc, #44]	; (8004a70 <prvSampleTimeNow+0x3c>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d205      	bcs.n	8004a58 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004a4c:	f000 f91a 	bl	8004c84 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	e002      	b.n	8004a5e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004a5e:	4a04      	ldr	r2, [pc, #16]	; (8004a70 <prvSampleTimeNow+0x3c>)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004a64:	68fb      	ldr	r3, [r7, #12]
    }
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	200002d0 	.word	0x200002d0

08004a74 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
 8004a80:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004a82:	2300      	movs	r3, #0
 8004a84:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d812      	bhi.n	8004ac0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	1ad2      	subs	r2, r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d302      	bcc.n	8004aae <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	617b      	str	r3, [r7, #20]
 8004aac:	e01b      	b.n	8004ae6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004aae:	4b10      	ldr	r3, [pc, #64]	; (8004af0 <prvInsertTimerInActiveList+0x7c>)
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	3304      	adds	r3, #4
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	4610      	mov	r0, r2
 8004aba:	f7fd ff98 	bl	80029ee <vListInsert>
 8004abe:	e012      	b.n	8004ae6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d206      	bcs.n	8004ad6 <prvInsertTimerInActiveList+0x62>
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d302      	bcc.n	8004ad6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	e007      	b.n	8004ae6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ad6:	4b07      	ldr	r3, [pc, #28]	; (8004af4 <prvInsertTimerInActiveList+0x80>)
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	3304      	adds	r3, #4
 8004ade:	4619      	mov	r1, r3
 8004ae0:	4610      	mov	r0, r2
 8004ae2:	f7fd ff84 	bl	80029ee <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004ae6:	697b      	ldr	r3, [r7, #20]
    }
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3718      	adds	r7, #24
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	200002c4 	.word	0x200002c4
 8004af4:	200002c0 	.word	0x200002c0

08004af8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b08c      	sub	sp, #48	; 0x30
 8004afc:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004afe:	e0ae      	b.n	8004c5e <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f2c0 80aa 	blt.w	8004c5c <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d004      	beq.n	8004b1e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	3304      	adds	r3, #4
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7fd ffa1 	bl	8002a60 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b1e:	1d3b      	adds	r3, r7, #4
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7ff ff87 	bl	8004a34 <prvSampleTimeNow>
 8004b26:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	2b09      	cmp	r3, #9
 8004b2c:	f200 8097 	bhi.w	8004c5e <prvProcessReceivedCommands+0x166>
 8004b30:	a201      	add	r2, pc, #4	; (adr r2, 8004b38 <prvProcessReceivedCommands+0x40>)
 8004b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b36:	bf00      	nop
 8004b38:	08004b61 	.word	0x08004b61
 8004b3c:	08004b61 	.word	0x08004b61
 8004b40:	08004b61 	.word	0x08004b61
 8004b44:	08004bd5 	.word	0x08004bd5
 8004b48:	08004be9 	.word	0x08004be9
 8004b4c:	08004c33 	.word	0x08004c33
 8004b50:	08004b61 	.word	0x08004b61
 8004b54:	08004b61 	.word	0x08004b61
 8004b58:	08004bd5 	.word	0x08004bd5
 8004b5c:	08004be9 	.word	0x08004be9
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b66:	f043 0301 	orr.w	r3, r3, #1
 8004b6a:	b2da      	uxtb	r2, r3
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	18d1      	adds	r1, r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6a3a      	ldr	r2, [r7, #32]
 8004b7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b80:	f7ff ff78 	bl	8004a74 <prvInsertTimerInActiveList>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d069      	beq.n	8004c5e <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b90:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d05e      	beq.n	8004c5e <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	441a      	add	r2, r3
 8004ba8:	2300      	movs	r3, #0
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	2300      	movs	r3, #0
 8004bae:	2100      	movs	r1, #0
 8004bb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bb2:	f7ff fe21 	bl	80047f8 <xTimerGenericCommand>
 8004bb6:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d14f      	bne.n	8004c5e <prvProcessReceivedCommands+0x166>
        __asm volatile
 8004bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc2:	f383 8811 	msr	BASEPRI, r3
 8004bc6:	f3bf 8f6f 	isb	sy
 8004bca:	f3bf 8f4f 	dsb	sy
 8004bce:	61bb      	str	r3, [r7, #24]
    }
 8004bd0:	bf00      	nop
 8004bd2:	e7fe      	b.n	8004bd2 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bda:	f023 0301 	bic.w	r3, r3, #1
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004be6:	e03a      	b.n	8004c5e <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bee:	f043 0301 	orr.w	r3, r3, #1
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10a      	bne.n	8004c1e <prvProcessReceivedCommands+0x126>
        __asm volatile
 8004c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0c:	f383 8811 	msr	BASEPRI, r3
 8004c10:	f3bf 8f6f 	isb	sy
 8004c14:	f3bf 8f4f 	dsb	sy
 8004c18:	617b      	str	r3, [r7, #20]
    }
 8004c1a:	bf00      	nop
 8004c1c:	e7fe      	b.n	8004c1c <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c20:	699a      	ldr	r2, [r3, #24]
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	18d1      	adds	r1, r2, r3
 8004c26:	6a3b      	ldr	r3, [r7, #32]
 8004c28:	6a3a      	ldr	r2, [r7, #32]
 8004c2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c2c:	f7ff ff22 	bl	8004a74 <prvInsertTimerInActiveList>
                        break;
 8004c30:	e015      	b.n	8004c5e <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d103      	bne.n	8004c48 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8004c40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c42:	f000 fc6b 	bl	800551c <vPortFree>
 8004c46:	e00a      	b.n	8004c5e <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c4e:	f023 0301 	bic.w	r3, r3, #1
 8004c52:	b2da      	uxtb	r2, r3
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004c5a:	e000      	b.n	8004c5e <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004c5c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c5e:	4b08      	ldr	r3, [pc, #32]	; (8004c80 <prvProcessReceivedCommands+0x188>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f107 0108 	add.w	r1, r7, #8
 8004c66:	2200      	movs	r2, #0
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7fe fa85 	bl	8003178 <xQueueReceive>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f47f af45 	bne.w	8004b00 <prvProcessReceivedCommands+0x8>
        }
    }
 8004c76:	bf00      	nop
 8004c78:	bf00      	nop
 8004c7a:	3728      	adds	r7, #40	; 0x28
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	200002c8 	.word	0x200002c8

08004c84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b088      	sub	sp, #32
 8004c88:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c8a:	e048      	b.n	8004d1e <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c8c:	4b2d      	ldr	r3, [pc, #180]	; (8004d44 <prvSwitchTimerLists+0xc0>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c96:	4b2b      	ldr	r3, [pc, #172]	; (8004d44 <prvSwitchTimerLists+0xc0>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	3304      	adds	r3, #4
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7fd fedb 	bl	8002a60 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cb8:	f003 0304 	and.w	r3, r3, #4
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d02e      	beq.n	8004d1e <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d90e      	bls.n	8004cf0 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004cde:	4b19      	ldr	r3, [pc, #100]	; (8004d44 <prvSwitchTimerLists+0xc0>)
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	3304      	adds	r3, #4
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	4610      	mov	r0, r2
 8004cea:	f7fd fe80 	bl	80029ee <vListInsert>
 8004cee:	e016      	b.n	8004d1e <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	2100      	movs	r1, #0
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f7ff fd7c 	bl	80047f8 <xTimerGenericCommand>
 8004d00:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10a      	bne.n	8004d1e <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0c:	f383 8811 	msr	BASEPRI, r3
 8004d10:	f3bf 8f6f 	isb	sy
 8004d14:	f3bf 8f4f 	dsb	sy
 8004d18:	603b      	str	r3, [r7, #0]
    }
 8004d1a:	bf00      	nop
 8004d1c:	e7fe      	b.n	8004d1c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d1e:	4b09      	ldr	r3, [pc, #36]	; (8004d44 <prvSwitchTimerLists+0xc0>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1b1      	bne.n	8004c8c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004d28:	4b06      	ldr	r3, [pc, #24]	; (8004d44 <prvSwitchTimerLists+0xc0>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004d2e:	4b06      	ldr	r3, [pc, #24]	; (8004d48 <prvSwitchTimerLists+0xc4>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a04      	ldr	r2, [pc, #16]	; (8004d44 <prvSwitchTimerLists+0xc0>)
 8004d34:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004d36:	4a04      	ldr	r2, [pc, #16]	; (8004d48 <prvSwitchTimerLists+0xc4>)
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	6013      	str	r3, [r2, #0]
    }
 8004d3c:	bf00      	nop
 8004d3e:	3718      	adds	r7, #24
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	200002c0 	.word	0x200002c0
 8004d48:	200002c4 	.word	0x200002c4

08004d4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004d50:	f000 f9e0 	bl	8005114 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004d54:	4b12      	ldr	r3, [pc, #72]	; (8004da0 <prvCheckForValidListAndQueue+0x54>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d11d      	bne.n	8004d98 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004d5c:	4811      	ldr	r0, [pc, #68]	; (8004da4 <prvCheckForValidListAndQueue+0x58>)
 8004d5e:	f7fd fdf5 	bl	800294c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004d62:	4811      	ldr	r0, [pc, #68]	; (8004da8 <prvCheckForValidListAndQueue+0x5c>)
 8004d64:	f7fd fdf2 	bl	800294c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004d68:	4b10      	ldr	r3, [pc, #64]	; (8004dac <prvCheckForValidListAndQueue+0x60>)
 8004d6a:	4a0e      	ldr	r2, [pc, #56]	; (8004da4 <prvCheckForValidListAndQueue+0x58>)
 8004d6c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004d6e:	4b10      	ldr	r3, [pc, #64]	; (8004db0 <prvCheckForValidListAndQueue+0x64>)
 8004d70:	4a0d      	ldr	r2, [pc, #52]	; (8004da8 <prvCheckForValidListAndQueue+0x5c>)
 8004d72:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004d74:	2200      	movs	r2, #0
 8004d76:	210c      	movs	r1, #12
 8004d78:	200a      	movs	r0, #10
 8004d7a:	f7fd ff03 	bl	8002b84 <xQueueGenericCreate>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	4a07      	ldr	r2, [pc, #28]	; (8004da0 <prvCheckForValidListAndQueue+0x54>)
 8004d82:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004d84:	4b06      	ldr	r3, [pc, #24]	; (8004da0 <prvCheckForValidListAndQueue+0x54>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d005      	beq.n	8004d98 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004d8c:	4b04      	ldr	r3, [pc, #16]	; (8004da0 <prvCheckForValidListAndQueue+0x54>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4908      	ldr	r1, [pc, #32]	; (8004db4 <prvCheckForValidListAndQueue+0x68>)
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7fe fd04 	bl	80037a0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004d98:	f000 f9ec 	bl	8005174 <vPortExitCritical>
    }
 8004d9c:	bf00      	nop
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	200002c8 	.word	0x200002c8
 8004da4:	20000298 	.word	0x20000298
 8004da8:	200002ac 	.word	0x200002ac
 8004dac:	200002c0 	.word	0x200002c0
 8004db0:	200002c4 	.word	0x200002c4
 8004db4:	080060f8 	.word	0x080060f8

08004db8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	3b04      	subs	r3, #4
 8004dc8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004dd0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	3b04      	subs	r3, #4
 8004dd6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	f023 0201 	bic.w	r2, r3, #1
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	3b04      	subs	r3, #4
 8004de6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004de8:	4a0c      	ldr	r2, [pc, #48]	; (8004e1c <pxPortInitialiseStack+0x64>)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	3b14      	subs	r3, #20
 8004df2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	3b04      	subs	r3, #4
 8004dfe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f06f 0202 	mvn.w	r2, #2
 8004e06:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	3b20      	subs	r3, #32
 8004e0c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3714      	adds	r7, #20
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	08004e21 	.word	0x08004e21

08004e20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004e26:	2300      	movs	r3, #0
 8004e28:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004e2a:	4b12      	ldr	r3, [pc, #72]	; (8004e74 <prvTaskExitError+0x54>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e32:	d00a      	beq.n	8004e4a <prvTaskExitError+0x2a>
        __asm volatile
 8004e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e38:	f383 8811 	msr	BASEPRI, r3
 8004e3c:	f3bf 8f6f 	isb	sy
 8004e40:	f3bf 8f4f 	dsb	sy
 8004e44:	60fb      	str	r3, [r7, #12]
    }
 8004e46:	bf00      	nop
 8004e48:	e7fe      	b.n	8004e48 <prvTaskExitError+0x28>
        __asm volatile
 8004e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	60bb      	str	r3, [r7, #8]
    }
 8004e5c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004e5e:	bf00      	nop
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d0fc      	beq.n	8004e60 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004e66:	bf00      	nop
 8004e68:	bf00      	nop
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr
 8004e74:	20000010 	.word	0x20000010
	...

08004e80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004e80:	4b07      	ldr	r3, [pc, #28]	; (8004ea0 <pxCurrentTCBConst2>)
 8004e82:	6819      	ldr	r1, [r3, #0]
 8004e84:	6808      	ldr	r0, [r1, #0]
 8004e86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e8a:	f380 8809 	msr	PSP, r0
 8004e8e:	f3bf 8f6f 	isb	sy
 8004e92:	f04f 0000 	mov.w	r0, #0
 8004e96:	f380 8811 	msr	BASEPRI, r0
 8004e9a:	4770      	bx	lr
 8004e9c:	f3af 8000 	nop.w

08004ea0 <pxCurrentTCBConst2>:
 8004ea0:	20000194 	.word	0x20000194
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004ea4:	bf00      	nop
 8004ea6:	bf00      	nop

08004ea8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004ea8:	4808      	ldr	r0, [pc, #32]	; (8004ecc <prvPortStartFirstTask+0x24>)
 8004eaa:	6800      	ldr	r0, [r0, #0]
 8004eac:	6800      	ldr	r0, [r0, #0]
 8004eae:	f380 8808 	msr	MSP, r0
 8004eb2:	f04f 0000 	mov.w	r0, #0
 8004eb6:	f380 8814 	msr	CONTROL, r0
 8004eba:	b662      	cpsie	i
 8004ebc:	b661      	cpsie	f
 8004ebe:	f3bf 8f4f 	dsb	sy
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	df00      	svc	0
 8004ec8:	bf00      	nop
 8004eca:	0000      	.short	0x0000
 8004ecc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004ed0:	bf00      	nop
 8004ed2:	bf00      	nop

08004ed4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004eda:	4b46      	ldr	r3, [pc, #280]	; (8004ff4 <xPortStartScheduler+0x120>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a46      	ldr	r2, [pc, #280]	; (8004ff8 <xPortStartScheduler+0x124>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d10a      	bne.n	8004efa <xPortStartScheduler+0x26>
        __asm volatile
 8004ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee8:	f383 8811 	msr	BASEPRI, r3
 8004eec:	f3bf 8f6f 	isb	sy
 8004ef0:	f3bf 8f4f 	dsb	sy
 8004ef4:	613b      	str	r3, [r7, #16]
    }
 8004ef6:	bf00      	nop
 8004ef8:	e7fe      	b.n	8004ef8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004efa:	4b3e      	ldr	r3, [pc, #248]	; (8004ff4 <xPortStartScheduler+0x120>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a3f      	ldr	r2, [pc, #252]	; (8004ffc <xPortStartScheduler+0x128>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d10a      	bne.n	8004f1a <xPortStartScheduler+0x46>
        __asm volatile
 8004f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f08:	f383 8811 	msr	BASEPRI, r3
 8004f0c:	f3bf 8f6f 	isb	sy
 8004f10:	f3bf 8f4f 	dsb	sy
 8004f14:	60fb      	str	r3, [r7, #12]
    }
 8004f16:	bf00      	nop
 8004f18:	e7fe      	b.n	8004f18 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f1a:	4b39      	ldr	r3, [pc, #228]	; (8005000 <xPortStartScheduler+0x12c>)
 8004f1c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	22ff      	movs	r2, #255	; 0xff
 8004f2a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f34:	78fb      	ldrb	r3, [r7, #3]
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	4b31      	ldr	r3, [pc, #196]	; (8005004 <xPortStartScheduler+0x130>)
 8004f40:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f42:	4b31      	ldr	r3, [pc, #196]	; (8005008 <xPortStartScheduler+0x134>)
 8004f44:	2207      	movs	r2, #7
 8004f46:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f48:	e009      	b.n	8004f5e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004f4a:	4b2f      	ldr	r3, [pc, #188]	; (8005008 <xPortStartScheduler+0x134>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	4a2d      	ldr	r2, [pc, #180]	; (8005008 <xPortStartScheduler+0x134>)
 8004f52:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f54:	78fb      	ldrb	r3, [r7, #3]
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f5e:	78fb      	ldrb	r3, [r7, #3]
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f66:	2b80      	cmp	r3, #128	; 0x80
 8004f68:	d0ef      	beq.n	8004f4a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f6a:	4b27      	ldr	r3, [pc, #156]	; (8005008 <xPortStartScheduler+0x134>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f1c3 0307 	rsb	r3, r3, #7
 8004f72:	2b04      	cmp	r3, #4
 8004f74:	d00a      	beq.n	8004f8c <xPortStartScheduler+0xb8>
        __asm volatile
 8004f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7a:	f383 8811 	msr	BASEPRI, r3
 8004f7e:	f3bf 8f6f 	isb	sy
 8004f82:	f3bf 8f4f 	dsb	sy
 8004f86:	60bb      	str	r3, [r7, #8]
    }
 8004f88:	bf00      	nop
 8004f8a:	e7fe      	b.n	8004f8a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004f8c:	4b1e      	ldr	r3, [pc, #120]	; (8005008 <xPortStartScheduler+0x134>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	021b      	lsls	r3, r3, #8
 8004f92:	4a1d      	ldr	r2, [pc, #116]	; (8005008 <xPortStartScheduler+0x134>)
 8004f94:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f96:	4b1c      	ldr	r3, [pc, #112]	; (8005008 <xPortStartScheduler+0x134>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f9e:	4a1a      	ldr	r2, [pc, #104]	; (8005008 <xPortStartScheduler+0x134>)
 8004fa0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004faa:	4b18      	ldr	r3, [pc, #96]	; (800500c <xPortStartScheduler+0x138>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a17      	ldr	r2, [pc, #92]	; (800500c <xPortStartScheduler+0x138>)
 8004fb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fb4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004fb6:	4b15      	ldr	r3, [pc, #84]	; (800500c <xPortStartScheduler+0x138>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a14      	ldr	r2, [pc, #80]	; (800500c <xPortStartScheduler+0x138>)
 8004fbc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004fc0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004fc2:	f000 f95b 	bl	800527c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004fc6:	4b12      	ldr	r3, [pc, #72]	; (8005010 <xPortStartScheduler+0x13c>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004fcc:	f000 f97a 	bl	80052c4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004fd0:	4b10      	ldr	r3, [pc, #64]	; (8005014 <xPortStartScheduler+0x140>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a0f      	ldr	r2, [pc, #60]	; (8005014 <xPortStartScheduler+0x140>)
 8004fd6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004fda:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004fdc:	f7ff ff64 	bl	8004ea8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004fe0:	f7fe ff7a 	bl	8003ed8 <vTaskSwitchContext>
    prvTaskExitError();
 8004fe4:	f7ff ff1c 	bl	8004e20 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3718      	adds	r7, #24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	e000ed00 	.word	0xe000ed00
 8004ff8:	410fc271 	.word	0x410fc271
 8004ffc:	410fc270 	.word	0x410fc270
 8005000:	e000e400 	.word	0xe000e400
 8005004:	200002d4 	.word	0x200002d4
 8005008:	200002d8 	.word	0x200002d8
 800500c:	e000ed20 	.word	0xe000ed20
 8005010:	20000010 	.word	0x20000010
 8005014:	e000ef34 	.word	0xe000ef34

08005018 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8005018:	b480      	push	{r7}
 800501a:	b087      	sub	sp, #28
 800501c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800501e:	4b37      	ldr	r3, [pc, #220]	; (80050fc <vInitPrioGroupValue+0xe4>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a37      	ldr	r2, [pc, #220]	; (8005100 <vInitPrioGroupValue+0xe8>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d10a      	bne.n	800503e <vInitPrioGroupValue+0x26>
        __asm volatile
 8005028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502c:	f383 8811 	msr	BASEPRI, r3
 8005030:	f3bf 8f6f 	isb	sy
 8005034:	f3bf 8f4f 	dsb	sy
 8005038:	613b      	str	r3, [r7, #16]
    }
 800503a:	bf00      	nop
 800503c:	e7fe      	b.n	800503c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800503e:	4b2f      	ldr	r3, [pc, #188]	; (80050fc <vInitPrioGroupValue+0xe4>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a30      	ldr	r2, [pc, #192]	; (8005104 <vInitPrioGroupValue+0xec>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d10a      	bne.n	800505e <vInitPrioGroupValue+0x46>
        __asm volatile
 8005048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504c:	f383 8811 	msr	BASEPRI, r3
 8005050:	f3bf 8f6f 	isb	sy
 8005054:	f3bf 8f4f 	dsb	sy
 8005058:	60fb      	str	r3, [r7, #12]
    }
 800505a:	bf00      	nop
 800505c:	e7fe      	b.n	800505c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800505e:	4b2a      	ldr	r3, [pc, #168]	; (8005108 <vInitPrioGroupValue+0xf0>)
 8005060:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	b2db      	uxtb	r3, r3
 8005068:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	22ff      	movs	r2, #255	; 0xff
 800506e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	b2db      	uxtb	r3, r3
 8005076:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005078:	78fb      	ldrb	r3, [r7, #3]
 800507a:	b2db      	uxtb	r3, r3
 800507c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005080:	b2da      	uxtb	r2, r3
 8005082:	4b22      	ldr	r3, [pc, #136]	; (800510c <vInitPrioGroupValue+0xf4>)
 8005084:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005086:	4b22      	ldr	r3, [pc, #136]	; (8005110 <vInitPrioGroupValue+0xf8>)
 8005088:	2207      	movs	r2, #7
 800508a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800508c:	e009      	b.n	80050a2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800508e:	4b20      	ldr	r3, [pc, #128]	; (8005110 <vInitPrioGroupValue+0xf8>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	3b01      	subs	r3, #1
 8005094:	4a1e      	ldr	r2, [pc, #120]	; (8005110 <vInitPrioGroupValue+0xf8>)
 8005096:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005098:	78fb      	ldrb	r3, [r7, #3]
 800509a:	b2db      	uxtb	r3, r3
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050a2:	78fb      	ldrb	r3, [r7, #3]
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050aa:	2b80      	cmp	r3, #128	; 0x80
 80050ac:	d0ef      	beq.n	800508e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80050ae:	4b18      	ldr	r3, [pc, #96]	; (8005110 <vInitPrioGroupValue+0xf8>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f1c3 0307 	rsb	r3, r3, #7
 80050b6:	2b04      	cmp	r3, #4
 80050b8:	d00a      	beq.n	80050d0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80050ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050be:	f383 8811 	msr	BASEPRI, r3
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	f3bf 8f4f 	dsb	sy
 80050ca:	60bb      	str	r3, [r7, #8]
    }
 80050cc:	bf00      	nop
 80050ce:	e7fe      	b.n	80050ce <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80050d0:	4b0f      	ldr	r3, [pc, #60]	; (8005110 <vInitPrioGroupValue+0xf8>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	021b      	lsls	r3, r3, #8
 80050d6:	4a0e      	ldr	r2, [pc, #56]	; (8005110 <vInitPrioGroupValue+0xf8>)
 80050d8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80050da:	4b0d      	ldr	r3, [pc, #52]	; (8005110 <vInitPrioGroupValue+0xf8>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050e2:	4a0b      	ldr	r2, [pc, #44]	; (8005110 <vInitPrioGroupValue+0xf8>)
 80050e4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	b2da      	uxtb	r2, r3
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80050ee:	bf00      	nop
 80050f0:	371c      	adds	r7, #28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	e000ed00 	.word	0xe000ed00
 8005100:	410fc271 	.word	0x410fc271
 8005104:	410fc270 	.word	0x410fc270
 8005108:	e000e400 	.word	0xe000e400
 800510c:	200002d4 	.word	0x200002d4
 8005110:	200002d8 	.word	0x200002d8

08005114 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
        __asm volatile
 800511a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511e:	f383 8811 	msr	BASEPRI, r3
 8005122:	f3bf 8f6f 	isb	sy
 8005126:	f3bf 8f4f 	dsb	sy
 800512a:	607b      	str	r3, [r7, #4]
    }
 800512c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800512e:	4b0f      	ldr	r3, [pc, #60]	; (800516c <vPortEnterCritical+0x58>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	3301      	adds	r3, #1
 8005134:	4a0d      	ldr	r2, [pc, #52]	; (800516c <vPortEnterCritical+0x58>)
 8005136:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005138:	4b0c      	ldr	r3, [pc, #48]	; (800516c <vPortEnterCritical+0x58>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d10f      	bne.n	8005160 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005140:	4b0b      	ldr	r3, [pc, #44]	; (8005170 <vPortEnterCritical+0x5c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00a      	beq.n	8005160 <vPortEnterCritical+0x4c>
        __asm volatile
 800514a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514e:	f383 8811 	msr	BASEPRI, r3
 8005152:	f3bf 8f6f 	isb	sy
 8005156:	f3bf 8f4f 	dsb	sy
 800515a:	603b      	str	r3, [r7, #0]
    }
 800515c:	bf00      	nop
 800515e:	e7fe      	b.n	800515e <vPortEnterCritical+0x4a>
    }
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	20000010 	.word	0x20000010
 8005170:	e000ed04 	.word	0xe000ed04

08005174 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800517a:	4b12      	ldr	r3, [pc, #72]	; (80051c4 <vPortExitCritical+0x50>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10a      	bne.n	8005198 <vPortExitCritical+0x24>
        __asm volatile
 8005182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005186:	f383 8811 	msr	BASEPRI, r3
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	607b      	str	r3, [r7, #4]
    }
 8005194:	bf00      	nop
 8005196:	e7fe      	b.n	8005196 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005198:	4b0a      	ldr	r3, [pc, #40]	; (80051c4 <vPortExitCritical+0x50>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3b01      	subs	r3, #1
 800519e:	4a09      	ldr	r2, [pc, #36]	; (80051c4 <vPortExitCritical+0x50>)
 80051a0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80051a2:	4b08      	ldr	r3, [pc, #32]	; (80051c4 <vPortExitCritical+0x50>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d105      	bne.n	80051b6 <vPortExitCritical+0x42>
 80051aa:	2300      	movs	r3, #0
 80051ac:	603b      	str	r3, [r7, #0]
        __asm volatile
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	f383 8811 	msr	BASEPRI, r3
    }
 80051b4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80051b6:	bf00      	nop
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	20000010 	.word	0x20000010
	...

080051d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80051d0:	f3ef 8009 	mrs	r0, PSP
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	4b15      	ldr	r3, [pc, #84]	; (8005230 <pxCurrentTCBConst>)
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	f01e 0f10 	tst.w	lr, #16
 80051e0:	bf08      	it	eq
 80051e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80051e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ea:	6010      	str	r0, [r2, #0]
 80051ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80051f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80051f4:	f380 8811 	msr	BASEPRI, r0
 80051f8:	f3bf 8f4f 	dsb	sy
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f7fe fe6a 	bl	8003ed8 <vTaskSwitchContext>
 8005204:	f04f 0000 	mov.w	r0, #0
 8005208:	f380 8811 	msr	BASEPRI, r0
 800520c:	bc09      	pop	{r0, r3}
 800520e:	6819      	ldr	r1, [r3, #0]
 8005210:	6808      	ldr	r0, [r1, #0]
 8005212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005216:	f01e 0f10 	tst.w	lr, #16
 800521a:	bf08      	it	eq
 800521c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005220:	f380 8809 	msr	PSP, r0
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	f3af 8000 	nop.w

08005230 <pxCurrentTCBConst>:
 8005230:	20000194 	.word	0x20000194
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005234:	bf00      	nop
 8005236:	bf00      	nop

08005238 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
        __asm volatile
 800523e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005242:	f383 8811 	msr	BASEPRI, r3
 8005246:	f3bf 8f6f 	isb	sy
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	607b      	str	r3, [r7, #4]
    }
 8005250:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005252:	f7fe fd89 	bl	8003d68 <xTaskIncrementTick>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d003      	beq.n	8005264 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800525c:	4b06      	ldr	r3, [pc, #24]	; (8005278 <SysTick_Handler+0x40>)
 800525e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	2300      	movs	r3, #0
 8005266:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	f383 8811 	msr	BASEPRI, r3
    }
 800526e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8005270:	bf00      	nop
 8005272:	3708      	adds	r7, #8
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	e000ed04 	.word	0xe000ed04

0800527c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800527c:	b480      	push	{r7}
 800527e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005280:	4b0b      	ldr	r3, [pc, #44]	; (80052b0 <vPortSetupTimerInterrupt+0x34>)
 8005282:	2200      	movs	r2, #0
 8005284:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005286:	4b0b      	ldr	r3, [pc, #44]	; (80052b4 <vPortSetupTimerInterrupt+0x38>)
 8005288:	2200      	movs	r2, #0
 800528a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800528c:	4b0a      	ldr	r3, [pc, #40]	; (80052b8 <vPortSetupTimerInterrupt+0x3c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a0a      	ldr	r2, [pc, #40]	; (80052bc <vPortSetupTimerInterrupt+0x40>)
 8005292:	fba2 2303 	umull	r2, r3, r2, r3
 8005296:	099b      	lsrs	r3, r3, #6
 8005298:	4a09      	ldr	r2, [pc, #36]	; (80052c0 <vPortSetupTimerInterrupt+0x44>)
 800529a:	3b01      	subs	r3, #1
 800529c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800529e:	4b04      	ldr	r3, [pc, #16]	; (80052b0 <vPortSetupTimerInterrupt+0x34>)
 80052a0:	2207      	movs	r2, #7
 80052a2:	601a      	str	r2, [r3, #0]
}
 80052a4:	bf00      	nop
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	e000e010 	.word	0xe000e010
 80052b4:	e000e018 	.word	0xe000e018
 80052b8:	20000000 	.word	0x20000000
 80052bc:	10624dd3 	.word	0x10624dd3
 80052c0:	e000e014 	.word	0xe000e014

080052c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80052c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80052d4 <vPortEnableVFP+0x10>
 80052c8:	6801      	ldr	r1, [r0, #0]
 80052ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80052ce:	6001      	str	r1, [r0, #0]
 80052d0:	4770      	bx	lr
 80052d2:	0000      	.short	0x0000
 80052d4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80052d8:	bf00      	nop
 80052da:	bf00      	nop

080052dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80052e2:	f3ef 8305 	mrs	r3, IPSR
 80052e6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2b0f      	cmp	r3, #15
 80052ec:	d914      	bls.n	8005318 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80052ee:	4a17      	ldr	r2, [pc, #92]	; (800534c <vPortValidateInterruptPriority+0x70>)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	4413      	add	r3, r2
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80052f8:	4b15      	ldr	r3, [pc, #84]	; (8005350 <vPortValidateInterruptPriority+0x74>)
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	7afa      	ldrb	r2, [r7, #11]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d20a      	bcs.n	8005318 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8005302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005306:	f383 8811 	msr	BASEPRI, r3
 800530a:	f3bf 8f6f 	isb	sy
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	607b      	str	r3, [r7, #4]
    }
 8005314:	bf00      	nop
 8005316:	e7fe      	b.n	8005316 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005318:	4b0e      	ldr	r3, [pc, #56]	; (8005354 <vPortValidateInterruptPriority+0x78>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005320:	4b0d      	ldr	r3, [pc, #52]	; (8005358 <vPortValidateInterruptPriority+0x7c>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	429a      	cmp	r2, r3
 8005326:	d90a      	bls.n	800533e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532c:	f383 8811 	msr	BASEPRI, r3
 8005330:	f3bf 8f6f 	isb	sy
 8005334:	f3bf 8f4f 	dsb	sy
 8005338:	603b      	str	r3, [r7, #0]
    }
 800533a:	bf00      	nop
 800533c:	e7fe      	b.n	800533c <vPortValidateInterruptPriority+0x60>
    }
 800533e:	bf00      	nop
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	e000e3f0 	.word	0xe000e3f0
 8005350:	200002d4 	.word	0x200002d4
 8005354:	e000ed0c 	.word	0xe000ed0c
 8005358:	200002d8 	.word	0x200002d8

0800535c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b08a      	sub	sp, #40	; 0x28
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8005364:	2300      	movs	r3, #0
 8005366:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8005368:	f7fe fc44 	bl	8003bf4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800536c:	4b65      	ldr	r3, [pc, #404]	; (8005504 <pvPortMalloc+0x1a8>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005374:	f000 f934 	bl	80055e0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005378:	4b63      	ldr	r3, [pc, #396]	; (8005508 <pvPortMalloc+0x1ac>)
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4013      	ands	r3, r2
 8005380:	2b00      	cmp	r3, #0
 8005382:	f040 80a7 	bne.w	80054d4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d02d      	beq.n	80053e8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800538c:	2208      	movs	r2, #8
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	429a      	cmp	r2, r3
 8005396:	d227      	bcs.n	80053e8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8005398:	2208      	movs	r2, #8
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4413      	add	r3, r2
 800539e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f003 0307 	and.w	r3, r3, #7
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d021      	beq.n	80053ee <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f023 0307 	bic.w	r3, r3, #7
 80053b0:	3308      	adds	r3, #8
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d214      	bcs.n	80053e2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f023 0307 	bic.w	r3, r3, #7
 80053be:	3308      	adds	r3, #8
 80053c0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f003 0307 	and.w	r3, r3, #7
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d010      	beq.n	80053ee <pvPortMalloc+0x92>
        __asm volatile
 80053cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d0:	f383 8811 	msr	BASEPRI, r3
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	617b      	str	r3, [r7, #20]
    }
 80053de:	bf00      	nop
 80053e0:	e7fe      	b.n	80053e0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80053e2:	2300      	movs	r3, #0
 80053e4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80053e6:	e002      	b.n	80053ee <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80053e8:	2300      	movs	r3, #0
 80053ea:	607b      	str	r3, [r7, #4]
 80053ec:	e000      	b.n	80053f0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80053ee:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d06e      	beq.n	80054d4 <pvPortMalloc+0x178>
 80053f6:	4b45      	ldr	r3, [pc, #276]	; (800550c <pvPortMalloc+0x1b0>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d869      	bhi.n	80054d4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005400:	4b43      	ldr	r3, [pc, #268]	; (8005510 <pvPortMalloc+0x1b4>)
 8005402:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005404:	4b42      	ldr	r3, [pc, #264]	; (8005510 <pvPortMalloc+0x1b4>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800540a:	e004      	b.n	8005416 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	429a      	cmp	r2, r3
 800541e:	d903      	bls.n	8005428 <pvPortMalloc+0xcc>
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1f1      	bne.n	800540c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005428:	4b36      	ldr	r3, [pc, #216]	; (8005504 <pvPortMalloc+0x1a8>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800542e:	429a      	cmp	r2, r3
 8005430:	d050      	beq.n	80054d4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005432:	6a3b      	ldr	r3, [r7, #32]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2208      	movs	r2, #8
 8005438:	4413      	add	r3, r2
 800543a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	6a3b      	ldr	r3, [r7, #32]
 8005442:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	1ad2      	subs	r2, r2, r3
 800544c:	2308      	movs	r3, #8
 800544e:	005b      	lsls	r3, r3, #1
 8005450:	429a      	cmp	r2, r3
 8005452:	d91f      	bls.n	8005494 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4413      	add	r3, r2
 800545a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	f003 0307 	and.w	r3, r3, #7
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00a      	beq.n	800547c <pvPortMalloc+0x120>
        __asm volatile
 8005466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546a:	f383 8811 	msr	BASEPRI, r3
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	f3bf 8f4f 	dsb	sy
 8005476:	613b      	str	r3, [r7, #16]
    }
 8005478:	bf00      	nop
 800547a:	e7fe      	b.n	800547a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800547c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	1ad2      	subs	r2, r2, r3
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800548e:	69b8      	ldr	r0, [r7, #24]
 8005490:	f000 f908 	bl	80056a4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005494:	4b1d      	ldr	r3, [pc, #116]	; (800550c <pvPortMalloc+0x1b0>)
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	4a1b      	ldr	r2, [pc, #108]	; (800550c <pvPortMalloc+0x1b0>)
 80054a0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80054a2:	4b1a      	ldr	r3, [pc, #104]	; (800550c <pvPortMalloc+0x1b0>)
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	4b1b      	ldr	r3, [pc, #108]	; (8005514 <pvPortMalloc+0x1b8>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d203      	bcs.n	80054b6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80054ae:	4b17      	ldr	r3, [pc, #92]	; (800550c <pvPortMalloc+0x1b0>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a18      	ldr	r2, [pc, #96]	; (8005514 <pvPortMalloc+0x1b8>)
 80054b4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	4b13      	ldr	r3, [pc, #76]	; (8005508 <pvPortMalloc+0x1ac>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	431a      	orrs	r2, r3
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	2200      	movs	r2, #0
 80054c8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80054ca:	4b13      	ldr	r3, [pc, #76]	; (8005518 <pvPortMalloc+0x1bc>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	3301      	adds	r3, #1
 80054d0:	4a11      	ldr	r2, [pc, #68]	; (8005518 <pvPortMalloc+0x1bc>)
 80054d2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80054d4:	f7fe fb9c 	bl	8003c10 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	f003 0307 	and.w	r3, r3, #7
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00a      	beq.n	80054f8 <pvPortMalloc+0x19c>
        __asm volatile
 80054e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e6:	f383 8811 	msr	BASEPRI, r3
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	60fb      	str	r3, [r7, #12]
    }
 80054f4:	bf00      	nop
 80054f6:	e7fe      	b.n	80054f6 <pvPortMalloc+0x19a>
    return pvReturn;
 80054f8:	69fb      	ldr	r3, [r7, #28]
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3728      	adds	r7, #40	; 0x28
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	20012ee4 	.word	0x20012ee4
 8005508:	20012ef8 	.word	0x20012ef8
 800550c:	20012ee8 	.word	0x20012ee8
 8005510:	20012edc 	.word	0x20012edc
 8005514:	20012eec 	.word	0x20012eec
 8005518:	20012ef0 	.word	0x20012ef0

0800551c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d04d      	beq.n	80055ca <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800552e:	2308      	movs	r3, #8
 8005530:	425b      	negs	r3, r3
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	4413      	add	r3, r2
 8005536:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	4b24      	ldr	r3, [pc, #144]	; (80055d4 <vPortFree+0xb8>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4013      	ands	r3, r2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10a      	bne.n	8005560 <vPortFree+0x44>
        __asm volatile
 800554a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554e:	f383 8811 	msr	BASEPRI, r3
 8005552:	f3bf 8f6f 	isb	sy
 8005556:	f3bf 8f4f 	dsb	sy
 800555a:	60fb      	str	r3, [r7, #12]
    }
 800555c:	bf00      	nop
 800555e:	e7fe      	b.n	800555e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00a      	beq.n	800557e <vPortFree+0x62>
        __asm volatile
 8005568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556c:	f383 8811 	msr	BASEPRI, r3
 8005570:	f3bf 8f6f 	isb	sy
 8005574:	f3bf 8f4f 	dsb	sy
 8005578:	60bb      	str	r3, [r7, #8]
    }
 800557a:	bf00      	nop
 800557c:	e7fe      	b.n	800557c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	685a      	ldr	r2, [r3, #4]
 8005582:	4b14      	ldr	r3, [pc, #80]	; (80055d4 <vPortFree+0xb8>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4013      	ands	r3, r2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d01e      	beq.n	80055ca <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d11a      	bne.n	80055ca <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	4b0e      	ldr	r3, [pc, #56]	; (80055d4 <vPortFree+0xb8>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	43db      	mvns	r3, r3
 800559e:	401a      	ands	r2, r3
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80055a4:	f7fe fb26 	bl	8003bf4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	4b0a      	ldr	r3, [pc, #40]	; (80055d8 <vPortFree+0xbc>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4413      	add	r3, r2
 80055b2:	4a09      	ldr	r2, [pc, #36]	; (80055d8 <vPortFree+0xbc>)
 80055b4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80055b6:	6938      	ldr	r0, [r7, #16]
 80055b8:	f000 f874 	bl	80056a4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80055bc:	4b07      	ldr	r3, [pc, #28]	; (80055dc <vPortFree+0xc0>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	3301      	adds	r3, #1
 80055c2:	4a06      	ldr	r2, [pc, #24]	; (80055dc <vPortFree+0xc0>)
 80055c4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80055c6:	f7fe fb23 	bl	8003c10 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80055ca:	bf00      	nop
 80055cc:	3718      	adds	r7, #24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	20012ef8 	.word	0x20012ef8
 80055d8:	20012ee8 	.word	0x20012ee8
 80055dc:	20012ef4 	.word	0x20012ef4

080055e0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80055e6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80055ea:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80055ec:	4b27      	ldr	r3, [pc, #156]	; (800568c <prvHeapInit+0xac>)
 80055ee:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f003 0307 	and.w	r3, r3, #7
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00c      	beq.n	8005614 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	3307      	adds	r3, #7
 80055fe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f023 0307 	bic.w	r3, r3, #7
 8005606:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	4a1f      	ldr	r2, [pc, #124]	; (800568c <prvHeapInit+0xac>)
 8005610:	4413      	add	r3, r2
 8005612:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005618:	4a1d      	ldr	r2, [pc, #116]	; (8005690 <prvHeapInit+0xb0>)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800561e:	4b1c      	ldr	r3, [pc, #112]	; (8005690 <prvHeapInit+0xb0>)
 8005620:	2200      	movs	r2, #0
 8005622:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	4413      	add	r3, r2
 800562a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800562c:	2208      	movs	r2, #8
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	1a9b      	subs	r3, r3, r2
 8005632:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f023 0307 	bic.w	r3, r3, #7
 800563a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4a15      	ldr	r2, [pc, #84]	; (8005694 <prvHeapInit+0xb4>)
 8005640:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005642:	4b14      	ldr	r3, [pc, #80]	; (8005694 <prvHeapInit+0xb4>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2200      	movs	r2, #0
 8005648:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800564a:	4b12      	ldr	r3, [pc, #72]	; (8005694 <prvHeapInit+0xb4>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2200      	movs	r2, #0
 8005650:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	1ad2      	subs	r2, r2, r3
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005660:	4b0c      	ldr	r3, [pc, #48]	; (8005694 <prvHeapInit+0xb4>)
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	4a0a      	ldr	r2, [pc, #40]	; (8005698 <prvHeapInit+0xb8>)
 800566e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	4a09      	ldr	r2, [pc, #36]	; (800569c <prvHeapInit+0xbc>)
 8005676:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005678:	4b09      	ldr	r3, [pc, #36]	; (80056a0 <prvHeapInit+0xc0>)
 800567a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800567e:	601a      	str	r2, [r3, #0]
}
 8005680:	bf00      	nop
 8005682:	3714      	adds	r7, #20
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	200002dc 	.word	0x200002dc
 8005690:	20012edc 	.word	0x20012edc
 8005694:	20012ee4 	.word	0x20012ee4
 8005698:	20012eec 	.word	0x20012eec
 800569c:	20012ee8 	.word	0x20012ee8
 80056a0:	20012ef8 	.word	0x20012ef8

080056a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80056ac:	4b28      	ldr	r3, [pc, #160]	; (8005750 <prvInsertBlockIntoFreeList+0xac>)
 80056ae:	60fb      	str	r3, [r7, #12]
 80056b0:	e002      	b.n	80056b8 <prvInsertBlockIntoFreeList+0x14>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	60fb      	str	r3, [r7, #12]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d8f7      	bhi.n	80056b2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	4413      	add	r3, r2
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d108      	bne.n	80056e6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	441a      	add	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	441a      	add	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d118      	bne.n	800572c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	4b15      	ldr	r3, [pc, #84]	; (8005754 <prvInsertBlockIntoFreeList+0xb0>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	429a      	cmp	r2, r3
 8005704:	d00d      	beq.n	8005722 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	441a      	add	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	601a      	str	r2, [r3, #0]
 8005720:	e008      	b.n	8005734 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005722:	4b0c      	ldr	r3, [pc, #48]	; (8005754 <prvInsertBlockIntoFreeList+0xb0>)
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	e003      	b.n	8005734 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	429a      	cmp	r2, r3
 800573a:	d002      	beq.n	8005742 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005742:	bf00      	nop
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	20012edc 	.word	0x20012edc
 8005754:	20012ee4 	.word	0x20012ee4

08005758 <__errno>:
 8005758:	4b01      	ldr	r3, [pc, #4]	; (8005760 <__errno+0x8>)
 800575a:	6818      	ldr	r0, [r3, #0]
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	20000014 	.word	0x20000014

08005764 <__libc_init_array>:
 8005764:	b570      	push	{r4, r5, r6, lr}
 8005766:	4d0d      	ldr	r5, [pc, #52]	; (800579c <__libc_init_array+0x38>)
 8005768:	4c0d      	ldr	r4, [pc, #52]	; (80057a0 <__libc_init_array+0x3c>)
 800576a:	1b64      	subs	r4, r4, r5
 800576c:	10a4      	asrs	r4, r4, #2
 800576e:	2600      	movs	r6, #0
 8005770:	42a6      	cmp	r6, r4
 8005772:	d109      	bne.n	8005788 <__libc_init_array+0x24>
 8005774:	4d0b      	ldr	r5, [pc, #44]	; (80057a4 <__libc_init_array+0x40>)
 8005776:	4c0c      	ldr	r4, [pc, #48]	; (80057a8 <__libc_init_array+0x44>)
 8005778:	f000 fc4e 	bl	8006018 <_init>
 800577c:	1b64      	subs	r4, r4, r5
 800577e:	10a4      	asrs	r4, r4, #2
 8005780:	2600      	movs	r6, #0
 8005782:	42a6      	cmp	r6, r4
 8005784:	d105      	bne.n	8005792 <__libc_init_array+0x2e>
 8005786:	bd70      	pop	{r4, r5, r6, pc}
 8005788:	f855 3b04 	ldr.w	r3, [r5], #4
 800578c:	4798      	blx	r3
 800578e:	3601      	adds	r6, #1
 8005790:	e7ee      	b.n	8005770 <__libc_init_array+0xc>
 8005792:	f855 3b04 	ldr.w	r3, [r5], #4
 8005796:	4798      	blx	r3
 8005798:	3601      	adds	r6, #1
 800579a:	e7f2      	b.n	8005782 <__libc_init_array+0x1e>
 800579c:	08006154 	.word	0x08006154
 80057a0:	08006154 	.word	0x08006154
 80057a4:	08006154 	.word	0x08006154
 80057a8:	08006158 	.word	0x08006158

080057ac <memcpy>:
 80057ac:	440a      	add	r2, r1
 80057ae:	4291      	cmp	r1, r2
 80057b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80057b4:	d100      	bne.n	80057b8 <memcpy+0xc>
 80057b6:	4770      	bx	lr
 80057b8:	b510      	push	{r4, lr}
 80057ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057c2:	4291      	cmp	r1, r2
 80057c4:	d1f9      	bne.n	80057ba <memcpy+0xe>
 80057c6:	bd10      	pop	{r4, pc}

080057c8 <memset>:
 80057c8:	4402      	add	r2, r0
 80057ca:	4603      	mov	r3, r0
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d100      	bne.n	80057d2 <memset+0xa>
 80057d0:	4770      	bx	lr
 80057d2:	f803 1b01 	strb.w	r1, [r3], #1
 80057d6:	e7f9      	b.n	80057cc <memset+0x4>

080057d8 <siprintf>:
 80057d8:	b40e      	push	{r1, r2, r3}
 80057da:	b500      	push	{lr}
 80057dc:	b09c      	sub	sp, #112	; 0x70
 80057de:	ab1d      	add	r3, sp, #116	; 0x74
 80057e0:	9002      	str	r0, [sp, #8]
 80057e2:	9006      	str	r0, [sp, #24]
 80057e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80057e8:	4809      	ldr	r0, [pc, #36]	; (8005810 <siprintf+0x38>)
 80057ea:	9107      	str	r1, [sp, #28]
 80057ec:	9104      	str	r1, [sp, #16]
 80057ee:	4909      	ldr	r1, [pc, #36]	; (8005814 <siprintf+0x3c>)
 80057f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80057f4:	9105      	str	r1, [sp, #20]
 80057f6:	6800      	ldr	r0, [r0, #0]
 80057f8:	9301      	str	r3, [sp, #4]
 80057fa:	a902      	add	r1, sp, #8
 80057fc:	f000 f868 	bl	80058d0 <_svfiprintf_r>
 8005800:	9b02      	ldr	r3, [sp, #8]
 8005802:	2200      	movs	r2, #0
 8005804:	701a      	strb	r2, [r3, #0]
 8005806:	b01c      	add	sp, #112	; 0x70
 8005808:	f85d eb04 	ldr.w	lr, [sp], #4
 800580c:	b003      	add	sp, #12
 800580e:	4770      	bx	lr
 8005810:	20000014 	.word	0x20000014
 8005814:	ffff0208 	.word	0xffff0208

08005818 <__ssputs_r>:
 8005818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800581c:	688e      	ldr	r6, [r1, #8]
 800581e:	429e      	cmp	r6, r3
 8005820:	4682      	mov	sl, r0
 8005822:	460c      	mov	r4, r1
 8005824:	4690      	mov	r8, r2
 8005826:	461f      	mov	r7, r3
 8005828:	d838      	bhi.n	800589c <__ssputs_r+0x84>
 800582a:	898a      	ldrh	r2, [r1, #12]
 800582c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005830:	d032      	beq.n	8005898 <__ssputs_r+0x80>
 8005832:	6825      	ldr	r5, [r4, #0]
 8005834:	6909      	ldr	r1, [r1, #16]
 8005836:	eba5 0901 	sub.w	r9, r5, r1
 800583a:	6965      	ldr	r5, [r4, #20]
 800583c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005840:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005844:	3301      	adds	r3, #1
 8005846:	444b      	add	r3, r9
 8005848:	106d      	asrs	r5, r5, #1
 800584a:	429d      	cmp	r5, r3
 800584c:	bf38      	it	cc
 800584e:	461d      	movcc	r5, r3
 8005850:	0553      	lsls	r3, r2, #21
 8005852:	d531      	bpl.n	80058b8 <__ssputs_r+0xa0>
 8005854:	4629      	mov	r1, r5
 8005856:	f000 fb39 	bl	8005ecc <_malloc_r>
 800585a:	4606      	mov	r6, r0
 800585c:	b950      	cbnz	r0, 8005874 <__ssputs_r+0x5c>
 800585e:	230c      	movs	r3, #12
 8005860:	f8ca 3000 	str.w	r3, [sl]
 8005864:	89a3      	ldrh	r3, [r4, #12]
 8005866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800586a:	81a3      	strh	r3, [r4, #12]
 800586c:	f04f 30ff 	mov.w	r0, #4294967295
 8005870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005874:	6921      	ldr	r1, [r4, #16]
 8005876:	464a      	mov	r2, r9
 8005878:	f7ff ff98 	bl	80057ac <memcpy>
 800587c:	89a3      	ldrh	r3, [r4, #12]
 800587e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005886:	81a3      	strh	r3, [r4, #12]
 8005888:	6126      	str	r6, [r4, #16]
 800588a:	6165      	str	r5, [r4, #20]
 800588c:	444e      	add	r6, r9
 800588e:	eba5 0509 	sub.w	r5, r5, r9
 8005892:	6026      	str	r6, [r4, #0]
 8005894:	60a5      	str	r5, [r4, #8]
 8005896:	463e      	mov	r6, r7
 8005898:	42be      	cmp	r6, r7
 800589a:	d900      	bls.n	800589e <__ssputs_r+0x86>
 800589c:	463e      	mov	r6, r7
 800589e:	4632      	mov	r2, r6
 80058a0:	6820      	ldr	r0, [r4, #0]
 80058a2:	4641      	mov	r1, r8
 80058a4:	f000 faa8 	bl	8005df8 <memmove>
 80058a8:	68a3      	ldr	r3, [r4, #8]
 80058aa:	6822      	ldr	r2, [r4, #0]
 80058ac:	1b9b      	subs	r3, r3, r6
 80058ae:	4432      	add	r2, r6
 80058b0:	60a3      	str	r3, [r4, #8]
 80058b2:	6022      	str	r2, [r4, #0]
 80058b4:	2000      	movs	r0, #0
 80058b6:	e7db      	b.n	8005870 <__ssputs_r+0x58>
 80058b8:	462a      	mov	r2, r5
 80058ba:	f000 fb61 	bl	8005f80 <_realloc_r>
 80058be:	4606      	mov	r6, r0
 80058c0:	2800      	cmp	r0, #0
 80058c2:	d1e1      	bne.n	8005888 <__ssputs_r+0x70>
 80058c4:	6921      	ldr	r1, [r4, #16]
 80058c6:	4650      	mov	r0, sl
 80058c8:	f000 fab0 	bl	8005e2c <_free_r>
 80058cc:	e7c7      	b.n	800585e <__ssputs_r+0x46>
	...

080058d0 <_svfiprintf_r>:
 80058d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058d4:	4698      	mov	r8, r3
 80058d6:	898b      	ldrh	r3, [r1, #12]
 80058d8:	061b      	lsls	r3, r3, #24
 80058da:	b09d      	sub	sp, #116	; 0x74
 80058dc:	4607      	mov	r7, r0
 80058de:	460d      	mov	r5, r1
 80058e0:	4614      	mov	r4, r2
 80058e2:	d50e      	bpl.n	8005902 <_svfiprintf_r+0x32>
 80058e4:	690b      	ldr	r3, [r1, #16]
 80058e6:	b963      	cbnz	r3, 8005902 <_svfiprintf_r+0x32>
 80058e8:	2140      	movs	r1, #64	; 0x40
 80058ea:	f000 faef 	bl	8005ecc <_malloc_r>
 80058ee:	6028      	str	r0, [r5, #0]
 80058f0:	6128      	str	r0, [r5, #16]
 80058f2:	b920      	cbnz	r0, 80058fe <_svfiprintf_r+0x2e>
 80058f4:	230c      	movs	r3, #12
 80058f6:	603b      	str	r3, [r7, #0]
 80058f8:	f04f 30ff 	mov.w	r0, #4294967295
 80058fc:	e0d1      	b.n	8005aa2 <_svfiprintf_r+0x1d2>
 80058fe:	2340      	movs	r3, #64	; 0x40
 8005900:	616b      	str	r3, [r5, #20]
 8005902:	2300      	movs	r3, #0
 8005904:	9309      	str	r3, [sp, #36]	; 0x24
 8005906:	2320      	movs	r3, #32
 8005908:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800590c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005910:	2330      	movs	r3, #48	; 0x30
 8005912:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005abc <_svfiprintf_r+0x1ec>
 8005916:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800591a:	f04f 0901 	mov.w	r9, #1
 800591e:	4623      	mov	r3, r4
 8005920:	469a      	mov	sl, r3
 8005922:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005926:	b10a      	cbz	r2, 800592c <_svfiprintf_r+0x5c>
 8005928:	2a25      	cmp	r2, #37	; 0x25
 800592a:	d1f9      	bne.n	8005920 <_svfiprintf_r+0x50>
 800592c:	ebba 0b04 	subs.w	fp, sl, r4
 8005930:	d00b      	beq.n	800594a <_svfiprintf_r+0x7a>
 8005932:	465b      	mov	r3, fp
 8005934:	4622      	mov	r2, r4
 8005936:	4629      	mov	r1, r5
 8005938:	4638      	mov	r0, r7
 800593a:	f7ff ff6d 	bl	8005818 <__ssputs_r>
 800593e:	3001      	adds	r0, #1
 8005940:	f000 80aa 	beq.w	8005a98 <_svfiprintf_r+0x1c8>
 8005944:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005946:	445a      	add	r2, fp
 8005948:	9209      	str	r2, [sp, #36]	; 0x24
 800594a:	f89a 3000 	ldrb.w	r3, [sl]
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 80a2 	beq.w	8005a98 <_svfiprintf_r+0x1c8>
 8005954:	2300      	movs	r3, #0
 8005956:	f04f 32ff 	mov.w	r2, #4294967295
 800595a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800595e:	f10a 0a01 	add.w	sl, sl, #1
 8005962:	9304      	str	r3, [sp, #16]
 8005964:	9307      	str	r3, [sp, #28]
 8005966:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800596a:	931a      	str	r3, [sp, #104]	; 0x68
 800596c:	4654      	mov	r4, sl
 800596e:	2205      	movs	r2, #5
 8005970:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005974:	4851      	ldr	r0, [pc, #324]	; (8005abc <_svfiprintf_r+0x1ec>)
 8005976:	f7fa fc33 	bl	80001e0 <memchr>
 800597a:	9a04      	ldr	r2, [sp, #16]
 800597c:	b9d8      	cbnz	r0, 80059b6 <_svfiprintf_r+0xe6>
 800597e:	06d0      	lsls	r0, r2, #27
 8005980:	bf44      	itt	mi
 8005982:	2320      	movmi	r3, #32
 8005984:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005988:	0711      	lsls	r1, r2, #28
 800598a:	bf44      	itt	mi
 800598c:	232b      	movmi	r3, #43	; 0x2b
 800598e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005992:	f89a 3000 	ldrb.w	r3, [sl]
 8005996:	2b2a      	cmp	r3, #42	; 0x2a
 8005998:	d015      	beq.n	80059c6 <_svfiprintf_r+0xf6>
 800599a:	9a07      	ldr	r2, [sp, #28]
 800599c:	4654      	mov	r4, sl
 800599e:	2000      	movs	r0, #0
 80059a0:	f04f 0c0a 	mov.w	ip, #10
 80059a4:	4621      	mov	r1, r4
 80059a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059aa:	3b30      	subs	r3, #48	; 0x30
 80059ac:	2b09      	cmp	r3, #9
 80059ae:	d94e      	bls.n	8005a4e <_svfiprintf_r+0x17e>
 80059b0:	b1b0      	cbz	r0, 80059e0 <_svfiprintf_r+0x110>
 80059b2:	9207      	str	r2, [sp, #28]
 80059b4:	e014      	b.n	80059e0 <_svfiprintf_r+0x110>
 80059b6:	eba0 0308 	sub.w	r3, r0, r8
 80059ba:	fa09 f303 	lsl.w	r3, r9, r3
 80059be:	4313      	orrs	r3, r2
 80059c0:	9304      	str	r3, [sp, #16]
 80059c2:	46a2      	mov	sl, r4
 80059c4:	e7d2      	b.n	800596c <_svfiprintf_r+0x9c>
 80059c6:	9b03      	ldr	r3, [sp, #12]
 80059c8:	1d19      	adds	r1, r3, #4
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	9103      	str	r1, [sp, #12]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	bfbb      	ittet	lt
 80059d2:	425b      	neglt	r3, r3
 80059d4:	f042 0202 	orrlt.w	r2, r2, #2
 80059d8:	9307      	strge	r3, [sp, #28]
 80059da:	9307      	strlt	r3, [sp, #28]
 80059dc:	bfb8      	it	lt
 80059de:	9204      	strlt	r2, [sp, #16]
 80059e0:	7823      	ldrb	r3, [r4, #0]
 80059e2:	2b2e      	cmp	r3, #46	; 0x2e
 80059e4:	d10c      	bne.n	8005a00 <_svfiprintf_r+0x130>
 80059e6:	7863      	ldrb	r3, [r4, #1]
 80059e8:	2b2a      	cmp	r3, #42	; 0x2a
 80059ea:	d135      	bne.n	8005a58 <_svfiprintf_r+0x188>
 80059ec:	9b03      	ldr	r3, [sp, #12]
 80059ee:	1d1a      	adds	r2, r3, #4
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	9203      	str	r2, [sp, #12]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	bfb8      	it	lt
 80059f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80059fc:	3402      	adds	r4, #2
 80059fe:	9305      	str	r3, [sp, #20]
 8005a00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005acc <_svfiprintf_r+0x1fc>
 8005a04:	7821      	ldrb	r1, [r4, #0]
 8005a06:	2203      	movs	r2, #3
 8005a08:	4650      	mov	r0, sl
 8005a0a:	f7fa fbe9 	bl	80001e0 <memchr>
 8005a0e:	b140      	cbz	r0, 8005a22 <_svfiprintf_r+0x152>
 8005a10:	2340      	movs	r3, #64	; 0x40
 8005a12:	eba0 000a 	sub.w	r0, r0, sl
 8005a16:	fa03 f000 	lsl.w	r0, r3, r0
 8005a1a:	9b04      	ldr	r3, [sp, #16]
 8005a1c:	4303      	orrs	r3, r0
 8005a1e:	3401      	adds	r4, #1
 8005a20:	9304      	str	r3, [sp, #16]
 8005a22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a26:	4826      	ldr	r0, [pc, #152]	; (8005ac0 <_svfiprintf_r+0x1f0>)
 8005a28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a2c:	2206      	movs	r2, #6
 8005a2e:	f7fa fbd7 	bl	80001e0 <memchr>
 8005a32:	2800      	cmp	r0, #0
 8005a34:	d038      	beq.n	8005aa8 <_svfiprintf_r+0x1d8>
 8005a36:	4b23      	ldr	r3, [pc, #140]	; (8005ac4 <_svfiprintf_r+0x1f4>)
 8005a38:	bb1b      	cbnz	r3, 8005a82 <_svfiprintf_r+0x1b2>
 8005a3a:	9b03      	ldr	r3, [sp, #12]
 8005a3c:	3307      	adds	r3, #7
 8005a3e:	f023 0307 	bic.w	r3, r3, #7
 8005a42:	3308      	adds	r3, #8
 8005a44:	9303      	str	r3, [sp, #12]
 8005a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a48:	4433      	add	r3, r6
 8005a4a:	9309      	str	r3, [sp, #36]	; 0x24
 8005a4c:	e767      	b.n	800591e <_svfiprintf_r+0x4e>
 8005a4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a52:	460c      	mov	r4, r1
 8005a54:	2001      	movs	r0, #1
 8005a56:	e7a5      	b.n	80059a4 <_svfiprintf_r+0xd4>
 8005a58:	2300      	movs	r3, #0
 8005a5a:	3401      	adds	r4, #1
 8005a5c:	9305      	str	r3, [sp, #20]
 8005a5e:	4619      	mov	r1, r3
 8005a60:	f04f 0c0a 	mov.w	ip, #10
 8005a64:	4620      	mov	r0, r4
 8005a66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a6a:	3a30      	subs	r2, #48	; 0x30
 8005a6c:	2a09      	cmp	r2, #9
 8005a6e:	d903      	bls.n	8005a78 <_svfiprintf_r+0x1a8>
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d0c5      	beq.n	8005a00 <_svfiprintf_r+0x130>
 8005a74:	9105      	str	r1, [sp, #20]
 8005a76:	e7c3      	b.n	8005a00 <_svfiprintf_r+0x130>
 8005a78:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a7c:	4604      	mov	r4, r0
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e7f0      	b.n	8005a64 <_svfiprintf_r+0x194>
 8005a82:	ab03      	add	r3, sp, #12
 8005a84:	9300      	str	r3, [sp, #0]
 8005a86:	462a      	mov	r2, r5
 8005a88:	4b0f      	ldr	r3, [pc, #60]	; (8005ac8 <_svfiprintf_r+0x1f8>)
 8005a8a:	a904      	add	r1, sp, #16
 8005a8c:	4638      	mov	r0, r7
 8005a8e:	f3af 8000 	nop.w
 8005a92:	1c42      	adds	r2, r0, #1
 8005a94:	4606      	mov	r6, r0
 8005a96:	d1d6      	bne.n	8005a46 <_svfiprintf_r+0x176>
 8005a98:	89ab      	ldrh	r3, [r5, #12]
 8005a9a:	065b      	lsls	r3, r3, #25
 8005a9c:	f53f af2c 	bmi.w	80058f8 <_svfiprintf_r+0x28>
 8005aa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005aa2:	b01d      	add	sp, #116	; 0x74
 8005aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aa8:	ab03      	add	r3, sp, #12
 8005aaa:	9300      	str	r3, [sp, #0]
 8005aac:	462a      	mov	r2, r5
 8005aae:	4b06      	ldr	r3, [pc, #24]	; (8005ac8 <_svfiprintf_r+0x1f8>)
 8005ab0:	a904      	add	r1, sp, #16
 8005ab2:	4638      	mov	r0, r7
 8005ab4:	f000 f87a 	bl	8005bac <_printf_i>
 8005ab8:	e7eb      	b.n	8005a92 <_svfiprintf_r+0x1c2>
 8005aba:	bf00      	nop
 8005abc:	08006118 	.word	0x08006118
 8005ac0:	08006122 	.word	0x08006122
 8005ac4:	00000000 	.word	0x00000000
 8005ac8:	08005819 	.word	0x08005819
 8005acc:	0800611e 	.word	0x0800611e

08005ad0 <_printf_common>:
 8005ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ad4:	4616      	mov	r6, r2
 8005ad6:	4699      	mov	r9, r3
 8005ad8:	688a      	ldr	r2, [r1, #8]
 8005ada:	690b      	ldr	r3, [r1, #16]
 8005adc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	bfb8      	it	lt
 8005ae4:	4613      	movlt	r3, r2
 8005ae6:	6033      	str	r3, [r6, #0]
 8005ae8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005aec:	4607      	mov	r7, r0
 8005aee:	460c      	mov	r4, r1
 8005af0:	b10a      	cbz	r2, 8005af6 <_printf_common+0x26>
 8005af2:	3301      	adds	r3, #1
 8005af4:	6033      	str	r3, [r6, #0]
 8005af6:	6823      	ldr	r3, [r4, #0]
 8005af8:	0699      	lsls	r1, r3, #26
 8005afa:	bf42      	ittt	mi
 8005afc:	6833      	ldrmi	r3, [r6, #0]
 8005afe:	3302      	addmi	r3, #2
 8005b00:	6033      	strmi	r3, [r6, #0]
 8005b02:	6825      	ldr	r5, [r4, #0]
 8005b04:	f015 0506 	ands.w	r5, r5, #6
 8005b08:	d106      	bne.n	8005b18 <_printf_common+0x48>
 8005b0a:	f104 0a19 	add.w	sl, r4, #25
 8005b0e:	68e3      	ldr	r3, [r4, #12]
 8005b10:	6832      	ldr	r2, [r6, #0]
 8005b12:	1a9b      	subs	r3, r3, r2
 8005b14:	42ab      	cmp	r3, r5
 8005b16:	dc26      	bgt.n	8005b66 <_printf_common+0x96>
 8005b18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b1c:	1e13      	subs	r3, r2, #0
 8005b1e:	6822      	ldr	r2, [r4, #0]
 8005b20:	bf18      	it	ne
 8005b22:	2301      	movne	r3, #1
 8005b24:	0692      	lsls	r2, r2, #26
 8005b26:	d42b      	bmi.n	8005b80 <_printf_common+0xb0>
 8005b28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b2c:	4649      	mov	r1, r9
 8005b2e:	4638      	mov	r0, r7
 8005b30:	47c0      	blx	r8
 8005b32:	3001      	adds	r0, #1
 8005b34:	d01e      	beq.n	8005b74 <_printf_common+0xa4>
 8005b36:	6823      	ldr	r3, [r4, #0]
 8005b38:	68e5      	ldr	r5, [r4, #12]
 8005b3a:	6832      	ldr	r2, [r6, #0]
 8005b3c:	f003 0306 	and.w	r3, r3, #6
 8005b40:	2b04      	cmp	r3, #4
 8005b42:	bf08      	it	eq
 8005b44:	1aad      	subeq	r5, r5, r2
 8005b46:	68a3      	ldr	r3, [r4, #8]
 8005b48:	6922      	ldr	r2, [r4, #16]
 8005b4a:	bf0c      	ite	eq
 8005b4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b50:	2500      	movne	r5, #0
 8005b52:	4293      	cmp	r3, r2
 8005b54:	bfc4      	itt	gt
 8005b56:	1a9b      	subgt	r3, r3, r2
 8005b58:	18ed      	addgt	r5, r5, r3
 8005b5a:	2600      	movs	r6, #0
 8005b5c:	341a      	adds	r4, #26
 8005b5e:	42b5      	cmp	r5, r6
 8005b60:	d11a      	bne.n	8005b98 <_printf_common+0xc8>
 8005b62:	2000      	movs	r0, #0
 8005b64:	e008      	b.n	8005b78 <_printf_common+0xa8>
 8005b66:	2301      	movs	r3, #1
 8005b68:	4652      	mov	r2, sl
 8005b6a:	4649      	mov	r1, r9
 8005b6c:	4638      	mov	r0, r7
 8005b6e:	47c0      	blx	r8
 8005b70:	3001      	adds	r0, #1
 8005b72:	d103      	bne.n	8005b7c <_printf_common+0xac>
 8005b74:	f04f 30ff 	mov.w	r0, #4294967295
 8005b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b7c:	3501      	adds	r5, #1
 8005b7e:	e7c6      	b.n	8005b0e <_printf_common+0x3e>
 8005b80:	18e1      	adds	r1, r4, r3
 8005b82:	1c5a      	adds	r2, r3, #1
 8005b84:	2030      	movs	r0, #48	; 0x30
 8005b86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b8a:	4422      	add	r2, r4
 8005b8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b94:	3302      	adds	r3, #2
 8005b96:	e7c7      	b.n	8005b28 <_printf_common+0x58>
 8005b98:	2301      	movs	r3, #1
 8005b9a:	4622      	mov	r2, r4
 8005b9c:	4649      	mov	r1, r9
 8005b9e:	4638      	mov	r0, r7
 8005ba0:	47c0      	blx	r8
 8005ba2:	3001      	adds	r0, #1
 8005ba4:	d0e6      	beq.n	8005b74 <_printf_common+0xa4>
 8005ba6:	3601      	adds	r6, #1
 8005ba8:	e7d9      	b.n	8005b5e <_printf_common+0x8e>
	...

08005bac <_printf_i>:
 8005bac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bb0:	460c      	mov	r4, r1
 8005bb2:	4691      	mov	r9, r2
 8005bb4:	7e27      	ldrb	r7, [r4, #24]
 8005bb6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005bb8:	2f78      	cmp	r7, #120	; 0x78
 8005bba:	4680      	mov	r8, r0
 8005bbc:	469a      	mov	sl, r3
 8005bbe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bc2:	d807      	bhi.n	8005bd4 <_printf_i+0x28>
 8005bc4:	2f62      	cmp	r7, #98	; 0x62
 8005bc6:	d80a      	bhi.n	8005bde <_printf_i+0x32>
 8005bc8:	2f00      	cmp	r7, #0
 8005bca:	f000 80d8 	beq.w	8005d7e <_printf_i+0x1d2>
 8005bce:	2f58      	cmp	r7, #88	; 0x58
 8005bd0:	f000 80a3 	beq.w	8005d1a <_printf_i+0x16e>
 8005bd4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005bd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005bdc:	e03a      	b.n	8005c54 <_printf_i+0xa8>
 8005bde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005be2:	2b15      	cmp	r3, #21
 8005be4:	d8f6      	bhi.n	8005bd4 <_printf_i+0x28>
 8005be6:	a001      	add	r0, pc, #4	; (adr r0, 8005bec <_printf_i+0x40>)
 8005be8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005bec:	08005c45 	.word	0x08005c45
 8005bf0:	08005c59 	.word	0x08005c59
 8005bf4:	08005bd5 	.word	0x08005bd5
 8005bf8:	08005bd5 	.word	0x08005bd5
 8005bfc:	08005bd5 	.word	0x08005bd5
 8005c00:	08005bd5 	.word	0x08005bd5
 8005c04:	08005c59 	.word	0x08005c59
 8005c08:	08005bd5 	.word	0x08005bd5
 8005c0c:	08005bd5 	.word	0x08005bd5
 8005c10:	08005bd5 	.word	0x08005bd5
 8005c14:	08005bd5 	.word	0x08005bd5
 8005c18:	08005d65 	.word	0x08005d65
 8005c1c:	08005c89 	.word	0x08005c89
 8005c20:	08005d47 	.word	0x08005d47
 8005c24:	08005bd5 	.word	0x08005bd5
 8005c28:	08005bd5 	.word	0x08005bd5
 8005c2c:	08005d87 	.word	0x08005d87
 8005c30:	08005bd5 	.word	0x08005bd5
 8005c34:	08005c89 	.word	0x08005c89
 8005c38:	08005bd5 	.word	0x08005bd5
 8005c3c:	08005bd5 	.word	0x08005bd5
 8005c40:	08005d4f 	.word	0x08005d4f
 8005c44:	680b      	ldr	r3, [r1, #0]
 8005c46:	1d1a      	adds	r2, r3, #4
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	600a      	str	r2, [r1, #0]
 8005c4c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c54:	2301      	movs	r3, #1
 8005c56:	e0a3      	b.n	8005da0 <_printf_i+0x1f4>
 8005c58:	6825      	ldr	r5, [r4, #0]
 8005c5a:	6808      	ldr	r0, [r1, #0]
 8005c5c:	062e      	lsls	r6, r5, #24
 8005c5e:	f100 0304 	add.w	r3, r0, #4
 8005c62:	d50a      	bpl.n	8005c7a <_printf_i+0xce>
 8005c64:	6805      	ldr	r5, [r0, #0]
 8005c66:	600b      	str	r3, [r1, #0]
 8005c68:	2d00      	cmp	r5, #0
 8005c6a:	da03      	bge.n	8005c74 <_printf_i+0xc8>
 8005c6c:	232d      	movs	r3, #45	; 0x2d
 8005c6e:	426d      	negs	r5, r5
 8005c70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c74:	485e      	ldr	r0, [pc, #376]	; (8005df0 <_printf_i+0x244>)
 8005c76:	230a      	movs	r3, #10
 8005c78:	e019      	b.n	8005cae <_printf_i+0x102>
 8005c7a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005c7e:	6805      	ldr	r5, [r0, #0]
 8005c80:	600b      	str	r3, [r1, #0]
 8005c82:	bf18      	it	ne
 8005c84:	b22d      	sxthne	r5, r5
 8005c86:	e7ef      	b.n	8005c68 <_printf_i+0xbc>
 8005c88:	680b      	ldr	r3, [r1, #0]
 8005c8a:	6825      	ldr	r5, [r4, #0]
 8005c8c:	1d18      	adds	r0, r3, #4
 8005c8e:	6008      	str	r0, [r1, #0]
 8005c90:	0628      	lsls	r0, r5, #24
 8005c92:	d501      	bpl.n	8005c98 <_printf_i+0xec>
 8005c94:	681d      	ldr	r5, [r3, #0]
 8005c96:	e002      	b.n	8005c9e <_printf_i+0xf2>
 8005c98:	0669      	lsls	r1, r5, #25
 8005c9a:	d5fb      	bpl.n	8005c94 <_printf_i+0xe8>
 8005c9c:	881d      	ldrh	r5, [r3, #0]
 8005c9e:	4854      	ldr	r0, [pc, #336]	; (8005df0 <_printf_i+0x244>)
 8005ca0:	2f6f      	cmp	r7, #111	; 0x6f
 8005ca2:	bf0c      	ite	eq
 8005ca4:	2308      	moveq	r3, #8
 8005ca6:	230a      	movne	r3, #10
 8005ca8:	2100      	movs	r1, #0
 8005caa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cae:	6866      	ldr	r6, [r4, #4]
 8005cb0:	60a6      	str	r6, [r4, #8]
 8005cb2:	2e00      	cmp	r6, #0
 8005cb4:	bfa2      	ittt	ge
 8005cb6:	6821      	ldrge	r1, [r4, #0]
 8005cb8:	f021 0104 	bicge.w	r1, r1, #4
 8005cbc:	6021      	strge	r1, [r4, #0]
 8005cbe:	b90d      	cbnz	r5, 8005cc4 <_printf_i+0x118>
 8005cc0:	2e00      	cmp	r6, #0
 8005cc2:	d04d      	beq.n	8005d60 <_printf_i+0x1b4>
 8005cc4:	4616      	mov	r6, r2
 8005cc6:	fbb5 f1f3 	udiv	r1, r5, r3
 8005cca:	fb03 5711 	mls	r7, r3, r1, r5
 8005cce:	5dc7      	ldrb	r7, [r0, r7]
 8005cd0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005cd4:	462f      	mov	r7, r5
 8005cd6:	42bb      	cmp	r3, r7
 8005cd8:	460d      	mov	r5, r1
 8005cda:	d9f4      	bls.n	8005cc6 <_printf_i+0x11a>
 8005cdc:	2b08      	cmp	r3, #8
 8005cde:	d10b      	bne.n	8005cf8 <_printf_i+0x14c>
 8005ce0:	6823      	ldr	r3, [r4, #0]
 8005ce2:	07df      	lsls	r7, r3, #31
 8005ce4:	d508      	bpl.n	8005cf8 <_printf_i+0x14c>
 8005ce6:	6923      	ldr	r3, [r4, #16]
 8005ce8:	6861      	ldr	r1, [r4, #4]
 8005cea:	4299      	cmp	r1, r3
 8005cec:	bfde      	ittt	le
 8005cee:	2330      	movle	r3, #48	; 0x30
 8005cf0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005cf4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005cf8:	1b92      	subs	r2, r2, r6
 8005cfa:	6122      	str	r2, [r4, #16]
 8005cfc:	f8cd a000 	str.w	sl, [sp]
 8005d00:	464b      	mov	r3, r9
 8005d02:	aa03      	add	r2, sp, #12
 8005d04:	4621      	mov	r1, r4
 8005d06:	4640      	mov	r0, r8
 8005d08:	f7ff fee2 	bl	8005ad0 <_printf_common>
 8005d0c:	3001      	adds	r0, #1
 8005d0e:	d14c      	bne.n	8005daa <_printf_i+0x1fe>
 8005d10:	f04f 30ff 	mov.w	r0, #4294967295
 8005d14:	b004      	add	sp, #16
 8005d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d1a:	4835      	ldr	r0, [pc, #212]	; (8005df0 <_printf_i+0x244>)
 8005d1c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d20:	6823      	ldr	r3, [r4, #0]
 8005d22:	680e      	ldr	r6, [r1, #0]
 8005d24:	061f      	lsls	r7, r3, #24
 8005d26:	f856 5b04 	ldr.w	r5, [r6], #4
 8005d2a:	600e      	str	r6, [r1, #0]
 8005d2c:	d514      	bpl.n	8005d58 <_printf_i+0x1ac>
 8005d2e:	07d9      	lsls	r1, r3, #31
 8005d30:	bf44      	itt	mi
 8005d32:	f043 0320 	orrmi.w	r3, r3, #32
 8005d36:	6023      	strmi	r3, [r4, #0]
 8005d38:	b91d      	cbnz	r5, 8005d42 <_printf_i+0x196>
 8005d3a:	6823      	ldr	r3, [r4, #0]
 8005d3c:	f023 0320 	bic.w	r3, r3, #32
 8005d40:	6023      	str	r3, [r4, #0]
 8005d42:	2310      	movs	r3, #16
 8005d44:	e7b0      	b.n	8005ca8 <_printf_i+0xfc>
 8005d46:	6823      	ldr	r3, [r4, #0]
 8005d48:	f043 0320 	orr.w	r3, r3, #32
 8005d4c:	6023      	str	r3, [r4, #0]
 8005d4e:	2378      	movs	r3, #120	; 0x78
 8005d50:	4828      	ldr	r0, [pc, #160]	; (8005df4 <_printf_i+0x248>)
 8005d52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d56:	e7e3      	b.n	8005d20 <_printf_i+0x174>
 8005d58:	065e      	lsls	r6, r3, #25
 8005d5a:	bf48      	it	mi
 8005d5c:	b2ad      	uxthmi	r5, r5
 8005d5e:	e7e6      	b.n	8005d2e <_printf_i+0x182>
 8005d60:	4616      	mov	r6, r2
 8005d62:	e7bb      	b.n	8005cdc <_printf_i+0x130>
 8005d64:	680b      	ldr	r3, [r1, #0]
 8005d66:	6826      	ldr	r6, [r4, #0]
 8005d68:	6960      	ldr	r0, [r4, #20]
 8005d6a:	1d1d      	adds	r5, r3, #4
 8005d6c:	600d      	str	r5, [r1, #0]
 8005d6e:	0635      	lsls	r5, r6, #24
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	d501      	bpl.n	8005d78 <_printf_i+0x1cc>
 8005d74:	6018      	str	r0, [r3, #0]
 8005d76:	e002      	b.n	8005d7e <_printf_i+0x1d2>
 8005d78:	0671      	lsls	r1, r6, #25
 8005d7a:	d5fb      	bpl.n	8005d74 <_printf_i+0x1c8>
 8005d7c:	8018      	strh	r0, [r3, #0]
 8005d7e:	2300      	movs	r3, #0
 8005d80:	6123      	str	r3, [r4, #16]
 8005d82:	4616      	mov	r6, r2
 8005d84:	e7ba      	b.n	8005cfc <_printf_i+0x150>
 8005d86:	680b      	ldr	r3, [r1, #0]
 8005d88:	1d1a      	adds	r2, r3, #4
 8005d8a:	600a      	str	r2, [r1, #0]
 8005d8c:	681e      	ldr	r6, [r3, #0]
 8005d8e:	6862      	ldr	r2, [r4, #4]
 8005d90:	2100      	movs	r1, #0
 8005d92:	4630      	mov	r0, r6
 8005d94:	f7fa fa24 	bl	80001e0 <memchr>
 8005d98:	b108      	cbz	r0, 8005d9e <_printf_i+0x1f2>
 8005d9a:	1b80      	subs	r0, r0, r6
 8005d9c:	6060      	str	r0, [r4, #4]
 8005d9e:	6863      	ldr	r3, [r4, #4]
 8005da0:	6123      	str	r3, [r4, #16]
 8005da2:	2300      	movs	r3, #0
 8005da4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005da8:	e7a8      	b.n	8005cfc <_printf_i+0x150>
 8005daa:	6923      	ldr	r3, [r4, #16]
 8005dac:	4632      	mov	r2, r6
 8005dae:	4649      	mov	r1, r9
 8005db0:	4640      	mov	r0, r8
 8005db2:	47d0      	blx	sl
 8005db4:	3001      	adds	r0, #1
 8005db6:	d0ab      	beq.n	8005d10 <_printf_i+0x164>
 8005db8:	6823      	ldr	r3, [r4, #0]
 8005dba:	079b      	lsls	r3, r3, #30
 8005dbc:	d413      	bmi.n	8005de6 <_printf_i+0x23a>
 8005dbe:	68e0      	ldr	r0, [r4, #12]
 8005dc0:	9b03      	ldr	r3, [sp, #12]
 8005dc2:	4298      	cmp	r0, r3
 8005dc4:	bfb8      	it	lt
 8005dc6:	4618      	movlt	r0, r3
 8005dc8:	e7a4      	b.n	8005d14 <_printf_i+0x168>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	4632      	mov	r2, r6
 8005dce:	4649      	mov	r1, r9
 8005dd0:	4640      	mov	r0, r8
 8005dd2:	47d0      	blx	sl
 8005dd4:	3001      	adds	r0, #1
 8005dd6:	d09b      	beq.n	8005d10 <_printf_i+0x164>
 8005dd8:	3501      	adds	r5, #1
 8005dda:	68e3      	ldr	r3, [r4, #12]
 8005ddc:	9903      	ldr	r1, [sp, #12]
 8005dde:	1a5b      	subs	r3, r3, r1
 8005de0:	42ab      	cmp	r3, r5
 8005de2:	dcf2      	bgt.n	8005dca <_printf_i+0x21e>
 8005de4:	e7eb      	b.n	8005dbe <_printf_i+0x212>
 8005de6:	2500      	movs	r5, #0
 8005de8:	f104 0619 	add.w	r6, r4, #25
 8005dec:	e7f5      	b.n	8005dda <_printf_i+0x22e>
 8005dee:	bf00      	nop
 8005df0:	08006129 	.word	0x08006129
 8005df4:	0800613a 	.word	0x0800613a

08005df8 <memmove>:
 8005df8:	4288      	cmp	r0, r1
 8005dfa:	b510      	push	{r4, lr}
 8005dfc:	eb01 0402 	add.w	r4, r1, r2
 8005e00:	d902      	bls.n	8005e08 <memmove+0x10>
 8005e02:	4284      	cmp	r4, r0
 8005e04:	4623      	mov	r3, r4
 8005e06:	d807      	bhi.n	8005e18 <memmove+0x20>
 8005e08:	1e43      	subs	r3, r0, #1
 8005e0a:	42a1      	cmp	r1, r4
 8005e0c:	d008      	beq.n	8005e20 <memmove+0x28>
 8005e0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e16:	e7f8      	b.n	8005e0a <memmove+0x12>
 8005e18:	4402      	add	r2, r0
 8005e1a:	4601      	mov	r1, r0
 8005e1c:	428a      	cmp	r2, r1
 8005e1e:	d100      	bne.n	8005e22 <memmove+0x2a>
 8005e20:	bd10      	pop	{r4, pc}
 8005e22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e2a:	e7f7      	b.n	8005e1c <memmove+0x24>

08005e2c <_free_r>:
 8005e2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e2e:	2900      	cmp	r1, #0
 8005e30:	d048      	beq.n	8005ec4 <_free_r+0x98>
 8005e32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e36:	9001      	str	r0, [sp, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f1a1 0404 	sub.w	r4, r1, #4
 8005e3e:	bfb8      	it	lt
 8005e40:	18e4      	addlt	r4, r4, r3
 8005e42:	f000 f8d3 	bl	8005fec <__malloc_lock>
 8005e46:	4a20      	ldr	r2, [pc, #128]	; (8005ec8 <_free_r+0x9c>)
 8005e48:	9801      	ldr	r0, [sp, #4]
 8005e4a:	6813      	ldr	r3, [r2, #0]
 8005e4c:	4615      	mov	r5, r2
 8005e4e:	b933      	cbnz	r3, 8005e5e <_free_r+0x32>
 8005e50:	6063      	str	r3, [r4, #4]
 8005e52:	6014      	str	r4, [r2, #0]
 8005e54:	b003      	add	sp, #12
 8005e56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e5a:	f000 b8cd 	b.w	8005ff8 <__malloc_unlock>
 8005e5e:	42a3      	cmp	r3, r4
 8005e60:	d90b      	bls.n	8005e7a <_free_r+0x4e>
 8005e62:	6821      	ldr	r1, [r4, #0]
 8005e64:	1862      	adds	r2, r4, r1
 8005e66:	4293      	cmp	r3, r2
 8005e68:	bf04      	itt	eq
 8005e6a:	681a      	ldreq	r2, [r3, #0]
 8005e6c:	685b      	ldreq	r3, [r3, #4]
 8005e6e:	6063      	str	r3, [r4, #4]
 8005e70:	bf04      	itt	eq
 8005e72:	1852      	addeq	r2, r2, r1
 8005e74:	6022      	streq	r2, [r4, #0]
 8005e76:	602c      	str	r4, [r5, #0]
 8005e78:	e7ec      	b.n	8005e54 <_free_r+0x28>
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	b10b      	cbz	r3, 8005e84 <_free_r+0x58>
 8005e80:	42a3      	cmp	r3, r4
 8005e82:	d9fa      	bls.n	8005e7a <_free_r+0x4e>
 8005e84:	6811      	ldr	r1, [r2, #0]
 8005e86:	1855      	adds	r5, r2, r1
 8005e88:	42a5      	cmp	r5, r4
 8005e8a:	d10b      	bne.n	8005ea4 <_free_r+0x78>
 8005e8c:	6824      	ldr	r4, [r4, #0]
 8005e8e:	4421      	add	r1, r4
 8005e90:	1854      	adds	r4, r2, r1
 8005e92:	42a3      	cmp	r3, r4
 8005e94:	6011      	str	r1, [r2, #0]
 8005e96:	d1dd      	bne.n	8005e54 <_free_r+0x28>
 8005e98:	681c      	ldr	r4, [r3, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	6053      	str	r3, [r2, #4]
 8005e9e:	4421      	add	r1, r4
 8005ea0:	6011      	str	r1, [r2, #0]
 8005ea2:	e7d7      	b.n	8005e54 <_free_r+0x28>
 8005ea4:	d902      	bls.n	8005eac <_free_r+0x80>
 8005ea6:	230c      	movs	r3, #12
 8005ea8:	6003      	str	r3, [r0, #0]
 8005eaa:	e7d3      	b.n	8005e54 <_free_r+0x28>
 8005eac:	6825      	ldr	r5, [r4, #0]
 8005eae:	1961      	adds	r1, r4, r5
 8005eb0:	428b      	cmp	r3, r1
 8005eb2:	bf04      	itt	eq
 8005eb4:	6819      	ldreq	r1, [r3, #0]
 8005eb6:	685b      	ldreq	r3, [r3, #4]
 8005eb8:	6063      	str	r3, [r4, #4]
 8005eba:	bf04      	itt	eq
 8005ebc:	1949      	addeq	r1, r1, r5
 8005ebe:	6021      	streq	r1, [r4, #0]
 8005ec0:	6054      	str	r4, [r2, #4]
 8005ec2:	e7c7      	b.n	8005e54 <_free_r+0x28>
 8005ec4:	b003      	add	sp, #12
 8005ec6:	bd30      	pop	{r4, r5, pc}
 8005ec8:	20012efc 	.word	0x20012efc

08005ecc <_malloc_r>:
 8005ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ece:	1ccd      	adds	r5, r1, #3
 8005ed0:	f025 0503 	bic.w	r5, r5, #3
 8005ed4:	3508      	adds	r5, #8
 8005ed6:	2d0c      	cmp	r5, #12
 8005ed8:	bf38      	it	cc
 8005eda:	250c      	movcc	r5, #12
 8005edc:	2d00      	cmp	r5, #0
 8005ede:	4606      	mov	r6, r0
 8005ee0:	db01      	blt.n	8005ee6 <_malloc_r+0x1a>
 8005ee2:	42a9      	cmp	r1, r5
 8005ee4:	d903      	bls.n	8005eee <_malloc_r+0x22>
 8005ee6:	230c      	movs	r3, #12
 8005ee8:	6033      	str	r3, [r6, #0]
 8005eea:	2000      	movs	r0, #0
 8005eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005eee:	f000 f87d 	bl	8005fec <__malloc_lock>
 8005ef2:	4921      	ldr	r1, [pc, #132]	; (8005f78 <_malloc_r+0xac>)
 8005ef4:	680a      	ldr	r2, [r1, #0]
 8005ef6:	4614      	mov	r4, r2
 8005ef8:	b99c      	cbnz	r4, 8005f22 <_malloc_r+0x56>
 8005efa:	4f20      	ldr	r7, [pc, #128]	; (8005f7c <_malloc_r+0xb0>)
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	b923      	cbnz	r3, 8005f0a <_malloc_r+0x3e>
 8005f00:	4621      	mov	r1, r4
 8005f02:	4630      	mov	r0, r6
 8005f04:	f000 f862 	bl	8005fcc <_sbrk_r>
 8005f08:	6038      	str	r0, [r7, #0]
 8005f0a:	4629      	mov	r1, r5
 8005f0c:	4630      	mov	r0, r6
 8005f0e:	f000 f85d 	bl	8005fcc <_sbrk_r>
 8005f12:	1c43      	adds	r3, r0, #1
 8005f14:	d123      	bne.n	8005f5e <_malloc_r+0x92>
 8005f16:	230c      	movs	r3, #12
 8005f18:	6033      	str	r3, [r6, #0]
 8005f1a:	4630      	mov	r0, r6
 8005f1c:	f000 f86c 	bl	8005ff8 <__malloc_unlock>
 8005f20:	e7e3      	b.n	8005eea <_malloc_r+0x1e>
 8005f22:	6823      	ldr	r3, [r4, #0]
 8005f24:	1b5b      	subs	r3, r3, r5
 8005f26:	d417      	bmi.n	8005f58 <_malloc_r+0x8c>
 8005f28:	2b0b      	cmp	r3, #11
 8005f2a:	d903      	bls.n	8005f34 <_malloc_r+0x68>
 8005f2c:	6023      	str	r3, [r4, #0]
 8005f2e:	441c      	add	r4, r3
 8005f30:	6025      	str	r5, [r4, #0]
 8005f32:	e004      	b.n	8005f3e <_malloc_r+0x72>
 8005f34:	6863      	ldr	r3, [r4, #4]
 8005f36:	42a2      	cmp	r2, r4
 8005f38:	bf0c      	ite	eq
 8005f3a:	600b      	streq	r3, [r1, #0]
 8005f3c:	6053      	strne	r3, [r2, #4]
 8005f3e:	4630      	mov	r0, r6
 8005f40:	f000 f85a 	bl	8005ff8 <__malloc_unlock>
 8005f44:	f104 000b 	add.w	r0, r4, #11
 8005f48:	1d23      	adds	r3, r4, #4
 8005f4a:	f020 0007 	bic.w	r0, r0, #7
 8005f4e:	1ac2      	subs	r2, r0, r3
 8005f50:	d0cc      	beq.n	8005eec <_malloc_r+0x20>
 8005f52:	1a1b      	subs	r3, r3, r0
 8005f54:	50a3      	str	r3, [r4, r2]
 8005f56:	e7c9      	b.n	8005eec <_malloc_r+0x20>
 8005f58:	4622      	mov	r2, r4
 8005f5a:	6864      	ldr	r4, [r4, #4]
 8005f5c:	e7cc      	b.n	8005ef8 <_malloc_r+0x2c>
 8005f5e:	1cc4      	adds	r4, r0, #3
 8005f60:	f024 0403 	bic.w	r4, r4, #3
 8005f64:	42a0      	cmp	r0, r4
 8005f66:	d0e3      	beq.n	8005f30 <_malloc_r+0x64>
 8005f68:	1a21      	subs	r1, r4, r0
 8005f6a:	4630      	mov	r0, r6
 8005f6c:	f000 f82e 	bl	8005fcc <_sbrk_r>
 8005f70:	3001      	adds	r0, #1
 8005f72:	d1dd      	bne.n	8005f30 <_malloc_r+0x64>
 8005f74:	e7cf      	b.n	8005f16 <_malloc_r+0x4a>
 8005f76:	bf00      	nop
 8005f78:	20012efc 	.word	0x20012efc
 8005f7c:	20012f00 	.word	0x20012f00

08005f80 <_realloc_r>:
 8005f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f82:	4607      	mov	r7, r0
 8005f84:	4614      	mov	r4, r2
 8005f86:	460e      	mov	r6, r1
 8005f88:	b921      	cbnz	r1, 8005f94 <_realloc_r+0x14>
 8005f8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005f8e:	4611      	mov	r1, r2
 8005f90:	f7ff bf9c 	b.w	8005ecc <_malloc_r>
 8005f94:	b922      	cbnz	r2, 8005fa0 <_realloc_r+0x20>
 8005f96:	f7ff ff49 	bl	8005e2c <_free_r>
 8005f9a:	4625      	mov	r5, r4
 8005f9c:	4628      	mov	r0, r5
 8005f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fa0:	f000 f830 	bl	8006004 <_malloc_usable_size_r>
 8005fa4:	42a0      	cmp	r0, r4
 8005fa6:	d20f      	bcs.n	8005fc8 <_realloc_r+0x48>
 8005fa8:	4621      	mov	r1, r4
 8005faa:	4638      	mov	r0, r7
 8005fac:	f7ff ff8e 	bl	8005ecc <_malloc_r>
 8005fb0:	4605      	mov	r5, r0
 8005fb2:	2800      	cmp	r0, #0
 8005fb4:	d0f2      	beq.n	8005f9c <_realloc_r+0x1c>
 8005fb6:	4631      	mov	r1, r6
 8005fb8:	4622      	mov	r2, r4
 8005fba:	f7ff fbf7 	bl	80057ac <memcpy>
 8005fbe:	4631      	mov	r1, r6
 8005fc0:	4638      	mov	r0, r7
 8005fc2:	f7ff ff33 	bl	8005e2c <_free_r>
 8005fc6:	e7e9      	b.n	8005f9c <_realloc_r+0x1c>
 8005fc8:	4635      	mov	r5, r6
 8005fca:	e7e7      	b.n	8005f9c <_realloc_r+0x1c>

08005fcc <_sbrk_r>:
 8005fcc:	b538      	push	{r3, r4, r5, lr}
 8005fce:	4d06      	ldr	r5, [pc, #24]	; (8005fe8 <_sbrk_r+0x1c>)
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	4608      	mov	r0, r1
 8005fd6:	602b      	str	r3, [r5, #0]
 8005fd8:	f7fa ff02 	bl	8000de0 <_sbrk>
 8005fdc:	1c43      	adds	r3, r0, #1
 8005fde:	d102      	bne.n	8005fe6 <_sbrk_r+0x1a>
 8005fe0:	682b      	ldr	r3, [r5, #0]
 8005fe2:	b103      	cbz	r3, 8005fe6 <_sbrk_r+0x1a>
 8005fe4:	6023      	str	r3, [r4, #0]
 8005fe6:	bd38      	pop	{r3, r4, r5, pc}
 8005fe8:	20012fe0 	.word	0x20012fe0

08005fec <__malloc_lock>:
 8005fec:	4801      	ldr	r0, [pc, #4]	; (8005ff4 <__malloc_lock+0x8>)
 8005fee:	f000 b811 	b.w	8006014 <__retarget_lock_acquire_recursive>
 8005ff2:	bf00      	nop
 8005ff4:	20012fe8 	.word	0x20012fe8

08005ff8 <__malloc_unlock>:
 8005ff8:	4801      	ldr	r0, [pc, #4]	; (8006000 <__malloc_unlock+0x8>)
 8005ffa:	f000 b80c 	b.w	8006016 <__retarget_lock_release_recursive>
 8005ffe:	bf00      	nop
 8006000:	20012fe8 	.word	0x20012fe8

08006004 <_malloc_usable_size_r>:
 8006004:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006008:	1f18      	subs	r0, r3, #4
 800600a:	2b00      	cmp	r3, #0
 800600c:	bfbc      	itt	lt
 800600e:	580b      	ldrlt	r3, [r1, r0]
 8006010:	18c0      	addlt	r0, r0, r3
 8006012:	4770      	bx	lr

08006014 <__retarget_lock_acquire_recursive>:
 8006014:	4770      	bx	lr

08006016 <__retarget_lock_release_recursive>:
 8006016:	4770      	bx	lr

08006018 <_init>:
 8006018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601a:	bf00      	nop
 800601c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800601e:	bc08      	pop	{r3}
 8006020:	469e      	mov	lr, r3
 8006022:	4770      	bx	lr

08006024 <_fini>:
 8006024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006026:	bf00      	nop
 8006028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800602a:	bc08      	pop	{r3}
 800602c:	469e      	mov	lr, r3
 800602e:	4770      	bx	lr
