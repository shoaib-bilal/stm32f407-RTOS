
005LED_Task_Notify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007994  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08007b24  08007b24  00017b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d08  08007d08  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08007d08  08007d08  00017d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d10  08007d10  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d10  08007d10  00017d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d14  08007d14  00017d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08007d18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          000144a8  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200144c4  200144c4  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019f76  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003465  00000000  00000000  00039fc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001350  00000000  00000000  0003d428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011c8  00000000  00000000  0003e778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023db1  00000000  00000000  0003f940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015879  00000000  00000000  000636f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8286  00000000  00000000  00078f6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001511f0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005090  00000000  00000000  00151244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007b0c 	.word	0x08007b0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08007b0c 	.word	0x08007b0c

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2001441c 	.word	0x2001441c

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96e 	b.w	8000558 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468c      	mov	ip, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	f040 8083 	bne.w	80003aa <__udivmoddi4+0x116>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4617      	mov	r7, r2
 80002a8:	d947      	bls.n	800033a <__udivmoddi4+0xa6>
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	b142      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	f1c2 0020 	rsb	r0, r2, #32
 80002b4:	fa24 f000 	lsr.w	r0, r4, r0
 80002b8:	4091      	lsls	r1, r2
 80002ba:	4097      	lsls	r7, r2
 80002bc:	ea40 0c01 	orr.w	ip, r0, r1
 80002c0:	4094      	lsls	r4, r2
 80002c2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fbbc f6f8 	udiv	r6, ip, r8
 80002cc:	fa1f fe87 	uxth.w	lr, r7
 80002d0:	fb08 c116 	mls	r1, r8, r6, ip
 80002d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d8:	fb06 f10e 	mul.w	r1, r6, lr
 80002dc:	4299      	cmp	r1, r3
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x60>
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002e6:	f080 8119 	bcs.w	800051c <__udivmoddi4+0x288>
 80002ea:	4299      	cmp	r1, r3
 80002ec:	f240 8116 	bls.w	800051c <__udivmoddi4+0x288>
 80002f0:	3e02      	subs	r6, #2
 80002f2:	443b      	add	r3, r7
 80002f4:	1a5b      	subs	r3, r3, r1
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000300:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000304:	fb00 fe0e 	mul.w	lr, r0, lr
 8000308:	45a6      	cmp	lr, r4
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x8c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	f080 8105 	bcs.w	8000520 <__udivmoddi4+0x28c>
 8000316:	45a6      	cmp	lr, r4
 8000318:	f240 8102 	bls.w	8000520 <__udivmoddi4+0x28c>
 800031c:	3802      	subs	r0, #2
 800031e:	443c      	add	r4, r7
 8000320:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000324:	eba4 040e 	sub.w	r4, r4, lr
 8000328:	2600      	movs	r6, #0
 800032a:	b11d      	cbz	r5, 8000334 <__udivmoddi4+0xa0>
 800032c:	40d4      	lsrs	r4, r2
 800032e:	2300      	movs	r3, #0
 8000330:	e9c5 4300 	strd	r4, r3, [r5]
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xaa>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f282 	clz	r2, r2
 8000342:	2a00      	cmp	r2, #0
 8000344:	d150      	bne.n	80003e8 <__udivmoddi4+0x154>
 8000346:	1bcb      	subs	r3, r1, r7
 8000348:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034c:	fa1f f887 	uxth.w	r8, r7
 8000350:	2601      	movs	r6, #1
 8000352:	fbb3 fcfe 	udiv	ip, r3, lr
 8000356:	0c21      	lsrs	r1, r4, #16
 8000358:	fb0e 331c 	mls	r3, lr, ip, r3
 800035c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000360:	fb08 f30c 	mul.w	r3, r8, ip
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xe4>
 8000368:	1879      	adds	r1, r7, r1
 800036a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0xe2>
 8000370:	428b      	cmp	r3, r1
 8000372:	f200 80e9 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 8000376:	4684      	mov	ip, r0
 8000378:	1ac9      	subs	r1, r1, r3
 800037a:	b2a3      	uxth	r3, r4
 800037c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000380:	fb0e 1110 	mls	r1, lr, r0, r1
 8000384:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000388:	fb08 f800 	mul.w	r8, r8, r0
 800038c:	45a0      	cmp	r8, r4
 800038e:	d907      	bls.n	80003a0 <__udivmoddi4+0x10c>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x10a>
 8000398:	45a0      	cmp	r8, r4
 800039a:	f200 80d9 	bhi.w	8000550 <__udivmoddi4+0x2bc>
 800039e:	4618      	mov	r0, r3
 80003a0:	eba4 0408 	sub.w	r4, r4, r8
 80003a4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a8:	e7bf      	b.n	800032a <__udivmoddi4+0x96>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0x12e>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80b1 	beq.w	8000516 <__udivmoddi4+0x282>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x1cc>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0x140>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80b8 	bhi.w	8000544 <__udivmoddi4+0x2b0>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0103 	sbc.w	r1, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	468c      	mov	ip, r1
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0a8      	beq.n	8000334 <__udivmoddi4+0xa0>
 80003e2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003e6:	e7a5      	b.n	8000334 <__udivmoddi4+0xa0>
 80003e8:	f1c2 0320 	rsb	r3, r2, #32
 80003ec:	fa20 f603 	lsr.w	r6, r0, r3
 80003f0:	4097      	lsls	r7, r2
 80003f2:	fa01 f002 	lsl.w	r0, r1, r2
 80003f6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fa:	40d9      	lsrs	r1, r3
 80003fc:	4330      	orrs	r0, r6
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	fbb1 f6fe 	udiv	r6, r1, lr
 8000404:	fa1f f887 	uxth.w	r8, r7
 8000408:	fb0e 1116 	mls	r1, lr, r6, r1
 800040c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000410:	fb06 f108 	mul.w	r1, r6, r8
 8000414:	4299      	cmp	r1, r3
 8000416:	fa04 f402 	lsl.w	r4, r4, r2
 800041a:	d909      	bls.n	8000430 <__udivmoddi4+0x19c>
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000422:	f080 808d 	bcs.w	8000540 <__udivmoddi4+0x2ac>
 8000426:	4299      	cmp	r1, r3
 8000428:	f240 808a 	bls.w	8000540 <__udivmoddi4+0x2ac>
 800042c:	3e02      	subs	r6, #2
 800042e:	443b      	add	r3, r7
 8000430:	1a5b      	subs	r3, r3, r1
 8000432:	b281      	uxth	r1, r0
 8000434:	fbb3 f0fe 	udiv	r0, r3, lr
 8000438:	fb0e 3310 	mls	r3, lr, r0, r3
 800043c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000440:	fb00 f308 	mul.w	r3, r0, r8
 8000444:	428b      	cmp	r3, r1
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x1c4>
 8000448:	1879      	adds	r1, r7, r1
 800044a:	f100 3cff 	add.w	ip, r0, #4294967295
 800044e:	d273      	bcs.n	8000538 <__udivmoddi4+0x2a4>
 8000450:	428b      	cmp	r3, r1
 8000452:	d971      	bls.n	8000538 <__udivmoddi4+0x2a4>
 8000454:	3802      	subs	r0, #2
 8000456:	4439      	add	r1, r7
 8000458:	1acb      	subs	r3, r1, r3
 800045a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800045e:	e778      	b.n	8000352 <__udivmoddi4+0xbe>
 8000460:	f1c6 0c20 	rsb	ip, r6, #32
 8000464:	fa03 f406 	lsl.w	r4, r3, r6
 8000468:	fa22 f30c 	lsr.w	r3, r2, ip
 800046c:	431c      	orrs	r4, r3
 800046e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800047a:	fa21 f10c 	lsr.w	r1, r1, ip
 800047e:	431f      	orrs	r7, r3
 8000480:	0c3b      	lsrs	r3, r7, #16
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fa1f f884 	uxth.w	r8, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000492:	fb09 fa08 	mul.w	sl, r9, r8
 8000496:	458a      	cmp	sl, r1
 8000498:	fa02 f206 	lsl.w	r2, r2, r6
 800049c:	fa00 f306 	lsl.w	r3, r0, r6
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x220>
 80004a2:	1861      	adds	r1, r4, r1
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	d248      	bcs.n	800053c <__udivmoddi4+0x2a8>
 80004aa:	458a      	cmp	sl, r1
 80004ac:	d946      	bls.n	800053c <__udivmoddi4+0x2a8>
 80004ae:	f1a9 0902 	sub.w	r9, r9, #2
 80004b2:	4421      	add	r1, r4
 80004b4:	eba1 010a 	sub.w	r1, r1, sl
 80004b8:	b2bf      	uxth	r7, r7
 80004ba:	fbb1 f0fe 	udiv	r0, r1, lr
 80004be:	fb0e 1110 	mls	r1, lr, r0, r1
 80004c2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004c6:	fb00 f808 	mul.w	r8, r0, r8
 80004ca:	45b8      	cmp	r8, r7
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x24a>
 80004ce:	19e7      	adds	r7, r4, r7
 80004d0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004d4:	d22e      	bcs.n	8000534 <__udivmoddi4+0x2a0>
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d92c      	bls.n	8000534 <__udivmoddi4+0x2a0>
 80004da:	3802      	subs	r0, #2
 80004dc:	4427      	add	r7, r4
 80004de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e2:	eba7 0708 	sub.w	r7, r7, r8
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	454f      	cmp	r7, r9
 80004ec:	46c6      	mov	lr, r8
 80004ee:	4649      	mov	r1, r9
 80004f0:	d31a      	bcc.n	8000528 <__udivmoddi4+0x294>
 80004f2:	d017      	beq.n	8000524 <__udivmoddi4+0x290>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x27a>
 80004f6:	ebb3 020e 	subs.w	r2, r3, lr
 80004fa:	eb67 0701 	sbc.w	r7, r7, r1
 80004fe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000502:	40f2      	lsrs	r2, r6
 8000504:	ea4c 0202 	orr.w	r2, ip, r2
 8000508:	40f7      	lsrs	r7, r6
 800050a:	e9c5 2700 	strd	r2, r7, [r5]
 800050e:	2600      	movs	r6, #0
 8000510:	4631      	mov	r1, r6
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	462e      	mov	r6, r5
 8000518:	4628      	mov	r0, r5
 800051a:	e70b      	b.n	8000334 <__udivmoddi4+0xa0>
 800051c:	4606      	mov	r6, r0
 800051e:	e6e9      	b.n	80002f4 <__udivmoddi4+0x60>
 8000520:	4618      	mov	r0, r3
 8000522:	e6fd      	b.n	8000320 <__udivmoddi4+0x8c>
 8000524:	4543      	cmp	r3, r8
 8000526:	d2e5      	bcs.n	80004f4 <__udivmoddi4+0x260>
 8000528:	ebb8 0e02 	subs.w	lr, r8, r2
 800052c:	eb69 0104 	sbc.w	r1, r9, r4
 8000530:	3801      	subs	r0, #1
 8000532:	e7df      	b.n	80004f4 <__udivmoddi4+0x260>
 8000534:	4608      	mov	r0, r1
 8000536:	e7d2      	b.n	80004de <__udivmoddi4+0x24a>
 8000538:	4660      	mov	r0, ip
 800053a:	e78d      	b.n	8000458 <__udivmoddi4+0x1c4>
 800053c:	4681      	mov	r9, r0
 800053e:	e7b9      	b.n	80004b4 <__udivmoddi4+0x220>
 8000540:	4666      	mov	r6, ip
 8000542:	e775      	b.n	8000430 <__udivmoddi4+0x19c>
 8000544:	4630      	mov	r0, r6
 8000546:	e74a      	b.n	80003de <__udivmoddi4+0x14a>
 8000548:	f1ac 0c02 	sub.w	ip, ip, #2
 800054c:	4439      	add	r1, r7
 800054e:	e713      	b.n	8000378 <__udivmoddi4+0xe4>
 8000550:	3802      	subs	r0, #2
 8000552:	443c      	add	r4, r7
 8000554:	e724      	b.n	80003a0 <__udivmoddi4+0x10c>
 8000556:	bf00      	nop

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 fc4b 	bl	8000dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f897 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 f8ff 	bl	800076c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //Enable the CYCCNT counter
  DWT_CTRL |= (1<<0);
 800056e:	4b3b      	ldr	r3, [pc, #236]	; (800065c <main+0x100>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a3a      	ldr	r2, [pc, #232]	; (800065c <main+0x100>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 800057a:	4839      	ldr	r0, [pc, #228]	; (8000660 <main+0x104>)
 800057c:	f004 fffc 	bl	8005578 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8000580:	f007 fa66 	bl	8007a50 <SEGGER_SYSVIEW_Conf>

 // SEGGER_SYSVIEW_Start();  //this line is there in segger_uart.c under segger->config->Rec

  status=xTaskCreate(led_green_handler, "led_green_task", 200, NULL, 3, &task1_handle);
 8000584:	4b37      	ldr	r3, [pc, #220]	; (8000664 <main+0x108>)
 8000586:	9301      	str	r3, [sp, #4]
 8000588:	2303      	movs	r3, #3
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	2300      	movs	r3, #0
 800058e:	22c8      	movs	r2, #200	; 0xc8
 8000590:	4935      	ldr	r1, [pc, #212]	; (8000668 <main+0x10c>)
 8000592:	4836      	ldr	r0, [pc, #216]	; (800066c <main+0x110>)
 8000594:	f002 fc8c 	bl	8002eb0 <xTaskCreate>
 8000598:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d00a      	beq.n	80005b6 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005a4:	f383 8811 	msr	BASEPRI, r3
 80005a8:	f3bf 8f6f 	isb	sy
 80005ac:	f3bf 8f4f 	dsb	sy
 80005b0:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b2:	bf00      	nop
 80005b4:	e7fe      	b.n	80005b4 <main+0x58>

  next_task_handle=task1_handle;
 80005b6:	4b2b      	ldr	r3, [pc, #172]	; (8000664 <main+0x108>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a2d      	ldr	r2, [pc, #180]	; (8000670 <main+0x114>)
 80005bc:	6013      	str	r3, [r2, #0]

  status=xTaskCreate(led_orange_handler, "led_orange_task", 200, NULL, 2, &task2_handle);
 80005be:	4b2d      	ldr	r3, [pc, #180]	; (8000674 <main+0x118>)
 80005c0:	9301      	str	r3, [sp, #4]
 80005c2:	2302      	movs	r3, #2
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2300      	movs	r3, #0
 80005c8:	22c8      	movs	r2, #200	; 0xc8
 80005ca:	492b      	ldr	r1, [pc, #172]	; (8000678 <main+0x11c>)
 80005cc:	482b      	ldr	r0, [pc, #172]	; (800067c <main+0x120>)
 80005ce:	f002 fc6f 	bl	8002eb0 <xTaskCreate>
 80005d2:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d00a      	beq.n	80005f0 <main+0x94>
        __asm volatile
 80005da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005de:	f383 8811 	msr	BASEPRI, r3
 80005e2:	f3bf 8f6f 	isb	sy
 80005e6:	f3bf 8f4f 	dsb	sy
 80005ea:	60fb      	str	r3, [r7, #12]
    }
 80005ec:	bf00      	nop
 80005ee:	e7fe      	b.n	80005ee <main+0x92>

  status=xTaskCreate(led_red_handler, "led_red_task", 200, NULL, 1, &task3_handle);
 80005f0:	4b23      	ldr	r3, [pc, #140]	; (8000680 <main+0x124>)
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	2301      	movs	r3, #1
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2300      	movs	r3, #0
 80005fa:	22c8      	movs	r2, #200	; 0xc8
 80005fc:	4921      	ldr	r1, [pc, #132]	; (8000684 <main+0x128>)
 80005fe:	4822      	ldr	r0, [pc, #136]	; (8000688 <main+0x12c>)
 8000600:	f002 fc56 	bl	8002eb0 <xTaskCreate>
 8000604:	6178      	str	r0, [r7, #20]

   configASSERT(status == pdPASS);
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d00a      	beq.n	8000622 <main+0xc6>
        __asm volatile
 800060c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000610:	f383 8811 	msr	BASEPRI, r3
 8000614:	f3bf 8f6f 	isb	sy
 8000618:	f3bf 8f4f 	dsb	sy
 800061c:	60bb      	str	r3, [r7, #8]
    }
 800061e:	bf00      	nop
 8000620:	e7fe      	b.n	8000620 <main+0xc4>

   status=xTaskCreate(button_handler, "button_task", 200, NULL, 4, &task4_handle);
 8000622:	4b1a      	ldr	r3, [pc, #104]	; (800068c <main+0x130>)
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	2304      	movs	r3, #4
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2300      	movs	r3, #0
 800062c:	22c8      	movs	r2, #200	; 0xc8
 800062e:	4918      	ldr	r1, [pc, #96]	; (8000690 <main+0x134>)
 8000630:	4818      	ldr	r0, [pc, #96]	; (8000694 <main+0x138>)
 8000632:	f002 fc3d 	bl	8002eb0 <xTaskCreate>
 8000636:	6178      	str	r0, [r7, #20]

   configASSERT(status == pdPASS);
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	2b01      	cmp	r3, #1
 800063c:	d00a      	beq.n	8000654 <main+0xf8>
        __asm volatile
 800063e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000642:	f383 8811 	msr	BASEPRI, r3
 8000646:	f3bf 8f6f 	isb	sy
 800064a:	f3bf 8f4f 	dsb	sy
 800064e:	607b      	str	r3, [r7, #4]
    }
 8000650:	bf00      	nop
 8000652:	e7fe      	b.n	8000652 <main+0xf6>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 8000654:	f002 ff12 	bl	800347c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000658:	e7fe      	b.n	8000658 <main+0xfc>
 800065a:	bf00      	nop
 800065c:	e0001000 	.word	0xe0001000
 8000660:	0007a120 	.word	0x0007a120
 8000664:	20014380 	.word	0x20014380
 8000668:	08007b24 	.word	0x08007b24
 800066c:	08000a29 	.word	0x08000a29
 8000670:	20000038 	.word	0x20000038
 8000674:	20014384 	.word	0x20014384
 8000678:	08007b34 	.word	0x08007b34
 800067c:	08000a99 	.word	0x08000a99
 8000680:	20014388 	.word	0x20014388
 8000684:	08007b44 	.word	0x08007b44
 8000688:	08000b09 	.word	0x08000b09
 800068c:	2001438c 	.word	0x2001438c
 8000690:	08007b54 	.word	0x08007b54
 8000694:	08000b81 	.word	0x08000b81

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	; 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	2230      	movs	r2, #48	; 0x30
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f007 fa28 	bl	8007afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	4b28      	ldr	r3, [pc, #160]	; (8000764 <SystemClock_Config+0xcc>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	4a27      	ldr	r2, [pc, #156]	; (8000764 <SystemClock_Config+0xcc>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	; 0x40
 80006cc:	4b25      	ldr	r3, [pc, #148]	; (8000764 <SystemClock_Config+0xcc>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	4b22      	ldr	r3, [pc, #136]	; (8000768 <SystemClock_Config+0xd0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a21      	ldr	r2, [pc, #132]	; (8000768 <SystemClock_Config+0xd0>)
 80006e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <SystemClock_Config+0xd0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f4:	2302      	movs	r3, #2
 80006f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2310      	movs	r3, #16
 80006fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	2302      	movs	r3, #2
 8000702:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000704:	2300      	movs	r3, #0
 8000706:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000708:	2308      	movs	r3, #8
 800070a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800070c:	23a8      	movs	r3, #168	; 0xa8
 800070e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000710:	2302      	movs	r3, #2
 8000712:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000714:	2307      	movs	r3, #7
 8000716:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	f107 0320 	add.w	r3, r7, #32
 800071c:	4618      	mov	r0, r3
 800071e:	f000 fe79 	bl	8001414 <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000728:	f000 fa84 	bl	8000c34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	230f      	movs	r3, #15
 800072e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000730:	2302      	movs	r3, #2
 8000732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000738:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800073c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000742:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2105      	movs	r1, #5
 800074a:	4618      	mov	r0, r3
 800074c:	f001 f8da 	bl	8001904 <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000756:	f000 fa6d 	bl	8000c34 <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	3750      	adds	r7, #80	; 0x50
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08c      	sub	sp, #48	; 0x30
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
 8000786:	4ba2      	ldr	r3, [pc, #648]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4aa1      	ldr	r2, [pc, #644]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 800078c:	f043 0310 	orr.w	r3, r3, #16
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b9f      	ldr	r3, [pc, #636]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0310 	and.w	r3, r3, #16
 800079a:	61bb      	str	r3, [r7, #24]
 800079c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
 80007a2:	4b9b      	ldr	r3, [pc, #620]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a9a      	ldr	r2, [pc, #616]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007a8:	f043 0304 	orr.w	r3, r3, #4
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b98      	ldr	r3, [pc, #608]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0304 	and.w	r3, r3, #4
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	4b94      	ldr	r3, [pc, #592]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a93      	ldr	r2, [pc, #588]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b91      	ldr	r3, [pc, #580]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	4b8d      	ldr	r3, [pc, #564]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a8c      	ldr	r2, [pc, #560]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b8a      	ldr	r3, [pc, #552]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	4b86      	ldr	r3, [pc, #536]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a85      	ldr	r2, [pc, #532]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b83      	ldr	r3, [pc, #524]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b7f      	ldr	r3, [pc, #508]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a7e      	ldr	r2, [pc, #504]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 8000818:	f043 0308 	orr.w	r3, r3, #8
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b7c      	ldr	r3, [pc, #496]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2108      	movs	r1, #8
 800082e:	4879      	ldr	r0, [pc, #484]	; (8000a14 <MX_GPIO_Init+0x2a8>)
 8000830:	f000 fdbc 	bl	80013ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000834:	2201      	movs	r2, #1
 8000836:	2101      	movs	r1, #1
 8000838:	4877      	ldr	r0, [pc, #476]	; (8000a18 <MX_GPIO_Init+0x2ac>)
 800083a:	f000 fdb7 	bl	80013ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800083e:	2200      	movs	r2, #0
 8000840:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000844:	4875      	ldr	r0, [pc, #468]	; (8000a1c <MX_GPIO_Init+0x2b0>)
 8000846:	f000 fdb1 	bl	80013ac <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800084a:	2308      	movs	r3, #8
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	2301      	movs	r3, #1
 8000850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	486c      	ldr	r0, [pc, #432]	; (8000a14 <MX_GPIO_Init+0x2a8>)
 8000862:	f000 fbef 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000866:	2301      	movs	r3, #1
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	4866      	ldr	r0, [pc, #408]	; (8000a18 <MX_GPIO_Init+0x2ac>)
 800087e:	f000 fbe1 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000882:	2308      	movs	r3, #8
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000892:	2305      	movs	r3, #5
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	485e      	ldr	r0, [pc, #376]	; (8000a18 <MX_GPIO_Init+0x2ac>)
 800089e:	f000 fbd1 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008a2:	2301      	movs	r3, #1
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	485a      	ldr	r0, [pc, #360]	; (8000a20 <MX_GPIO_Init+0x2b4>)
 80008b8:	f000 fbc4 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008bc:	2310      	movs	r3, #16
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008cc:	2306      	movs	r3, #6
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	4852      	ldr	r0, [pc, #328]	; (8000a20 <MX_GPIO_Init+0x2b4>)
 80008d8:	f000 fbb4 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008dc:	23e0      	movs	r3, #224	; 0xe0
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e0:	2302      	movs	r3, #2
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008ec:	2305      	movs	r3, #5
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	484a      	ldr	r0, [pc, #296]	; (8000a20 <MX_GPIO_Init+0x2b4>)
 80008f8:	f000 fba4 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008fc:	2304      	movs	r3, #4
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000900:	2300      	movs	r3, #0
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	4845      	ldr	r0, [pc, #276]	; (8000a24 <MX_GPIO_Init+0x2b8>)
 8000910:	f000 fb98 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000926:	2305      	movs	r3, #5
 8000928:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	483c      	ldr	r0, [pc, #240]	; (8000a24 <MX_GPIO_Init+0x2b8>)
 8000932:	f000 fb87 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000936:	f24f 0310 	movw	r3, #61456	; 0xf010
 800093a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093c:	2301      	movs	r3, #1
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	4833      	ldr	r0, [pc, #204]	; (8000a1c <MX_GPIO_Init+0x2b0>)
 8000950:	f000 fb78 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000954:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000966:	2306      	movs	r3, #6
 8000968:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4829      	ldr	r0, [pc, #164]	; (8000a18 <MX_GPIO_Init+0x2ac>)
 8000972:	f000 fb67 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000976:	f44f 7300 	mov.w	r3, #512	; 0x200
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	4825      	ldr	r0, [pc, #148]	; (8000a20 <MX_GPIO_Init+0x2b4>)
 800098c:	f000 fb5a 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000990:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009a2:	230a      	movs	r3, #10
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	481c      	ldr	r0, [pc, #112]	; (8000a20 <MX_GPIO_Init+0x2b4>)
 80009ae:	f000 fb49 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009b2:	2320      	movs	r3, #32
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b6:	2300      	movs	r3, #0
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4815      	ldr	r0, [pc, #84]	; (8000a1c <MX_GPIO_Init+0x2b0>)
 80009c6:	f000 fb3d 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009ca:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d0:	2312      	movs	r3, #18
 80009d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009dc:	2304      	movs	r3, #4
 80009de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	480f      	ldr	r0, [pc, #60]	; (8000a24 <MX_GPIO_Init+0x2b8>)
 80009e8:	f000 fb2c 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009ec:	2302      	movs	r3, #2
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	4804      	ldr	r0, [pc, #16]	; (8000a14 <MX_GPIO_Init+0x2a8>)
 8000a02:	f000 fb1f 	bl	8001044 <HAL_GPIO_Init>

}
 8000a06:	bf00      	nop
 8000a08:	3730      	adds	r7, #48	; 0x30
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40020800 	.word	0x40020800
 8000a1c:	40020c00 	.word	0x40020c00
 8000a20:	40020000 	.word	0x40020000
 8000a24:	40020400 	.word	0x40020400

08000a28 <led_green_handler>:

/* USER CODE BEGIN 4 */


static void led_green_handler(void *parameters)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af02      	add	r7, sp, #8
 8000a2e:	6078      	str	r0, [r7, #4]

    BaseType_t status;
	while(1)
	{

		SEGGER_SYSVIEW_PrintfTarget("Toggling Green led");
 8000a30:	4814      	ldr	r0, [pc, #80]	; (8000a84 <led_green_handler+0x5c>)
 8000a32:	f006 ff61 	bl	80078f8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000a36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a3a:	4813      	ldr	r0, [pc, #76]	; (8000a88 <led_green_handler+0x60>)
 8000a3c:	f000 fccf 	bl	80013de <HAL_GPIO_TogglePin>
		status= xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000) );
 8000a40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	2300      	movs	r3, #0
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f003 f9fd 	bl	8003e4c <xTaskGenericNotifyWait>
 8000a52:	60f8      	str	r0, [r7, #12]
		if (status== pdTRUE)
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d1ea      	bne.n	8000a30 <led_green_handler+0x8>
		{
			vTaskSuspendAll();
 8000a5a:	f002 fd71 	bl	8003540 <vTaskSuspendAll>
			next_task_handle= task2_handle;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <led_green_handler+0x64>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a0b      	ldr	r2, [pc, #44]	; (8000a90 <led_green_handler+0x68>)
 8000a64:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000a66:	f002 fd79 	bl	800355c <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_GREEN_PIN, GPIO_PIN_SET);
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a70:	4805      	ldr	r0, [pc, #20]	; (8000a88 <led_green_handler+0x60>)
 8000a72:	f000 fc9b 	bl	80013ac <HAL_GPIO_WritePin>
			//SEGGER_SYSVIEW_PrintfTarget("Deleting Green tasks");
			//vTaskDelete(NULL);
			SEGGER_SYSVIEW_PrintfTarget("Suspending Green tasks");
 8000a76:	4807      	ldr	r0, [pc, #28]	; (8000a94 <led_green_handler+0x6c>)
 8000a78:	f006 ff3e 	bl	80078f8 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskSuspend(NULL);
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f002 fbb3 	bl	80031e8 <vTaskSuspend>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green led");
 8000a82:	e7d5      	b.n	8000a30 <led_green_handler+0x8>
 8000a84:	08007b60 	.word	0x08007b60
 8000a88:	40020c00 	.word	0x40020c00
 8000a8c:	20014384 	.word	0x20014384
 8000a90:	20000038 	.word	0x20000038
 8000a94:	08007b74 	.word	0x08007b74

08000a98 <led_orange_handler>:
		}
	}
}

static void led_orange_handler(void *parameters)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af02      	add	r7, sp, #8
 8000a9e:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling Orange led");
 8000aa0:	4814      	ldr	r0, [pc, #80]	; (8000af4 <led_orange_handler+0x5c>)
 8000aa2:	f006 ff29 	bl	80078f8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000aa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aaa:	4813      	ldr	r0, [pc, #76]	; (8000af8 <led_orange_handler+0x60>)
 8000aac:	f000 fc97 	bl	80013de <HAL_GPIO_TogglePin>
		status= xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800) );
 8000ab0:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2100      	movs	r1, #0
 8000abc:	2000      	movs	r0, #0
 8000abe:	f003 f9c5 	bl	8003e4c <xTaskGenericNotifyWait>
 8000ac2:	60f8      	str	r0, [r7, #12]
		if (status== pdTRUE)
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d1ea      	bne.n	8000aa0 <led_orange_handler+0x8>
		{

			vTaskSuspendAll();
 8000aca:	f002 fd39 	bl	8003540 <vTaskSuspendAll>
			next_task_handle= task3_handle;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <led_orange_handler+0x64>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a0b      	ldr	r2, [pc, #44]	; (8000b00 <led_orange_handler+0x68>)
 8000ad4:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000ad6:	f002 fd41 	bl	800355c <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_ORANGE_PIN, GPIO_PIN_SET);
 8000ada:	2201      	movs	r2, #1
 8000adc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae0:	4805      	ldr	r0, [pc, #20]	; (8000af8 <led_orange_handler+0x60>)
 8000ae2:	f000 fc63 	bl	80013ac <HAL_GPIO_WritePin>
			//SEGGER_SYSVIEW_PrintfTarget("Deleting Orange tasks");
			//vTaskDelete(NULL);
			SEGGER_SYSVIEW_PrintfTarget("Suspending Orange tasks");
 8000ae6:	4807      	ldr	r0, [pc, #28]	; (8000b04 <led_orange_handler+0x6c>)
 8000ae8:	f006 ff06 	bl	80078f8 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskSuspend(NULL);
 8000aec:	2000      	movs	r0, #0
 8000aee:	f002 fb7b 	bl	80031e8 <vTaskSuspend>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Orange led");
 8000af2:	e7d5      	b.n	8000aa0 <led_orange_handler+0x8>
 8000af4:	08007b8c 	.word	0x08007b8c
 8000af8:	40020c00 	.word	0x40020c00
 8000afc:	20014388 	.word	0x20014388
 8000b00:	20000038 	.word	0x20000038
 8000b04:	08007ba0 	.word	0x08007ba0

08000b08 <led_red_handler>:
		}
	}
}

static void led_red_handler(void *parameters)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af02      	add	r7, sp, #8
 8000b0e:	6078      	str	r0, [r7, #4]

	BaseType_t status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red led");
 8000b10:	4816      	ldr	r0, [pc, #88]	; (8000b6c <led_red_handler+0x64>)
 8000b12:	f006 fef1 	bl	80078f8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000b16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b1a:	4815      	ldr	r0, [pc, #84]	; (8000b70 <led_red_handler+0x68>)
 8000b1c:	f000 fc5f 	bl	80013de <HAL_GPIO_TogglePin>
		status= xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400) );
 8000b20:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	2300      	movs	r3, #0
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	f003 f98d 	bl	8003e4c <xTaskGenericNotifyWait>
 8000b32:	60f8      	str	r0, [r7, #12]
		if (status== pdTRUE)
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d1ea      	bne.n	8000b10 <led_red_handler+0x8>
		{

			vTaskSuspendAll();
 8000b3a:	f002 fd01 	bl	8003540 <vTaskSuspendAll>
			next_task_handle= NULL;
 8000b3e:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <led_red_handler+0x6c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
			next_task_handle= task1_handle;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <led_red_handler+0x70>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <led_red_handler+0x6c>)
 8000b4a:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000b4c:	f002 fd06 	bl	800355c <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_RED_PIN, GPIO_PIN_SET);
 8000b50:	2201      	movs	r2, #1
 8000b52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b56:	4806      	ldr	r0, [pc, #24]	; (8000b70 <led_red_handler+0x68>)
 8000b58:	f000 fc28 	bl	80013ac <HAL_GPIO_WritePin>
			//SEGGER_SYSVIEW_PrintfTarget("Deleting Button tasks");
			//vTaskDelete(task4_handle);
			//SEGGER_SYSVIEW_PrintfTarget("Deleting Red tasks");
			//vTaskDelete(NULL);
			SEGGER_SYSVIEW_PrintfTarget("Suspending Red tasks");
 8000b5c:	4807      	ldr	r0, [pc, #28]	; (8000b7c <led_red_handler+0x74>)
 8000b5e:	f006 fecb 	bl	80078f8 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskSuspend(NULL);
 8000b62:	2000      	movs	r0, #0
 8000b64:	f002 fb40 	bl	80031e8 <vTaskSuspend>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red led");
 8000b68:	e7d2      	b.n	8000b10 <led_red_handler+0x8>
 8000b6a:	bf00      	nop
 8000b6c:	08007bb8 	.word	0x08007bb8
 8000b70:	40020c00 	.word	0x40020c00
 8000b74:	20000038 	.word	0x20000038
 8000b78:	20014380 	.word	0x20014380
 8000b7c:	08007bcc 	.word	0x08007bcc

08000b80 <button_handler>:
	}

}

static void button_handler(void *parameters)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af02      	add	r7, sp, #8
 8000b86:	6078      	str	r0, [r7, #4]

	static uint8_t btn_cnt=0;

	while(1)
	{
		btn=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000b88:	2101      	movs	r1, #1
 8000b8a:	481b      	ldr	r0, [pc, #108]	; (8000bf8 <button_handler+0x78>)
 8000b8c:	f000 fbf6 	bl	800137c <HAL_GPIO_ReadPin>
 8000b90:	4603      	mov	r3, r0
 8000b92:	73bb      	strb	r3, [r7, #14]
		if (btn)
 8000b94:	7bbb      	ldrb	r3, [r7, #14]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d028      	beq.n	8000bec <button_handler+0x6c>
		{
			if (prevbtn==0)
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d125      	bne.n	8000bec <button_handler+0x6c>
			{
			++btn_cnt;
 8000ba0:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <button_handler+0x7c>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	b2da      	uxtb	r2, r3
 8000ba8:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <button_handler+0x7c>)
 8000baa:	701a      	strb	r2, [r3, #0]
				if (btn_cnt!=4)
 8000bac:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <button_handler+0x7c>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b04      	cmp	r3, #4
 8000bb2:	d009      	beq.n	8000bc8 <button_handler+0x48>
				{
				 xTaskNotify( next_task_handle,0,eNoAction );
 8000bb4:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <button_handler+0x80>)
 8000bb6:	6818      	ldr	r0, [r3, #0]
 8000bb8:	2300      	movs	r3, #0
 8000bba:	9300      	str	r3, [sp, #0]
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	f003 f9cb 	bl	8003f5c <xTaskGenericNotify>
 8000bc6:	e011      	b.n	8000bec <button_handler+0x6c>
				}
				else
				{
					btn_cnt=0;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <button_handler+0x7c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
					vTaskResume(task1_handle);
 8000bce:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <button_handler+0x84>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f002 fbe8 	bl	80033a8 <vTaskResume>
					vTaskResume(task2_handle);
 8000bd8:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <button_handler+0x88>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f002 fbe3 	bl	80033a8 <vTaskResume>
					vTaskResume(task3_handle);
 8000be2:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <button_handler+0x8c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f002 fbde 	bl	80033a8 <vTaskResume>
				}

			}
		}
		prevbtn=btn;
 8000bec:	7bbb      	ldrb	r3, [r7, #14]
 8000bee:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 8000bf0:	200a      	movs	r0, #10
 8000bf2:	f002 fac1 	bl	8003178 <vTaskDelay>
		btn=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000bf6:	e7c7      	b.n	8000b88 <button_handler+0x8>
 8000bf8:	40020000 	.word	0x40020000
 8000bfc:	2000003c 	.word	0x2000003c
 8000c00:	20000038 	.word	0x20000038
 8000c04:	20014380 	.word	0x20014380
 8000c08:	20014384 	.word	0x20014384
 8000c0c:	20014388 	.word	0x20014388

08000c10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d101      	bne.n	8000c26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c22:	f000 f90d 	bl	8000e40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40001000 	.word	0x40001000

08000c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c38:	b672      	cpsid	i
}
 8000c3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <Error_Handler+0x8>
	...

08000c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	4a0f      	ldr	r2, [pc, #60]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c54:	6453      	str	r3, [r2, #68]	; 0x44
 8000c56:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	603b      	str	r3, [r7, #0]
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	4a08      	ldr	r2, [pc, #32]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c70:	6413      	str	r3, [r2, #64]	; 0x40
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000c7e:	f003 ff1b 	bl	8004ab8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40023800 	.word	0x40023800

08000c90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08c      	sub	sp, #48	; 0x30
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	2036      	movs	r0, #54	; 0x36
 8000ca6:	f000 f9a3 	bl	8000ff0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000caa:	2036      	movs	r0, #54	; 0x36
 8000cac:	f000 f9bc 	bl	8001028 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	4b1f      	ldr	r3, [pc, #124]	; (8000d34 <HAL_InitTick+0xa4>)
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb8:	4a1e      	ldr	r2, [pc, #120]	; (8000d34 <HAL_InitTick+0xa4>)
 8000cba:	f043 0310 	orr.w	r3, r3, #16
 8000cbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc0:	4b1c      	ldr	r3, [pc, #112]	; (8000d34 <HAL_InitTick+0xa4>)
 8000cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc4:	f003 0310 	and.w	r3, r3, #16
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ccc:	f107 0210 	add.w	r2, r7, #16
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	4611      	mov	r1, r2
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 fffc 	bl	8001cd4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000cdc:	f000 ffe6 	bl	8001cac <HAL_RCC_GetPCLK1Freq>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ce8:	4a13      	ldr	r2, [pc, #76]	; (8000d38 <HAL_InitTick+0xa8>)
 8000cea:	fba2 2303 	umull	r2, r3, r2, r3
 8000cee:	0c9b      	lsrs	r3, r3, #18
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <HAL_InitTick+0xac>)
 8000cf6:	4a12      	ldr	r2, [pc, #72]	; (8000d40 <HAL_InitTick+0xb0>)
 8000cf8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <HAL_InitTick+0xac>)
 8000cfc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d00:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d02:	4a0e      	ldr	r2, [pc, #56]	; (8000d3c <HAL_InitTick+0xac>)
 8000d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d06:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <HAL_InitTick+0xac>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <HAL_InitTick+0xac>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000d14:	4809      	ldr	r0, [pc, #36]	; (8000d3c <HAL_InitTick+0xac>)
 8000d16:	f001 f80f 	bl	8001d38 <HAL_TIM_Base_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d104      	bne.n	8000d2a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000d20:	4806      	ldr	r0, [pc, #24]	; (8000d3c <HAL_InitTick+0xac>)
 8000d22:	f001 f863 	bl	8001dec <HAL_TIM_Base_Start_IT>
 8000d26:	4603      	mov	r3, r0
 8000d28:	e000      	b.n	8000d2c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3730      	adds	r7, #48	; 0x30
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40023800 	.word	0x40023800
 8000d38:	431bde83 	.word	0x431bde83
 8000d3c:	20014390 	.word	0x20014390
 8000d40:	40001000 	.word	0x40001000

08000d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <NMI_Handler+0x4>

08000d4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <HardFault_Handler+0x4>

08000d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <MemManage_Handler+0x4>

08000d56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <BusFault_Handler+0x4>

08000d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <UsageFault_Handler+0x4>

08000d62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d74:	4802      	ldr	r0, [pc, #8]	; (8000d80 <TIM6_DAC_IRQHandler+0x10>)
 8000d76:	f001 f8a9 	bl	8001ecc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20014390 	.word	0x20014390

08000d84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <SystemInit+0x20>)
 8000d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d8e:	4a05      	ldr	r2, [pc, #20]	; (8000da4 <SystemInit+0x20>)
 8000d90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000da8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dac:	480d      	ldr	r0, [pc, #52]	; (8000de4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dae:	490e      	ldr	r1, [pc, #56]	; (8000de8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000db0:	4a0e      	ldr	r2, [pc, #56]	; (8000dec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db4:	e002      	b.n	8000dbc <LoopCopyDataInit>

08000db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dba:	3304      	adds	r3, #4

08000dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc0:	d3f9      	bcc.n	8000db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc2:	4a0b      	ldr	r2, [pc, #44]	; (8000df0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dc4:	4c0b      	ldr	r4, [pc, #44]	; (8000df4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc8:	e001      	b.n	8000dce <LoopFillZerobss>

08000dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dcc:	3204      	adds	r2, #4

08000dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd0:	d3fb      	bcc.n	8000dca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dd2:	f7ff ffd7 	bl	8000d84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dd6:	f006 fe51 	bl	8007a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dda:	f7ff fbbf 	bl	800055c <main>
  bx  lr    
 8000dde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000de0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000dec:	08007d18 	.word	0x08007d18
  ldr r2, =_sbss
 8000df0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000df4:	200144c4 	.word	0x200144c4

08000df8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df8:	e7fe      	b.n	8000df8 <ADC_IRQHandler>
	...

08000dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <HAL_Init+0x40>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a0d      	ldr	r2, [pc, #52]	; (8000e3c <HAL_Init+0x40>)
 8000e06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <HAL_Init+0x40>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <HAL_Init+0x40>)
 8000e12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <HAL_Init+0x40>)
 8000e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e24:	2003      	movs	r0, #3
 8000e26:	f000 f8d8 	bl	8000fda <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f7ff ff30 	bl	8000c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e30:	f7ff ff06 	bl	8000c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40023c00 	.word	0x40023c00

08000e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_IncTick+0x20>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_IncTick+0x24>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4413      	add	r3, r2
 8000e50:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <HAL_IncTick+0x24>)
 8000e52:	6013      	str	r3, [r2, #0]
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000008 	.word	0x20000008
 8000e64:	200143d8 	.word	0x200143d8

08000e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e6c:	4b03      	ldr	r3, [pc, #12]	; (8000e7c <HAL_GetTick+0x14>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	200143d8 	.word	0x200143d8

08000e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e96:	68ba      	ldr	r2, [r7, #8]
 8000e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eb2:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	60d3      	str	r3, [r2, #12]
}
 8000eb8:	bf00      	nop
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	0a1b      	lsrs	r3, r3, #8
 8000ed2:	f003 0307 	and.w	r3, r3, #7
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	db0b      	blt.n	8000f0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	f003 021f 	and.w	r2, r3, #31
 8000efc:	4907      	ldr	r1, [pc, #28]	; (8000f1c <__NVIC_EnableIRQ+0x38>)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	095b      	lsrs	r3, r3, #5
 8000f04:	2001      	movs	r0, #1
 8000f06:	fa00 f202 	lsl.w	r2, r0, r2
 8000f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000e100 	.word	0xe000e100

08000f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	6039      	str	r1, [r7, #0]
 8000f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	db0a      	blt.n	8000f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	490c      	ldr	r1, [pc, #48]	; (8000f6c <__NVIC_SetPriority+0x4c>)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	0112      	lsls	r2, r2, #4
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	440b      	add	r3, r1
 8000f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f48:	e00a      	b.n	8000f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	4908      	ldr	r1, [pc, #32]	; (8000f70 <__NVIC_SetPriority+0x50>)
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	f003 030f 	and.w	r3, r3, #15
 8000f56:	3b04      	subs	r3, #4
 8000f58:	0112      	lsls	r2, r2, #4
 8000f5a:	b2d2      	uxtb	r2, r2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	761a      	strb	r2, [r3, #24]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000e100 	.word	0xe000e100
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b089      	sub	sp, #36	; 0x24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f1c3 0307 	rsb	r3, r3, #7
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	bf28      	it	cs
 8000f92:	2304      	movcs	r3, #4
 8000f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3304      	adds	r3, #4
 8000f9a:	2b06      	cmp	r3, #6
 8000f9c:	d902      	bls.n	8000fa4 <NVIC_EncodePriority+0x30>
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3b03      	subs	r3, #3
 8000fa2:	e000      	b.n	8000fa6 <NVIC_EncodePriority+0x32>
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43da      	mvns	r2, r3
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc6:	43d9      	mvns	r1, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fcc:	4313      	orrs	r3, r2
         );
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3724      	adds	r7, #36	; 0x24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff ff4c 	bl	8000e80 <__NVIC_SetPriorityGrouping>
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001002:	f7ff ff61 	bl	8000ec8 <__NVIC_GetPriorityGrouping>
 8001006:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	68b9      	ldr	r1, [r7, #8]
 800100c:	6978      	ldr	r0, [r7, #20]
 800100e:	f7ff ffb1 	bl	8000f74 <NVIC_EncodePriority>
 8001012:	4602      	mov	r2, r0
 8001014:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001018:	4611      	mov	r1, r2
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff ff80 	bl	8000f20 <__NVIC_SetPriority>
}
 8001020:	bf00      	nop
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff ff54 	bl	8000ee4 <__NVIC_EnableIRQ>
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001044:	b480      	push	{r7}
 8001046:	b089      	sub	sp, #36	; 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001056:	2300      	movs	r3, #0
 8001058:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
 800105e:	e16b      	b.n	8001338 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001060:	2201      	movs	r2, #1
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	4013      	ands	r3, r2
 8001072:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	429a      	cmp	r2, r3
 800107a:	f040 815a 	bne.w	8001332 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	2b01      	cmp	r3, #1
 8001088:	d005      	beq.n	8001096 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001092:	2b02      	cmp	r3, #2
 8001094:	d130      	bne.n	80010f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	2203      	movs	r2, #3
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	68da      	ldr	r2, [r3, #12]
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010cc:	2201      	movs	r2, #1
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	091b      	lsrs	r3, r3, #4
 80010e2:	f003 0201 	and.w	r2, r3, #1
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	2b03      	cmp	r3, #3
 8001102:	d017      	beq.n	8001134 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	2203      	movs	r2, #3
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d123      	bne.n	8001188 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	08da      	lsrs	r2, r3, #3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3208      	adds	r2, #8
 8001148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800114c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	f003 0307 	and.w	r3, r3, #7
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	220f      	movs	r2, #15
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	691a      	ldr	r2, [r3, #16]
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	08da      	lsrs	r2, r3, #3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3208      	adds	r2, #8
 8001182:	69b9      	ldr	r1, [r7, #24]
 8001184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	2203      	movs	r2, #3
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0203 	and.w	r2, r3, #3
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f000 80b4 	beq.w	8001332 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	4b60      	ldr	r3, [pc, #384]	; (8001350 <HAL_GPIO_Init+0x30c>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	4a5f      	ldr	r2, [pc, #380]	; (8001350 <HAL_GPIO_Init+0x30c>)
 80011d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d8:	6453      	str	r3, [r2, #68]	; 0x44
 80011da:	4b5d      	ldr	r3, [pc, #372]	; (8001350 <HAL_GPIO_Init+0x30c>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011e6:	4a5b      	ldr	r2, [pc, #364]	; (8001354 <HAL_GPIO_Init+0x310>)
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	089b      	lsrs	r3, r3, #2
 80011ec:	3302      	adds	r3, #2
 80011ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f003 0303 	and.w	r3, r3, #3
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	220f      	movs	r2, #15
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a52      	ldr	r2, [pc, #328]	; (8001358 <HAL_GPIO_Init+0x314>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d02b      	beq.n	800126a <HAL_GPIO_Init+0x226>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a51      	ldr	r2, [pc, #324]	; (800135c <HAL_GPIO_Init+0x318>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d025      	beq.n	8001266 <HAL_GPIO_Init+0x222>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a50      	ldr	r2, [pc, #320]	; (8001360 <HAL_GPIO_Init+0x31c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d01f      	beq.n	8001262 <HAL_GPIO_Init+0x21e>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4f      	ldr	r2, [pc, #316]	; (8001364 <HAL_GPIO_Init+0x320>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d019      	beq.n	800125e <HAL_GPIO_Init+0x21a>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4e      	ldr	r2, [pc, #312]	; (8001368 <HAL_GPIO_Init+0x324>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d013      	beq.n	800125a <HAL_GPIO_Init+0x216>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4d      	ldr	r2, [pc, #308]	; (800136c <HAL_GPIO_Init+0x328>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d00d      	beq.n	8001256 <HAL_GPIO_Init+0x212>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4c      	ldr	r2, [pc, #304]	; (8001370 <HAL_GPIO_Init+0x32c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d007      	beq.n	8001252 <HAL_GPIO_Init+0x20e>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4b      	ldr	r2, [pc, #300]	; (8001374 <HAL_GPIO_Init+0x330>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d101      	bne.n	800124e <HAL_GPIO_Init+0x20a>
 800124a:	2307      	movs	r3, #7
 800124c:	e00e      	b.n	800126c <HAL_GPIO_Init+0x228>
 800124e:	2308      	movs	r3, #8
 8001250:	e00c      	b.n	800126c <HAL_GPIO_Init+0x228>
 8001252:	2306      	movs	r3, #6
 8001254:	e00a      	b.n	800126c <HAL_GPIO_Init+0x228>
 8001256:	2305      	movs	r3, #5
 8001258:	e008      	b.n	800126c <HAL_GPIO_Init+0x228>
 800125a:	2304      	movs	r3, #4
 800125c:	e006      	b.n	800126c <HAL_GPIO_Init+0x228>
 800125e:	2303      	movs	r3, #3
 8001260:	e004      	b.n	800126c <HAL_GPIO_Init+0x228>
 8001262:	2302      	movs	r3, #2
 8001264:	e002      	b.n	800126c <HAL_GPIO_Init+0x228>
 8001266:	2301      	movs	r3, #1
 8001268:	e000      	b.n	800126c <HAL_GPIO_Init+0x228>
 800126a:	2300      	movs	r3, #0
 800126c:	69fa      	ldr	r2, [r7, #28]
 800126e:	f002 0203 	and.w	r2, r2, #3
 8001272:	0092      	lsls	r2, r2, #2
 8001274:	4093      	lsls	r3, r2
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4313      	orrs	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800127c:	4935      	ldr	r1, [pc, #212]	; (8001354 <HAL_GPIO_Init+0x310>)
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	089b      	lsrs	r3, r3, #2
 8001282:	3302      	adds	r3, #2
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800128a:	4b3b      	ldr	r3, [pc, #236]	; (8001378 <HAL_GPIO_Init+0x334>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	43db      	mvns	r3, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4013      	ands	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012ae:	4a32      	ldr	r2, [pc, #200]	; (8001378 <HAL_GPIO_Init+0x334>)
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012b4:	4b30      	ldr	r3, [pc, #192]	; (8001378 <HAL_GPIO_Init+0x334>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	43db      	mvns	r3, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d003      	beq.n	80012d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012d8:	4a27      	ldr	r2, [pc, #156]	; (8001378 <HAL_GPIO_Init+0x334>)
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012de:	4b26      	ldr	r3, [pc, #152]	; (8001378 <HAL_GPIO_Init+0x334>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001302:	4a1d      	ldr	r2, [pc, #116]	; (8001378 <HAL_GPIO_Init+0x334>)
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001308:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <HAL_GPIO_Init+0x334>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800132c:	4a12      	ldr	r2, [pc, #72]	; (8001378 <HAL_GPIO_Init+0x334>)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3301      	adds	r3, #1
 8001336:	61fb      	str	r3, [r7, #28]
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	2b0f      	cmp	r3, #15
 800133c:	f67f ae90 	bls.w	8001060 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	3724      	adds	r7, #36	; 0x24
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800
 8001354:	40013800 	.word	0x40013800
 8001358:	40020000 	.word	0x40020000
 800135c:	40020400 	.word	0x40020400
 8001360:	40020800 	.word	0x40020800
 8001364:	40020c00 	.word	0x40020c00
 8001368:	40021000 	.word	0x40021000
 800136c:	40021400 	.word	0x40021400
 8001370:	40021800 	.word	0x40021800
 8001374:	40021c00 	.word	0x40021c00
 8001378:	40013c00 	.word	0x40013c00

0800137c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691a      	ldr	r2, [r3, #16]
 800138c:	887b      	ldrh	r3, [r7, #2]
 800138e:	4013      	ands	r3, r2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d002      	beq.n	800139a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001394:	2301      	movs	r3, #1
 8001396:	73fb      	strb	r3, [r7, #15]
 8001398:	e001      	b.n	800139e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800139a:	2300      	movs	r3, #0
 800139c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800139e:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]
 80013b8:	4613      	mov	r3, r2
 80013ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013bc:	787b      	ldrb	r3, [r7, #1]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013c2:	887a      	ldrh	r2, [r7, #2]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013c8:	e003      	b.n	80013d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ca:	887b      	ldrh	r3, [r7, #2]
 80013cc:	041a      	lsls	r2, r3, #16
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	619a      	str	r2, [r3, #24]
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013de:	b480      	push	{r7}
 80013e0:	b085      	sub	sp, #20
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	460b      	mov	r3, r1
 80013e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013f0:	887a      	ldrh	r2, [r7, #2]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	4013      	ands	r3, r2
 80013f6:	041a      	lsls	r2, r3, #16
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	43d9      	mvns	r1, r3
 80013fc:	887b      	ldrh	r3, [r7, #2]
 80013fe:	400b      	ands	r3, r1
 8001400:	431a      	orrs	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	619a      	str	r2, [r3, #24]
}
 8001406:	bf00      	nop
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d101      	bne.n	8001426 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e264      	b.n	80018f0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	2b00      	cmp	r3, #0
 8001430:	d075      	beq.n	800151e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001432:	4ba3      	ldr	r3, [pc, #652]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 030c 	and.w	r3, r3, #12
 800143a:	2b04      	cmp	r3, #4
 800143c:	d00c      	beq.n	8001458 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800143e:	4ba0      	ldr	r3, [pc, #640]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001446:	2b08      	cmp	r3, #8
 8001448:	d112      	bne.n	8001470 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800144a:	4b9d      	ldr	r3, [pc, #628]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001452:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001456:	d10b      	bne.n	8001470 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001458:	4b99      	ldr	r3, [pc, #612]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d05b      	beq.n	800151c <HAL_RCC_OscConfig+0x108>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d157      	bne.n	800151c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e23f      	b.n	80018f0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001478:	d106      	bne.n	8001488 <HAL_RCC_OscConfig+0x74>
 800147a:	4b91      	ldr	r3, [pc, #580]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a90      	ldr	r2, [pc, #576]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 8001480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	e01d      	b.n	80014c4 <HAL_RCC_OscConfig+0xb0>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001490:	d10c      	bne.n	80014ac <HAL_RCC_OscConfig+0x98>
 8001492:	4b8b      	ldr	r3, [pc, #556]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a8a      	ldr	r2, [pc, #552]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 8001498:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	4b88      	ldr	r3, [pc, #544]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a87      	ldr	r2, [pc, #540]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 80014a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	e00b      	b.n	80014c4 <HAL_RCC_OscConfig+0xb0>
 80014ac:	4b84      	ldr	r3, [pc, #528]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a83      	ldr	r2, [pc, #524]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 80014b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	4b81      	ldr	r3, [pc, #516]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a80      	ldr	r2, [pc, #512]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 80014be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d013      	beq.n	80014f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014cc:	f7ff fccc 	bl	8000e68 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014d4:	f7ff fcc8 	bl	8000e68 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b64      	cmp	r3, #100	; 0x64
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e204      	b.n	80018f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e6:	4b76      	ldr	r3, [pc, #472]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0f0      	beq.n	80014d4 <HAL_RCC_OscConfig+0xc0>
 80014f2:	e014      	b.n	800151e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f4:	f7ff fcb8 	bl	8000e68 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014fc:	f7ff fcb4 	bl	8000e68 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b64      	cmp	r3, #100	; 0x64
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e1f0      	b.n	80018f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800150e:	4b6c      	ldr	r3, [pc, #432]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1f0      	bne.n	80014fc <HAL_RCC_OscConfig+0xe8>
 800151a:	e000      	b.n	800151e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800151c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d063      	beq.n	80015f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800152a:	4b65      	ldr	r3, [pc, #404]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 030c 	and.w	r3, r3, #12
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00b      	beq.n	800154e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001536:	4b62      	ldr	r3, [pc, #392]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800153e:	2b08      	cmp	r3, #8
 8001540:	d11c      	bne.n	800157c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001542:	4b5f      	ldr	r3, [pc, #380]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d116      	bne.n	800157c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800154e:	4b5c      	ldr	r3, [pc, #368]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d005      	beq.n	8001566 <HAL_RCC_OscConfig+0x152>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d001      	beq.n	8001566 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e1c4      	b.n	80018f0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001566:	4b56      	ldr	r3, [pc, #344]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	4952      	ldr	r1, [pc, #328]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 8001576:	4313      	orrs	r3, r2
 8001578:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800157a:	e03a      	b.n	80015f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d020      	beq.n	80015c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001584:	4b4f      	ldr	r3, [pc, #316]	; (80016c4 <HAL_RCC_OscConfig+0x2b0>)
 8001586:	2201      	movs	r2, #1
 8001588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158a:	f7ff fc6d 	bl	8000e68 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001592:	f7ff fc69 	bl	8000e68 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e1a5      	b.n	80018f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a4:	4b46      	ldr	r3, [pc, #280]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0f0      	beq.n	8001592 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b0:	4b43      	ldr	r3, [pc, #268]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	4940      	ldr	r1, [pc, #256]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 80015c0:	4313      	orrs	r3, r2
 80015c2:	600b      	str	r3, [r1, #0]
 80015c4:	e015      	b.n	80015f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015c6:	4b3f      	ldr	r3, [pc, #252]	; (80016c4 <HAL_RCC_OscConfig+0x2b0>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015cc:	f7ff fc4c 	bl	8000e68 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015d4:	f7ff fc48 	bl	8000e68 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e184      	b.n	80018f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e6:	4b36      	ldr	r3, [pc, #216]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f0      	bne.n	80015d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0308 	and.w	r3, r3, #8
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d030      	beq.n	8001660 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d016      	beq.n	8001634 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001606:	4b30      	ldr	r3, [pc, #192]	; (80016c8 <HAL_RCC_OscConfig+0x2b4>)
 8001608:	2201      	movs	r2, #1
 800160a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160c:	f7ff fc2c 	bl	8000e68 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001614:	f7ff fc28 	bl	8000e68 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e164      	b.n	80018f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001626:	4b26      	ldr	r3, [pc, #152]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 8001628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0f0      	beq.n	8001614 <HAL_RCC_OscConfig+0x200>
 8001632:	e015      	b.n	8001660 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001634:	4b24      	ldr	r3, [pc, #144]	; (80016c8 <HAL_RCC_OscConfig+0x2b4>)
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163a:	f7ff fc15 	bl	8000e68 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001642:	f7ff fc11 	bl	8000e68 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e14d      	b.n	80018f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001654:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 8001656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1f0      	bne.n	8001642 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 80a0 	beq.w	80017ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800166e:	2300      	movs	r3, #0
 8001670:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001672:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d10f      	bne.n	800169e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	4a0e      	ldr	r2, [pc, #56]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 8001688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800168c:	6413      	str	r3, [r2, #64]	; 0x40
 800168e:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <HAL_RCC_OscConfig+0x2ac>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800169a:	2301      	movs	r3, #1
 800169c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <HAL_RCC_OscConfig+0x2b8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d121      	bne.n	80016ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <HAL_RCC_OscConfig+0x2b8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a07      	ldr	r2, [pc, #28]	; (80016cc <HAL_RCC_OscConfig+0x2b8>)
 80016b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016b6:	f7ff fbd7 	bl	8000e68 <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016bc:	e011      	b.n	80016e2 <HAL_RCC_OscConfig+0x2ce>
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800
 80016c4:	42470000 	.word	0x42470000
 80016c8:	42470e80 	.word	0x42470e80
 80016cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d0:	f7ff fbca 	bl	8000e68 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e106      	b.n	80018f0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e2:	4b85      	ldr	r3, [pc, #532]	; (80018f8 <HAL_RCC_OscConfig+0x4e4>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0f0      	beq.n	80016d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d106      	bne.n	8001704 <HAL_RCC_OscConfig+0x2f0>
 80016f6:	4b81      	ldr	r3, [pc, #516]	; (80018fc <HAL_RCC_OscConfig+0x4e8>)
 80016f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fa:	4a80      	ldr	r2, [pc, #512]	; (80018fc <HAL_RCC_OscConfig+0x4e8>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6713      	str	r3, [r2, #112]	; 0x70
 8001702:	e01c      	b.n	800173e <HAL_RCC_OscConfig+0x32a>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	2b05      	cmp	r3, #5
 800170a:	d10c      	bne.n	8001726 <HAL_RCC_OscConfig+0x312>
 800170c:	4b7b      	ldr	r3, [pc, #492]	; (80018fc <HAL_RCC_OscConfig+0x4e8>)
 800170e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001710:	4a7a      	ldr	r2, [pc, #488]	; (80018fc <HAL_RCC_OscConfig+0x4e8>)
 8001712:	f043 0304 	orr.w	r3, r3, #4
 8001716:	6713      	str	r3, [r2, #112]	; 0x70
 8001718:	4b78      	ldr	r3, [pc, #480]	; (80018fc <HAL_RCC_OscConfig+0x4e8>)
 800171a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171c:	4a77      	ldr	r2, [pc, #476]	; (80018fc <HAL_RCC_OscConfig+0x4e8>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	6713      	str	r3, [r2, #112]	; 0x70
 8001724:	e00b      	b.n	800173e <HAL_RCC_OscConfig+0x32a>
 8001726:	4b75      	ldr	r3, [pc, #468]	; (80018fc <HAL_RCC_OscConfig+0x4e8>)
 8001728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172a:	4a74      	ldr	r2, [pc, #464]	; (80018fc <HAL_RCC_OscConfig+0x4e8>)
 800172c:	f023 0301 	bic.w	r3, r3, #1
 8001730:	6713      	str	r3, [r2, #112]	; 0x70
 8001732:	4b72      	ldr	r3, [pc, #456]	; (80018fc <HAL_RCC_OscConfig+0x4e8>)
 8001734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001736:	4a71      	ldr	r2, [pc, #452]	; (80018fc <HAL_RCC_OscConfig+0x4e8>)
 8001738:	f023 0304 	bic.w	r3, r3, #4
 800173c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d015      	beq.n	8001772 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001746:	f7ff fb8f 	bl	8000e68 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800174c:	e00a      	b.n	8001764 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800174e:	f7ff fb8b 	bl	8000e68 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	f241 3288 	movw	r2, #5000	; 0x1388
 800175c:	4293      	cmp	r3, r2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e0c5      	b.n	80018f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001764:	4b65      	ldr	r3, [pc, #404]	; (80018fc <HAL_RCC_OscConfig+0x4e8>)
 8001766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0ee      	beq.n	800174e <HAL_RCC_OscConfig+0x33a>
 8001770:	e014      	b.n	800179c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001772:	f7ff fb79 	bl	8000e68 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001778:	e00a      	b.n	8001790 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800177a:	f7ff fb75 	bl	8000e68 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	f241 3288 	movw	r2, #5000	; 0x1388
 8001788:	4293      	cmp	r3, r2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e0af      	b.n	80018f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001790:	4b5a      	ldr	r3, [pc, #360]	; (80018fc <HAL_RCC_OscConfig+0x4e8>)
 8001792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1ee      	bne.n	800177a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800179c:	7dfb      	ldrb	r3, [r7, #23]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d105      	bne.n	80017ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017a2:	4b56      	ldr	r3, [pc, #344]	; (80018fc <HAL_RCC_OscConfig+0x4e8>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	4a55      	ldr	r2, [pc, #340]	; (80018fc <HAL_RCC_OscConfig+0x4e8>)
 80017a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f000 809b 	beq.w	80018ee <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017b8:	4b50      	ldr	r3, [pc, #320]	; (80018fc <HAL_RCC_OscConfig+0x4e8>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 030c 	and.w	r3, r3, #12
 80017c0:	2b08      	cmp	r3, #8
 80017c2:	d05c      	beq.n	800187e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d141      	bne.n	8001850 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017cc:	4b4c      	ldr	r3, [pc, #304]	; (8001900 <HAL_RCC_OscConfig+0x4ec>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d2:	f7ff fb49 	bl	8000e68 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017da:	f7ff fb45 	bl	8000e68 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e081      	b.n	80018f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ec:	4b43      	ldr	r3, [pc, #268]	; (80018fc <HAL_RCC_OscConfig+0x4e8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1f0      	bne.n	80017da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69da      	ldr	r2, [r3, #28]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	431a      	orrs	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001806:	019b      	lsls	r3, r3, #6
 8001808:	431a      	orrs	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180e:	085b      	lsrs	r3, r3, #1
 8001810:	3b01      	subs	r3, #1
 8001812:	041b      	lsls	r3, r3, #16
 8001814:	431a      	orrs	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181a:	061b      	lsls	r3, r3, #24
 800181c:	4937      	ldr	r1, [pc, #220]	; (80018fc <HAL_RCC_OscConfig+0x4e8>)
 800181e:	4313      	orrs	r3, r2
 8001820:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001822:	4b37      	ldr	r3, [pc, #220]	; (8001900 <HAL_RCC_OscConfig+0x4ec>)
 8001824:	2201      	movs	r2, #1
 8001826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7ff fb1e 	bl	8000e68 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001830:	f7ff fb1a 	bl	8000e68 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e056      	b.n	80018f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001842:	4b2e      	ldr	r3, [pc, #184]	; (80018fc <HAL_RCC_OscConfig+0x4e8>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0f0      	beq.n	8001830 <HAL_RCC_OscConfig+0x41c>
 800184e:	e04e      	b.n	80018ee <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001850:	4b2b      	ldr	r3, [pc, #172]	; (8001900 <HAL_RCC_OscConfig+0x4ec>)
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001856:	f7ff fb07 	bl	8000e68 <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800185e:	f7ff fb03 	bl	8000e68 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e03f      	b.n	80018f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001870:	4b22      	ldr	r3, [pc, #136]	; (80018fc <HAL_RCC_OscConfig+0x4e8>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1f0      	bne.n	800185e <HAL_RCC_OscConfig+0x44a>
 800187c:	e037      	b.n	80018ee <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d101      	bne.n	800188a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e032      	b.n	80018f0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800188a:	4b1c      	ldr	r3, [pc, #112]	; (80018fc <HAL_RCC_OscConfig+0x4e8>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d028      	beq.n	80018ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d121      	bne.n	80018ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d11a      	bne.n	80018ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018b4:	68fa      	ldr	r2, [r7, #12]
 80018b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018ba:	4013      	ands	r3, r2
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018c0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d111      	bne.n	80018ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d0:	085b      	lsrs	r3, r3, #1
 80018d2:	3b01      	subs	r3, #1
 80018d4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d107      	bne.n	80018ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d001      	beq.n	80018ee <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e000      	b.n	80018f0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40007000 	.word	0x40007000
 80018fc:	40023800 	.word	0x40023800
 8001900:	42470060 	.word	0x42470060

08001904 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d101      	bne.n	8001918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e0cc      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001918:	4b68      	ldr	r3, [pc, #416]	; (8001abc <HAL_RCC_ClockConfig+0x1b8>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0307 	and.w	r3, r3, #7
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	429a      	cmp	r2, r3
 8001924:	d90c      	bls.n	8001940 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001926:	4b65      	ldr	r3, [pc, #404]	; (8001abc <HAL_RCC_ClockConfig+0x1b8>)
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800192e:	4b63      	ldr	r3, [pc, #396]	; (8001abc <HAL_RCC_ClockConfig+0x1b8>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	429a      	cmp	r2, r3
 800193a:	d001      	beq.n	8001940 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e0b8      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d020      	beq.n	800198e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	2b00      	cmp	r3, #0
 8001956:	d005      	beq.n	8001964 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001958:	4b59      	ldr	r3, [pc, #356]	; (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	4a58      	ldr	r2, [pc, #352]	; (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800195e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001962:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0308 	and.w	r3, r3, #8
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001970:	4b53      	ldr	r3, [pc, #332]	; (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	4a52      	ldr	r2, [pc, #328]	; (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800197a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800197c:	4b50      	ldr	r3, [pc, #320]	; (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	494d      	ldr	r1, [pc, #308]	; (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	4313      	orrs	r3, r2
 800198c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	2b00      	cmp	r3, #0
 8001998:	d044      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d107      	bne.n	80019b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a2:	4b47      	ldr	r3, [pc, #284]	; (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d119      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e07f      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d003      	beq.n	80019c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019be:	2b03      	cmp	r3, #3
 80019c0:	d107      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c2:	4b3f      	ldr	r3, [pc, #252]	; (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d109      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e06f      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d2:	4b3b      	ldr	r3, [pc, #236]	; (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e067      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019e2:	4b37      	ldr	r3, [pc, #220]	; (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f023 0203 	bic.w	r2, r3, #3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	4934      	ldr	r1, [pc, #208]	; (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019f4:	f7ff fa38 	bl	8000e68 <HAL_GetTick>
 80019f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fa:	e00a      	b.n	8001a12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019fc:	f7ff fa34 	bl	8000e68 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e04f      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a12:	4b2b      	ldr	r3, [pc, #172]	; (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 020c 	and.w	r2, r3, #12
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d1eb      	bne.n	80019fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a24:	4b25      	ldr	r3, [pc, #148]	; (8001abc <HAL_RCC_ClockConfig+0x1b8>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d20c      	bcs.n	8001a4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a32:	4b22      	ldr	r3, [pc, #136]	; (8001abc <HAL_RCC_ClockConfig+0x1b8>)
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3a:	4b20      	ldr	r3, [pc, #128]	; (8001abc <HAL_RCC_ClockConfig+0x1b8>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d001      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e032      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d008      	beq.n	8001a6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a58:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	4916      	ldr	r1, [pc, #88]	; (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d009      	beq.n	8001a8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a76:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	490e      	ldr	r1, [pc, #56]	; (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a8a:	f000 f821 	bl	8001ad0 <HAL_RCC_GetSysClockFreq>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	091b      	lsrs	r3, r3, #4
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	490a      	ldr	r1, [pc, #40]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a9c:	5ccb      	ldrb	r3, [r1, r3]
 8001a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa2:	4a09      	ldr	r2, [pc, #36]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001aa6:	4b09      	ldr	r3, [pc, #36]	; (8001acc <HAL_RCC_ClockConfig+0x1c8>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff f8f0 	bl	8000c90 <HAL_InitTick>

  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40023c00 	.word	0x40023c00
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	08007cc8 	.word	0x08007cc8
 8001ac8:	20000000 	.word	0x20000000
 8001acc:	20000004 	.word	0x20000004

08001ad0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ad4:	b084      	sub	sp, #16
 8001ad6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	607b      	str	r3, [r7, #4]
 8001adc:	2300      	movs	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ae8:	4b67      	ldr	r3, [pc, #412]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 030c 	and.w	r3, r3, #12
 8001af0:	2b08      	cmp	r3, #8
 8001af2:	d00d      	beq.n	8001b10 <HAL_RCC_GetSysClockFreq+0x40>
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	f200 80bd 	bhi.w	8001c74 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d002      	beq.n	8001b04 <HAL_RCC_GetSysClockFreq+0x34>
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	d003      	beq.n	8001b0a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b02:	e0b7      	b.n	8001c74 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b04:	4b61      	ldr	r3, [pc, #388]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b06:	60bb      	str	r3, [r7, #8]
       break;
 8001b08:	e0b7      	b.n	8001c7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b0a:	4b61      	ldr	r3, [pc, #388]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001b0c:	60bb      	str	r3, [r7, #8]
      break;
 8001b0e:	e0b4      	b.n	8001c7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b10:	4b5d      	ldr	r3, [pc, #372]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b18:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b1a:	4b5b      	ldr	r3, [pc, #364]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d04d      	beq.n	8001bc2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b26:	4b58      	ldr	r3, [pc, #352]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	099b      	lsrs	r3, r3, #6
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b36:	f04f 0100 	mov.w	r1, #0
 8001b3a:	ea02 0800 	and.w	r8, r2, r0
 8001b3e:	ea03 0901 	and.w	r9, r3, r1
 8001b42:	4640      	mov	r0, r8
 8001b44:	4649      	mov	r1, r9
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	f04f 0300 	mov.w	r3, #0
 8001b4e:	014b      	lsls	r3, r1, #5
 8001b50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b54:	0142      	lsls	r2, r0, #5
 8001b56:	4610      	mov	r0, r2
 8001b58:	4619      	mov	r1, r3
 8001b5a:	ebb0 0008 	subs.w	r0, r0, r8
 8001b5e:	eb61 0109 	sbc.w	r1, r1, r9
 8001b62:	f04f 0200 	mov.w	r2, #0
 8001b66:	f04f 0300 	mov.w	r3, #0
 8001b6a:	018b      	lsls	r3, r1, #6
 8001b6c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b70:	0182      	lsls	r2, r0, #6
 8001b72:	1a12      	subs	r2, r2, r0
 8001b74:	eb63 0301 	sbc.w	r3, r3, r1
 8001b78:	f04f 0000 	mov.w	r0, #0
 8001b7c:	f04f 0100 	mov.w	r1, #0
 8001b80:	00d9      	lsls	r1, r3, #3
 8001b82:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b86:	00d0      	lsls	r0, r2, #3
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	eb12 0208 	adds.w	r2, r2, r8
 8001b90:	eb43 0309 	adc.w	r3, r3, r9
 8001b94:	f04f 0000 	mov.w	r0, #0
 8001b98:	f04f 0100 	mov.w	r1, #0
 8001b9c:	0259      	lsls	r1, r3, #9
 8001b9e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001ba2:	0250      	lsls	r0, r2, #9
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4610      	mov	r0, r2
 8001baa:	4619      	mov	r1, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	f04f 0300 	mov.w	r3, #0
 8001bb4:	f7fe fb56 	bl	8000264 <__aeabi_uldivmod>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	e04a      	b.n	8001c58 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc2:	4b31      	ldr	r3, [pc, #196]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	099b      	lsrs	r3, r3, #6
 8001bc8:	461a      	mov	r2, r3
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001bd2:	f04f 0100 	mov.w	r1, #0
 8001bd6:	ea02 0400 	and.w	r4, r2, r0
 8001bda:	ea03 0501 	and.w	r5, r3, r1
 8001bde:	4620      	mov	r0, r4
 8001be0:	4629      	mov	r1, r5
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	f04f 0300 	mov.w	r3, #0
 8001bea:	014b      	lsls	r3, r1, #5
 8001bec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001bf0:	0142      	lsls	r2, r0, #5
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	1b00      	subs	r0, r0, r4
 8001bf8:	eb61 0105 	sbc.w	r1, r1, r5
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	f04f 0300 	mov.w	r3, #0
 8001c04:	018b      	lsls	r3, r1, #6
 8001c06:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c0a:	0182      	lsls	r2, r0, #6
 8001c0c:	1a12      	subs	r2, r2, r0
 8001c0e:	eb63 0301 	sbc.w	r3, r3, r1
 8001c12:	f04f 0000 	mov.w	r0, #0
 8001c16:	f04f 0100 	mov.w	r1, #0
 8001c1a:	00d9      	lsls	r1, r3, #3
 8001c1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c20:	00d0      	lsls	r0, r2, #3
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	1912      	adds	r2, r2, r4
 8001c28:	eb45 0303 	adc.w	r3, r5, r3
 8001c2c:	f04f 0000 	mov.w	r0, #0
 8001c30:	f04f 0100 	mov.w	r1, #0
 8001c34:	0299      	lsls	r1, r3, #10
 8001c36:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001c3a:	0290      	lsls	r0, r2, #10
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4610      	mov	r0, r2
 8001c42:	4619      	mov	r1, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	461a      	mov	r2, r3
 8001c48:	f04f 0300 	mov.w	r3, #0
 8001c4c:	f7fe fb0a 	bl	8000264 <__aeabi_uldivmod>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4613      	mov	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c58:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	0c1b      	lsrs	r3, r3, #16
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	3301      	adds	r3, #1
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c70:	60bb      	str	r3, [r7, #8]
      break;
 8001c72:	e002      	b.n	8001c7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c74:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001c76:	60bb      	str	r3, [r7, #8]
      break;
 8001c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c7a:	68bb      	ldr	r3, [r7, #8]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c86:	bf00      	nop
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	00f42400 	.word	0x00f42400
 8001c90:	007a1200 	.word	0x007a1200

08001c94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c98:	4b03      	ldr	r3, [pc, #12]	; (8001ca8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000000 	.word	0x20000000

08001cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cb0:	f7ff fff0 	bl	8001c94 <HAL_RCC_GetHCLKFreq>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	0a9b      	lsrs	r3, r3, #10
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	4903      	ldr	r1, [pc, #12]	; (8001cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cc2:	5ccb      	ldrb	r3, [r1, r3]
 8001cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	08007cd8 	.word	0x08007cd8

08001cd4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	220f      	movs	r2, #15
 8001ce2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ce4:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <HAL_RCC_GetClockConfig+0x5c>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 0203 	and.w	r2, r3, #3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <HAL_RCC_GetClockConfig+0x5c>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <HAL_RCC_GetClockConfig+0x5c>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d08:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <HAL_RCC_GetClockConfig+0x5c>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	08db      	lsrs	r3, r3, #3
 8001d0e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d16:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <HAL_RCC_GetClockConfig+0x60>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0207 	and.w	r2, r3, #7
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	601a      	str	r2, [r3, #0]
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40023c00 	.word	0x40023c00

08001d38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e041      	b.n	8001dce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d106      	bne.n	8001d64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f839 	bl	8001dd6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2202      	movs	r2, #2
 8001d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3304      	adds	r3, #4
 8001d74:	4619      	mov	r1, r3
 8001d76:	4610      	mov	r0, r2
 8001d78:	f000 f9d8 	bl	800212c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
	...

08001dec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d001      	beq.n	8001e04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e04e      	b.n	8001ea2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2202      	movs	r2, #2
 8001e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0201 	orr.w	r2, r2, #1
 8001e1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a23      	ldr	r2, [pc, #140]	; (8001eb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d022      	beq.n	8001e6c <HAL_TIM_Base_Start_IT+0x80>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e2e:	d01d      	beq.n	8001e6c <HAL_TIM_Base_Start_IT+0x80>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a1f      	ldr	r2, [pc, #124]	; (8001eb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d018      	beq.n	8001e6c <HAL_TIM_Base_Start_IT+0x80>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a1e      	ldr	r2, [pc, #120]	; (8001eb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d013      	beq.n	8001e6c <HAL_TIM_Base_Start_IT+0x80>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a1c      	ldr	r2, [pc, #112]	; (8001ebc <HAL_TIM_Base_Start_IT+0xd0>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d00e      	beq.n	8001e6c <HAL_TIM_Base_Start_IT+0x80>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a1b      	ldr	r2, [pc, #108]	; (8001ec0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d009      	beq.n	8001e6c <HAL_TIM_Base_Start_IT+0x80>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a19      	ldr	r2, [pc, #100]	; (8001ec4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d004      	beq.n	8001e6c <HAL_TIM_Base_Start_IT+0x80>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a18      	ldr	r2, [pc, #96]	; (8001ec8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d111      	bne.n	8001e90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2b06      	cmp	r3, #6
 8001e7c:	d010      	beq.n	8001ea0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f042 0201 	orr.w	r2, r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e8e:	e007      	b.n	8001ea0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0201 	orr.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40010000 	.word	0x40010000
 8001eb4:	40000400 	.word	0x40000400
 8001eb8:	40000800 	.word	0x40000800
 8001ebc:	40000c00 	.word	0x40000c00
 8001ec0:	40010400 	.word	0x40010400
 8001ec4:	40014000 	.word	0x40014000
 8001ec8:	40001800 	.word	0x40001800

08001ecc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d122      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d11b      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f06f 0202 	mvn.w	r2, #2
 8001ef8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f8ee 	bl	80020f0 <HAL_TIM_IC_CaptureCallback>
 8001f14:	e005      	b.n	8001f22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f8e0 	bl	80020dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 f8f1 	bl	8002104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	f003 0304 	and.w	r3, r3, #4
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	d122      	bne.n	8001f7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b04      	cmp	r3, #4
 8001f42:	d11b      	bne.n	8001f7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f06f 0204 	mvn.w	r2, #4
 8001f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2202      	movs	r2, #2
 8001f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f8c4 	bl	80020f0 <HAL_TIM_IC_CaptureCallback>
 8001f68:	e005      	b.n	8001f76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f8b6 	bl	80020dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 f8c7 	bl	8002104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	2b08      	cmp	r3, #8
 8001f88:	d122      	bne.n	8001fd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	d11b      	bne.n	8001fd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f06f 0208 	mvn.w	r2, #8
 8001fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2204      	movs	r2, #4
 8001fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f89a 	bl	80020f0 <HAL_TIM_IC_CaptureCallback>
 8001fbc:	e005      	b.n	8001fca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f88c 	bl	80020dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 f89d 	bl	8002104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	f003 0310 	and.w	r3, r3, #16
 8001fda:	2b10      	cmp	r3, #16
 8001fdc:	d122      	bne.n	8002024 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	f003 0310 	and.w	r3, r3, #16
 8001fe8:	2b10      	cmp	r3, #16
 8001fea:	d11b      	bne.n	8002024 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f06f 0210 	mvn.w	r2, #16
 8001ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2208      	movs	r2, #8
 8001ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f870 	bl	80020f0 <HAL_TIM_IC_CaptureCallback>
 8002010:	e005      	b.n	800201e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f862 	bl	80020dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 f873 	bl	8002104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b01      	cmp	r3, #1
 8002030:	d10e      	bne.n	8002050 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b01      	cmp	r3, #1
 800203e:	d107      	bne.n	8002050 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f06f 0201 	mvn.w	r2, #1
 8002048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7fe fde0 	bl	8000c10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205a:	2b80      	cmp	r3, #128	; 0x80
 800205c:	d10e      	bne.n	800207c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002068:	2b80      	cmp	r3, #128	; 0x80
 800206a:	d107      	bne.n	800207c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f902 	bl	8002280 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002086:	2b40      	cmp	r3, #64	; 0x40
 8002088:	d10e      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002094:	2b40      	cmp	r3, #64	; 0x40
 8002096:	d107      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f838 	bl	8002118 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	f003 0320 	and.w	r3, r3, #32
 80020b2:	2b20      	cmp	r3, #32
 80020b4:	d10e      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	f003 0320 	and.w	r3, r3, #32
 80020c0:	2b20      	cmp	r3, #32
 80020c2:	d107      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f06f 0220 	mvn.w	r2, #32
 80020cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f8cc 	bl	800226c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020d4:	bf00      	nop
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a40      	ldr	r2, [pc, #256]	; (8002240 <TIM_Base_SetConfig+0x114>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d013      	beq.n	800216c <TIM_Base_SetConfig+0x40>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800214a:	d00f      	beq.n	800216c <TIM_Base_SetConfig+0x40>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a3d      	ldr	r2, [pc, #244]	; (8002244 <TIM_Base_SetConfig+0x118>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d00b      	beq.n	800216c <TIM_Base_SetConfig+0x40>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a3c      	ldr	r2, [pc, #240]	; (8002248 <TIM_Base_SetConfig+0x11c>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d007      	beq.n	800216c <TIM_Base_SetConfig+0x40>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a3b      	ldr	r2, [pc, #236]	; (800224c <TIM_Base_SetConfig+0x120>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d003      	beq.n	800216c <TIM_Base_SetConfig+0x40>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a3a      	ldr	r2, [pc, #232]	; (8002250 <TIM_Base_SetConfig+0x124>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d108      	bne.n	800217e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	4313      	orrs	r3, r2
 800217c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a2f      	ldr	r2, [pc, #188]	; (8002240 <TIM_Base_SetConfig+0x114>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d02b      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800218c:	d027      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a2c      	ldr	r2, [pc, #176]	; (8002244 <TIM_Base_SetConfig+0x118>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d023      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a2b      	ldr	r2, [pc, #172]	; (8002248 <TIM_Base_SetConfig+0x11c>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d01f      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a2a      	ldr	r2, [pc, #168]	; (800224c <TIM_Base_SetConfig+0x120>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d01b      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a29      	ldr	r2, [pc, #164]	; (8002250 <TIM_Base_SetConfig+0x124>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d017      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a28      	ldr	r2, [pc, #160]	; (8002254 <TIM_Base_SetConfig+0x128>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d013      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a27      	ldr	r2, [pc, #156]	; (8002258 <TIM_Base_SetConfig+0x12c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d00f      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a26      	ldr	r2, [pc, #152]	; (800225c <TIM_Base_SetConfig+0x130>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d00b      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a25      	ldr	r2, [pc, #148]	; (8002260 <TIM_Base_SetConfig+0x134>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d007      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a24      	ldr	r2, [pc, #144]	; (8002264 <TIM_Base_SetConfig+0x138>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d003      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a23      	ldr	r2, [pc, #140]	; (8002268 <TIM_Base_SetConfig+0x13c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d108      	bne.n	80021f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a0a      	ldr	r2, [pc, #40]	; (8002240 <TIM_Base_SetConfig+0x114>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d003      	beq.n	8002224 <TIM_Base_SetConfig+0xf8>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a0c      	ldr	r2, [pc, #48]	; (8002250 <TIM_Base_SetConfig+0x124>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d103      	bne.n	800222c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	691a      	ldr	r2, [r3, #16]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	615a      	str	r2, [r3, #20]
}
 8002232:	bf00      	nop
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	40010000 	.word	0x40010000
 8002244:	40000400 	.word	0x40000400
 8002248:	40000800 	.word	0x40000800
 800224c:	40000c00 	.word	0x40000c00
 8002250:	40010400 	.word	0x40010400
 8002254:	40014000 	.word	0x40014000
 8002258:	40014400 	.word	0x40014400
 800225c:	40014800 	.word	0x40014800
 8002260:	40001800 	.word	0x40001800
 8002264:	40001c00 	.word	0x40001c00
 8002268:	40002000 	.word	0x40002000

0800226c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f103 0208 	add.w	r2, r3, #8
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f04f 32ff 	mov.w	r2, #4294967295
 80022ac:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f103 0208 	add.w	r2, r3, #8
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f103 0208 	add.w	r2, r3, #8
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80022ee:	b480      	push	{r7}
 80022f0:	b085      	sub	sp, #20
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
 80022f6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	1c5a      	adds	r2, r3, #1
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	601a      	str	r2, [r3, #0]
}
 800232a:	bf00      	nop
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002336:	b480      	push	{r7}
 8002338:	b085      	sub	sp, #20
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
 800233e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234c:	d103      	bne.n	8002356 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	e00c      	b.n	8002370 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	3308      	adds	r3, #8
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	e002      	b.n	8002364 <vListInsert+0x2e>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	429a      	cmp	r2, r3
 800236e:	d2f6      	bcs.n	800235e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	1c5a      	adds	r2, r3, #1
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	601a      	str	r2, [r3, #0]
}
 800239c:	bf00      	nop
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6892      	ldr	r2, [r2, #8]
 80023be:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6852      	ldr	r2, [r2, #4]
 80023c8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d103      	bne.n	80023dc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	1e5a      	subs	r2, r3, #1
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10a      	bne.n	8002426 <xQueueGenericReset+0x2a>
        __asm volatile
 8002410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002414:	f383 8811 	msr	BASEPRI, r3
 8002418:	f3bf 8f6f 	isb	sy
 800241c:	f3bf 8f4f 	dsb	sy
 8002420:	60bb      	str	r3, [r7, #8]
    }
 8002422:	bf00      	nop
 8002424:	e7fe      	b.n	8002424 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002426:	f002 fbc5 	bl	8004bb4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002432:	68f9      	ldr	r1, [r7, #12]
 8002434:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002436:	fb01 f303 	mul.w	r3, r1, r3
 800243a:	441a      	add	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002456:	3b01      	subs	r3, #1
 8002458:	68f9      	ldr	r1, [r7, #12]
 800245a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800245c:	fb01 f303 	mul.w	r3, r1, r3
 8002460:	441a      	add	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	22ff      	movs	r2, #255	; 0xff
 800246a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	22ff      	movs	r2, #255	; 0xff
 8002472:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d114      	bne.n	80024a6 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d01a      	beq.n	80024ba <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	3310      	adds	r3, #16
 8002488:	4618      	mov	r0, r3
 800248a:	f001 faa1 	bl	80039d0 <xTaskRemoveFromEventList>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d012      	beq.n	80024ba <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002494:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <xQueueGenericReset+0xcc>)
 8002496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	f3bf 8f4f 	dsb	sy
 80024a0:	f3bf 8f6f 	isb	sy
 80024a4:	e009      	b.n	80024ba <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	3310      	adds	r3, #16
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff fef2 	bl	8002294 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	3324      	adds	r3, #36	; 0x24
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff feed 	bl	8002294 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80024ba:	f002 fbab 	bl	8004c14 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80024be:	2301      	movs	r3, #1
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	e000ed04 	.word	0xe000ed04

080024cc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08c      	sub	sp, #48	; 0x30
 80024d0:	af02      	add	r7, sp, #8
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	4613      	mov	r3, r2
 80024d8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10a      	bne.n	80024f6 <xQueueGenericCreate+0x2a>
        __asm volatile
 80024e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e4:	f383 8811 	msr	BASEPRI, r3
 80024e8:	f3bf 8f6f 	isb	sy
 80024ec:	f3bf 8f4f 	dsb	sy
 80024f0:	61bb      	str	r3, [r7, #24]
    }
 80024f2:	bf00      	nop
 80024f4:	e7fe      	b.n	80024f4 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	fb02 f303 	mul.w	r3, r2, r3
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d006      	beq.n	8002514 <xQueueGenericCreate+0x48>
 8002506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	fbb2 f3f3 	udiv	r3, r2, r3
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	429a      	cmp	r2, r3
 8002512:	d101      	bne.n	8002518 <xQueueGenericCreate+0x4c>
 8002514:	2301      	movs	r3, #1
 8002516:	e000      	b.n	800251a <xQueueGenericCreate+0x4e>
 8002518:	2300      	movs	r3, #0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10a      	bne.n	8002534 <xQueueGenericCreate+0x68>
        __asm volatile
 800251e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002522:	f383 8811 	msr	BASEPRI, r3
 8002526:	f3bf 8f6f 	isb	sy
 800252a:	f3bf 8f4f 	dsb	sy
 800252e:	617b      	str	r3, [r7, #20]
    }
 8002530:	bf00      	nop
 8002532:	e7fe      	b.n	8002532 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800253a:	d90a      	bls.n	8002552 <xQueueGenericCreate+0x86>
        __asm volatile
 800253c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002540:	f383 8811 	msr	BASEPRI, r3
 8002544:	f3bf 8f6f 	isb	sy
 8002548:	f3bf 8f4f 	dsb	sy
 800254c:	613b      	str	r3, [r7, #16]
    }
 800254e:	bf00      	nop
 8002550:	e7fe      	b.n	8002550 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	3350      	adds	r3, #80	; 0x50
 8002556:	4618      	mov	r0, r3
 8002558:	f002 fc58 	bl	8004e0c <pvPortMalloc>
 800255c:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00d      	beq.n	8002580 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	3350      	adds	r3, #80	; 0x50
 800256c:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800256e:	79fa      	ldrb	r2, [r7, #7]
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	4613      	mov	r3, r2
 8002576:	69fa      	ldr	r2, [r7, #28]
 8002578:	68b9      	ldr	r1, [r7, #8]
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 f805 	bl	800258a <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002580:	6a3b      	ldr	r3, [r7, #32]
    }
 8002582:	4618      	mov	r0, r3
 8002584:	3728      	adds	r7, #40	; 0x28
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b084      	sub	sp, #16
 800258e:	af00      	add	r7, sp, #0
 8002590:	60f8      	str	r0, [r7, #12]
 8002592:	60b9      	str	r1, [r7, #8]
 8002594:	607a      	str	r2, [r7, #4]
 8002596:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d103      	bne.n	80025a6 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	e002      	b.n	80025ac <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80025b8:	2101      	movs	r1, #1
 80025ba:	69b8      	ldr	r0, [r7, #24]
 80025bc:	f7ff ff1e 	bl	80023fc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	78fa      	ldrb	r2, [r7, #3]
 80025c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	68f9      	ldr	r1, [r7, #12]
 80025ce:	2073      	movs	r0, #115	; 0x73
 80025d0:	f004 fb18 	bl	8006c04 <SEGGER_SYSVIEW_RecordU32x3>
}
 80025d4:	bf00      	nop
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b090      	sub	sp, #64	; 0x40
 80025e0:	af02      	add	r7, sp, #8
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
 80025e8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80025ea:	2300      	movs	r3, #0
 80025ec:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80025f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10a      	bne.n	800260e <xQueueGenericSend+0x32>
        __asm volatile
 80025f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025fc:	f383 8811 	msr	BASEPRI, r3
 8002600:	f3bf 8f6f 	isb	sy
 8002604:	f3bf 8f4f 	dsb	sy
 8002608:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800260a:	bf00      	nop
 800260c:	e7fe      	b.n	800260c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d103      	bne.n	800261c <xQueueGenericSend+0x40>
 8002614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <xQueueGenericSend+0x44>
 800261c:	2301      	movs	r3, #1
 800261e:	e000      	b.n	8002622 <xQueueGenericSend+0x46>
 8002620:	2300      	movs	r3, #0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10a      	bne.n	800263c <xQueueGenericSend+0x60>
        __asm volatile
 8002626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800262a:	f383 8811 	msr	BASEPRI, r3
 800262e:	f3bf 8f6f 	isb	sy
 8002632:	f3bf 8f4f 	dsb	sy
 8002636:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002638:	bf00      	nop
 800263a:	e7fe      	b.n	800263a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d103      	bne.n	800264a <xQueueGenericSend+0x6e>
 8002642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002646:	2b01      	cmp	r3, #1
 8002648:	d101      	bne.n	800264e <xQueueGenericSend+0x72>
 800264a:	2301      	movs	r3, #1
 800264c:	e000      	b.n	8002650 <xQueueGenericSend+0x74>
 800264e:	2300      	movs	r3, #0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10a      	bne.n	800266a <xQueueGenericSend+0x8e>
        __asm volatile
 8002654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002658:	f383 8811 	msr	BASEPRI, r3
 800265c:	f3bf 8f6f 	isb	sy
 8002660:	f3bf 8f4f 	dsb	sy
 8002664:	623b      	str	r3, [r7, #32]
    }
 8002666:	bf00      	nop
 8002668:	e7fe      	b.n	8002668 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800266a:	f001 fb51 	bl	8003d10 <xTaskGetSchedulerState>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d102      	bne.n	800267a <xQueueGenericSend+0x9e>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <xQueueGenericSend+0xa2>
 800267a:	2301      	movs	r3, #1
 800267c:	e000      	b.n	8002680 <xQueueGenericSend+0xa4>
 800267e:	2300      	movs	r3, #0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10a      	bne.n	800269a <xQueueGenericSend+0xbe>
        __asm volatile
 8002684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002688:	f383 8811 	msr	BASEPRI, r3
 800268c:	f3bf 8f6f 	isb	sy
 8002690:	f3bf 8f4f 	dsb	sy
 8002694:	61fb      	str	r3, [r7, #28]
    }
 8002696:	bf00      	nop
 8002698:	e7fe      	b.n	8002698 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800269a:	f002 fa8b 	bl	8004bb4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800269e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d302      	bcc.n	80026b0 <xQueueGenericSend+0xd4>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d136      	bne.n	800271e <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 80026b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b2:	4618      	mov	r0, r3
 80026b4:	f005 f834 	bl	8007720 <SEGGER_SYSVIEW_ShrinkId>
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	460b      	mov	r3, r1
 80026c2:	4601      	mov	r1, r0
 80026c4:	205a      	movs	r0, #90	; 0x5a
 80026c6:	f004 fb13 	bl	8006cf0 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	68b9      	ldr	r1, [r7, #8]
 80026ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026d0:	f000 fa78 	bl	8002bc4 <prvCopyDataToQueue>
 80026d4:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d010      	beq.n	8002700 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e0:	3324      	adds	r3, #36	; 0x24
 80026e2:	4618      	mov	r0, r3
 80026e4:	f001 f974 	bl	80039d0 <xTaskRemoveFromEventList>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d013      	beq.n	8002716 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80026ee:	4b4d      	ldr	r3, [pc, #308]	; (8002824 <xQueueGenericSend+0x248>)
 80026f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	f3bf 8f4f 	dsb	sy
 80026fa:	f3bf 8f6f 	isb	sy
 80026fe:	e00a      	b.n	8002716 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002702:	2b00      	cmp	r3, #0
 8002704:	d007      	beq.n	8002716 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002706:	4b47      	ldr	r3, [pc, #284]	; (8002824 <xQueueGenericSend+0x248>)
 8002708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	f3bf 8f4f 	dsb	sy
 8002712:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002716:	f002 fa7d 	bl	8004c14 <vPortExitCritical>
                return pdPASS;
 800271a:	2301      	movs	r3, #1
 800271c:	e07d      	b.n	800281a <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d110      	bne.n	8002746 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002724:	f002 fa76 	bl	8004c14 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272a:	4618      	mov	r0, r3
 800272c:	f004 fff8 	bl	8007720 <SEGGER_SYSVIEW_ShrinkId>
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	460b      	mov	r3, r1
 800273a:	4601      	mov	r1, r0
 800273c:	205a      	movs	r0, #90	; 0x5a
 800273e:	f004 fad7 	bl	8006cf0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002742:	2300      	movs	r3, #0
 8002744:	e069      	b.n	800281a <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002748:	2b00      	cmp	r3, #0
 800274a:	d106      	bne.n	800275a <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800274c:	f107 0314 	add.w	r3, r7, #20
 8002750:	4618      	mov	r0, r3
 8002752:	f001 f9a3 	bl	8003a9c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002756:	2301      	movs	r3, #1
 8002758:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800275a:	f002 fa5b 	bl	8004c14 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800275e:	f000 feef 	bl	8003540 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002762:	f002 fa27 	bl	8004bb4 <vPortEnterCritical>
 8002766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002768:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800276c:	b25b      	sxtb	r3, r3
 800276e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002772:	d103      	bne.n	800277c <xQueueGenericSend+0x1a0>
 8002774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800277c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002782:	b25b      	sxtb	r3, r3
 8002784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002788:	d103      	bne.n	8002792 <xQueueGenericSend+0x1b6>
 800278a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002792:	f002 fa3f 	bl	8004c14 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002796:	1d3a      	adds	r2, r7, #4
 8002798:	f107 0314 	add.w	r3, r7, #20
 800279c:	4611      	mov	r1, r2
 800279e:	4618      	mov	r0, r3
 80027a0:	f001 f992 	bl	8003ac8 <xTaskCheckForTimeOut>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d124      	bne.n	80027f4 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80027aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027ac:	f000 fb02 	bl	8002db4 <prvIsQueueFull>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d018      	beq.n	80027e8 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80027b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b8:	3310      	adds	r3, #16
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	4611      	mov	r1, r2
 80027be:	4618      	mov	r0, r3
 80027c0:	f001 f8b4 	bl	800392c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80027c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027c6:	f000 fa8d 	bl	8002ce4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80027ca:	f000 fec7 	bl	800355c <xTaskResumeAll>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f47f af62 	bne.w	800269a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80027d6:	4b13      	ldr	r3, [pc, #76]	; (8002824 <xQueueGenericSend+0x248>)
 80027d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	f3bf 8f4f 	dsb	sy
 80027e2:	f3bf 8f6f 	isb	sy
 80027e6:	e758      	b.n	800269a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80027e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027ea:	f000 fa7b 	bl	8002ce4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80027ee:	f000 feb5 	bl	800355c <xTaskResumeAll>
 80027f2:	e752      	b.n	800269a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80027f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027f6:	f000 fa75 	bl	8002ce4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80027fa:	f000 feaf 	bl	800355c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80027fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002800:	4618      	mov	r0, r3
 8002802:	f004 ff8d 	bl	8007720 <SEGGER_SYSVIEW_ShrinkId>
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	460b      	mov	r3, r1
 8002810:	4601      	mov	r1, r0
 8002812:	205a      	movs	r0, #90	; 0x5a
 8002814:	f004 fa6c 	bl	8006cf0 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002818:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800281a:	4618      	mov	r0, r3
 800281c:	3738      	adds	r7, #56	; 0x38
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	e000ed04 	.word	0xe000ed04

08002828 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b090      	sub	sp, #64	; 0x40
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
 8002834:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800283a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10a      	bne.n	8002856 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002844:	f383 8811 	msr	BASEPRI, r3
 8002848:	f3bf 8f6f 	isb	sy
 800284c:	f3bf 8f4f 	dsb	sy
 8002850:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002852:	bf00      	nop
 8002854:	e7fe      	b.n	8002854 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d103      	bne.n	8002864 <xQueueGenericSendFromISR+0x3c>
 800285c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <xQueueGenericSendFromISR+0x40>
 8002864:	2301      	movs	r3, #1
 8002866:	e000      	b.n	800286a <xQueueGenericSendFromISR+0x42>
 8002868:	2300      	movs	r3, #0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10a      	bne.n	8002884 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800286e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002872:	f383 8811 	msr	BASEPRI, r3
 8002876:	f3bf 8f6f 	isb	sy
 800287a:	f3bf 8f4f 	dsb	sy
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002880:	bf00      	nop
 8002882:	e7fe      	b.n	8002882 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d103      	bne.n	8002892 <xQueueGenericSendFromISR+0x6a>
 800288a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800288c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288e:	2b01      	cmp	r3, #1
 8002890:	d101      	bne.n	8002896 <xQueueGenericSendFromISR+0x6e>
 8002892:	2301      	movs	r3, #1
 8002894:	e000      	b.n	8002898 <xQueueGenericSendFromISR+0x70>
 8002896:	2300      	movs	r3, #0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10a      	bne.n	80028b2 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 800289c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a0:	f383 8811 	msr	BASEPRI, r3
 80028a4:	f3bf 8f6f 	isb	sy
 80028a8:	f3bf 8f4f 	dsb	sy
 80028ac:	623b      	str	r3, [r7, #32]
    }
 80028ae:	bf00      	nop
 80028b0:	e7fe      	b.n	80028b0 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80028b2:	f002 fa6b 	bl	8004d8c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80028b6:	f3ef 8211 	mrs	r2, BASEPRI
 80028ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028be:	f383 8811 	msr	BASEPRI, r3
 80028c2:	f3bf 8f6f 	isb	sy
 80028c6:	f3bf 8f4f 	dsb	sy
 80028ca:	61fa      	str	r2, [r7, #28]
 80028cc:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80028ce:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80028d0:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80028d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028da:	429a      	cmp	r2, r3
 80028dc:	d302      	bcc.n	80028e4 <xQueueGenericSendFromISR+0xbc>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d148      	bne.n	8002976 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80028e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f2:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80028f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f6:	4618      	mov	r0, r3
 80028f8:	f004 ff12 	bl	8007720 <SEGGER_SYSVIEW_ShrinkId>
 80028fc:	4601      	mov	r1, r0
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	461a      	mov	r2, r3
 8002902:	2060      	movs	r0, #96	; 0x60
 8002904:	f004 f924 	bl	8006b50 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	68b9      	ldr	r1, [r7, #8]
 800290c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800290e:	f000 f959 	bl	8002bc4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002912:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800291a:	d112      	bne.n	8002942 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800291c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002920:	2b00      	cmp	r3, #0
 8002922:	d025      	beq.n	8002970 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002926:	3324      	adds	r3, #36	; 0x24
 8002928:	4618      	mov	r0, r3
 800292a:	f001 f851 	bl	80039d0 <xTaskRemoveFromEventList>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d01d      	beq.n	8002970 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d01a      	beq.n	8002970 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	e016      	b.n	8002970 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002942:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002946:	2b7f      	cmp	r3, #127	; 0x7f
 8002948:	d10a      	bne.n	8002960 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 800294a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800294e:	f383 8811 	msr	BASEPRI, r3
 8002952:	f3bf 8f6f 	isb	sy
 8002956:	f3bf 8f4f 	dsb	sy
 800295a:	617b      	str	r3, [r7, #20]
    }
 800295c:	bf00      	nop
 800295e:	e7fe      	b.n	800295e <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002960:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002964:	3301      	adds	r3, #1
 8002966:	b2db      	uxtb	r3, r3
 8002968:	b25a      	sxtb	r2, r3
 800296a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800296c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002970:	2301      	movs	r3, #1
 8002972:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002974:	e00b      	b.n	800298e <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002978:	4618      	mov	r0, r3
 800297a:	f004 fed1 	bl	8007720 <SEGGER_SYSVIEW_ShrinkId>
 800297e:	4601      	mov	r1, r0
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	461a      	mov	r2, r3
 8002984:	2060      	movs	r0, #96	; 0x60
 8002986:	f004 f8e3 	bl	8006b50 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800298a:	2300      	movs	r3, #0
 800298c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800298e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002990:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002998:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800299a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800299c:	4618      	mov	r0, r3
 800299e:	3740      	adds	r7, #64	; 0x40
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80029a4:	b590      	push	{r4, r7, lr}
 80029a6:	b08f      	sub	sp, #60	; 0x3c
 80029a8:	af02      	add	r7, sp, #8
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80029b0:	2300      	movs	r3, #0
 80029b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80029b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10a      	bne.n	80029d4 <xQueueReceive+0x30>
        __asm volatile
 80029be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c2:	f383 8811 	msr	BASEPRI, r3
 80029c6:	f3bf 8f6f 	isb	sy
 80029ca:	f3bf 8f4f 	dsb	sy
 80029ce:	623b      	str	r3, [r7, #32]
    }
 80029d0:	bf00      	nop
 80029d2:	e7fe      	b.n	80029d2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d103      	bne.n	80029e2 <xQueueReceive+0x3e>
 80029da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <xQueueReceive+0x42>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <xQueueReceive+0x44>
 80029e6:	2300      	movs	r3, #0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10a      	bne.n	8002a02 <xQueueReceive+0x5e>
        __asm volatile
 80029ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f0:	f383 8811 	msr	BASEPRI, r3
 80029f4:	f3bf 8f6f 	isb	sy
 80029f8:	f3bf 8f4f 	dsb	sy
 80029fc:	61fb      	str	r3, [r7, #28]
    }
 80029fe:	bf00      	nop
 8002a00:	e7fe      	b.n	8002a00 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a02:	f001 f985 	bl	8003d10 <xTaskGetSchedulerState>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d102      	bne.n	8002a12 <xQueueReceive+0x6e>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <xQueueReceive+0x72>
 8002a12:	2301      	movs	r3, #1
 8002a14:	e000      	b.n	8002a18 <xQueueReceive+0x74>
 8002a16:	2300      	movs	r3, #0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10a      	bne.n	8002a32 <xQueueReceive+0x8e>
        __asm volatile
 8002a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a20:	f383 8811 	msr	BASEPRI, r3
 8002a24:	f3bf 8f6f 	isb	sy
 8002a28:	f3bf 8f4f 	dsb	sy
 8002a2c:	61bb      	str	r3, [r7, #24]
    }
 8002a2e:	bf00      	nop
 8002a30:	e7fe      	b.n	8002a30 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002a32:	f002 f8bf 	bl	8004bb4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d02f      	beq.n	8002aa2 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a42:	68b9      	ldr	r1, [r7, #8]
 8002a44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a46:	f000 f927 	bl	8002c98 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f004 fe67 	bl	8007720 <SEGGER_SYSVIEW_ShrinkId>
 8002a52:	4604      	mov	r4, r0
 8002a54:	2000      	movs	r0, #0
 8002a56:	f004 fe63 	bl	8007720 <SEGGER_SYSVIEW_ShrinkId>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2101      	movs	r1, #1
 8002a60:	9100      	str	r1, [sp, #0]
 8002a62:	4621      	mov	r1, r4
 8002a64:	205c      	movs	r0, #92	; 0x5c
 8002a66:	f004 f943 	bl	8006cf0 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	1e5a      	subs	r2, r3, #1
 8002a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a70:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00f      	beq.n	8002a9a <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7c:	3310      	adds	r3, #16
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 ffa6 	bl	80039d0 <xTaskRemoveFromEventList>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d007      	beq.n	8002a9a <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002a8a:	4b4d      	ldr	r3, [pc, #308]	; (8002bc0 <xQueueReceive+0x21c>)
 8002a8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	f3bf 8f4f 	dsb	sy
 8002a96:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002a9a:	f002 f8bb 	bl	8004c14 <vPortExitCritical>
                return pdPASS;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e08a      	b.n	8002bb8 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d113      	bne.n	8002ad0 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002aa8:	f002 f8b4 	bl	8004c14 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f004 fe36 	bl	8007720 <SEGGER_SYSVIEW_ShrinkId>
 8002ab4:	4604      	mov	r4, r0
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	f004 fe32 	bl	8007720 <SEGGER_SYSVIEW_ShrinkId>
 8002abc:	4602      	mov	r2, r0
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	9100      	str	r1, [sp, #0]
 8002ac4:	4621      	mov	r1, r4
 8002ac6:	205c      	movs	r0, #92	; 0x5c
 8002ac8:	f004 f912 	bl	8006cf0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002acc:	2300      	movs	r3, #0
 8002ace:	e073      	b.n	8002bb8 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d106      	bne.n	8002ae4 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002ad6:	f107 0310 	add.w	r3, r7, #16
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 ffde 	bl	8003a9c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002ae4:	f002 f896 	bl	8004c14 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002ae8:	f000 fd2a 	bl	8003540 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002aec:	f002 f862 	bl	8004bb4 <vPortEnterCritical>
 8002af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002af6:	b25b      	sxtb	r3, r3
 8002af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afc:	d103      	bne.n	8002b06 <xQueueReceive+0x162>
 8002afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b0c:	b25b      	sxtb	r3, r3
 8002b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b12:	d103      	bne.n	8002b1c <xQueueReceive+0x178>
 8002b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b1c:	f002 f87a 	bl	8004c14 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b20:	1d3a      	adds	r2, r7, #4
 8002b22:	f107 0310 	add.w	r3, r7, #16
 8002b26:	4611      	mov	r1, r2
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 ffcd 	bl	8003ac8 <xTaskCheckForTimeOut>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d124      	bne.n	8002b7e <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b36:	f000 f927 	bl	8002d88 <prvIsQueueEmpty>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d018      	beq.n	8002b72 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b42:	3324      	adds	r3, #36	; 0x24
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	4611      	mov	r1, r2
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f000 feef 	bl	800392c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002b4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b50:	f000 f8c8 	bl	8002ce4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002b54:	f000 fd02 	bl	800355c <xTaskResumeAll>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f47f af69 	bne.w	8002a32 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002b60:	4b17      	ldr	r3, [pc, #92]	; (8002bc0 <xQueueReceive+0x21c>)
 8002b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	f3bf 8f4f 	dsb	sy
 8002b6c:	f3bf 8f6f 	isb	sy
 8002b70:	e75f      	b.n	8002a32 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002b72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b74:	f000 f8b6 	bl	8002ce4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002b78:	f000 fcf0 	bl	800355c <xTaskResumeAll>
 8002b7c:	e759      	b.n	8002a32 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002b7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b80:	f000 f8b0 	bl	8002ce4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002b84:	f000 fcea 	bl	800355c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b8a:	f000 f8fd 	bl	8002d88 <prvIsQueueEmpty>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f43f af4e 	beq.w	8002a32 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f004 fdc1 	bl	8007720 <SEGGER_SYSVIEW_ShrinkId>
 8002b9e:	4604      	mov	r4, r0
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	f004 fdbd 	bl	8007720 <SEGGER_SYSVIEW_ShrinkId>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2101      	movs	r1, #1
 8002bac:	9100      	str	r1, [sp, #0]
 8002bae:	4621      	mov	r1, r4
 8002bb0:	205c      	movs	r0, #92	; 0x5c
 8002bb2:	f004 f89d 	bl	8006cf0 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002bb6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3734      	adds	r7, #52	; 0x34
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd90      	pop	{r4, r7, pc}
 8002bc0:	e000ed04 	.word	0xe000ed04

08002bc4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10d      	bne.n	8002bfe <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d14d      	bne.n	8002c86 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f001 f8ac 	bl	8003d4c <xTaskPriorityDisinherit>
 8002bf4:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	e043      	b.n	8002c86 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d119      	bne.n	8002c38 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6858      	ldr	r0, [r3, #4]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	68b9      	ldr	r1, [r7, #8]
 8002c10:	f004 ff66 	bl	8007ae0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	441a      	add	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d32b      	bcc.n	8002c86 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	605a      	str	r2, [r3, #4]
 8002c36:	e026      	b.n	8002c86 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	68d8      	ldr	r0, [r3, #12]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	461a      	mov	r2, r3
 8002c42:	68b9      	ldr	r1, [r7, #8]
 8002c44:	f004 ff4c 	bl	8007ae0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	68da      	ldr	r2, [r3, #12]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	425b      	negs	r3, r3
 8002c52:	441a      	add	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d207      	bcs.n	8002c74 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	425b      	negs	r3, r3
 8002c6e:	441a      	add	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d105      	bne.n	8002c86 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1c5a      	adds	r2, r3, #1
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002c8e:	697b      	ldr	r3, [r7, #20]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d018      	beq.n	8002cdc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	441a      	add	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68da      	ldr	r2, [r3, #12]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d303      	bcc.n	8002ccc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68d9      	ldr	r1, [r3, #12]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	6838      	ldr	r0, [r7, #0]
 8002cd8:	f004 ff02 	bl	8007ae0 <memcpy>
    }
}
 8002cdc:	bf00      	nop
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002cec:	f001 ff62 	bl	8004bb4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cf6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002cf8:	e011      	b.n	8002d1e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d012      	beq.n	8002d28 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	3324      	adds	r3, #36	; 0x24
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 fe62 	bl	80039d0 <xTaskRemoveFromEventList>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002d12:	f000 ff3f 	bl	8003b94 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002d16:	7bfb      	ldrb	r3, [r7, #15]
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	dce9      	bgt.n	8002cfa <prvUnlockQueue+0x16>
 8002d26:	e000      	b.n	8002d2a <prvUnlockQueue+0x46>
                        break;
 8002d28:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	22ff      	movs	r2, #255	; 0xff
 8002d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002d32:	f001 ff6f 	bl	8004c14 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002d36:	f001 ff3d 	bl	8004bb4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d40:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d42:	e011      	b.n	8002d68 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d012      	beq.n	8002d72 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3310      	adds	r3, #16
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 fe3d 	bl	80039d0 <xTaskRemoveFromEventList>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002d5c:	f000 ff1a 	bl	8003b94 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002d60:	7bbb      	ldrb	r3, [r7, #14]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	dce9      	bgt.n	8002d44 <prvUnlockQueue+0x60>
 8002d70:	e000      	b.n	8002d74 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002d72:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	22ff      	movs	r2, #255	; 0xff
 8002d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002d7c:	f001 ff4a 	bl	8004c14 <vPortExitCritical>
}
 8002d80:	bf00      	nop
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002d90:	f001 ff10 	bl	8004bb4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d102      	bne.n	8002da2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	e001      	b.n	8002da6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002da6:	f001 ff35 	bl	8004c14 <vPortExitCritical>

    return xReturn;
 8002daa:	68fb      	ldr	r3, [r7, #12]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002dbc:	f001 fefa 	bl	8004bb4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d102      	bne.n	8002dd2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	e001      	b.n	8002dd6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002dd6:	f001 ff1d 	bl	8004c14 <vPortExitCritical>

    return xReturn;
 8002dda:	68fb      	ldr	r3, [r7, #12]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	e01e      	b.n	8002e32 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002df4:	4a13      	ldr	r2, [pc, #76]	; (8002e44 <vQueueAddToRegistry+0x60>)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d115      	bne.n	8002e2c <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002e00:	4910      	ldr	r1, [pc, #64]	; (8002e44 <vQueueAddToRegistry+0x60>)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002e0a:	4a0e      	ldr	r2, [pc, #56]	; (8002e44 <vQueueAddToRegistry+0x60>)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	4413      	add	r3, r2
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f004 fc81 	bl	8007720 <SEGGER_SYSVIEW_ShrinkId>
 8002e1e:	4601      	mov	r1, r0
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	461a      	mov	r2, r3
 8002e24:	2071      	movs	r0, #113	; 0x71
 8002e26:	f003 fe93 	bl	8006b50 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002e2a:	e006      	b.n	8002e3a <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2b07      	cmp	r3, #7
 8002e36:	d9dd      	bls.n	8002df4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002e38:	bf00      	nop
 8002e3a:	bf00      	nop
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	200143dc 	.word	0x200143dc

08002e48 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002e58:	f001 feac 	bl	8004bb4 <vPortEnterCritical>
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e62:	b25b      	sxtb	r3, r3
 8002e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e68:	d103      	bne.n	8002e72 <vQueueWaitForMessageRestricted+0x2a>
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e78:	b25b      	sxtb	r3, r3
 8002e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7e:	d103      	bne.n	8002e88 <vQueueWaitForMessageRestricted+0x40>
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e88:	f001 fec4 	bl	8004c14 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d106      	bne.n	8002ea2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	3324      	adds	r3, #36	; 0x24
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	68b9      	ldr	r1, [r7, #8]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f000 fd69 	bl	8003974 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002ea2:	6978      	ldr	r0, [r7, #20]
 8002ea4:	f7ff ff1e 	bl	8002ce4 <prvUnlockQueue>
    }
 8002ea8:	bf00      	nop
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08c      	sub	sp, #48	; 0x30
 8002eb4:	af04      	add	r7, sp, #16
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	603b      	str	r3, [r7, #0]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ec0:	88fb      	ldrh	r3, [r7, #6]
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f001 ffa1 	bl	8004e0c <pvPortMalloc>
 8002eca:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00e      	beq.n	8002ef0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002ed2:	2058      	movs	r0, #88	; 0x58
 8002ed4:	f001 ff9a 	bl	8004e0c <pvPortMalloc>
 8002ed8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ee6:	e005      	b.n	8002ef4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002ee8:	6978      	ldr	r0, [r7, #20]
 8002eea:	f002 f86f 	bl	8004fcc <vPortFree>
 8002eee:	e001      	b.n	8002ef4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d013      	beq.n	8002f22 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002efa:	88fa      	ldrh	r2, [r7, #6]
 8002efc:	2300      	movs	r3, #0
 8002efe:	9303      	str	r3, [sp, #12]
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	9302      	str	r3, [sp, #8]
 8002f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f06:	9301      	str	r3, [sp, #4]
 8002f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	68b9      	ldr	r1, [r7, #8]
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 f80e 	bl	8002f32 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002f16:	69f8      	ldr	r0, [r7, #28]
 8002f18:	f000 f8a2 	bl	8003060 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	61bb      	str	r3, [r7, #24]
 8002f20:	e002      	b.n	8002f28 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f22:	f04f 33ff 	mov.w	r3, #4294967295
 8002f26:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002f28:	69bb      	ldr	r3, [r7, #24]
    }
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3720      	adds	r7, #32
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b088      	sub	sp, #32
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	60f8      	str	r0, [r7, #12]
 8002f3a:	60b9      	str	r1, [r7, #8]
 8002f3c:	607a      	str	r2, [r7, #4]
 8002f3e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f42:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	461a      	mov	r2, r3
 8002f4a:	21a5      	movs	r1, #165	; 0xa5
 8002f4c:	f004 fdd6 	bl	8007afc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	f023 0307 	bic.w	r3, r3, #7
 8002f68:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00a      	beq.n	8002f8a <prvInitialiseNewTask+0x58>
        __asm volatile
 8002f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f78:	f383 8811 	msr	BASEPRI, r3
 8002f7c:	f3bf 8f6f 	isb	sy
 8002f80:	f3bf 8f4f 	dsb	sy
 8002f84:	617b      	str	r3, [r7, #20]
    }
 8002f86:	bf00      	nop
 8002f88:	e7fe      	b.n	8002f88 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d01f      	beq.n	8002fd0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f90:	2300      	movs	r3, #0
 8002f92:	61fb      	str	r3, [r7, #28]
 8002f94:	e012      	b.n	8002fbc <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	7819      	ldrb	r1, [r3, #0]
 8002f9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	3334      	adds	r3, #52	; 0x34
 8002fa6:	460a      	mov	r2, r1
 8002fa8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	4413      	add	r3, r2
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d006      	beq.n	8002fc4 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	61fb      	str	r3, [r7, #28]
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	2b09      	cmp	r3, #9
 8002fc0:	d9e9      	bls.n	8002f96 <prvInitialiseNewTask+0x64>
 8002fc2:	e000      	b.n	8002fc6 <prvInitialiseNewTask+0x94>
            {
                break;
 8002fc4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002fce:	e003      	b.n	8002fd8 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d901      	bls.n	8002fe2 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002fde:	2304      	movs	r3, #4
 8002fe0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fe6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fec:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff6:	3304      	adds	r3, #4
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff f96b 	bl	80022d4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003000:	3318      	adds	r3, #24
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff f966 	bl	80022d4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800300c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800300e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003010:	f1c3 0205 	rsb	r2, r3, #5
 8003014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003016:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800301c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800301e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003020:	3350      	adds	r3, #80	; 0x50
 8003022:	2204      	movs	r2, #4
 8003024:	2100      	movs	r1, #0
 8003026:	4618      	mov	r0, r3
 8003028:	f004 fd68 	bl	8007afc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800302c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302e:	3354      	adds	r3, #84	; 0x54
 8003030:	2201      	movs	r2, #1
 8003032:	2100      	movs	r1, #0
 8003034:	4618      	mov	r0, r3
 8003036:	f004 fd61 	bl	8007afc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	68f9      	ldr	r1, [r7, #12]
 800303e:	69b8      	ldr	r0, [r7, #24]
 8003040:	f001 fc08 	bl	8004854 <pxPortInitialiseStack>
 8003044:	4602      	mov	r2, r0
 8003046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003048:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800304a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304c:	2b00      	cmp	r3, #0
 800304e:	d002      	beq.n	8003056 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003052:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003054:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003056:	bf00      	nop
 8003058:	3720      	adds	r7, #32
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
	...

08003060 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003060:	b5b0      	push	{r4, r5, r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af02      	add	r7, sp, #8
 8003066:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003068:	f001 fda4 	bl	8004bb4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800306c:	4b3b      	ldr	r3, [pc, #236]	; (800315c <prvAddNewTaskToReadyList+0xfc>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	3301      	adds	r3, #1
 8003072:	4a3a      	ldr	r2, [pc, #232]	; (800315c <prvAddNewTaskToReadyList+0xfc>)
 8003074:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003076:	4b3a      	ldr	r3, [pc, #232]	; (8003160 <prvAddNewTaskToReadyList+0x100>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d109      	bne.n	8003092 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800307e:	4a38      	ldr	r2, [pc, #224]	; (8003160 <prvAddNewTaskToReadyList+0x100>)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003084:	4b35      	ldr	r3, [pc, #212]	; (800315c <prvAddNewTaskToReadyList+0xfc>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d110      	bne.n	80030ae <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800308c:	f000 fda6 	bl	8003bdc <prvInitialiseTaskLists>
 8003090:	e00d      	b.n	80030ae <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003092:	4b34      	ldr	r3, [pc, #208]	; (8003164 <prvAddNewTaskToReadyList+0x104>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d109      	bne.n	80030ae <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800309a:	4b31      	ldr	r3, [pc, #196]	; (8003160 <prvAddNewTaskToReadyList+0x100>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d802      	bhi.n	80030ae <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80030a8:	4a2d      	ldr	r2, [pc, #180]	; (8003160 <prvAddNewTaskToReadyList+0x100>)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80030ae:	4b2e      	ldr	r3, [pc, #184]	; (8003168 <prvAddNewTaskToReadyList+0x108>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	3301      	adds	r3, #1
 80030b4:	4a2c      	ldr	r2, [pc, #176]	; (8003168 <prvAddNewTaskToReadyList+0x108>)
 80030b6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80030b8:	4b2b      	ldr	r3, [pc, #172]	; (8003168 <prvAddNewTaskToReadyList+0x108>)
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d016      	beq.n	80030f4 <prvAddNewTaskToReadyList+0x94>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f004 fa03 	bl	80074d4 <SEGGER_SYSVIEW_OnTaskCreate>
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	461d      	mov	r5, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	461c      	mov	r4, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	1ae3      	subs	r3, r4, r3
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	462b      	mov	r3, r5
 80030f0:	f002 f90e 	bl	8005310 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f004 fa70 	bl	80075dc <SEGGER_SYSVIEW_OnTaskStartReady>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003100:	2201      	movs	r2, #1
 8003102:	409a      	lsls	r2, r3
 8003104:	4b19      	ldr	r3, [pc, #100]	; (800316c <prvAddNewTaskToReadyList+0x10c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4313      	orrs	r3, r2
 800310a:	4a18      	ldr	r2, [pc, #96]	; (800316c <prvAddNewTaskToReadyList+0x10c>)
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4a15      	ldr	r2, [pc, #84]	; (8003170 <prvAddNewTaskToReadyList+0x110>)
 800311c:	441a      	add	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	3304      	adds	r3, #4
 8003122:	4619      	mov	r1, r3
 8003124:	4610      	mov	r0, r2
 8003126:	f7ff f8e2 	bl	80022ee <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800312a:	f001 fd73 	bl	8004c14 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800312e:	4b0d      	ldr	r3, [pc, #52]	; (8003164 <prvAddNewTaskToReadyList+0x104>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00e      	beq.n	8003154 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003136:	4b0a      	ldr	r3, [pc, #40]	; (8003160 <prvAddNewTaskToReadyList+0x100>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003140:	429a      	cmp	r2, r3
 8003142:	d207      	bcs.n	8003154 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003144:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <prvAddNewTaskToReadyList+0x114>)
 8003146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	f3bf 8f4f 	dsb	sy
 8003150:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003154:	bf00      	nop
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bdb0      	pop	{r4, r5, r7, pc}
 800315c:	20000118 	.word	0x20000118
 8003160:	20000040 	.word	0x20000040
 8003164:	20000124 	.word	0x20000124
 8003168:	20000134 	.word	0x20000134
 800316c:	20000120 	.word	0x20000120
 8003170:	20000044 	.word	0x20000044
 8003174:	e000ed04 	.word	0xe000ed04

08003178 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003180:	2300      	movs	r3, #0
 8003182:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d01b      	beq.n	80031c2 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800318a:	4b15      	ldr	r3, [pc, #84]	; (80031e0 <vTaskDelay+0x68>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00a      	beq.n	80031a8 <vTaskDelay+0x30>
        __asm volatile
 8003192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003196:	f383 8811 	msr	BASEPRI, r3
 800319a:	f3bf 8f6f 	isb	sy
 800319e:	f3bf 8f4f 	dsb	sy
 80031a2:	60bb      	str	r3, [r7, #8]
    }
 80031a4:	bf00      	nop
 80031a6:	e7fe      	b.n	80031a6 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80031a8:	f000 f9ca 	bl	8003540 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	2023      	movs	r0, #35	; 0x23
 80031b0:	f003 fc92 	bl	8006ad8 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80031b4:	2100      	movs	r1, #0
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 ffc2 	bl	8004140 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80031bc:	f000 f9ce 	bl	800355c <xTaskResumeAll>
 80031c0:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d107      	bne.n	80031d8 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 80031c8:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <vTaskDelay+0x6c>)
 80031ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	f3bf 8f4f 	dsb	sy
 80031d4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80031d8:	bf00      	nop
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	20000140 	.word	0x20000140
 80031e4:	e000ed04 	.word	0xe000ed04

080031e8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80031f0:	f001 fce0 	bl	8004bb4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d102      	bne.n	8003200 <vTaskSuspend+0x18>
 80031fa:	4b4a      	ldr	r3, [pc, #296]	; (8003324 <vTaskSuspend+0x13c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	e000      	b.n	8003202 <vTaskSuspend+0x1a>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	4618      	mov	r0, r3
 8003208:	f004 fa8a 	bl	8007720 <SEGGER_SYSVIEW_ShrinkId>
 800320c:	4603      	mov	r3, r0
 800320e:	4619      	mov	r1, r3
 8003210:	2029      	movs	r0, #41	; 0x29
 8003212:	f003 fc61 	bl	8006ad8 <SEGGER_SYSVIEW_RecordU32>

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	3304      	adds	r3, #4
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff f8c4 	bl	80023a8 <uxListRemove>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d115      	bne.n	8003252 <vTaskSuspend+0x6a>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800322a:	493f      	ldr	r1, [pc, #252]	; (8003328 <vTaskSuspend+0x140>)
 800322c:	4613      	mov	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10a      	bne.n	8003252 <vTaskSuspend+0x6a>
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003240:	2201      	movs	r2, #1
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43da      	mvns	r2, r3
 8003248:	4b38      	ldr	r3, [pc, #224]	; (800332c <vTaskSuspend+0x144>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4013      	ands	r3, r2
 800324e:	4a37      	ldr	r2, [pc, #220]	; (800332c <vTaskSuspend+0x144>)
 8003250:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003256:	2b00      	cmp	r3, #0
 8003258:	d004      	beq.n	8003264 <vTaskSuspend+0x7c>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	3318      	adds	r3, #24
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff f8a2 	bl	80023a8 <uxListRemove>
            }
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	211b      	movs	r1, #27
 8003268:	4618      	mov	r0, r3
 800326a:	f004 f9f9 	bl	8007660 <SEGGER_SYSVIEW_OnTaskStopReady>
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	3304      	adds	r3, #4
 8003272:	4619      	mov	r1, r3
 8003274:	482e      	ldr	r0, [pc, #184]	; (8003330 <vTaskSuspend+0x148>)
 8003276:	f7ff f83a 	bl	80022ee <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
                {
                    BaseType_t x;

                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800327a:	2300      	movs	r3, #0
 800327c:	617b      	str	r3, [r7, #20]
 800327e:	e010      	b.n	80032a2 <vTaskSuspend+0xba>
                    {
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	4413      	add	r3, r2
 8003286:	3354      	adds	r3, #84	; 0x54
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b01      	cmp	r3, #1
 800328e:	d105      	bne.n	800329c <vTaskSuspend+0xb4>
                        {
                            /* The task was blocked to wait for a notification, but is
                             * now suspended, so no notification was received. */
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	4413      	add	r3, r2
 8003296:	3354      	adds	r3, #84	; 0x54
 8003298:	2200      	movs	r2, #0
 800329a:	701a      	strb	r2, [r3, #0]
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	3301      	adds	r3, #1
 80032a0:	617b      	str	r3, [r7, #20]
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	ddeb      	ble.n	8003280 <vTaskSuspend+0x98>
                        }
                    }
                }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 80032a8:	f001 fcb4 	bl	8004c14 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80032ac:	4b21      	ldr	r3, [pc, #132]	; (8003334 <vTaskSuspend+0x14c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d005      	beq.n	80032c0 <vTaskSuspend+0xd8>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 80032b4:	f001 fc7e 	bl	8004bb4 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 80032b8:	f000 fd0e 	bl	8003cd8 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 80032bc:	f001 fcaa 	bl	8004c14 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 80032c0:	4b18      	ldr	r3, [pc, #96]	; (8003324 <vTaskSuspend+0x13c>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d127      	bne.n	800331a <vTaskSuspend+0x132>
        {
            if( xSchedulerRunning != pdFALSE )
 80032ca:	4b1a      	ldr	r3, [pc, #104]	; (8003334 <vTaskSuspend+0x14c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d017      	beq.n	8003302 <vTaskSuspend+0x11a>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 80032d2:	4b19      	ldr	r3, [pc, #100]	; (8003338 <vTaskSuspend+0x150>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00a      	beq.n	80032f0 <vTaskSuspend+0x108>
        __asm volatile
 80032da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032de:	f383 8811 	msr	BASEPRI, r3
 80032e2:	f3bf 8f6f 	isb	sy
 80032e6:	f3bf 8f4f 	dsb	sy
 80032ea:	60fb      	str	r3, [r7, #12]
    }
 80032ec:	bf00      	nop
 80032ee:	e7fe      	b.n	80032ee <vTaskSuspend+0x106>
                portYIELD_WITHIN_API();
 80032f0:	4b12      	ldr	r3, [pc, #72]	; (800333c <vTaskSuspend+0x154>)
 80032f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	f3bf 8f4f 	dsb	sy
 80032fc:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003300:	e00b      	b.n	800331a <vTaskSuspend+0x132>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8003302:	4b0b      	ldr	r3, [pc, #44]	; (8003330 <vTaskSuspend+0x148>)
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	4b0e      	ldr	r3, [pc, #56]	; (8003340 <vTaskSuspend+0x158>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d103      	bne.n	8003316 <vTaskSuspend+0x12e>
                    pxCurrentTCB = NULL;
 800330e:	4b05      	ldr	r3, [pc, #20]	; (8003324 <vTaskSuspend+0x13c>)
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]
    }
 8003314:	e001      	b.n	800331a <vTaskSuspend+0x132>
                    vTaskSwitchContext();
 8003316:	f000 fa9f 	bl	8003858 <vTaskSwitchContext>
    }
 800331a:	bf00      	nop
 800331c:	3718      	adds	r7, #24
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	20000040 	.word	0x20000040
 8003328:	20000044 	.word	0x20000044
 800332c:	20000120 	.word	0x20000120
 8003330:	20000104 	.word	0x20000104
 8003334:	20000124 	.word	0x20000124
 8003338:	20000140 	.word	0x20000140
 800333c:	e000ed04 	.word	0xe000ed04
 8003340:	20000118 	.word	0x20000118

08003344 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8003344:	b480      	push	{r7}
 8003346:	b087      	sub	sp, #28
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 800334c:	2300      	movs	r3, #0
 800334e:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10a      	bne.n	8003370 <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 800335a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335e:	f383 8811 	msr	BASEPRI, r3
 8003362:	f3bf 8f6f 	isb	sy
 8003366:	f3bf 8f4f 	dsb	sy
 800336a:	60fb      	str	r3, [r7, #12]
    }
 800336c:	bf00      	nop
 800336e:	e7fe      	b.n	800336e <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	4a0a      	ldr	r2, [pc, #40]	; (80033a0 <prvTaskIsTaskSuspended+0x5c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d10a      	bne.n	8003390 <prvTaskIsTaskSuspended+0x4c>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337e:	4a09      	ldr	r2, [pc, #36]	; (80033a4 <prvTaskIsTaskSuspended+0x60>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d005      	beq.n	8003390 <prvTaskIsTaskSuspended+0x4c>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <prvTaskIsTaskSuspended+0x4c>
                {
                    xReturn = pdTRUE;
 800338c:	2301      	movs	r3, #1
 800338e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003390:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003392:	4618      	mov	r0, r3
 8003394:	371c      	adds	r7, #28
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	20000104 	.word	0x20000104
 80033a4:	200000d8 	.word	0x200000d8

080033a8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	60fb      	str	r3, [r7, #12]

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10a      	bne.n	80033d0 <vTaskResume+0x28>
        __asm volatile
 80033ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033be:	f383 8811 	msr	BASEPRI, r3
 80033c2:	f3bf 8f6f 	isb	sy
 80033c6:	f3bf 8f4f 	dsb	sy
 80033ca:	60bb      	str	r3, [r7, #8]
    }
 80033cc:	bf00      	nop
 80033ce:	e7fe      	b.n	80033ce <vTaskResume+0x26>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80033d0:	4b26      	ldr	r3, [pc, #152]	; (800346c <vTaskResume+0xc4>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d044      	beq.n	8003464 <vTaskResume+0xbc>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d041      	beq.n	8003464 <vTaskResume+0xbc>
        {
            taskENTER_CRITICAL();
 80033e0:	f001 fbe8 	bl	8004bb4 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f7ff ffad 	bl	8003344 <prvTaskIsTaskSuspended>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d037      	beq.n	8003460 <vTaskResume+0xb8>
                {
                    traceTASK_RESUME( pxTCB );
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f004 f994 	bl	8007720 <SEGGER_SYSVIEW_ShrinkId>
 80033f8:	4603      	mov	r3, r0
 80033fa:	4619      	mov	r1, r3
 80033fc:	202a      	movs	r0, #42	; 0x2a
 80033fe:	f003 fb6b 	bl	8006ad8 <SEGGER_SYSVIEW_RecordU32>

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	3304      	adds	r3, #4
 8003406:	4618      	mov	r0, r3
 8003408:	f7fe ffce 	bl	80023a8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4618      	mov	r0, r3
 8003410:	f004 f8e4 	bl	80075dc <SEGGER_SYSVIEW_OnTaskStartReady>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003418:	2201      	movs	r2, #1
 800341a:	409a      	lsls	r2, r3
 800341c:	4b14      	ldr	r3, [pc, #80]	; (8003470 <vTaskResume+0xc8>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4313      	orrs	r3, r2
 8003422:	4a13      	ldr	r2, [pc, #76]	; (8003470 <vTaskResume+0xc8>)
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800342a:	4613      	mov	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4a10      	ldr	r2, [pc, #64]	; (8003474 <vTaskResume+0xcc>)
 8003434:	441a      	add	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	3304      	adds	r3, #4
 800343a:	4619      	mov	r1, r3
 800343c:	4610      	mov	r0, r2
 800343e:	f7fe ff56 	bl	80022ee <vListInsertEnd>

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003446:	4b09      	ldr	r3, [pc, #36]	; (800346c <vTaskResume+0xc4>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344c:	429a      	cmp	r2, r3
 800344e:	d307      	bcc.n	8003460 <vTaskResume+0xb8>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 8003450:	4b09      	ldr	r3, [pc, #36]	; (8003478 <vTaskResume+0xd0>)
 8003452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	f3bf 8f4f 	dsb	sy
 800345c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8003460:	f001 fbd8 	bl	8004c14 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003464:	bf00      	nop
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	20000040 	.word	0x20000040
 8003470:	20000120 	.word	0x20000120
 8003474:	20000044 	.word	0x20000044
 8003478:	e000ed04 	.word	0xe000ed04

0800347c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003482:	4b27      	ldr	r3, [pc, #156]	; (8003520 <vTaskStartScheduler+0xa4>)
 8003484:	9301      	str	r3, [sp, #4]
 8003486:	2300      	movs	r3, #0
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	2300      	movs	r3, #0
 800348c:	2282      	movs	r2, #130	; 0x82
 800348e:	4925      	ldr	r1, [pc, #148]	; (8003524 <vTaskStartScheduler+0xa8>)
 8003490:	4825      	ldr	r0, [pc, #148]	; (8003528 <vTaskStartScheduler+0xac>)
 8003492:	f7ff fd0d 	bl	8002eb0 <xTaskCreate>
 8003496:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d102      	bne.n	80034a4 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800349e:	f000 fec7 	bl	8004230 <xTimerCreateTimerTask>
 80034a2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d124      	bne.n	80034f4 <vTaskStartScheduler+0x78>
        __asm volatile
 80034aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ae:	f383 8811 	msr	BASEPRI, r3
 80034b2:	f3bf 8f6f 	isb	sy
 80034b6:	f3bf 8f4f 	dsb	sy
 80034ba:	60bb      	str	r3, [r7, #8]
    }
 80034bc:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80034be:	4b1b      	ldr	r3, [pc, #108]	; (800352c <vTaskStartScheduler+0xb0>)
 80034c0:	f04f 32ff 	mov.w	r2, #4294967295
 80034c4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80034c6:	4b1a      	ldr	r3, [pc, #104]	; (8003530 <vTaskStartScheduler+0xb4>)
 80034c8:	2201      	movs	r2, #1
 80034ca:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80034cc:	4b19      	ldr	r3, [pc, #100]	; (8003534 <vTaskStartScheduler+0xb8>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80034d2:	4b19      	ldr	r3, [pc, #100]	; (8003538 <vTaskStartScheduler+0xbc>)
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	4b12      	ldr	r3, [pc, #72]	; (8003520 <vTaskStartScheduler+0xa4>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d102      	bne.n	80034e4 <vTaskStartScheduler+0x68>
 80034de:	f003 ffdd 	bl	800749c <SEGGER_SYSVIEW_OnIdle>
 80034e2:	e004      	b.n	80034ee <vTaskStartScheduler+0x72>
 80034e4:	4b14      	ldr	r3, [pc, #80]	; (8003538 <vTaskStartScheduler+0xbc>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f004 f835 	bl	8007558 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80034ee:	f001 fa41 	bl	8004974 <xPortStartScheduler>
 80034f2:	e00e      	b.n	8003512 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fa:	d10a      	bne.n	8003512 <vTaskStartScheduler+0x96>
        __asm volatile
 80034fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003500:	f383 8811 	msr	BASEPRI, r3
 8003504:	f3bf 8f6f 	isb	sy
 8003508:	f3bf 8f4f 	dsb	sy
 800350c:	607b      	str	r3, [r7, #4]
    }
 800350e:	bf00      	nop
 8003510:	e7fe      	b.n	8003510 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003512:	4b0a      	ldr	r3, [pc, #40]	; (800353c <vTaskStartScheduler+0xc0>)
 8003514:	681b      	ldr	r3, [r3, #0]
}
 8003516:	bf00      	nop
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	2000013c 	.word	0x2000013c
 8003524:	08007be4 	.word	0x08007be4
 8003528:	08003bad 	.word	0x08003bad
 800352c:	20000138 	.word	0x20000138
 8003530:	20000124 	.word	0x20000124
 8003534:	2000011c 	.word	0x2000011c
 8003538:	20000040 	.word	0x20000040
 800353c:	2000000c 	.word	0x2000000c

08003540 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003544:	4b04      	ldr	r3, [pc, #16]	; (8003558 <vTaskSuspendAll+0x18>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	3301      	adds	r3, #1
 800354a:	4a03      	ldr	r2, [pc, #12]	; (8003558 <vTaskSuspendAll+0x18>)
 800354c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800354e:	bf00      	nop
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	20000140 	.word	0x20000140

0800355c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003562:	2300      	movs	r3, #0
 8003564:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003566:	2300      	movs	r3, #0
 8003568:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800356a:	4b43      	ldr	r3, [pc, #268]	; (8003678 <xTaskResumeAll+0x11c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10a      	bne.n	8003588 <xTaskResumeAll+0x2c>
        __asm volatile
 8003572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003576:	f383 8811 	msr	BASEPRI, r3
 800357a:	f3bf 8f6f 	isb	sy
 800357e:	f3bf 8f4f 	dsb	sy
 8003582:	603b      	str	r3, [r7, #0]
    }
 8003584:	bf00      	nop
 8003586:	e7fe      	b.n	8003586 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003588:	f001 fb14 	bl	8004bb4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800358c:	4b3a      	ldr	r3, [pc, #232]	; (8003678 <xTaskResumeAll+0x11c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	3b01      	subs	r3, #1
 8003592:	4a39      	ldr	r2, [pc, #228]	; (8003678 <xTaskResumeAll+0x11c>)
 8003594:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003596:	4b38      	ldr	r3, [pc, #224]	; (8003678 <xTaskResumeAll+0x11c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d165      	bne.n	800366a <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800359e:	4b37      	ldr	r3, [pc, #220]	; (800367c <xTaskResumeAll+0x120>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d061      	beq.n	800366a <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035a6:	e032      	b.n	800360e <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035a8:	4b35      	ldr	r3, [pc, #212]	; (8003680 <xTaskResumeAll+0x124>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	3318      	adds	r3, #24
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fe fef7 	bl	80023a8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	3304      	adds	r3, #4
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fe fef2 	bl	80023a8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f004 f808 	bl	80075dc <SEGGER_SYSVIEW_OnTaskStartReady>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d0:	2201      	movs	r2, #1
 80035d2:	409a      	lsls	r2, r3
 80035d4:	4b2b      	ldr	r3, [pc, #172]	; (8003684 <xTaskResumeAll+0x128>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4313      	orrs	r3, r2
 80035da:	4a2a      	ldr	r2, [pc, #168]	; (8003684 <xTaskResumeAll+0x128>)
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e2:	4613      	mov	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4a27      	ldr	r2, [pc, #156]	; (8003688 <xTaskResumeAll+0x12c>)
 80035ec:	441a      	add	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	3304      	adds	r3, #4
 80035f2:	4619      	mov	r1, r3
 80035f4:	4610      	mov	r0, r2
 80035f6:	f7fe fe7a 	bl	80022ee <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035fe:	4b23      	ldr	r3, [pc, #140]	; (800368c <xTaskResumeAll+0x130>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003604:	429a      	cmp	r2, r3
 8003606:	d302      	bcc.n	800360e <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8003608:	4b21      	ldr	r3, [pc, #132]	; (8003690 <xTaskResumeAll+0x134>)
 800360a:	2201      	movs	r2, #1
 800360c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800360e:	4b1c      	ldr	r3, [pc, #112]	; (8003680 <xTaskResumeAll+0x124>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1c8      	bne.n	80035a8 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800361c:	f000 fb5c 	bl	8003cd8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003620:	4b1c      	ldr	r3, [pc, #112]	; (8003694 <xTaskResumeAll+0x138>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d010      	beq.n	800364e <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800362c:	f000 f858 	bl	80036e0 <xTaskIncrementTick>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d002      	beq.n	800363c <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8003636:	4b16      	ldr	r3, [pc, #88]	; (8003690 <xTaskResumeAll+0x134>)
 8003638:	2201      	movs	r2, #1
 800363a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3b01      	subs	r3, #1
 8003640:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1f1      	bne.n	800362c <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8003648:	4b12      	ldr	r3, [pc, #72]	; (8003694 <xTaskResumeAll+0x138>)
 800364a:	2200      	movs	r2, #0
 800364c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800364e:	4b10      	ldr	r3, [pc, #64]	; (8003690 <xTaskResumeAll+0x134>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d009      	beq.n	800366a <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003656:	2301      	movs	r3, #1
 8003658:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800365a:	4b0f      	ldr	r3, [pc, #60]	; (8003698 <xTaskResumeAll+0x13c>)
 800365c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	f3bf 8f4f 	dsb	sy
 8003666:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800366a:	f001 fad3 	bl	8004c14 <vPortExitCritical>

    return xAlreadyYielded;
 800366e:	68bb      	ldr	r3, [r7, #8]
}
 8003670:	4618      	mov	r0, r3
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	20000140 	.word	0x20000140
 800367c:	20000118 	.word	0x20000118
 8003680:	200000d8 	.word	0x200000d8
 8003684:	20000120 	.word	0x20000120
 8003688:	20000044 	.word	0x20000044
 800368c:	20000040 	.word	0x20000040
 8003690:	2000012c 	.word	0x2000012c
 8003694:	20000128 	.word	0x20000128
 8003698:	e000ed04 	.word	0xe000ed04

0800369c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80036a2:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <xTaskGetTickCount+0x1c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80036a8:	687b      	ldr	r3, [r7, #4]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	2000011c 	.word	0x2000011c

080036bc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036c2:	f001 fb63 	bl	8004d8c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80036c6:	2300      	movs	r3, #0
 80036c8:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80036ca:	4b04      	ldr	r3, [pc, #16]	; (80036dc <xTaskGetTickCountFromISR+0x20>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80036d0:	683b      	ldr	r3, [r7, #0]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	2000011c 	.word	0x2000011c

080036e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80036e6:	2300      	movs	r3, #0
 80036e8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036ea:	4b50      	ldr	r3, [pc, #320]	; (800382c <xTaskIncrementTick+0x14c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f040 8092 	bne.w	8003818 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80036f4:	4b4e      	ldr	r3, [pc, #312]	; (8003830 <xTaskIncrementTick+0x150>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	3301      	adds	r3, #1
 80036fa:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80036fc:	4a4c      	ldr	r2, [pc, #304]	; (8003830 <xTaskIncrementTick+0x150>)
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d120      	bne.n	800374a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003708:	4b4a      	ldr	r3, [pc, #296]	; (8003834 <xTaskIncrementTick+0x154>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00a      	beq.n	8003728 <xTaskIncrementTick+0x48>
        __asm volatile
 8003712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003716:	f383 8811 	msr	BASEPRI, r3
 800371a:	f3bf 8f6f 	isb	sy
 800371e:	f3bf 8f4f 	dsb	sy
 8003722:	603b      	str	r3, [r7, #0]
    }
 8003724:	bf00      	nop
 8003726:	e7fe      	b.n	8003726 <xTaskIncrementTick+0x46>
 8003728:	4b42      	ldr	r3, [pc, #264]	; (8003834 <xTaskIncrementTick+0x154>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	60fb      	str	r3, [r7, #12]
 800372e:	4b42      	ldr	r3, [pc, #264]	; (8003838 <xTaskIncrementTick+0x158>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a40      	ldr	r2, [pc, #256]	; (8003834 <xTaskIncrementTick+0x154>)
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	4a40      	ldr	r2, [pc, #256]	; (8003838 <xTaskIncrementTick+0x158>)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6013      	str	r3, [r2, #0]
 800373c:	4b3f      	ldr	r3, [pc, #252]	; (800383c <xTaskIncrementTick+0x15c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	3301      	adds	r3, #1
 8003742:	4a3e      	ldr	r2, [pc, #248]	; (800383c <xTaskIncrementTick+0x15c>)
 8003744:	6013      	str	r3, [r2, #0]
 8003746:	f000 fac7 	bl	8003cd8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800374a:	4b3d      	ldr	r3, [pc, #244]	; (8003840 <xTaskIncrementTick+0x160>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	429a      	cmp	r2, r3
 8003752:	d34c      	bcc.n	80037ee <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003754:	4b37      	ldr	r3, [pc, #220]	; (8003834 <xTaskIncrementTick+0x154>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d104      	bne.n	8003768 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800375e:	4b38      	ldr	r3, [pc, #224]	; (8003840 <xTaskIncrementTick+0x160>)
 8003760:	f04f 32ff 	mov.w	r2, #4294967295
 8003764:	601a      	str	r2, [r3, #0]
                    break;
 8003766:	e042      	b.n	80037ee <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003768:	4b32      	ldr	r3, [pc, #200]	; (8003834 <xTaskIncrementTick+0x154>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	429a      	cmp	r2, r3
 800377e:	d203      	bcs.n	8003788 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003780:	4a2f      	ldr	r2, [pc, #188]	; (8003840 <xTaskIncrementTick+0x160>)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003786:	e032      	b.n	80037ee <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	3304      	adds	r3, #4
 800378c:	4618      	mov	r0, r3
 800378e:	f7fe fe0b 	bl	80023a8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003796:	2b00      	cmp	r3, #0
 8003798:	d004      	beq.n	80037a4 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	3318      	adds	r3, #24
 800379e:	4618      	mov	r0, r3
 80037a0:	f7fe fe02 	bl	80023a8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f003 ff18 	bl	80075dc <SEGGER_SYSVIEW_OnTaskStartReady>
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b0:	2201      	movs	r2, #1
 80037b2:	409a      	lsls	r2, r3
 80037b4:	4b23      	ldr	r3, [pc, #140]	; (8003844 <xTaskIncrementTick+0x164>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	4a22      	ldr	r2, [pc, #136]	; (8003844 <xTaskIncrementTick+0x164>)
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c2:	4613      	mov	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4413      	add	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4a1f      	ldr	r2, [pc, #124]	; (8003848 <xTaskIncrementTick+0x168>)
 80037cc:	441a      	add	r2, r3
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	3304      	adds	r3, #4
 80037d2:	4619      	mov	r1, r3
 80037d4:	4610      	mov	r0, r2
 80037d6:	f7fe fd8a 	bl	80022ee <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037de:	4b1b      	ldr	r3, [pc, #108]	; (800384c <xTaskIncrementTick+0x16c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d3b5      	bcc.n	8003754 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80037e8:	2301      	movs	r3, #1
 80037ea:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037ec:	e7b2      	b.n	8003754 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80037ee:	4b17      	ldr	r3, [pc, #92]	; (800384c <xTaskIncrementTick+0x16c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f4:	4914      	ldr	r1, [pc, #80]	; (8003848 <xTaskIncrementTick+0x168>)
 80037f6:	4613      	mov	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4413      	add	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	440b      	add	r3, r1
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d901      	bls.n	800380a <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8003806:	2301      	movs	r3, #1
 8003808:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800380a:	4b11      	ldr	r3, [pc, #68]	; (8003850 <xTaskIncrementTick+0x170>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d007      	beq.n	8003822 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8003812:	2301      	movs	r3, #1
 8003814:	617b      	str	r3, [r7, #20]
 8003816:	e004      	b.n	8003822 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003818:	4b0e      	ldr	r3, [pc, #56]	; (8003854 <xTaskIncrementTick+0x174>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	3301      	adds	r3, #1
 800381e:	4a0d      	ldr	r2, [pc, #52]	; (8003854 <xTaskIncrementTick+0x174>)
 8003820:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003822:	697b      	ldr	r3, [r7, #20]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3718      	adds	r7, #24
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	20000140 	.word	0x20000140
 8003830:	2000011c 	.word	0x2000011c
 8003834:	200000d0 	.word	0x200000d0
 8003838:	200000d4 	.word	0x200000d4
 800383c:	20000130 	.word	0x20000130
 8003840:	20000138 	.word	0x20000138
 8003844:	20000120 	.word	0x20000120
 8003848:	20000044 	.word	0x20000044
 800384c:	20000040 	.word	0x20000040
 8003850:	2000012c 	.word	0x2000012c
 8003854:	20000128 	.word	0x20000128

08003858 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800385e:	4b2d      	ldr	r3, [pc, #180]	; (8003914 <vTaskSwitchContext+0xbc>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003866:	4b2c      	ldr	r3, [pc, #176]	; (8003918 <vTaskSwitchContext+0xc0>)
 8003868:	2201      	movs	r2, #1
 800386a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800386c:	e04d      	b.n	800390a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800386e:	4b2a      	ldr	r3, [pc, #168]	; (8003918 <vTaskSwitchContext+0xc0>)
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003874:	4b29      	ldr	r3, [pc, #164]	; (800391c <vTaskSwitchContext+0xc4>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	fab3 f383 	clz	r3, r3
 8003880:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003882:	7afb      	ldrb	r3, [r7, #11]
 8003884:	f1c3 031f 	rsb	r3, r3, #31
 8003888:	617b      	str	r3, [r7, #20]
 800388a:	4925      	ldr	r1, [pc, #148]	; (8003920 <vTaskSwitchContext+0xc8>)
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	4613      	mov	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	440b      	add	r3, r1
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10a      	bne.n	80038b4 <vTaskSwitchContext+0x5c>
        __asm volatile
 800389e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a2:	f383 8811 	msr	BASEPRI, r3
 80038a6:	f3bf 8f6f 	isb	sy
 80038aa:	f3bf 8f4f 	dsb	sy
 80038ae:	607b      	str	r3, [r7, #4]
    }
 80038b0:	bf00      	nop
 80038b2:	e7fe      	b.n	80038b2 <vTaskSwitchContext+0x5a>
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	4613      	mov	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4a18      	ldr	r2, [pc, #96]	; (8003920 <vTaskSwitchContext+0xc8>)
 80038c0:	4413      	add	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	605a      	str	r2, [r3, #4]
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	3308      	adds	r3, #8
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d104      	bne.n	80038e4 <vTaskSwitchContext+0x8c>
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	605a      	str	r2, [r3, #4]
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	4a0e      	ldr	r2, [pc, #56]	; (8003924 <vTaskSwitchContext+0xcc>)
 80038ec:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80038ee:	4b0d      	ldr	r3, [pc, #52]	; (8003924 <vTaskSwitchContext+0xcc>)
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	4b0d      	ldr	r3, [pc, #52]	; (8003928 <vTaskSwitchContext+0xd0>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d102      	bne.n	8003900 <vTaskSwitchContext+0xa8>
 80038fa:	f003 fdcf 	bl	800749c <SEGGER_SYSVIEW_OnIdle>
}
 80038fe:	e004      	b.n	800390a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003900:	4b08      	ldr	r3, [pc, #32]	; (8003924 <vTaskSwitchContext+0xcc>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f003 fe27 	bl	8007558 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800390a:	bf00      	nop
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	20000140 	.word	0x20000140
 8003918:	2000012c 	.word	0x2000012c
 800391c:	20000120 	.word	0x20000120
 8003920:	20000044 	.word	0x20000044
 8003924:	20000040 	.word	0x20000040
 8003928:	2000013c 	.word	0x2000013c

0800392c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10a      	bne.n	8003952 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800393c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003940:	f383 8811 	msr	BASEPRI, r3
 8003944:	f3bf 8f6f 	isb	sy
 8003948:	f3bf 8f4f 	dsb	sy
 800394c:	60fb      	str	r3, [r7, #12]
    }
 800394e:	bf00      	nop
 8003950:	e7fe      	b.n	8003950 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003952:	4b07      	ldr	r3, [pc, #28]	; (8003970 <vTaskPlaceOnEventList+0x44>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	3318      	adds	r3, #24
 8003958:	4619      	mov	r1, r3
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7fe fceb 	bl	8002336 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003960:	2101      	movs	r1, #1
 8003962:	6838      	ldr	r0, [r7, #0]
 8003964:	f000 fbec 	bl	8004140 <prvAddCurrentTaskToDelayedList>
}
 8003968:	bf00      	nop
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	20000040 	.word	0x20000040

08003974 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10a      	bne.n	800399c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398a:	f383 8811 	msr	BASEPRI, r3
 800398e:	f3bf 8f6f 	isb	sy
 8003992:	f3bf 8f4f 	dsb	sy
 8003996:	617b      	str	r3, [r7, #20]
    }
 8003998:	bf00      	nop
 800399a:	e7fe      	b.n	800399a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800399c:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <vTaskPlaceOnEventListRestricted+0x58>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	3318      	adds	r3, #24
 80039a2:	4619      	mov	r1, r3
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f7fe fca2 	bl	80022ee <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d002      	beq.n	80039b6 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80039b0:	f04f 33ff 	mov.w	r3, #4294967295
 80039b4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80039b6:	2024      	movs	r0, #36	; 0x24
 80039b8:	f003 f870 	bl	8006a9c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	68b8      	ldr	r0, [r7, #8]
 80039c0:	f000 fbbe 	bl	8004140 <prvAddCurrentTaskToDelayedList>
    }
 80039c4:	bf00      	nop
 80039c6:	3718      	adds	r7, #24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	20000040 	.word	0x20000040

080039d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10a      	bne.n	80039fc <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80039e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ea:	f383 8811 	msr	BASEPRI, r3
 80039ee:	f3bf 8f6f 	isb	sy
 80039f2:	f3bf 8f4f 	dsb	sy
 80039f6:	60fb      	str	r3, [r7, #12]
    }
 80039f8:	bf00      	nop
 80039fa:	e7fe      	b.n	80039fa <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	3318      	adds	r3, #24
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7fe fcd1 	bl	80023a8 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a06:	4b1f      	ldr	r3, [pc, #124]	; (8003a84 <xTaskRemoveFromEventList+0xb4>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d120      	bne.n	8003a50 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	3304      	adds	r3, #4
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fe fcc8 	bl	80023a8 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f003 fdde 	bl	80075dc <SEGGER_SYSVIEW_OnTaskStartReady>
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a24:	2201      	movs	r2, #1
 8003a26:	409a      	lsls	r2, r3
 8003a28:	4b17      	ldr	r3, [pc, #92]	; (8003a88 <xTaskRemoveFromEventList+0xb8>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	4a16      	ldr	r2, [pc, #88]	; (8003a88 <xTaskRemoveFromEventList+0xb8>)
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a36:	4613      	mov	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4a13      	ldr	r2, [pc, #76]	; (8003a8c <xTaskRemoveFromEventList+0xbc>)
 8003a40:	441a      	add	r2, r3
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	3304      	adds	r3, #4
 8003a46:	4619      	mov	r1, r3
 8003a48:	4610      	mov	r0, r2
 8003a4a:	f7fe fc50 	bl	80022ee <vListInsertEnd>
 8003a4e:	e005      	b.n	8003a5c <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	3318      	adds	r3, #24
 8003a54:	4619      	mov	r1, r3
 8003a56:	480e      	ldr	r0, [pc, #56]	; (8003a90 <xTaskRemoveFromEventList+0xc0>)
 8003a58:	f7fe fc49 	bl	80022ee <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a60:	4b0c      	ldr	r3, [pc, #48]	; (8003a94 <xTaskRemoveFromEventList+0xc4>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d905      	bls.n	8003a76 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003a6e:	4b0a      	ldr	r3, [pc, #40]	; (8003a98 <xTaskRemoveFromEventList+0xc8>)
 8003a70:	2201      	movs	r2, #1
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	e001      	b.n	8003a7a <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003a76:	2300      	movs	r3, #0
 8003a78:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003a7a:	697b      	ldr	r3, [r7, #20]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3718      	adds	r7, #24
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	20000140 	.word	0x20000140
 8003a88:	20000120 	.word	0x20000120
 8003a8c:	20000044 	.word	0x20000044
 8003a90:	200000d8 	.word	0x200000d8
 8003a94:	20000040 	.word	0x20000040
 8003a98:	2000012c 	.word	0x2000012c

08003a9c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003aa4:	4b06      	ldr	r3, [pc, #24]	; (8003ac0 <vTaskInternalSetTimeOutState+0x24>)
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003aac:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <vTaskInternalSetTimeOutState+0x28>)
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	605a      	str	r2, [r3, #4]
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	20000130 	.word	0x20000130
 8003ac4:	2000011c 	.word	0x2000011c

08003ac8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b088      	sub	sp, #32
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10a      	bne.n	8003aee <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003adc:	f383 8811 	msr	BASEPRI, r3
 8003ae0:	f3bf 8f6f 	isb	sy
 8003ae4:	f3bf 8f4f 	dsb	sy
 8003ae8:	613b      	str	r3, [r7, #16]
    }
 8003aea:	bf00      	nop
 8003aec:	e7fe      	b.n	8003aec <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10a      	bne.n	8003b0a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	60fb      	str	r3, [r7, #12]
    }
 8003b06:	bf00      	nop
 8003b08:	e7fe      	b.n	8003b08 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003b0a:	f001 f853 	bl	8004bb4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003b0e:	4b1f      	ldr	r3, [pc, #124]	; (8003b8c <xTaskCheckForTimeOut+0xc4>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b26:	d102      	bne.n	8003b2e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	61fb      	str	r3, [r7, #28]
 8003b2c:	e026      	b.n	8003b7c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	4b17      	ldr	r3, [pc, #92]	; (8003b90 <xTaskCheckForTimeOut+0xc8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d00a      	beq.n	8003b50 <xTaskCheckForTimeOut+0x88>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d305      	bcc.n	8003b50 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003b44:	2301      	movs	r3, #1
 8003b46:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	e015      	b.n	8003b7c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d20b      	bcs.n	8003b72 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	1ad2      	subs	r2, r2, r3
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7ff ff98 	bl	8003a9c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	61fb      	str	r3, [r7, #28]
 8003b70:	e004      	b.n	8003b7c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003b7c:	f001 f84a 	bl	8004c14 <vPortExitCritical>

    return xReturn;
 8003b80:	69fb      	ldr	r3, [r7, #28]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3720      	adds	r7, #32
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	2000011c 	.word	0x2000011c
 8003b90:	20000130 	.word	0x20000130

08003b94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003b98:	4b03      	ldr	r3, [pc, #12]	; (8003ba8 <vTaskMissedYield+0x14>)
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]
}
 8003b9e:	bf00      	nop
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	2000012c 	.word	0x2000012c

08003bac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003bb4:	f000 f852 	bl	8003c5c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003bb8:	4b06      	ldr	r3, [pc, #24]	; (8003bd4 <prvIdleTask+0x28>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d9f9      	bls.n	8003bb4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003bc0:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <prvIdleTask+0x2c>)
 8003bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003bd0:	e7f0      	b.n	8003bb4 <prvIdleTask+0x8>
 8003bd2:	bf00      	nop
 8003bd4:	20000044 	.word	0x20000044
 8003bd8:	e000ed04 	.word	0xe000ed04

08003bdc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003be2:	2300      	movs	r3, #0
 8003be4:	607b      	str	r3, [r7, #4]
 8003be6:	e00c      	b.n	8003c02 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	4613      	mov	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4a12      	ldr	r2, [pc, #72]	; (8003c3c <prvInitialiseTaskLists+0x60>)
 8003bf4:	4413      	add	r3, r2
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fe fb4c 	bl	8002294 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	607b      	str	r3, [r7, #4]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b04      	cmp	r3, #4
 8003c06:	d9ef      	bls.n	8003be8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003c08:	480d      	ldr	r0, [pc, #52]	; (8003c40 <prvInitialiseTaskLists+0x64>)
 8003c0a:	f7fe fb43 	bl	8002294 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003c0e:	480d      	ldr	r0, [pc, #52]	; (8003c44 <prvInitialiseTaskLists+0x68>)
 8003c10:	f7fe fb40 	bl	8002294 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003c14:	480c      	ldr	r0, [pc, #48]	; (8003c48 <prvInitialiseTaskLists+0x6c>)
 8003c16:	f7fe fb3d 	bl	8002294 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003c1a:	480c      	ldr	r0, [pc, #48]	; (8003c4c <prvInitialiseTaskLists+0x70>)
 8003c1c:	f7fe fb3a 	bl	8002294 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003c20:	480b      	ldr	r0, [pc, #44]	; (8003c50 <prvInitialiseTaskLists+0x74>)
 8003c22:	f7fe fb37 	bl	8002294 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003c26:	4b0b      	ldr	r3, [pc, #44]	; (8003c54 <prvInitialiseTaskLists+0x78>)
 8003c28:	4a05      	ldr	r2, [pc, #20]	; (8003c40 <prvInitialiseTaskLists+0x64>)
 8003c2a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c2c:	4b0a      	ldr	r3, [pc, #40]	; (8003c58 <prvInitialiseTaskLists+0x7c>)
 8003c2e:	4a05      	ldr	r2, [pc, #20]	; (8003c44 <prvInitialiseTaskLists+0x68>)
 8003c30:	601a      	str	r2, [r3, #0]
}
 8003c32:	bf00      	nop
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	20000044 	.word	0x20000044
 8003c40:	200000a8 	.word	0x200000a8
 8003c44:	200000bc 	.word	0x200000bc
 8003c48:	200000d8 	.word	0x200000d8
 8003c4c:	200000ec 	.word	0x200000ec
 8003c50:	20000104 	.word	0x20000104
 8003c54:	200000d0 	.word	0x200000d0
 8003c58:	200000d4 	.word	0x200000d4

08003c5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c62:	e019      	b.n	8003c98 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003c64:	f000 ffa6 	bl	8004bb4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c68:	4b10      	ldr	r3, [pc, #64]	; (8003cac <prvCheckTasksWaitingTermination+0x50>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3304      	adds	r3, #4
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fe fb97 	bl	80023a8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003c7a:	4b0d      	ldr	r3, [pc, #52]	; (8003cb0 <prvCheckTasksWaitingTermination+0x54>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	4a0b      	ldr	r2, [pc, #44]	; (8003cb0 <prvCheckTasksWaitingTermination+0x54>)
 8003c82:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003c84:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <prvCheckTasksWaitingTermination+0x58>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	4a0a      	ldr	r2, [pc, #40]	; (8003cb4 <prvCheckTasksWaitingTermination+0x58>)
 8003c8c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003c8e:	f000 ffc1 	bl	8004c14 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f810 	bl	8003cb8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c98:	4b06      	ldr	r3, [pc, #24]	; (8003cb4 <prvCheckTasksWaitingTermination+0x58>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1e1      	bne.n	8003c64 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003ca0:	bf00      	nop
 8003ca2:	bf00      	nop
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	200000ec 	.word	0x200000ec
 8003cb0:	20000118 	.word	0x20000118
 8003cb4:	20000100 	.word	0x20000100

08003cb8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f001 f981 	bl	8004fcc <vPortFree>
                vPortFree( pxTCB );
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f001 f97e 	bl	8004fcc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003cd0:	bf00      	nop
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cdc:	4b0a      	ldr	r3, [pc, #40]	; (8003d08 <prvResetNextTaskUnblockTime+0x30>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d104      	bne.n	8003cf0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003ce6:	4b09      	ldr	r3, [pc, #36]	; (8003d0c <prvResetNextTaskUnblockTime+0x34>)
 8003ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cec:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003cee:	e005      	b.n	8003cfc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003cf0:	4b05      	ldr	r3, [pc, #20]	; (8003d08 <prvResetNextTaskUnblockTime+0x30>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a04      	ldr	r2, [pc, #16]	; (8003d0c <prvResetNextTaskUnblockTime+0x34>)
 8003cfa:	6013      	str	r3, [r2, #0]
}
 8003cfc:	bf00      	nop
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	200000d0 	.word	0x200000d0
 8003d0c:	20000138 	.word	0x20000138

08003d10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003d16:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <xTaskGetSchedulerState+0x34>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d102      	bne.n	8003d24 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	607b      	str	r3, [r7, #4]
 8003d22:	e008      	b.n	8003d36 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d24:	4b08      	ldr	r3, [pc, #32]	; (8003d48 <xTaskGetSchedulerState+0x38>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d102      	bne.n	8003d32 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	607b      	str	r3, [r7, #4]
 8003d30:	e001      	b.n	8003d36 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003d32:	2300      	movs	r3, #0
 8003d34:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003d36:	687b      	ldr	r3, [r7, #4]
    }
 8003d38:	4618      	mov	r0, r3
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	20000124 	.word	0x20000124
 8003d48:	20000140 	.word	0x20000140

08003d4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d068      	beq.n	8003e34 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003d62:	4b37      	ldr	r3, [pc, #220]	; (8003e40 <xTaskPriorityDisinherit+0xf4>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d00a      	beq.n	8003d82 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d70:	f383 8811 	msr	BASEPRI, r3
 8003d74:	f3bf 8f6f 	isb	sy
 8003d78:	f3bf 8f4f 	dsb	sy
 8003d7c:	60fb      	str	r3, [r7, #12]
    }
 8003d7e:	bf00      	nop
 8003d80:	e7fe      	b.n	8003d80 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10a      	bne.n	8003da0 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8e:	f383 8811 	msr	BASEPRI, r3
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	f3bf 8f4f 	dsb	sy
 8003d9a:	60bb      	str	r3, [r7, #8]
    }
 8003d9c:	bf00      	nop
 8003d9e:	e7fe      	b.n	8003d9e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003da4:	1e5a      	subs	r2, r3, #1
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d03e      	beq.n	8003e34 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d13a      	bne.n	8003e34 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fe faf0 	bl	80023a8 <uxListRemove>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10a      	bne.n	8003de4 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd8:	43da      	mvns	r2, r3
 8003dda:	4b1a      	ldr	r3, [pc, #104]	; (8003e44 <xTaskPriorityDisinherit+0xf8>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4013      	ands	r3, r2
 8003de0:	4a18      	ldr	r2, [pc, #96]	; (8003e44 <xTaskPriorityDisinherit+0xf8>)
 8003de2:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4619      	mov	r1, r3
 8003de8:	204a      	movs	r0, #74	; 0x4a
 8003dea:	f002 fe75 	bl	8006ad8 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfa:	f1c3 0205 	rsb	r2, r3, #5
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e06:	2201      	movs	r2, #1
 8003e08:	409a      	lsls	r2, r3
 8003e0a:	4b0e      	ldr	r3, [pc, #56]	; (8003e44 <xTaskPriorityDisinherit+0xf8>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	4a0c      	ldr	r2, [pc, #48]	; (8003e44 <xTaskPriorityDisinherit+0xf8>)
 8003e12:	6013      	str	r3, [r2, #0]
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4a09      	ldr	r2, [pc, #36]	; (8003e48 <xTaskPriorityDisinherit+0xfc>)
 8003e22:	441a      	add	r2, r3
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	3304      	adds	r3, #4
 8003e28:	4619      	mov	r1, r3
 8003e2a:	4610      	mov	r0, r2
 8003e2c:	f7fe fa5f 	bl	80022ee <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003e30:	2301      	movs	r3, #1
 8003e32:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003e34:	697b      	ldr	r3, [r7, #20]
    }
 8003e36:	4618      	mov	r0, r3
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	20000040 	.word	0x20000040
 8003e44:	20000120 	.word	0x20000120
 8003e48:	20000044 	.word	0x20000044

08003e4c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b088      	sub	sp, #32
 8003e50:	af02      	add	r7, sp, #8
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
 8003e58:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00a      	beq.n	8003e76 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8003e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e64:	f383 8811 	msr	BASEPRI, r3
 8003e68:	f3bf 8f6f 	isb	sy
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	613b      	str	r3, [r7, #16]
    }
 8003e72:	bf00      	nop
 8003e74:	e7fe      	b.n	8003e74 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8003e76:	f000 fe9d 	bl	8004bb4 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003e7a:	4b36      	ldr	r3, [pc, #216]	; (8003f54 <xTaskGenericNotifyWait+0x108>)
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4413      	add	r3, r2
 8003e82:	3354      	adds	r3, #84	; 0x54
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d022      	beq.n	8003ed2 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003e8c:	4b31      	ldr	r3, [pc, #196]	; (8003f54 <xTaskGenericNotifyWait+0x108>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	3214      	adds	r2, #20
 8003e94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	43d2      	mvns	r2, r2
 8003e9c:	4011      	ands	r1, r2
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	3214      	adds	r2, #20
 8003ea2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003ea6:	4b2b      	ldr	r3, [pc, #172]	; (8003f54 <xTaskGenericNotifyWait+0x108>)
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4413      	add	r3, r2
 8003eae:	3354      	adds	r3, #84	; 0x54
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003eb4:	6a3b      	ldr	r3, [r7, #32]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00b      	beq.n	8003ed2 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003eba:	2101      	movs	r1, #1
 8003ebc:	6a38      	ldr	r0, [r7, #32]
 8003ebe:	f000 f93f 	bl	8004140 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003ec2:	4b25      	ldr	r3, [pc, #148]	; (8003f58 <xTaskGenericNotifyWait+0x10c>)
 8003ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	f3bf 8f4f 	dsb	sy
 8003ece:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003ed2:	f000 fe9f 	bl	8004c14 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003ed6:	f000 fe6d 	bl	8004bb4 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	6a3b      	ldr	r3, [r7, #32]
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	68b9      	ldr	r1, [r7, #8]
 8003ee6:	2040      	movs	r0, #64	; 0x40
 8003ee8:	f002 ff02 	bl	8006cf0 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d007      	beq.n	8003f02 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003ef2:	4b18      	ldr	r3, [pc, #96]	; (8003f54 <xTaskGenericNotifyWait+0x108>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	3214      	adds	r2, #20
 8003efa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003f02:	4b14      	ldr	r3, [pc, #80]	; (8003f54 <xTaskGenericNotifyWait+0x108>)
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	4413      	add	r3, r2
 8003f0a:	3354      	adds	r3, #84	; 0x54
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d002      	beq.n	8003f1a <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003f14:	2300      	movs	r3, #0
 8003f16:	617b      	str	r3, [r7, #20]
 8003f18:	e00e      	b.n	8003f38 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003f1a:	4b0e      	ldr	r3, [pc, #56]	; (8003f54 <xTaskGenericNotifyWait+0x108>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	3214      	adds	r2, #20
 8003f22:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	43d2      	mvns	r2, r2
 8003f2a:	4011      	ands	r1, r2
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	3214      	adds	r2, #20
 8003f30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003f34:	2301      	movs	r3, #1
 8003f36:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003f38:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <xTaskGenericNotifyWait+0x108>)
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4413      	add	r3, r2
 8003f40:	3354      	adds	r3, #84	; 0x54
 8003f42:	2200      	movs	r2, #0
 8003f44:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003f46:	f000 fe65 	bl	8004c14 <vPortExitCritical>

        return xReturn;
 8003f4a:	697b      	ldr	r3, [r7, #20]
    }
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	20000040 	.word	0x20000040
 8003f58:	e000ed04 	.word	0xe000ed04

08003f5c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08e      	sub	sp, #56	; 0x38
 8003f60:	af02      	add	r7, sp, #8
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
 8003f68:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00a      	beq.n	8003f8a <xTaskGenericNotify+0x2e>
        __asm volatile
 8003f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f78:	f383 8811 	msr	BASEPRI, r3
 8003f7c:	f3bf 8f6f 	isb	sy
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	623b      	str	r3, [r7, #32]
    }
 8003f86:	bf00      	nop
 8003f88:	e7fe      	b.n	8003f88 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10a      	bne.n	8003fa6 <xTaskGenericNotify+0x4a>
        __asm volatile
 8003f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f94:	f383 8811 	msr	BASEPRI, r3
 8003f98:	f3bf 8f6f 	isb	sy
 8003f9c:	f3bf 8f4f 	dsb	sy
 8003fa0:	61fb      	str	r3, [r7, #28]
    }
 8003fa2:	bf00      	nop
 8003fa4:	e7fe      	b.n	8003fa4 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8003faa:	f000 fe03 	bl	8004bb4 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8003fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d006      	beq.n	8003fc2 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	3214      	adds	r2, #20
 8003fba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc0:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003fc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	3354      	adds	r3, #84	; 0x54
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003fd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	3354      	adds	r3, #84	; 0x54
 8003fd8:	2202      	movs	r2, #2
 8003fda:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003fdc:	78fb      	ldrb	r3, [r7, #3]
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d83b      	bhi.n	800405a <xTaskGenericNotify+0xfe>
 8003fe2:	a201      	add	r2, pc, #4	; (adr r2, 8003fe8 <xTaskGenericNotify+0x8c>)
 8003fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe8:	08004079 	.word	0x08004079
 8003fec:	08003ffd 	.word	0x08003ffd
 8003ff0:	08004019 	.word	0x08004019
 8003ff4:	08004031 	.word	0x08004031
 8003ff8:	0800403f 	.word	0x0800403f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	3214      	adds	r2, #20
 8004002:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	ea42 0103 	orr.w	r1, r2, r3
 800400c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	3214      	adds	r2, #20
 8004012:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004016:	e032      	b.n	800407e <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	3214      	adds	r2, #20
 800401e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004022:	1c59      	adds	r1, r3, #1
 8004024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	3214      	adds	r2, #20
 800402a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800402e:	e026      	b.n	800407e <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	3214      	adds	r2, #20
 8004036:	6879      	ldr	r1, [r7, #4]
 8004038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800403c:	e01f      	b.n	800407e <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800403e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004042:	2b02      	cmp	r3, #2
 8004044:	d006      	beq.n	8004054 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	3214      	adds	r2, #20
 800404c:	6879      	ldr	r1, [r7, #4]
 800404e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8004052:	e014      	b.n	800407e <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8004054:	2300      	movs	r3, #0
 8004056:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8004058:	e011      	b.n	800407e <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800405a:	4b34      	ldr	r3, [pc, #208]	; (800412c <xTaskGenericNotify+0x1d0>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00c      	beq.n	800407c <xTaskGenericNotify+0x120>
        __asm volatile
 8004062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004066:	f383 8811 	msr	BASEPRI, r3
 800406a:	f3bf 8f6f 	isb	sy
 800406e:	f3bf 8f4f 	dsb	sy
 8004072:	61bb      	str	r3, [r7, #24]
    }
 8004074:	bf00      	nop
 8004076:	e7fe      	b.n	8004076 <xTaskGenericNotify+0x11a>
                    break;
 8004078:	bf00      	nop
 800407a:	e000      	b.n	800407e <xTaskGenericNotify+0x122>

                    break;
 800407c:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 800407e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004080:	4618      	mov	r0, r3
 8004082:	f003 fb4d 	bl	8007720 <SEGGER_SYSVIEW_ShrinkId>
 8004086:	4601      	mov	r1, r0
 8004088:	78fa      	ldrb	r2, [r7, #3]
 800408a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	4613      	mov	r3, r2
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	203e      	movs	r0, #62	; 0x3e
 8004094:	f002 fe2c 	bl	8006cf0 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800409c:	2b01      	cmp	r3, #1
 800409e:	d13d      	bne.n	800411c <xTaskGenericNotify+0x1c0>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a2:	3304      	adds	r3, #4
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fe f97f 	bl	80023a8 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 80040aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ac:	4618      	mov	r0, r3
 80040ae:	f003 fa95 	bl	80075dc <SEGGER_SYSVIEW_OnTaskStartReady>
 80040b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b6:	2201      	movs	r2, #1
 80040b8:	409a      	lsls	r2, r3
 80040ba:	4b1d      	ldr	r3, [pc, #116]	; (8004130 <xTaskGenericNotify+0x1d4>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4313      	orrs	r3, r2
 80040c0:	4a1b      	ldr	r2, [pc, #108]	; (8004130 <xTaskGenericNotify+0x1d4>)
 80040c2:	6013      	str	r3, [r2, #0]
 80040c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c8:	4613      	mov	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4a18      	ldr	r2, [pc, #96]	; (8004134 <xTaskGenericNotify+0x1d8>)
 80040d2:	441a      	add	r2, r3
 80040d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d6:	3304      	adds	r3, #4
 80040d8:	4619      	mov	r1, r3
 80040da:	4610      	mov	r0, r2
 80040dc:	f7fe f907 	bl	80022ee <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80040e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00a      	beq.n	80040fe <xTaskGenericNotify+0x1a2>
        __asm volatile
 80040e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ec:	f383 8811 	msr	BASEPRI, r3
 80040f0:	f3bf 8f6f 	isb	sy
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	617b      	str	r3, [r7, #20]
    }
 80040fa:	bf00      	nop
 80040fc:	e7fe      	b.n	80040fc <xTaskGenericNotify+0x1a0>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80040fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004102:	4b0d      	ldr	r3, [pc, #52]	; (8004138 <xTaskGenericNotify+0x1dc>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004108:	429a      	cmp	r2, r3
 800410a:	d907      	bls.n	800411c <xTaskGenericNotify+0x1c0>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 800410c:	4b0b      	ldr	r3, [pc, #44]	; (800413c <xTaskGenericNotify+0x1e0>)
 800410e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800411c:	f000 fd7a 	bl	8004c14 <vPortExitCritical>

        return xReturn;
 8004120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8004122:	4618      	mov	r0, r3
 8004124:	3730      	adds	r7, #48	; 0x30
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	2000011c 	.word	0x2000011c
 8004130:	20000120 	.word	0x20000120
 8004134:	20000044 	.word	0x20000044
 8004138:	20000040 	.word	0x20000040
 800413c:	e000ed04 	.word	0xe000ed04

08004140 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800414a:	4b32      	ldr	r3, [pc, #200]	; (8004214 <prvAddCurrentTaskToDelayedList+0xd4>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004150:	4b31      	ldr	r3, [pc, #196]	; (8004218 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	3304      	adds	r3, #4
 8004156:	4618      	mov	r0, r3
 8004158:	f7fe f926 	bl	80023a8 <uxListRemove>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10b      	bne.n	800417a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004162:	4b2d      	ldr	r3, [pc, #180]	; (8004218 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004168:	2201      	movs	r2, #1
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	43da      	mvns	r2, r3
 8004170:	4b2a      	ldr	r3, [pc, #168]	; (800421c <prvAddCurrentTaskToDelayedList+0xdc>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4013      	ands	r3, r2
 8004176:	4a29      	ldr	r2, [pc, #164]	; (800421c <prvAddCurrentTaskToDelayedList+0xdc>)
 8004178:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004180:	d110      	bne.n	80041a4 <prvAddCurrentTaskToDelayedList+0x64>
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00d      	beq.n	80041a4 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8004188:	4b23      	ldr	r3, [pc, #140]	; (8004218 <prvAddCurrentTaskToDelayedList+0xd8>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	211b      	movs	r1, #27
 800418e:	4618      	mov	r0, r3
 8004190:	f003 fa66 	bl	8007660 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004194:	4b20      	ldr	r3, [pc, #128]	; (8004218 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	3304      	adds	r3, #4
 800419a:	4619      	mov	r1, r3
 800419c:	4820      	ldr	r0, [pc, #128]	; (8004220 <prvAddCurrentTaskToDelayedList+0xe0>)
 800419e:	f7fe f8a6 	bl	80022ee <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80041a2:	e032      	b.n	800420a <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4413      	add	r3, r2
 80041aa:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80041ac:	4b1a      	ldr	r3, [pc, #104]	; (8004218 <prvAddCurrentTaskToDelayedList+0xd8>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d20f      	bcs.n	80041dc <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80041bc:	4b16      	ldr	r3, [pc, #88]	; (8004218 <prvAddCurrentTaskToDelayedList+0xd8>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2104      	movs	r1, #4
 80041c2:	4618      	mov	r0, r3
 80041c4:	f003 fa4c 	bl	8007660 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041c8:	4b16      	ldr	r3, [pc, #88]	; (8004224 <prvAddCurrentTaskToDelayedList+0xe4>)
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	4b12      	ldr	r3, [pc, #72]	; (8004218 <prvAddCurrentTaskToDelayedList+0xd8>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3304      	adds	r3, #4
 80041d2:	4619      	mov	r1, r3
 80041d4:	4610      	mov	r0, r2
 80041d6:	f7fe f8ae 	bl	8002336 <vListInsert>
}
 80041da:	e016      	b.n	800420a <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80041dc:	4b0e      	ldr	r3, [pc, #56]	; (8004218 <prvAddCurrentTaskToDelayedList+0xd8>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2104      	movs	r1, #4
 80041e2:	4618      	mov	r0, r3
 80041e4:	f003 fa3c 	bl	8007660 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041e8:	4b0f      	ldr	r3, [pc, #60]	; (8004228 <prvAddCurrentTaskToDelayedList+0xe8>)
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	4b0a      	ldr	r3, [pc, #40]	; (8004218 <prvAddCurrentTaskToDelayedList+0xd8>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3304      	adds	r3, #4
 80041f2:	4619      	mov	r1, r3
 80041f4:	4610      	mov	r0, r2
 80041f6:	f7fe f89e 	bl	8002336 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80041fa:	4b0c      	ldr	r3, [pc, #48]	; (800422c <prvAddCurrentTaskToDelayedList+0xec>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	429a      	cmp	r2, r3
 8004202:	d202      	bcs.n	800420a <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8004204:	4a09      	ldr	r2, [pc, #36]	; (800422c <prvAddCurrentTaskToDelayedList+0xec>)
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	6013      	str	r3, [r2, #0]
}
 800420a:	bf00      	nop
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	2000011c 	.word	0x2000011c
 8004218:	20000040 	.word	0x20000040
 800421c:	20000120 	.word	0x20000120
 8004220:	20000104 	.word	0x20000104
 8004224:	200000d4 	.word	0x200000d4
 8004228:	200000d0 	.word	0x200000d0
 800422c:	20000138 	.word	0x20000138

08004230 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004236:	2300      	movs	r3, #0
 8004238:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800423a:	f000 fad5 	bl	80047e8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800423e:	4b11      	ldr	r3, [pc, #68]	; (8004284 <xTimerCreateTimerTask+0x54>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00b      	beq.n	800425e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004246:	4b10      	ldr	r3, [pc, #64]	; (8004288 <xTimerCreateTimerTask+0x58>)
 8004248:	9301      	str	r3, [sp, #4]
 800424a:	2302      	movs	r3, #2
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	2300      	movs	r3, #0
 8004250:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004254:	490d      	ldr	r1, [pc, #52]	; (800428c <xTimerCreateTimerTask+0x5c>)
 8004256:	480e      	ldr	r0, [pc, #56]	; (8004290 <xTimerCreateTimerTask+0x60>)
 8004258:	f7fe fe2a 	bl	8002eb0 <xTaskCreate>
 800425c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10a      	bne.n	800427a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004268:	f383 8811 	msr	BASEPRI, r3
 800426c:	f3bf 8f6f 	isb	sy
 8004270:	f3bf 8f4f 	dsb	sy
 8004274:	603b      	str	r3, [r7, #0]
    }
 8004276:	bf00      	nop
 8004278:	e7fe      	b.n	8004278 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800427a:	687b      	ldr	r3, [r7, #4]
    }
 800427c:	4618      	mov	r0, r3
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	20000174 	.word	0x20000174
 8004288:	20000178 	.word	0x20000178
 800428c:	08007bec 	.word	0x08007bec
 8004290:	080043c9 	.word	0x080043c9

08004294 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8004294:	b580      	push	{r7, lr}
 8004296:	b08a      	sub	sp, #40	; 0x28
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
 80042a0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80042a2:	2300      	movs	r3, #0
 80042a4:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10a      	bne.n	80042c2 <xTimerGenericCommand+0x2e>
        __asm volatile
 80042ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b0:	f383 8811 	msr	BASEPRI, r3
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	f3bf 8f4f 	dsb	sy
 80042bc:	623b      	str	r3, [r7, #32]
    }
 80042be:	bf00      	nop
 80042c0:	e7fe      	b.n	80042c0 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80042c2:	4b1a      	ldr	r3, [pc, #104]	; (800432c <xTimerGenericCommand+0x98>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d02a      	beq.n	8004320 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	2b05      	cmp	r3, #5
 80042da:	dc18      	bgt.n	800430e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80042dc:	f7ff fd18 	bl	8003d10 <xTaskGetSchedulerState>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d109      	bne.n	80042fa <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80042e6:	4b11      	ldr	r3, [pc, #68]	; (800432c <xTimerGenericCommand+0x98>)
 80042e8:	6818      	ldr	r0, [r3, #0]
 80042ea:	f107 0114 	add.w	r1, r7, #20
 80042ee:	2300      	movs	r3, #0
 80042f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042f2:	f7fe f973 	bl	80025dc <xQueueGenericSend>
 80042f6:	6278      	str	r0, [r7, #36]	; 0x24
 80042f8:	e012      	b.n	8004320 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80042fa:	4b0c      	ldr	r3, [pc, #48]	; (800432c <xTimerGenericCommand+0x98>)
 80042fc:	6818      	ldr	r0, [r3, #0]
 80042fe:	f107 0114 	add.w	r1, r7, #20
 8004302:	2300      	movs	r3, #0
 8004304:	2200      	movs	r2, #0
 8004306:	f7fe f969 	bl	80025dc <xQueueGenericSend>
 800430a:	6278      	str	r0, [r7, #36]	; 0x24
 800430c:	e008      	b.n	8004320 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800430e:	4b07      	ldr	r3, [pc, #28]	; (800432c <xTimerGenericCommand+0x98>)
 8004310:	6818      	ldr	r0, [r3, #0]
 8004312:	f107 0114 	add.w	r1, r7, #20
 8004316:	2300      	movs	r3, #0
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	f7fe fa85 	bl	8002828 <xQueueGenericSendFromISR>
 800431e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004322:	4618      	mov	r0, r3
 8004324:	3728      	adds	r7, #40	; 0x28
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	20000174 	.word	0x20000174

08004330 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004330:	b580      	push	{r7, lr}
 8004332:	b088      	sub	sp, #32
 8004334:	af02      	add	r7, sp, #8
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800433a:	4b22      	ldr	r3, [pc, #136]	; (80043c4 <prvProcessExpiredTimer+0x94>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	3304      	adds	r3, #4
 8004348:	4618      	mov	r0, r3
 800434a:	f7fe f82d 	bl	80023a8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b00      	cmp	r3, #0
 800435a:	d022      	beq.n	80043a2 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	699a      	ldr	r2, [r3, #24]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	18d1      	adds	r1, r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	6978      	ldr	r0, [r7, #20]
 800436a:	f000 f8d1 	bl	8004510 <prvInsertTimerInActiveList>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d01f      	beq.n	80043b4 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004374:	2300      	movs	r3, #0
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	2300      	movs	r3, #0
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	2100      	movs	r1, #0
 800437e:	6978      	ldr	r0, [r7, #20]
 8004380:	f7ff ff88 	bl	8004294 <xTimerGenericCommand>
 8004384:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d113      	bne.n	80043b4 <prvProcessExpiredTimer+0x84>
        __asm volatile
 800438c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004390:	f383 8811 	msr	BASEPRI, r3
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	60fb      	str	r3, [r7, #12]
    }
 800439e:	bf00      	nop
 80043a0:	e7fe      	b.n	80043a0 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043a8:	f023 0301 	bic.w	r3, r3, #1
 80043ac:	b2da      	uxtb	r2, r3
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	6978      	ldr	r0, [r7, #20]
 80043ba:	4798      	blx	r3
    }
 80043bc:	bf00      	nop
 80043be:	3718      	adds	r7, #24
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	2000016c 	.word	0x2000016c

080043c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80043d0:	f107 0308 	add.w	r3, r7, #8
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 f857 	bl	8004488 <prvGetNextExpireTime>
 80043da:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	4619      	mov	r1, r3
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 f803 	bl	80043ec <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80043e6:	f000 f8d5 	bl	8004594 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80043ea:	e7f1      	b.n	80043d0 <prvTimerTask+0x8>

080043ec <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80043f6:	f7ff f8a3 	bl	8003540 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80043fa:	f107 0308 	add.w	r3, r7, #8
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 f866 	bl	80044d0 <prvSampleTimeNow>
 8004404:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d130      	bne.n	800446e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10a      	bne.n	8004428 <prvProcessTimerOrBlockTask+0x3c>
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	429a      	cmp	r2, r3
 8004418:	d806      	bhi.n	8004428 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800441a:	f7ff f89f 	bl	800355c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800441e:	68f9      	ldr	r1, [r7, #12]
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f7ff ff85 	bl	8004330 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004426:	e024      	b.n	8004472 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d008      	beq.n	8004440 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800442e:	4b13      	ldr	r3, [pc, #76]	; (800447c <prvProcessTimerOrBlockTask+0x90>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <prvProcessTimerOrBlockTask+0x50>
 8004438:	2301      	movs	r3, #1
 800443a:	e000      	b.n	800443e <prvProcessTimerOrBlockTask+0x52>
 800443c:	2300      	movs	r3, #0
 800443e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004440:	4b0f      	ldr	r3, [pc, #60]	; (8004480 <prvProcessTimerOrBlockTask+0x94>)
 8004442:	6818      	ldr	r0, [r3, #0]
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	4619      	mov	r1, r3
 800444e:	f7fe fcfb 	bl	8002e48 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004452:	f7ff f883 	bl	800355c <xTaskResumeAll>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10a      	bne.n	8004472 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800445c:	4b09      	ldr	r3, [pc, #36]	; (8004484 <prvProcessTimerOrBlockTask+0x98>)
 800445e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	f3bf 8f4f 	dsb	sy
 8004468:	f3bf 8f6f 	isb	sy
    }
 800446c:	e001      	b.n	8004472 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800446e:	f7ff f875 	bl	800355c <xTaskResumeAll>
    }
 8004472:	bf00      	nop
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	20000170 	.word	0x20000170
 8004480:	20000174 	.word	0x20000174
 8004484:	e000ed04 	.word	0xe000ed04

08004488 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004490:	4b0e      	ldr	r3, [pc, #56]	; (80044cc <prvGetNextExpireTime+0x44>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <prvGetNextExpireTime+0x16>
 800449a:	2201      	movs	r2, #1
 800449c:	e000      	b.n	80044a0 <prvGetNextExpireTime+0x18>
 800449e:	2200      	movs	r2, #0
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d105      	bne.n	80044b8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80044ac:	4b07      	ldr	r3, [pc, #28]	; (80044cc <prvGetNextExpireTime+0x44>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	60fb      	str	r3, [r7, #12]
 80044b6:	e001      	b.n	80044bc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80044bc:	68fb      	ldr	r3, [r7, #12]
    }
 80044be:	4618      	mov	r0, r3
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	2000016c 	.word	0x2000016c

080044d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80044d8:	f7ff f8e0 	bl	800369c <xTaskGetTickCount>
 80044dc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80044de:	4b0b      	ldr	r3, [pc, #44]	; (800450c <prvSampleTimeNow+0x3c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d205      	bcs.n	80044f4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80044e8:	f000 f91a 	bl	8004720 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	e002      	b.n	80044fa <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80044fa:	4a04      	ldr	r2, [pc, #16]	; (800450c <prvSampleTimeNow+0x3c>)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004500:	68fb      	ldr	r3, [r7, #12]
    }
 8004502:	4618      	mov	r0, r3
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	2000017c 	.word	0x2000017c

08004510 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
 800451c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800451e:	2300      	movs	r3, #0
 8004520:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	429a      	cmp	r2, r3
 8004534:	d812      	bhi.n	800455c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	1ad2      	subs	r2, r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	429a      	cmp	r2, r3
 8004542:	d302      	bcc.n	800454a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004544:	2301      	movs	r3, #1
 8004546:	617b      	str	r3, [r7, #20]
 8004548:	e01b      	b.n	8004582 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800454a:	4b10      	ldr	r3, [pc, #64]	; (800458c <prvInsertTimerInActiveList+0x7c>)
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	3304      	adds	r3, #4
 8004552:	4619      	mov	r1, r3
 8004554:	4610      	mov	r0, r2
 8004556:	f7fd feee 	bl	8002336 <vListInsert>
 800455a:	e012      	b.n	8004582 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	429a      	cmp	r2, r3
 8004562:	d206      	bcs.n	8004572 <prvInsertTimerInActiveList+0x62>
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	429a      	cmp	r2, r3
 800456a:	d302      	bcc.n	8004572 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800456c:	2301      	movs	r3, #1
 800456e:	617b      	str	r3, [r7, #20]
 8004570:	e007      	b.n	8004582 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004572:	4b07      	ldr	r3, [pc, #28]	; (8004590 <prvInsertTimerInActiveList+0x80>)
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	3304      	adds	r3, #4
 800457a:	4619      	mov	r1, r3
 800457c:	4610      	mov	r0, r2
 800457e:	f7fd feda 	bl	8002336 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004582:	697b      	ldr	r3, [r7, #20]
    }
 8004584:	4618      	mov	r0, r3
 8004586:	3718      	adds	r7, #24
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	20000170 	.word	0x20000170
 8004590:	2000016c 	.word	0x2000016c

08004594 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004594:	b580      	push	{r7, lr}
 8004596:	b08c      	sub	sp, #48	; 0x30
 8004598:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800459a:	e0ae      	b.n	80046fa <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f2c0 80aa 	blt.w	80046f8 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d004      	beq.n	80045ba <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	3304      	adds	r3, #4
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7fd fef7 	bl	80023a8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80045ba:	1d3b      	adds	r3, r7, #4
 80045bc:	4618      	mov	r0, r3
 80045be:	f7ff ff87 	bl	80044d0 <prvSampleTimeNow>
 80045c2:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	2b09      	cmp	r3, #9
 80045c8:	f200 8097 	bhi.w	80046fa <prvProcessReceivedCommands+0x166>
 80045cc:	a201      	add	r2, pc, #4	; (adr r2, 80045d4 <prvProcessReceivedCommands+0x40>)
 80045ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d2:	bf00      	nop
 80045d4:	080045fd 	.word	0x080045fd
 80045d8:	080045fd 	.word	0x080045fd
 80045dc:	080045fd 	.word	0x080045fd
 80045e0:	08004671 	.word	0x08004671
 80045e4:	08004685 	.word	0x08004685
 80045e8:	080046cf 	.word	0x080046cf
 80045ec:	080045fd 	.word	0x080045fd
 80045f0:	080045fd 	.word	0x080045fd
 80045f4:	08004671 	.word	0x08004671
 80045f8:	08004685 	.word	0x08004685
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80045fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004602:	f043 0301 	orr.w	r3, r3, #1
 8004606:	b2da      	uxtb	r2, r3
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	18d1      	adds	r1, r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6a3a      	ldr	r2, [r7, #32]
 800461a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800461c:	f7ff ff78 	bl	8004510 <prvInsertTimerInActiveList>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d069      	beq.n	80046fa <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800462c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	2b00      	cmp	r3, #0
 800463a:	d05e      	beq.n	80046fa <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	441a      	add	r2, r3
 8004644:	2300      	movs	r3, #0
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	2300      	movs	r3, #0
 800464a:	2100      	movs	r1, #0
 800464c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800464e:	f7ff fe21 	bl	8004294 <xTimerGenericCommand>
 8004652:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d14f      	bne.n	80046fa <prvProcessReceivedCommands+0x166>
        __asm volatile
 800465a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465e:	f383 8811 	msr	BASEPRI, r3
 8004662:	f3bf 8f6f 	isb	sy
 8004666:	f3bf 8f4f 	dsb	sy
 800466a:	61bb      	str	r3, [r7, #24]
    }
 800466c:	bf00      	nop
 800466e:	e7fe      	b.n	800466e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004676:	f023 0301 	bic.w	r3, r3, #1
 800467a:	b2da      	uxtb	r2, r3
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004682:	e03a      	b.n	80046fa <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800468a:	f043 0301 	orr.w	r3, r3, #1
 800468e:	b2da      	uxtb	r2, r3
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d10a      	bne.n	80046ba <prvProcessReceivedCommands+0x126>
        __asm volatile
 80046a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a8:	f383 8811 	msr	BASEPRI, r3
 80046ac:	f3bf 8f6f 	isb	sy
 80046b0:	f3bf 8f4f 	dsb	sy
 80046b4:	617b      	str	r3, [r7, #20]
    }
 80046b6:	bf00      	nop
 80046b8:	e7fe      	b.n	80046b8 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80046ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046bc:	699a      	ldr	r2, [r3, #24]
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	18d1      	adds	r1, r2, r3
 80046c2:	6a3b      	ldr	r3, [r7, #32]
 80046c4:	6a3a      	ldr	r2, [r7, #32]
 80046c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046c8:	f7ff ff22 	bl	8004510 <prvInsertTimerInActiveList>
                        break;
 80046cc:	e015      	b.n	80046fa <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d103      	bne.n	80046e4 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80046dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046de:	f000 fc75 	bl	8004fcc <vPortFree>
 80046e2:	e00a      	b.n	80046fa <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046ea:	f023 0301 	bic.w	r3, r3, #1
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80046f6:	e000      	b.n	80046fa <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80046f8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80046fa:	4b08      	ldr	r3, [pc, #32]	; (800471c <prvProcessReceivedCommands+0x188>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f107 0108 	add.w	r1, r7, #8
 8004702:	2200      	movs	r2, #0
 8004704:	4618      	mov	r0, r3
 8004706:	f7fe f94d 	bl	80029a4 <xQueueReceive>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	f47f af45 	bne.w	800459c <prvProcessReceivedCommands+0x8>
        }
    }
 8004712:	bf00      	nop
 8004714:	bf00      	nop
 8004716:	3728      	adds	r7, #40	; 0x28
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	20000174 	.word	0x20000174

08004720 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004720:	b580      	push	{r7, lr}
 8004722:	b088      	sub	sp, #32
 8004724:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004726:	e048      	b.n	80047ba <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004728:	4b2d      	ldr	r3, [pc, #180]	; (80047e0 <prvSwitchTimerLists+0xc0>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004732:	4b2b      	ldr	r3, [pc, #172]	; (80047e0 <prvSwitchTimerLists+0xc0>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	3304      	adds	r3, #4
 8004740:	4618      	mov	r0, r3
 8004742:	f7fd fe31 	bl	80023a8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b00      	cmp	r3, #0
 800475a:	d02e      	beq.n	80047ba <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	4413      	add	r3, r2
 8004764:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004766:	68ba      	ldr	r2, [r7, #8]
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	429a      	cmp	r2, r3
 800476c:	d90e      	bls.n	800478c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800477a:	4b19      	ldr	r3, [pc, #100]	; (80047e0 <prvSwitchTimerLists+0xc0>)
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	3304      	adds	r3, #4
 8004782:	4619      	mov	r1, r3
 8004784:	4610      	mov	r0, r2
 8004786:	f7fd fdd6 	bl	8002336 <vListInsert>
 800478a:	e016      	b.n	80047ba <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800478c:	2300      	movs	r3, #0
 800478e:	9300      	str	r3, [sp, #0]
 8004790:	2300      	movs	r3, #0
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	2100      	movs	r1, #0
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f7ff fd7c 	bl	8004294 <xTimerGenericCommand>
 800479c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10a      	bne.n	80047ba <prvSwitchTimerLists+0x9a>
        __asm volatile
 80047a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a8:	f383 8811 	msr	BASEPRI, r3
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	603b      	str	r3, [r7, #0]
    }
 80047b6:	bf00      	nop
 80047b8:	e7fe      	b.n	80047b8 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80047ba:	4b09      	ldr	r3, [pc, #36]	; (80047e0 <prvSwitchTimerLists+0xc0>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1b1      	bne.n	8004728 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80047c4:	4b06      	ldr	r3, [pc, #24]	; (80047e0 <prvSwitchTimerLists+0xc0>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80047ca:	4b06      	ldr	r3, [pc, #24]	; (80047e4 <prvSwitchTimerLists+0xc4>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a04      	ldr	r2, [pc, #16]	; (80047e0 <prvSwitchTimerLists+0xc0>)
 80047d0:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80047d2:	4a04      	ldr	r2, [pc, #16]	; (80047e4 <prvSwitchTimerLists+0xc4>)
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	6013      	str	r3, [r2, #0]
    }
 80047d8:	bf00      	nop
 80047da:	3718      	adds	r7, #24
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	2000016c 	.word	0x2000016c
 80047e4:	20000170 	.word	0x20000170

080047e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80047ec:	f000 f9e2 	bl	8004bb4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80047f0:	4b12      	ldr	r3, [pc, #72]	; (800483c <prvCheckForValidListAndQueue+0x54>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d11d      	bne.n	8004834 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80047f8:	4811      	ldr	r0, [pc, #68]	; (8004840 <prvCheckForValidListAndQueue+0x58>)
 80047fa:	f7fd fd4b 	bl	8002294 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80047fe:	4811      	ldr	r0, [pc, #68]	; (8004844 <prvCheckForValidListAndQueue+0x5c>)
 8004800:	f7fd fd48 	bl	8002294 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004804:	4b10      	ldr	r3, [pc, #64]	; (8004848 <prvCheckForValidListAndQueue+0x60>)
 8004806:	4a0e      	ldr	r2, [pc, #56]	; (8004840 <prvCheckForValidListAndQueue+0x58>)
 8004808:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800480a:	4b10      	ldr	r3, [pc, #64]	; (800484c <prvCheckForValidListAndQueue+0x64>)
 800480c:	4a0d      	ldr	r2, [pc, #52]	; (8004844 <prvCheckForValidListAndQueue+0x5c>)
 800480e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004810:	2200      	movs	r2, #0
 8004812:	210c      	movs	r1, #12
 8004814:	200a      	movs	r0, #10
 8004816:	f7fd fe59 	bl	80024cc <xQueueGenericCreate>
 800481a:	4603      	mov	r3, r0
 800481c:	4a07      	ldr	r2, [pc, #28]	; (800483c <prvCheckForValidListAndQueue+0x54>)
 800481e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004820:	4b06      	ldr	r3, [pc, #24]	; (800483c <prvCheckForValidListAndQueue+0x54>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d005      	beq.n	8004834 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004828:	4b04      	ldr	r3, [pc, #16]	; (800483c <prvCheckForValidListAndQueue+0x54>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4908      	ldr	r1, [pc, #32]	; (8004850 <prvCheckForValidListAndQueue+0x68>)
 800482e:	4618      	mov	r0, r3
 8004830:	f7fe fad8 	bl	8002de4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004834:	f000 f9ee 	bl	8004c14 <vPortExitCritical>
    }
 8004838:	bf00      	nop
 800483a:	bd80      	pop	{r7, pc}
 800483c:	20000174 	.word	0x20000174
 8004840:	20000144 	.word	0x20000144
 8004844:	20000158 	.word	0x20000158
 8004848:	2000016c 	.word	0x2000016c
 800484c:	20000170 	.word	0x20000170
 8004850:	08007bf4 	.word	0x08007bf4

08004854 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	3b04      	subs	r3, #4
 8004864:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800486c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	3b04      	subs	r3, #4
 8004872:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	f023 0201 	bic.w	r2, r3, #1
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	3b04      	subs	r3, #4
 8004882:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004884:	4a0c      	ldr	r2, [pc, #48]	; (80048b8 <pxPortInitialiseStack+0x64>)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	3b14      	subs	r3, #20
 800488e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	3b04      	subs	r3, #4
 800489a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f06f 0202 	mvn.w	r2, #2
 80048a2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	3b20      	subs	r3, #32
 80048a8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80048aa:	68fb      	ldr	r3, [r7, #12]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3714      	adds	r7, #20
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr
 80048b8:	080048bd 	.word	0x080048bd

080048bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80048c2:	2300      	movs	r3, #0
 80048c4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80048c6:	4b12      	ldr	r3, [pc, #72]	; (8004910 <prvTaskExitError+0x54>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ce:	d00a      	beq.n	80048e6 <prvTaskExitError+0x2a>
        __asm volatile
 80048d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d4:	f383 8811 	msr	BASEPRI, r3
 80048d8:	f3bf 8f6f 	isb	sy
 80048dc:	f3bf 8f4f 	dsb	sy
 80048e0:	60fb      	str	r3, [r7, #12]
    }
 80048e2:	bf00      	nop
 80048e4:	e7fe      	b.n	80048e4 <prvTaskExitError+0x28>
        __asm volatile
 80048e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ea:	f383 8811 	msr	BASEPRI, r3
 80048ee:	f3bf 8f6f 	isb	sy
 80048f2:	f3bf 8f4f 	dsb	sy
 80048f6:	60bb      	str	r3, [r7, #8]
    }
 80048f8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80048fa:	bf00      	nop
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d0fc      	beq.n	80048fc <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004902:	bf00      	nop
 8004904:	bf00      	nop
 8004906:	3714      	adds	r7, #20
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr
 8004910:	20000010 	.word	0x20000010
	...

08004920 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004920:	4b07      	ldr	r3, [pc, #28]	; (8004940 <pxCurrentTCBConst2>)
 8004922:	6819      	ldr	r1, [r3, #0]
 8004924:	6808      	ldr	r0, [r1, #0]
 8004926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800492a:	f380 8809 	msr	PSP, r0
 800492e:	f3bf 8f6f 	isb	sy
 8004932:	f04f 0000 	mov.w	r0, #0
 8004936:	f380 8811 	msr	BASEPRI, r0
 800493a:	4770      	bx	lr
 800493c:	f3af 8000 	nop.w

08004940 <pxCurrentTCBConst2>:
 8004940:	20000040 	.word	0x20000040
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004944:	bf00      	nop
 8004946:	bf00      	nop

08004948 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004948:	4808      	ldr	r0, [pc, #32]	; (800496c <prvPortStartFirstTask+0x24>)
 800494a:	6800      	ldr	r0, [r0, #0]
 800494c:	6800      	ldr	r0, [r0, #0]
 800494e:	f380 8808 	msr	MSP, r0
 8004952:	f04f 0000 	mov.w	r0, #0
 8004956:	f380 8814 	msr	CONTROL, r0
 800495a:	b662      	cpsie	i
 800495c:	b661      	cpsie	f
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	f3bf 8f6f 	isb	sy
 8004966:	df00      	svc	0
 8004968:	bf00      	nop
 800496a:	0000      	.short	0x0000
 800496c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004970:	bf00      	nop
 8004972:	bf00      	nop

08004974 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800497a:	4b46      	ldr	r3, [pc, #280]	; (8004a94 <xPortStartScheduler+0x120>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a46      	ldr	r2, [pc, #280]	; (8004a98 <xPortStartScheduler+0x124>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d10a      	bne.n	800499a <xPortStartScheduler+0x26>
        __asm volatile
 8004984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004988:	f383 8811 	msr	BASEPRI, r3
 800498c:	f3bf 8f6f 	isb	sy
 8004990:	f3bf 8f4f 	dsb	sy
 8004994:	613b      	str	r3, [r7, #16]
    }
 8004996:	bf00      	nop
 8004998:	e7fe      	b.n	8004998 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800499a:	4b3e      	ldr	r3, [pc, #248]	; (8004a94 <xPortStartScheduler+0x120>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a3f      	ldr	r2, [pc, #252]	; (8004a9c <xPortStartScheduler+0x128>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d10a      	bne.n	80049ba <xPortStartScheduler+0x46>
        __asm volatile
 80049a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a8:	f383 8811 	msr	BASEPRI, r3
 80049ac:	f3bf 8f6f 	isb	sy
 80049b0:	f3bf 8f4f 	dsb	sy
 80049b4:	60fb      	str	r3, [r7, #12]
    }
 80049b6:	bf00      	nop
 80049b8:	e7fe      	b.n	80049b8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80049ba:	4b39      	ldr	r3, [pc, #228]	; (8004aa0 <xPortStartScheduler+0x12c>)
 80049bc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	22ff      	movs	r2, #255	; 0xff
 80049ca:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80049d4:	78fb      	ldrb	r3, [r7, #3]
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80049dc:	b2da      	uxtb	r2, r3
 80049de:	4b31      	ldr	r3, [pc, #196]	; (8004aa4 <xPortStartScheduler+0x130>)
 80049e0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80049e2:	4b31      	ldr	r3, [pc, #196]	; (8004aa8 <xPortStartScheduler+0x134>)
 80049e4:	2207      	movs	r2, #7
 80049e6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049e8:	e009      	b.n	80049fe <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80049ea:	4b2f      	ldr	r3, [pc, #188]	; (8004aa8 <xPortStartScheduler+0x134>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	3b01      	subs	r3, #1
 80049f0:	4a2d      	ldr	r2, [pc, #180]	; (8004aa8 <xPortStartScheduler+0x134>)
 80049f2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80049f4:	78fb      	ldrb	r3, [r7, #3]
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049fe:	78fb      	ldrb	r3, [r7, #3]
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a06:	2b80      	cmp	r3, #128	; 0x80
 8004a08:	d0ef      	beq.n	80049ea <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a0a:	4b27      	ldr	r3, [pc, #156]	; (8004aa8 <xPortStartScheduler+0x134>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f1c3 0307 	rsb	r3, r3, #7
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	d00a      	beq.n	8004a2c <xPortStartScheduler+0xb8>
        __asm volatile
 8004a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1a:	f383 8811 	msr	BASEPRI, r3
 8004a1e:	f3bf 8f6f 	isb	sy
 8004a22:	f3bf 8f4f 	dsb	sy
 8004a26:	60bb      	str	r3, [r7, #8]
    }
 8004a28:	bf00      	nop
 8004a2a:	e7fe      	b.n	8004a2a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a2c:	4b1e      	ldr	r3, [pc, #120]	; (8004aa8 <xPortStartScheduler+0x134>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	021b      	lsls	r3, r3, #8
 8004a32:	4a1d      	ldr	r2, [pc, #116]	; (8004aa8 <xPortStartScheduler+0x134>)
 8004a34:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a36:	4b1c      	ldr	r3, [pc, #112]	; (8004aa8 <xPortStartScheduler+0x134>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a3e:	4a1a      	ldr	r2, [pc, #104]	; (8004aa8 <xPortStartScheduler+0x134>)
 8004a40:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004a4a:	4b18      	ldr	r3, [pc, #96]	; (8004aac <xPortStartScheduler+0x138>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a17      	ldr	r2, [pc, #92]	; (8004aac <xPortStartScheduler+0x138>)
 8004a50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a54:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004a56:	4b15      	ldr	r3, [pc, #84]	; (8004aac <xPortStartScheduler+0x138>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a14      	ldr	r2, [pc, #80]	; (8004aac <xPortStartScheduler+0x138>)
 8004a5c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004a60:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004a62:	f000 f963 	bl	8004d2c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004a66:	4b12      	ldr	r3, [pc, #72]	; (8004ab0 <xPortStartScheduler+0x13c>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004a6c:	f000 f982 	bl	8004d74 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004a70:	4b10      	ldr	r3, [pc, #64]	; (8004ab4 <xPortStartScheduler+0x140>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a0f      	ldr	r2, [pc, #60]	; (8004ab4 <xPortStartScheduler+0x140>)
 8004a76:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004a7a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004a7c:	f7ff ff64 	bl	8004948 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004a80:	f7fe feea 	bl	8003858 <vTaskSwitchContext>
    prvTaskExitError();
 8004a84:	f7ff ff1a 	bl	80048bc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3718      	adds	r7, #24
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	e000ed00 	.word	0xe000ed00
 8004a98:	410fc271 	.word	0x410fc271
 8004a9c:	410fc270 	.word	0x410fc270
 8004aa0:	e000e400 	.word	0xe000e400
 8004aa4:	20000180 	.word	0x20000180
 8004aa8:	20000184 	.word	0x20000184
 8004aac:	e000ed20 	.word	0xe000ed20
 8004ab0:	20000010 	.word	0x20000010
 8004ab4:	e000ef34 	.word	0xe000ef34

08004ab8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004abe:	4b37      	ldr	r3, [pc, #220]	; (8004b9c <vInitPrioGroupValue+0xe4>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a37      	ldr	r2, [pc, #220]	; (8004ba0 <vInitPrioGroupValue+0xe8>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d10a      	bne.n	8004ade <vInitPrioGroupValue+0x26>
        __asm volatile
 8004ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004acc:	f383 8811 	msr	BASEPRI, r3
 8004ad0:	f3bf 8f6f 	isb	sy
 8004ad4:	f3bf 8f4f 	dsb	sy
 8004ad8:	613b      	str	r3, [r7, #16]
    }
 8004ada:	bf00      	nop
 8004adc:	e7fe      	b.n	8004adc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004ade:	4b2f      	ldr	r3, [pc, #188]	; (8004b9c <vInitPrioGroupValue+0xe4>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a30      	ldr	r2, [pc, #192]	; (8004ba4 <vInitPrioGroupValue+0xec>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d10a      	bne.n	8004afe <vInitPrioGroupValue+0x46>
        __asm volatile
 8004ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aec:	f383 8811 	msr	BASEPRI, r3
 8004af0:	f3bf 8f6f 	isb	sy
 8004af4:	f3bf 8f4f 	dsb	sy
 8004af8:	60fb      	str	r3, [r7, #12]
    }
 8004afa:	bf00      	nop
 8004afc:	e7fe      	b.n	8004afc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004afe:	4b2a      	ldr	r3, [pc, #168]	; (8004ba8 <vInitPrioGroupValue+0xf0>)
 8004b00:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	22ff      	movs	r2, #255	; 0xff
 8004b0e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b18:	78fb      	ldrb	r3, [r7, #3]
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	4b22      	ldr	r3, [pc, #136]	; (8004bac <vInitPrioGroupValue+0xf4>)
 8004b24:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b26:	4b22      	ldr	r3, [pc, #136]	; (8004bb0 <vInitPrioGroupValue+0xf8>)
 8004b28:	2207      	movs	r2, #7
 8004b2a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b2c:	e009      	b.n	8004b42 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004b2e:	4b20      	ldr	r3, [pc, #128]	; (8004bb0 <vInitPrioGroupValue+0xf8>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3b01      	subs	r3, #1
 8004b34:	4a1e      	ldr	r2, [pc, #120]	; (8004bb0 <vInitPrioGroupValue+0xf8>)
 8004b36:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b38:	78fb      	ldrb	r3, [r7, #3]
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b42:	78fb      	ldrb	r3, [r7, #3]
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4a:	2b80      	cmp	r3, #128	; 0x80
 8004b4c:	d0ef      	beq.n	8004b2e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b4e:	4b18      	ldr	r3, [pc, #96]	; (8004bb0 <vInitPrioGroupValue+0xf8>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f1c3 0307 	rsb	r3, r3, #7
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	d00a      	beq.n	8004b70 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8004b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5e:	f383 8811 	msr	BASEPRI, r3
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	60bb      	str	r3, [r7, #8]
    }
 8004b6c:	bf00      	nop
 8004b6e:	e7fe      	b.n	8004b6e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b70:	4b0f      	ldr	r3, [pc, #60]	; (8004bb0 <vInitPrioGroupValue+0xf8>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	021b      	lsls	r3, r3, #8
 8004b76:	4a0e      	ldr	r2, [pc, #56]	; (8004bb0 <vInitPrioGroupValue+0xf8>)
 8004b78:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b7a:	4b0d      	ldr	r3, [pc, #52]	; (8004bb0 <vInitPrioGroupValue+0xf8>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b82:	4a0b      	ldr	r2, [pc, #44]	; (8004bb0 <vInitPrioGroupValue+0xf8>)
 8004b84:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8004b8e:	bf00      	nop
 8004b90:	371c      	adds	r7, #28
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	e000ed00 	.word	0xe000ed00
 8004ba0:	410fc271 	.word	0x410fc271
 8004ba4:	410fc270 	.word	0x410fc270
 8004ba8:	e000e400 	.word	0xe000e400
 8004bac:	20000180 	.word	0x20000180
 8004bb0:	20000184 	.word	0x20000184

08004bb4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
        __asm volatile
 8004bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbe:	f383 8811 	msr	BASEPRI, r3
 8004bc2:	f3bf 8f6f 	isb	sy
 8004bc6:	f3bf 8f4f 	dsb	sy
 8004bca:	607b      	str	r3, [r7, #4]
    }
 8004bcc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004bce:	4b0f      	ldr	r3, [pc, #60]	; (8004c0c <vPortEnterCritical+0x58>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	4a0d      	ldr	r2, [pc, #52]	; (8004c0c <vPortEnterCritical+0x58>)
 8004bd6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004bd8:	4b0c      	ldr	r3, [pc, #48]	; (8004c0c <vPortEnterCritical+0x58>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d10f      	bne.n	8004c00 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004be0:	4b0b      	ldr	r3, [pc, #44]	; (8004c10 <vPortEnterCritical+0x5c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00a      	beq.n	8004c00 <vPortEnterCritical+0x4c>
        __asm volatile
 8004bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bee:	f383 8811 	msr	BASEPRI, r3
 8004bf2:	f3bf 8f6f 	isb	sy
 8004bf6:	f3bf 8f4f 	dsb	sy
 8004bfa:	603b      	str	r3, [r7, #0]
    }
 8004bfc:	bf00      	nop
 8004bfe:	e7fe      	b.n	8004bfe <vPortEnterCritical+0x4a>
    }
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	20000010 	.word	0x20000010
 8004c10:	e000ed04 	.word	0xe000ed04

08004c14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004c1a:	4b12      	ldr	r3, [pc, #72]	; (8004c64 <vPortExitCritical+0x50>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10a      	bne.n	8004c38 <vPortExitCritical+0x24>
        __asm volatile
 8004c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	607b      	str	r3, [r7, #4]
    }
 8004c34:	bf00      	nop
 8004c36:	e7fe      	b.n	8004c36 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004c38:	4b0a      	ldr	r3, [pc, #40]	; (8004c64 <vPortExitCritical+0x50>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	4a09      	ldr	r2, [pc, #36]	; (8004c64 <vPortExitCritical+0x50>)
 8004c40:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004c42:	4b08      	ldr	r3, [pc, #32]	; (8004c64 <vPortExitCritical+0x50>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d105      	bne.n	8004c56 <vPortExitCritical+0x42>
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	f383 8811 	msr	BASEPRI, r3
    }
 8004c54:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004c56:	bf00      	nop
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	20000010 	.word	0x20000010
	...

08004c70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004c70:	f3ef 8009 	mrs	r0, PSP
 8004c74:	f3bf 8f6f 	isb	sy
 8004c78:	4b15      	ldr	r3, [pc, #84]	; (8004cd0 <pxCurrentTCBConst>)
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	f01e 0f10 	tst.w	lr, #16
 8004c80:	bf08      	it	eq
 8004c82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c8a:	6010      	str	r0, [r2, #0]
 8004c8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004c90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004c94:	f380 8811 	msr	BASEPRI, r0
 8004c98:	f3bf 8f4f 	dsb	sy
 8004c9c:	f3bf 8f6f 	isb	sy
 8004ca0:	f7fe fdda 	bl	8003858 <vTaskSwitchContext>
 8004ca4:	f04f 0000 	mov.w	r0, #0
 8004ca8:	f380 8811 	msr	BASEPRI, r0
 8004cac:	bc09      	pop	{r0, r3}
 8004cae:	6819      	ldr	r1, [r3, #0]
 8004cb0:	6808      	ldr	r0, [r1, #0]
 8004cb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cb6:	f01e 0f10 	tst.w	lr, #16
 8004cba:	bf08      	it	eq
 8004cbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004cc0:	f380 8809 	msr	PSP, r0
 8004cc4:	f3bf 8f6f 	isb	sy
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	f3af 8000 	nop.w

08004cd0 <pxCurrentTCBConst>:
 8004cd0:	20000040 	.word	0x20000040
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004cd4:	bf00      	nop
 8004cd6:	bf00      	nop

08004cd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
        __asm volatile
 8004cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce2:	f383 8811 	msr	BASEPRI, r3
 8004ce6:	f3bf 8f6f 	isb	sy
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	607b      	str	r3, [r7, #4]
    }
 8004cf0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004cf2:	f002 fb59 	bl	80073a8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004cf6:	f7fe fcf3 	bl	80036e0 <xTaskIncrementTick>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d006      	beq.n	8004d0e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004d00:	f002 fbb0 	bl	8007464 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d04:	4b08      	ldr	r3, [pc, #32]	; (8004d28 <SysTick_Handler+0x50>)
 8004d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d0a:	601a      	str	r2, [r3, #0]
 8004d0c:	e001      	b.n	8004d12 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8004d0e:	f002 fb8d 	bl	800742c <SEGGER_SYSVIEW_RecordExitISR>
 8004d12:	2300      	movs	r3, #0
 8004d14:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	f383 8811 	msr	BASEPRI, r3
    }
 8004d1c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8004d1e:	bf00      	nop
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	e000ed04 	.word	0xe000ed04

08004d2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d30:	4b0b      	ldr	r3, [pc, #44]	; (8004d60 <vPortSetupTimerInterrupt+0x34>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d36:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <vPortSetupTimerInterrupt+0x38>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d3c:	4b0a      	ldr	r3, [pc, #40]	; (8004d68 <vPortSetupTimerInterrupt+0x3c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a0a      	ldr	r2, [pc, #40]	; (8004d6c <vPortSetupTimerInterrupt+0x40>)
 8004d42:	fba2 2303 	umull	r2, r3, r2, r3
 8004d46:	099b      	lsrs	r3, r3, #6
 8004d48:	4a09      	ldr	r2, [pc, #36]	; (8004d70 <vPortSetupTimerInterrupt+0x44>)
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d4e:	4b04      	ldr	r3, [pc, #16]	; (8004d60 <vPortSetupTimerInterrupt+0x34>)
 8004d50:	2207      	movs	r2, #7
 8004d52:	601a      	str	r2, [r3, #0]
}
 8004d54:	bf00      	nop
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	e000e010 	.word	0xe000e010
 8004d64:	e000e018 	.word	0xe000e018
 8004d68:	20000000 	.word	0x20000000
 8004d6c:	10624dd3 	.word	0x10624dd3
 8004d70:	e000e014 	.word	0xe000e014

08004d74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004d74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004d84 <vPortEnableVFP+0x10>
 8004d78:	6801      	ldr	r1, [r0, #0]
 8004d7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004d7e:	6001      	str	r1, [r0, #0]
 8004d80:	4770      	bx	lr
 8004d82:	0000      	.short	0x0000
 8004d84:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004d88:	bf00      	nop
 8004d8a:	bf00      	nop

08004d8c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004d92:	f3ef 8305 	mrs	r3, IPSR
 8004d96:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2b0f      	cmp	r3, #15
 8004d9c:	d914      	bls.n	8004dc8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004d9e:	4a17      	ldr	r2, [pc, #92]	; (8004dfc <vPortValidateInterruptPriority+0x70>)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	4413      	add	r3, r2
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004da8:	4b15      	ldr	r3, [pc, #84]	; (8004e00 <vPortValidateInterruptPriority+0x74>)
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	7afa      	ldrb	r2, [r7, #11]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d20a      	bcs.n	8004dc8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db6:	f383 8811 	msr	BASEPRI, r3
 8004dba:	f3bf 8f6f 	isb	sy
 8004dbe:	f3bf 8f4f 	dsb	sy
 8004dc2:	607b      	str	r3, [r7, #4]
    }
 8004dc4:	bf00      	nop
 8004dc6:	e7fe      	b.n	8004dc6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004dc8:	4b0e      	ldr	r3, [pc, #56]	; (8004e04 <vPortValidateInterruptPriority+0x78>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004dd0:	4b0d      	ldr	r3, [pc, #52]	; (8004e08 <vPortValidateInterruptPriority+0x7c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d90a      	bls.n	8004dee <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ddc:	f383 8811 	msr	BASEPRI, r3
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	603b      	str	r3, [r7, #0]
    }
 8004dea:	bf00      	nop
 8004dec:	e7fe      	b.n	8004dec <vPortValidateInterruptPriority+0x60>
    }
 8004dee:	bf00      	nop
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	e000e3f0 	.word	0xe000e3f0
 8004e00:	20000180 	.word	0x20000180
 8004e04:	e000ed0c 	.word	0xe000ed0c
 8004e08:	20000184 	.word	0x20000184

08004e0c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b08a      	sub	sp, #40	; 0x28
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004e14:	2300      	movs	r3, #0
 8004e16:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004e18:	f7fe fb92 	bl	8003540 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004e1c:	4b65      	ldr	r3, [pc, #404]	; (8004fb4 <pvPortMalloc+0x1a8>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d101      	bne.n	8004e28 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004e24:	f000 f934 	bl	8005090 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e28:	4b63      	ldr	r3, [pc, #396]	; (8004fb8 <pvPortMalloc+0x1ac>)
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4013      	ands	r3, r2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f040 80a7 	bne.w	8004f84 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d02d      	beq.n	8004e98 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004e3c:	2208      	movs	r2, #8
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d227      	bcs.n	8004e98 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004e48:	2208      	movs	r2, #8
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f003 0307 	and.w	r3, r3, #7
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d021      	beq.n	8004e9e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f023 0307 	bic.w	r3, r3, #7
 8004e60:	3308      	adds	r3, #8
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d214      	bcs.n	8004e92 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f023 0307 	bic.w	r3, r3, #7
 8004e6e:	3308      	adds	r3, #8
 8004e70:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f003 0307 	and.w	r3, r3, #7
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d010      	beq.n	8004e9e <pvPortMalloc+0x92>
        __asm volatile
 8004e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e80:	f383 8811 	msr	BASEPRI, r3
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	617b      	str	r3, [r7, #20]
    }
 8004e8e:	bf00      	nop
 8004e90:	e7fe      	b.n	8004e90 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004e92:	2300      	movs	r3, #0
 8004e94:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e96:	e002      	b.n	8004e9e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	607b      	str	r3, [r7, #4]
 8004e9c:	e000      	b.n	8004ea0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e9e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d06e      	beq.n	8004f84 <pvPortMalloc+0x178>
 8004ea6:	4b45      	ldr	r3, [pc, #276]	; (8004fbc <pvPortMalloc+0x1b0>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d869      	bhi.n	8004f84 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004eb0:	4b43      	ldr	r3, [pc, #268]	; (8004fc0 <pvPortMalloc+0x1b4>)
 8004eb2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004eb4:	4b42      	ldr	r3, [pc, #264]	; (8004fc0 <pvPortMalloc+0x1b4>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004eba:	e004      	b.n	8004ec6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d903      	bls.n	8004ed8 <pvPortMalloc+0xcc>
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1f1      	bne.n	8004ebc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004ed8:	4b36      	ldr	r3, [pc, #216]	; (8004fb4 <pvPortMalloc+0x1a8>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d050      	beq.n	8004f84 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ee2:	6a3b      	ldr	r3, [r7, #32]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2208      	movs	r2, #8
 8004ee8:	4413      	add	r3, r2
 8004eea:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
 8004ef2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	1ad2      	subs	r2, r2, r3
 8004efc:	2308      	movs	r3, #8
 8004efe:	005b      	lsls	r3, r3, #1
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d91f      	bls.n	8004f44 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4413      	add	r3, r2
 8004f0a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	f003 0307 	and.w	r3, r3, #7
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <pvPortMalloc+0x120>
        __asm volatile
 8004f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1a:	f383 8811 	msr	BASEPRI, r3
 8004f1e:	f3bf 8f6f 	isb	sy
 8004f22:	f3bf 8f4f 	dsb	sy
 8004f26:	613b      	str	r3, [r7, #16]
    }
 8004f28:	bf00      	nop
 8004f2a:	e7fe      	b.n	8004f2a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	1ad2      	subs	r2, r2, r3
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f3e:	69b8      	ldr	r0, [r7, #24]
 8004f40:	f000 f908 	bl	8005154 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f44:	4b1d      	ldr	r3, [pc, #116]	; (8004fbc <pvPortMalloc+0x1b0>)
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	4a1b      	ldr	r2, [pc, #108]	; (8004fbc <pvPortMalloc+0x1b0>)
 8004f50:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f52:	4b1a      	ldr	r3, [pc, #104]	; (8004fbc <pvPortMalloc+0x1b0>)
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	4b1b      	ldr	r3, [pc, #108]	; (8004fc4 <pvPortMalloc+0x1b8>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d203      	bcs.n	8004f66 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f5e:	4b17      	ldr	r3, [pc, #92]	; (8004fbc <pvPortMalloc+0x1b0>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a18      	ldr	r2, [pc, #96]	; (8004fc4 <pvPortMalloc+0x1b8>)
 8004f64:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f68:	685a      	ldr	r2, [r3, #4]
 8004f6a:	4b13      	ldr	r3, [pc, #76]	; (8004fb8 <pvPortMalloc+0x1ac>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f76:	2200      	movs	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004f7a:	4b13      	ldr	r3, [pc, #76]	; (8004fc8 <pvPortMalloc+0x1bc>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	3301      	adds	r3, #1
 8004f80:	4a11      	ldr	r2, [pc, #68]	; (8004fc8 <pvPortMalloc+0x1bc>)
 8004f82:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004f84:	f7fe faea 	bl	800355c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	f003 0307 	and.w	r3, r3, #7
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00a      	beq.n	8004fa8 <pvPortMalloc+0x19c>
        __asm volatile
 8004f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f96:	f383 8811 	msr	BASEPRI, r3
 8004f9a:	f3bf 8f6f 	isb	sy
 8004f9e:	f3bf 8f4f 	dsb	sy
 8004fa2:	60fb      	str	r3, [r7, #12]
    }
 8004fa4:	bf00      	nop
 8004fa6:	e7fe      	b.n	8004fa6 <pvPortMalloc+0x19a>
    return pvReturn;
 8004fa8:	69fb      	ldr	r3, [r7, #28]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3728      	adds	r7, #40	; 0x28
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	20012d90 	.word	0x20012d90
 8004fb8:	20012da4 	.word	0x20012da4
 8004fbc:	20012d94 	.word	0x20012d94
 8004fc0:	20012d88 	.word	0x20012d88
 8004fc4:	20012d98 	.word	0x20012d98
 8004fc8:	20012d9c 	.word	0x20012d9c

08004fcc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d04d      	beq.n	800507a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004fde:	2308      	movs	r3, #8
 8004fe0:	425b      	negs	r3, r3
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	4b24      	ldr	r3, [pc, #144]	; (8005084 <vPortFree+0xb8>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d10a      	bne.n	8005010 <vPortFree+0x44>
        __asm volatile
 8004ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffe:	f383 8811 	msr	BASEPRI, r3
 8005002:	f3bf 8f6f 	isb	sy
 8005006:	f3bf 8f4f 	dsb	sy
 800500a:	60fb      	str	r3, [r7, #12]
    }
 800500c:	bf00      	nop
 800500e:	e7fe      	b.n	800500e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00a      	beq.n	800502e <vPortFree+0x62>
        __asm volatile
 8005018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501c:	f383 8811 	msr	BASEPRI, r3
 8005020:	f3bf 8f6f 	isb	sy
 8005024:	f3bf 8f4f 	dsb	sy
 8005028:	60bb      	str	r3, [r7, #8]
    }
 800502a:	bf00      	nop
 800502c:	e7fe      	b.n	800502c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	685a      	ldr	r2, [r3, #4]
 8005032:	4b14      	ldr	r3, [pc, #80]	; (8005084 <vPortFree+0xb8>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4013      	ands	r3, r2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d01e      	beq.n	800507a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d11a      	bne.n	800507a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	4b0e      	ldr	r3, [pc, #56]	; (8005084 <vPortFree+0xb8>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	43db      	mvns	r3, r3
 800504e:	401a      	ands	r2, r3
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005054:	f7fe fa74 	bl	8003540 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	4b0a      	ldr	r3, [pc, #40]	; (8005088 <vPortFree+0xbc>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4413      	add	r3, r2
 8005062:	4a09      	ldr	r2, [pc, #36]	; (8005088 <vPortFree+0xbc>)
 8005064:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005066:	6938      	ldr	r0, [r7, #16]
 8005068:	f000 f874 	bl	8005154 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800506c:	4b07      	ldr	r3, [pc, #28]	; (800508c <vPortFree+0xc0>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	3301      	adds	r3, #1
 8005072:	4a06      	ldr	r2, [pc, #24]	; (800508c <vPortFree+0xc0>)
 8005074:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005076:	f7fe fa71 	bl	800355c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800507a:	bf00      	nop
 800507c:	3718      	adds	r7, #24
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	20012da4 	.word	0x20012da4
 8005088:	20012d94 	.word	0x20012d94
 800508c:	20012da0 	.word	0x20012da0

08005090 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005096:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800509a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800509c:	4b27      	ldr	r3, [pc, #156]	; (800513c <prvHeapInit+0xac>)
 800509e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f003 0307 	and.w	r3, r3, #7
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00c      	beq.n	80050c4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	3307      	adds	r3, #7
 80050ae:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f023 0307 	bic.w	r3, r3, #7
 80050b6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	4a1f      	ldr	r2, [pc, #124]	; (800513c <prvHeapInit+0xac>)
 80050c0:	4413      	add	r3, r2
 80050c2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80050c8:	4a1d      	ldr	r2, [pc, #116]	; (8005140 <prvHeapInit+0xb0>)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80050ce:	4b1c      	ldr	r3, [pc, #112]	; (8005140 <prvHeapInit+0xb0>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	4413      	add	r3, r2
 80050da:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80050dc:	2208      	movs	r2, #8
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	1a9b      	subs	r3, r3, r2
 80050e2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f023 0307 	bic.w	r3, r3, #7
 80050ea:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4a15      	ldr	r2, [pc, #84]	; (8005144 <prvHeapInit+0xb4>)
 80050f0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80050f2:	4b14      	ldr	r3, [pc, #80]	; (8005144 <prvHeapInit+0xb4>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2200      	movs	r2, #0
 80050f8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80050fa:	4b12      	ldr	r3, [pc, #72]	; (8005144 <prvHeapInit+0xb4>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2200      	movs	r2, #0
 8005100:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	1ad2      	subs	r2, r2, r3
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005110:	4b0c      	ldr	r3, [pc, #48]	; (8005144 <prvHeapInit+0xb4>)
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	4a0a      	ldr	r2, [pc, #40]	; (8005148 <prvHeapInit+0xb8>)
 800511e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	4a09      	ldr	r2, [pc, #36]	; (800514c <prvHeapInit+0xbc>)
 8005126:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005128:	4b09      	ldr	r3, [pc, #36]	; (8005150 <prvHeapInit+0xc0>)
 800512a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800512e:	601a      	str	r2, [r3, #0]
}
 8005130:	bf00      	nop
 8005132:	3714      	adds	r7, #20
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	20000188 	.word	0x20000188
 8005140:	20012d88 	.word	0x20012d88
 8005144:	20012d90 	.word	0x20012d90
 8005148:	20012d98 	.word	0x20012d98
 800514c:	20012d94 	.word	0x20012d94
 8005150:	20012da4 	.word	0x20012da4

08005154 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800515c:	4b28      	ldr	r3, [pc, #160]	; (8005200 <prvInsertBlockIntoFreeList+0xac>)
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	e002      	b.n	8005168 <prvInsertBlockIntoFreeList+0x14>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	60fb      	str	r3, [r7, #12]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	429a      	cmp	r2, r3
 8005170:	d8f7      	bhi.n	8005162 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	4413      	add	r3, r2
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	429a      	cmp	r2, r3
 8005182:	d108      	bne.n	8005196 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	441a      	add	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	441a      	add	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d118      	bne.n	80051dc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	4b15      	ldr	r3, [pc, #84]	; (8005204 <prvInsertBlockIntoFreeList+0xb0>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d00d      	beq.n	80051d2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	441a      	add	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	e008      	b.n	80051e4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80051d2:	4b0c      	ldr	r3, [pc, #48]	; (8005204 <prvInsertBlockIntoFreeList+0xb0>)
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	601a      	str	r2, [r3, #0]
 80051da:	e003      	b.n	80051e4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d002      	beq.n	80051f2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80051f2:	bf00      	nop
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	20012d88 	.word	0x20012d88
 8005204:	20012d90 	.word	0x20012d90

08005208 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8005208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800520a:	b085      	sub	sp, #20
 800520c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800520e:	2300      	movs	r3, #0
 8005210:	607b      	str	r3, [r7, #4]
 8005212:	e033      	b.n	800527c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005214:	491e      	ldr	r1, [pc, #120]	; (8005290 <_cbSendTaskList+0x88>)
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	4613      	mov	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4413      	add	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	440b      	add	r3, r1
 8005222:	6818      	ldr	r0, [r3, #0]
 8005224:	491a      	ldr	r1, [pc, #104]	; (8005290 <_cbSendTaskList+0x88>)
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	4613      	mov	r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4413      	add	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	440b      	add	r3, r1
 8005232:	3304      	adds	r3, #4
 8005234:	6819      	ldr	r1, [r3, #0]
 8005236:	4c16      	ldr	r4, [pc, #88]	; (8005290 <_cbSendTaskList+0x88>)
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	4613      	mov	r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	4413      	add	r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	4423      	add	r3, r4
 8005244:	3308      	adds	r3, #8
 8005246:	681c      	ldr	r4, [r3, #0]
 8005248:	4d11      	ldr	r5, [pc, #68]	; (8005290 <_cbSendTaskList+0x88>)
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	4613      	mov	r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4413      	add	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	442b      	add	r3, r5
 8005256:	330c      	adds	r3, #12
 8005258:	681d      	ldr	r5, [r3, #0]
 800525a:	4e0d      	ldr	r6, [pc, #52]	; (8005290 <_cbSendTaskList+0x88>)
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	4613      	mov	r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4413      	add	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4433      	add	r3, r6
 8005268:	3310      	adds	r3, #16
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	462b      	mov	r3, r5
 8005270:	4622      	mov	r2, r4
 8005272:	f000 f8b5 	bl	80053e0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	3301      	adds	r3, #1
 800527a:	607b      	str	r3, [r7, #4]
 800527c:	4b05      	ldr	r3, [pc, #20]	; (8005294 <_cbSendTaskList+0x8c>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	429a      	cmp	r2, r3
 8005284:	d3c6      	bcc.n	8005214 <_cbSendTaskList+0xc>
  }
}
 8005286:	bf00      	nop
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005290:	20012da8 	.word	0x20012da8
 8005294:	20012e48 	.word	0x20012e48

08005298 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8005298:	b5b0      	push	{r4, r5, r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800529e:	f7fe fa0d 	bl	80036bc <xTaskGetTickCountFromISR>
 80052a2:	4603      	mov	r3, r0
 80052a4:	461a      	mov	r2, r3
 80052a6:	f04f 0300 	mov.w	r3, #0
 80052aa:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80052ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052b2:	4602      	mov	r2, r0
 80052b4:	460b      	mov	r3, r1
 80052b6:	f04f 0400 	mov.w	r4, #0
 80052ba:	f04f 0500 	mov.w	r5, #0
 80052be:	015d      	lsls	r5, r3, #5
 80052c0:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80052c4:	0154      	lsls	r4, r2, #5
 80052c6:	4622      	mov	r2, r4
 80052c8:	462b      	mov	r3, r5
 80052ca:	1a12      	subs	r2, r2, r0
 80052cc:	eb63 0301 	sbc.w	r3, r3, r1
 80052d0:	f04f 0400 	mov.w	r4, #0
 80052d4:	f04f 0500 	mov.w	r5, #0
 80052d8:	009d      	lsls	r5, r3, #2
 80052da:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 80052de:	0094      	lsls	r4, r2, #2
 80052e0:	4622      	mov	r2, r4
 80052e2:	462b      	mov	r3, r5
 80052e4:	1812      	adds	r2, r2, r0
 80052e6:	eb41 0303 	adc.w	r3, r1, r3
 80052ea:	f04f 0000 	mov.w	r0, #0
 80052ee:	f04f 0100 	mov.w	r1, #0
 80052f2:	00d9      	lsls	r1, r3, #3
 80052f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052f8:	00d0      	lsls	r0, r2, #3
 80052fa:	4602      	mov	r2, r0
 80052fc:	460b      	mov	r3, r1
 80052fe:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8005302:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8005306:	4610      	mov	r0, r2
 8005308:	4619      	mov	r1, r3
 800530a:	3708      	adds	r7, #8
 800530c:	46bd      	mov	sp, r7
 800530e:	bdb0      	pop	{r4, r5, r7, pc}

08005310 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af02      	add	r7, sp, #8
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
 800531c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800531e:	2205      	movs	r2, #5
 8005320:	492b      	ldr	r1, [pc, #172]	; (80053d0 <SYSVIEW_AddTask+0xc0>)
 8005322:	68b8      	ldr	r0, [r7, #8]
 8005324:	f002 fbce 	bl	8007ac4 <memcmp>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d04b      	beq.n	80053c6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800532e:	4b29      	ldr	r3, [pc, #164]	; (80053d4 <SYSVIEW_AddTask+0xc4>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2b07      	cmp	r3, #7
 8005334:	d903      	bls.n	800533e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8005336:	4828      	ldr	r0, [pc, #160]	; (80053d8 <SYSVIEW_AddTask+0xc8>)
 8005338:	f002 faf2 	bl	8007920 <SEGGER_SYSVIEW_Warn>
    return;
 800533c:	e044      	b.n	80053c8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800533e:	4b25      	ldr	r3, [pc, #148]	; (80053d4 <SYSVIEW_AddTask+0xc4>)
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	4926      	ldr	r1, [pc, #152]	; (80053dc <SYSVIEW_AddTask+0xcc>)
 8005344:	4613      	mov	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4413      	add	r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	440b      	add	r3, r1
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8005352:	4b20      	ldr	r3, [pc, #128]	; (80053d4 <SYSVIEW_AddTask+0xc4>)
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	4921      	ldr	r1, [pc, #132]	; (80053dc <SYSVIEW_AddTask+0xcc>)
 8005358:	4613      	mov	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	440b      	add	r3, r1
 8005362:	3304      	adds	r3, #4
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005368:	4b1a      	ldr	r3, [pc, #104]	; (80053d4 <SYSVIEW_AddTask+0xc4>)
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	491b      	ldr	r1, [pc, #108]	; (80053dc <SYSVIEW_AddTask+0xcc>)
 800536e:	4613      	mov	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	440b      	add	r3, r1
 8005378:	3308      	adds	r3, #8
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800537e:	4b15      	ldr	r3, [pc, #84]	; (80053d4 <SYSVIEW_AddTask+0xc4>)
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	4916      	ldr	r1, [pc, #88]	; (80053dc <SYSVIEW_AddTask+0xcc>)
 8005384:	4613      	mov	r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	440b      	add	r3, r1
 800538e:	330c      	adds	r3, #12
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8005394:	4b0f      	ldr	r3, [pc, #60]	; (80053d4 <SYSVIEW_AddTask+0xc4>)
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	4910      	ldr	r1, [pc, #64]	; (80053dc <SYSVIEW_AddTask+0xcc>)
 800539a:	4613      	mov	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	440b      	add	r3, r1
 80053a4:	3310      	adds	r3, #16
 80053a6:	69ba      	ldr	r2, [r7, #24]
 80053a8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80053aa:	4b0a      	ldr	r3, [pc, #40]	; (80053d4 <SYSVIEW_AddTask+0xc4>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	3301      	adds	r3, #1
 80053b0:	4a08      	ldr	r2, [pc, #32]	; (80053d4 <SYSVIEW_AddTask+0xc4>)
 80053b2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	9300      	str	r3, [sp, #0]
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	68b9      	ldr	r1, [r7, #8]
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f000 f80e 	bl	80053e0 <SYSVIEW_SendTaskInfo>
 80053c4:	e000      	b.n	80053c8 <SYSVIEW_AddTask+0xb8>
    return;
 80053c6:	bf00      	nop

}
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	08007bfc 	.word	0x08007bfc
 80053d4:	20012e48 	.word	0x20012e48
 80053d8:	08007c04 	.word	0x08007c04
 80053dc:	20012da8 	.word	0x20012da8

080053e0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b08a      	sub	sp, #40	; 0x28
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
 80053ec:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80053ee:	f107 0314 	add.w	r3, r7, #20
 80053f2:	2214      	movs	r2, #20
 80053f4:	2100      	movs	r1, #0
 80053f6:	4618      	mov	r0, r3
 80053f8:	f002 fb80 	bl	8007afc <memset>
  TaskInfo.TaskID     = TaskID;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800540c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005410:	f107 0314 	add.w	r3, r7, #20
 8005414:	4618      	mov	r0, r3
 8005416:	f001 fe79 	bl	800710c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800541a:	bf00      	nop
 800541c:	3728      	adds	r7, #40	; 0x28
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
	...

08005424 <__NVIC_EnableIRQ>:
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	4603      	mov	r3, r0
 800542c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800542e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005432:	2b00      	cmp	r3, #0
 8005434:	db0b      	blt.n	800544e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005436:	79fb      	ldrb	r3, [r7, #7]
 8005438:	f003 021f 	and.w	r2, r3, #31
 800543c:	4907      	ldr	r1, [pc, #28]	; (800545c <__NVIC_EnableIRQ+0x38>)
 800543e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005442:	095b      	lsrs	r3, r3, #5
 8005444:	2001      	movs	r0, #1
 8005446:	fa00 f202 	lsl.w	r2, r0, r2
 800544a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800544e:	bf00      	nop
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	e000e100 	.word	0xe000e100

08005460 <__NVIC_SetPriority>:
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	4603      	mov	r3, r0
 8005468:	6039      	str	r1, [r7, #0]
 800546a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800546c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005470:	2b00      	cmp	r3, #0
 8005472:	db0a      	blt.n	800548a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	b2da      	uxtb	r2, r3
 8005478:	490c      	ldr	r1, [pc, #48]	; (80054ac <__NVIC_SetPriority+0x4c>)
 800547a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800547e:	0112      	lsls	r2, r2, #4
 8005480:	b2d2      	uxtb	r2, r2
 8005482:	440b      	add	r3, r1
 8005484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005488:	e00a      	b.n	80054a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	b2da      	uxtb	r2, r3
 800548e:	4908      	ldr	r1, [pc, #32]	; (80054b0 <__NVIC_SetPriority+0x50>)
 8005490:	79fb      	ldrb	r3, [r7, #7]
 8005492:	f003 030f 	and.w	r3, r3, #15
 8005496:	3b04      	subs	r3, #4
 8005498:	0112      	lsls	r2, r2, #4
 800549a:	b2d2      	uxtb	r2, r2
 800549c:	440b      	add	r3, r1
 800549e:	761a      	strb	r2, [r3, #24]
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr
 80054ac:	e000e100 	.word	0xe000e100
 80054b0:	e000ed00 	.word	0xe000ed00

080054b4 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80054ba:	f002 fa8d 	bl	80079d8 <SEGGER_SYSVIEW_IsStarted>
 80054be:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80054c6:	f001 fca5 	bl	8006e14 <SEGGER_SYSVIEW_Start>
  }
}
 80054ca:	bf00      	nop
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
	...

080054d4 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	4603      	mov	r3, r0
 80054dc:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80054de:	4b0c      	ldr	r3, [pc, #48]	; (8005510 <_cbOnUARTRx+0x3c>)
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	2b03      	cmp	r3, #3
 80054e4:	d806      	bhi.n	80054f4 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80054e6:	4b0a      	ldr	r3, [pc, #40]	; (8005510 <_cbOnUARTRx+0x3c>)
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	3301      	adds	r3, #1
 80054ec:	b2da      	uxtb	r2, r3
 80054ee:	4b08      	ldr	r3, [pc, #32]	; (8005510 <_cbOnUARTRx+0x3c>)
 80054f0:	701a      	strb	r2, [r3, #0]
    goto Done;
 80054f2:	e009      	b.n	8005508 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80054f4:	f7ff ffde 	bl	80054b4 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80054f8:	4b05      	ldr	r3, [pc, #20]	; (8005510 <_cbOnUARTRx+0x3c>)
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	4618      	mov	r0, r3
 80054fe:	1dfb      	adds	r3, r7, #7
 8005500:	2201      	movs	r2, #1
 8005502:	4619      	mov	r1, r3
 8005504:	f000 fb9a 	bl	8005c3c <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8005508:	bf00      	nop
}
 800550a:	3708      	adds	r7, #8
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	20000014 	.word	0x20000014

08005514 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 800551c:	4b14      	ldr	r3, [pc, #80]	; (8005570 <_cbOnUARTTx+0x5c>)
 800551e:	785b      	ldrb	r3, [r3, #1]
 8005520:	2b03      	cmp	r3, #3
 8005522:	d80f      	bhi.n	8005544 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8005524:	4b12      	ldr	r3, [pc, #72]	; (8005570 <_cbOnUARTTx+0x5c>)
 8005526:	785b      	ldrb	r3, [r3, #1]
 8005528:	461a      	mov	r2, r3
 800552a:	4b12      	ldr	r3, [pc, #72]	; (8005574 <_cbOnUARTTx+0x60>)
 800552c:	5c9a      	ldrb	r2, [r3, r2]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8005532:	4b0f      	ldr	r3, [pc, #60]	; (8005570 <_cbOnUARTTx+0x5c>)
 8005534:	785b      	ldrb	r3, [r3, #1]
 8005536:	3301      	adds	r3, #1
 8005538:	b2da      	uxtb	r2, r3
 800553a:	4b0d      	ldr	r3, [pc, #52]	; (8005570 <_cbOnUARTTx+0x5c>)
 800553c:	705a      	strb	r2, [r3, #1]
    r = 1;
 800553e:	2301      	movs	r3, #1
 8005540:	60fb      	str	r3, [r7, #12]
    goto Done;
 8005542:	e00f      	b.n	8005564 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8005544:	4b0a      	ldr	r3, [pc, #40]	; (8005570 <_cbOnUARTTx+0x5c>)
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	2201      	movs	r2, #1
 800554a:	6879      	ldr	r1, [r7, #4]
 800554c:	4618      	mov	r0, r3
 800554e:	f000 fa19 	bl	8005984 <SEGGER_RTT_ReadUpBufferNoLock>
 8005552:	4603      	mov	r3, r0
 8005554:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2b00      	cmp	r3, #0
 800555a:	da02      	bge.n	8005562 <_cbOnUARTTx+0x4e>
    r = 0;
 800555c:	2300      	movs	r3, #0
 800555e:	60fb      	str	r3, [r7, #12]
 8005560:	e000      	b.n	8005564 <_cbOnUARTTx+0x50>
  }
Done:
 8005562:	bf00      	nop
  return r;
 8005564:	68fb      	ldr	r3, [r7, #12]
}
 8005566:	4618      	mov	r0, r3
 8005568:	3710      	adds	r7, #16
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	20000014 	.word	0x20000014
 8005574:	08007ce8 	.word	0x08007ce8

08005578 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8005580:	4a04      	ldr	r2, [pc, #16]	; (8005594 <SEGGER_UART_init+0x1c>)
 8005582:	4905      	ldr	r1, [pc, #20]	; (8005598 <SEGGER_UART_init+0x20>)
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f863 	bl	8005650 <HIF_UART_Init>
}
 800558a:	bf00      	nop
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	080054d5 	.word	0x080054d5
 8005598:	08005515 	.word	0x08005515

0800559c <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80055a2:	4b1e      	ldr	r3, [pc, #120]	; (800561c <USART2_IRQHandler+0x80>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f003 0320 	and.w	r3, r3, #32
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d011      	beq.n	80055d6 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80055b2:	4b1b      	ldr	r3, [pc, #108]	; (8005620 <USART2_IRQHandler+0x84>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f003 030b 	and.w	r3, r3, #11
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d108      	bne.n	80055d6 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80055c4:	4b17      	ldr	r3, [pc, #92]	; (8005624 <USART2_IRQHandler+0x88>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d004      	beq.n	80055d6 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80055cc:	4b15      	ldr	r3, [pc, #84]	; (8005624 <USART2_IRQHandler+0x88>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	79fa      	ldrb	r2, [r7, #7]
 80055d2:	4610      	mov	r0, r2
 80055d4:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d01a      	beq.n	8005616 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80055e0:	4b11      	ldr	r3, [pc, #68]	; (8005628 <USART2_IRQHandler+0x8c>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d015      	beq.n	8005614 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80055e8:	4b0f      	ldr	r3, [pc, #60]	; (8005628 <USART2_IRQHandler+0x8c>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	1dfa      	adds	r2, r7, #7
 80055ee:	4610      	mov	r0, r2
 80055f0:	4798      	blx	r3
 80055f2:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d106      	bne.n	8005608 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80055fa:	4b0c      	ldr	r3, [pc, #48]	; (800562c <USART2_IRQHandler+0x90>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a0b      	ldr	r2, [pc, #44]	; (800562c <USART2_IRQHandler+0x90>)
 8005600:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005604:	6013      	str	r3, [r2, #0]
 8005606:	e006      	b.n	8005616 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005608:	4b04      	ldr	r3, [pc, #16]	; (800561c <USART2_IRQHandler+0x80>)
 800560a:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 800560c:	79fa      	ldrb	r2, [r7, #7]
 800560e:	4b04      	ldr	r3, [pc, #16]	; (8005620 <USART2_IRQHandler+0x84>)
 8005610:	601a      	str	r2, [r3, #0]
 8005612:	e000      	b.n	8005616 <USART2_IRQHandler+0x7a>
      return;
 8005614:	bf00      	nop
    }
  }
}
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	40004400 	.word	0x40004400
 8005620:	40004404 	.word	0x40004404
 8005624:	20012e4c 	.word	0x20012e4c
 8005628:	20012e50 	.word	0x20012e50
 800562c:	4000440c 	.word	0x4000440c

08005630 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005630:	b480      	push	{r7}
 8005632:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8005634:	4b05      	ldr	r3, [pc, #20]	; (800564c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a04      	ldr	r2, [pc, #16]	; (800564c <HIF_UART_EnableTXEInterrupt+0x1c>)
 800563a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800563e:	6013      	str	r3, [r2, #0]
}
 8005640:	bf00      	nop
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	4000440c 	.word	0x4000440c

08005650 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 800565c:	4b2e      	ldr	r3, [pc, #184]	; (8005718 <HIF_UART_Init+0xc8>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a2d      	ldr	r2, [pc, #180]	; (8005718 <HIF_UART_Init+0xc8>)
 8005662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005666:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8005668:	4b2c      	ldr	r3, [pc, #176]	; (800571c <HIF_UART_Init+0xcc>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a2b      	ldr	r2, [pc, #172]	; (800571c <HIF_UART_Init+0xcc>)
 800566e:	f043 0301 	orr.w	r3, r3, #1
 8005672:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8005674:	4b2a      	ldr	r3, [pc, #168]	; (8005720 <HIF_UART_Init+0xd0>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005680:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8005688:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 800568a:	4a25      	ldr	r2, [pc, #148]	; (8005720 <HIF_UART_Init+0xd0>)
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8005690:	4b24      	ldr	r3, [pc, #144]	; (8005724 <HIF_UART_Init+0xd4>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800569c:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80056a4:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80056a6:	4a1f      	ldr	r2, [pc, #124]	; (8005724 <HIF_UART_Init+0xd4>)
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80056ac:	4b1e      	ldr	r3, [pc, #120]	; (8005728 <HIF_UART_Init+0xd8>)
 80056ae:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80056b2:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80056b4:	4b1d      	ldr	r3, [pc, #116]	; (800572c <HIF_UART_Init+0xdc>)
 80056b6:	2200      	movs	r2, #0
 80056b8:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80056ba:	4b1d      	ldr	r3, [pc, #116]	; (8005730 <HIF_UART_Init+0xe0>)
 80056bc:	2280      	movs	r2, #128	; 0x80
 80056be:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	00db      	lsls	r3, r3, #3
 80056c4:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80056c6:	4a1b      	ldr	r2, [pc, #108]	; (8005734 <HIF_UART_Init+0xe4>)
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ce:	3301      	adds	r3, #1
 80056d0:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	085b      	lsrs	r3, r3, #1
 80056d6:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056de:	d302      	bcc.n	80056e6 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80056e0:	f640 73ff 	movw	r3, #4095	; 0xfff
 80056e4:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d004      	beq.n	80056f6 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	011b      	lsls	r3, r3, #4
 80056f0:	4a11      	ldr	r2, [pc, #68]	; (8005738 <HIF_UART_Init+0xe8>)
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80056f6:	4a11      	ldr	r2, [pc, #68]	; (800573c <HIF_UART_Init+0xec>)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80056fc:	4a10      	ldr	r2, [pc, #64]	; (8005740 <HIF_UART_Init+0xf0>)
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8005702:	2106      	movs	r1, #6
 8005704:	2026      	movs	r0, #38	; 0x26
 8005706:	f7ff feab 	bl	8005460 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800570a:	2026      	movs	r0, #38	; 0x26
 800570c:	f7ff fe8a 	bl	8005424 <__NVIC_EnableIRQ>
}
 8005710:	bf00      	nop
 8005712:	3718      	adds	r7, #24
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	40023840 	.word	0x40023840
 800571c:	40023830 	.word	0x40023830
 8005720:	40020020 	.word	0x40020020
 8005724:	40020000 	.word	0x40020000
 8005728:	4000440c 	.word	0x4000440c
 800572c:	40004410 	.word	0x40004410
 8005730:	40004414 	.word	0x40004414
 8005734:	0501bd00 	.word	0x0501bd00
 8005738:	40004408 	.word	0x40004408
 800573c:	20012e4c 	.word	0x20012e4c
 8005740:	20012e50 	.word	0x20012e50

08005744 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800574a:	4b24      	ldr	r3, [pc, #144]	; (80057dc <_DoInit+0x98>)
 800574c:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2203      	movs	r2, #3
 8005752:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2203      	movs	r2, #3
 8005758:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a20      	ldr	r2, [pc, #128]	; (80057e0 <_DoInit+0x9c>)
 800575e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a20      	ldr	r2, [pc, #128]	; (80057e4 <_DoInit+0xa0>)
 8005764:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800576c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a17      	ldr	r2, [pc, #92]	; (80057e0 <_DoInit+0x9c>)
 8005784:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a17      	ldr	r2, [pc, #92]	; (80057e8 <_DoInit+0xa4>)
 800578a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2210      	movs	r2, #16
 8005790:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	3307      	adds	r3, #7
 80057a8:	4a10      	ldr	r2, [pc, #64]	; (80057ec <_DoInit+0xa8>)
 80057aa:	6810      	ldr	r0, [r2, #0]
 80057ac:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80057ae:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a0e      	ldr	r2, [pc, #56]	; (80057f0 <_DoInit+0xac>)
 80057b6:	6810      	ldr	r0, [r2, #0]
 80057b8:	6018      	str	r0, [r3, #0]
 80057ba:	8891      	ldrh	r1, [r2, #4]
 80057bc:	7992      	ldrb	r2, [r2, #6]
 80057be:	8099      	strh	r1, [r3, #4]
 80057c0:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80057c2:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2220      	movs	r2, #32
 80057ca:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80057cc:	f3bf 8f5f 	dmb	sy
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	2001441c 	.word	0x2001441c
 80057e0:	08007c54 	.word	0x08007c54
 80057e4:	20012e54 	.word	0x20012e54
 80057e8:	20013254 	.word	0x20013254
 80057ec:	08007c60 	.word	0x08007c60
 80057f0:	08007c64 	.word	0x08007c64

080057f4 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b08a      	sub	sp, #40	; 0x28
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005800:	2300      	movs	r3, #0
 8005802:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005810:	69ba      	ldr	r2, [r7, #24]
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	429a      	cmp	r2, r3
 8005816:	d905      	bls.n	8005824 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005818:	69ba      	ldr	r2, [r7, #24]
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	3b01      	subs	r3, #1
 8005820:	627b      	str	r3, [r7, #36]	; 0x24
 8005822:	e007      	b.n	8005834 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	689a      	ldr	r2, [r3, #8]
 8005828:	69b9      	ldr	r1, [r7, #24]
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	1acb      	subs	r3, r1, r3
 800582e:	4413      	add	r3, r2
 8005830:	3b01      	subs	r3, #1
 8005832:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	689a      	ldr	r2, [r3, #8]
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800583e:	4293      	cmp	r3, r2
 8005840:	bf28      	it	cs
 8005842:	4613      	movcs	r3, r2
 8005844:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4293      	cmp	r3, r2
 800584c:	bf28      	it	cs
 800584e:	4613      	movcs	r3, r2
 8005850:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	4413      	add	r3, r2
 800585a:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800585c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800585e:	68b9      	ldr	r1, [r7, #8]
 8005860:	6978      	ldr	r0, [r7, #20]
 8005862:	f002 f93d 	bl	8007ae0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005866:	6a3a      	ldr	r2, [r7, #32]
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	4413      	add	r3, r2
 800586c:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	4413      	add	r3, r2
 8005874:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800587e:	69fa      	ldr	r2, [r7, #28]
 8005880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005882:	4413      	add	r3, r2
 8005884:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	69fa      	ldr	r2, [r7, #28]
 800588c:	429a      	cmp	r2, r3
 800588e:	d101      	bne.n	8005894 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005890:	2300      	movs	r3, #0
 8005892:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005894:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	69fa      	ldr	r2, [r7, #28]
 800589c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1b2      	bne.n	800580a <_WriteBlocking+0x16>
  return NumBytesWritten;
 80058a4:	6a3b      	ldr	r3, [r7, #32]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3728      	adds	r7, #40	; 0x28
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b088      	sub	sp, #32
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	60f8      	str	r0, [r7, #12]
 80058b6:	60b9      	str	r1, [r7, #8]
 80058b8:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	689a      	ldr	r2, [r3, #8]
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d911      	bls.n	80058f6 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	4413      	add	r3, r2
 80058da:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	68b9      	ldr	r1, [r7, #8]
 80058e0:	6938      	ldr	r0, [r7, #16]
 80058e2:	f002 f8fd 	bl	8007ae0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80058e6:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80058ea:	69fa      	ldr	r2, [r7, #28]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	441a      	add	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80058f4:	e01f      	b.n	8005936 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	685a      	ldr	r2, [r3, #4]
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	4413      	add	r3, r2
 8005902:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	68b9      	ldr	r1, [r7, #8]
 8005908:	6938      	ldr	r0, [r7, #16]
 800590a:	f002 f8e9 	bl	8007ae0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	4413      	add	r3, r2
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	4619      	mov	r1, r3
 8005926:	6938      	ldr	r0, [r7, #16]
 8005928:	f002 f8da 	bl	8007ae0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800592c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	60da      	str	r2, [r3, #12]
}
 8005936:	bf00      	nop
 8005938:	3720      	adds	r7, #32
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800593e:	b480      	push	{r7}
 8005940:	b087      	sub	sp, #28
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	429a      	cmp	r2, r3
 8005958:	d808      	bhi.n	800596c <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	689a      	ldr	r2, [r3, #8]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	1ad2      	subs	r2, r2, r3
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	4413      	add	r3, r2
 8005966:	3b01      	subs	r3, #1
 8005968:	617b      	str	r3, [r7, #20]
 800596a:	e004      	b.n	8005976 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	3b01      	subs	r3, #1
 8005974:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005976:	697b      	ldr	r3, [r7, #20]
}
 8005978:	4618      	mov	r0, r3
 800597a:	371c      	adds	r7, #28
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005984:	b580      	push	{r7, lr}
 8005986:	b08c      	sub	sp, #48	; 0x30
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005990:	4b3e      	ldr	r3, [pc, #248]	; (8005a8c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005992:	623b      	str	r3, [r7, #32]
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d101      	bne.n	80059a2 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800599e:	f7ff fed1 	bl	8005744 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	1c5a      	adds	r2, r3, #1
 80059a6:	4613      	mov	r3, r2
 80059a8:	005b      	lsls	r3, r3, #1
 80059aa:	4413      	add	r3, r2
 80059ac:	00db      	lsls	r3, r3, #3
 80059ae:	4a37      	ldr	r2, [pc, #220]	; (8005a8c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80059b0:	4413      	add	r3, r2
 80059b2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80059c4:	2300      	movs	r3, #0
 80059c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80059c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d92b      	bls.n	8005a28 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	689a      	ldr	r2, [r3, #8]
 80059d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4293      	cmp	r3, r2
 80059e0:	bf28      	it	cs
 80059e2:	4613      	movcs	r3, r2
 80059e4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ec:	4413      	add	r3, r2
 80059ee:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	6939      	ldr	r1, [r7, #16]
 80059f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059f6:	f002 f873 	bl	8007ae0 <memcpy>
    NumBytesRead += NumBytesRem;
 80059fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	4413      	add	r3, r2
 8005a00:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	4413      	add	r3, r2
 8005a08:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005a12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	4413      	add	r3, r2
 8005a18:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d101      	bne.n	8005a28 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005a24:	2300      	movs	r3, #0
 8005a26:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4293      	cmp	r3, r2
 8005a36:	bf28      	it	cs
 8005a38:	4613      	movcs	r3, r2
 8005a3a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d019      	beq.n	8005a76 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a48:	4413      	add	r3, r2
 8005a4a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	6939      	ldr	r1, [r7, #16]
 8005a50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a52:	f002 f845 	bl	8007ae0 <memcpy>
    NumBytesRead += NumBytesRem;
 8005a56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	4413      	add	r3, r2
 8005a64:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005a6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	4413      	add	r3, r2
 8005a74:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d002      	beq.n	8005a82 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a80:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3730      	adds	r7, #48	; 0x30
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	2001441c 	.word	0x2001441c

08005a90 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b08c      	sub	sp, #48	; 0x30
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005a9c:	4b3e      	ldr	r3, [pc, #248]	; (8005b98 <SEGGER_RTT_ReadNoLock+0x108>)
 8005a9e:	623b      	str	r3, [r7, #32]
 8005aa0:	6a3b      	ldr	r3, [r7, #32]
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <SEGGER_RTT_ReadNoLock+0x1e>
 8005aaa:	f7ff fe4b 	bl	8005744 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	005b      	lsls	r3, r3, #1
 8005ab4:	4413      	add	r3, r2
 8005ab6:	00db      	lsls	r3, r3, #3
 8005ab8:	3360      	adds	r3, #96	; 0x60
 8005aba:	4a37      	ldr	r2, [pc, #220]	; (8005b98 <SEGGER_RTT_ReadNoLock+0x108>)
 8005abc:	4413      	add	r3, r2
 8005abe:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005ad4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d92b      	bls.n	8005b34 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	689a      	ldr	r2, [r3, #8]
 8005ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4293      	cmp	r3, r2
 8005aec:	bf28      	it	cs
 8005aee:	4613      	movcs	r3, r2
 8005af0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	685a      	ldr	r2, [r3, #4]
 8005af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af8:	4413      	add	r3, r2
 8005afa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	6939      	ldr	r1, [r7, #16]
 8005b00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b02:	f001 ffed 	bl	8007ae0 <memcpy>
    NumBytesRead += NumBytesRem;
 8005b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	4413      	add	r3, r2
 8005b14:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005b1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	4413      	add	r3, r2
 8005b24:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d101      	bne.n	8005b34 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005b30:	2300      	movs	r3, #0
 8005b32:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4293      	cmp	r3, r2
 8005b42:	bf28      	it	cs
 8005b44:	4613      	movcs	r3, r2
 8005b46:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d019      	beq.n	8005b82 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	685a      	ldr	r2, [r3, #4]
 8005b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b54:	4413      	add	r3, r2
 8005b56:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005b58:	697a      	ldr	r2, [r7, #20]
 8005b5a:	6939      	ldr	r1, [r7, #16]
 8005b5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b5e:	f001 ffbf 	bl	8007ae0 <memcpy>
    NumBytesRead += NumBytesRem;
 8005b62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	4413      	add	r3, r2
 8005b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	4413      	add	r3, r2
 8005b70:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005b7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	4413      	add	r3, r2
 8005b80:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d002      	beq.n	8005b8e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b8c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3730      	adds	r7, #48	; 0x30
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	2001441c 	.word	0x2001441c

08005b9c <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b088      	sub	sp, #32
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	005b      	lsls	r3, r3, #1
 8005bb2:	4413      	add	r3, r2
 8005bb4:	00db      	lsls	r3, r3, #3
 8005bb6:	3360      	adds	r3, #96	; 0x60
 8005bb8:	4a1f      	ldr	r2, [pc, #124]	; (8005c38 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005bba:	4413      	add	r3, r2
 8005bbc:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d029      	beq.n	8005c1a <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d82e      	bhi.n	8005c28 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d002      	beq.n	8005bd4 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d013      	beq.n	8005bfa <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8005bd2:	e029      	b.n	8005c28 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005bd4:	6978      	ldr	r0, [r7, #20]
 8005bd6:	f7ff feb2 	bl	800593e <_GetAvailWriteSpace>
 8005bda:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d202      	bcs.n	8005bea <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005be4:	2300      	movs	r3, #0
 8005be6:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005be8:	e021      	b.n	8005c2e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	69b9      	ldr	r1, [r7, #24]
 8005bf2:	6978      	ldr	r0, [r7, #20]
 8005bf4:	f7ff fe5b 	bl	80058ae <_WriteNoCheck>
    break;
 8005bf8:	e019      	b.n	8005c2e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005bfa:	6978      	ldr	r0, [r7, #20]
 8005bfc:	f7ff fe9f 	bl	800593e <_GetAvailWriteSpace>
 8005c00:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	4293      	cmp	r3, r2
 8005c08:	bf28      	it	cs
 8005c0a:	4613      	movcs	r3, r2
 8005c0c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005c0e:	69fa      	ldr	r2, [r7, #28]
 8005c10:	69b9      	ldr	r1, [r7, #24]
 8005c12:	6978      	ldr	r0, [r7, #20]
 8005c14:	f7ff fe4b 	bl	80058ae <_WriteNoCheck>
    break;
 8005c18:	e009      	b.n	8005c2e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	69b9      	ldr	r1, [r7, #24]
 8005c1e:	6978      	ldr	r0, [r7, #20]
 8005c20:	f7ff fde8 	bl	80057f4 <_WriteBlocking>
 8005c24:	61f8      	str	r0, [r7, #28]
    break;
 8005c26:	e002      	b.n	8005c2e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	61fb      	str	r3, [r7, #28]
    break;
 8005c2c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005c2e:	69fb      	ldr	r3, [r7, #28]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3720      	adds	r7, #32
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	2001441c 	.word	0x2001441c

08005c3c <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b088      	sub	sp, #32
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005c48:	4b0e      	ldr	r3, [pc, #56]	; (8005c84 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005c4a:	61fb      	str	r3, [r7, #28]
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d101      	bne.n	8005c5a <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005c56:	f7ff fd75 	bl	8005744 <_DoInit>
  SEGGER_RTT_LOCK();
 8005c5a:	f3ef 8311 	mrs	r3, BASEPRI
 8005c5e:	f04f 0120 	mov.w	r1, #32
 8005c62:	f381 8811 	msr	BASEPRI, r1
 8005c66:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	68b9      	ldr	r1, [r7, #8]
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f7ff ff95 	bl	8005b9c <SEGGER_RTT_WriteDownBufferNoLock>
 8005c72:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005c7a:	697b      	ldr	r3, [r7, #20]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3720      	adds	r7, #32
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	2001441c 	.word	0x2001441c

08005c88 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b088      	sub	sp, #32
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
 8005c94:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005c96:	4b3d      	ldr	r3, [pc, #244]	; (8005d8c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005c98:	61bb      	str	r3, [r7, #24]
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d101      	bne.n	8005ca8 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005ca4:	f7ff fd4e 	bl	8005744 <_DoInit>
  SEGGER_RTT_LOCK();
 8005ca8:	f3ef 8311 	mrs	r3, BASEPRI
 8005cac:	f04f 0120 	mov.w	r1, #32
 8005cb0:	f381 8811 	msr	BASEPRI, r1
 8005cb4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005cb6:	4b35      	ldr	r3, [pc, #212]	; (8005d8c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005cb8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005cbe:	6939      	ldr	r1, [r7, #16]
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	1c5a      	adds	r2, r3, #1
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	005b      	lsls	r3, r3, #1
 8005cc8:	4413      	add	r3, r2
 8005cca:	00db      	lsls	r3, r3, #3
 8005ccc:	440b      	add	r3, r1
 8005cce:	3304      	adds	r3, #4
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d008      	beq.n	8005ce8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	69fa      	ldr	r2, [r7, #28]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	dbeb      	blt.n	8005cbe <SEGGER_RTT_AllocUpBuffer+0x36>
 8005ce6:	e000      	b.n	8005cea <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005ce8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	69fa      	ldr	r2, [r7, #28]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	da3f      	bge.n	8005d74 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005cf4:	6939      	ldr	r1, [r7, #16]
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	1c5a      	adds	r2, r3, #1
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	005b      	lsls	r3, r3, #1
 8005cfe:	4413      	add	r3, r2
 8005d00:	00db      	lsls	r3, r3, #3
 8005d02:	440b      	add	r3, r1
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005d08:	6939      	ldr	r1, [r7, #16]
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	1c5a      	adds	r2, r3, #1
 8005d0e:	4613      	mov	r3, r2
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	4413      	add	r3, r2
 8005d14:	00db      	lsls	r3, r3, #3
 8005d16:	440b      	add	r3, r1
 8005d18:	3304      	adds	r3, #4
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005d1e:	6939      	ldr	r1, [r7, #16]
 8005d20:	69fa      	ldr	r2, [r7, #28]
 8005d22:	4613      	mov	r3, r2
 8005d24:	005b      	lsls	r3, r3, #1
 8005d26:	4413      	add	r3, r2
 8005d28:	00db      	lsls	r3, r3, #3
 8005d2a:	440b      	add	r3, r1
 8005d2c:	3320      	adds	r3, #32
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005d32:	6939      	ldr	r1, [r7, #16]
 8005d34:	69fa      	ldr	r2, [r7, #28]
 8005d36:	4613      	mov	r3, r2
 8005d38:	005b      	lsls	r3, r3, #1
 8005d3a:	4413      	add	r3, r2
 8005d3c:	00db      	lsls	r3, r3, #3
 8005d3e:	440b      	add	r3, r1
 8005d40:	3328      	adds	r3, #40	; 0x28
 8005d42:	2200      	movs	r2, #0
 8005d44:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005d46:	6939      	ldr	r1, [r7, #16]
 8005d48:	69fa      	ldr	r2, [r7, #28]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	005b      	lsls	r3, r3, #1
 8005d4e:	4413      	add	r3, r2
 8005d50:	00db      	lsls	r3, r3, #3
 8005d52:	440b      	add	r3, r1
 8005d54:	3324      	adds	r3, #36	; 0x24
 8005d56:	2200      	movs	r2, #0
 8005d58:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005d5a:	6939      	ldr	r1, [r7, #16]
 8005d5c:	69fa      	ldr	r2, [r7, #28]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	005b      	lsls	r3, r3, #1
 8005d62:	4413      	add	r3, r2
 8005d64:	00db      	lsls	r3, r3, #3
 8005d66:	440b      	add	r3, r1
 8005d68:	332c      	adds	r3, #44	; 0x2c
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005d6e:	f3bf 8f5f 	dmb	sy
 8005d72:	e002      	b.n	8005d7a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005d74:	f04f 33ff 	mov.w	r3, #4294967295
 8005d78:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005d80:	69fb      	ldr	r3, [r7, #28]
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3720      	adds	r7, #32
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	2001441c 	.word	0x2001441c

08005d90 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b088      	sub	sp, #32
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
 8005d9c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005d9e:	4b33      	ldr	r3, [pc, #204]	; (8005e6c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005da0:	61bb      	str	r3, [r7, #24]
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d101      	bne.n	8005db0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005dac:	f7ff fcca 	bl	8005744 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005db0:	4b2e      	ldr	r3, [pc, #184]	; (8005e6c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005db2:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	695b      	ldr	r3, [r3, #20]
 8005db8:	461a      	mov	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d24d      	bcs.n	8005e5c <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005dc0:	f3ef 8311 	mrs	r3, BASEPRI
 8005dc4:	f04f 0120 	mov.w	r1, #32
 8005dc8:	f381 8811 	msr	BASEPRI, r1
 8005dcc:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d031      	beq.n	8005e38 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005dd4:	6979      	ldr	r1, [r7, #20]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	005b      	lsls	r3, r3, #1
 8005ddc:	4413      	add	r3, r2
 8005dde:	00db      	lsls	r3, r3, #3
 8005de0:	440b      	add	r3, r1
 8005de2:	3360      	adds	r3, #96	; 0x60
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005de8:	6979      	ldr	r1, [r7, #20]
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	4613      	mov	r3, r2
 8005dee:	005b      	lsls	r3, r3, #1
 8005df0:	4413      	add	r3, r2
 8005df2:	00db      	lsls	r3, r3, #3
 8005df4:	440b      	add	r3, r1
 8005df6:	3364      	adds	r3, #100	; 0x64
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005dfc:	6979      	ldr	r1, [r7, #20]
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	4613      	mov	r3, r2
 8005e02:	005b      	lsls	r3, r3, #1
 8005e04:	4413      	add	r3, r2
 8005e06:	00db      	lsls	r3, r3, #3
 8005e08:	440b      	add	r3, r1
 8005e0a:	3368      	adds	r3, #104	; 0x68
 8005e0c:	683a      	ldr	r2, [r7, #0]
 8005e0e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005e10:	6979      	ldr	r1, [r7, #20]
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	4613      	mov	r3, r2
 8005e16:	005b      	lsls	r3, r3, #1
 8005e18:	4413      	add	r3, r2
 8005e1a:	00db      	lsls	r3, r3, #3
 8005e1c:	440b      	add	r3, r1
 8005e1e:	3370      	adds	r3, #112	; 0x70
 8005e20:	2200      	movs	r2, #0
 8005e22:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005e24:	6979      	ldr	r1, [r7, #20]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	005b      	lsls	r3, r3, #1
 8005e2c:	4413      	add	r3, r2
 8005e2e:	00db      	lsls	r3, r3, #3
 8005e30:	440b      	add	r3, r1
 8005e32:	336c      	adds	r3, #108	; 0x6c
 8005e34:	2200      	movs	r2, #0
 8005e36:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005e38:	6979      	ldr	r1, [r7, #20]
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	005b      	lsls	r3, r3, #1
 8005e40:	4413      	add	r3, r2
 8005e42:	00db      	lsls	r3, r3, #3
 8005e44:	440b      	add	r3, r1
 8005e46:	3374      	adds	r3, #116	; 0x74
 8005e48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e4a:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005e4c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005e56:	2300      	movs	r3, #0
 8005e58:	61fb      	str	r3, [r7, #28]
 8005e5a:	e002      	b.n	8005e62 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e60:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005e62:	69fb      	ldr	r3, [r7, #28]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3720      	adds	r7, #32
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	2001441c 	.word	0x2001441c

08005e70 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005e70:	b480      	push	{r7}
 8005e72:	b087      	sub	sp, #28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005e80:	e002      	b.n	8005e88 <_EncodeStr+0x18>
    Len++;
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	3301      	adds	r3, #1
 8005e86:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1f6      	bne.n	8005e82 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d901      	bls.n	8005ea0 <_EncodeStr+0x30>
    Len = Limit;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	2bfe      	cmp	r3, #254	; 0xfe
 8005ea4:	d806      	bhi.n	8005eb4 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	1c5a      	adds	r2, r3, #1
 8005eaa:	60fa      	str	r2, [r7, #12]
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	b2d2      	uxtb	r2, r2
 8005eb0:	701a      	strb	r2, [r3, #0]
 8005eb2:	e011      	b.n	8005ed8 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	1c5a      	adds	r2, r3, #1
 8005eb8:	60fa      	str	r2, [r7, #12]
 8005eba:	22ff      	movs	r2, #255	; 0xff
 8005ebc:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	1c5a      	adds	r2, r3, #1
 8005ec2:	60fa      	str	r2, [r7, #12]
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	b2d2      	uxtb	r2, r2
 8005ec8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	0a19      	lsrs	r1, r3, #8
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	1c5a      	adds	r2, r3, #1
 8005ed2:	60fa      	str	r2, [r7, #12]
 8005ed4:	b2ca      	uxtb	r2, r1
 8005ed6:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005edc:	e00a      	b.n	8005ef4 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	1c53      	adds	r3, r2, #1
 8005ee2:	60bb      	str	r3, [r7, #8]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	1c59      	adds	r1, r3, #1
 8005ee8:	60f9      	str	r1, [r7, #12]
 8005eea:	7812      	ldrb	r2, [r2, #0]
 8005eec:	701a      	strb	r2, [r3, #0]
    n++;
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d3f0      	bcc.n	8005ede <_EncodeStr+0x6e>
  }
  return pPayload;
 8005efc:	68fb      	ldr	r3, [r7, #12]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	371c      	adds	r7, #28
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005f0a:	b480      	push	{r7}
 8005f0c:	b083      	sub	sp, #12
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	3304      	adds	r3, #4
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
	...

08005f24 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005f2a:	4b36      	ldr	r3, [pc, #216]	; (8006004 <_HandleIncomingPacket+0xe0>)
 8005f2c:	7e1b      	ldrb	r3, [r3, #24]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	1cfb      	adds	r3, r7, #3
 8005f32:	2201      	movs	r2, #1
 8005f34:	4619      	mov	r1, r3
 8005f36:	f7ff fdab 	bl	8005a90 <SEGGER_RTT_ReadNoLock>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	dd54      	ble.n	8005fee <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8005f44:	78fb      	ldrb	r3, [r7, #3]
 8005f46:	2b80      	cmp	r3, #128	; 0x80
 8005f48:	d032      	beq.n	8005fb0 <_HandleIncomingPacket+0x8c>
 8005f4a:	2b80      	cmp	r3, #128	; 0x80
 8005f4c:	dc42      	bgt.n	8005fd4 <_HandleIncomingPacket+0xb0>
 8005f4e:	2b07      	cmp	r3, #7
 8005f50:	dc16      	bgt.n	8005f80 <_HandleIncomingPacket+0x5c>
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	dd3e      	ble.n	8005fd4 <_HandleIncomingPacket+0xb0>
 8005f56:	3b01      	subs	r3, #1
 8005f58:	2b06      	cmp	r3, #6
 8005f5a:	d83b      	bhi.n	8005fd4 <_HandleIncomingPacket+0xb0>
 8005f5c:	a201      	add	r2, pc, #4	; (adr r2, 8005f64 <_HandleIncomingPacket+0x40>)
 8005f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f62:	bf00      	nop
 8005f64:	08005f87 	.word	0x08005f87
 8005f68:	08005f8d 	.word	0x08005f8d
 8005f6c:	08005f93 	.word	0x08005f93
 8005f70:	08005f99 	.word	0x08005f99
 8005f74:	08005f9f 	.word	0x08005f9f
 8005f78:	08005fa5 	.word	0x08005fa5
 8005f7c:	08005fab 	.word	0x08005fab
 8005f80:	2b7f      	cmp	r3, #127	; 0x7f
 8005f82:	d036      	beq.n	8005ff2 <_HandleIncomingPacket+0xce>
 8005f84:	e026      	b.n	8005fd4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005f86:	f000 ff45 	bl	8006e14 <SEGGER_SYSVIEW_Start>
      break;
 8005f8a:	e037      	b.n	8005ffc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005f8c:	f000 fffe 	bl	8006f8c <SEGGER_SYSVIEW_Stop>
      break;
 8005f90:	e034      	b.n	8005ffc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005f92:	f001 f9d7 	bl	8007344 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005f96:	e031      	b.n	8005ffc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005f98:	f001 f99c 	bl	80072d4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005f9c:	e02e      	b.n	8005ffc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005f9e:	f001 f81b 	bl	8006fd8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005fa2:	e02b      	b.n	8005ffc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005fa4:	f001 fc6a 	bl	800787c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005fa8:	e028      	b.n	8005ffc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005faa:	f001 fc49 	bl	8007840 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005fae:	e025      	b.n	8005ffc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005fb0:	4b14      	ldr	r3, [pc, #80]	; (8006004 <_HandleIncomingPacket+0xe0>)
 8005fb2:	7e1b      	ldrb	r3, [r3, #24]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	1cfb      	adds	r3, r7, #3
 8005fb8:	2201      	movs	r2, #1
 8005fba:	4619      	mov	r1, r3
 8005fbc:	f7ff fd68 	bl	8005a90 <SEGGER_RTT_ReadNoLock>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	dd15      	ble.n	8005ff6 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005fca:	78fb      	ldrb	r3, [r7, #3]
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f001 fbb7 	bl	8007740 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005fd2:	e010      	b.n	8005ff6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005fd4:	78fb      	ldrb	r3, [r7, #3]
 8005fd6:	b25b      	sxtb	r3, r3
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	da0e      	bge.n	8005ffa <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005fdc:	4b09      	ldr	r3, [pc, #36]	; (8006004 <_HandleIncomingPacket+0xe0>)
 8005fde:	7e1b      	ldrb	r3, [r3, #24]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	1cfb      	adds	r3, r7, #3
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	f7ff fd52 	bl	8005a90 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005fec:	e005      	b.n	8005ffa <_HandleIncomingPacket+0xd6>
    }
  }
 8005fee:	bf00      	nop
 8005ff0:	e004      	b.n	8005ffc <_HandleIncomingPacket+0xd8>
      break;
 8005ff2:	bf00      	nop
 8005ff4:	e002      	b.n	8005ffc <_HandleIncomingPacket+0xd8>
      break;
 8005ff6:	bf00      	nop
 8005ff8:	e000      	b.n	8005ffc <_HandleIncomingPacket+0xd8>
      break;
 8005ffa:	bf00      	nop
}
 8005ffc:	bf00      	nop
 8005ffe:	3708      	adds	r7, #8
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	2001426c 	.word	0x2001426c

08006008 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8006008:	b580      	push	{r7, lr}
 800600a:	b08c      	sub	sp, #48	; 0x30
 800600c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800600e:	2301      	movs	r3, #1
 8006010:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8006012:	1d3b      	adds	r3, r7, #4
 8006014:	3301      	adds	r3, #1
 8006016:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800601c:	4b32      	ldr	r3, [pc, #200]	; (80060e8 <_TrySendOverflowPacket+0xe0>)
 800601e:	695b      	ldr	r3, [r3, #20]
 8006020:	62bb      	str	r3, [r7, #40]	; 0x28
 8006022:	e00b      	b.n	800603c <_TrySendOverflowPacket+0x34>
 8006024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006026:	b2da      	uxtb	r2, r3
 8006028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602a:	1c59      	adds	r1, r3, #1
 800602c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800602e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006032:	b2d2      	uxtb	r2, r2
 8006034:	701a      	strb	r2, [r3, #0]
 8006036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006038:	09db      	lsrs	r3, r3, #7
 800603a:	62bb      	str	r3, [r7, #40]	; 0x28
 800603c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603e:	2b7f      	cmp	r3, #127	; 0x7f
 8006040:	d8f0      	bhi.n	8006024 <_TrySendOverflowPacket+0x1c>
 8006042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006044:	1c5a      	adds	r2, r3, #1
 8006046:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006048:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800604a:	b2d2      	uxtb	r2, r2
 800604c:	701a      	strb	r2, [r3, #0]
 800604e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006050:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006052:	4b26      	ldr	r3, [pc, #152]	; (80060ec <_TrySendOverflowPacket+0xe4>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006058:	4b23      	ldr	r3, [pc, #140]	; (80060e8 <_TrySendOverflowPacket+0xe0>)
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	69ba      	ldr	r2, [r7, #24]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	627b      	str	r3, [r7, #36]	; 0x24
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	623b      	str	r3, [r7, #32]
 800606a:	e00b      	b.n	8006084 <_TrySendOverflowPacket+0x7c>
 800606c:	6a3b      	ldr	r3, [r7, #32]
 800606e:	b2da      	uxtb	r2, r3
 8006070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006072:	1c59      	adds	r1, r3, #1
 8006074:	6279      	str	r1, [r7, #36]	; 0x24
 8006076:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800607a:	b2d2      	uxtb	r2, r2
 800607c:	701a      	strb	r2, [r3, #0]
 800607e:	6a3b      	ldr	r3, [r7, #32]
 8006080:	09db      	lsrs	r3, r3, #7
 8006082:	623b      	str	r3, [r7, #32]
 8006084:	6a3b      	ldr	r3, [r7, #32]
 8006086:	2b7f      	cmp	r3, #127	; 0x7f
 8006088:	d8f0      	bhi.n	800606c <_TrySendOverflowPacket+0x64>
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608c:	1c5a      	adds	r2, r3, #1
 800608e:	627a      	str	r2, [r7, #36]	; 0x24
 8006090:	6a3a      	ldr	r2, [r7, #32]
 8006092:	b2d2      	uxtb	r2, r2
 8006094:	701a      	strb	r2, [r3, #0]
 8006096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006098:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800609a:	4b13      	ldr	r3, [pc, #76]	; (80060e8 <_TrySendOverflowPacket+0xe0>)
 800609c:	785b      	ldrb	r3, [r3, #1]
 800609e:	4618      	mov	r0, r3
 80060a0:	1d3b      	adds	r3, r7, #4
 80060a2:	69fa      	ldr	r2, [r7, #28]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	461a      	mov	r2, r3
 80060a8:	1d3b      	adds	r3, r7, #4
 80060aa:	4619      	mov	r1, r3
 80060ac:	f7fa f890 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80060b0:	4603      	mov	r3, r0
 80060b2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80060b4:	f7ff fabc 	bl	8005630 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d009      	beq.n	80060d2 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80060be:	4a0a      	ldr	r2, [pc, #40]	; (80060e8 <_TrySendOverflowPacket+0xe0>)
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80060c4:	4b08      	ldr	r3, [pc, #32]	; (80060e8 <_TrySendOverflowPacket+0xe0>)
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	3b01      	subs	r3, #1
 80060ca:	b2da      	uxtb	r2, r3
 80060cc:	4b06      	ldr	r3, [pc, #24]	; (80060e8 <_TrySendOverflowPacket+0xe0>)
 80060ce:	701a      	strb	r2, [r3, #0]
 80060d0:	e004      	b.n	80060dc <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80060d2:	4b05      	ldr	r3, [pc, #20]	; (80060e8 <_TrySendOverflowPacket+0xe0>)
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	3301      	adds	r3, #1
 80060d8:	4a03      	ldr	r2, [pc, #12]	; (80060e8 <_TrySendOverflowPacket+0xe0>)
 80060da:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80060dc:	693b      	ldr	r3, [r7, #16]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3730      	adds	r7, #48	; 0x30
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	2001426c 	.word	0x2001426c
 80060ec:	e0001004 	.word	0xe0001004

080060f0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b08a      	sub	sp, #40	; 0x28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80060fc:	4b6d      	ldr	r3, [pc, #436]	; (80062b4 <_SendPacket+0x1c4>)
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d010      	beq.n	8006126 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8006104:	4b6b      	ldr	r3, [pc, #428]	; (80062b4 <_SendPacket+0x1c4>)
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	f000 80a5 	beq.w	8006258 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800610e:	4b69      	ldr	r3, [pc, #420]	; (80062b4 <_SendPacket+0x1c4>)
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	2b02      	cmp	r3, #2
 8006114:	d109      	bne.n	800612a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8006116:	f7ff ff77 	bl	8006008 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800611a:	4b66      	ldr	r3, [pc, #408]	; (80062b4 <_SendPacket+0x1c4>)
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	2b01      	cmp	r3, #1
 8006120:	f040 809c 	bne.w	800625c <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8006124:	e001      	b.n	800612a <_SendPacket+0x3a>
    goto Send;
 8006126:	bf00      	nop
 8006128:	e000      	b.n	800612c <_SendPacket+0x3c>
Send:
 800612a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b1f      	cmp	r3, #31
 8006130:	d809      	bhi.n	8006146 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8006132:	4b60      	ldr	r3, [pc, #384]	; (80062b4 <_SendPacket+0x1c4>)
 8006134:	69da      	ldr	r2, [r3, #28]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	fa22 f303 	lsr.w	r3, r2, r3
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	2b00      	cmp	r3, #0
 8006142:	f040 808d 	bne.w	8006260 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2b17      	cmp	r3, #23
 800614a:	d807      	bhi.n	800615c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	3b01      	subs	r3, #1
 8006150:	60fb      	str	r3, [r7, #12]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	b2da      	uxtb	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	701a      	strb	r2, [r3, #0]
 800615a:	e03d      	b.n	80061d8 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	2b7f      	cmp	r3, #127	; 0x7f
 8006168:	d912      	bls.n	8006190 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	09da      	lsrs	r2, r3, #7
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	3b01      	subs	r3, #1
 8006172:	60fb      	str	r3, [r7, #12]
 8006174:	b2d2      	uxtb	r2, r2
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	b2db      	uxtb	r3, r3
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	3a01      	subs	r2, #1
 8006182:	60fa      	str	r2, [r7, #12]
 8006184:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006188:	b2da      	uxtb	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	701a      	strb	r2, [r3, #0]
 800618e:	e006      	b.n	800619e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	3b01      	subs	r3, #1
 8006194:	60fb      	str	r3, [r7, #12]
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	b2da      	uxtb	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2b7f      	cmp	r3, #127	; 0x7f
 80061a2:	d912      	bls.n	80061ca <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	09da      	lsrs	r2, r3, #7
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	60fb      	str	r3, [r7, #12]
 80061ae:	b2d2      	uxtb	r2, r2
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	3a01      	subs	r2, #1
 80061bc:	60fa      	str	r2, [r7, #12]
 80061be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80061c2:	b2da      	uxtb	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	701a      	strb	r2, [r3, #0]
 80061c8:	e006      	b.n	80061d8 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	3b01      	subs	r3, #1
 80061ce:	60fb      	str	r3, [r7, #12]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	b2da      	uxtb	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80061d8:	4b37      	ldr	r3, [pc, #220]	; (80062b8 <_SendPacket+0x1c8>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80061de:	4b35      	ldr	r3, [pc, #212]	; (80062b4 <_SendPacket+0x1c4>)
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	69ba      	ldr	r2, [r7, #24]
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	627b      	str	r3, [r7, #36]	; 0x24
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	623b      	str	r3, [r7, #32]
 80061f0:	e00b      	b.n	800620a <_SendPacket+0x11a>
 80061f2:	6a3b      	ldr	r3, [r7, #32]
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f8:	1c59      	adds	r1, r3, #1
 80061fa:	6279      	str	r1, [r7, #36]	; 0x24
 80061fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006200:	b2d2      	uxtb	r2, r2
 8006202:	701a      	strb	r2, [r3, #0]
 8006204:	6a3b      	ldr	r3, [r7, #32]
 8006206:	09db      	lsrs	r3, r3, #7
 8006208:	623b      	str	r3, [r7, #32]
 800620a:	6a3b      	ldr	r3, [r7, #32]
 800620c:	2b7f      	cmp	r3, #127	; 0x7f
 800620e:	d8f0      	bhi.n	80061f2 <_SendPacket+0x102>
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	1c5a      	adds	r2, r3, #1
 8006214:	627a      	str	r2, [r7, #36]	; 0x24
 8006216:	6a3a      	ldr	r2, [r7, #32]
 8006218:	b2d2      	uxtb	r2, r2
 800621a:	701a      	strb	r2, [r3, #0]
 800621c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8006220:	4b24      	ldr	r3, [pc, #144]	; (80062b4 <_SendPacket+0x1c4>)
 8006222:	785b      	ldrb	r3, [r3, #1]
 8006224:	4618      	mov	r0, r3
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	461a      	mov	r2, r3
 800622e:	68f9      	ldr	r1, [r7, #12]
 8006230:	f7f9 ffce 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006234:	4603      	mov	r3, r0
 8006236:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8006238:	f7ff f9fa 	bl	8005630 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d003      	beq.n	800624a <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006242:	4a1c      	ldr	r2, [pc, #112]	; (80062b4 <_SendPacket+0x1c4>)
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	60d3      	str	r3, [r2, #12]
 8006248:	e00b      	b.n	8006262 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800624a:	4b1a      	ldr	r3, [pc, #104]	; (80062b4 <_SendPacket+0x1c4>)
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	3301      	adds	r3, #1
 8006250:	b2da      	uxtb	r2, r3
 8006252:	4b18      	ldr	r3, [pc, #96]	; (80062b4 <_SendPacket+0x1c4>)
 8006254:	701a      	strb	r2, [r3, #0]
 8006256:	e004      	b.n	8006262 <_SendPacket+0x172>
    goto SendDone;
 8006258:	bf00      	nop
 800625a:	e002      	b.n	8006262 <_SendPacket+0x172>
      goto SendDone;
 800625c:	bf00      	nop
 800625e:	e000      	b.n	8006262 <_SendPacket+0x172>
      goto SendDone;
 8006260:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006262:	4b14      	ldr	r3, [pc, #80]	; (80062b4 <_SendPacket+0x1c4>)
 8006264:	7e1b      	ldrb	r3, [r3, #24]
 8006266:	4619      	mov	r1, r3
 8006268:	4a14      	ldr	r2, [pc, #80]	; (80062bc <_SendPacket+0x1cc>)
 800626a:	460b      	mov	r3, r1
 800626c:	005b      	lsls	r3, r3, #1
 800626e:	440b      	add	r3, r1
 8006270:	00db      	lsls	r3, r3, #3
 8006272:	4413      	add	r3, r2
 8006274:	336c      	adds	r3, #108	; 0x6c
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	4b0e      	ldr	r3, [pc, #56]	; (80062b4 <_SendPacket+0x1c4>)
 800627a:	7e1b      	ldrb	r3, [r3, #24]
 800627c:	4618      	mov	r0, r3
 800627e:	490f      	ldr	r1, [pc, #60]	; (80062bc <_SendPacket+0x1cc>)
 8006280:	4603      	mov	r3, r0
 8006282:	005b      	lsls	r3, r3, #1
 8006284:	4403      	add	r3, r0
 8006286:	00db      	lsls	r3, r3, #3
 8006288:	440b      	add	r3, r1
 800628a:	3370      	adds	r3, #112	; 0x70
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	429a      	cmp	r2, r3
 8006290:	d00b      	beq.n	80062aa <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006292:	4b08      	ldr	r3, [pc, #32]	; (80062b4 <_SendPacket+0x1c4>)
 8006294:	789b      	ldrb	r3, [r3, #2]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d107      	bne.n	80062aa <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800629a:	4b06      	ldr	r3, [pc, #24]	; (80062b4 <_SendPacket+0x1c4>)
 800629c:	2201      	movs	r2, #1
 800629e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80062a0:	f7ff fe40 	bl	8005f24 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80062a4:	4b03      	ldr	r3, [pc, #12]	; (80062b4 <_SendPacket+0x1c4>)
 80062a6:	2200      	movs	r2, #0
 80062a8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80062aa:	bf00      	nop
 80062ac:	3728      	adds	r7, #40	; 0x28
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	2001426c 	.word	0x2001426c
 80062b8:	e0001004 	.word	0xe0001004
 80062bc:	2001441c 	.word	0x2001441c

080062c0 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b08a      	sub	sp, #40	; 0x28
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	460b      	mov	r3, r1
 80062ca:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	3301      	adds	r3, #1
 80062d6:	2b80      	cmp	r3, #128	; 0x80
 80062d8:	d80a      	bhi.n	80062f0 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	1c59      	adds	r1, r3, #1
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	6051      	str	r1, [r2, #4]
 80062e4:	78fa      	ldrb	r2, [r7, #3]
 80062e6:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	1c5a      	adds	r2, r3, #1
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	2b80      	cmp	r3, #128	; 0x80
 80062f6:	d15a      	bne.n	80063ae <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	691a      	ldr	r2, [r3, #16]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	b2d2      	uxtb	r2, r2
 8006302:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	627b      	str	r3, [r7, #36]	; 0x24
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	623b      	str	r3, [r7, #32]
 8006318:	e00b      	b.n	8006332 <_StoreChar+0x72>
 800631a:	6a3b      	ldr	r3, [r7, #32]
 800631c:	b2da      	uxtb	r2, r3
 800631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006320:	1c59      	adds	r1, r3, #1
 8006322:	6279      	str	r1, [r7, #36]	; 0x24
 8006324:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006328:	b2d2      	uxtb	r2, r2
 800632a:	701a      	strb	r2, [r3, #0]
 800632c:	6a3b      	ldr	r3, [r7, #32]
 800632e:	09db      	lsrs	r3, r3, #7
 8006330:	623b      	str	r3, [r7, #32]
 8006332:	6a3b      	ldr	r3, [r7, #32]
 8006334:	2b7f      	cmp	r3, #127	; 0x7f
 8006336:	d8f0      	bhi.n	800631a <_StoreChar+0x5a>
 8006338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633a:	1c5a      	adds	r2, r3, #1
 800633c:	627a      	str	r2, [r7, #36]	; 0x24
 800633e:	6a3a      	ldr	r2, [r7, #32]
 8006340:	b2d2      	uxtb	r2, r2
 8006342:	701a      	strb	r2, [r3, #0]
 8006344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006346:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	61fb      	str	r3, [r7, #28]
 800634c:	2300      	movs	r3, #0
 800634e:	61bb      	str	r3, [r7, #24]
 8006350:	e00b      	b.n	800636a <_StoreChar+0xaa>
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	b2da      	uxtb	r2, r3
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	1c59      	adds	r1, r3, #1
 800635a:	61f9      	str	r1, [r7, #28]
 800635c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006360:	b2d2      	uxtb	r2, r2
 8006362:	701a      	strb	r2, [r3, #0]
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	09db      	lsrs	r3, r3, #7
 8006368:	61bb      	str	r3, [r7, #24]
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	2b7f      	cmp	r3, #127	; 0x7f
 800636e:	d8f0      	bhi.n	8006352 <_StoreChar+0x92>
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	1c5a      	adds	r2, r3, #1
 8006374:	61fa      	str	r2, [r7, #28]
 8006376:	69ba      	ldr	r2, [r7, #24]
 8006378:	b2d2      	uxtb	r2, r2
 800637a:	701a      	strb	r2, [r3, #0]
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	221a      	movs	r2, #26
 8006386:	6939      	ldr	r1, [r7, #16]
 8006388:	4618      	mov	r0, r3
 800638a:	f7ff feb1 	bl	80060f0 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4618      	mov	r0, r3
 8006394:	f7ff fdb9 	bl	8005f0a <_PreparePacket>
 8006398:	4602      	mov	r2, r0
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	1c5a      	adds	r2, r3, #1
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	611a      	str	r2, [r3, #16]
  }
}
 80063ae:	bf00      	nop
 80063b0:	3728      	adds	r7, #40	; 0x28
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
	...

080063b8 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b08a      	sub	sp, #40	; 0x28
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
 80063c4:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80063ca:	2301      	movs	r3, #1
 80063cc:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80063ce:	2301      	movs	r3, #1
 80063d0:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80063d2:	e007      	b.n	80063e4 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80063d4:	6a3a      	ldr	r2, [r7, #32]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063dc:	623b      	str	r3, [r7, #32]
    Width++;
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	3301      	adds	r3, #1
 80063e2:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80063e4:	6a3a      	ldr	r2, [r7, #32]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d2f3      	bcs.n	80063d4 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80063ec:	683a      	ldr	r2, [r7, #0]
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d901      	bls.n	80063f8 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80063f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d11f      	bne.n	8006442 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8006402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006404:	2b00      	cmp	r3, #0
 8006406:	d01c      	beq.n	8006442 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8006408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800640a:	f003 0302 	and.w	r3, r3, #2
 800640e:	2b00      	cmp	r3, #0
 8006410:	d005      	beq.n	800641e <_PrintUnsigned+0x66>
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d102      	bne.n	800641e <_PrintUnsigned+0x66>
        c = '0';
 8006418:	2330      	movs	r3, #48	; 0x30
 800641a:	76fb      	strb	r3, [r7, #27]
 800641c:	e001      	b.n	8006422 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800641e:	2320      	movs	r3, #32
 8006420:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006422:	e007      	b.n	8006434 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8006424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006426:	3b01      	subs	r3, #1
 8006428:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800642a:	7efb      	ldrb	r3, [r7, #27]
 800642c:	4619      	mov	r1, r3
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f7ff ff46 	bl	80062c0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006436:	2b00      	cmp	r3, #0
 8006438:	d003      	beq.n	8006442 <_PrintUnsigned+0x8a>
 800643a:	69fa      	ldr	r2, [r7, #28]
 800643c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643e:	429a      	cmp	r2, r3
 8006440:	d3f0      	bcc.n	8006424 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d903      	bls.n	8006450 <_PrintUnsigned+0x98>
      NumDigits--;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	3b01      	subs	r3, #1
 800644c:	603b      	str	r3, [r7, #0]
 800644e:	e009      	b.n	8006464 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006454:	fbb2 f3f3 	udiv	r3, r2, r3
 8006458:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	429a      	cmp	r2, r3
 8006460:	d200      	bcs.n	8006464 <_PrintUnsigned+0xac>
        break;
 8006462:	e005      	b.n	8006470 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8006464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	fb02 f303 	mul.w	r3, r2, r3
 800646c:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800646e:	e7e8      	b.n	8006442 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006474:	fbb2 f3f3 	udiv	r3, r2, r3
 8006478:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800647e:	fb02 f303 	mul.w	r3, r2, r3
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8006488:	4a15      	ldr	r2, [pc, #84]	; (80064e0 <_PrintUnsigned+0x128>)
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	4413      	add	r3, r2
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	4619      	mov	r1, r3
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f7ff ff14 	bl	80062c0 <_StoreChar>
    Digit /= Base;
 8006498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a0:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80064a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1e3      	bne.n	8006470 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80064a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d011      	beq.n	80064d6 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80064b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00e      	beq.n	80064d6 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80064b8:	e006      	b.n	80064c8 <_PrintUnsigned+0x110>
        FieldWidth--;
 80064ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064bc:	3b01      	subs	r3, #1
 80064be:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80064c0:	2120      	movs	r1, #32
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f7ff fefc 	bl	80062c0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80064c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d003      	beq.n	80064d6 <_PrintUnsigned+0x11e>
 80064ce:	69fa      	ldr	r2, [r7, #28]
 80064d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d3f1      	bcc.n	80064ba <_PrintUnsigned+0x102>
      }
    }
  }
}
 80064d6:	bf00      	nop
 80064d8:	3728      	adds	r7, #40	; 0x28
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	08007cf8 	.word	0x08007cf8

080064e4 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b088      	sub	sp, #32
 80064e8:	af02      	add	r7, sp, #8
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	607a      	str	r2, [r7, #4]
 80064f0:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	bfb8      	it	lt
 80064f8:	425b      	neglt	r3, r3
 80064fa:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80064fc:	2301      	movs	r3, #1
 80064fe:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006500:	e007      	b.n	8006512 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	fb92 f3f3 	sdiv	r3, r2, r3
 800650a:	613b      	str	r3, [r7, #16]
    Width++;
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	3301      	adds	r3, #1
 8006510:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	693a      	ldr	r2, [r7, #16]
 8006516:	429a      	cmp	r2, r3
 8006518:	daf3      	bge.n	8006502 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	429a      	cmp	r2, r3
 8006520:	d901      	bls.n	8006526 <_PrintInt+0x42>
    Width = NumDigits;
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8006526:	6a3b      	ldr	r3, [r7, #32]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00a      	beq.n	8006542 <_PrintInt+0x5e>
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	2b00      	cmp	r3, #0
 8006530:	db04      	blt.n	800653c <_PrintInt+0x58>
 8006532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006534:	f003 0304 	and.w	r3, r3, #4
 8006538:	2b00      	cmp	r3, #0
 800653a:	d002      	beq.n	8006542 <_PrintInt+0x5e>
    FieldWidth--;
 800653c:	6a3b      	ldr	r3, [r7, #32]
 800653e:	3b01      	subs	r3, #1
 8006540:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8006542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006544:	f003 0302 	and.w	r3, r3, #2
 8006548:	2b00      	cmp	r3, #0
 800654a:	d002      	beq.n	8006552 <_PrintInt+0x6e>
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d016      	beq.n	8006580 <_PrintInt+0x9c>
 8006552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006554:	f003 0301 	and.w	r3, r3, #1
 8006558:	2b00      	cmp	r3, #0
 800655a:	d111      	bne.n	8006580 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 800655c:	6a3b      	ldr	r3, [r7, #32]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00e      	beq.n	8006580 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006562:	e006      	b.n	8006572 <_PrintInt+0x8e>
        FieldWidth--;
 8006564:	6a3b      	ldr	r3, [r7, #32]
 8006566:	3b01      	subs	r3, #1
 8006568:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800656a:	2120      	movs	r1, #32
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f7ff fea7 	bl	80062c0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006572:	6a3b      	ldr	r3, [r7, #32]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d003      	beq.n	8006580 <_PrintInt+0x9c>
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	6a3b      	ldr	r3, [r7, #32]
 800657c:	429a      	cmp	r2, r3
 800657e:	d3f1      	bcc.n	8006564 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	2b00      	cmp	r3, #0
 8006584:	da07      	bge.n	8006596 <_PrintInt+0xb2>
    v = -v;
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	425b      	negs	r3, r3
 800658a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 800658c:	212d      	movs	r1, #45	; 0x2d
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	f7ff fe96 	bl	80062c0 <_StoreChar>
 8006594:	e008      	b.n	80065a8 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8006596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006598:	f003 0304 	and.w	r3, r3, #4
 800659c:	2b00      	cmp	r3, #0
 800659e:	d003      	beq.n	80065a8 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80065a0:	212b      	movs	r1, #43	; 0x2b
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f7ff fe8c 	bl	80062c0 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d019      	beq.n	80065e6 <_PrintInt+0x102>
 80065b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b4:	f003 0301 	and.w	r3, r3, #1
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d114      	bne.n	80065e6 <_PrintInt+0x102>
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d111      	bne.n	80065e6 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80065c2:	6a3b      	ldr	r3, [r7, #32]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00e      	beq.n	80065e6 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80065c8:	e006      	b.n	80065d8 <_PrintInt+0xf4>
        FieldWidth--;
 80065ca:	6a3b      	ldr	r3, [r7, #32]
 80065cc:	3b01      	subs	r3, #1
 80065ce:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80065d0:	2130      	movs	r1, #48	; 0x30
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f7ff fe74 	bl	80062c0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d003      	beq.n	80065e6 <_PrintInt+0x102>
 80065de:	697a      	ldr	r2, [r7, #20]
 80065e0:	6a3b      	ldr	r3, [r7, #32]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d3f1      	bcc.n	80065ca <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80065e6:	68b9      	ldr	r1, [r7, #8]
 80065e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ea:	9301      	str	r3, [sp, #4]
 80065ec:	6a3b      	ldr	r3, [r7, #32]
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f7ff fedf 	bl	80063b8 <_PrintUnsigned>
}
 80065fa:	bf00      	nop
 80065fc:	3718      	adds	r7, #24
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
	...

08006604 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8006604:	b580      	push	{r7, lr}
 8006606:	b098      	sub	sp, #96	; 0x60
 8006608:	af02      	add	r7, sp, #8
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006610:	f3ef 8311 	mrs	r3, BASEPRI
 8006614:	f04f 0120 	mov.w	r1, #32
 8006618:	f381 8811 	msr	BASEPRI, r1
 800661c:	633b      	str	r3, [r7, #48]	; 0x30
 800661e:	48b7      	ldr	r0, [pc, #732]	; (80068fc <_VPrintTarget+0x2f8>)
 8006620:	f7ff fc73 	bl	8005f0a <_PreparePacket>
 8006624:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8006626:	4bb5      	ldr	r3, [pc, #724]	; (80068fc <_VPrintTarget+0x2f8>)
 8006628:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800662a:	2300      	movs	r3, #0
 800662c:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 800662e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006630:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	3301      	adds	r3, #1
 8006636:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	3301      	adds	r3, #1
 8006648:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800664a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800664e:	2b00      	cmp	r3, #0
 8006650:	f000 8183 	beq.w	800695a <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8006654:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006658:	2b25      	cmp	r3, #37	; 0x25
 800665a:	f040 8170 	bne.w	800693e <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800665e:	2300      	movs	r3, #0
 8006660:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8006662:	2301      	movs	r3, #1
 8006664:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 800666e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006672:	3b23      	subs	r3, #35	; 0x23
 8006674:	2b0d      	cmp	r3, #13
 8006676:	d83f      	bhi.n	80066f8 <_VPrintTarget+0xf4>
 8006678:	a201      	add	r2, pc, #4	; (adr r2, 8006680 <_VPrintTarget+0x7c>)
 800667a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800667e:	bf00      	nop
 8006680:	080066e9 	.word	0x080066e9
 8006684:	080066f9 	.word	0x080066f9
 8006688:	080066f9 	.word	0x080066f9
 800668c:	080066f9 	.word	0x080066f9
 8006690:	080066f9 	.word	0x080066f9
 8006694:	080066f9 	.word	0x080066f9
 8006698:	080066f9 	.word	0x080066f9
 800669c:	080066f9 	.word	0x080066f9
 80066a0:	080066d9 	.word	0x080066d9
 80066a4:	080066f9 	.word	0x080066f9
 80066a8:	080066b9 	.word	0x080066b9
 80066ac:	080066f9 	.word	0x080066f9
 80066b0:	080066f9 	.word	0x080066f9
 80066b4:	080066c9 	.word	0x080066c9
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80066b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066ba:	f043 0301 	orr.w	r3, r3, #1
 80066be:	64bb      	str	r3, [r7, #72]	; 0x48
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	3301      	adds	r3, #1
 80066c4:	60fb      	str	r3, [r7, #12]
 80066c6:	e01a      	b.n	80066fe <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80066c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066ca:	f043 0302 	orr.w	r3, r3, #2
 80066ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	3301      	adds	r3, #1
 80066d4:	60fb      	str	r3, [r7, #12]
 80066d6:	e012      	b.n	80066fe <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80066d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066da:	f043 0304 	orr.w	r3, r3, #4
 80066de:	64bb      	str	r3, [r7, #72]	; 0x48
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	3301      	adds	r3, #1
 80066e4:	60fb      	str	r3, [r7, #12]
 80066e6:	e00a      	b.n	80066fe <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80066e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066ea:	f043 0308 	orr.w	r3, r3, #8
 80066ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	3301      	adds	r3, #1
 80066f4:	60fb      	str	r3, [r7, #12]
 80066f6:	e002      	b.n	80066fe <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80066f8:	2300      	movs	r3, #0
 80066fa:	653b      	str	r3, [r7, #80]	; 0x50
 80066fc:	bf00      	nop
        }
      } while (v);
 80066fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1b0      	bne.n	8006666 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8006704:	2300      	movs	r3, #0
 8006706:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8006710:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006714:	2b2f      	cmp	r3, #47	; 0x2f
 8006716:	d912      	bls.n	800673e <_VPrintTarget+0x13a>
 8006718:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800671c:	2b39      	cmp	r3, #57	; 0x39
 800671e:	d80e      	bhi.n	800673e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	3301      	adds	r3, #1
 8006724:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8006726:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006728:	4613      	mov	r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4413      	add	r3, r2
 800672e:	005b      	lsls	r3, r3, #1
 8006730:	461a      	mov	r2, r3
 8006732:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006736:	4413      	add	r3, r2
 8006738:	3b30      	subs	r3, #48	; 0x30
 800673a:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 800673c:	e7e4      	b.n	8006708 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800673e:	2300      	movs	r3, #0
 8006740:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800674a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800674e:	2b2e      	cmp	r3, #46	; 0x2e
 8006750:	d11d      	bne.n	800678e <_VPrintTarget+0x18a>
        sFormat++;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	3301      	adds	r3, #1
 8006756:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8006760:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006764:	2b2f      	cmp	r3, #47	; 0x2f
 8006766:	d912      	bls.n	800678e <_VPrintTarget+0x18a>
 8006768:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800676c:	2b39      	cmp	r3, #57	; 0x39
 800676e:	d80e      	bhi.n	800678e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	3301      	adds	r3, #1
 8006774:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8006776:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006778:	4613      	mov	r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	4413      	add	r3, r2
 800677e:	005b      	lsls	r3, r3, #1
 8006780:	461a      	mov	r2, r3
 8006782:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006786:	4413      	add	r3, r2
 8006788:	3b30      	subs	r3, #48	; 0x30
 800678a:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 800678c:	e7e4      	b.n	8006758 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8006796:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800679a:	2b6c      	cmp	r3, #108	; 0x6c
 800679c:	d003      	beq.n	80067a6 <_VPrintTarget+0x1a2>
 800679e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067a2:	2b68      	cmp	r3, #104	; 0x68
 80067a4:	d107      	bne.n	80067b6 <_VPrintTarget+0x1b2>
          c = *sFormat;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	3301      	adds	r3, #1
 80067b2:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80067b4:	e7ef      	b.n	8006796 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80067b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067ba:	2b25      	cmp	r3, #37	; 0x25
 80067bc:	f000 80b3 	beq.w	8006926 <_VPrintTarget+0x322>
 80067c0:	2b25      	cmp	r3, #37	; 0x25
 80067c2:	f2c0 80b7 	blt.w	8006934 <_VPrintTarget+0x330>
 80067c6:	2b78      	cmp	r3, #120	; 0x78
 80067c8:	f300 80b4 	bgt.w	8006934 <_VPrintTarget+0x330>
 80067cc:	2b58      	cmp	r3, #88	; 0x58
 80067ce:	f2c0 80b1 	blt.w	8006934 <_VPrintTarget+0x330>
 80067d2:	3b58      	subs	r3, #88	; 0x58
 80067d4:	2b20      	cmp	r3, #32
 80067d6:	f200 80ad 	bhi.w	8006934 <_VPrintTarget+0x330>
 80067da:	a201      	add	r2, pc, #4	; (adr r2, 80067e0 <_VPrintTarget+0x1dc>)
 80067dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e0:	080068d7 	.word	0x080068d7
 80067e4:	08006935 	.word	0x08006935
 80067e8:	08006935 	.word	0x08006935
 80067ec:	08006935 	.word	0x08006935
 80067f0:	08006935 	.word	0x08006935
 80067f4:	08006935 	.word	0x08006935
 80067f8:	08006935 	.word	0x08006935
 80067fc:	08006935 	.word	0x08006935
 8006800:	08006935 	.word	0x08006935
 8006804:	08006935 	.word	0x08006935
 8006808:	08006935 	.word	0x08006935
 800680c:	08006865 	.word	0x08006865
 8006810:	0800688b 	.word	0x0800688b
 8006814:	08006935 	.word	0x08006935
 8006818:	08006935 	.word	0x08006935
 800681c:	08006935 	.word	0x08006935
 8006820:	08006935 	.word	0x08006935
 8006824:	08006935 	.word	0x08006935
 8006828:	08006935 	.word	0x08006935
 800682c:	08006935 	.word	0x08006935
 8006830:	08006935 	.word	0x08006935
 8006834:	08006935 	.word	0x08006935
 8006838:	08006935 	.word	0x08006935
 800683c:	08006935 	.word	0x08006935
 8006840:	08006901 	.word	0x08006901
 8006844:	08006935 	.word	0x08006935
 8006848:	08006935 	.word	0x08006935
 800684c:	08006935 	.word	0x08006935
 8006850:	08006935 	.word	0x08006935
 8006854:	080068b1 	.word	0x080068b1
 8006858:	08006935 	.word	0x08006935
 800685c:	08006935 	.word	0x08006935
 8006860:	080068d7 	.word	0x080068d7
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	1d19      	adds	r1, r3, #4
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	6011      	str	r1, [r2, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8006872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006874:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8006878:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800687c:	f107 0314 	add.w	r3, r7, #20
 8006880:	4611      	mov	r1, r2
 8006882:	4618      	mov	r0, r3
 8006884:	f7ff fd1c 	bl	80062c0 <_StoreChar>
        break;
 8006888:	e055      	b.n	8006936 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	1d19      	adds	r1, r3, #4
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	6011      	str	r1, [r2, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006898:	f107 0014 	add.w	r0, r7, #20
 800689c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800689e:	9301      	str	r3, [sp, #4]
 80068a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068a6:	220a      	movs	r2, #10
 80068a8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80068aa:	f7ff fe1b 	bl	80064e4 <_PrintInt>
        break;
 80068ae:	e042      	b.n	8006936 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	1d19      	adds	r1, r3, #4
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	6011      	str	r1, [r2, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80068be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80068c0:	f107 0014 	add.w	r0, r7, #20
 80068c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068c6:	9301      	str	r3, [sp, #4]
 80068c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068ca:	9300      	str	r3, [sp, #0]
 80068cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068ce:	220a      	movs	r2, #10
 80068d0:	f7ff fd72 	bl	80063b8 <_PrintUnsigned>
        break;
 80068d4:	e02f      	b.n	8006936 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	1d19      	adds	r1, r3, #4
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	6011      	str	r1, [r2, #0]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80068e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80068e6:	f107 0014 	add.w	r0, r7, #20
 80068ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068ec:	9301      	str	r3, [sp, #4]
 80068ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068f4:	2210      	movs	r2, #16
 80068f6:	f7ff fd5f 	bl	80063b8 <_PrintUnsigned>
        break;
 80068fa:	e01c      	b.n	8006936 <_VPrintTarget+0x332>
 80068fc:	2001429c 	.word	0x2001429c
      case 'p':
        v = va_arg(*pParamList, int);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	1d19      	adds	r1, r3, #4
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	6011      	str	r1, [r2, #0]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 800690e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006910:	f107 0014 	add.w	r0, r7, #20
 8006914:	2300      	movs	r3, #0
 8006916:	9301      	str	r3, [sp, #4]
 8006918:	2308      	movs	r3, #8
 800691a:	9300      	str	r3, [sp, #0]
 800691c:	2308      	movs	r3, #8
 800691e:	2210      	movs	r2, #16
 8006920:	f7ff fd4a 	bl	80063b8 <_PrintUnsigned>
        break;
 8006924:	e007      	b.n	8006936 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006926:	f107 0314 	add.w	r3, r7, #20
 800692a:	2125      	movs	r1, #37	; 0x25
 800692c:	4618      	mov	r0, r3
 800692e:	f7ff fcc7 	bl	80062c0 <_StoreChar>
        break;
 8006932:	e000      	b.n	8006936 <_VPrintTarget+0x332>
      default:
        break;
 8006934:	bf00      	nop
      }
      sFormat++;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	3301      	adds	r3, #1
 800693a:	60fb      	str	r3, [r7, #12]
 800693c:	e007      	b.n	800694e <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 800693e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006942:	f107 0314 	add.w	r3, r7, #20
 8006946:	4611      	mov	r1, r2
 8006948:	4618      	mov	r0, r3
 800694a:	f7ff fcb9 	bl	80062c0 <_StoreChar>
    }
  } while (*sFormat);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	f47f ae72 	bne.w	800663c <_VPrintTarget+0x38>
 8006958:	e000      	b.n	800695c <_VPrintTarget+0x358>
      break;
 800695a:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800695c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695e:	2b00      	cmp	r3, #0
 8006960:	d041      	beq.n	80069e6 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8006962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	b2d2      	uxtb	r2, r2
 8006968:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	643b      	str	r3, [r7, #64]	; 0x40
 800696e:	6a3b      	ldr	r3, [r7, #32]
 8006970:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006972:	e00b      	b.n	800698c <_VPrintTarget+0x388>
 8006974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006976:	b2da      	uxtb	r2, r3
 8006978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800697a:	1c59      	adds	r1, r3, #1
 800697c:	6439      	str	r1, [r7, #64]	; 0x40
 800697e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006982:	b2d2      	uxtb	r2, r2
 8006984:	701a      	strb	r2, [r3, #0]
 8006986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006988:	09db      	lsrs	r3, r3, #7
 800698a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800698c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800698e:	2b7f      	cmp	r3, #127	; 0x7f
 8006990:	d8f0      	bhi.n	8006974 <_VPrintTarget+0x370>
 8006992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006994:	1c5a      	adds	r2, r3, #1
 8006996:	643a      	str	r2, [r7, #64]	; 0x40
 8006998:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800699a:	b2d2      	uxtb	r2, r2
 800699c:	701a      	strb	r2, [r3, #0]
 800699e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069a0:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80069a6:	2300      	movs	r3, #0
 80069a8:	637b      	str	r3, [r7, #52]	; 0x34
 80069aa:	e00b      	b.n	80069c4 <_VPrintTarget+0x3c0>
 80069ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b2:	1c59      	adds	r1, r3, #1
 80069b4:	63b9      	str	r1, [r7, #56]	; 0x38
 80069b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069ba:	b2d2      	uxtb	r2, r2
 80069bc:	701a      	strb	r2, [r3, #0]
 80069be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c0:	09db      	lsrs	r3, r3, #7
 80069c2:	637b      	str	r3, [r7, #52]	; 0x34
 80069c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c6:	2b7f      	cmp	r3, #127	; 0x7f
 80069c8:	d8f0      	bhi.n	80069ac <_VPrintTarget+0x3a8>
 80069ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069cc:	1c5a      	adds	r2, r3, #1
 80069ce:	63ba      	str	r2, [r7, #56]	; 0x38
 80069d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069d2:	b2d2      	uxtb	r2, r2
 80069d4:	701a      	strb	r2, [r3, #0]
 80069d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d8:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	69b9      	ldr	r1, [r7, #24]
 80069de:	221a      	movs	r2, #26
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7ff fb85 	bl	80060f0 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80069e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e8:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80069ec:	bf00      	nop
 80069ee:	3758      	adds	r7, #88	; 0x58
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b086      	sub	sp, #24
 80069f8:	af02      	add	r7, sp, #8
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]
 8006a00:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006a02:	2300      	movs	r3, #0
 8006a04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006a08:	4917      	ldr	r1, [pc, #92]	; (8006a68 <SEGGER_SYSVIEW_Init+0x74>)
 8006a0a:	4818      	ldr	r0, [pc, #96]	; (8006a6c <SEGGER_SYSVIEW_Init+0x78>)
 8006a0c:	f7ff f93c 	bl	8005c88 <SEGGER_RTT_AllocUpBuffer>
 8006a10:	4603      	mov	r3, r0
 8006a12:	b2da      	uxtb	r2, r3
 8006a14:	4b16      	ldr	r3, [pc, #88]	; (8006a70 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a16:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006a18:	4b15      	ldr	r3, [pc, #84]	; (8006a70 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a1a:	785a      	ldrb	r2, [r3, #1]
 8006a1c:	4b14      	ldr	r3, [pc, #80]	; (8006a70 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a1e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006a20:	4b13      	ldr	r3, [pc, #76]	; (8006a70 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a22:	7e1b      	ldrb	r3, [r3, #24]
 8006a24:	4618      	mov	r0, r3
 8006a26:	2300      	movs	r3, #0
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	2308      	movs	r3, #8
 8006a2c:	4a11      	ldr	r2, [pc, #68]	; (8006a74 <SEGGER_SYSVIEW_Init+0x80>)
 8006a2e:	490f      	ldr	r1, [pc, #60]	; (8006a6c <SEGGER_SYSVIEW_Init+0x78>)
 8006a30:	f7ff f9ae 	bl	8005d90 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006a34:	4b0e      	ldr	r3, [pc, #56]	; (8006a70 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a36:	2200      	movs	r2, #0
 8006a38:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006a3a:	4b0f      	ldr	r3, [pc, #60]	; (8006a78 <SEGGER_SYSVIEW_Init+0x84>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a0c      	ldr	r2, [pc, #48]	; (8006a70 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a40:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006a42:	4a0b      	ldr	r2, [pc, #44]	; (8006a70 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006a48:	4a09      	ldr	r2, [pc, #36]	; (8006a70 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006a4e:	4a08      	ldr	r2, [pc, #32]	; (8006a70 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006a54:	4a06      	ldr	r2, [pc, #24]	; (8006a70 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006a5a:	4b05      	ldr	r3, [pc, #20]	; (8006a70 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006a60:	bf00      	nop
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	20013264 	.word	0x20013264
 8006a6c:	08007c6c 	.word	0x08007c6c
 8006a70:	2001426c 	.word	0x2001426c
 8006a74:	20014264 	.word	0x20014264
 8006a78:	e0001004 	.word	0xe0001004

08006a7c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006a84:	4a04      	ldr	r2, [pc, #16]	; (8006a98 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6113      	str	r3, [r2, #16]
}
 8006a8a:	bf00      	nop
 8006a8c:	370c      	adds	r7, #12
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	2001426c 	.word	0x2001426c

08006a9c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006aa4:	f3ef 8311 	mrs	r3, BASEPRI
 8006aa8:	f04f 0120 	mov.w	r1, #32
 8006aac:	f381 8811 	msr	BASEPRI, r1
 8006ab0:	60fb      	str	r3, [r7, #12]
 8006ab2:	4808      	ldr	r0, [pc, #32]	; (8006ad4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006ab4:	f7ff fa29 	bl	8005f0a <_PreparePacket>
 8006ab8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	68b9      	ldr	r1, [r7, #8]
 8006abe:	68b8      	ldr	r0, [r7, #8]
 8006ac0:	f7ff fb16 	bl	80060f0 <_SendPacket>
  RECORD_END();
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f383 8811 	msr	BASEPRI, r3
}
 8006aca:	bf00      	nop
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	2001429c 	.word	0x2001429c

08006ad8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b088      	sub	sp, #32
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ae2:	f3ef 8311 	mrs	r3, BASEPRI
 8006ae6:	f04f 0120 	mov.w	r1, #32
 8006aea:	f381 8811 	msr	BASEPRI, r1
 8006aee:	617b      	str	r3, [r7, #20]
 8006af0:	4816      	ldr	r0, [pc, #88]	; (8006b4c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006af2:	f7ff fa0a 	bl	8005f0a <_PreparePacket>
 8006af6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	61fb      	str	r3, [r7, #28]
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	61bb      	str	r3, [r7, #24]
 8006b04:	e00b      	b.n	8006b1e <SEGGER_SYSVIEW_RecordU32+0x46>
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	b2da      	uxtb	r2, r3
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	1c59      	adds	r1, r3, #1
 8006b0e:	61f9      	str	r1, [r7, #28]
 8006b10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b14:	b2d2      	uxtb	r2, r2
 8006b16:	701a      	strb	r2, [r3, #0]
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	09db      	lsrs	r3, r3, #7
 8006b1c:	61bb      	str	r3, [r7, #24]
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	2b7f      	cmp	r3, #127	; 0x7f
 8006b22:	d8f0      	bhi.n	8006b06 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	1c5a      	adds	r2, r3, #1
 8006b28:	61fa      	str	r2, [r7, #28]
 8006b2a:	69ba      	ldr	r2, [r7, #24]
 8006b2c:	b2d2      	uxtb	r2, r2
 8006b2e:	701a      	strb	r2, [r3, #0]
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	68f9      	ldr	r1, [r7, #12]
 8006b38:	6938      	ldr	r0, [r7, #16]
 8006b3a:	f7ff fad9 	bl	80060f0 <_SendPacket>
  RECORD_END();
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	f383 8811 	msr	BASEPRI, r3
}
 8006b44:	bf00      	nop
 8006b46:	3720      	adds	r7, #32
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	2001429c 	.word	0x2001429c

08006b50 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b08c      	sub	sp, #48	; 0x30
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b5c:	f3ef 8311 	mrs	r3, BASEPRI
 8006b60:	f04f 0120 	mov.w	r1, #32
 8006b64:	f381 8811 	msr	BASEPRI, r1
 8006b68:	61fb      	str	r3, [r7, #28]
 8006b6a:	4825      	ldr	r0, [pc, #148]	; (8006c00 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006b6c:	f7ff f9cd 	bl	8005f0a <_PreparePacket>
 8006b70:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b7e:	e00b      	b.n	8006b98 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b82:	b2da      	uxtb	r2, r3
 8006b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b86:	1c59      	adds	r1, r3, #1
 8006b88:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006b8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b8e:	b2d2      	uxtb	r2, r2
 8006b90:	701a      	strb	r2, [r3, #0]
 8006b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b94:	09db      	lsrs	r3, r3, #7
 8006b96:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9a:	2b7f      	cmp	r3, #127	; 0x7f
 8006b9c:	d8f0      	bhi.n	8006b80 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba0:	1c5a      	adds	r2, r3, #1
 8006ba2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ba4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ba6:	b2d2      	uxtb	r2, r2
 8006ba8:	701a      	strb	r2, [r3, #0]
 8006baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bac:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	623b      	str	r3, [r7, #32]
 8006bb6:	e00b      	b.n	8006bd0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	b2da      	uxtb	r2, r3
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbe:	1c59      	adds	r1, r3, #1
 8006bc0:	6279      	str	r1, [r7, #36]	; 0x24
 8006bc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bc6:	b2d2      	uxtb	r2, r2
 8006bc8:	701a      	strb	r2, [r3, #0]
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	09db      	lsrs	r3, r3, #7
 8006bce:	623b      	str	r3, [r7, #32]
 8006bd0:	6a3b      	ldr	r3, [r7, #32]
 8006bd2:	2b7f      	cmp	r3, #127	; 0x7f
 8006bd4:	d8f0      	bhi.n	8006bb8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd8:	1c5a      	adds	r2, r3, #1
 8006bda:	627a      	str	r2, [r7, #36]	; 0x24
 8006bdc:	6a3a      	ldr	r2, [r7, #32]
 8006bde:	b2d2      	uxtb	r2, r2
 8006be0:	701a      	strb	r2, [r3, #0]
 8006be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	6979      	ldr	r1, [r7, #20]
 8006bea:	69b8      	ldr	r0, [r7, #24]
 8006bec:	f7ff fa80 	bl	80060f0 <_SendPacket>
  RECORD_END();
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	f383 8811 	msr	BASEPRI, r3
}
 8006bf6:	bf00      	nop
 8006bf8:	3730      	adds	r7, #48	; 0x30
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	2001429c 	.word	0x2001429c

08006c04 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b08e      	sub	sp, #56	; 0x38
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]
 8006c10:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006c12:	f3ef 8311 	mrs	r3, BASEPRI
 8006c16:	f04f 0120 	mov.w	r1, #32
 8006c1a:	f381 8811 	msr	BASEPRI, r1
 8006c1e:	61fb      	str	r3, [r7, #28]
 8006c20:	4832      	ldr	r0, [pc, #200]	; (8006cec <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006c22:	f7ff f972 	bl	8005f0a <_PreparePacket>
 8006c26:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	633b      	str	r3, [r7, #48]	; 0x30
 8006c34:	e00b      	b.n	8006c4e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c38:	b2da      	uxtb	r2, r3
 8006c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c3c:	1c59      	adds	r1, r3, #1
 8006c3e:	6379      	str	r1, [r7, #52]	; 0x34
 8006c40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c44:	b2d2      	uxtb	r2, r2
 8006c46:	701a      	strb	r2, [r3, #0]
 8006c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4a:	09db      	lsrs	r3, r3, #7
 8006c4c:	633b      	str	r3, [r7, #48]	; 0x30
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c50:	2b7f      	cmp	r3, #127	; 0x7f
 8006c52:	d8f0      	bhi.n	8006c36 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c56:	1c5a      	adds	r2, r3, #1
 8006c58:	637a      	str	r2, [r7, #52]	; 0x34
 8006c5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c5c:	b2d2      	uxtb	r2, r2
 8006c5e:	701a      	strb	r2, [r3, #0]
 8006c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c62:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c6c:	e00b      	b.n	8006c86 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c70:	b2da      	uxtb	r2, r3
 8006c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c74:	1c59      	adds	r1, r3, #1
 8006c76:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006c78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c7c:	b2d2      	uxtb	r2, r2
 8006c7e:	701a      	strb	r2, [r3, #0]
 8006c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c82:	09db      	lsrs	r3, r3, #7
 8006c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c88:	2b7f      	cmp	r3, #127	; 0x7f
 8006c8a:	d8f0      	bhi.n	8006c6e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8e:	1c5a      	adds	r2, r3, #1
 8006c90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c94:	b2d2      	uxtb	r2, r2
 8006c96:	701a      	strb	r2, [r3, #0]
 8006c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c9a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	623b      	str	r3, [r7, #32]
 8006ca4:	e00b      	b.n	8006cbe <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006ca6:	6a3b      	ldr	r3, [r7, #32]
 8006ca8:	b2da      	uxtb	r2, r3
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cac:	1c59      	adds	r1, r3, #1
 8006cae:	6279      	str	r1, [r7, #36]	; 0x24
 8006cb0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cb4:	b2d2      	uxtb	r2, r2
 8006cb6:	701a      	strb	r2, [r3, #0]
 8006cb8:	6a3b      	ldr	r3, [r7, #32]
 8006cba:	09db      	lsrs	r3, r3, #7
 8006cbc:	623b      	str	r3, [r7, #32]
 8006cbe:	6a3b      	ldr	r3, [r7, #32]
 8006cc0:	2b7f      	cmp	r3, #127	; 0x7f
 8006cc2:	d8f0      	bhi.n	8006ca6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc6:	1c5a      	adds	r2, r3, #1
 8006cc8:	627a      	str	r2, [r7, #36]	; 0x24
 8006cca:	6a3a      	ldr	r2, [r7, #32]
 8006ccc:	b2d2      	uxtb	r2, r2
 8006cce:	701a      	strb	r2, [r3, #0]
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	6979      	ldr	r1, [r7, #20]
 8006cd8:	69b8      	ldr	r0, [r7, #24]
 8006cda:	f7ff fa09 	bl	80060f0 <_SendPacket>
  RECORD_END();
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	f383 8811 	msr	BASEPRI, r3
}
 8006ce4:	bf00      	nop
 8006ce6:	3738      	adds	r7, #56	; 0x38
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	2001429c 	.word	0x2001429c

08006cf0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b090      	sub	sp, #64	; 0x40
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]
 8006cfc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006cfe:	f3ef 8311 	mrs	r3, BASEPRI
 8006d02:	f04f 0120 	mov.w	r1, #32
 8006d06:	f381 8811 	msr	BASEPRI, r1
 8006d0a:	61fb      	str	r3, [r7, #28]
 8006d0c:	4840      	ldr	r0, [pc, #256]	; (8006e10 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006d0e:	f7ff f8fc 	bl	8005f0a <_PreparePacket>
 8006d12:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d20:	e00b      	b.n	8006d3a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d24:	b2da      	uxtb	r2, r3
 8006d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d28:	1c59      	adds	r1, r3, #1
 8006d2a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006d2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d30:	b2d2      	uxtb	r2, r2
 8006d32:	701a      	strb	r2, [r3, #0]
 8006d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d36:	09db      	lsrs	r3, r3, #7
 8006d38:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3c:	2b7f      	cmp	r3, #127	; 0x7f
 8006d3e:	d8f0      	bhi.n	8006d22 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d42:	1c5a      	adds	r2, r3, #1
 8006d44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006d46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d48:	b2d2      	uxtb	r2, r2
 8006d4a:	701a      	strb	r2, [r3, #0]
 8006d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d4e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	637b      	str	r3, [r7, #52]	; 0x34
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	633b      	str	r3, [r7, #48]	; 0x30
 8006d58:	e00b      	b.n	8006d72 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5c:	b2da      	uxtb	r2, r3
 8006d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d60:	1c59      	adds	r1, r3, #1
 8006d62:	6379      	str	r1, [r7, #52]	; 0x34
 8006d64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d68:	b2d2      	uxtb	r2, r2
 8006d6a:	701a      	strb	r2, [r3, #0]
 8006d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6e:	09db      	lsrs	r3, r3, #7
 8006d70:	633b      	str	r3, [r7, #48]	; 0x30
 8006d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d74:	2b7f      	cmp	r3, #127	; 0x7f
 8006d76:	d8f0      	bhi.n	8006d5a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d7a:	1c5a      	adds	r2, r3, #1
 8006d7c:	637a      	str	r2, [r7, #52]	; 0x34
 8006d7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d80:	b2d2      	uxtb	r2, r2
 8006d82:	701a      	strb	r2, [r3, #0]
 8006d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d86:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d90:	e00b      	b.n	8006daa <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d94:	b2da      	uxtb	r2, r3
 8006d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d98:	1c59      	adds	r1, r3, #1
 8006d9a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006d9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006da0:	b2d2      	uxtb	r2, r2
 8006da2:	701a      	strb	r2, [r3, #0]
 8006da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da6:	09db      	lsrs	r3, r3, #7
 8006da8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dac:	2b7f      	cmp	r3, #127	; 0x7f
 8006dae:	d8f0      	bhi.n	8006d92 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db2:	1c5a      	adds	r2, r3, #1
 8006db4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006db6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006db8:	b2d2      	uxtb	r2, r2
 8006dba:	701a      	strb	r2, [r3, #0]
 8006dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8006dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dc6:	623b      	str	r3, [r7, #32]
 8006dc8:	e00b      	b.n	8006de2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006dca:	6a3b      	ldr	r3, [r7, #32]
 8006dcc:	b2da      	uxtb	r2, r3
 8006dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd0:	1c59      	adds	r1, r3, #1
 8006dd2:	6279      	str	r1, [r7, #36]	; 0x24
 8006dd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dd8:	b2d2      	uxtb	r2, r2
 8006dda:	701a      	strb	r2, [r3, #0]
 8006ddc:	6a3b      	ldr	r3, [r7, #32]
 8006dde:	09db      	lsrs	r3, r3, #7
 8006de0:	623b      	str	r3, [r7, #32]
 8006de2:	6a3b      	ldr	r3, [r7, #32]
 8006de4:	2b7f      	cmp	r3, #127	; 0x7f
 8006de6:	d8f0      	bhi.n	8006dca <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dea:	1c5a      	adds	r2, r3, #1
 8006dec:	627a      	str	r2, [r7, #36]	; 0x24
 8006dee:	6a3a      	ldr	r2, [r7, #32]
 8006df0:	b2d2      	uxtb	r2, r2
 8006df2:	701a      	strb	r2, [r3, #0]
 8006df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	6979      	ldr	r1, [r7, #20]
 8006dfc:	69b8      	ldr	r0, [r7, #24]
 8006dfe:	f7ff f977 	bl	80060f0 <_SendPacket>
  RECORD_END();
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	f383 8811 	msr	BASEPRI, r3
}
 8006e08:	bf00      	nop
 8006e0a:	3740      	adds	r7, #64	; 0x40
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	2001429c 	.word	0x2001429c

08006e14 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b08c      	sub	sp, #48	; 0x30
 8006e18:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006e1a:	4b59      	ldr	r3, [pc, #356]	; (8006f80 <SEGGER_SYSVIEW_Start+0x16c>)
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006e20:	f3ef 8311 	mrs	r3, BASEPRI
 8006e24:	f04f 0120 	mov.w	r1, #32
 8006e28:	f381 8811 	msr	BASEPRI, r1
 8006e2c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006e2e:	4b54      	ldr	r3, [pc, #336]	; (8006f80 <SEGGER_SYSVIEW_Start+0x16c>)
 8006e30:	785b      	ldrb	r3, [r3, #1]
 8006e32:	220a      	movs	r2, #10
 8006e34:	4953      	ldr	r1, [pc, #332]	; (8006f84 <SEGGER_SYSVIEW_Start+0x170>)
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7f9 f9ca 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006e42:	f7fe fbf5 	bl	8005630 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006e46:	200a      	movs	r0, #10
 8006e48:	f7ff fe28 	bl	8006a9c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006e4c:	f3ef 8311 	mrs	r3, BASEPRI
 8006e50:	f04f 0120 	mov.w	r1, #32
 8006e54:	f381 8811 	msr	BASEPRI, r1
 8006e58:	60bb      	str	r3, [r7, #8]
 8006e5a:	484b      	ldr	r0, [pc, #300]	; (8006f88 <SEGGER_SYSVIEW_Start+0x174>)
 8006e5c:	f7ff f855 	bl	8005f0a <_PreparePacket>
 8006e60:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e6a:	4b45      	ldr	r3, [pc, #276]	; (8006f80 <SEGGER_SYSVIEW_Start+0x16c>)
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e70:	e00b      	b.n	8006e8a <SEGGER_SYSVIEW_Start+0x76>
 8006e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e74:	b2da      	uxtb	r2, r3
 8006e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e78:	1c59      	adds	r1, r3, #1
 8006e7a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006e7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e80:	b2d2      	uxtb	r2, r2
 8006e82:	701a      	strb	r2, [r3, #0]
 8006e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e86:	09db      	lsrs	r3, r3, #7
 8006e88:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8c:	2b7f      	cmp	r3, #127	; 0x7f
 8006e8e:	d8f0      	bhi.n	8006e72 <SEGGER_SYSVIEW_Start+0x5e>
 8006e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e92:	1c5a      	adds	r2, r3, #1
 8006e94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e98:	b2d2      	uxtb	r2, r2
 8006e9a:	701a      	strb	r2, [r3, #0]
 8006e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e9e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ea4:	4b36      	ldr	r3, [pc, #216]	; (8006f80 <SEGGER_SYSVIEW_Start+0x16c>)
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	623b      	str	r3, [r7, #32]
 8006eaa:	e00b      	b.n	8006ec4 <SEGGER_SYSVIEW_Start+0xb0>
 8006eac:	6a3b      	ldr	r3, [r7, #32]
 8006eae:	b2da      	uxtb	r2, r3
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb2:	1c59      	adds	r1, r3, #1
 8006eb4:	6279      	str	r1, [r7, #36]	; 0x24
 8006eb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006eba:	b2d2      	uxtb	r2, r2
 8006ebc:	701a      	strb	r2, [r3, #0]
 8006ebe:	6a3b      	ldr	r3, [r7, #32]
 8006ec0:	09db      	lsrs	r3, r3, #7
 8006ec2:	623b      	str	r3, [r7, #32]
 8006ec4:	6a3b      	ldr	r3, [r7, #32]
 8006ec6:	2b7f      	cmp	r3, #127	; 0x7f
 8006ec8:	d8f0      	bhi.n	8006eac <SEGGER_SYSVIEW_Start+0x98>
 8006eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ecc:	1c5a      	adds	r2, r3, #1
 8006ece:	627a      	str	r2, [r7, #36]	; 0x24
 8006ed0:	6a3a      	ldr	r2, [r7, #32]
 8006ed2:	b2d2      	uxtb	r2, r2
 8006ed4:	701a      	strb	r2, [r3, #0]
 8006ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	61fb      	str	r3, [r7, #28]
 8006ede:	4b28      	ldr	r3, [pc, #160]	; (8006f80 <SEGGER_SYSVIEW_Start+0x16c>)
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	61bb      	str	r3, [r7, #24]
 8006ee4:	e00b      	b.n	8006efe <SEGGER_SYSVIEW_Start+0xea>
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	b2da      	uxtb	r2, r3
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	1c59      	adds	r1, r3, #1
 8006eee:	61f9      	str	r1, [r7, #28]
 8006ef0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ef4:	b2d2      	uxtb	r2, r2
 8006ef6:	701a      	strb	r2, [r3, #0]
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	09db      	lsrs	r3, r3, #7
 8006efc:	61bb      	str	r3, [r7, #24]
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	2b7f      	cmp	r3, #127	; 0x7f
 8006f02:	d8f0      	bhi.n	8006ee6 <SEGGER_SYSVIEW_Start+0xd2>
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	1c5a      	adds	r2, r3, #1
 8006f08:	61fa      	str	r2, [r7, #28]
 8006f0a:	69ba      	ldr	r2, [r7, #24]
 8006f0c:	b2d2      	uxtb	r2, r2
 8006f0e:	701a      	strb	r2, [r3, #0]
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	617b      	str	r3, [r7, #20]
 8006f18:	2300      	movs	r3, #0
 8006f1a:	613b      	str	r3, [r7, #16]
 8006f1c:	e00b      	b.n	8006f36 <SEGGER_SYSVIEW_Start+0x122>
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	b2da      	uxtb	r2, r3
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	1c59      	adds	r1, r3, #1
 8006f26:	6179      	str	r1, [r7, #20]
 8006f28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f2c:	b2d2      	uxtb	r2, r2
 8006f2e:	701a      	strb	r2, [r3, #0]
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	09db      	lsrs	r3, r3, #7
 8006f34:	613b      	str	r3, [r7, #16]
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	2b7f      	cmp	r3, #127	; 0x7f
 8006f3a:	d8f0      	bhi.n	8006f1e <SEGGER_SYSVIEW_Start+0x10a>
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	1c5a      	adds	r2, r3, #1
 8006f40:	617a      	str	r2, [r7, #20]
 8006f42:	693a      	ldr	r2, [r7, #16]
 8006f44:	b2d2      	uxtb	r2, r2
 8006f46:	701a      	strb	r2, [r3, #0]
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006f4c:	2218      	movs	r2, #24
 8006f4e:	6839      	ldr	r1, [r7, #0]
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f7ff f8cd 	bl	80060f0 <_SendPacket>
      RECORD_END();
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006f5c:	4b08      	ldr	r3, [pc, #32]	; (8006f80 <SEGGER_SYSVIEW_Start+0x16c>)
 8006f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d002      	beq.n	8006f6a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006f64:	4b06      	ldr	r3, [pc, #24]	; (8006f80 <SEGGER_SYSVIEW_Start+0x16c>)
 8006f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f68:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006f6a:	f000 f9eb 	bl	8007344 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006f6e:	f000 f9b1 	bl	80072d4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006f72:	f000 fc83 	bl	800787c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006f76:	bf00      	nop
 8006f78:	3730      	adds	r7, #48	; 0x30
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	2001426c 	.word	0x2001426c
 8006f84:	08007cec 	.word	0x08007cec
 8006f88:	2001429c 	.word	0x2001429c

08006f8c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006f92:	f3ef 8311 	mrs	r3, BASEPRI
 8006f96:	f04f 0120 	mov.w	r1, #32
 8006f9a:	f381 8811 	msr	BASEPRI, r1
 8006f9e:	607b      	str	r3, [r7, #4]
 8006fa0:	480b      	ldr	r0, [pc, #44]	; (8006fd0 <SEGGER_SYSVIEW_Stop+0x44>)
 8006fa2:	f7fe ffb2 	bl	8005f0a <_PreparePacket>
 8006fa6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006fa8:	4b0a      	ldr	r3, [pc, #40]	; (8006fd4 <SEGGER_SYSVIEW_Stop+0x48>)
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d007      	beq.n	8006fc0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006fb0:	220b      	movs	r2, #11
 8006fb2:	6839      	ldr	r1, [r7, #0]
 8006fb4:	6838      	ldr	r0, [r7, #0]
 8006fb6:	f7ff f89b 	bl	80060f0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006fba:	4b06      	ldr	r3, [pc, #24]	; (8006fd4 <SEGGER_SYSVIEW_Stop+0x48>)
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f383 8811 	msr	BASEPRI, r3
}
 8006fc6:	bf00      	nop
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	2001429c 	.word	0x2001429c
 8006fd4:	2001426c 	.word	0x2001426c

08006fd8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b08c      	sub	sp, #48	; 0x30
 8006fdc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006fde:	f3ef 8311 	mrs	r3, BASEPRI
 8006fe2:	f04f 0120 	mov.w	r1, #32
 8006fe6:	f381 8811 	msr	BASEPRI, r1
 8006fea:	60fb      	str	r3, [r7, #12]
 8006fec:	4845      	ldr	r0, [pc, #276]	; (8007104 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006fee:	f7fe ff8c 	bl	8005f0a <_PreparePacket>
 8006ff2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ffc:	4b42      	ldr	r3, [pc, #264]	; (8007108 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	62bb      	str	r3, [r7, #40]	; 0x28
 8007002:	e00b      	b.n	800701c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8007004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007006:	b2da      	uxtb	r2, r3
 8007008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700a:	1c59      	adds	r1, r3, #1
 800700c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800700e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007012:	b2d2      	uxtb	r2, r2
 8007014:	701a      	strb	r2, [r3, #0]
 8007016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007018:	09db      	lsrs	r3, r3, #7
 800701a:	62bb      	str	r3, [r7, #40]	; 0x28
 800701c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701e:	2b7f      	cmp	r3, #127	; 0x7f
 8007020:	d8f0      	bhi.n	8007004 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8007022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007024:	1c5a      	adds	r2, r3, #1
 8007026:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007028:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800702a:	b2d2      	uxtb	r2, r2
 800702c:	701a      	strb	r2, [r3, #0]
 800702e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007030:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	627b      	str	r3, [r7, #36]	; 0x24
 8007036:	4b34      	ldr	r3, [pc, #208]	; (8007108 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	623b      	str	r3, [r7, #32]
 800703c:	e00b      	b.n	8007056 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800703e:	6a3b      	ldr	r3, [r7, #32]
 8007040:	b2da      	uxtb	r2, r3
 8007042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007044:	1c59      	adds	r1, r3, #1
 8007046:	6279      	str	r1, [r7, #36]	; 0x24
 8007048:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800704c:	b2d2      	uxtb	r2, r2
 800704e:	701a      	strb	r2, [r3, #0]
 8007050:	6a3b      	ldr	r3, [r7, #32]
 8007052:	09db      	lsrs	r3, r3, #7
 8007054:	623b      	str	r3, [r7, #32]
 8007056:	6a3b      	ldr	r3, [r7, #32]
 8007058:	2b7f      	cmp	r3, #127	; 0x7f
 800705a:	d8f0      	bhi.n	800703e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800705c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705e:	1c5a      	adds	r2, r3, #1
 8007060:	627a      	str	r2, [r7, #36]	; 0x24
 8007062:	6a3a      	ldr	r2, [r7, #32]
 8007064:	b2d2      	uxtb	r2, r2
 8007066:	701a      	strb	r2, [r3, #0]
 8007068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	61fb      	str	r3, [r7, #28]
 8007070:	4b25      	ldr	r3, [pc, #148]	; (8007108 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	61bb      	str	r3, [r7, #24]
 8007076:	e00b      	b.n	8007090 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	b2da      	uxtb	r2, r3
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	1c59      	adds	r1, r3, #1
 8007080:	61f9      	str	r1, [r7, #28]
 8007082:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007086:	b2d2      	uxtb	r2, r2
 8007088:	701a      	strb	r2, [r3, #0]
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	09db      	lsrs	r3, r3, #7
 800708e:	61bb      	str	r3, [r7, #24]
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	2b7f      	cmp	r3, #127	; 0x7f
 8007094:	d8f0      	bhi.n	8007078 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	1c5a      	adds	r2, r3, #1
 800709a:	61fa      	str	r2, [r7, #28]
 800709c:	69ba      	ldr	r2, [r7, #24]
 800709e:	b2d2      	uxtb	r2, r2
 80070a0:	701a      	strb	r2, [r3, #0]
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	617b      	str	r3, [r7, #20]
 80070aa:	2300      	movs	r3, #0
 80070ac:	613b      	str	r3, [r7, #16]
 80070ae:	e00b      	b.n	80070c8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	b2da      	uxtb	r2, r3
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	1c59      	adds	r1, r3, #1
 80070b8:	6179      	str	r1, [r7, #20]
 80070ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070be:	b2d2      	uxtb	r2, r2
 80070c0:	701a      	strb	r2, [r3, #0]
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	09db      	lsrs	r3, r3, #7
 80070c6:	613b      	str	r3, [r7, #16]
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	2b7f      	cmp	r3, #127	; 0x7f
 80070cc:	d8f0      	bhi.n	80070b0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	1c5a      	adds	r2, r3, #1
 80070d2:	617a      	str	r2, [r7, #20]
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	b2d2      	uxtb	r2, r2
 80070d8:	701a      	strb	r2, [r3, #0]
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80070de:	2218      	movs	r2, #24
 80070e0:	6879      	ldr	r1, [r7, #4]
 80070e2:	68b8      	ldr	r0, [r7, #8]
 80070e4:	f7ff f804 	bl	80060f0 <_SendPacket>
  RECORD_END();
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80070ee:	4b06      	ldr	r3, [pc, #24]	; (8007108 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80070f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d002      	beq.n	80070fc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80070f6:	4b04      	ldr	r3, [pc, #16]	; (8007108 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80070f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fa:	4798      	blx	r3
  }
}
 80070fc:	bf00      	nop
 80070fe:	3730      	adds	r7, #48	; 0x30
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	2001429c 	.word	0x2001429c
 8007108:	2001426c 	.word	0x2001426c

0800710c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800710c:	b580      	push	{r7, lr}
 800710e:	b092      	sub	sp, #72	; 0x48
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8007114:	f3ef 8311 	mrs	r3, BASEPRI
 8007118:	f04f 0120 	mov.w	r1, #32
 800711c:	f381 8811 	msr	BASEPRI, r1
 8007120:	617b      	str	r3, [r7, #20]
 8007122:	486a      	ldr	r0, [pc, #424]	; (80072cc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8007124:	f7fe fef1 	bl	8005f0a <_PreparePacket>
 8007128:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	647b      	str	r3, [r7, #68]	; 0x44
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	4b66      	ldr	r3, [pc, #408]	; (80072d0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	643b      	str	r3, [r7, #64]	; 0x40
 800713e:	e00b      	b.n	8007158 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8007140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007142:	b2da      	uxtb	r2, r3
 8007144:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007146:	1c59      	adds	r1, r3, #1
 8007148:	6479      	str	r1, [r7, #68]	; 0x44
 800714a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800714e:	b2d2      	uxtb	r2, r2
 8007150:	701a      	strb	r2, [r3, #0]
 8007152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007154:	09db      	lsrs	r3, r3, #7
 8007156:	643b      	str	r3, [r7, #64]	; 0x40
 8007158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800715a:	2b7f      	cmp	r3, #127	; 0x7f
 800715c:	d8f0      	bhi.n	8007140 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800715e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007160:	1c5a      	adds	r2, r3, #1
 8007162:	647a      	str	r2, [r7, #68]	; 0x44
 8007164:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007166:	b2d2      	uxtb	r2, r2
 8007168:	701a      	strb	r2, [r3, #0]
 800716a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800716c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	63bb      	str	r3, [r7, #56]	; 0x38
 8007178:	e00b      	b.n	8007192 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800717a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717c:	b2da      	uxtb	r2, r3
 800717e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007180:	1c59      	adds	r1, r3, #1
 8007182:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007184:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007188:	b2d2      	uxtb	r2, r2
 800718a:	701a      	strb	r2, [r3, #0]
 800718c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718e:	09db      	lsrs	r3, r3, #7
 8007190:	63bb      	str	r3, [r7, #56]	; 0x38
 8007192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007194:	2b7f      	cmp	r3, #127	; 0x7f
 8007196:	d8f0      	bhi.n	800717a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8007198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800719a:	1c5a      	adds	r2, r3, #1
 800719c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800719e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071a0:	b2d2      	uxtb	r2, r2
 80071a2:	701a      	strb	r2, [r3, #0]
 80071a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071a6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	2220      	movs	r2, #32
 80071ae:	4619      	mov	r1, r3
 80071b0:	68f8      	ldr	r0, [r7, #12]
 80071b2:	f7fe fe5d 	bl	8005e70 <_EncodeStr>
 80071b6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80071b8:	2209      	movs	r2, #9
 80071ba:	68f9      	ldr	r1, [r7, #12]
 80071bc:	6938      	ldr	r0, [r7, #16]
 80071be:	f7fe ff97 	bl	80060f0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	637b      	str	r3, [r7, #52]	; 0x34
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	4b40      	ldr	r3, [pc, #256]	; (80072d0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	1ad3      	subs	r3, r2, r3
 80071d4:	633b      	str	r3, [r7, #48]	; 0x30
 80071d6:	e00b      	b.n	80071f0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80071d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071de:	1c59      	adds	r1, r3, #1
 80071e0:	6379      	str	r1, [r7, #52]	; 0x34
 80071e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071e6:	b2d2      	uxtb	r2, r2
 80071e8:	701a      	strb	r2, [r3, #0]
 80071ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ec:	09db      	lsrs	r3, r3, #7
 80071ee:	633b      	str	r3, [r7, #48]	; 0x30
 80071f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f2:	2b7f      	cmp	r3, #127	; 0x7f
 80071f4:	d8f0      	bhi.n	80071d8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80071f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071f8:	1c5a      	adds	r2, r3, #1
 80071fa:	637a      	str	r2, [r7, #52]	; 0x34
 80071fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071fe:	b2d2      	uxtb	r2, r2
 8007200:	701a      	strb	r2, [r3, #0]
 8007202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007204:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	62fb      	str	r3, [r7, #44]	; 0x2c
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007210:	e00b      	b.n	800722a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8007212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007214:	b2da      	uxtb	r2, r3
 8007216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007218:	1c59      	adds	r1, r3, #1
 800721a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800721c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007220:	b2d2      	uxtb	r2, r2
 8007222:	701a      	strb	r2, [r3, #0]
 8007224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007226:	09db      	lsrs	r3, r3, #7
 8007228:	62bb      	str	r3, [r7, #40]	; 0x28
 800722a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722c:	2b7f      	cmp	r3, #127	; 0x7f
 800722e:	d8f0      	bhi.n	8007212 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007232:	1c5a      	adds	r2, r3, #1
 8007234:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007238:	b2d2      	uxtb	r2, r2
 800723a:	701a      	strb	r2, [r3, #0]
 800723c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	627b      	str	r3, [r7, #36]	; 0x24
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	691b      	ldr	r3, [r3, #16]
 8007248:	623b      	str	r3, [r7, #32]
 800724a:	e00b      	b.n	8007264 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800724c:	6a3b      	ldr	r3, [r7, #32]
 800724e:	b2da      	uxtb	r2, r3
 8007250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007252:	1c59      	adds	r1, r3, #1
 8007254:	6279      	str	r1, [r7, #36]	; 0x24
 8007256:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800725a:	b2d2      	uxtb	r2, r2
 800725c:	701a      	strb	r2, [r3, #0]
 800725e:	6a3b      	ldr	r3, [r7, #32]
 8007260:	09db      	lsrs	r3, r3, #7
 8007262:	623b      	str	r3, [r7, #32]
 8007264:	6a3b      	ldr	r3, [r7, #32]
 8007266:	2b7f      	cmp	r3, #127	; 0x7f
 8007268:	d8f0      	bhi.n	800724c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800726a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726c:	1c5a      	adds	r2, r3, #1
 800726e:	627a      	str	r2, [r7, #36]	; 0x24
 8007270:	6a3a      	ldr	r2, [r7, #32]
 8007272:	b2d2      	uxtb	r2, r2
 8007274:	701a      	strb	r2, [r3, #0]
 8007276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007278:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	61fb      	str	r3, [r7, #28]
 800727e:	2300      	movs	r3, #0
 8007280:	61bb      	str	r3, [r7, #24]
 8007282:	e00b      	b.n	800729c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	b2da      	uxtb	r2, r3
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	1c59      	adds	r1, r3, #1
 800728c:	61f9      	str	r1, [r7, #28]
 800728e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007292:	b2d2      	uxtb	r2, r2
 8007294:	701a      	strb	r2, [r3, #0]
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	09db      	lsrs	r3, r3, #7
 800729a:	61bb      	str	r3, [r7, #24]
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	2b7f      	cmp	r3, #127	; 0x7f
 80072a0:	d8f0      	bhi.n	8007284 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	1c5a      	adds	r2, r3, #1
 80072a6:	61fa      	str	r2, [r7, #28]
 80072a8:	69ba      	ldr	r2, [r7, #24]
 80072aa:	b2d2      	uxtb	r2, r2
 80072ac:	701a      	strb	r2, [r3, #0]
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80072b2:	2215      	movs	r2, #21
 80072b4:	68f9      	ldr	r1, [r7, #12]
 80072b6:	6938      	ldr	r0, [r7, #16]
 80072b8:	f7fe ff1a 	bl	80060f0 <_SendPacket>
  RECORD_END();
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	f383 8811 	msr	BASEPRI, r3
}
 80072c2:	bf00      	nop
 80072c4:	3748      	adds	r7, #72	; 0x48
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	2001429c 	.word	0x2001429c
 80072d0:	2001426c 	.word	0x2001426c

080072d4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80072d4:	b580      	push	{r7, lr}
 80072d6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80072d8:	4b07      	ldr	r3, [pc, #28]	; (80072f8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80072da:	6a1b      	ldr	r3, [r3, #32]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d008      	beq.n	80072f2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80072e0:	4b05      	ldr	r3, [pc, #20]	; (80072f8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80072e2:	6a1b      	ldr	r3, [r3, #32]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d003      	beq.n	80072f2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80072ea:	4b03      	ldr	r3, [pc, #12]	; (80072f8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	4798      	blx	r3
  }
}
 80072f2:	bf00      	nop
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	2001426c 	.word	0x2001426c

080072fc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b086      	sub	sp, #24
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007304:	f3ef 8311 	mrs	r3, BASEPRI
 8007308:	f04f 0120 	mov.w	r1, #32
 800730c:	f381 8811 	msr	BASEPRI, r1
 8007310:	617b      	str	r3, [r7, #20]
 8007312:	480b      	ldr	r0, [pc, #44]	; (8007340 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007314:	f7fe fdf9 	bl	8005f0a <_PreparePacket>
 8007318:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800731a:	2280      	movs	r2, #128	; 0x80
 800731c:	6879      	ldr	r1, [r7, #4]
 800731e:	6938      	ldr	r0, [r7, #16]
 8007320:	f7fe fda6 	bl	8005e70 <_EncodeStr>
 8007324:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8007326:	220e      	movs	r2, #14
 8007328:	68f9      	ldr	r1, [r7, #12]
 800732a:	6938      	ldr	r0, [r7, #16]
 800732c:	f7fe fee0 	bl	80060f0 <_SendPacket>
  RECORD_END();
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	f383 8811 	msr	BASEPRI, r3
}
 8007336:	bf00      	nop
 8007338:	3718      	adds	r7, #24
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	2001429c 	.word	0x2001429c

08007344 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007344:	b590      	push	{r4, r7, lr}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800734a:	4b15      	ldr	r3, [pc, #84]	; (80073a0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800734c:	6a1b      	ldr	r3, [r3, #32]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d01a      	beq.n	8007388 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8007352:	4b13      	ldr	r3, [pc, #76]	; (80073a0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007354:	6a1b      	ldr	r3, [r3, #32]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d015      	beq.n	8007388 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800735c:	4b10      	ldr	r3, [pc, #64]	; (80073a0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800735e:	6a1b      	ldr	r3, [r3, #32]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4798      	blx	r3
 8007364:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007368:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800736a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800736e:	f04f 0200 	mov.w	r2, #0
 8007372:	f04f 0300 	mov.w	r3, #0
 8007376:	000a      	movs	r2, r1
 8007378:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800737a:	4613      	mov	r3, r2
 800737c:	461a      	mov	r2, r3
 800737e:	4621      	mov	r1, r4
 8007380:	200d      	movs	r0, #13
 8007382:	f7ff fbe5 	bl	8006b50 <SEGGER_SYSVIEW_RecordU32x2>
 8007386:	e006      	b.n	8007396 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8007388:	4b06      	ldr	r3, [pc, #24]	; (80073a4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4619      	mov	r1, r3
 800738e:	200c      	movs	r0, #12
 8007390:	f7ff fba2 	bl	8006ad8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8007394:	bf00      	nop
 8007396:	bf00      	nop
 8007398:	370c      	adds	r7, #12
 800739a:	46bd      	mov	sp, r7
 800739c:	bd90      	pop	{r4, r7, pc}
 800739e:	bf00      	nop
 80073a0:	2001426c 	.word	0x2001426c
 80073a4:	e0001004 	.word	0xe0001004

080073a8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b086      	sub	sp, #24
 80073ac:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80073ae:	f3ef 8311 	mrs	r3, BASEPRI
 80073b2:	f04f 0120 	mov.w	r1, #32
 80073b6:	f381 8811 	msr	BASEPRI, r1
 80073ba:	60fb      	str	r3, [r7, #12]
 80073bc:	4819      	ldr	r0, [pc, #100]	; (8007424 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80073be:	f7fe fda4 	bl	8005f0a <_PreparePacket>
 80073c2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80073c8:	4b17      	ldr	r3, [pc, #92]	; (8007428 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073d0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	617b      	str	r3, [r7, #20]
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	613b      	str	r3, [r7, #16]
 80073da:	e00b      	b.n	80073f4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	b2da      	uxtb	r2, r3
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	1c59      	adds	r1, r3, #1
 80073e4:	6179      	str	r1, [r7, #20]
 80073e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073ea:	b2d2      	uxtb	r2, r2
 80073ec:	701a      	strb	r2, [r3, #0]
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	09db      	lsrs	r3, r3, #7
 80073f2:	613b      	str	r3, [r7, #16]
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	2b7f      	cmp	r3, #127	; 0x7f
 80073f8:	d8f0      	bhi.n	80073dc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	1c5a      	adds	r2, r3, #1
 80073fe:	617a      	str	r2, [r7, #20]
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	b2d2      	uxtb	r2, r2
 8007404:	701a      	strb	r2, [r3, #0]
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800740a:	2202      	movs	r2, #2
 800740c:	6879      	ldr	r1, [r7, #4]
 800740e:	68b8      	ldr	r0, [r7, #8]
 8007410:	f7fe fe6e 	bl	80060f0 <_SendPacket>
  RECORD_END();
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f383 8811 	msr	BASEPRI, r3
}
 800741a:	bf00      	nop
 800741c:	3718      	adds	r7, #24
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	2001429c 	.word	0x2001429c
 8007428:	e000ed04 	.word	0xe000ed04

0800742c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007432:	f3ef 8311 	mrs	r3, BASEPRI
 8007436:	f04f 0120 	mov.w	r1, #32
 800743a:	f381 8811 	msr	BASEPRI, r1
 800743e:	607b      	str	r3, [r7, #4]
 8007440:	4807      	ldr	r0, [pc, #28]	; (8007460 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8007442:	f7fe fd62 	bl	8005f0a <_PreparePacket>
 8007446:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8007448:	2203      	movs	r2, #3
 800744a:	6839      	ldr	r1, [r7, #0]
 800744c:	6838      	ldr	r0, [r7, #0]
 800744e:	f7fe fe4f 	bl	80060f0 <_SendPacket>
  RECORD_END();
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f383 8811 	msr	BASEPRI, r3
}
 8007458:	bf00      	nop
 800745a:	3708      	adds	r7, #8
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	2001429c 	.word	0x2001429c

08007464 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800746a:	f3ef 8311 	mrs	r3, BASEPRI
 800746e:	f04f 0120 	mov.w	r1, #32
 8007472:	f381 8811 	msr	BASEPRI, r1
 8007476:	607b      	str	r3, [r7, #4]
 8007478:	4807      	ldr	r0, [pc, #28]	; (8007498 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800747a:	f7fe fd46 	bl	8005f0a <_PreparePacket>
 800747e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8007480:	2212      	movs	r2, #18
 8007482:	6839      	ldr	r1, [r7, #0]
 8007484:	6838      	ldr	r0, [r7, #0]
 8007486:	f7fe fe33 	bl	80060f0 <_SendPacket>
  RECORD_END();
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f383 8811 	msr	BASEPRI, r3
}
 8007490:	bf00      	nop
 8007492:	3708      	adds	r7, #8
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	2001429c 	.word	0x2001429c

0800749c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80074a2:	f3ef 8311 	mrs	r3, BASEPRI
 80074a6:	f04f 0120 	mov.w	r1, #32
 80074aa:	f381 8811 	msr	BASEPRI, r1
 80074ae:	607b      	str	r3, [r7, #4]
 80074b0:	4807      	ldr	r0, [pc, #28]	; (80074d0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80074b2:	f7fe fd2a 	bl	8005f0a <_PreparePacket>
 80074b6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80074b8:	2211      	movs	r2, #17
 80074ba:	6839      	ldr	r1, [r7, #0]
 80074bc:	6838      	ldr	r0, [r7, #0]
 80074be:	f7fe fe17 	bl	80060f0 <_SendPacket>
  RECORD_END();
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f383 8811 	msr	BASEPRI, r3
}
 80074c8:	bf00      	nop
 80074ca:	3708      	adds	r7, #8
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	2001429c 	.word	0x2001429c

080074d4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b088      	sub	sp, #32
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80074dc:	f3ef 8311 	mrs	r3, BASEPRI
 80074e0:	f04f 0120 	mov.w	r1, #32
 80074e4:	f381 8811 	msr	BASEPRI, r1
 80074e8:	617b      	str	r3, [r7, #20]
 80074ea:	4819      	ldr	r0, [pc, #100]	; (8007550 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80074ec:	f7fe fd0d 	bl	8005f0a <_PreparePacket>
 80074f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80074f6:	4b17      	ldr	r3, [pc, #92]	; (8007554 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	1ad3      	subs	r3, r2, r3
 80074fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	61fb      	str	r3, [r7, #28]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	61bb      	str	r3, [r7, #24]
 8007508:	e00b      	b.n	8007522 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	b2da      	uxtb	r2, r3
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	1c59      	adds	r1, r3, #1
 8007512:	61f9      	str	r1, [r7, #28]
 8007514:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007518:	b2d2      	uxtb	r2, r2
 800751a:	701a      	strb	r2, [r3, #0]
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	09db      	lsrs	r3, r3, #7
 8007520:	61bb      	str	r3, [r7, #24]
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	2b7f      	cmp	r3, #127	; 0x7f
 8007526:	d8f0      	bhi.n	800750a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	1c5a      	adds	r2, r3, #1
 800752c:	61fa      	str	r2, [r7, #28]
 800752e:	69ba      	ldr	r2, [r7, #24]
 8007530:	b2d2      	uxtb	r2, r2
 8007532:	701a      	strb	r2, [r3, #0]
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007538:	2208      	movs	r2, #8
 800753a:	68f9      	ldr	r1, [r7, #12]
 800753c:	6938      	ldr	r0, [r7, #16]
 800753e:	f7fe fdd7 	bl	80060f0 <_SendPacket>
  RECORD_END();
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	f383 8811 	msr	BASEPRI, r3
}
 8007548:	bf00      	nop
 800754a:	3720      	adds	r7, #32
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	2001429c 	.word	0x2001429c
 8007554:	2001426c 	.word	0x2001426c

08007558 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007558:	b580      	push	{r7, lr}
 800755a:	b088      	sub	sp, #32
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007560:	f3ef 8311 	mrs	r3, BASEPRI
 8007564:	f04f 0120 	mov.w	r1, #32
 8007568:	f381 8811 	msr	BASEPRI, r1
 800756c:	617b      	str	r3, [r7, #20]
 800756e:	4819      	ldr	r0, [pc, #100]	; (80075d4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007570:	f7fe fccb 	bl	8005f0a <_PreparePacket>
 8007574:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800757a:	4b17      	ldr	r3, [pc, #92]	; (80075d8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	61fb      	str	r3, [r7, #28]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	61bb      	str	r3, [r7, #24]
 800758c:	e00b      	b.n	80075a6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	b2da      	uxtb	r2, r3
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	1c59      	adds	r1, r3, #1
 8007596:	61f9      	str	r1, [r7, #28]
 8007598:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800759c:	b2d2      	uxtb	r2, r2
 800759e:	701a      	strb	r2, [r3, #0]
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	09db      	lsrs	r3, r3, #7
 80075a4:	61bb      	str	r3, [r7, #24]
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	2b7f      	cmp	r3, #127	; 0x7f
 80075aa:	d8f0      	bhi.n	800758e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	1c5a      	adds	r2, r3, #1
 80075b0:	61fa      	str	r2, [r7, #28]
 80075b2:	69ba      	ldr	r2, [r7, #24]
 80075b4:	b2d2      	uxtb	r2, r2
 80075b6:	701a      	strb	r2, [r3, #0]
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80075bc:	2204      	movs	r2, #4
 80075be:	68f9      	ldr	r1, [r7, #12]
 80075c0:	6938      	ldr	r0, [r7, #16]
 80075c2:	f7fe fd95 	bl	80060f0 <_SendPacket>
  RECORD_END();
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	f383 8811 	msr	BASEPRI, r3
}
 80075cc:	bf00      	nop
 80075ce:	3720      	adds	r7, #32
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	2001429c 	.word	0x2001429c
 80075d8:	2001426c 	.word	0x2001426c

080075dc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80075dc:	b580      	push	{r7, lr}
 80075de:	b088      	sub	sp, #32
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80075e4:	f3ef 8311 	mrs	r3, BASEPRI
 80075e8:	f04f 0120 	mov.w	r1, #32
 80075ec:	f381 8811 	msr	BASEPRI, r1
 80075f0:	617b      	str	r3, [r7, #20]
 80075f2:	4819      	ldr	r0, [pc, #100]	; (8007658 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80075f4:	f7fe fc89 	bl	8005f0a <_PreparePacket>
 80075f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80075fe:	4b17      	ldr	r3, [pc, #92]	; (800765c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	61fb      	str	r3, [r7, #28]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	61bb      	str	r3, [r7, #24]
 8007610:	e00b      	b.n	800762a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	b2da      	uxtb	r2, r3
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	1c59      	adds	r1, r3, #1
 800761a:	61f9      	str	r1, [r7, #28]
 800761c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007620:	b2d2      	uxtb	r2, r2
 8007622:	701a      	strb	r2, [r3, #0]
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	09db      	lsrs	r3, r3, #7
 8007628:	61bb      	str	r3, [r7, #24]
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	2b7f      	cmp	r3, #127	; 0x7f
 800762e:	d8f0      	bhi.n	8007612 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	1c5a      	adds	r2, r3, #1
 8007634:	61fa      	str	r2, [r7, #28]
 8007636:	69ba      	ldr	r2, [r7, #24]
 8007638:	b2d2      	uxtb	r2, r2
 800763a:	701a      	strb	r2, [r3, #0]
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007640:	2206      	movs	r2, #6
 8007642:	68f9      	ldr	r1, [r7, #12]
 8007644:	6938      	ldr	r0, [r7, #16]
 8007646:	f7fe fd53 	bl	80060f0 <_SendPacket>
  RECORD_END();
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	f383 8811 	msr	BASEPRI, r3
}
 8007650:	bf00      	nop
 8007652:	3720      	adds	r7, #32
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	2001429c 	.word	0x2001429c
 800765c:	2001426c 	.word	0x2001426c

08007660 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007660:	b580      	push	{r7, lr}
 8007662:	b08a      	sub	sp, #40	; 0x28
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800766a:	f3ef 8311 	mrs	r3, BASEPRI
 800766e:	f04f 0120 	mov.w	r1, #32
 8007672:	f381 8811 	msr	BASEPRI, r1
 8007676:	617b      	str	r3, [r7, #20]
 8007678:	4827      	ldr	r0, [pc, #156]	; (8007718 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800767a:	f7fe fc46 	bl	8005f0a <_PreparePacket>
 800767e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007684:	4b25      	ldr	r3, [pc, #148]	; (800771c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	1ad3      	subs	r3, r2, r3
 800768c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	627b      	str	r3, [r7, #36]	; 0x24
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	623b      	str	r3, [r7, #32]
 8007696:	e00b      	b.n	80076b0 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007698:	6a3b      	ldr	r3, [r7, #32]
 800769a:	b2da      	uxtb	r2, r3
 800769c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769e:	1c59      	adds	r1, r3, #1
 80076a0:	6279      	str	r1, [r7, #36]	; 0x24
 80076a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076a6:	b2d2      	uxtb	r2, r2
 80076a8:	701a      	strb	r2, [r3, #0]
 80076aa:	6a3b      	ldr	r3, [r7, #32]
 80076ac:	09db      	lsrs	r3, r3, #7
 80076ae:	623b      	str	r3, [r7, #32]
 80076b0:	6a3b      	ldr	r3, [r7, #32]
 80076b2:	2b7f      	cmp	r3, #127	; 0x7f
 80076b4:	d8f0      	bhi.n	8007698 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80076b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b8:	1c5a      	adds	r2, r3, #1
 80076ba:	627a      	str	r2, [r7, #36]	; 0x24
 80076bc:	6a3a      	ldr	r2, [r7, #32]
 80076be:	b2d2      	uxtb	r2, r2
 80076c0:	701a      	strb	r2, [r3, #0]
 80076c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	61fb      	str	r3, [r7, #28]
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	61bb      	str	r3, [r7, #24]
 80076ce:	e00b      	b.n	80076e8 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	b2da      	uxtb	r2, r3
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	1c59      	adds	r1, r3, #1
 80076d8:	61f9      	str	r1, [r7, #28]
 80076da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076de:	b2d2      	uxtb	r2, r2
 80076e0:	701a      	strb	r2, [r3, #0]
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	09db      	lsrs	r3, r3, #7
 80076e6:	61bb      	str	r3, [r7, #24]
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	2b7f      	cmp	r3, #127	; 0x7f
 80076ec:	d8f0      	bhi.n	80076d0 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	1c5a      	adds	r2, r3, #1
 80076f2:	61fa      	str	r2, [r7, #28]
 80076f4:	69ba      	ldr	r2, [r7, #24]
 80076f6:	b2d2      	uxtb	r2, r2
 80076f8:	701a      	strb	r2, [r3, #0]
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80076fe:	2207      	movs	r2, #7
 8007700:	68f9      	ldr	r1, [r7, #12]
 8007702:	6938      	ldr	r0, [r7, #16]
 8007704:	f7fe fcf4 	bl	80060f0 <_SendPacket>
  RECORD_END();
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	f383 8811 	msr	BASEPRI, r3
}
 800770e:	bf00      	nop
 8007710:	3728      	adds	r7, #40	; 0x28
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	2001429c 	.word	0x2001429c
 800771c:	2001426c 	.word	0x2001426c

08007720 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007728:	4b04      	ldr	r3, [pc, #16]	; (800773c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	1ad3      	subs	r3, r2, r3
}
 8007730:	4618      	mov	r0, r3
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr
 800773c:	2001426c 	.word	0x2001426c

08007740 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007740:	b580      	push	{r7, lr}
 8007742:	b08c      	sub	sp, #48	; 0x30
 8007744:	af00      	add	r7, sp, #0
 8007746:	4603      	mov	r3, r0
 8007748:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800774a:	4b3b      	ldr	r3, [pc, #236]	; (8007838 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d06d      	beq.n	800782e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8007752:	4b39      	ldr	r3, [pc, #228]	; (8007838 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007758:	2300      	movs	r3, #0
 800775a:	62bb      	str	r3, [r7, #40]	; 0x28
 800775c:	e008      	b.n	8007770 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800775e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007766:	2b00      	cmp	r3, #0
 8007768:	d007      	beq.n	800777a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800776a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776c:	3301      	adds	r3, #1
 800776e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007770:	79fb      	ldrb	r3, [r7, #7]
 8007772:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007774:	429a      	cmp	r2, r3
 8007776:	d3f2      	bcc.n	800775e <SEGGER_SYSVIEW_SendModule+0x1e>
 8007778:	e000      	b.n	800777c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800777a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800777c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800777e:	2b00      	cmp	r3, #0
 8007780:	d055      	beq.n	800782e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007782:	f3ef 8311 	mrs	r3, BASEPRI
 8007786:	f04f 0120 	mov.w	r1, #32
 800778a:	f381 8811 	msr	BASEPRI, r1
 800778e:	617b      	str	r3, [r7, #20]
 8007790:	482a      	ldr	r0, [pc, #168]	; (800783c <SEGGER_SYSVIEW_SendModule+0xfc>)
 8007792:	f7fe fbba 	bl	8005f0a <_PreparePacket>
 8007796:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	627b      	str	r3, [r7, #36]	; 0x24
 80077a0:	79fb      	ldrb	r3, [r7, #7]
 80077a2:	623b      	str	r3, [r7, #32]
 80077a4:	e00b      	b.n	80077be <SEGGER_SYSVIEW_SendModule+0x7e>
 80077a6:	6a3b      	ldr	r3, [r7, #32]
 80077a8:	b2da      	uxtb	r2, r3
 80077aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ac:	1c59      	adds	r1, r3, #1
 80077ae:	6279      	str	r1, [r7, #36]	; 0x24
 80077b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80077b4:	b2d2      	uxtb	r2, r2
 80077b6:	701a      	strb	r2, [r3, #0]
 80077b8:	6a3b      	ldr	r3, [r7, #32]
 80077ba:	09db      	lsrs	r3, r3, #7
 80077bc:	623b      	str	r3, [r7, #32]
 80077be:	6a3b      	ldr	r3, [r7, #32]
 80077c0:	2b7f      	cmp	r3, #127	; 0x7f
 80077c2:	d8f0      	bhi.n	80077a6 <SEGGER_SYSVIEW_SendModule+0x66>
 80077c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c6:	1c5a      	adds	r2, r3, #1
 80077c8:	627a      	str	r2, [r7, #36]	; 0x24
 80077ca:	6a3a      	ldr	r2, [r7, #32]
 80077cc:	b2d2      	uxtb	r2, r2
 80077ce:	701a      	strb	r2, [r3, #0]
 80077d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	61fb      	str	r3, [r7, #28]
 80077d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	61bb      	str	r3, [r7, #24]
 80077de:	e00b      	b.n	80077f8 <SEGGER_SYSVIEW_SendModule+0xb8>
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	b2da      	uxtb	r2, r3
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	1c59      	adds	r1, r3, #1
 80077e8:	61f9      	str	r1, [r7, #28]
 80077ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80077ee:	b2d2      	uxtb	r2, r2
 80077f0:	701a      	strb	r2, [r3, #0]
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	09db      	lsrs	r3, r3, #7
 80077f6:	61bb      	str	r3, [r7, #24]
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	2b7f      	cmp	r3, #127	; 0x7f
 80077fc:	d8f0      	bhi.n	80077e0 <SEGGER_SYSVIEW_SendModule+0xa0>
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	1c5a      	adds	r2, r3, #1
 8007802:	61fa      	str	r2, [r7, #28]
 8007804:	69ba      	ldr	r2, [r7, #24]
 8007806:	b2d2      	uxtb	r2, r2
 8007808:	701a      	strb	r2, [r3, #0]
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800780e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	2280      	movs	r2, #128	; 0x80
 8007814:	4619      	mov	r1, r3
 8007816:	68f8      	ldr	r0, [r7, #12]
 8007818:	f7fe fb2a 	bl	8005e70 <_EncodeStr>
 800781c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800781e:	2216      	movs	r2, #22
 8007820:	68f9      	ldr	r1, [r7, #12]
 8007822:	6938      	ldr	r0, [r7, #16]
 8007824:	f7fe fc64 	bl	80060f0 <_SendPacket>
      RECORD_END();
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800782e:	bf00      	nop
 8007830:	3730      	adds	r7, #48	; 0x30
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	20014294 	.word	0x20014294
 800783c:	2001429c 	.word	0x2001429c

08007840 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007846:	4b0c      	ldr	r3, [pc, #48]	; (8007878 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00f      	beq.n	800786e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800784e:	4b0a      	ldr	r3, [pc, #40]	; (8007878 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d002      	beq.n	8007862 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1f2      	bne.n	8007854 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800786e:	bf00      	nop
 8007870:	3708      	adds	r7, #8
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	20014294 	.word	0x20014294

0800787c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800787c:	b580      	push	{r7, lr}
 800787e:	b086      	sub	sp, #24
 8007880:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007882:	f3ef 8311 	mrs	r3, BASEPRI
 8007886:	f04f 0120 	mov.w	r1, #32
 800788a:	f381 8811 	msr	BASEPRI, r1
 800788e:	60fb      	str	r3, [r7, #12]
 8007890:	4817      	ldr	r0, [pc, #92]	; (80078f0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007892:	f7fe fb3a 	bl	8005f0a <_PreparePacket>
 8007896:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	617b      	str	r3, [r7, #20]
 80078a0:	4b14      	ldr	r3, [pc, #80]	; (80078f4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	613b      	str	r3, [r7, #16]
 80078a6:	e00b      	b.n	80078c0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	b2da      	uxtb	r2, r3
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	1c59      	adds	r1, r3, #1
 80078b0:	6179      	str	r1, [r7, #20]
 80078b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80078b6:	b2d2      	uxtb	r2, r2
 80078b8:	701a      	strb	r2, [r3, #0]
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	09db      	lsrs	r3, r3, #7
 80078be:	613b      	str	r3, [r7, #16]
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	2b7f      	cmp	r3, #127	; 0x7f
 80078c4:	d8f0      	bhi.n	80078a8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	1c5a      	adds	r2, r3, #1
 80078ca:	617a      	str	r2, [r7, #20]
 80078cc:	693a      	ldr	r2, [r7, #16]
 80078ce:	b2d2      	uxtb	r2, r2
 80078d0:	701a      	strb	r2, [r3, #0]
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80078d6:	221b      	movs	r2, #27
 80078d8:	6879      	ldr	r1, [r7, #4]
 80078da:	68b8      	ldr	r0, [r7, #8]
 80078dc:	f7fe fc08 	bl	80060f0 <_SendPacket>
  RECORD_END();
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f383 8811 	msr	BASEPRI, r3
}
 80078e6:	bf00      	nop
 80078e8:	3718      	adds	r7, #24
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	2001429c 	.word	0x2001429c
 80078f4:	20014298 	.word	0x20014298

080078f8 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80078f8:	b40f      	push	{r0, r1, r2, r3}
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b082      	sub	sp, #8
 80078fe:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007900:	f107 0314 	add.w	r3, r7, #20
 8007904:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8007906:	1d3b      	adds	r3, r7, #4
 8007908:	461a      	mov	r2, r3
 800790a:	2100      	movs	r1, #0
 800790c:	6938      	ldr	r0, [r7, #16]
 800790e:	f7fe fe79 	bl	8006604 <_VPrintTarget>
  va_end(ParamList);
}
 8007912:	bf00      	nop
 8007914:	3708      	adds	r7, #8
 8007916:	46bd      	mov	sp, r7
 8007918:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800791c:	b004      	add	sp, #16
 800791e:	4770      	bx	lr

08007920 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007920:	b580      	push	{r7, lr}
 8007922:	b08a      	sub	sp, #40	; 0x28
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007928:	f3ef 8311 	mrs	r3, BASEPRI
 800792c:	f04f 0120 	mov.w	r1, #32
 8007930:	f381 8811 	msr	BASEPRI, r1
 8007934:	617b      	str	r3, [r7, #20]
 8007936:	4827      	ldr	r0, [pc, #156]	; (80079d4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8007938:	f7fe fae7 	bl	8005f0a <_PreparePacket>
 800793c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800793e:	2280      	movs	r2, #128	; 0x80
 8007940:	6879      	ldr	r1, [r7, #4]
 8007942:	6938      	ldr	r0, [r7, #16]
 8007944:	f7fe fa94 	bl	8005e70 <_EncodeStr>
 8007948:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	627b      	str	r3, [r7, #36]	; 0x24
 800794e:	2301      	movs	r3, #1
 8007950:	623b      	str	r3, [r7, #32]
 8007952:	e00b      	b.n	800796c <SEGGER_SYSVIEW_Warn+0x4c>
 8007954:	6a3b      	ldr	r3, [r7, #32]
 8007956:	b2da      	uxtb	r2, r3
 8007958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795a:	1c59      	adds	r1, r3, #1
 800795c:	6279      	str	r1, [r7, #36]	; 0x24
 800795e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007962:	b2d2      	uxtb	r2, r2
 8007964:	701a      	strb	r2, [r3, #0]
 8007966:	6a3b      	ldr	r3, [r7, #32]
 8007968:	09db      	lsrs	r3, r3, #7
 800796a:	623b      	str	r3, [r7, #32]
 800796c:	6a3b      	ldr	r3, [r7, #32]
 800796e:	2b7f      	cmp	r3, #127	; 0x7f
 8007970:	d8f0      	bhi.n	8007954 <SEGGER_SYSVIEW_Warn+0x34>
 8007972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007974:	1c5a      	adds	r2, r3, #1
 8007976:	627a      	str	r2, [r7, #36]	; 0x24
 8007978:	6a3a      	ldr	r2, [r7, #32]
 800797a:	b2d2      	uxtb	r2, r2
 800797c:	701a      	strb	r2, [r3, #0]
 800797e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007980:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	61fb      	str	r3, [r7, #28]
 8007986:	2300      	movs	r3, #0
 8007988:	61bb      	str	r3, [r7, #24]
 800798a:	e00b      	b.n	80079a4 <SEGGER_SYSVIEW_Warn+0x84>
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	b2da      	uxtb	r2, r3
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	1c59      	adds	r1, r3, #1
 8007994:	61f9      	str	r1, [r7, #28]
 8007996:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800799a:	b2d2      	uxtb	r2, r2
 800799c:	701a      	strb	r2, [r3, #0]
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	09db      	lsrs	r3, r3, #7
 80079a2:	61bb      	str	r3, [r7, #24]
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	2b7f      	cmp	r3, #127	; 0x7f
 80079a8:	d8f0      	bhi.n	800798c <SEGGER_SYSVIEW_Warn+0x6c>
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	1c5a      	adds	r2, r3, #1
 80079ae:	61fa      	str	r2, [r7, #28]
 80079b0:	69ba      	ldr	r2, [r7, #24]
 80079b2:	b2d2      	uxtb	r2, r2
 80079b4:	701a      	strb	r2, [r3, #0]
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80079ba:	221a      	movs	r2, #26
 80079bc:	68f9      	ldr	r1, [r7, #12]
 80079be:	6938      	ldr	r0, [r7, #16]
 80079c0:	f7fe fb96 	bl	80060f0 <_SendPacket>
  RECORD_END();
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	f383 8811 	msr	BASEPRI, r3
}
 80079ca:	bf00      	nop
 80079cc:	3728      	adds	r7, #40	; 0x28
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	2001429c 	.word	0x2001429c

080079d8 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80079d8:	b580      	push	{r7, lr}
 80079da:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80079dc:	4b13      	ldr	r3, [pc, #76]	; (8007a2c <SEGGER_SYSVIEW_IsStarted+0x54>)
 80079de:	7e1b      	ldrb	r3, [r3, #24]
 80079e0:	4619      	mov	r1, r3
 80079e2:	4a13      	ldr	r2, [pc, #76]	; (8007a30 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80079e4:	460b      	mov	r3, r1
 80079e6:	005b      	lsls	r3, r3, #1
 80079e8:	440b      	add	r3, r1
 80079ea:	00db      	lsls	r3, r3, #3
 80079ec:	4413      	add	r3, r2
 80079ee:	336c      	adds	r3, #108	; 0x6c
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	4b0e      	ldr	r3, [pc, #56]	; (8007a2c <SEGGER_SYSVIEW_IsStarted+0x54>)
 80079f4:	7e1b      	ldrb	r3, [r3, #24]
 80079f6:	4618      	mov	r0, r3
 80079f8:	490d      	ldr	r1, [pc, #52]	; (8007a30 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80079fa:	4603      	mov	r3, r0
 80079fc:	005b      	lsls	r3, r3, #1
 80079fe:	4403      	add	r3, r0
 8007a00:	00db      	lsls	r3, r3, #3
 8007a02:	440b      	add	r3, r1
 8007a04:	3370      	adds	r3, #112	; 0x70
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d00b      	beq.n	8007a24 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007a0c:	4b07      	ldr	r3, [pc, #28]	; (8007a2c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007a0e:	789b      	ldrb	r3, [r3, #2]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d107      	bne.n	8007a24 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007a14:	4b05      	ldr	r3, [pc, #20]	; (8007a2c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007a16:	2201      	movs	r2, #1
 8007a18:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007a1a:	f7fe fa83 	bl	8005f24 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007a1e:	4b03      	ldr	r3, [pc, #12]	; (8007a2c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007a20:	2200      	movs	r2, #0
 8007a22:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007a24:	4b01      	ldr	r3, [pc, #4]	; (8007a2c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007a26:	781b      	ldrb	r3, [r3, #0]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	2001426c 	.word	0x2001426c
 8007a30:	2001441c 	.word	0x2001441c

08007a34 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8007a34:	b580      	push	{r7, lr}
 8007a36:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8007a38:	4803      	ldr	r0, [pc, #12]	; (8007a48 <_cbSendSystemDesc+0x14>)
 8007a3a:	f7ff fc5f 	bl	80072fc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8007a3e:	4803      	ldr	r0, [pc, #12]	; (8007a4c <_cbSendSystemDesc+0x18>)
 8007a40:	f7ff fc5c 	bl	80072fc <SEGGER_SYSVIEW_SendSysDesc>
}
 8007a44:	bf00      	nop
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	08007c74 	.word	0x08007c74
 8007a4c:	08007cb8 	.word	0x08007cb8

08007a50 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8007a50:	b580      	push	{r7, lr}
 8007a52:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8007a54:	4b06      	ldr	r3, [pc, #24]	; (8007a70 <SEGGER_SYSVIEW_Conf+0x20>)
 8007a56:	6818      	ldr	r0, [r3, #0]
 8007a58:	4b05      	ldr	r3, [pc, #20]	; (8007a70 <SEGGER_SYSVIEW_Conf+0x20>)
 8007a5a:	6819      	ldr	r1, [r3, #0]
 8007a5c:	4b05      	ldr	r3, [pc, #20]	; (8007a74 <SEGGER_SYSVIEW_Conf+0x24>)
 8007a5e:	4a06      	ldr	r2, [pc, #24]	; (8007a78 <SEGGER_SYSVIEW_Conf+0x28>)
 8007a60:	f7fe ffc8 	bl	80069f4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8007a64:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8007a68:	f7ff f808 	bl	8006a7c <SEGGER_SYSVIEW_SetRAMBase>
}
 8007a6c:	bf00      	nop
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	20000000 	.word	0x20000000
 8007a74:	08007a35 	.word	0x08007a35
 8007a78:	08007ce0 	.word	0x08007ce0

08007a7c <__libc_init_array>:
 8007a7c:	b570      	push	{r4, r5, r6, lr}
 8007a7e:	4d0d      	ldr	r5, [pc, #52]	; (8007ab4 <__libc_init_array+0x38>)
 8007a80:	4c0d      	ldr	r4, [pc, #52]	; (8007ab8 <__libc_init_array+0x3c>)
 8007a82:	1b64      	subs	r4, r4, r5
 8007a84:	10a4      	asrs	r4, r4, #2
 8007a86:	2600      	movs	r6, #0
 8007a88:	42a6      	cmp	r6, r4
 8007a8a:	d109      	bne.n	8007aa0 <__libc_init_array+0x24>
 8007a8c:	4d0b      	ldr	r5, [pc, #44]	; (8007abc <__libc_init_array+0x40>)
 8007a8e:	4c0c      	ldr	r4, [pc, #48]	; (8007ac0 <__libc_init_array+0x44>)
 8007a90:	f000 f83c 	bl	8007b0c <_init>
 8007a94:	1b64      	subs	r4, r4, r5
 8007a96:	10a4      	asrs	r4, r4, #2
 8007a98:	2600      	movs	r6, #0
 8007a9a:	42a6      	cmp	r6, r4
 8007a9c:	d105      	bne.n	8007aaa <__libc_init_array+0x2e>
 8007a9e:	bd70      	pop	{r4, r5, r6, pc}
 8007aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aa4:	4798      	blx	r3
 8007aa6:	3601      	adds	r6, #1
 8007aa8:	e7ee      	b.n	8007a88 <__libc_init_array+0xc>
 8007aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aae:	4798      	blx	r3
 8007ab0:	3601      	adds	r6, #1
 8007ab2:	e7f2      	b.n	8007a9a <__libc_init_array+0x1e>
 8007ab4:	08007d10 	.word	0x08007d10
 8007ab8:	08007d10 	.word	0x08007d10
 8007abc:	08007d10 	.word	0x08007d10
 8007ac0:	08007d14 	.word	0x08007d14

08007ac4 <memcmp>:
 8007ac4:	b530      	push	{r4, r5, lr}
 8007ac6:	3901      	subs	r1, #1
 8007ac8:	2400      	movs	r4, #0
 8007aca:	42a2      	cmp	r2, r4
 8007acc:	d101      	bne.n	8007ad2 <memcmp+0xe>
 8007ace:	2000      	movs	r0, #0
 8007ad0:	e005      	b.n	8007ade <memcmp+0x1a>
 8007ad2:	5d03      	ldrb	r3, [r0, r4]
 8007ad4:	3401      	adds	r4, #1
 8007ad6:	5d0d      	ldrb	r5, [r1, r4]
 8007ad8:	42ab      	cmp	r3, r5
 8007ada:	d0f6      	beq.n	8007aca <memcmp+0x6>
 8007adc:	1b58      	subs	r0, r3, r5
 8007ade:	bd30      	pop	{r4, r5, pc}

08007ae0 <memcpy>:
 8007ae0:	440a      	add	r2, r1
 8007ae2:	4291      	cmp	r1, r2
 8007ae4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ae8:	d100      	bne.n	8007aec <memcpy+0xc>
 8007aea:	4770      	bx	lr
 8007aec:	b510      	push	{r4, lr}
 8007aee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007af2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007af6:	4291      	cmp	r1, r2
 8007af8:	d1f9      	bne.n	8007aee <memcpy+0xe>
 8007afa:	bd10      	pop	{r4, pc}

08007afc <memset>:
 8007afc:	4402      	add	r2, r0
 8007afe:	4603      	mov	r3, r0
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d100      	bne.n	8007b06 <memset+0xa>
 8007b04:	4770      	bx	lr
 8007b06:	f803 1b01 	strb.w	r1, [r3], #1
 8007b0a:	e7f9      	b.n	8007b00 <memset+0x4>

08007b0c <_init>:
 8007b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b0e:	bf00      	nop
 8007b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b12:	bc08      	pop	{r3}
 8007b14:	469e      	mov	lr, r3
 8007b16:	4770      	bx	lr

08007b18 <_fini>:
 8007b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b1a:	bf00      	nop
 8007b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b1e:	bc08      	pop	{r3}
 8007b20:	469e      	mov	lr, r3
 8007b22:	4770      	bx	lr
