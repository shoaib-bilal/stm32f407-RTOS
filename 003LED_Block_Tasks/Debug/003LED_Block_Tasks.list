
003LED_Block_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007324  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  080074b4  080074b4  000174b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007644  08007644  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08007644  08007644  00017644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800764c  0800764c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800764c  0800764c  0001764c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007650  08007650  00017650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08007654  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00014490  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200144ac  200144ac  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a6c6  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003626  00000000  00000000  0003a712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f0  00000000  00000000  0003dd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001258  00000000  00000000  0003f128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023f8d  00000000  00000000  00040380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000160e0  00000000  00000000  0006430d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d84d7  00000000  00000000  0007a3ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001528c4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000052f0  00000000  00000000  00152918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800749c 	.word	0x0800749c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	0800749c 	.word	0x0800749c

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20014404 	.word	0x20014404

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96e 	b.w	8000558 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468c      	mov	ip, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	f040 8083 	bne.w	80003aa <__udivmoddi4+0x116>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4617      	mov	r7, r2
 80002a8:	d947      	bls.n	800033a <__udivmoddi4+0xa6>
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	b142      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	f1c2 0020 	rsb	r0, r2, #32
 80002b4:	fa24 f000 	lsr.w	r0, r4, r0
 80002b8:	4091      	lsls	r1, r2
 80002ba:	4097      	lsls	r7, r2
 80002bc:	ea40 0c01 	orr.w	ip, r0, r1
 80002c0:	4094      	lsls	r4, r2
 80002c2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fbbc f6f8 	udiv	r6, ip, r8
 80002cc:	fa1f fe87 	uxth.w	lr, r7
 80002d0:	fb08 c116 	mls	r1, r8, r6, ip
 80002d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d8:	fb06 f10e 	mul.w	r1, r6, lr
 80002dc:	4299      	cmp	r1, r3
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x60>
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002e6:	f080 8119 	bcs.w	800051c <__udivmoddi4+0x288>
 80002ea:	4299      	cmp	r1, r3
 80002ec:	f240 8116 	bls.w	800051c <__udivmoddi4+0x288>
 80002f0:	3e02      	subs	r6, #2
 80002f2:	443b      	add	r3, r7
 80002f4:	1a5b      	subs	r3, r3, r1
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000300:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000304:	fb00 fe0e 	mul.w	lr, r0, lr
 8000308:	45a6      	cmp	lr, r4
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x8c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	f080 8105 	bcs.w	8000520 <__udivmoddi4+0x28c>
 8000316:	45a6      	cmp	lr, r4
 8000318:	f240 8102 	bls.w	8000520 <__udivmoddi4+0x28c>
 800031c:	3802      	subs	r0, #2
 800031e:	443c      	add	r4, r7
 8000320:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000324:	eba4 040e 	sub.w	r4, r4, lr
 8000328:	2600      	movs	r6, #0
 800032a:	b11d      	cbz	r5, 8000334 <__udivmoddi4+0xa0>
 800032c:	40d4      	lsrs	r4, r2
 800032e:	2300      	movs	r3, #0
 8000330:	e9c5 4300 	strd	r4, r3, [r5]
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xaa>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f282 	clz	r2, r2
 8000342:	2a00      	cmp	r2, #0
 8000344:	d150      	bne.n	80003e8 <__udivmoddi4+0x154>
 8000346:	1bcb      	subs	r3, r1, r7
 8000348:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034c:	fa1f f887 	uxth.w	r8, r7
 8000350:	2601      	movs	r6, #1
 8000352:	fbb3 fcfe 	udiv	ip, r3, lr
 8000356:	0c21      	lsrs	r1, r4, #16
 8000358:	fb0e 331c 	mls	r3, lr, ip, r3
 800035c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000360:	fb08 f30c 	mul.w	r3, r8, ip
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xe4>
 8000368:	1879      	adds	r1, r7, r1
 800036a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0xe2>
 8000370:	428b      	cmp	r3, r1
 8000372:	f200 80e9 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 8000376:	4684      	mov	ip, r0
 8000378:	1ac9      	subs	r1, r1, r3
 800037a:	b2a3      	uxth	r3, r4
 800037c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000380:	fb0e 1110 	mls	r1, lr, r0, r1
 8000384:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000388:	fb08 f800 	mul.w	r8, r8, r0
 800038c:	45a0      	cmp	r8, r4
 800038e:	d907      	bls.n	80003a0 <__udivmoddi4+0x10c>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x10a>
 8000398:	45a0      	cmp	r8, r4
 800039a:	f200 80d9 	bhi.w	8000550 <__udivmoddi4+0x2bc>
 800039e:	4618      	mov	r0, r3
 80003a0:	eba4 0408 	sub.w	r4, r4, r8
 80003a4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a8:	e7bf      	b.n	800032a <__udivmoddi4+0x96>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0x12e>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80b1 	beq.w	8000516 <__udivmoddi4+0x282>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x1cc>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0x140>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80b8 	bhi.w	8000544 <__udivmoddi4+0x2b0>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0103 	sbc.w	r1, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	468c      	mov	ip, r1
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0a8      	beq.n	8000334 <__udivmoddi4+0xa0>
 80003e2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003e6:	e7a5      	b.n	8000334 <__udivmoddi4+0xa0>
 80003e8:	f1c2 0320 	rsb	r3, r2, #32
 80003ec:	fa20 f603 	lsr.w	r6, r0, r3
 80003f0:	4097      	lsls	r7, r2
 80003f2:	fa01 f002 	lsl.w	r0, r1, r2
 80003f6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fa:	40d9      	lsrs	r1, r3
 80003fc:	4330      	orrs	r0, r6
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	fbb1 f6fe 	udiv	r6, r1, lr
 8000404:	fa1f f887 	uxth.w	r8, r7
 8000408:	fb0e 1116 	mls	r1, lr, r6, r1
 800040c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000410:	fb06 f108 	mul.w	r1, r6, r8
 8000414:	4299      	cmp	r1, r3
 8000416:	fa04 f402 	lsl.w	r4, r4, r2
 800041a:	d909      	bls.n	8000430 <__udivmoddi4+0x19c>
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000422:	f080 808d 	bcs.w	8000540 <__udivmoddi4+0x2ac>
 8000426:	4299      	cmp	r1, r3
 8000428:	f240 808a 	bls.w	8000540 <__udivmoddi4+0x2ac>
 800042c:	3e02      	subs	r6, #2
 800042e:	443b      	add	r3, r7
 8000430:	1a5b      	subs	r3, r3, r1
 8000432:	b281      	uxth	r1, r0
 8000434:	fbb3 f0fe 	udiv	r0, r3, lr
 8000438:	fb0e 3310 	mls	r3, lr, r0, r3
 800043c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000440:	fb00 f308 	mul.w	r3, r0, r8
 8000444:	428b      	cmp	r3, r1
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x1c4>
 8000448:	1879      	adds	r1, r7, r1
 800044a:	f100 3cff 	add.w	ip, r0, #4294967295
 800044e:	d273      	bcs.n	8000538 <__udivmoddi4+0x2a4>
 8000450:	428b      	cmp	r3, r1
 8000452:	d971      	bls.n	8000538 <__udivmoddi4+0x2a4>
 8000454:	3802      	subs	r0, #2
 8000456:	4439      	add	r1, r7
 8000458:	1acb      	subs	r3, r1, r3
 800045a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800045e:	e778      	b.n	8000352 <__udivmoddi4+0xbe>
 8000460:	f1c6 0c20 	rsb	ip, r6, #32
 8000464:	fa03 f406 	lsl.w	r4, r3, r6
 8000468:	fa22 f30c 	lsr.w	r3, r2, ip
 800046c:	431c      	orrs	r4, r3
 800046e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800047a:	fa21 f10c 	lsr.w	r1, r1, ip
 800047e:	431f      	orrs	r7, r3
 8000480:	0c3b      	lsrs	r3, r7, #16
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fa1f f884 	uxth.w	r8, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000492:	fb09 fa08 	mul.w	sl, r9, r8
 8000496:	458a      	cmp	sl, r1
 8000498:	fa02 f206 	lsl.w	r2, r2, r6
 800049c:	fa00 f306 	lsl.w	r3, r0, r6
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x220>
 80004a2:	1861      	adds	r1, r4, r1
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	d248      	bcs.n	800053c <__udivmoddi4+0x2a8>
 80004aa:	458a      	cmp	sl, r1
 80004ac:	d946      	bls.n	800053c <__udivmoddi4+0x2a8>
 80004ae:	f1a9 0902 	sub.w	r9, r9, #2
 80004b2:	4421      	add	r1, r4
 80004b4:	eba1 010a 	sub.w	r1, r1, sl
 80004b8:	b2bf      	uxth	r7, r7
 80004ba:	fbb1 f0fe 	udiv	r0, r1, lr
 80004be:	fb0e 1110 	mls	r1, lr, r0, r1
 80004c2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004c6:	fb00 f808 	mul.w	r8, r0, r8
 80004ca:	45b8      	cmp	r8, r7
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x24a>
 80004ce:	19e7      	adds	r7, r4, r7
 80004d0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004d4:	d22e      	bcs.n	8000534 <__udivmoddi4+0x2a0>
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d92c      	bls.n	8000534 <__udivmoddi4+0x2a0>
 80004da:	3802      	subs	r0, #2
 80004dc:	4427      	add	r7, r4
 80004de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e2:	eba7 0708 	sub.w	r7, r7, r8
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	454f      	cmp	r7, r9
 80004ec:	46c6      	mov	lr, r8
 80004ee:	4649      	mov	r1, r9
 80004f0:	d31a      	bcc.n	8000528 <__udivmoddi4+0x294>
 80004f2:	d017      	beq.n	8000524 <__udivmoddi4+0x290>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x27a>
 80004f6:	ebb3 020e 	subs.w	r2, r3, lr
 80004fa:	eb67 0701 	sbc.w	r7, r7, r1
 80004fe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000502:	40f2      	lsrs	r2, r6
 8000504:	ea4c 0202 	orr.w	r2, ip, r2
 8000508:	40f7      	lsrs	r7, r6
 800050a:	e9c5 2700 	strd	r2, r7, [r5]
 800050e:	2600      	movs	r6, #0
 8000510:	4631      	mov	r1, r6
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	462e      	mov	r6, r5
 8000518:	4628      	mov	r0, r5
 800051a:	e70b      	b.n	8000334 <__udivmoddi4+0xa0>
 800051c:	4606      	mov	r6, r0
 800051e:	e6e9      	b.n	80002f4 <__udivmoddi4+0x60>
 8000520:	4618      	mov	r0, r3
 8000522:	e6fd      	b.n	8000320 <__udivmoddi4+0x8c>
 8000524:	4543      	cmp	r3, r8
 8000526:	d2e5      	bcs.n	80004f4 <__udivmoddi4+0x260>
 8000528:	ebb8 0e02 	subs.w	lr, r8, r2
 800052c:	eb69 0104 	sbc.w	r1, r9, r4
 8000530:	3801      	subs	r0, #1
 8000532:	e7df      	b.n	80004f4 <__udivmoddi4+0x260>
 8000534:	4608      	mov	r0, r1
 8000536:	e7d2      	b.n	80004de <__udivmoddi4+0x24a>
 8000538:	4660      	mov	r0, ip
 800053a:	e78d      	b.n	8000458 <__udivmoddi4+0x1c4>
 800053c:	4681      	mov	r9, r0
 800053e:	e7b9      	b.n	80004b4 <__udivmoddi4+0x220>
 8000540:	4666      	mov	r6, ip
 8000542:	e775      	b.n	8000430 <__udivmoddi4+0x19c>
 8000544:	4630      	mov	r0, r6
 8000546:	e74a      	b.n	80003de <__udivmoddi4+0x14a>
 8000548:	f1ac 0c02 	sub.w	ip, ip, #2
 800054c:	4439      	add	r1, r7
 800054e:	e713      	b.n	8000378 <__udivmoddi4+0xe4>
 8000550:	3802      	subs	r0, #2
 8000552:	443c      	add	r4, r7
 8000554:	e724      	b.n	80003a0 <__udivmoddi4+0x10c>
 8000556:	bf00      	nop

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08a      	sub	sp, #40	; 0x28
 8000560:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 fb89 	bl	8000c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f86d 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 f8d5 	bl	8000718 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //Enable the CYCCNT counter
  DWT_CTRL |= (1<<0);
 800056e:	4b2d      	ldr	r3, [pc, #180]	; (8000624 <main+0xc8>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a2c      	ldr	r2, [pc, #176]	; (8000624 <main+0xc8>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 800057a:	482b      	ldr	r0, [pc, #172]	; (8000628 <main+0xcc>)
 800057c:	f004 fcc4 	bl	8004f08 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8000580:	f006 ff2e 	bl	80073e0 <SEGGER_SYSVIEW_Conf>

 // SEGGER_SYSVIEW_Start();  //this line is there in segger_uart.c under segger->config->Rec

  status=xTaskCreate(led_green_handler, "led_green_task", 200, NULL, 2, &task1_handle);
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	9301      	str	r3, [sp, #4]
 800058a:	2302      	movs	r3, #2
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2300      	movs	r3, #0
 8000590:	22c8      	movs	r2, #200	; 0xc8
 8000592:	4926      	ldr	r1, [pc, #152]	; (800062c <main+0xd0>)
 8000594:	4826      	ldr	r0, [pc, #152]	; (8000630 <main+0xd4>)
 8000596:	f002 fbcd 	bl	8002d34 <xTaskCreate>
 800059a:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 800059c:	69fb      	ldr	r3, [r7, #28]
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d00a      	beq.n	80005b8 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005a6:	f383 8811 	msr	BASEPRI, r3
 80005aa:	f3bf 8f6f 	isb	sy
 80005ae:	f3bf 8f4f 	dsb	sy
 80005b2:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b4:	bf00      	nop
 80005b6:	e7fe      	b.n	80005b6 <main+0x5a>

  status=xTaskCreate(led_orange_handler, "led_orange_task", 200, NULL, 2, &task2_handle);
 80005b8:	f107 0308 	add.w	r3, r7, #8
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	2302      	movs	r3, #2
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2300      	movs	r3, #0
 80005c4:	22c8      	movs	r2, #200	; 0xc8
 80005c6:	491b      	ldr	r1, [pc, #108]	; (8000634 <main+0xd8>)
 80005c8:	481b      	ldr	r0, [pc, #108]	; (8000638 <main+0xdc>)
 80005ca:	f002 fbb3 	bl	8002d34 <xTaskCreate>
 80005ce:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005d0:	69fb      	ldr	r3, [r7, #28]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d00a      	beq.n	80005ec <main+0x90>
        __asm volatile
 80005d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005da:	f383 8811 	msr	BASEPRI, r3
 80005de:	f3bf 8f6f 	isb	sy
 80005e2:	f3bf 8f4f 	dsb	sy
 80005e6:	617b      	str	r3, [r7, #20]
    }
 80005e8:	bf00      	nop
 80005ea:	e7fe      	b.n	80005ea <main+0x8e>

  status=xTaskCreate(led_red_handler, "led_red_task", 200, NULL, 2, &task3_handle);
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	9301      	str	r3, [sp, #4]
 80005f0:	2302      	movs	r3, #2
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	2300      	movs	r3, #0
 80005f6:	22c8      	movs	r2, #200	; 0xc8
 80005f8:	4910      	ldr	r1, [pc, #64]	; (800063c <main+0xe0>)
 80005fa:	4811      	ldr	r0, [pc, #68]	; (8000640 <main+0xe4>)
 80005fc:	f002 fb9a 	bl	8002d34 <xTaskCreate>
 8000600:	61f8      	str	r0, [r7, #28]

   configASSERT(status == pdPASS);
 8000602:	69fb      	ldr	r3, [r7, #28]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d00a      	beq.n	800061e <main+0xc2>
        __asm volatile
 8000608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800060c:	f383 8811 	msr	BASEPRI, r3
 8000610:	f3bf 8f6f 	isb	sy
 8000614:	f3bf 8f4f 	dsb	sy
 8000618:	613b      	str	r3, [r7, #16]
    }
 800061a:	bf00      	nop
 800061c:	e7fe      	b.n	800061c <main+0xc0>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 800061e:	f002 fd6f 	bl	8003100 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000622:	e7fe      	b.n	8000622 <main+0xc6>
 8000624:	e0001000 	.word	0xe0001000
 8000628:	0007a120 	.word	0x0007a120
 800062c:	080074b4 	.word	0x080074b4
 8000630:	080009d5 	.word	0x080009d5
 8000634:	080074c4 	.word	0x080074c4
 8000638:	08000a0d 	.word	0x08000a0d
 800063c:	080074d4 	.word	0x080074d4
 8000640:	08000a45 	.word	0x08000a45

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	; 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2230      	movs	r2, #48	; 0x30
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f006 ff1a 	bl	800748c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	4b28      	ldr	r3, [pc, #160]	; (8000710 <SystemClock_Config+0xcc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	4a27      	ldr	r2, [pc, #156]	; (8000710 <SystemClock_Config+0xcc>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	; 0x40
 8000678:	4b25      	ldr	r3, [pc, #148]	; (8000710 <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b22      	ldr	r3, [pc, #136]	; (8000714 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a21      	ldr	r2, [pc, #132]	; (8000714 <SystemClock_Config+0xd0>)
 800068e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a0:	2302      	movs	r3, #2
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a4:	2301      	movs	r3, #1
 80006a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a8:	2310      	movs	r3, #16
 80006aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ac:	2302      	movs	r3, #2
 80006ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b0:	2300      	movs	r3, #0
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b4:	2308      	movs	r3, #8
 80006b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006b8:	23a8      	movs	r3, #168	; 0xa8
 80006ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006c0:	2307      	movs	r3, #7
 80006c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0320 	add.w	r3, r7, #32
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 fde5 	bl	8001298 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d4:	f000 f9ec 	bl	8000ab0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2302      	movs	r3, #2
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2105      	movs	r1, #5
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 f846 	bl	8001788 <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000702:	f000 f9d5 	bl	8000ab0 <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3750      	adds	r7, #80	; 0x50
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08c      	sub	sp, #48	; 0x30
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
 8000732:	4ba2      	ldr	r3, [pc, #648]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4aa1      	ldr	r2, [pc, #644]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000738:	f043 0310 	orr.w	r3, r3, #16
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b9f      	ldr	r3, [pc, #636]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0310 	and.w	r3, r3, #16
 8000746:	61bb      	str	r3, [r7, #24]
 8000748:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
 800074e:	4b9b      	ldr	r3, [pc, #620]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a9a      	ldr	r2, [pc, #616]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b98      	ldr	r3, [pc, #608]	; (80009bc <MX_GPIO_Init+0x2a4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	4b94      	ldr	r3, [pc, #592]	; (80009bc <MX_GPIO_Init+0x2a4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a93      	ldr	r2, [pc, #588]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b91      	ldr	r3, [pc, #580]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	4b8d      	ldr	r3, [pc, #564]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a8c      	ldr	r2, [pc, #560]	; (80009bc <MX_GPIO_Init+0x2a4>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b8a      	ldr	r3, [pc, #552]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	4b86      	ldr	r3, [pc, #536]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a85      	ldr	r2, [pc, #532]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b83      	ldr	r3, [pc, #524]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b7f      	ldr	r3, [pc, #508]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a7e      	ldr	r2, [pc, #504]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80007c4:	f043 0308 	orr.w	r3, r3, #8
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b7c      	ldr	r3, [pc, #496]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0308 	and.w	r3, r3, #8
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2108      	movs	r1, #8
 80007da:	4879      	ldr	r0, [pc, #484]	; (80009c0 <MX_GPIO_Init+0x2a8>)
 80007dc:	f000 fd0c 	bl	80011f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	2101      	movs	r1, #1
 80007e4:	4877      	ldr	r0, [pc, #476]	; (80009c4 <MX_GPIO_Init+0x2ac>)
 80007e6:	f000 fd07 	bl	80011f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007ea:	2200      	movs	r2, #0
 80007ec:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007f0:	4875      	ldr	r0, [pc, #468]	; (80009c8 <MX_GPIO_Init+0x2b0>)
 80007f2:	f000 fd01 	bl	80011f8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007f6:	2308      	movs	r3, #8
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	486c      	ldr	r0, [pc, #432]	; (80009c0 <MX_GPIO_Init+0x2a8>)
 800080e:	f000 fb57 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000812:	2301      	movs	r3, #1
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	4619      	mov	r1, r3
 8000828:	4866      	ldr	r0, [pc, #408]	; (80009c4 <MX_GPIO_Init+0x2ac>)
 800082a:	f000 fb49 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800082e:	2308      	movs	r3, #8
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800083e:	2305      	movs	r3, #5
 8000840:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	485e      	ldr	r0, [pc, #376]	; (80009c4 <MX_GPIO_Init+0x2ac>)
 800084a:	f000 fb39 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800084e:	2301      	movs	r3, #1
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000852:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	4619      	mov	r1, r3
 8000862:	485a      	ldr	r0, [pc, #360]	; (80009cc <MX_GPIO_Init+0x2b4>)
 8000864:	f000 fb2c 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000868:	2310      	movs	r3, #16
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086c:	2302      	movs	r3, #2
 800086e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000878:	2306      	movs	r3, #6
 800087a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	4852      	ldr	r0, [pc, #328]	; (80009cc <MX_GPIO_Init+0x2b4>)
 8000884:	f000 fb1c 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000888:	23e0      	movs	r3, #224	; 0xe0
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000898:	2305      	movs	r3, #5
 800089a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	484a      	ldr	r0, [pc, #296]	; (80009cc <MX_GPIO_Init+0x2b4>)
 80008a4:	f000 fb0c 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008a8:	2304      	movs	r3, #4
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ac:	2300      	movs	r3, #0
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	4845      	ldr	r0, [pc, #276]	; (80009d0 <MX_GPIO_Init+0x2b8>)
 80008bc:	f000 fb00 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d2:	2305      	movs	r3, #5
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	483c      	ldr	r0, [pc, #240]	; (80009d0 <MX_GPIO_Init+0x2b8>)
 80008de:	f000 faef 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008e2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008e6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4833      	ldr	r0, [pc, #204]	; (80009c8 <MX_GPIO_Init+0x2b0>)
 80008fc:	f000 fae0 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000900:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000912:	2306      	movs	r3, #6
 8000914:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4829      	ldr	r0, [pc, #164]	; (80009c4 <MX_GPIO_Init+0x2ac>)
 800091e:	f000 facf 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000922:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	4825      	ldr	r0, [pc, #148]	; (80009cc <MX_GPIO_Init+0x2b4>)
 8000938:	f000 fac2 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800093c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800094e:	230a      	movs	r3, #10
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	481c      	ldr	r0, [pc, #112]	; (80009cc <MX_GPIO_Init+0x2b4>)
 800095a:	f000 fab1 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800095e:	2320      	movs	r3, #32
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4815      	ldr	r0, [pc, #84]	; (80009c8 <MX_GPIO_Init+0x2b0>)
 8000972:	f000 faa5 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000976:	f44f 7310 	mov.w	r3, #576	; 0x240
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800097c:	2312      	movs	r3, #18
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000988:	2304      	movs	r3, #4
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	480f      	ldr	r0, [pc, #60]	; (80009d0 <MX_GPIO_Init+0x2b8>)
 8000994:	f000 fa94 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000998:	2302      	movs	r3, #2
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800099c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4804      	ldr	r0, [pc, #16]	; (80009c0 <MX_GPIO_Init+0x2a8>)
 80009ae:	f000 fa87 	bl	8000ec0 <HAL_GPIO_Init>

}
 80009b2:	bf00      	nop
 80009b4:	3730      	adds	r7, #48	; 0x30
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40021000 	.word	0x40021000
 80009c4:	40020800 	.word	0x40020800
 80009c8:	40020c00 	.word	0x40020c00
 80009cc:	40020000 	.word	0x40020000
 80009d0:	40020400 	.word	0x40020400

080009d4 <led_green_handler>:

/* USER CODE BEGIN 4 */


static void led_green_handler(void *parameters)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]

	TickType_t last_wakeup_time;
	last_wakeup_time= xTaskGetTickCount();
 80009dc:	f002 fca0 	bl	8003320 <xTaskGetTickCount>
 80009e0:	4603      	mov	r3, r0
 80009e2:	60fb      	str	r3, [r7, #12]
	while(1)
	{

		SEGGER_SYSVIEW_PrintfTarget("Toggling green led");
 80009e4:	4807      	ldr	r0, [pc, #28]	; (8000a04 <led_green_handler+0x30>)
 80009e6:	f006 fc4f 	bl	8007288 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 80009ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ee:	4806      	ldr	r0, [pc, #24]	; (8000a08 <led_green_handler+0x34>)
 80009f0:	f000 fc1b 	bl	800122a <HAL_GPIO_TogglePin>
		//vTaskDelay(pdMS_TO_TICKS(1000));
		vTaskDelayUntil(&last_wakeup_time,pdMS_TO_TICKS(1000));
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009fc:	4618      	mov	r0, r3
 80009fe:	f002 fafd 	bl	8002ffc <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green led");
 8000a02:	e7ef      	b.n	80009e4 <led_green_handler+0x10>
 8000a04:	080074e4 	.word	0x080074e4
 8000a08:	40020c00 	.word	0x40020c00

08000a0c <led_orange_handler>:
	}
}

static void led_orange_handler(void *parameters)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time= xTaskGetTickCount();
 8000a14:	f002 fc84 	bl	8003320 <xTaskGetTickCount>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange led");
 8000a1c:	4807      	ldr	r0, [pc, #28]	; (8000a3c <led_orange_handler+0x30>)
 8000a1e:	f006 fc33 	bl	8007288 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000a22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a26:	4806      	ldr	r0, [pc, #24]	; (8000a40 <led_orange_handler+0x34>)
 8000a28:	f000 fbff 	bl	800122a <HAL_GPIO_TogglePin>
		//vTaskDelay(pdMS_TO_TICKS(800));
		vTaskDelayUntil(&last_wakeup_time,pdMS_TO_TICKS(800));
 8000a2c:	f107 030c 	add.w	r3, r7, #12
 8000a30:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000a34:	4618      	mov	r0, r3
 8000a36:	f002 fae1 	bl	8002ffc <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange led");
 8000a3a:	e7ef      	b.n	8000a1c <led_orange_handler+0x10>
 8000a3c:	080074f8 	.word	0x080074f8
 8000a40:	40020c00 	.word	0x40020c00

08000a44 <led_red_handler>:
	}
}

static void led_red_handler(void *parameters)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time= xTaskGetTickCount();
 8000a4c:	f002 fc68 	bl	8003320 <xTaskGetTickCount>
 8000a50:	4603      	mov	r3, r0
 8000a52:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red led");
 8000a54:	4807      	ldr	r0, [pc, #28]	; (8000a74 <led_red_handler+0x30>)
 8000a56:	f006 fc17 	bl	8007288 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000a5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a5e:	4806      	ldr	r0, [pc, #24]	; (8000a78 <led_red_handler+0x34>)
 8000a60:	f000 fbe3 	bl	800122a <HAL_GPIO_TogglePin>
		//vTaskDelay(pdMS_TO_TICKS(400));
		vTaskDelayUntil(&last_wakeup_time,pdMS_TO_TICKS(400));
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f002 fac5 	bl	8002ffc <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red led");
 8000a72:	e7ef      	b.n	8000a54 <led_red_handler+0x10>
 8000a74:	0800750c 	.word	0x0800750c
 8000a78:	40020c00 	.word	0x40020c00

08000a7c <vApplicationIdleHook>:
	}

}

void vApplicationIdleHook( void )
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0

	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000a80:	2101      	movs	r1, #1
 8000a82:	2000      	movs	r0, #0
 8000a84:	f000 fbec 	bl	8001260 <HAL_PWR_EnterSLEEPMode>
}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a04      	ldr	r2, [pc, #16]	; (8000aac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d101      	bne.n	8000aa2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a9e:	f000 f90d 	bl	8000cbc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40001000 	.word	0x40001000

08000ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab4:	b672      	cpsid	i
}
 8000ab6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <Error_Handler+0x8>
	...

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	4a0f      	ldr	r2, [pc, #60]	; (8000b08 <HAL_MspInit+0x4c>)
 8000acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a08      	ldr	r2, [pc, #32]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_MspInit+0x4c>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000afa:	f003 fca5 	bl	8004448 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800

08000b0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08c      	sub	sp, #48	; 0x30
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	2036      	movs	r0, #54	; 0x36
 8000b22:	f000 f9a3 	bl	8000e6c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b26:	2036      	movs	r0, #54	; 0x36
 8000b28:	f000 f9bc 	bl	8000ea4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	4b1f      	ldr	r3, [pc, #124]	; (8000bb0 <HAL_InitTick+0xa4>)
 8000b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b34:	4a1e      	ldr	r2, [pc, #120]	; (8000bb0 <HAL_InitTick+0xa4>)
 8000b36:	f043 0310 	orr.w	r3, r3, #16
 8000b3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3c:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <HAL_InitTick+0xa4>)
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b40:	f003 0310 	and.w	r3, r3, #16
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b48:	f107 0210 	add.w	r2, r7, #16
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4611      	mov	r1, r2
 8000b52:	4618      	mov	r0, r3
 8000b54:	f001 f800 	bl	8001b58 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b58:	f000 ffea 	bl	8001b30 <HAL_RCC_GetPCLK1Freq>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b64:	4a13      	ldr	r2, [pc, #76]	; (8000bb4 <HAL_InitTick+0xa8>)
 8000b66:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6a:	0c9b      	lsrs	r3, r3, #18
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <HAL_InitTick+0xac>)
 8000b72:	4a12      	ldr	r2, [pc, #72]	; (8000bbc <HAL_InitTick+0xb0>)
 8000b74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <HAL_InitTick+0xac>)
 8000b78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b7c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b7e:	4a0e      	ldr	r2, [pc, #56]	; (8000bb8 <HAL_InitTick+0xac>)
 8000b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b82:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <HAL_InitTick+0xac>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <HAL_InitTick+0xac>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000b90:	4809      	ldr	r0, [pc, #36]	; (8000bb8 <HAL_InitTick+0xac>)
 8000b92:	f001 f813 	bl	8001bbc <HAL_TIM_Base_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d104      	bne.n	8000ba6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000b9c:	4806      	ldr	r0, [pc, #24]	; (8000bb8 <HAL_InitTick+0xac>)
 8000b9e:	f001 f867 	bl	8001c70 <HAL_TIM_Base_Start_IT>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	e000      	b.n	8000ba8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3730      	adds	r7, #48	; 0x30
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	431bde83 	.word	0x431bde83
 8000bb8:	20014378 	.word	0x20014378
 8000bbc:	40001000 	.word	0x40001000

08000bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <NMI_Handler+0x4>

08000bc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bca:	e7fe      	b.n	8000bca <HardFault_Handler+0x4>

08000bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <MemManage_Handler+0x4>

08000bd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <BusFault_Handler+0x4>

08000bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <UsageFault_Handler+0x4>

08000bde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bf0:	4802      	ldr	r0, [pc, #8]	; (8000bfc <TIM6_DAC_IRQHandler+0x10>)
 8000bf2:	f001 f8ad 	bl	8001d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20014378 	.word	0x20014378

08000c00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <SystemInit+0x20>)
 8000c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0a:	4a05      	ldr	r2, [pc, #20]	; (8000c20 <SystemInit+0x20>)
 8000c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c28:	480d      	ldr	r0, [pc, #52]	; (8000c60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c2a:	490e      	ldr	r1, [pc, #56]	; (8000c64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c2c:	4a0e      	ldr	r2, [pc, #56]	; (8000c68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c30:	e002      	b.n	8000c38 <LoopCopyDataInit>

08000c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c36:	3304      	adds	r3, #4

08000c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c3c:	d3f9      	bcc.n	8000c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3e:	4a0b      	ldr	r2, [pc, #44]	; (8000c6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c40:	4c0b      	ldr	r4, [pc, #44]	; (8000c70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c44:	e001      	b.n	8000c4a <LoopFillZerobss>

08000c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c48:	3204      	adds	r2, #4

08000c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c4c:	d3fb      	bcc.n	8000c46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c4e:	f7ff ffd7 	bl	8000c00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c52:	f006 fbdb 	bl	800740c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c56:	f7ff fc81 	bl	800055c <main>
  bx  lr    
 8000c5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c64:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000c68:	08007654 	.word	0x08007654
  ldr r2, =_sbss
 8000c6c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000c70:	200144ac 	.word	0x200144ac

08000c74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c74:	e7fe      	b.n	8000c74 <ADC_IRQHandler>
	...

08000c78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c7c:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <HAL_Init+0x40>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a0d      	ldr	r2, [pc, #52]	; (8000cb8 <HAL_Init+0x40>)
 8000c82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c88:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <HAL_Init+0x40>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <HAL_Init+0x40>)
 8000c8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <HAL_Init+0x40>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a07      	ldr	r2, [pc, #28]	; (8000cb8 <HAL_Init+0x40>)
 8000c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca0:	2003      	movs	r0, #3
 8000ca2:	f000 f8d8 	bl	8000e56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f7ff ff30 	bl	8000b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cac:	f7ff ff06 	bl	8000abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40023c00 	.word	0x40023c00

08000cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_IncTick+0x20>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_IncTick+0x24>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4413      	add	r3, r2
 8000ccc:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <HAL_IncTick+0x24>)
 8000cce:	6013      	str	r3, [r2, #0]
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	200143c0 	.word	0x200143c0

08000ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce8:	4b03      	ldr	r3, [pc, #12]	; (8000cf8 <HAL_GetTick+0x14>)
 8000cea:	681b      	ldr	r3, [r3, #0]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	200143c0 	.word	0x200143c0

08000cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2e:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	60d3      	str	r3, [r2, #12]
}
 8000d34:	bf00      	nop
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <__NVIC_GetPriorityGrouping+0x18>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	0a1b      	lsrs	r3, r3, #8
 8000d4e:	f003 0307 	and.w	r3, r3, #7
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	db0b      	blt.n	8000d8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	f003 021f 	and.w	r2, r3, #31
 8000d78:	4907      	ldr	r1, [pc, #28]	; (8000d98 <__NVIC_EnableIRQ+0x38>)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	095b      	lsrs	r3, r3, #5
 8000d80:	2001      	movs	r0, #1
 8000d82:	fa00 f202 	lsl.w	r2, r0, r2
 8000d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	e000e100 	.word	0xe000e100

08000d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	6039      	str	r1, [r7, #0]
 8000da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	db0a      	blt.n	8000dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	490c      	ldr	r1, [pc, #48]	; (8000de8 <__NVIC_SetPriority+0x4c>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	0112      	lsls	r2, r2, #4
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	440b      	add	r3, r1
 8000dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc4:	e00a      	b.n	8000ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4908      	ldr	r1, [pc, #32]	; (8000dec <__NVIC_SetPriority+0x50>)
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	f003 030f 	and.w	r3, r3, #15
 8000dd2:	3b04      	subs	r3, #4
 8000dd4:	0112      	lsls	r2, r2, #4
 8000dd6:	b2d2      	uxtb	r2, r2
 8000dd8:	440b      	add	r3, r1
 8000dda:	761a      	strb	r2, [r3, #24]
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000e100 	.word	0xe000e100
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b089      	sub	sp, #36	; 0x24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	f1c3 0307 	rsb	r3, r3, #7
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	bf28      	it	cs
 8000e0e:	2304      	movcs	r3, #4
 8000e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3304      	adds	r3, #4
 8000e16:	2b06      	cmp	r3, #6
 8000e18:	d902      	bls.n	8000e20 <NVIC_EncodePriority+0x30>
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3b03      	subs	r3, #3
 8000e1e:	e000      	b.n	8000e22 <NVIC_EncodePriority+0x32>
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	f04f 32ff 	mov.w	r2, #4294967295
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43da      	mvns	r2, r3
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	401a      	ands	r2, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e38:	f04f 31ff 	mov.w	r1, #4294967295
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e42:	43d9      	mvns	r1, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	4313      	orrs	r3, r2
         );
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3724      	adds	r7, #36	; 0x24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff ff4c 	bl	8000cfc <__NVIC_SetPriorityGrouping>
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
 8000e78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e7e:	f7ff ff61 	bl	8000d44 <__NVIC_GetPriorityGrouping>
 8000e82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	68b9      	ldr	r1, [r7, #8]
 8000e88:	6978      	ldr	r0, [r7, #20]
 8000e8a:	f7ff ffb1 	bl	8000df0 <NVIC_EncodePriority>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e94:	4611      	mov	r1, r2
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff ff80 	bl	8000d9c <__NVIC_SetPriority>
}
 8000e9c:	bf00      	nop
 8000e9e:	3718      	adds	r7, #24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff ff54 	bl	8000d60 <__NVIC_EnableIRQ>
}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b089      	sub	sp, #36	; 0x24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
 8000eda:	e16b      	b.n	80011b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000edc:	2201      	movs	r2, #1
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	697a      	ldr	r2, [r7, #20]
 8000eec:	4013      	ands	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	f040 815a 	bne.w	80011ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f003 0303 	and.w	r3, r3, #3
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d005      	beq.n	8000f12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d130      	bne.n	8000f74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4013      	ands	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	68da      	ldr	r2, [r3, #12]
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f48:	2201      	movs	r2, #1
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	091b      	lsrs	r3, r3, #4
 8000f5e:	f003 0201 	and.w	r2, r3, #1
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 0303 	and.w	r3, r3, #3
 8000f7c:	2b03      	cmp	r3, #3
 8000f7e:	d017      	beq.n	8000fb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	689a      	ldr	r2, [r3, #8]
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 0303 	and.w	r3, r3, #3
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d123      	bne.n	8001004 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	08da      	lsrs	r2, r3, #3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3208      	adds	r2, #8
 8000fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	f003 0307 	and.w	r3, r3, #7
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	220f      	movs	r2, #15
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	691a      	ldr	r2, [r3, #16]
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	08da      	lsrs	r2, r3, #3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	3208      	adds	r2, #8
 8000ffe:	69b9      	ldr	r1, [r7, #24]
 8001000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	2203      	movs	r2, #3
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 0203 	and.w	r2, r3, #3
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001040:	2b00      	cmp	r3, #0
 8001042:	f000 80b4 	beq.w	80011ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	4b60      	ldr	r3, [pc, #384]	; (80011cc <HAL_GPIO_Init+0x30c>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	4a5f      	ldr	r2, [pc, #380]	; (80011cc <HAL_GPIO_Init+0x30c>)
 8001050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001054:	6453      	str	r3, [r2, #68]	; 0x44
 8001056:	4b5d      	ldr	r3, [pc, #372]	; (80011cc <HAL_GPIO_Init+0x30c>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001062:	4a5b      	ldr	r2, [pc, #364]	; (80011d0 <HAL_GPIO_Init+0x310>)
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	089b      	lsrs	r3, r3, #2
 8001068:	3302      	adds	r3, #2
 800106a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f003 0303 	and.w	r3, r3, #3
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	220f      	movs	r2, #15
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a52      	ldr	r2, [pc, #328]	; (80011d4 <HAL_GPIO_Init+0x314>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d02b      	beq.n	80010e6 <HAL_GPIO_Init+0x226>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a51      	ldr	r2, [pc, #324]	; (80011d8 <HAL_GPIO_Init+0x318>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d025      	beq.n	80010e2 <HAL_GPIO_Init+0x222>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a50      	ldr	r2, [pc, #320]	; (80011dc <HAL_GPIO_Init+0x31c>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d01f      	beq.n	80010de <HAL_GPIO_Init+0x21e>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a4f      	ldr	r2, [pc, #316]	; (80011e0 <HAL_GPIO_Init+0x320>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d019      	beq.n	80010da <HAL_GPIO_Init+0x21a>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a4e      	ldr	r2, [pc, #312]	; (80011e4 <HAL_GPIO_Init+0x324>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d013      	beq.n	80010d6 <HAL_GPIO_Init+0x216>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a4d      	ldr	r2, [pc, #308]	; (80011e8 <HAL_GPIO_Init+0x328>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d00d      	beq.n	80010d2 <HAL_GPIO_Init+0x212>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a4c      	ldr	r2, [pc, #304]	; (80011ec <HAL_GPIO_Init+0x32c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d007      	beq.n	80010ce <HAL_GPIO_Init+0x20e>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4b      	ldr	r2, [pc, #300]	; (80011f0 <HAL_GPIO_Init+0x330>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d101      	bne.n	80010ca <HAL_GPIO_Init+0x20a>
 80010c6:	2307      	movs	r3, #7
 80010c8:	e00e      	b.n	80010e8 <HAL_GPIO_Init+0x228>
 80010ca:	2308      	movs	r3, #8
 80010cc:	e00c      	b.n	80010e8 <HAL_GPIO_Init+0x228>
 80010ce:	2306      	movs	r3, #6
 80010d0:	e00a      	b.n	80010e8 <HAL_GPIO_Init+0x228>
 80010d2:	2305      	movs	r3, #5
 80010d4:	e008      	b.n	80010e8 <HAL_GPIO_Init+0x228>
 80010d6:	2304      	movs	r3, #4
 80010d8:	e006      	b.n	80010e8 <HAL_GPIO_Init+0x228>
 80010da:	2303      	movs	r3, #3
 80010dc:	e004      	b.n	80010e8 <HAL_GPIO_Init+0x228>
 80010de:	2302      	movs	r3, #2
 80010e0:	e002      	b.n	80010e8 <HAL_GPIO_Init+0x228>
 80010e2:	2301      	movs	r3, #1
 80010e4:	e000      	b.n	80010e8 <HAL_GPIO_Init+0x228>
 80010e6:	2300      	movs	r3, #0
 80010e8:	69fa      	ldr	r2, [r7, #28]
 80010ea:	f002 0203 	and.w	r2, r2, #3
 80010ee:	0092      	lsls	r2, r2, #2
 80010f0:	4093      	lsls	r3, r2
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010f8:	4935      	ldr	r1, [pc, #212]	; (80011d0 <HAL_GPIO_Init+0x310>)
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	089b      	lsrs	r3, r3, #2
 80010fe:	3302      	adds	r3, #2
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001106:	4b3b      	ldr	r3, [pc, #236]	; (80011f4 <HAL_GPIO_Init+0x334>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800112a:	4a32      	ldr	r2, [pc, #200]	; (80011f4 <HAL_GPIO_Init+0x334>)
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001130:	4b30      	ldr	r3, [pc, #192]	; (80011f4 <HAL_GPIO_Init+0x334>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001154:	4a27      	ldr	r2, [pc, #156]	; (80011f4 <HAL_GPIO_Init+0x334>)
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800115a:	4b26      	ldr	r3, [pc, #152]	; (80011f4 <HAL_GPIO_Init+0x334>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800117e:	4a1d      	ldr	r2, [pc, #116]	; (80011f4 <HAL_GPIO_Init+0x334>)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001184:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <HAL_GPIO_Init+0x334>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011a8:	4a12      	ldr	r2, [pc, #72]	; (80011f4 <HAL_GPIO_Init+0x334>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3301      	adds	r3, #1
 80011b2:	61fb      	str	r3, [r7, #28]
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	2b0f      	cmp	r3, #15
 80011b8:	f67f ae90 	bls.w	8000edc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	3724      	adds	r7, #36	; 0x24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40013800 	.word	0x40013800
 80011d4:	40020000 	.word	0x40020000
 80011d8:	40020400 	.word	0x40020400
 80011dc:	40020800 	.word	0x40020800
 80011e0:	40020c00 	.word	0x40020c00
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40021400 	.word	0x40021400
 80011ec:	40021800 	.word	0x40021800
 80011f0:	40021c00 	.word	0x40021c00
 80011f4:	40013c00 	.word	0x40013c00

080011f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	807b      	strh	r3, [r7, #2]
 8001204:	4613      	mov	r3, r2
 8001206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001208:	787b      	ldrb	r3, [r7, #1]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800120e:	887a      	ldrh	r2, [r7, #2]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001214:	e003      	b.n	800121e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001216:	887b      	ldrh	r3, [r7, #2]
 8001218:	041a      	lsls	r2, r3, #16
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	619a      	str	r2, [r3, #24]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800122a:	b480      	push	{r7}
 800122c:	b085      	sub	sp, #20
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
 8001232:	460b      	mov	r3, r1
 8001234:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800123c:	887a      	ldrh	r2, [r7, #2]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4013      	ands	r3, r2
 8001242:	041a      	lsls	r2, r3, #16
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	43d9      	mvns	r1, r3
 8001248:	887b      	ldrh	r3, [r7, #2]
 800124a:	400b      	ands	r3, r1
 800124c:	431a      	orrs	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	619a      	str	r2, [r3, #24]
}
 8001252:	bf00      	nop
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800126c:	4b09      	ldr	r3, [pc, #36]	; (8001294 <HAL_PWR_EnterSLEEPMode+0x34>)
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	4a08      	ldr	r2, [pc, #32]	; (8001294 <HAL_PWR_EnterSLEEPMode+0x34>)
 8001272:	f023 0304 	bic.w	r3, r3, #4
 8001276:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001278:	78fb      	ldrb	r3, [r7, #3]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d101      	bne.n	8001282 <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 800127e:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8001280:	e002      	b.n	8001288 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8001282:	bf40      	sev
    __WFE();
 8001284:	bf20      	wfe
    __WFE();
 8001286:	bf20      	wfe
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e264      	b.n	8001774 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d075      	beq.n	80013a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012b6:	4ba3      	ldr	r3, [pc, #652]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 030c 	and.w	r3, r3, #12
 80012be:	2b04      	cmp	r3, #4
 80012c0:	d00c      	beq.n	80012dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012c2:	4ba0      	ldr	r3, [pc, #640]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ca:	2b08      	cmp	r3, #8
 80012cc:	d112      	bne.n	80012f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ce:	4b9d      	ldr	r3, [pc, #628]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012da:	d10b      	bne.n	80012f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012dc:	4b99      	ldr	r3, [pc, #612]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d05b      	beq.n	80013a0 <HAL_RCC_OscConfig+0x108>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d157      	bne.n	80013a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e23f      	b.n	8001774 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012fc:	d106      	bne.n	800130c <HAL_RCC_OscConfig+0x74>
 80012fe:	4b91      	ldr	r3, [pc, #580]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a90      	ldr	r2, [pc, #576]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	e01d      	b.n	8001348 <HAL_RCC_OscConfig+0xb0>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001314:	d10c      	bne.n	8001330 <HAL_RCC_OscConfig+0x98>
 8001316:	4b8b      	ldr	r3, [pc, #556]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a8a      	ldr	r2, [pc, #552]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 800131c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	4b88      	ldr	r3, [pc, #544]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a87      	ldr	r2, [pc, #540]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e00b      	b.n	8001348 <HAL_RCC_OscConfig+0xb0>
 8001330:	4b84      	ldr	r3, [pc, #528]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a83      	ldr	r2, [pc, #524]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	4b81      	ldr	r3, [pc, #516]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a80      	ldr	r2, [pc, #512]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d013      	beq.n	8001378 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001350:	f7ff fcc8 	bl	8000ce4 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001358:	f7ff fcc4 	bl	8000ce4 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b64      	cmp	r3, #100	; 0x64
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e204      	b.n	8001774 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800136a:	4b76      	ldr	r3, [pc, #472]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0xc0>
 8001376:	e014      	b.n	80013a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001378:	f7ff fcb4 	bl	8000ce4 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001380:	f7ff fcb0 	bl	8000ce4 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b64      	cmp	r3, #100	; 0x64
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e1f0      	b.n	8001774 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001392:	4b6c      	ldr	r3, [pc, #432]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1f0      	bne.n	8001380 <HAL_RCC_OscConfig+0xe8>
 800139e:	e000      	b.n	80013a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d063      	beq.n	8001476 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ae:	4b65      	ldr	r3, [pc, #404]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 030c 	and.w	r3, r3, #12
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d00b      	beq.n	80013d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ba:	4b62      	ldr	r3, [pc, #392]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013c2:	2b08      	cmp	r3, #8
 80013c4:	d11c      	bne.n	8001400 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013c6:	4b5f      	ldr	r3, [pc, #380]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d116      	bne.n	8001400 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013d2:	4b5c      	ldr	r3, [pc, #368]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d005      	beq.n	80013ea <HAL_RCC_OscConfig+0x152>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d001      	beq.n	80013ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e1c4      	b.n	8001774 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ea:	4b56      	ldr	r3, [pc, #344]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	691b      	ldr	r3, [r3, #16]
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	4952      	ldr	r1, [pc, #328]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fe:	e03a      	b.n	8001476 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d020      	beq.n	800144a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001408:	4b4f      	ldr	r3, [pc, #316]	; (8001548 <HAL_RCC_OscConfig+0x2b0>)
 800140a:	2201      	movs	r2, #1
 800140c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140e:	f7ff fc69 	bl	8000ce4 <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001416:	f7ff fc65 	bl	8000ce4 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e1a5      	b.n	8001774 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001428:	4b46      	ldr	r3, [pc, #280]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0f0      	beq.n	8001416 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001434:	4b43      	ldr	r3, [pc, #268]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	4940      	ldr	r1, [pc, #256]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001444:	4313      	orrs	r3, r2
 8001446:	600b      	str	r3, [r1, #0]
 8001448:	e015      	b.n	8001476 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800144a:	4b3f      	ldr	r3, [pc, #252]	; (8001548 <HAL_RCC_OscConfig+0x2b0>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001450:	f7ff fc48 	bl	8000ce4 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001458:	f7ff fc44 	bl	8000ce4 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e184      	b.n	8001774 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800146a:	4b36      	ldr	r3, [pc, #216]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f0      	bne.n	8001458 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	2b00      	cmp	r3, #0
 8001480:	d030      	beq.n	80014e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d016      	beq.n	80014b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800148a:	4b30      	ldr	r3, [pc, #192]	; (800154c <HAL_RCC_OscConfig+0x2b4>)
 800148c:	2201      	movs	r2, #1
 800148e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001490:	f7ff fc28 	bl	8000ce4 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001498:	f7ff fc24 	bl	8000ce4 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e164      	b.n	8001774 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014aa:	4b26      	ldr	r3, [pc, #152]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80014ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f0      	beq.n	8001498 <HAL_RCC_OscConfig+0x200>
 80014b6:	e015      	b.n	80014e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014b8:	4b24      	ldr	r3, [pc, #144]	; (800154c <HAL_RCC_OscConfig+0x2b4>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014be:	f7ff fc11 	bl	8000ce4 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c6:	f7ff fc0d 	bl	8000ce4 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e14d      	b.n	8001774 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d8:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80014da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1f0      	bne.n	80014c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f000 80a0 	beq.w	8001632 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014f2:	2300      	movs	r3, #0
 80014f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014f6:	4b13      	ldr	r3, [pc, #76]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d10f      	bne.n	8001522 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	4a0e      	ldr	r2, [pc, #56]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 800150c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001510:	6413      	str	r3, [r2, #64]	; 0x40
 8001512:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800151e:	2301      	movs	r3, #1
 8001520:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001522:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <HAL_RCC_OscConfig+0x2b8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152a:	2b00      	cmp	r3, #0
 800152c:	d121      	bne.n	8001572 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800152e:	4b08      	ldr	r3, [pc, #32]	; (8001550 <HAL_RCC_OscConfig+0x2b8>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a07      	ldr	r2, [pc, #28]	; (8001550 <HAL_RCC_OscConfig+0x2b8>)
 8001534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800153a:	f7ff fbd3 	bl	8000ce4 <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001540:	e011      	b.n	8001566 <HAL_RCC_OscConfig+0x2ce>
 8001542:	bf00      	nop
 8001544:	40023800 	.word	0x40023800
 8001548:	42470000 	.word	0x42470000
 800154c:	42470e80 	.word	0x42470e80
 8001550:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001554:	f7ff fbc6 	bl	8000ce4 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e106      	b.n	8001774 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001566:	4b85      	ldr	r3, [pc, #532]	; (800177c <HAL_RCC_OscConfig+0x4e4>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0f0      	beq.n	8001554 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d106      	bne.n	8001588 <HAL_RCC_OscConfig+0x2f0>
 800157a:	4b81      	ldr	r3, [pc, #516]	; (8001780 <HAL_RCC_OscConfig+0x4e8>)
 800157c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157e:	4a80      	ldr	r2, [pc, #512]	; (8001780 <HAL_RCC_OscConfig+0x4e8>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6713      	str	r3, [r2, #112]	; 0x70
 8001586:	e01c      	b.n	80015c2 <HAL_RCC_OscConfig+0x32a>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	2b05      	cmp	r3, #5
 800158e:	d10c      	bne.n	80015aa <HAL_RCC_OscConfig+0x312>
 8001590:	4b7b      	ldr	r3, [pc, #492]	; (8001780 <HAL_RCC_OscConfig+0x4e8>)
 8001592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001594:	4a7a      	ldr	r2, [pc, #488]	; (8001780 <HAL_RCC_OscConfig+0x4e8>)
 8001596:	f043 0304 	orr.w	r3, r3, #4
 800159a:	6713      	str	r3, [r2, #112]	; 0x70
 800159c:	4b78      	ldr	r3, [pc, #480]	; (8001780 <HAL_RCC_OscConfig+0x4e8>)
 800159e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a0:	4a77      	ldr	r2, [pc, #476]	; (8001780 <HAL_RCC_OscConfig+0x4e8>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	6713      	str	r3, [r2, #112]	; 0x70
 80015a8:	e00b      	b.n	80015c2 <HAL_RCC_OscConfig+0x32a>
 80015aa:	4b75      	ldr	r3, [pc, #468]	; (8001780 <HAL_RCC_OscConfig+0x4e8>)
 80015ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ae:	4a74      	ldr	r2, [pc, #464]	; (8001780 <HAL_RCC_OscConfig+0x4e8>)
 80015b0:	f023 0301 	bic.w	r3, r3, #1
 80015b4:	6713      	str	r3, [r2, #112]	; 0x70
 80015b6:	4b72      	ldr	r3, [pc, #456]	; (8001780 <HAL_RCC_OscConfig+0x4e8>)
 80015b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ba:	4a71      	ldr	r2, [pc, #452]	; (8001780 <HAL_RCC_OscConfig+0x4e8>)
 80015bc:	f023 0304 	bic.w	r3, r3, #4
 80015c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d015      	beq.n	80015f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ca:	f7ff fb8b 	bl	8000ce4 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d0:	e00a      	b.n	80015e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d2:	f7ff fb87 	bl	8000ce4 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e0c5      	b.n	8001774 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e8:	4b65      	ldr	r3, [pc, #404]	; (8001780 <HAL_RCC_OscConfig+0x4e8>)
 80015ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0ee      	beq.n	80015d2 <HAL_RCC_OscConfig+0x33a>
 80015f4:	e014      	b.n	8001620 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f6:	f7ff fb75 	bl	8000ce4 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015fc:	e00a      	b.n	8001614 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015fe:	f7ff fb71 	bl	8000ce4 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	f241 3288 	movw	r2, #5000	; 0x1388
 800160c:	4293      	cmp	r3, r2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e0af      	b.n	8001774 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001614:	4b5a      	ldr	r3, [pc, #360]	; (8001780 <HAL_RCC_OscConfig+0x4e8>)
 8001616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1ee      	bne.n	80015fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001620:	7dfb      	ldrb	r3, [r7, #23]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d105      	bne.n	8001632 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001626:	4b56      	ldr	r3, [pc, #344]	; (8001780 <HAL_RCC_OscConfig+0x4e8>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	4a55      	ldr	r2, [pc, #340]	; (8001780 <HAL_RCC_OscConfig+0x4e8>)
 800162c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001630:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	2b00      	cmp	r3, #0
 8001638:	f000 809b 	beq.w	8001772 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800163c:	4b50      	ldr	r3, [pc, #320]	; (8001780 <HAL_RCC_OscConfig+0x4e8>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f003 030c 	and.w	r3, r3, #12
 8001644:	2b08      	cmp	r3, #8
 8001646:	d05c      	beq.n	8001702 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	2b02      	cmp	r3, #2
 800164e:	d141      	bne.n	80016d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001650:	4b4c      	ldr	r3, [pc, #304]	; (8001784 <HAL_RCC_OscConfig+0x4ec>)
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001656:	f7ff fb45 	bl	8000ce4 <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800165e:	f7ff fb41 	bl	8000ce4 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e081      	b.n	8001774 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001670:	4b43      	ldr	r3, [pc, #268]	; (8001780 <HAL_RCC_OscConfig+0x4e8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1f0      	bne.n	800165e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	69da      	ldr	r2, [r3, #28]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	431a      	orrs	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168a:	019b      	lsls	r3, r3, #6
 800168c:	431a      	orrs	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001692:	085b      	lsrs	r3, r3, #1
 8001694:	3b01      	subs	r3, #1
 8001696:	041b      	lsls	r3, r3, #16
 8001698:	431a      	orrs	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169e:	061b      	lsls	r3, r3, #24
 80016a0:	4937      	ldr	r1, [pc, #220]	; (8001780 <HAL_RCC_OscConfig+0x4e8>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016a6:	4b37      	ldr	r3, [pc, #220]	; (8001784 <HAL_RCC_OscConfig+0x4ec>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ac:	f7ff fb1a 	bl	8000ce4 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b4:	f7ff fb16 	bl	8000ce4 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e056      	b.n	8001774 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c6:	4b2e      	ldr	r3, [pc, #184]	; (8001780 <HAL_RCC_OscConfig+0x4e8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f0      	beq.n	80016b4 <HAL_RCC_OscConfig+0x41c>
 80016d2:	e04e      	b.n	8001772 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016d4:	4b2b      	ldr	r3, [pc, #172]	; (8001784 <HAL_RCC_OscConfig+0x4ec>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016da:	f7ff fb03 	bl	8000ce4 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e2:	f7ff faff 	bl	8000ce4 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e03f      	b.n	8001774 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016f4:	4b22      	ldr	r3, [pc, #136]	; (8001780 <HAL_RCC_OscConfig+0x4e8>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1f0      	bne.n	80016e2 <HAL_RCC_OscConfig+0x44a>
 8001700:	e037      	b.n	8001772 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d101      	bne.n	800170e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e032      	b.n	8001774 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800170e:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <HAL_RCC_OscConfig+0x4e8>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d028      	beq.n	800176e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001726:	429a      	cmp	r2, r3
 8001728:	d121      	bne.n	800176e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001734:	429a      	cmp	r2, r3
 8001736:	d11a      	bne.n	800176e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001738:	68fa      	ldr	r2, [r7, #12]
 800173a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800173e:	4013      	ands	r3, r2
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001744:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001746:	4293      	cmp	r3, r2
 8001748:	d111      	bne.n	800176e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001754:	085b      	lsrs	r3, r3, #1
 8001756:	3b01      	subs	r3, #1
 8001758:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800175a:	429a      	cmp	r2, r3
 800175c:	d107      	bne.n	800176e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001768:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800176a:	429a      	cmp	r2, r3
 800176c:	d001      	beq.n	8001772 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e000      	b.n	8001774 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40007000 	.word	0x40007000
 8001780:	40023800 	.word	0x40023800
 8001784:	42470060 	.word	0x42470060

08001788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d101      	bne.n	800179c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e0cc      	b.n	8001936 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800179c:	4b68      	ldr	r3, [pc, #416]	; (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0307 	and.w	r3, r3, #7
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d90c      	bls.n	80017c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017aa:	4b65      	ldr	r3, [pc, #404]	; (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b2:	4b63      	ldr	r3, [pc, #396]	; (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d001      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e0b8      	b.n	8001936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d020      	beq.n	8001812 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d005      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017dc:	4b59      	ldr	r3, [pc, #356]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	4a58      	ldr	r2, [pc, #352]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0308 	and.w	r3, r3, #8
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d005      	beq.n	8001800 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017f4:	4b53      	ldr	r3, [pc, #332]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	4a52      	ldr	r2, [pc, #328]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001800:	4b50      	ldr	r3, [pc, #320]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	494d      	ldr	r1, [pc, #308]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	4313      	orrs	r3, r2
 8001810:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	d044      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d107      	bne.n	8001836 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001826:	4b47      	ldr	r3, [pc, #284]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d119      	bne.n	8001866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e07f      	b.n	8001936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b02      	cmp	r3, #2
 800183c:	d003      	beq.n	8001846 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001842:	2b03      	cmp	r3, #3
 8001844:	d107      	bne.n	8001856 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001846:	4b3f      	ldr	r3, [pc, #252]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d109      	bne.n	8001866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e06f      	b.n	8001936 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001856:	4b3b      	ldr	r3, [pc, #236]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e067      	b.n	8001936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001866:	4b37      	ldr	r3, [pc, #220]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f023 0203 	bic.w	r2, r3, #3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	4934      	ldr	r1, [pc, #208]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	4313      	orrs	r3, r2
 8001876:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001878:	f7ff fa34 	bl	8000ce4 <HAL_GetTick>
 800187c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187e:	e00a      	b.n	8001896 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001880:	f7ff fa30 	bl	8000ce4 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	f241 3288 	movw	r2, #5000	; 0x1388
 800188e:	4293      	cmp	r3, r2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e04f      	b.n	8001936 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001896:	4b2b      	ldr	r3, [pc, #172]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 020c 	and.w	r2, r3, #12
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d1eb      	bne.n	8001880 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018a8:	4b25      	ldr	r3, [pc, #148]	; (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d20c      	bcs.n	80018d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b6:	4b22      	ldr	r3, [pc, #136]	; (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018be:	4b20      	ldr	r3, [pc, #128]	; (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d001      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e032      	b.n	8001936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d008      	beq.n	80018ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018dc:	4b19      	ldr	r3, [pc, #100]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	4916      	ldr	r1, [pc, #88]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0308 	and.w	r3, r3, #8
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d009      	beq.n	800190e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018fa:	4b12      	ldr	r3, [pc, #72]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	490e      	ldr	r1, [pc, #56]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	4313      	orrs	r3, r2
 800190c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800190e:	f000 f821 	bl	8001954 <HAL_RCC_GetSysClockFreq>
 8001912:	4602      	mov	r2, r0
 8001914:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	091b      	lsrs	r3, r3, #4
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	490a      	ldr	r1, [pc, #40]	; (8001948 <HAL_RCC_ClockConfig+0x1c0>)
 8001920:	5ccb      	ldrb	r3, [r1, r3]
 8001922:	fa22 f303 	lsr.w	r3, r2, r3
 8001926:	4a09      	ldr	r2, [pc, #36]	; (800194c <HAL_RCC_ClockConfig+0x1c4>)
 8001928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800192a:	4b09      	ldr	r3, [pc, #36]	; (8001950 <HAL_RCC_ClockConfig+0x1c8>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff f8ec 	bl	8000b0c <HAL_InitTick>

  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40023c00 	.word	0x40023c00
 8001944:	40023800 	.word	0x40023800
 8001948:	08007604 	.word	0x08007604
 800194c:	20000000 	.word	0x20000000
 8001950:	20000004 	.word	0x20000004

08001954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001954:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001958:	b084      	sub	sp, #16
 800195a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800195c:	2300      	movs	r3, #0
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	2300      	movs	r3, #0
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	2300      	movs	r3, #0
 8001966:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800196c:	4b67      	ldr	r3, [pc, #412]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 030c 	and.w	r3, r3, #12
 8001974:	2b08      	cmp	r3, #8
 8001976:	d00d      	beq.n	8001994 <HAL_RCC_GetSysClockFreq+0x40>
 8001978:	2b08      	cmp	r3, #8
 800197a:	f200 80bd 	bhi.w	8001af8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800197e:	2b00      	cmp	r3, #0
 8001980:	d002      	beq.n	8001988 <HAL_RCC_GetSysClockFreq+0x34>
 8001982:	2b04      	cmp	r3, #4
 8001984:	d003      	beq.n	800198e <HAL_RCC_GetSysClockFreq+0x3a>
 8001986:	e0b7      	b.n	8001af8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001988:	4b61      	ldr	r3, [pc, #388]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800198a:	60bb      	str	r3, [r7, #8]
       break;
 800198c:	e0b7      	b.n	8001afe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800198e:	4b61      	ldr	r3, [pc, #388]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001990:	60bb      	str	r3, [r7, #8]
      break;
 8001992:	e0b4      	b.n	8001afe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001994:	4b5d      	ldr	r3, [pc, #372]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800199c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800199e:	4b5b      	ldr	r3, [pc, #364]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d04d      	beq.n	8001a46 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019aa:	4b58      	ldr	r3, [pc, #352]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	099b      	lsrs	r3, r3, #6
 80019b0:	461a      	mov	r2, r3
 80019b2:	f04f 0300 	mov.w	r3, #0
 80019b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019ba:	f04f 0100 	mov.w	r1, #0
 80019be:	ea02 0800 	and.w	r8, r2, r0
 80019c2:	ea03 0901 	and.w	r9, r3, r1
 80019c6:	4640      	mov	r0, r8
 80019c8:	4649      	mov	r1, r9
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	014b      	lsls	r3, r1, #5
 80019d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019d8:	0142      	lsls	r2, r0, #5
 80019da:	4610      	mov	r0, r2
 80019dc:	4619      	mov	r1, r3
 80019de:	ebb0 0008 	subs.w	r0, r0, r8
 80019e2:	eb61 0109 	sbc.w	r1, r1, r9
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	f04f 0300 	mov.w	r3, #0
 80019ee:	018b      	lsls	r3, r1, #6
 80019f0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019f4:	0182      	lsls	r2, r0, #6
 80019f6:	1a12      	subs	r2, r2, r0
 80019f8:	eb63 0301 	sbc.w	r3, r3, r1
 80019fc:	f04f 0000 	mov.w	r0, #0
 8001a00:	f04f 0100 	mov.w	r1, #0
 8001a04:	00d9      	lsls	r1, r3, #3
 8001a06:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a0a:	00d0      	lsls	r0, r2, #3
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	eb12 0208 	adds.w	r2, r2, r8
 8001a14:	eb43 0309 	adc.w	r3, r3, r9
 8001a18:	f04f 0000 	mov.w	r0, #0
 8001a1c:	f04f 0100 	mov.w	r1, #0
 8001a20:	0259      	lsls	r1, r3, #9
 8001a22:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001a26:	0250      	lsls	r0, r2, #9
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	4619      	mov	r1, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	461a      	mov	r2, r3
 8001a34:	f04f 0300 	mov.w	r3, #0
 8001a38:	f7fe fc14 	bl	8000264 <__aeabi_uldivmod>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4613      	mov	r3, r2
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	e04a      	b.n	8001adc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a46:	4b31      	ldr	r3, [pc, #196]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	099b      	lsrs	r3, r3, #6
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	f04f 0300 	mov.w	r3, #0
 8001a52:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a56:	f04f 0100 	mov.w	r1, #0
 8001a5a:	ea02 0400 	and.w	r4, r2, r0
 8001a5e:	ea03 0501 	and.w	r5, r3, r1
 8001a62:	4620      	mov	r0, r4
 8001a64:	4629      	mov	r1, r5
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	f04f 0300 	mov.w	r3, #0
 8001a6e:	014b      	lsls	r3, r1, #5
 8001a70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a74:	0142      	lsls	r2, r0, #5
 8001a76:	4610      	mov	r0, r2
 8001a78:	4619      	mov	r1, r3
 8001a7a:	1b00      	subs	r0, r0, r4
 8001a7c:	eb61 0105 	sbc.w	r1, r1, r5
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	f04f 0300 	mov.w	r3, #0
 8001a88:	018b      	lsls	r3, r1, #6
 8001a8a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a8e:	0182      	lsls	r2, r0, #6
 8001a90:	1a12      	subs	r2, r2, r0
 8001a92:	eb63 0301 	sbc.w	r3, r3, r1
 8001a96:	f04f 0000 	mov.w	r0, #0
 8001a9a:	f04f 0100 	mov.w	r1, #0
 8001a9e:	00d9      	lsls	r1, r3, #3
 8001aa0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001aa4:	00d0      	lsls	r0, r2, #3
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	1912      	adds	r2, r2, r4
 8001aac:	eb45 0303 	adc.w	r3, r5, r3
 8001ab0:	f04f 0000 	mov.w	r0, #0
 8001ab4:	f04f 0100 	mov.w	r1, #0
 8001ab8:	0299      	lsls	r1, r3, #10
 8001aba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001abe:	0290      	lsls	r0, r2, #10
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4610      	mov	r0, r2
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	461a      	mov	r2, r3
 8001acc:	f04f 0300 	mov.w	r3, #0
 8001ad0:	f7fe fbc8 	bl	8000264 <__aeabi_uldivmod>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4613      	mov	r3, r2
 8001ada:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	0c1b      	lsrs	r3, r3, #16
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af4:	60bb      	str	r3, [r7, #8]
      break;
 8001af6:	e002      	b.n	8001afe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001afa:	60bb      	str	r3, [r7, #8]
      break;
 8001afc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001afe:	68bb      	ldr	r3, [r7, #8]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	00f42400 	.word	0x00f42400
 8001b14:	007a1200 	.word	0x007a1200

08001b18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b1c:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000000 	.word	0x20000000

08001b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b34:	f7ff fff0 	bl	8001b18 <HAL_RCC_GetHCLKFreq>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	0a9b      	lsrs	r3, r3, #10
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	4903      	ldr	r1, [pc, #12]	; (8001b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b46:	5ccb      	ldrb	r3, [r1, r3]
 8001b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40023800 	.word	0x40023800
 8001b54:	08007614 	.word	0x08007614

08001b58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	220f      	movs	r2, #15
 8001b66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b68:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 0203 	and.w	r2, r3, #3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b74:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b80:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b8c:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	08db      	lsrs	r3, r3, #3
 8001b92:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b9a:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <HAL_RCC_GetClockConfig+0x60>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0207 	and.w	r2, r3, #7
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	601a      	str	r2, [r3, #0]
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40023c00 	.word	0x40023c00

08001bbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e041      	b.n	8001c52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d106      	bne.n	8001be8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f839 	bl	8001c5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2202      	movs	r2, #2
 8001bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3304      	adds	r3, #4
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	f000 f9d8 	bl	8001fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
	...

08001c70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d001      	beq.n	8001c88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e04e      	b.n	8001d26 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68da      	ldr	r2, [r3, #12]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0201 	orr.w	r2, r2, #1
 8001c9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a23      	ldr	r2, [pc, #140]	; (8001d34 <HAL_TIM_Base_Start_IT+0xc4>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d022      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0x80>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cb2:	d01d      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0x80>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a1f      	ldr	r2, [pc, #124]	; (8001d38 <HAL_TIM_Base_Start_IT+0xc8>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d018      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0x80>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a1e      	ldr	r2, [pc, #120]	; (8001d3c <HAL_TIM_Base_Start_IT+0xcc>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d013      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0x80>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a1c      	ldr	r2, [pc, #112]	; (8001d40 <HAL_TIM_Base_Start_IT+0xd0>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d00e      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0x80>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a1b      	ldr	r2, [pc, #108]	; (8001d44 <HAL_TIM_Base_Start_IT+0xd4>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d009      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0x80>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a19      	ldr	r2, [pc, #100]	; (8001d48 <HAL_TIM_Base_Start_IT+0xd8>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d004      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0x80>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a18      	ldr	r2, [pc, #96]	; (8001d4c <HAL_TIM_Base_Start_IT+0xdc>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d111      	bne.n	8001d14 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b06      	cmp	r3, #6
 8001d00:	d010      	beq.n	8001d24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f042 0201 	orr.w	r2, r2, #1
 8001d10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d12:	e007      	b.n	8001d24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f042 0201 	orr.w	r2, r2, #1
 8001d22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40010000 	.word	0x40010000
 8001d38:	40000400 	.word	0x40000400
 8001d3c:	40000800 	.word	0x40000800
 8001d40:	40000c00 	.word	0x40000c00
 8001d44:	40010400 	.word	0x40010400
 8001d48:	40014000 	.word	0x40014000
 8001d4c:	40001800 	.word	0x40001800

08001d50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d122      	bne.n	8001dac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d11b      	bne.n	8001dac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f06f 0202 	mvn.w	r2, #2
 8001d7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2201      	movs	r2, #1
 8001d82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f8ee 	bl	8001f74 <HAL_TIM_IC_CaptureCallback>
 8001d98:	e005      	b.n	8001da6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f8e0 	bl	8001f60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f8f1 	bl	8001f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d122      	bne.n	8001e00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d11b      	bne.n	8001e00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f06f 0204 	mvn.w	r2, #4
 8001dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f8c4 	bl	8001f74 <HAL_TIM_IC_CaptureCallback>
 8001dec:	e005      	b.n	8001dfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f8b6 	bl	8001f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f8c7 	bl	8001f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	2b08      	cmp	r3, #8
 8001e0c:	d122      	bne.n	8001e54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	2b08      	cmp	r3, #8
 8001e1a:	d11b      	bne.n	8001e54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f06f 0208 	mvn.w	r2, #8
 8001e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2204      	movs	r2, #4
 8001e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f89a 	bl	8001f74 <HAL_TIM_IC_CaptureCallback>
 8001e40:	e005      	b.n	8001e4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f88c 	bl	8001f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f89d 	bl	8001f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	f003 0310 	and.w	r3, r3, #16
 8001e5e:	2b10      	cmp	r3, #16
 8001e60:	d122      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	f003 0310 	and.w	r3, r3, #16
 8001e6c:	2b10      	cmp	r3, #16
 8001e6e:	d11b      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f06f 0210 	mvn.w	r2, #16
 8001e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2208      	movs	r2, #8
 8001e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f870 	bl	8001f74 <HAL_TIM_IC_CaptureCallback>
 8001e94:	e005      	b.n	8001ea2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f862 	bl	8001f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 f873 	bl	8001f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d10e      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d107      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f06f 0201 	mvn.w	r2, #1
 8001ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7fe fddc 	bl	8000a8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ede:	2b80      	cmp	r3, #128	; 0x80
 8001ee0:	d10e      	bne.n	8001f00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eec:	2b80      	cmp	r3, #128	; 0x80
 8001eee:	d107      	bne.n	8001f00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f902 	bl	8002104 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f0a:	2b40      	cmp	r3, #64	; 0x40
 8001f0c:	d10e      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f18:	2b40      	cmp	r3, #64	; 0x40
 8001f1a:	d107      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f838 	bl	8001f9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	f003 0320 	and.w	r3, r3, #32
 8001f36:	2b20      	cmp	r3, #32
 8001f38:	d10e      	bne.n	8001f58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f003 0320 	and.w	r3, r3, #32
 8001f44:	2b20      	cmp	r3, #32
 8001f46:	d107      	bne.n	8001f58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f06f 0220 	mvn.w	r2, #32
 8001f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f8cc 	bl	80020f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f58:	bf00      	nop
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a40      	ldr	r2, [pc, #256]	; (80020c4 <TIM_Base_SetConfig+0x114>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d013      	beq.n	8001ff0 <TIM_Base_SetConfig+0x40>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fce:	d00f      	beq.n	8001ff0 <TIM_Base_SetConfig+0x40>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a3d      	ldr	r2, [pc, #244]	; (80020c8 <TIM_Base_SetConfig+0x118>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d00b      	beq.n	8001ff0 <TIM_Base_SetConfig+0x40>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a3c      	ldr	r2, [pc, #240]	; (80020cc <TIM_Base_SetConfig+0x11c>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d007      	beq.n	8001ff0 <TIM_Base_SetConfig+0x40>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a3b      	ldr	r2, [pc, #236]	; (80020d0 <TIM_Base_SetConfig+0x120>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d003      	beq.n	8001ff0 <TIM_Base_SetConfig+0x40>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a3a      	ldr	r2, [pc, #232]	; (80020d4 <TIM_Base_SetConfig+0x124>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d108      	bne.n	8002002 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a2f      	ldr	r2, [pc, #188]	; (80020c4 <TIM_Base_SetConfig+0x114>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d02b      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002010:	d027      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a2c      	ldr	r2, [pc, #176]	; (80020c8 <TIM_Base_SetConfig+0x118>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d023      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a2b      	ldr	r2, [pc, #172]	; (80020cc <TIM_Base_SetConfig+0x11c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d01f      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a2a      	ldr	r2, [pc, #168]	; (80020d0 <TIM_Base_SetConfig+0x120>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d01b      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a29      	ldr	r2, [pc, #164]	; (80020d4 <TIM_Base_SetConfig+0x124>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d017      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a28      	ldr	r2, [pc, #160]	; (80020d8 <TIM_Base_SetConfig+0x128>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d013      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a27      	ldr	r2, [pc, #156]	; (80020dc <TIM_Base_SetConfig+0x12c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d00f      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a26      	ldr	r2, [pc, #152]	; (80020e0 <TIM_Base_SetConfig+0x130>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d00b      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a25      	ldr	r2, [pc, #148]	; (80020e4 <TIM_Base_SetConfig+0x134>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d007      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a24      	ldr	r2, [pc, #144]	; (80020e8 <TIM_Base_SetConfig+0x138>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d003      	beq.n	8002062 <TIM_Base_SetConfig+0xb2>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a23      	ldr	r2, [pc, #140]	; (80020ec <TIM_Base_SetConfig+0x13c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d108      	bne.n	8002074 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002068:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	4313      	orrs	r3, r2
 8002072:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	4313      	orrs	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a0a      	ldr	r2, [pc, #40]	; (80020c4 <TIM_Base_SetConfig+0x114>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d003      	beq.n	80020a8 <TIM_Base_SetConfig+0xf8>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a0c      	ldr	r2, [pc, #48]	; (80020d4 <TIM_Base_SetConfig+0x124>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d103      	bne.n	80020b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	691a      	ldr	r2, [r3, #16]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	615a      	str	r2, [r3, #20]
}
 80020b6:	bf00      	nop
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40010000 	.word	0x40010000
 80020c8:	40000400 	.word	0x40000400
 80020cc:	40000800 	.word	0x40000800
 80020d0:	40000c00 	.word	0x40000c00
 80020d4:	40010400 	.word	0x40010400
 80020d8:	40014000 	.word	0x40014000
 80020dc:	40014400 	.word	0x40014400
 80020e0:	40014800 	.word	0x40014800
 80020e4:	40001800 	.word	0x40001800
 80020e8:	40001c00 	.word	0x40001c00
 80020ec:	40002000 	.word	0x40002000

080020f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f103 0208 	add.w	r2, r3, #8
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f04f 32ff 	mov.w	r2, #4294967295
 8002130:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f103 0208 	add.w	r2, r3, #8
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f103 0208 	add.w	r2, r3, #8
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002172:	b480      	push	{r7}
 8002174:	b085      	sub	sp, #20
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
 800217a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	1c5a      	adds	r2, r3, #1
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	601a      	str	r2, [r3, #0]
}
 80021ae:	bf00      	nop
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80021ba:	b480      	push	{r7}
 80021bc:	b085      	sub	sp, #20
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d0:	d103      	bne.n	80021da <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	e00c      	b.n	80021f4 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3308      	adds	r3, #8
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	e002      	b.n	80021e8 <vListInsert+0x2e>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d2f6      	bcs.n	80021e2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	1c5a      	adds	r2, r3, #1
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	601a      	str	r2, [r3, #0]
}
 8002220:	bf00      	nop
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6892      	ldr	r2, [r2, #8]
 8002242:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6852      	ldr	r2, [r2, #4]
 800224c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	429a      	cmp	r2, r3
 8002256:	d103      	bne.n	8002260 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	1e5a      	subs	r2, r3, #1
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10a      	bne.n	80022aa <xQueueGenericReset+0x2a>
        __asm volatile
 8002294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002298:	f383 8811 	msr	BASEPRI, r3
 800229c:	f3bf 8f6f 	isb	sy
 80022a0:	f3bf 8f4f 	dsb	sy
 80022a4:	60bb      	str	r3, [r7, #8]
    }
 80022a6:	bf00      	nop
 80022a8:	e7fe      	b.n	80022a8 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80022aa:	f002 f94b 	bl	8004544 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b6:	68f9      	ldr	r1, [r7, #12]
 80022b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022ba:	fb01 f303 	mul.w	r3, r1, r3
 80022be:	441a      	add	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022da:	3b01      	subs	r3, #1
 80022dc:	68f9      	ldr	r1, [r7, #12]
 80022de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022e0:	fb01 f303 	mul.w	r3, r1, r3
 80022e4:	441a      	add	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	22ff      	movs	r2, #255	; 0xff
 80022ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	22ff      	movs	r2, #255	; 0xff
 80022f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d114      	bne.n	800232a <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d01a      	beq.n	800233e <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	3310      	adds	r3, #16
 800230c:	4618      	mov	r0, r3
 800230e:	f001 f9a1 	bl	8003654 <xTaskRemoveFromEventList>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d012      	beq.n	800233e <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <xQueueGenericReset+0xcc>)
 800231a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	f3bf 8f4f 	dsb	sy
 8002324:	f3bf 8f6f 	isb	sy
 8002328:	e009      	b.n	800233e <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	3310      	adds	r3, #16
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff fef2 	bl	8002118 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	3324      	adds	r3, #36	; 0x24
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff feed 	bl	8002118 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800233e:	f002 f931 	bl	80045a4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002342:	2301      	movs	r3, #1
}
 8002344:	4618      	mov	r0, r3
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	e000ed04 	.word	0xe000ed04

08002350 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002350:	b580      	push	{r7, lr}
 8002352:	b08c      	sub	sp, #48	; 0x30
 8002354:	af02      	add	r7, sp, #8
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	4613      	mov	r3, r2
 800235c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10a      	bne.n	800237a <xQueueGenericCreate+0x2a>
        __asm volatile
 8002364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002368:	f383 8811 	msr	BASEPRI, r3
 800236c:	f3bf 8f6f 	isb	sy
 8002370:	f3bf 8f4f 	dsb	sy
 8002374:	61bb      	str	r3, [r7, #24]
    }
 8002376:	bf00      	nop
 8002378:	e7fe      	b.n	8002378 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	68ba      	ldr	r2, [r7, #8]
 800237e:	fb02 f303 	mul.w	r3, r2, r3
 8002382:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d006      	beq.n	8002398 <xQueueGenericCreate+0x48>
 800238a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	429a      	cmp	r2, r3
 8002396:	d101      	bne.n	800239c <xQueueGenericCreate+0x4c>
 8002398:	2301      	movs	r3, #1
 800239a:	e000      	b.n	800239e <xQueueGenericCreate+0x4e>
 800239c:	2300      	movs	r3, #0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10a      	bne.n	80023b8 <xQueueGenericCreate+0x68>
        __asm volatile
 80023a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a6:	f383 8811 	msr	BASEPRI, r3
 80023aa:	f3bf 8f6f 	isb	sy
 80023ae:	f3bf 8f4f 	dsb	sy
 80023b2:	617b      	str	r3, [r7, #20]
    }
 80023b4:	bf00      	nop
 80023b6:	e7fe      	b.n	80023b6 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80023be:	d90a      	bls.n	80023d6 <xQueueGenericCreate+0x86>
        __asm volatile
 80023c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c4:	f383 8811 	msr	BASEPRI, r3
 80023c8:	f3bf 8f6f 	isb	sy
 80023cc:	f3bf 8f4f 	dsb	sy
 80023d0:	613b      	str	r3, [r7, #16]
    }
 80023d2:	bf00      	nop
 80023d4:	e7fe      	b.n	80023d4 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	3350      	adds	r3, #80	; 0x50
 80023da:	4618      	mov	r0, r3
 80023dc:	f002 f9de 	bl	800479c <pvPortMalloc>
 80023e0:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00d      	beq.n	8002404 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80023e8:	6a3b      	ldr	r3, [r7, #32]
 80023ea:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	3350      	adds	r3, #80	; 0x50
 80023f0:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023f2:	79fa      	ldrb	r2, [r7, #7]
 80023f4:	6a3b      	ldr	r3, [r7, #32]
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	4613      	mov	r3, r2
 80023fa:	69fa      	ldr	r2, [r7, #28]
 80023fc:	68b9      	ldr	r1, [r7, #8]
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f000 f805 	bl	800240e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002404:	6a3b      	ldr	r3, [r7, #32]
    }
 8002406:	4618      	mov	r0, r3
 8002408:	3728      	adds	r7, #40	; 0x28
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b084      	sub	sp, #16
 8002412:	af00      	add	r7, sp, #0
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	607a      	str	r2, [r7, #4]
 800241a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d103      	bne.n	800242a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	e002      	b.n	8002430 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	68ba      	ldr	r2, [r7, #8]
 800243a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800243c:	2101      	movs	r1, #1
 800243e:	69b8      	ldr	r0, [r7, #24]
 8002440:	f7ff ff1e 	bl	8002280 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	78fa      	ldrb	r2, [r7, #3]
 8002448:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	68f9      	ldr	r1, [r7, #12]
 8002452:	2073      	movs	r0, #115	; 0x73
 8002454:	f004 f89e 	bl	8006594 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002458:	bf00      	nop
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b090      	sub	sp, #64	; 0x40
 8002464:	af02      	add	r7, sp, #8
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
 800246c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800246e:	2300      	movs	r3, #0
 8002470:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10a      	bne.n	8002492 <xQueueGenericSend+0x32>
        __asm volatile
 800247c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002480:	f383 8811 	msr	BASEPRI, r3
 8002484:	f3bf 8f6f 	isb	sy
 8002488:	f3bf 8f4f 	dsb	sy
 800248c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800248e:	bf00      	nop
 8002490:	e7fe      	b.n	8002490 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d103      	bne.n	80024a0 <xQueueGenericSend+0x40>
 8002498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <xQueueGenericSend+0x44>
 80024a0:	2301      	movs	r3, #1
 80024a2:	e000      	b.n	80024a6 <xQueueGenericSend+0x46>
 80024a4:	2300      	movs	r3, #0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10a      	bne.n	80024c0 <xQueueGenericSend+0x60>
        __asm volatile
 80024aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ae:	f383 8811 	msr	BASEPRI, r3
 80024b2:	f3bf 8f6f 	isb	sy
 80024b6:	f3bf 8f4f 	dsb	sy
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80024bc:	bf00      	nop
 80024be:	e7fe      	b.n	80024be <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d103      	bne.n	80024ce <xQueueGenericSend+0x6e>
 80024c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d101      	bne.n	80024d2 <xQueueGenericSend+0x72>
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <xQueueGenericSend+0x74>
 80024d2:	2300      	movs	r3, #0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10a      	bne.n	80024ee <xQueueGenericSend+0x8e>
        __asm volatile
 80024d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024dc:	f383 8811 	msr	BASEPRI, r3
 80024e0:	f3bf 8f6f 	isb	sy
 80024e4:	f3bf 8f4f 	dsb	sy
 80024e8:	623b      	str	r3, [r7, #32]
    }
 80024ea:	bf00      	nop
 80024ec:	e7fe      	b.n	80024ec <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024ee:	f001 fa53 	bl	8003998 <xTaskGetSchedulerState>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d102      	bne.n	80024fe <xQueueGenericSend+0x9e>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <xQueueGenericSend+0xa2>
 80024fe:	2301      	movs	r3, #1
 8002500:	e000      	b.n	8002504 <xQueueGenericSend+0xa4>
 8002502:	2300      	movs	r3, #0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10a      	bne.n	800251e <xQueueGenericSend+0xbe>
        __asm volatile
 8002508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800250c:	f383 8811 	msr	BASEPRI, r3
 8002510:	f3bf 8f6f 	isb	sy
 8002514:	f3bf 8f4f 	dsb	sy
 8002518:	61fb      	str	r3, [r7, #28]
    }
 800251a:	bf00      	nop
 800251c:	e7fe      	b.n	800251c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800251e:	f002 f811 	bl	8004544 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800252a:	429a      	cmp	r2, r3
 800252c:	d302      	bcc.n	8002534 <xQueueGenericSend+0xd4>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	2b02      	cmp	r3, #2
 8002532:	d136      	bne.n	80025a2 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8002534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002536:	4618      	mov	r0, r3
 8002538:	f004 fdba 	bl	80070b0 <SEGGER_SYSVIEW_ShrinkId>
 800253c:	68ba      	ldr	r2, [r7, #8]
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	460b      	mov	r3, r1
 8002546:	4601      	mov	r1, r0
 8002548:	205a      	movs	r0, #90	; 0x5a
 800254a:	f004 f899 	bl	8006680 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	68b9      	ldr	r1, [r7, #8]
 8002552:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002554:	f000 fa78 	bl	8002a48 <prvCopyDataToQueue>
 8002558:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800255a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	2b00      	cmp	r3, #0
 8002560:	d010      	beq.n	8002584 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002564:	3324      	adds	r3, #36	; 0x24
 8002566:	4618      	mov	r0, r3
 8002568:	f001 f874 	bl	8003654 <xTaskRemoveFromEventList>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d013      	beq.n	800259a <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002572:	4b4d      	ldr	r3, [pc, #308]	; (80026a8 <xQueueGenericSend+0x248>)
 8002574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	f3bf 8f4f 	dsb	sy
 800257e:	f3bf 8f6f 	isb	sy
 8002582:	e00a      	b.n	800259a <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002586:	2b00      	cmp	r3, #0
 8002588:	d007      	beq.n	800259a <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800258a:	4b47      	ldr	r3, [pc, #284]	; (80026a8 <xQueueGenericSend+0x248>)
 800258c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	f3bf 8f4f 	dsb	sy
 8002596:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800259a:	f002 f803 	bl	80045a4 <vPortExitCritical>
                return pdPASS;
 800259e:	2301      	movs	r3, #1
 80025a0:	e07d      	b.n	800269e <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d110      	bne.n	80025ca <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80025a8:	f001 fffc 	bl	80045a4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80025ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ae:	4618      	mov	r0, r3
 80025b0:	f004 fd7e 	bl	80070b0 <SEGGER_SYSVIEW_ShrinkId>
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	460b      	mov	r3, r1
 80025be:	4601      	mov	r1, r0
 80025c0:	205a      	movs	r0, #90	; 0x5a
 80025c2:	f004 f85d 	bl	8006680 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	e069      	b.n	800269e <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80025ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d106      	bne.n	80025de <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80025d0:	f107 0314 	add.w	r3, r7, #20
 80025d4:	4618      	mov	r0, r3
 80025d6:	f001 f8a3 	bl	8003720 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80025da:	2301      	movs	r3, #1
 80025dc:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80025de:	f001 ffe1 	bl	80045a4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80025e2:	f000 fdef 	bl	80031c4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80025e6:	f001 ffad 	bl	8004544 <vPortEnterCritical>
 80025ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025f0:	b25b      	sxtb	r3, r3
 80025f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f6:	d103      	bne.n	8002600 <xQueueGenericSend+0x1a0>
 80025f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002602:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002606:	b25b      	sxtb	r3, r3
 8002608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260c:	d103      	bne.n	8002616 <xQueueGenericSend+0x1b6>
 800260e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002616:	f001 ffc5 	bl	80045a4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800261a:	1d3a      	adds	r2, r7, #4
 800261c:	f107 0314 	add.w	r3, r7, #20
 8002620:	4611      	mov	r1, r2
 8002622:	4618      	mov	r0, r3
 8002624:	f001 f892 	bl	800374c <xTaskCheckForTimeOut>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d124      	bne.n	8002678 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800262e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002630:	f000 fb02 	bl	8002c38 <prvIsQueueFull>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d018      	beq.n	800266c <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800263a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263c:	3310      	adds	r3, #16
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	4611      	mov	r1, r2
 8002642:	4618      	mov	r0, r3
 8002644:	f000 ffb4 	bl	80035b0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002648:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800264a:	f000 fa8d 	bl	8002b68 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800264e:	f000 fdc7 	bl	80031e0 <xTaskResumeAll>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	f47f af62 	bne.w	800251e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800265a:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <xQueueGenericSend+0x248>)
 800265c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	f3bf 8f4f 	dsb	sy
 8002666:	f3bf 8f6f 	isb	sy
 800266a:	e758      	b.n	800251e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800266c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800266e:	f000 fa7b 	bl	8002b68 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002672:	f000 fdb5 	bl	80031e0 <xTaskResumeAll>
 8002676:	e752      	b.n	800251e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002678:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800267a:	f000 fa75 	bl	8002b68 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800267e:	f000 fdaf 	bl	80031e0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002684:	4618      	mov	r0, r3
 8002686:	f004 fd13 	bl	80070b0 <SEGGER_SYSVIEW_ShrinkId>
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	460b      	mov	r3, r1
 8002694:	4601      	mov	r1, r0
 8002696:	205a      	movs	r0, #90	; 0x5a
 8002698:	f003 fff2 	bl	8006680 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 800269c:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3738      	adds	r7, #56	; 0x38
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	e000ed04 	.word	0xe000ed04

080026ac <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b090      	sub	sp, #64	; 0x40
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
 80026b8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80026be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10a      	bne.n	80026da <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80026c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c8:	f383 8811 	msr	BASEPRI, r3
 80026cc:	f3bf 8f6f 	isb	sy
 80026d0:	f3bf 8f4f 	dsb	sy
 80026d4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80026d6:	bf00      	nop
 80026d8:	e7fe      	b.n	80026d8 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d103      	bne.n	80026e8 <xQueueGenericSendFromISR+0x3c>
 80026e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <xQueueGenericSendFromISR+0x40>
 80026e8:	2301      	movs	r3, #1
 80026ea:	e000      	b.n	80026ee <xQueueGenericSendFromISR+0x42>
 80026ec:	2300      	movs	r3, #0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10a      	bne.n	8002708 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80026f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f6:	f383 8811 	msr	BASEPRI, r3
 80026fa:	f3bf 8f6f 	isb	sy
 80026fe:	f3bf 8f4f 	dsb	sy
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002704:	bf00      	nop
 8002706:	e7fe      	b.n	8002706 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	2b02      	cmp	r3, #2
 800270c:	d103      	bne.n	8002716 <xQueueGenericSendFromISR+0x6a>
 800270e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <xQueueGenericSendFromISR+0x6e>
 8002716:	2301      	movs	r3, #1
 8002718:	e000      	b.n	800271c <xQueueGenericSendFromISR+0x70>
 800271a:	2300      	movs	r3, #0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10a      	bne.n	8002736 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002724:	f383 8811 	msr	BASEPRI, r3
 8002728:	f3bf 8f6f 	isb	sy
 800272c:	f3bf 8f4f 	dsb	sy
 8002730:	623b      	str	r3, [r7, #32]
    }
 8002732:	bf00      	nop
 8002734:	e7fe      	b.n	8002734 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002736:	f001 fff1 	bl	800471c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800273a:	f3ef 8211 	mrs	r2, BASEPRI
 800273e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002742:	f383 8811 	msr	BASEPRI, r3
 8002746:	f3bf 8f6f 	isb	sy
 800274a:	f3bf 8f4f 	dsb	sy
 800274e:	61fa      	str	r2, [r7, #28]
 8002750:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002752:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002754:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002758:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800275a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275e:	429a      	cmp	r2, r3
 8002760:	d302      	bcc.n	8002768 <xQueueGenericSendFromISR+0xbc>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	2b02      	cmp	r3, #2
 8002766:	d148      	bne.n	80027fa <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800276a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800276e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002776:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800277a:	4618      	mov	r0, r3
 800277c:	f004 fc98 	bl	80070b0 <SEGGER_SYSVIEW_ShrinkId>
 8002780:	4601      	mov	r1, r0
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	461a      	mov	r2, r3
 8002786:	2060      	movs	r0, #96	; 0x60
 8002788:	f003 feaa 	bl	80064e0 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	68b9      	ldr	r1, [r7, #8]
 8002790:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002792:	f000 f959 	bl	8002a48 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002796:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800279a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800279e:	d112      	bne.n	80027c6 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d025      	beq.n	80027f4 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027aa:	3324      	adds	r3, #36	; 0x24
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 ff51 	bl	8003654 <xTaskRemoveFromEventList>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d01d      	beq.n	80027f4 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d01a      	beq.n	80027f4 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	e016      	b.n	80027f4 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80027c6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80027ca:	2b7f      	cmp	r3, #127	; 0x7f
 80027cc:	d10a      	bne.n	80027e4 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 80027ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d2:	f383 8811 	msr	BASEPRI, r3
 80027d6:	f3bf 8f6f 	isb	sy
 80027da:	f3bf 8f4f 	dsb	sy
 80027de:	617b      	str	r3, [r7, #20]
    }
 80027e0:	bf00      	nop
 80027e2:	e7fe      	b.n	80027e2 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80027e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80027e8:	3301      	adds	r3, #1
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	b25a      	sxtb	r2, r3
 80027ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80027f4:	2301      	movs	r3, #1
 80027f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80027f8:	e00b      	b.n	8002812 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80027fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027fc:	4618      	mov	r0, r3
 80027fe:	f004 fc57 	bl	80070b0 <SEGGER_SYSVIEW_ShrinkId>
 8002802:	4601      	mov	r1, r0
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	461a      	mov	r2, r3
 8002808:	2060      	movs	r0, #96	; 0x60
 800280a:	f003 fe69 	bl	80064e0 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800280e:	2300      	movs	r3, #0
 8002810:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002814:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800281c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800281e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002820:	4618      	mov	r0, r3
 8002822:	3740      	adds	r7, #64	; 0x40
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002828:	b590      	push	{r4, r7, lr}
 800282a:	b08f      	sub	sp, #60	; 0x3c
 800282c:	af02      	add	r7, sp, #8
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002834:	2300      	movs	r3, #0
 8002836:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800283c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10a      	bne.n	8002858 <xQueueReceive+0x30>
        __asm volatile
 8002842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002846:	f383 8811 	msr	BASEPRI, r3
 800284a:	f3bf 8f6f 	isb	sy
 800284e:	f3bf 8f4f 	dsb	sy
 8002852:	623b      	str	r3, [r7, #32]
    }
 8002854:	bf00      	nop
 8002856:	e7fe      	b.n	8002856 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d103      	bne.n	8002866 <xQueueReceive+0x3e>
 800285e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <xQueueReceive+0x42>
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <xQueueReceive+0x44>
 800286a:	2300      	movs	r3, #0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10a      	bne.n	8002886 <xQueueReceive+0x5e>
        __asm volatile
 8002870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002874:	f383 8811 	msr	BASEPRI, r3
 8002878:	f3bf 8f6f 	isb	sy
 800287c:	f3bf 8f4f 	dsb	sy
 8002880:	61fb      	str	r3, [r7, #28]
    }
 8002882:	bf00      	nop
 8002884:	e7fe      	b.n	8002884 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002886:	f001 f887 	bl	8003998 <xTaskGetSchedulerState>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d102      	bne.n	8002896 <xQueueReceive+0x6e>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <xQueueReceive+0x72>
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <xQueueReceive+0x74>
 800289a:	2300      	movs	r3, #0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10a      	bne.n	80028b6 <xQueueReceive+0x8e>
        __asm volatile
 80028a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a4:	f383 8811 	msr	BASEPRI, r3
 80028a8:	f3bf 8f6f 	isb	sy
 80028ac:	f3bf 8f4f 	dsb	sy
 80028b0:	61bb      	str	r3, [r7, #24]
    }
 80028b2:	bf00      	nop
 80028b4:	e7fe      	b.n	80028b4 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80028b6:	f001 fe45 	bl	8004544 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028be:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d02f      	beq.n	8002926 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80028c6:	68b9      	ldr	r1, [r7, #8]
 80028c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028ca:	f000 f927 	bl	8002b1c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80028ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d0:	4618      	mov	r0, r3
 80028d2:	f004 fbed 	bl	80070b0 <SEGGER_SYSVIEW_ShrinkId>
 80028d6:	4604      	mov	r4, r0
 80028d8:	2000      	movs	r0, #0
 80028da:	f004 fbe9 	bl	80070b0 <SEGGER_SYSVIEW_ShrinkId>
 80028de:	4602      	mov	r2, r0
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2101      	movs	r1, #1
 80028e4:	9100      	str	r1, [sp, #0]
 80028e6:	4621      	mov	r1, r4
 80028e8:	205c      	movs	r0, #92	; 0x5c
 80028ea:	f003 fec9 	bl	8006680 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	1e5a      	subs	r2, r3, #1
 80028f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00f      	beq.n	800291e <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002900:	3310      	adds	r3, #16
 8002902:	4618      	mov	r0, r3
 8002904:	f000 fea6 	bl	8003654 <xTaskRemoveFromEventList>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d007      	beq.n	800291e <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800290e:	4b4d      	ldr	r3, [pc, #308]	; (8002a44 <xQueueReceive+0x21c>)
 8002910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	f3bf 8f4f 	dsb	sy
 800291a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800291e:	f001 fe41 	bl	80045a4 <vPortExitCritical>
                return pdPASS;
 8002922:	2301      	movs	r3, #1
 8002924:	e08a      	b.n	8002a3c <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d113      	bne.n	8002954 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800292c:	f001 fe3a 	bl	80045a4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002932:	4618      	mov	r0, r3
 8002934:	f004 fbbc 	bl	80070b0 <SEGGER_SYSVIEW_ShrinkId>
 8002938:	4604      	mov	r4, r0
 800293a:	2000      	movs	r0, #0
 800293c:	f004 fbb8 	bl	80070b0 <SEGGER_SYSVIEW_ShrinkId>
 8002940:	4602      	mov	r2, r0
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2101      	movs	r1, #1
 8002946:	9100      	str	r1, [sp, #0]
 8002948:	4621      	mov	r1, r4
 800294a:	205c      	movs	r0, #92	; 0x5c
 800294c:	f003 fe98 	bl	8006680 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002950:	2300      	movs	r3, #0
 8002952:	e073      	b.n	8002a3c <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800295a:	f107 0310 	add.w	r3, r7, #16
 800295e:	4618      	mov	r0, r3
 8002960:	f000 fede 	bl	8003720 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002964:	2301      	movs	r3, #1
 8002966:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002968:	f001 fe1c 	bl	80045a4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800296c:	f000 fc2a 	bl	80031c4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002970:	f001 fde8 	bl	8004544 <vPortEnterCritical>
 8002974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002976:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800297a:	b25b      	sxtb	r3, r3
 800297c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002980:	d103      	bne.n	800298a <xQueueReceive+0x162>
 8002982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800298a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002990:	b25b      	sxtb	r3, r3
 8002992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002996:	d103      	bne.n	80029a0 <xQueueReceive+0x178>
 8002998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029a0:	f001 fe00 	bl	80045a4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029a4:	1d3a      	adds	r2, r7, #4
 80029a6:	f107 0310 	add.w	r3, r7, #16
 80029aa:	4611      	mov	r1, r2
 80029ac:	4618      	mov	r0, r3
 80029ae:	f000 fecd 	bl	800374c <xTaskCheckForTimeOut>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d124      	bne.n	8002a02 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029ba:	f000 f927 	bl	8002c0c <prvIsQueueEmpty>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d018      	beq.n	80029f6 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80029c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c6:	3324      	adds	r3, #36	; 0x24
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	4611      	mov	r1, r2
 80029cc:	4618      	mov	r0, r3
 80029ce:	f000 fdef 	bl	80035b0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80029d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029d4:	f000 f8c8 	bl	8002b68 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80029d8:	f000 fc02 	bl	80031e0 <xTaskResumeAll>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f47f af69 	bne.w	80028b6 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80029e4:	4b17      	ldr	r3, [pc, #92]	; (8002a44 <xQueueReceive+0x21c>)
 80029e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	f3bf 8f4f 	dsb	sy
 80029f0:	f3bf 8f6f 	isb	sy
 80029f4:	e75f      	b.n	80028b6 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80029f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029f8:	f000 f8b6 	bl	8002b68 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80029fc:	f000 fbf0 	bl	80031e0 <xTaskResumeAll>
 8002a00:	e759      	b.n	80028b6 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002a02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a04:	f000 f8b0 	bl	8002b68 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002a08:	f000 fbea 	bl	80031e0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a0e:	f000 f8fd 	bl	8002c0c <prvIsQueueEmpty>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f43f af4e 	beq.w	80028b6 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f004 fb47 	bl	80070b0 <SEGGER_SYSVIEW_ShrinkId>
 8002a22:	4604      	mov	r4, r0
 8002a24:	2000      	movs	r0, #0
 8002a26:	f004 fb43 	bl	80070b0 <SEGGER_SYSVIEW_ShrinkId>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2101      	movs	r1, #1
 8002a30:	9100      	str	r1, [sp, #0]
 8002a32:	4621      	mov	r1, r4
 8002a34:	205c      	movs	r0, #92	; 0x5c
 8002a36:	f003 fe23 	bl	8006680 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002a3a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3734      	adds	r7, #52	; 0x34
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd90      	pop	{r4, r7, pc}
 8002a44:	e000ed04 	.word	0xe000ed04

08002a48 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10d      	bne.n	8002a82 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d14d      	bne.n	8002b0a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 ffae 	bl	80039d4 <xTaskPriorityDisinherit>
 8002a78:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	609a      	str	r2, [r3, #8]
 8002a80:	e043      	b.n	8002b0a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d119      	bne.n	8002abc <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6858      	ldr	r0, [r3, #4]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	461a      	mov	r2, r3
 8002a92:	68b9      	ldr	r1, [r7, #8]
 8002a94:	f004 fcec 	bl	8007470 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	441a      	add	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d32b      	bcc.n	8002b0a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	605a      	str	r2, [r3, #4]
 8002aba:	e026      	b.n	8002b0a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	68d8      	ldr	r0, [r3, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	68b9      	ldr	r1, [r7, #8]
 8002ac8:	f004 fcd2 	bl	8007470 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad4:	425b      	negs	r3, r3
 8002ad6:	441a      	add	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d207      	bcs.n	8002af8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	425b      	negs	r3, r3
 8002af2:	441a      	add	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d105      	bne.n	8002b0a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	3b01      	subs	r3, #1
 8002b08:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1c5a      	adds	r2, r3, #1
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002b12:	697b      	ldr	r3, [r7, #20]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d018      	beq.n	8002b60 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68da      	ldr	r2, [r3, #12]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	441a      	add	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68da      	ldr	r2, [r3, #12]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d303      	bcc.n	8002b50 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68d9      	ldr	r1, [r3, #12]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b58:	461a      	mov	r2, r3
 8002b5a:	6838      	ldr	r0, [r7, #0]
 8002b5c:	f004 fc88 	bl	8007470 <memcpy>
    }
}
 8002b60:	bf00      	nop
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002b70:	f001 fce8 	bl	8004544 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b7a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b7c:	e011      	b.n	8002ba2 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d012      	beq.n	8002bac <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	3324      	adds	r3, #36	; 0x24
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 fd62 	bl	8003654 <xTaskRemoveFromEventList>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002b96:	f000 fe3f 	bl	8003818 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002b9a:	7bfb      	ldrb	r3, [r7, #15]
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	dce9      	bgt.n	8002b7e <prvUnlockQueue+0x16>
 8002baa:	e000      	b.n	8002bae <prvUnlockQueue+0x46>
                        break;
 8002bac:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	22ff      	movs	r2, #255	; 0xff
 8002bb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002bb6:	f001 fcf5 	bl	80045a4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002bba:	f001 fcc3 	bl	8004544 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bc4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002bc6:	e011      	b.n	8002bec <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d012      	beq.n	8002bf6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3310      	adds	r3, #16
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f000 fd3d 	bl	8003654 <xTaskRemoveFromEventList>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002be0:	f000 fe1a 	bl	8003818 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002be4:	7bbb      	ldrb	r3, [r7, #14]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002bec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	dce9      	bgt.n	8002bc8 <prvUnlockQueue+0x60>
 8002bf4:	e000      	b.n	8002bf8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002bf6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	22ff      	movs	r2, #255	; 0xff
 8002bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002c00:	f001 fcd0 	bl	80045a4 <vPortExitCritical>
}
 8002c04:	bf00      	nop
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002c14:	f001 fc96 	bl	8004544 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d102      	bne.n	8002c26 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002c20:	2301      	movs	r3, #1
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	e001      	b.n	8002c2a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002c2a:	f001 fcbb 	bl	80045a4 <vPortExitCritical>

    return xReturn;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002c40:	f001 fc80 	bl	8004544 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d102      	bne.n	8002c56 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002c50:	2301      	movs	r3, #1
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	e001      	b.n	8002c5a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002c56:	2300      	movs	r3, #0
 8002c58:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002c5a:	f001 fca3 	bl	80045a4 <vPortExitCritical>

    return xReturn;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c72:	2300      	movs	r3, #0
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	e01e      	b.n	8002cb6 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002c78:	4a13      	ldr	r2, [pc, #76]	; (8002cc8 <vQueueAddToRegistry+0x60>)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d115      	bne.n	8002cb0 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002c84:	4910      	ldr	r1, [pc, #64]	; (8002cc8 <vQueueAddToRegistry+0x60>)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002c8e:	4a0e      	ldr	r2, [pc, #56]	; (8002cc8 <vQueueAddToRegistry+0x60>)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4413      	add	r3, r2
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f004 fa07 	bl	80070b0 <SEGGER_SYSVIEW_ShrinkId>
 8002ca2:	4601      	mov	r1, r0
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	2071      	movs	r0, #113	; 0x71
 8002caa:	f003 fc19 	bl	80064e0 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002cae:	e006      	b.n	8002cbe <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2b07      	cmp	r3, #7
 8002cba:	d9dd      	bls.n	8002c78 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002cbc:	bf00      	nop
 8002cbe:	bf00      	nop
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	200143c4 	.word	0x200143c4

08002ccc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002cdc:	f001 fc32 	bl	8004544 <vPortEnterCritical>
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ce6:	b25b      	sxtb	r3, r3
 8002ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cec:	d103      	bne.n	8002cf6 <vQueueWaitForMessageRestricted+0x2a>
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cfc:	b25b      	sxtb	r3, r3
 8002cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d02:	d103      	bne.n	8002d0c <vQueueWaitForMessageRestricted+0x40>
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d0c:	f001 fc4a 	bl	80045a4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d106      	bne.n	8002d26 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	3324      	adds	r3, #36	; 0x24
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	68b9      	ldr	r1, [r7, #8]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f000 fc69 	bl	80035f8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002d26:	6978      	ldr	r0, [r7, #20]
 8002d28:	f7ff ff1e 	bl	8002b68 <prvUnlockQueue>
    }
 8002d2c:	bf00      	nop
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08c      	sub	sp, #48	; 0x30
 8002d38:	af04      	add	r7, sp, #16
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	603b      	str	r3, [r7, #0]
 8002d40:	4613      	mov	r3, r2
 8002d42:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002d44:	88fb      	ldrh	r3, [r7, #6]
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f001 fd27 	bl	800479c <pvPortMalloc>
 8002d4e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00e      	beq.n	8002d74 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002d56:	2058      	movs	r0, #88	; 0x58
 8002d58:	f001 fd20 	bl	800479c <pvPortMalloc>
 8002d5c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	631a      	str	r2, [r3, #48]	; 0x30
 8002d6a:	e005      	b.n	8002d78 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002d6c:	6978      	ldr	r0, [r7, #20]
 8002d6e:	f001 fdf5 	bl	800495c <vPortFree>
 8002d72:	e001      	b.n	8002d78 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002d74:	2300      	movs	r3, #0
 8002d76:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d013      	beq.n	8002da6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d7e:	88fa      	ldrh	r2, [r7, #6]
 8002d80:	2300      	movs	r3, #0
 8002d82:	9303      	str	r3, [sp, #12]
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	9302      	str	r3, [sp, #8]
 8002d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8a:	9301      	str	r3, [sp, #4]
 8002d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	68b9      	ldr	r1, [r7, #8]
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 f80e 	bl	8002db6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002d9a:	69f8      	ldr	r0, [r7, #28]
 8002d9c:	f000 f8a2 	bl	8002ee4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002da0:	2301      	movs	r3, #1
 8002da2:	61bb      	str	r3, [r7, #24]
 8002da4:	e002      	b.n	8002dac <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002da6:	f04f 33ff 	mov.w	r3, #4294967295
 8002daa:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002dac:	69bb      	ldr	r3, [r7, #24]
    }
 8002dae:	4618      	mov	r0, r3
 8002db0:	3720      	adds	r7, #32
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b088      	sub	sp, #32
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	60f8      	str	r0, [r7, #12]
 8002dbe:	60b9      	str	r1, [r7, #8]
 8002dc0:	607a      	str	r2, [r7, #4]
 8002dc2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	461a      	mov	r2, r3
 8002dce:	21a5      	movs	r1, #165	; 0xa5
 8002dd0:	f004 fb5c 	bl	800748c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002dde:	3b01      	subs	r3, #1
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	f023 0307 	bic.w	r3, r3, #7
 8002dec:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00a      	beq.n	8002e0e <prvInitialiseNewTask+0x58>
        __asm volatile
 8002df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfc:	f383 8811 	msr	BASEPRI, r3
 8002e00:	f3bf 8f6f 	isb	sy
 8002e04:	f3bf 8f4f 	dsb	sy
 8002e08:	617b      	str	r3, [r7, #20]
    }
 8002e0a:	bf00      	nop
 8002e0c:	e7fe      	b.n	8002e0c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d01f      	beq.n	8002e54 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e14:	2300      	movs	r3, #0
 8002e16:	61fb      	str	r3, [r7, #28]
 8002e18:	e012      	b.n	8002e40 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	4413      	add	r3, r2
 8002e20:	7819      	ldrb	r1, [r3, #0]
 8002e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	4413      	add	r3, r2
 8002e28:	3334      	adds	r3, #52	; 0x34
 8002e2a:	460a      	mov	r2, r1
 8002e2c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	4413      	add	r3, r2
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d006      	beq.n	8002e48 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	61fb      	str	r3, [r7, #28]
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	2b09      	cmp	r3, #9
 8002e44:	d9e9      	bls.n	8002e1a <prvInitialiseNewTask+0x64>
 8002e46:	e000      	b.n	8002e4a <prvInitialiseNewTask+0x94>
            {
                break;
 8002e48:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002e52:	e003      	b.n	8002e5c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d901      	bls.n	8002e66 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e62:	2304      	movs	r3, #4
 8002e64:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e6a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e70:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e74:	2200      	movs	r2, #0
 8002e76:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff f96b 	bl	8002158 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e84:	3318      	adds	r3, #24
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff f966 	bl	8002158 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e90:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e94:	f1c3 0205 	rsb	r2, r3, #5
 8002e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ea0:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea4:	3350      	adds	r3, #80	; 0x50
 8002ea6:	2204      	movs	r2, #4
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f004 faee 	bl	800748c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb2:	3354      	adds	r3, #84	; 0x54
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f004 fae7 	bl	800748c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	68f9      	ldr	r1, [r7, #12]
 8002ec2:	69b8      	ldr	r0, [r7, #24]
 8002ec4:	f001 f990 	bl	80041e8 <pxPortInitialiseStack>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ecc:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d002      	beq.n	8002eda <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ed8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002eda:	bf00      	nop
 8002edc:	3720      	adds	r7, #32
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
	...

08002ee4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002ee4:	b5b0      	push	{r4, r5, r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af02      	add	r7, sp, #8
 8002eea:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002eec:	f001 fb2a 	bl	8004544 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002ef0:	4b3b      	ldr	r3, [pc, #236]	; (8002fe0 <prvAddNewTaskToReadyList+0xfc>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	4a3a      	ldr	r2, [pc, #232]	; (8002fe0 <prvAddNewTaskToReadyList+0xfc>)
 8002ef8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002efa:	4b3a      	ldr	r3, [pc, #232]	; (8002fe4 <prvAddNewTaskToReadyList+0x100>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d109      	bne.n	8002f16 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002f02:	4a38      	ldr	r2, [pc, #224]	; (8002fe4 <prvAddNewTaskToReadyList+0x100>)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f08:	4b35      	ldr	r3, [pc, #212]	; (8002fe0 <prvAddNewTaskToReadyList+0xfc>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d110      	bne.n	8002f32 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002f10:	f000 fca8 	bl	8003864 <prvInitialiseTaskLists>
 8002f14:	e00d      	b.n	8002f32 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002f16:	4b34      	ldr	r3, [pc, #208]	; (8002fe8 <prvAddNewTaskToReadyList+0x104>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d109      	bne.n	8002f32 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f1e:	4b31      	ldr	r3, [pc, #196]	; (8002fe4 <prvAddNewTaskToReadyList+0x100>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d802      	bhi.n	8002f32 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002f2c:	4a2d      	ldr	r2, [pc, #180]	; (8002fe4 <prvAddNewTaskToReadyList+0x100>)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002f32:	4b2e      	ldr	r3, [pc, #184]	; (8002fec <prvAddNewTaskToReadyList+0x108>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	3301      	adds	r3, #1
 8002f38:	4a2c      	ldr	r2, [pc, #176]	; (8002fec <prvAddNewTaskToReadyList+0x108>)
 8002f3a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f3c:	4b2b      	ldr	r3, [pc, #172]	; (8002fec <prvAddNewTaskToReadyList+0x108>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d016      	beq.n	8002f78 <prvAddNewTaskToReadyList+0x94>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f003 ff89 	bl	8006e64 <SEGGER_SYSVIEW_OnTaskCreate>
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	461d      	mov	r5, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	461c      	mov	r4, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	1ae3      	subs	r3, r4, r3
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	462b      	mov	r3, r5
 8002f74:	f001 fe94 	bl	8004ca0 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f003 fff6 	bl	8006f6c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f84:	2201      	movs	r2, #1
 8002f86:	409a      	lsls	r2, r3
 8002f88:	4b19      	ldr	r3, [pc, #100]	; (8002ff0 <prvAddNewTaskToReadyList+0x10c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	4a18      	ldr	r2, [pc, #96]	; (8002ff0 <prvAddNewTaskToReadyList+0x10c>)
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4a15      	ldr	r2, [pc, #84]	; (8002ff4 <prvAddNewTaskToReadyList+0x110>)
 8002fa0:	441a      	add	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4610      	mov	r0, r2
 8002faa:	f7ff f8e2 	bl	8002172 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002fae:	f001 faf9 	bl	80045a4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002fb2:	4b0d      	ldr	r3, [pc, #52]	; (8002fe8 <prvAddNewTaskToReadyList+0x104>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00e      	beq.n	8002fd8 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002fba:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <prvAddNewTaskToReadyList+0x100>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d207      	bcs.n	8002fd8 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <prvAddNewTaskToReadyList+0x114>)
 8002fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	f3bf 8f4f 	dsb	sy
 8002fd4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002fd8:	bf00      	nop
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bdb0      	pop	{r4, r5, r7, pc}
 8002fe0:	20000110 	.word	0x20000110
 8002fe4:	20000038 	.word	0x20000038
 8002fe8:	2000011c 	.word	0x2000011c
 8002fec:	2000012c 	.word	0x2000012c
 8002ff0:	20000118 	.word	0x20000118
 8002ff4:	2000003c 	.word	0x2000003c
 8002ff8:	e000ed04 	.word	0xe000ed04

08002ffc <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08a      	sub	sp, #40	; 0x28
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8003006:	2300      	movs	r3, #0
 8003008:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10a      	bne.n	8003026 <xTaskDelayUntil+0x2a>
        __asm volatile
 8003010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003014:	f383 8811 	msr	BASEPRI, r3
 8003018:	f3bf 8f6f 	isb	sy
 800301c:	f3bf 8f4f 	dsb	sy
 8003020:	617b      	str	r3, [r7, #20]
    }
 8003022:	bf00      	nop
 8003024:	e7fe      	b.n	8003024 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d10a      	bne.n	8003042 <xTaskDelayUntil+0x46>
        __asm volatile
 800302c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003030:	f383 8811 	msr	BASEPRI, r3
 8003034:	f3bf 8f6f 	isb	sy
 8003038:	f3bf 8f4f 	dsb	sy
 800303c:	613b      	str	r3, [r7, #16]
    }
 800303e:	bf00      	nop
 8003040:	e7fe      	b.n	8003040 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 8003042:	4b2c      	ldr	r3, [pc, #176]	; (80030f4 <xTaskDelayUntil+0xf8>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00a      	beq.n	8003060 <xTaskDelayUntil+0x64>
        __asm volatile
 800304a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800304e:	f383 8811 	msr	BASEPRI, r3
 8003052:	f3bf 8f6f 	isb	sy
 8003056:	f3bf 8f4f 	dsb	sy
 800305a:	60fb      	str	r3, [r7, #12]
    }
 800305c:	bf00      	nop
 800305e:	e7fe      	b.n	800305e <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 8003060:	f000 f8b0 	bl	80031c4 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8003064:	4b24      	ldr	r3, [pc, #144]	; (80030f8 <xTaskDelayUntil+0xfc>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	4413      	add	r3, r2
 8003072:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6a3a      	ldr	r2, [r7, #32]
 800307a:	429a      	cmp	r2, r3
 800307c:	d20b      	bcs.n	8003096 <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	69fa      	ldr	r2, [r7, #28]
 8003084:	429a      	cmp	r2, r3
 8003086:	d211      	bcs.n	80030ac <xTaskDelayUntil+0xb0>
 8003088:	69fa      	ldr	r2, [r7, #28]
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	429a      	cmp	r2, r3
 800308e:	d90d      	bls.n	80030ac <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8003090:	2301      	movs	r3, #1
 8003092:	627b      	str	r3, [r7, #36]	; 0x24
 8003094:	e00a      	b.n	80030ac <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	69fa      	ldr	r2, [r7, #28]
 800309c:	429a      	cmp	r2, r3
 800309e:	d303      	bcc.n	80030a8 <xTaskDelayUntil+0xac>
 80030a0:	69fa      	ldr	r2, [r7, #28]
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d901      	bls.n	80030ac <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 80030a8:	2301      	movs	r3, #1
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	69fa      	ldr	r2, [r7, #28]
 80030b0:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d009      	beq.n	80030cc <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 80030b8:	2024      	movs	r0, #36	; 0x24
 80030ba:	f003 f9b7 	bl	800642c <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80030be:	69fa      	ldr	r2, [r7, #28]
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2100      	movs	r1, #0
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 fd04 	bl	8003ad4 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80030cc:	f000 f888 	bl	80031e0 <xTaskResumeAll>
 80030d0:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d107      	bne.n	80030e8 <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 80030d8:	4b08      	ldr	r3, [pc, #32]	; (80030fc <xTaskDelayUntil+0x100>)
 80030da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	f3bf 8f4f 	dsb	sy
 80030e4:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80030ea:	4618      	mov	r0, r3
 80030ec:	3728      	adds	r7, #40	; 0x28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	20000138 	.word	0x20000138
 80030f8:	20000114 	.word	0x20000114
 80030fc:	e000ed04 	.word	0xe000ed04

08003100 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003106:	4b27      	ldr	r3, [pc, #156]	; (80031a4 <vTaskStartScheduler+0xa4>)
 8003108:	9301      	str	r3, [sp, #4]
 800310a:	2300      	movs	r3, #0
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	2300      	movs	r3, #0
 8003110:	2282      	movs	r2, #130	; 0x82
 8003112:	4925      	ldr	r1, [pc, #148]	; (80031a8 <vTaskStartScheduler+0xa8>)
 8003114:	4825      	ldr	r0, [pc, #148]	; (80031ac <vTaskStartScheduler+0xac>)
 8003116:	f7ff fe0d 	bl	8002d34 <xTaskCreate>
 800311a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d102      	bne.n	8003128 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003122:	f000 fd4f 	bl	8003bc4 <xTimerCreateTimerTask>
 8003126:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d124      	bne.n	8003178 <vTaskStartScheduler+0x78>
        __asm volatile
 800312e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003132:	f383 8811 	msr	BASEPRI, r3
 8003136:	f3bf 8f6f 	isb	sy
 800313a:	f3bf 8f4f 	dsb	sy
 800313e:	60bb      	str	r3, [r7, #8]
    }
 8003140:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003142:	4b1b      	ldr	r3, [pc, #108]	; (80031b0 <vTaskStartScheduler+0xb0>)
 8003144:	f04f 32ff 	mov.w	r2, #4294967295
 8003148:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800314a:	4b1a      	ldr	r3, [pc, #104]	; (80031b4 <vTaskStartScheduler+0xb4>)
 800314c:	2201      	movs	r2, #1
 800314e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003150:	4b19      	ldr	r3, [pc, #100]	; (80031b8 <vTaskStartScheduler+0xb8>)
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003156:	4b19      	ldr	r3, [pc, #100]	; (80031bc <vTaskStartScheduler+0xbc>)
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <vTaskStartScheduler+0xa4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	d102      	bne.n	8003168 <vTaskStartScheduler+0x68>
 8003162:	f003 fe63 	bl	8006e2c <SEGGER_SYSVIEW_OnIdle>
 8003166:	e004      	b.n	8003172 <vTaskStartScheduler+0x72>
 8003168:	4b14      	ldr	r3, [pc, #80]	; (80031bc <vTaskStartScheduler+0xbc>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f003 febb 	bl	8006ee8 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003172:	f001 f8c7 	bl	8004304 <xPortStartScheduler>
 8003176:	e00e      	b.n	8003196 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317e:	d10a      	bne.n	8003196 <vTaskStartScheduler+0x96>
        __asm volatile
 8003180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003184:	f383 8811 	msr	BASEPRI, r3
 8003188:	f3bf 8f6f 	isb	sy
 800318c:	f3bf 8f4f 	dsb	sy
 8003190:	607b      	str	r3, [r7, #4]
    }
 8003192:	bf00      	nop
 8003194:	e7fe      	b.n	8003194 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003196:	4b0a      	ldr	r3, [pc, #40]	; (80031c0 <vTaskStartScheduler+0xc0>)
 8003198:	681b      	ldr	r3, [r3, #0]
}
 800319a:	bf00      	nop
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	20000134 	.word	0x20000134
 80031a8:	08007520 	.word	0x08007520
 80031ac:	08003831 	.word	0x08003831
 80031b0:	20000130 	.word	0x20000130
 80031b4:	2000011c 	.word	0x2000011c
 80031b8:	20000114 	.word	0x20000114
 80031bc:	20000038 	.word	0x20000038
 80031c0:	2000000c 	.word	0x2000000c

080031c4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80031c8:	4b04      	ldr	r3, [pc, #16]	; (80031dc <vTaskSuspendAll+0x18>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	3301      	adds	r3, #1
 80031ce:	4a03      	ldr	r2, [pc, #12]	; (80031dc <vTaskSuspendAll+0x18>)
 80031d0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80031d2:	bf00      	nop
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	20000138 	.word	0x20000138

080031e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80031e6:	2300      	movs	r3, #0
 80031e8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80031ea:	2300      	movs	r3, #0
 80031ec:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80031ee:	4b43      	ldr	r3, [pc, #268]	; (80032fc <xTaskResumeAll+0x11c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10a      	bne.n	800320c <xTaskResumeAll+0x2c>
        __asm volatile
 80031f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fa:	f383 8811 	msr	BASEPRI, r3
 80031fe:	f3bf 8f6f 	isb	sy
 8003202:	f3bf 8f4f 	dsb	sy
 8003206:	603b      	str	r3, [r7, #0]
    }
 8003208:	bf00      	nop
 800320a:	e7fe      	b.n	800320a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800320c:	f001 f99a 	bl	8004544 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003210:	4b3a      	ldr	r3, [pc, #232]	; (80032fc <xTaskResumeAll+0x11c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	3b01      	subs	r3, #1
 8003216:	4a39      	ldr	r2, [pc, #228]	; (80032fc <xTaskResumeAll+0x11c>)
 8003218:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800321a:	4b38      	ldr	r3, [pc, #224]	; (80032fc <xTaskResumeAll+0x11c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d165      	bne.n	80032ee <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003222:	4b37      	ldr	r3, [pc, #220]	; (8003300 <xTaskResumeAll+0x120>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d061      	beq.n	80032ee <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800322a:	e032      	b.n	8003292 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800322c:	4b35      	ldr	r3, [pc, #212]	; (8003304 <xTaskResumeAll+0x124>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	3318      	adds	r3, #24
 8003238:	4618      	mov	r0, r3
 800323a:	f7fe fff7 	bl	800222c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	3304      	adds	r3, #4
 8003242:	4618      	mov	r0, r3
 8003244:	f7fe fff2 	bl	800222c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4618      	mov	r0, r3
 800324c:	f003 fe8e 	bl	8006f6c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003254:	2201      	movs	r2, #1
 8003256:	409a      	lsls	r2, r3
 8003258:	4b2b      	ldr	r3, [pc, #172]	; (8003308 <xTaskResumeAll+0x128>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4313      	orrs	r3, r2
 800325e:	4a2a      	ldr	r2, [pc, #168]	; (8003308 <xTaskResumeAll+0x128>)
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003266:	4613      	mov	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4a27      	ldr	r2, [pc, #156]	; (800330c <xTaskResumeAll+0x12c>)
 8003270:	441a      	add	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	3304      	adds	r3, #4
 8003276:	4619      	mov	r1, r3
 8003278:	4610      	mov	r0, r2
 800327a:	f7fe ff7a 	bl	8002172 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003282:	4b23      	ldr	r3, [pc, #140]	; (8003310 <xTaskResumeAll+0x130>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003288:	429a      	cmp	r2, r3
 800328a:	d302      	bcc.n	8003292 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 800328c:	4b21      	ldr	r3, [pc, #132]	; (8003314 <xTaskResumeAll+0x134>)
 800328e:	2201      	movs	r2, #1
 8003290:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003292:	4b1c      	ldr	r3, [pc, #112]	; (8003304 <xTaskResumeAll+0x124>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1c8      	bne.n	800322c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80032a0:	f000 fb5e 	bl	8003960 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80032a4:	4b1c      	ldr	r3, [pc, #112]	; (8003318 <xTaskResumeAll+0x138>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d010      	beq.n	80032d2 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80032b0:	f000 f858 	bl	8003364 <xTaskIncrementTick>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d002      	beq.n	80032c0 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80032ba:	4b16      	ldr	r3, [pc, #88]	; (8003314 <xTaskResumeAll+0x134>)
 80032bc:	2201      	movs	r2, #1
 80032be:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3b01      	subs	r3, #1
 80032c4:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1f1      	bne.n	80032b0 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80032cc:	4b12      	ldr	r3, [pc, #72]	; (8003318 <xTaskResumeAll+0x138>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80032d2:	4b10      	ldr	r3, [pc, #64]	; (8003314 <xTaskResumeAll+0x134>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d009      	beq.n	80032ee <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80032da:	2301      	movs	r3, #1
 80032dc:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80032de:	4b0f      	ldr	r3, [pc, #60]	; (800331c <xTaskResumeAll+0x13c>)
 80032e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	f3bf 8f4f 	dsb	sy
 80032ea:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80032ee:	f001 f959 	bl	80045a4 <vPortExitCritical>

    return xAlreadyYielded;
 80032f2:	68bb      	ldr	r3, [r7, #8]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	20000138 	.word	0x20000138
 8003300:	20000110 	.word	0x20000110
 8003304:	200000d0 	.word	0x200000d0
 8003308:	20000118 	.word	0x20000118
 800330c:	2000003c 	.word	0x2000003c
 8003310:	20000038 	.word	0x20000038
 8003314:	20000124 	.word	0x20000124
 8003318:	20000120 	.word	0x20000120
 800331c:	e000ed04 	.word	0xe000ed04

08003320 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003326:	4b05      	ldr	r3, [pc, #20]	; (800333c <xTaskGetTickCount+0x1c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800332c:	687b      	ldr	r3, [r7, #4]
}
 800332e:	4618      	mov	r0, r3
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	20000114 	.word	0x20000114

08003340 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003346:	f001 f9e9 	bl	800471c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800334a:	2300      	movs	r3, #0
 800334c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800334e:	4b04      	ldr	r3, [pc, #16]	; (8003360 <xTaskGetTickCountFromISR+0x20>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003354:	683b      	ldr	r3, [r7, #0]
}
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	20000114 	.word	0x20000114

08003364 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800336a:	2300      	movs	r3, #0
 800336c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800336e:	4b50      	ldr	r3, [pc, #320]	; (80034b0 <xTaskIncrementTick+0x14c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	f040 8092 	bne.w	800349c <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003378:	4b4e      	ldr	r3, [pc, #312]	; (80034b4 <xTaskIncrementTick+0x150>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	3301      	adds	r3, #1
 800337e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003380:	4a4c      	ldr	r2, [pc, #304]	; (80034b4 <xTaskIncrementTick+0x150>)
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d120      	bne.n	80033ce <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800338c:	4b4a      	ldr	r3, [pc, #296]	; (80034b8 <xTaskIncrementTick+0x154>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <xTaskIncrementTick+0x48>
        __asm volatile
 8003396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339a:	f383 8811 	msr	BASEPRI, r3
 800339e:	f3bf 8f6f 	isb	sy
 80033a2:	f3bf 8f4f 	dsb	sy
 80033a6:	603b      	str	r3, [r7, #0]
    }
 80033a8:	bf00      	nop
 80033aa:	e7fe      	b.n	80033aa <xTaskIncrementTick+0x46>
 80033ac:	4b42      	ldr	r3, [pc, #264]	; (80034b8 <xTaskIncrementTick+0x154>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	4b42      	ldr	r3, [pc, #264]	; (80034bc <xTaskIncrementTick+0x158>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a40      	ldr	r2, [pc, #256]	; (80034b8 <xTaskIncrementTick+0x154>)
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	4a40      	ldr	r2, [pc, #256]	; (80034bc <xTaskIncrementTick+0x158>)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6013      	str	r3, [r2, #0]
 80033c0:	4b3f      	ldr	r3, [pc, #252]	; (80034c0 <xTaskIncrementTick+0x15c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	3301      	adds	r3, #1
 80033c6:	4a3e      	ldr	r2, [pc, #248]	; (80034c0 <xTaskIncrementTick+0x15c>)
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	f000 fac9 	bl	8003960 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80033ce:	4b3d      	ldr	r3, [pc, #244]	; (80034c4 <xTaskIncrementTick+0x160>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d34c      	bcc.n	8003472 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033d8:	4b37      	ldr	r3, [pc, #220]	; (80034b8 <xTaskIncrementTick+0x154>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d104      	bne.n	80033ec <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033e2:	4b38      	ldr	r3, [pc, #224]	; (80034c4 <xTaskIncrementTick+0x160>)
 80033e4:	f04f 32ff 	mov.w	r2, #4294967295
 80033e8:	601a      	str	r2, [r3, #0]
                    break;
 80033ea:	e042      	b.n	8003472 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033ec:	4b32      	ldr	r3, [pc, #200]	; (80034b8 <xTaskIncrementTick+0x154>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	429a      	cmp	r2, r3
 8003402:	d203      	bcs.n	800340c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003404:	4a2f      	ldr	r2, [pc, #188]	; (80034c4 <xTaskIncrementTick+0x160>)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800340a:	e032      	b.n	8003472 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	3304      	adds	r3, #4
 8003410:	4618      	mov	r0, r3
 8003412:	f7fe ff0b 	bl	800222c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341a:	2b00      	cmp	r3, #0
 800341c:	d004      	beq.n	8003428 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	3318      	adds	r3, #24
 8003422:	4618      	mov	r0, r3
 8003424:	f7fe ff02 	bl	800222c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	4618      	mov	r0, r3
 800342c:	f003 fd9e 	bl	8006f6c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003434:	2201      	movs	r2, #1
 8003436:	409a      	lsls	r2, r3
 8003438:	4b23      	ldr	r3, [pc, #140]	; (80034c8 <xTaskIncrementTick+0x164>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4313      	orrs	r3, r2
 800343e:	4a22      	ldr	r2, [pc, #136]	; (80034c8 <xTaskIncrementTick+0x164>)
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003446:	4613      	mov	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4a1f      	ldr	r2, [pc, #124]	; (80034cc <xTaskIncrementTick+0x168>)
 8003450:	441a      	add	r2, r3
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	3304      	adds	r3, #4
 8003456:	4619      	mov	r1, r3
 8003458:	4610      	mov	r0, r2
 800345a:	f7fe fe8a 	bl	8002172 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003462:	4b1b      	ldr	r3, [pc, #108]	; (80034d0 <xTaskIncrementTick+0x16c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003468:	429a      	cmp	r2, r3
 800346a:	d3b5      	bcc.n	80033d8 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 800346c:	2301      	movs	r3, #1
 800346e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003470:	e7b2      	b.n	80033d8 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003472:	4b17      	ldr	r3, [pc, #92]	; (80034d0 <xTaskIncrementTick+0x16c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003478:	4914      	ldr	r1, [pc, #80]	; (80034cc <xTaskIncrementTick+0x168>)
 800347a:	4613      	mov	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4413      	add	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	440b      	add	r3, r1
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d901      	bls.n	800348e <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 800348a:	2301      	movs	r3, #1
 800348c:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800348e:	4b11      	ldr	r3, [pc, #68]	; (80034d4 <xTaskIncrementTick+0x170>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d007      	beq.n	80034a6 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8003496:	2301      	movs	r3, #1
 8003498:	617b      	str	r3, [r7, #20]
 800349a:	e004      	b.n	80034a6 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800349c:	4b0e      	ldr	r3, [pc, #56]	; (80034d8 <xTaskIncrementTick+0x174>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	3301      	adds	r3, #1
 80034a2:	4a0d      	ldr	r2, [pc, #52]	; (80034d8 <xTaskIncrementTick+0x174>)
 80034a4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80034a6:	697b      	ldr	r3, [r7, #20]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3718      	adds	r7, #24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	20000138 	.word	0x20000138
 80034b4:	20000114 	.word	0x20000114
 80034b8:	200000c8 	.word	0x200000c8
 80034bc:	200000cc 	.word	0x200000cc
 80034c0:	20000128 	.word	0x20000128
 80034c4:	20000130 	.word	0x20000130
 80034c8:	20000118 	.word	0x20000118
 80034cc:	2000003c 	.word	0x2000003c
 80034d0:	20000038 	.word	0x20000038
 80034d4:	20000124 	.word	0x20000124
 80034d8:	20000120 	.word	0x20000120

080034dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80034e2:	4b2d      	ldr	r3, [pc, #180]	; (8003598 <vTaskSwitchContext+0xbc>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80034ea:	4b2c      	ldr	r3, [pc, #176]	; (800359c <vTaskSwitchContext+0xc0>)
 80034ec:	2201      	movs	r2, #1
 80034ee:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80034f0:	e04d      	b.n	800358e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80034f2:	4b2a      	ldr	r3, [pc, #168]	; (800359c <vTaskSwitchContext+0xc0>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034f8:	4b29      	ldr	r3, [pc, #164]	; (80035a0 <vTaskSwitchContext+0xc4>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	fab3 f383 	clz	r3, r3
 8003504:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003506:	7afb      	ldrb	r3, [r7, #11]
 8003508:	f1c3 031f 	rsb	r3, r3, #31
 800350c:	617b      	str	r3, [r7, #20]
 800350e:	4925      	ldr	r1, [pc, #148]	; (80035a4 <vTaskSwitchContext+0xc8>)
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	4613      	mov	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	440b      	add	r3, r1
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10a      	bne.n	8003538 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003526:	f383 8811 	msr	BASEPRI, r3
 800352a:	f3bf 8f6f 	isb	sy
 800352e:	f3bf 8f4f 	dsb	sy
 8003532:	607b      	str	r3, [r7, #4]
    }
 8003534:	bf00      	nop
 8003536:	e7fe      	b.n	8003536 <vTaskSwitchContext+0x5a>
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	4613      	mov	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	4a18      	ldr	r2, [pc, #96]	; (80035a4 <vTaskSwitchContext+0xc8>)
 8003544:	4413      	add	r3, r2
 8003546:	613b      	str	r3, [r7, #16]
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	605a      	str	r2, [r3, #4]
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	3308      	adds	r3, #8
 800355a:	429a      	cmp	r2, r3
 800355c:	d104      	bne.n	8003568 <vTaskSwitchContext+0x8c>
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	605a      	str	r2, [r3, #4]
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	4a0e      	ldr	r2, [pc, #56]	; (80035a8 <vTaskSwitchContext+0xcc>)
 8003570:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003572:	4b0d      	ldr	r3, [pc, #52]	; (80035a8 <vTaskSwitchContext+0xcc>)
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	4b0d      	ldr	r3, [pc, #52]	; (80035ac <vTaskSwitchContext+0xd0>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	429a      	cmp	r2, r3
 800357c:	d102      	bne.n	8003584 <vTaskSwitchContext+0xa8>
 800357e:	f003 fc55 	bl	8006e2c <SEGGER_SYSVIEW_OnIdle>
}
 8003582:	e004      	b.n	800358e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003584:	4b08      	ldr	r3, [pc, #32]	; (80035a8 <vTaskSwitchContext+0xcc>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4618      	mov	r0, r3
 800358a:	f003 fcad 	bl	8006ee8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800358e:	bf00      	nop
 8003590:	3718      	adds	r7, #24
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	20000138 	.word	0x20000138
 800359c:	20000124 	.word	0x20000124
 80035a0:	20000118 	.word	0x20000118
 80035a4:	2000003c 	.word	0x2000003c
 80035a8:	20000038 	.word	0x20000038
 80035ac:	20000134 	.word	0x20000134

080035b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10a      	bne.n	80035d6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80035c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c4:	f383 8811 	msr	BASEPRI, r3
 80035c8:	f3bf 8f6f 	isb	sy
 80035cc:	f3bf 8f4f 	dsb	sy
 80035d0:	60fb      	str	r3, [r7, #12]
    }
 80035d2:	bf00      	nop
 80035d4:	e7fe      	b.n	80035d4 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035d6:	4b07      	ldr	r3, [pc, #28]	; (80035f4 <vTaskPlaceOnEventList+0x44>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	3318      	adds	r3, #24
 80035dc:	4619      	mov	r1, r3
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7fe fdeb 	bl	80021ba <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80035e4:	2101      	movs	r1, #1
 80035e6:	6838      	ldr	r0, [r7, #0]
 80035e8:	f000 fa74 	bl	8003ad4 <prvAddCurrentTaskToDelayedList>
}
 80035ec:	bf00      	nop
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	20000038 	.word	0x20000038

080035f8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10a      	bne.n	8003620 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800360a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360e:	f383 8811 	msr	BASEPRI, r3
 8003612:	f3bf 8f6f 	isb	sy
 8003616:	f3bf 8f4f 	dsb	sy
 800361a:	617b      	str	r3, [r7, #20]
    }
 800361c:	bf00      	nop
 800361e:	e7fe      	b.n	800361e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003620:	4b0b      	ldr	r3, [pc, #44]	; (8003650 <vTaskPlaceOnEventListRestricted+0x58>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	3318      	adds	r3, #24
 8003626:	4619      	mov	r1, r3
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f7fe fda2 	bl	8002172 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d002      	beq.n	800363a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003634:	f04f 33ff 	mov.w	r3, #4294967295
 8003638:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800363a:	2024      	movs	r0, #36	; 0x24
 800363c:	f002 fef6 	bl	800642c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	68b8      	ldr	r0, [r7, #8]
 8003644:	f000 fa46 	bl	8003ad4 <prvAddCurrentTaskToDelayedList>
    }
 8003648:	bf00      	nop
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	20000038 	.word	0x20000038

08003654 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10a      	bne.n	8003680 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800366a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366e:	f383 8811 	msr	BASEPRI, r3
 8003672:	f3bf 8f6f 	isb	sy
 8003676:	f3bf 8f4f 	dsb	sy
 800367a:	60fb      	str	r3, [r7, #12]
    }
 800367c:	bf00      	nop
 800367e:	e7fe      	b.n	800367e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	3318      	adds	r3, #24
 8003684:	4618      	mov	r0, r3
 8003686:	f7fe fdd1 	bl	800222c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800368a:	4b1f      	ldr	r3, [pc, #124]	; (8003708 <xTaskRemoveFromEventList+0xb4>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d120      	bne.n	80036d4 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	3304      	adds	r3, #4
 8003696:	4618      	mov	r0, r3
 8003698:	f7fe fdc8 	bl	800222c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	4618      	mov	r0, r3
 80036a0:	f003 fc64 	bl	8006f6c <SEGGER_SYSVIEW_OnTaskStartReady>
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	2201      	movs	r2, #1
 80036aa:	409a      	lsls	r2, r3
 80036ac:	4b17      	ldr	r3, [pc, #92]	; (800370c <xTaskRemoveFromEventList+0xb8>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	4a16      	ldr	r2, [pc, #88]	; (800370c <xTaskRemoveFromEventList+0xb8>)
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ba:	4613      	mov	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4a13      	ldr	r2, [pc, #76]	; (8003710 <xTaskRemoveFromEventList+0xbc>)
 80036c4:	441a      	add	r2, r3
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	3304      	adds	r3, #4
 80036ca:	4619      	mov	r1, r3
 80036cc:	4610      	mov	r0, r2
 80036ce:	f7fe fd50 	bl	8002172 <vListInsertEnd>
 80036d2:	e005      	b.n	80036e0 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	3318      	adds	r3, #24
 80036d8:	4619      	mov	r1, r3
 80036da:	480e      	ldr	r0, [pc, #56]	; (8003714 <xTaskRemoveFromEventList+0xc0>)
 80036dc:	f7fe fd49 	bl	8002172 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e4:	4b0c      	ldr	r3, [pc, #48]	; (8003718 <xTaskRemoveFromEventList+0xc4>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d905      	bls.n	80036fa <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80036ee:	2301      	movs	r3, #1
 80036f0:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80036f2:	4b0a      	ldr	r3, [pc, #40]	; (800371c <xTaskRemoveFromEventList+0xc8>)
 80036f4:	2201      	movs	r2, #1
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	e001      	b.n	80036fe <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80036fe:	697b      	ldr	r3, [r7, #20]
}
 8003700:	4618      	mov	r0, r3
 8003702:	3718      	adds	r7, #24
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	20000138 	.word	0x20000138
 800370c:	20000118 	.word	0x20000118
 8003710:	2000003c 	.word	0x2000003c
 8003714:	200000d0 	.word	0x200000d0
 8003718:	20000038 	.word	0x20000038
 800371c:	20000124 	.word	0x20000124

08003720 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003728:	4b06      	ldr	r3, [pc, #24]	; (8003744 <vTaskInternalSetTimeOutState+0x24>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003730:	4b05      	ldr	r3, [pc, #20]	; (8003748 <vTaskInternalSetTimeOutState+0x28>)
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	605a      	str	r2, [r3, #4]
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	20000128 	.word	0x20000128
 8003748:	20000114 	.word	0x20000114

0800374c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b088      	sub	sp, #32
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10a      	bne.n	8003772 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800375c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003760:	f383 8811 	msr	BASEPRI, r3
 8003764:	f3bf 8f6f 	isb	sy
 8003768:	f3bf 8f4f 	dsb	sy
 800376c:	613b      	str	r3, [r7, #16]
    }
 800376e:	bf00      	nop
 8003770:	e7fe      	b.n	8003770 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10a      	bne.n	800378e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377c:	f383 8811 	msr	BASEPRI, r3
 8003780:	f3bf 8f6f 	isb	sy
 8003784:	f3bf 8f4f 	dsb	sy
 8003788:	60fb      	str	r3, [r7, #12]
    }
 800378a:	bf00      	nop
 800378c:	e7fe      	b.n	800378c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800378e:	f000 fed9 	bl	8004544 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003792:	4b1f      	ldr	r3, [pc, #124]	; (8003810 <xTaskCheckForTimeOut+0xc4>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037aa:	d102      	bne.n	80037b2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80037ac:	2300      	movs	r3, #0
 80037ae:	61fb      	str	r3, [r7, #28]
 80037b0:	e026      	b.n	8003800 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	4b17      	ldr	r3, [pc, #92]	; (8003814 <xTaskCheckForTimeOut+0xc8>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d00a      	beq.n	80037d4 <xTaskCheckForTimeOut+0x88>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d305      	bcc.n	80037d4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80037c8:	2301      	movs	r3, #1
 80037ca:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	e015      	b.n	8003800 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d20b      	bcs.n	80037f6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	1ad2      	subs	r2, r2, r3
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7ff ff98 	bl	8003720 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80037f0:	2300      	movs	r3, #0
 80037f2:	61fb      	str	r3, [r7, #28]
 80037f4:	e004      	b.n	8003800 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80037fc:	2301      	movs	r3, #1
 80037fe:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003800:	f000 fed0 	bl	80045a4 <vPortExitCritical>

    return xReturn;
 8003804:	69fb      	ldr	r3, [r7, #28]
}
 8003806:	4618      	mov	r0, r3
 8003808:	3720      	adds	r7, #32
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	20000114 	.word	0x20000114
 8003814:	20000128 	.word	0x20000128

08003818 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800381c:	4b03      	ldr	r3, [pc, #12]	; (800382c <vTaskMissedYield+0x14>)
 800381e:	2201      	movs	r2, #1
 8003820:	601a      	str	r2, [r3, #0]
}
 8003822:	bf00      	nop
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	20000124 	.word	0x20000124

08003830 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003838:	f000 f854 	bl	80038e4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800383c:	4b07      	ldr	r3, [pc, #28]	; (800385c <prvIdleTask+0x2c>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d907      	bls.n	8003854 <prvIdleTask+0x24>
                {
                    taskYIELD();
 8003844:	4b06      	ldr	r3, [pc, #24]	; (8003860 <prvIdleTask+0x30>)
 8003846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	f3bf 8f4f 	dsb	sy
 8003850:	f3bf 8f6f 	isb	sy
                /* Call the user defined function from within the idle task.  This
                 * allows the application designer to add background functionality
                 * without the overhead of a separate task.
                 * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
                 * CALL A FUNCTION THAT MIGHT BLOCK. */
                vApplicationIdleHook();
 8003854:	f7fd f912 	bl	8000a7c <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8003858:	e7ee      	b.n	8003838 <prvIdleTask+0x8>
 800385a:	bf00      	nop
 800385c:	2000003c 	.word	0x2000003c
 8003860:	e000ed04 	.word	0xe000ed04

08003864 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800386a:	2300      	movs	r3, #0
 800386c:	607b      	str	r3, [r7, #4]
 800386e:	e00c      	b.n	800388a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	4613      	mov	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4413      	add	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4a12      	ldr	r2, [pc, #72]	; (80038c4 <prvInitialiseTaskLists+0x60>)
 800387c:	4413      	add	r3, r2
 800387e:	4618      	mov	r0, r3
 8003880:	f7fe fc4a 	bl	8002118 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3301      	adds	r3, #1
 8003888:	607b      	str	r3, [r7, #4]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b04      	cmp	r3, #4
 800388e:	d9ef      	bls.n	8003870 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003890:	480d      	ldr	r0, [pc, #52]	; (80038c8 <prvInitialiseTaskLists+0x64>)
 8003892:	f7fe fc41 	bl	8002118 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003896:	480d      	ldr	r0, [pc, #52]	; (80038cc <prvInitialiseTaskLists+0x68>)
 8003898:	f7fe fc3e 	bl	8002118 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800389c:	480c      	ldr	r0, [pc, #48]	; (80038d0 <prvInitialiseTaskLists+0x6c>)
 800389e:	f7fe fc3b 	bl	8002118 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80038a2:	480c      	ldr	r0, [pc, #48]	; (80038d4 <prvInitialiseTaskLists+0x70>)
 80038a4:	f7fe fc38 	bl	8002118 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80038a8:	480b      	ldr	r0, [pc, #44]	; (80038d8 <prvInitialiseTaskLists+0x74>)
 80038aa:	f7fe fc35 	bl	8002118 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80038ae:	4b0b      	ldr	r3, [pc, #44]	; (80038dc <prvInitialiseTaskLists+0x78>)
 80038b0:	4a05      	ldr	r2, [pc, #20]	; (80038c8 <prvInitialiseTaskLists+0x64>)
 80038b2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80038b4:	4b0a      	ldr	r3, [pc, #40]	; (80038e0 <prvInitialiseTaskLists+0x7c>)
 80038b6:	4a05      	ldr	r2, [pc, #20]	; (80038cc <prvInitialiseTaskLists+0x68>)
 80038b8:	601a      	str	r2, [r3, #0]
}
 80038ba:	bf00      	nop
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	2000003c 	.word	0x2000003c
 80038c8:	200000a0 	.word	0x200000a0
 80038cc:	200000b4 	.word	0x200000b4
 80038d0:	200000d0 	.word	0x200000d0
 80038d4:	200000e4 	.word	0x200000e4
 80038d8:	200000fc 	.word	0x200000fc
 80038dc:	200000c8 	.word	0x200000c8
 80038e0:	200000cc 	.word	0x200000cc

080038e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038ea:	e019      	b.n	8003920 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80038ec:	f000 fe2a 	bl	8004544 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038f0:	4b10      	ldr	r3, [pc, #64]	; (8003934 <prvCheckTasksWaitingTermination+0x50>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3304      	adds	r3, #4
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7fe fc95 	bl	800222c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003902:	4b0d      	ldr	r3, [pc, #52]	; (8003938 <prvCheckTasksWaitingTermination+0x54>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	3b01      	subs	r3, #1
 8003908:	4a0b      	ldr	r2, [pc, #44]	; (8003938 <prvCheckTasksWaitingTermination+0x54>)
 800390a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800390c:	4b0b      	ldr	r3, [pc, #44]	; (800393c <prvCheckTasksWaitingTermination+0x58>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	3b01      	subs	r3, #1
 8003912:	4a0a      	ldr	r2, [pc, #40]	; (800393c <prvCheckTasksWaitingTermination+0x58>)
 8003914:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003916:	f000 fe45 	bl	80045a4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f810 	bl	8003940 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003920:	4b06      	ldr	r3, [pc, #24]	; (800393c <prvCheckTasksWaitingTermination+0x58>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1e1      	bne.n	80038ec <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003928:	bf00      	nop
 800392a:	bf00      	nop
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	200000e4 	.word	0x200000e4
 8003938:	20000110 	.word	0x20000110
 800393c:	200000f8 	.word	0x200000f8

08003940 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394c:	4618      	mov	r0, r3
 800394e:	f001 f805 	bl	800495c <vPortFree>
                vPortFree( pxTCB );
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f001 f802 	bl	800495c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003958:	bf00      	nop
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003964:	4b0a      	ldr	r3, [pc, #40]	; (8003990 <prvResetNextTaskUnblockTime+0x30>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d104      	bne.n	8003978 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800396e:	4b09      	ldr	r3, [pc, #36]	; (8003994 <prvResetNextTaskUnblockTime+0x34>)
 8003970:	f04f 32ff 	mov.w	r2, #4294967295
 8003974:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003976:	e005      	b.n	8003984 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003978:	4b05      	ldr	r3, [pc, #20]	; (8003990 <prvResetNextTaskUnblockTime+0x30>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a04      	ldr	r2, [pc, #16]	; (8003994 <prvResetNextTaskUnblockTime+0x34>)
 8003982:	6013      	str	r3, [r2, #0]
}
 8003984:	bf00      	nop
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	200000c8 	.word	0x200000c8
 8003994:	20000130 	.word	0x20000130

08003998 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800399e:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <xTaskGetSchedulerState+0x34>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d102      	bne.n	80039ac <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80039a6:	2301      	movs	r3, #1
 80039a8:	607b      	str	r3, [r7, #4]
 80039aa:	e008      	b.n	80039be <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039ac:	4b08      	ldr	r3, [pc, #32]	; (80039d0 <xTaskGetSchedulerState+0x38>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d102      	bne.n	80039ba <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80039b4:	2302      	movs	r3, #2
 80039b6:	607b      	str	r3, [r7, #4]
 80039b8:	e001      	b.n	80039be <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80039ba:	2300      	movs	r3, #0
 80039bc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80039be:	687b      	ldr	r3, [r7, #4]
    }
 80039c0:	4618      	mov	r0, r3
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	2000011c 	.word	0x2000011c
 80039d0:	20000138 	.word	0x20000138

080039d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80039e0:	2300      	movs	r3, #0
 80039e2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d068      	beq.n	8003abc <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80039ea:	4b37      	ldr	r3, [pc, #220]	; (8003ac8 <xTaskPriorityDisinherit+0xf4>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d00a      	beq.n	8003a0a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80039f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f8:	f383 8811 	msr	BASEPRI, r3
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	60fb      	str	r3, [r7, #12]
    }
 8003a06:	bf00      	nop
 8003a08:	e7fe      	b.n	8003a08 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10a      	bne.n	8003a28 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a16:	f383 8811 	msr	BASEPRI, r3
 8003a1a:	f3bf 8f6f 	isb	sy
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	60bb      	str	r3, [r7, #8]
    }
 8003a24:	bf00      	nop
 8003a26:	e7fe      	b.n	8003a26 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a2c:	1e5a      	subs	r2, r3, #1
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d03e      	beq.n	8003abc <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d13a      	bne.n	8003abc <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	3304      	adds	r3, #4
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fe fbee 	bl	800222c <uxListRemove>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10a      	bne.n	8003a6c <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	43da      	mvns	r2, r3
 8003a62:	4b1a      	ldr	r3, [pc, #104]	; (8003acc <xTaskPriorityDisinherit+0xf8>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4013      	ands	r3, r2
 8003a68:	4a18      	ldr	r2, [pc, #96]	; (8003acc <xTaskPriorityDisinherit+0xf8>)
 8003a6a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4619      	mov	r1, r3
 8003a70:	204a      	movs	r0, #74	; 0x4a
 8003a72:	f002 fcf9 	bl	8006468 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a82:	f1c3 0205 	rsb	r2, r3, #5
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8e:	2201      	movs	r2, #1
 8003a90:	409a      	lsls	r2, r3
 8003a92:	4b0e      	ldr	r3, [pc, #56]	; (8003acc <xTaskPriorityDisinherit+0xf8>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	4a0c      	ldr	r2, [pc, #48]	; (8003acc <xTaskPriorityDisinherit+0xf8>)
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4a09      	ldr	r2, [pc, #36]	; (8003ad0 <xTaskPriorityDisinherit+0xfc>)
 8003aaa:	441a      	add	r2, r3
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	3304      	adds	r3, #4
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	4610      	mov	r0, r2
 8003ab4:	f7fe fb5d 	bl	8002172 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003abc:	697b      	ldr	r3, [r7, #20]
    }
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3718      	adds	r7, #24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20000038 	.word	0x20000038
 8003acc:	20000118 	.word	0x20000118
 8003ad0:	2000003c 	.word	0x2000003c

08003ad4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003ade:	4b32      	ldr	r3, [pc, #200]	; (8003ba8 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ae4:	4b31      	ldr	r3, [pc, #196]	; (8003bac <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fe fb9e 	bl	800222c <uxListRemove>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10b      	bne.n	8003b0e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003af6:	4b2d      	ldr	r3, [pc, #180]	; (8003bac <prvAddCurrentTaskToDelayedList+0xd8>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afc:	2201      	movs	r2, #1
 8003afe:	fa02 f303 	lsl.w	r3, r2, r3
 8003b02:	43da      	mvns	r2, r3
 8003b04:	4b2a      	ldr	r3, [pc, #168]	; (8003bb0 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	4a29      	ldr	r2, [pc, #164]	; (8003bb0 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003b0c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b14:	d110      	bne.n	8003b38 <prvAddCurrentTaskToDelayedList+0x64>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00d      	beq.n	8003b38 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003b1c:	4b23      	ldr	r3, [pc, #140]	; (8003bac <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	211b      	movs	r1, #27
 8003b22:	4618      	mov	r0, r3
 8003b24:	f003 fa64 	bl	8006ff0 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b28:	4b20      	ldr	r3, [pc, #128]	; (8003bac <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	4619      	mov	r1, r3
 8003b30:	4820      	ldr	r0, [pc, #128]	; (8003bb4 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003b32:	f7fe fb1e 	bl	8002172 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003b36:	e032      	b.n	8003b9e <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b40:	4b1a      	ldr	r3, [pc, #104]	; (8003bac <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d20f      	bcs.n	8003b70 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003b50:	4b16      	ldr	r3, [pc, #88]	; (8003bac <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2104      	movs	r1, #4
 8003b56:	4618      	mov	r0, r3
 8003b58:	f003 fa4a 	bl	8006ff0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b5c:	4b16      	ldr	r3, [pc, #88]	; (8003bb8 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	4b12      	ldr	r3, [pc, #72]	; (8003bac <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3304      	adds	r3, #4
 8003b66:	4619      	mov	r1, r3
 8003b68:	4610      	mov	r0, r2
 8003b6a:	f7fe fb26 	bl	80021ba <vListInsert>
}
 8003b6e:	e016      	b.n	8003b9e <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003b70:	4b0e      	ldr	r3, [pc, #56]	; (8003bac <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2104      	movs	r1, #4
 8003b76:	4618      	mov	r0, r3
 8003b78:	f003 fa3a 	bl	8006ff0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b7c:	4b0f      	ldr	r3, [pc, #60]	; (8003bbc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	4b0a      	ldr	r3, [pc, #40]	; (8003bac <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	3304      	adds	r3, #4
 8003b86:	4619      	mov	r1, r3
 8003b88:	4610      	mov	r0, r2
 8003b8a:	f7fe fb16 	bl	80021ba <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003b8e:	4b0c      	ldr	r3, [pc, #48]	; (8003bc0 <prvAddCurrentTaskToDelayedList+0xec>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d202      	bcs.n	8003b9e <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003b98:	4a09      	ldr	r2, [pc, #36]	; (8003bc0 <prvAddCurrentTaskToDelayedList+0xec>)
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	6013      	str	r3, [r2, #0]
}
 8003b9e:	bf00      	nop
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	20000114 	.word	0x20000114
 8003bac:	20000038 	.word	0x20000038
 8003bb0:	20000118 	.word	0x20000118
 8003bb4:	200000fc 	.word	0x200000fc
 8003bb8:	200000cc 	.word	0x200000cc
 8003bbc:	200000c8 	.word	0x200000c8
 8003bc0:	20000130 	.word	0x20000130

08003bc4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003bce:	f000 fad5 	bl	800417c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003bd2:	4b11      	ldr	r3, [pc, #68]	; (8003c18 <xTimerCreateTimerTask+0x54>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00b      	beq.n	8003bf2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003bda:	4b10      	ldr	r3, [pc, #64]	; (8003c1c <xTimerCreateTimerTask+0x58>)
 8003bdc:	9301      	str	r3, [sp, #4]
 8003bde:	2302      	movs	r3, #2
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	2300      	movs	r3, #0
 8003be4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003be8:	490d      	ldr	r1, [pc, #52]	; (8003c20 <xTimerCreateTimerTask+0x5c>)
 8003bea:	480e      	ldr	r0, [pc, #56]	; (8003c24 <xTimerCreateTimerTask+0x60>)
 8003bec:	f7ff f8a2 	bl	8002d34 <xTaskCreate>
 8003bf0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10a      	bne.n	8003c0e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfc:	f383 8811 	msr	BASEPRI, r3
 8003c00:	f3bf 8f6f 	isb	sy
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	603b      	str	r3, [r7, #0]
    }
 8003c0a:	bf00      	nop
 8003c0c:	e7fe      	b.n	8003c0c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003c0e:	687b      	ldr	r3, [r7, #4]
    }
 8003c10:	4618      	mov	r0, r3
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	2000016c 	.word	0x2000016c
 8003c1c:	20000170 	.word	0x20000170
 8003c20:	08007528 	.word	0x08007528
 8003c24:	08003d5d 	.word	0x08003d5d

08003c28 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b08a      	sub	sp, #40	; 0x28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
 8003c34:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003c36:	2300      	movs	r3, #0
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d10a      	bne.n	8003c56 <xTimerGenericCommand+0x2e>
        __asm volatile
 8003c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c44:	f383 8811 	msr	BASEPRI, r3
 8003c48:	f3bf 8f6f 	isb	sy
 8003c4c:	f3bf 8f4f 	dsb	sy
 8003c50:	623b      	str	r3, [r7, #32]
    }
 8003c52:	bf00      	nop
 8003c54:	e7fe      	b.n	8003c54 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003c56:	4b1a      	ldr	r3, [pc, #104]	; (8003cc0 <xTimerGenericCommand+0x98>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d02a      	beq.n	8003cb4 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	2b05      	cmp	r3, #5
 8003c6e:	dc18      	bgt.n	8003ca2 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003c70:	f7ff fe92 	bl	8003998 <xTaskGetSchedulerState>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d109      	bne.n	8003c8e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003c7a:	4b11      	ldr	r3, [pc, #68]	; (8003cc0 <xTimerGenericCommand+0x98>)
 8003c7c:	6818      	ldr	r0, [r3, #0]
 8003c7e:	f107 0114 	add.w	r1, r7, #20
 8003c82:	2300      	movs	r3, #0
 8003c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c86:	f7fe fbeb 	bl	8002460 <xQueueGenericSend>
 8003c8a:	6278      	str	r0, [r7, #36]	; 0x24
 8003c8c:	e012      	b.n	8003cb4 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003c8e:	4b0c      	ldr	r3, [pc, #48]	; (8003cc0 <xTimerGenericCommand+0x98>)
 8003c90:	6818      	ldr	r0, [r3, #0]
 8003c92:	f107 0114 	add.w	r1, r7, #20
 8003c96:	2300      	movs	r3, #0
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f7fe fbe1 	bl	8002460 <xQueueGenericSend>
 8003c9e:	6278      	str	r0, [r7, #36]	; 0x24
 8003ca0:	e008      	b.n	8003cb4 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003ca2:	4b07      	ldr	r3, [pc, #28]	; (8003cc0 <xTimerGenericCommand+0x98>)
 8003ca4:	6818      	ldr	r0, [r3, #0]
 8003ca6:	f107 0114 	add.w	r1, r7, #20
 8003caa:	2300      	movs	r3, #0
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	f7fe fcfd 	bl	80026ac <xQueueGenericSendFromISR>
 8003cb2:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3728      	adds	r7, #40	; 0x28
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	2000016c 	.word	0x2000016c

08003cc4 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b088      	sub	sp, #32
 8003cc8:	af02      	add	r7, sp, #8
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cce:	4b22      	ldr	r3, [pc, #136]	; (8003d58 <prvProcessExpiredTimer+0x94>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	3304      	adds	r3, #4
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7fe faa5 	bl	800222c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d022      	beq.n	8003d36 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	699a      	ldr	r2, [r3, #24]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	18d1      	adds	r1, r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	6978      	ldr	r0, [r7, #20]
 8003cfe:	f000 f8d1 	bl	8003ea4 <prvInsertTimerInActiveList>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d01f      	beq.n	8003d48 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003d08:	2300      	movs	r3, #0
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	2100      	movs	r1, #0
 8003d12:	6978      	ldr	r0, [r7, #20]
 8003d14:	f7ff ff88 	bl	8003c28 <xTimerGenericCommand>
 8003d18:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d113      	bne.n	8003d48 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d24:	f383 8811 	msr	BASEPRI, r3
 8003d28:	f3bf 8f6f 	isb	sy
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	60fb      	str	r3, [r7, #12]
    }
 8003d32:	bf00      	nop
 8003d34:	e7fe      	b.n	8003d34 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d3c:	f023 0301 	bic.w	r3, r3, #1
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	6978      	ldr	r0, [r7, #20]
 8003d4e:	4798      	blx	r3
    }
 8003d50:	bf00      	nop
 8003d52:	3718      	adds	r7, #24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	20000164 	.word	0x20000164

08003d5c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d64:	f107 0308 	add.w	r3, r7, #8
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 f857 	bl	8003e1c <prvGetNextExpireTime>
 8003d6e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	4619      	mov	r1, r3
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 f803 	bl	8003d80 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003d7a:	f000 f8d5 	bl	8003f28 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d7e:	e7f1      	b.n	8003d64 <prvTimerTask+0x8>

08003d80 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003d8a:	f7ff fa1b 	bl	80031c4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d8e:	f107 0308 	add.w	r3, r7, #8
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 f866 	bl	8003e64 <prvSampleTimeNow>
 8003d98:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d130      	bne.n	8003e02 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10a      	bne.n	8003dbc <prvProcessTimerOrBlockTask+0x3c>
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d806      	bhi.n	8003dbc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003dae:	f7ff fa17 	bl	80031e0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003db2:	68f9      	ldr	r1, [r7, #12]
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f7ff ff85 	bl	8003cc4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003dba:	e024      	b.n	8003e06 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d008      	beq.n	8003dd4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003dc2:	4b13      	ldr	r3, [pc, #76]	; (8003e10 <prvProcessTimerOrBlockTask+0x90>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d101      	bne.n	8003dd0 <prvProcessTimerOrBlockTask+0x50>
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e000      	b.n	8003dd2 <prvProcessTimerOrBlockTask+0x52>
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003dd4:	4b0f      	ldr	r3, [pc, #60]	; (8003e14 <prvProcessTimerOrBlockTask+0x94>)
 8003dd6:	6818      	ldr	r0, [r3, #0]
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	4619      	mov	r1, r3
 8003de2:	f7fe ff73 	bl	8002ccc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003de6:	f7ff f9fb 	bl	80031e0 <xTaskResumeAll>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10a      	bne.n	8003e06 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003df0:	4b09      	ldr	r3, [pc, #36]	; (8003e18 <prvProcessTimerOrBlockTask+0x98>)
 8003df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	f3bf 8f4f 	dsb	sy
 8003dfc:	f3bf 8f6f 	isb	sy
    }
 8003e00:	e001      	b.n	8003e06 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003e02:	f7ff f9ed 	bl	80031e0 <xTaskResumeAll>
    }
 8003e06:	bf00      	nop
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	20000168 	.word	0x20000168
 8003e14:	2000016c 	.word	0x2000016c
 8003e18:	e000ed04 	.word	0xe000ed04

08003e1c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003e24:	4b0e      	ldr	r3, [pc, #56]	; (8003e60 <prvGetNextExpireTime+0x44>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <prvGetNextExpireTime+0x16>
 8003e2e:	2201      	movs	r2, #1
 8003e30:	e000      	b.n	8003e34 <prvGetNextExpireTime+0x18>
 8003e32:	2200      	movs	r2, #0
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d105      	bne.n	8003e4c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e40:	4b07      	ldr	r3, [pc, #28]	; (8003e60 <prvGetNextExpireTime+0x44>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	60fb      	str	r3, [r7, #12]
 8003e4a:	e001      	b.n	8003e50 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003e50:	68fb      	ldr	r3, [r7, #12]
    }
 8003e52:	4618      	mov	r0, r3
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	20000164 	.word	0x20000164

08003e64 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003e6c:	f7ff fa58 	bl	8003320 <xTaskGetTickCount>
 8003e70:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003e72:	4b0b      	ldr	r3, [pc, #44]	; (8003ea0 <prvSampleTimeNow+0x3c>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d205      	bcs.n	8003e88 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003e7c:	f000 f91a 	bl	80040b4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	e002      	b.n	8003e8e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003e8e:	4a04      	ldr	r2, [pc, #16]	; (8003ea0 <prvSampleTimeNow+0x3c>)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003e94:	68fb      	ldr	r3, [r7, #12]
    }
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	20000174 	.word	0x20000174

08003ea4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d812      	bhi.n	8003ef0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	1ad2      	subs	r2, r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d302      	bcc.n	8003ede <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	e01b      	b.n	8003f16 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003ede:	4b10      	ldr	r3, [pc, #64]	; (8003f20 <prvInsertTimerInActiveList+0x7c>)
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	3304      	adds	r3, #4
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	4610      	mov	r0, r2
 8003eea:	f7fe f966 	bl	80021ba <vListInsert>
 8003eee:	e012      	b.n	8003f16 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d206      	bcs.n	8003f06 <prvInsertTimerInActiveList+0x62>
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d302      	bcc.n	8003f06 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003f00:	2301      	movs	r3, #1
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	e007      	b.n	8003f16 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f06:	4b07      	ldr	r3, [pc, #28]	; (8003f24 <prvInsertTimerInActiveList+0x80>)
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	4619      	mov	r1, r3
 8003f10:	4610      	mov	r0, r2
 8003f12:	f7fe f952 	bl	80021ba <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003f16:	697b      	ldr	r3, [r7, #20]
    }
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3718      	adds	r7, #24
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	20000168 	.word	0x20000168
 8003f24:	20000164 	.word	0x20000164

08003f28 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b08c      	sub	sp, #48	; 0x30
 8003f2c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f2e:	e0ae      	b.n	800408e <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f2c0 80aa 	blt.w	800408c <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d004      	beq.n	8003f4e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	3304      	adds	r3, #4
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7fe f96f 	bl	800222c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f4e:	1d3b      	adds	r3, r7, #4
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7ff ff87 	bl	8003e64 <prvSampleTimeNow>
 8003f56:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2b09      	cmp	r3, #9
 8003f5c:	f200 8097 	bhi.w	800408e <prvProcessReceivedCommands+0x166>
 8003f60:	a201      	add	r2, pc, #4	; (adr r2, 8003f68 <prvProcessReceivedCommands+0x40>)
 8003f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f66:	bf00      	nop
 8003f68:	08003f91 	.word	0x08003f91
 8003f6c:	08003f91 	.word	0x08003f91
 8003f70:	08003f91 	.word	0x08003f91
 8003f74:	08004005 	.word	0x08004005
 8003f78:	08004019 	.word	0x08004019
 8003f7c:	08004063 	.word	0x08004063
 8003f80:	08003f91 	.word	0x08003f91
 8003f84:	08003f91 	.word	0x08003f91
 8003f88:	08004005 	.word	0x08004005
 8003f8c:	08004019 	.word	0x08004019
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f96:	f043 0301 	orr.w	r3, r3, #1
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	18d1      	adds	r1, r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6a3a      	ldr	r2, [r7, #32]
 8003fae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fb0:	f7ff ff78 	bl	8003ea4 <prvInsertTimerInActiveList>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d069      	beq.n	800408e <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fc0:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d05e      	beq.n	800408e <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	441a      	add	r2, r3
 8003fd8:	2300      	movs	r3, #0
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	2300      	movs	r3, #0
 8003fde:	2100      	movs	r1, #0
 8003fe0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fe2:	f7ff fe21 	bl	8003c28 <xTimerGenericCommand>
 8003fe6:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d14f      	bne.n	800408e <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff2:	f383 8811 	msr	BASEPRI, r3
 8003ff6:	f3bf 8f6f 	isb	sy
 8003ffa:	f3bf 8f4f 	dsb	sy
 8003ffe:	61bb      	str	r3, [r7, #24]
    }
 8004000:	bf00      	nop
 8004002:	e7fe      	b.n	8004002 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800400a:	f023 0301 	bic.w	r3, r3, #1
 800400e:	b2da      	uxtb	r2, r3
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004012:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004016:	e03a      	b.n	800408e <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800401e:	f043 0301 	orr.w	r3, r3, #1
 8004022:	b2da      	uxtb	r2, r3
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10a      	bne.n	800404e <prvProcessReceivedCommands+0x126>
        __asm volatile
 8004038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403c:	f383 8811 	msr	BASEPRI, r3
 8004040:	f3bf 8f6f 	isb	sy
 8004044:	f3bf 8f4f 	dsb	sy
 8004048:	617b      	str	r3, [r7, #20]
    }
 800404a:	bf00      	nop
 800404c:	e7fe      	b.n	800404c <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004050:	699a      	ldr	r2, [r3, #24]
 8004052:	6a3b      	ldr	r3, [r7, #32]
 8004054:	18d1      	adds	r1, r2, r3
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	6a3a      	ldr	r2, [r7, #32]
 800405a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800405c:	f7ff ff22 	bl	8003ea4 <prvInsertTimerInActiveList>
                        break;
 8004060:	e015      	b.n	800408e <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004064:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d103      	bne.n	8004078 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8004070:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004072:	f000 fc73 	bl	800495c <vPortFree>
 8004076:	e00a      	b.n	800408e <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800407e:	f023 0301 	bic.w	r3, r3, #1
 8004082:	b2da      	uxtb	r2, r3
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800408a:	e000      	b.n	800408e <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800408c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800408e:	4b08      	ldr	r3, [pc, #32]	; (80040b0 <prvProcessReceivedCommands+0x188>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f107 0108 	add.w	r1, r7, #8
 8004096:	2200      	movs	r2, #0
 8004098:	4618      	mov	r0, r3
 800409a:	f7fe fbc5 	bl	8002828 <xQueueReceive>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f47f af45 	bne.w	8003f30 <prvProcessReceivedCommands+0x8>
        }
    }
 80040a6:	bf00      	nop
 80040a8:	bf00      	nop
 80040aa:	3728      	adds	r7, #40	; 0x28
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	2000016c 	.word	0x2000016c

080040b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b088      	sub	sp, #32
 80040b8:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040ba:	e048      	b.n	800414e <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040bc:	4b2d      	ldr	r3, [pc, #180]	; (8004174 <prvSwitchTimerLists+0xc0>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040c6:	4b2b      	ldr	r3, [pc, #172]	; (8004174 <prvSwitchTimerLists+0xc0>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	3304      	adds	r3, #4
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7fe f8a9 	bl	800222c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d02e      	beq.n	800414e <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	4413      	add	r3, r2
 80040f8:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d90e      	bls.n	8004120 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800410e:	4b19      	ldr	r3, [pc, #100]	; (8004174 <prvSwitchTimerLists+0xc0>)
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	3304      	adds	r3, #4
 8004116:	4619      	mov	r1, r3
 8004118:	4610      	mov	r0, r2
 800411a:	f7fe f84e 	bl	80021ba <vListInsert>
 800411e:	e016      	b.n	800414e <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004120:	2300      	movs	r3, #0
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	2300      	movs	r3, #0
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	2100      	movs	r1, #0
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f7ff fd7c 	bl	8003c28 <xTimerGenericCommand>
 8004130:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10a      	bne.n	800414e <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413c:	f383 8811 	msr	BASEPRI, r3
 8004140:	f3bf 8f6f 	isb	sy
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	603b      	str	r3, [r7, #0]
    }
 800414a:	bf00      	nop
 800414c:	e7fe      	b.n	800414c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800414e:	4b09      	ldr	r3, [pc, #36]	; (8004174 <prvSwitchTimerLists+0xc0>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1b1      	bne.n	80040bc <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004158:	4b06      	ldr	r3, [pc, #24]	; (8004174 <prvSwitchTimerLists+0xc0>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800415e:	4b06      	ldr	r3, [pc, #24]	; (8004178 <prvSwitchTimerLists+0xc4>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a04      	ldr	r2, [pc, #16]	; (8004174 <prvSwitchTimerLists+0xc0>)
 8004164:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004166:	4a04      	ldr	r2, [pc, #16]	; (8004178 <prvSwitchTimerLists+0xc4>)
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	6013      	str	r3, [r2, #0]
    }
 800416c:	bf00      	nop
 800416e:	3718      	adds	r7, #24
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	20000164 	.word	0x20000164
 8004178:	20000168 	.word	0x20000168

0800417c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004180:	f000 f9e0 	bl	8004544 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004184:	4b12      	ldr	r3, [pc, #72]	; (80041d0 <prvCheckForValidListAndQueue+0x54>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d11d      	bne.n	80041c8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800418c:	4811      	ldr	r0, [pc, #68]	; (80041d4 <prvCheckForValidListAndQueue+0x58>)
 800418e:	f7fd ffc3 	bl	8002118 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004192:	4811      	ldr	r0, [pc, #68]	; (80041d8 <prvCheckForValidListAndQueue+0x5c>)
 8004194:	f7fd ffc0 	bl	8002118 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004198:	4b10      	ldr	r3, [pc, #64]	; (80041dc <prvCheckForValidListAndQueue+0x60>)
 800419a:	4a0e      	ldr	r2, [pc, #56]	; (80041d4 <prvCheckForValidListAndQueue+0x58>)
 800419c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800419e:	4b10      	ldr	r3, [pc, #64]	; (80041e0 <prvCheckForValidListAndQueue+0x64>)
 80041a0:	4a0d      	ldr	r2, [pc, #52]	; (80041d8 <prvCheckForValidListAndQueue+0x5c>)
 80041a2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80041a4:	2200      	movs	r2, #0
 80041a6:	210c      	movs	r1, #12
 80041a8:	200a      	movs	r0, #10
 80041aa:	f7fe f8d1 	bl	8002350 <xQueueGenericCreate>
 80041ae:	4603      	mov	r3, r0
 80041b0:	4a07      	ldr	r2, [pc, #28]	; (80041d0 <prvCheckForValidListAndQueue+0x54>)
 80041b2:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80041b4:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <prvCheckForValidListAndQueue+0x54>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d005      	beq.n	80041c8 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80041bc:	4b04      	ldr	r3, [pc, #16]	; (80041d0 <prvCheckForValidListAndQueue+0x54>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4908      	ldr	r1, [pc, #32]	; (80041e4 <prvCheckForValidListAndQueue+0x68>)
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fe fd50 	bl	8002c68 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80041c8:	f000 f9ec 	bl	80045a4 <vPortExitCritical>
    }
 80041cc:	bf00      	nop
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	2000016c 	.word	0x2000016c
 80041d4:	2000013c 	.word	0x2000013c
 80041d8:	20000150 	.word	0x20000150
 80041dc:	20000164 	.word	0x20000164
 80041e0:	20000168 	.word	0x20000168
 80041e4:	08007530 	.word	0x08007530

080041e8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	3b04      	subs	r3, #4
 80041f8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004200:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	3b04      	subs	r3, #4
 8004206:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	f023 0201 	bic.w	r2, r3, #1
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	3b04      	subs	r3, #4
 8004216:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004218:	4a0c      	ldr	r2, [pc, #48]	; (800424c <pxPortInitialiseStack+0x64>)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	3b14      	subs	r3, #20
 8004222:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	3b04      	subs	r3, #4
 800422e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f06f 0202 	mvn.w	r2, #2
 8004236:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	3b20      	subs	r3, #32
 800423c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800423e:	68fb      	ldr	r3, [r7, #12]
}
 8004240:	4618      	mov	r0, r3
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	08004251 	.word	0x08004251

08004250 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004256:	2300      	movs	r3, #0
 8004258:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800425a:	4b12      	ldr	r3, [pc, #72]	; (80042a4 <prvTaskExitError+0x54>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004262:	d00a      	beq.n	800427a <prvTaskExitError+0x2a>
        __asm volatile
 8004264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004268:	f383 8811 	msr	BASEPRI, r3
 800426c:	f3bf 8f6f 	isb	sy
 8004270:	f3bf 8f4f 	dsb	sy
 8004274:	60fb      	str	r3, [r7, #12]
    }
 8004276:	bf00      	nop
 8004278:	e7fe      	b.n	8004278 <prvTaskExitError+0x28>
        __asm volatile
 800427a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427e:	f383 8811 	msr	BASEPRI, r3
 8004282:	f3bf 8f6f 	isb	sy
 8004286:	f3bf 8f4f 	dsb	sy
 800428a:	60bb      	str	r3, [r7, #8]
    }
 800428c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800428e:	bf00      	nop
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d0fc      	beq.n	8004290 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004296:	bf00      	nop
 8004298:	bf00      	nop
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr
 80042a4:	20000010 	.word	0x20000010
	...

080042b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80042b0:	4b07      	ldr	r3, [pc, #28]	; (80042d0 <pxCurrentTCBConst2>)
 80042b2:	6819      	ldr	r1, [r3, #0]
 80042b4:	6808      	ldr	r0, [r1, #0]
 80042b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ba:	f380 8809 	msr	PSP, r0
 80042be:	f3bf 8f6f 	isb	sy
 80042c2:	f04f 0000 	mov.w	r0, #0
 80042c6:	f380 8811 	msr	BASEPRI, r0
 80042ca:	4770      	bx	lr
 80042cc:	f3af 8000 	nop.w

080042d0 <pxCurrentTCBConst2>:
 80042d0:	20000038 	.word	0x20000038
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80042d4:	bf00      	nop
 80042d6:	bf00      	nop

080042d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80042d8:	4808      	ldr	r0, [pc, #32]	; (80042fc <prvPortStartFirstTask+0x24>)
 80042da:	6800      	ldr	r0, [r0, #0]
 80042dc:	6800      	ldr	r0, [r0, #0]
 80042de:	f380 8808 	msr	MSP, r0
 80042e2:	f04f 0000 	mov.w	r0, #0
 80042e6:	f380 8814 	msr	CONTROL, r0
 80042ea:	b662      	cpsie	i
 80042ec:	b661      	cpsie	f
 80042ee:	f3bf 8f4f 	dsb	sy
 80042f2:	f3bf 8f6f 	isb	sy
 80042f6:	df00      	svc	0
 80042f8:	bf00      	nop
 80042fa:	0000      	.short	0x0000
 80042fc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004300:	bf00      	nop
 8004302:	bf00      	nop

08004304 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800430a:	4b46      	ldr	r3, [pc, #280]	; (8004424 <xPortStartScheduler+0x120>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a46      	ldr	r2, [pc, #280]	; (8004428 <xPortStartScheduler+0x124>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d10a      	bne.n	800432a <xPortStartScheduler+0x26>
        __asm volatile
 8004314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004318:	f383 8811 	msr	BASEPRI, r3
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	f3bf 8f4f 	dsb	sy
 8004324:	613b      	str	r3, [r7, #16]
    }
 8004326:	bf00      	nop
 8004328:	e7fe      	b.n	8004328 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800432a:	4b3e      	ldr	r3, [pc, #248]	; (8004424 <xPortStartScheduler+0x120>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a3f      	ldr	r2, [pc, #252]	; (800442c <xPortStartScheduler+0x128>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d10a      	bne.n	800434a <xPortStartScheduler+0x46>
        __asm volatile
 8004334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004338:	f383 8811 	msr	BASEPRI, r3
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	60fb      	str	r3, [r7, #12]
    }
 8004346:	bf00      	nop
 8004348:	e7fe      	b.n	8004348 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800434a:	4b39      	ldr	r3, [pc, #228]	; (8004430 <xPortStartScheduler+0x12c>)
 800434c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	b2db      	uxtb	r3, r3
 8004354:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	22ff      	movs	r2, #255	; 0xff
 800435a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	b2db      	uxtb	r3, r3
 8004362:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004364:	78fb      	ldrb	r3, [r7, #3]
 8004366:	b2db      	uxtb	r3, r3
 8004368:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800436c:	b2da      	uxtb	r2, r3
 800436e:	4b31      	ldr	r3, [pc, #196]	; (8004434 <xPortStartScheduler+0x130>)
 8004370:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004372:	4b31      	ldr	r3, [pc, #196]	; (8004438 <xPortStartScheduler+0x134>)
 8004374:	2207      	movs	r2, #7
 8004376:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004378:	e009      	b.n	800438e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800437a:	4b2f      	ldr	r3, [pc, #188]	; (8004438 <xPortStartScheduler+0x134>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	3b01      	subs	r3, #1
 8004380:	4a2d      	ldr	r2, [pc, #180]	; (8004438 <xPortStartScheduler+0x134>)
 8004382:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004384:	78fb      	ldrb	r3, [r7, #3]
 8004386:	b2db      	uxtb	r3, r3
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	b2db      	uxtb	r3, r3
 800438c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800438e:	78fb      	ldrb	r3, [r7, #3]
 8004390:	b2db      	uxtb	r3, r3
 8004392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004396:	2b80      	cmp	r3, #128	; 0x80
 8004398:	d0ef      	beq.n	800437a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800439a:	4b27      	ldr	r3, [pc, #156]	; (8004438 <xPortStartScheduler+0x134>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f1c3 0307 	rsb	r3, r3, #7
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d00a      	beq.n	80043bc <xPortStartScheduler+0xb8>
        __asm volatile
 80043a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043aa:	f383 8811 	msr	BASEPRI, r3
 80043ae:	f3bf 8f6f 	isb	sy
 80043b2:	f3bf 8f4f 	dsb	sy
 80043b6:	60bb      	str	r3, [r7, #8]
    }
 80043b8:	bf00      	nop
 80043ba:	e7fe      	b.n	80043ba <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80043bc:	4b1e      	ldr	r3, [pc, #120]	; (8004438 <xPortStartScheduler+0x134>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	021b      	lsls	r3, r3, #8
 80043c2:	4a1d      	ldr	r2, [pc, #116]	; (8004438 <xPortStartScheduler+0x134>)
 80043c4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043c6:	4b1c      	ldr	r3, [pc, #112]	; (8004438 <xPortStartScheduler+0x134>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043ce:	4a1a      	ldr	r2, [pc, #104]	; (8004438 <xPortStartScheduler+0x134>)
 80043d0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80043da:	4b18      	ldr	r3, [pc, #96]	; (800443c <xPortStartScheduler+0x138>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a17      	ldr	r2, [pc, #92]	; (800443c <xPortStartScheduler+0x138>)
 80043e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043e4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80043e6:	4b15      	ldr	r3, [pc, #84]	; (800443c <xPortStartScheduler+0x138>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a14      	ldr	r2, [pc, #80]	; (800443c <xPortStartScheduler+0x138>)
 80043ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80043f0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80043f2:	f000 f963 	bl	80046bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80043f6:	4b12      	ldr	r3, [pc, #72]	; (8004440 <xPortStartScheduler+0x13c>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80043fc:	f000 f982 	bl	8004704 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004400:	4b10      	ldr	r3, [pc, #64]	; (8004444 <xPortStartScheduler+0x140>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a0f      	ldr	r2, [pc, #60]	; (8004444 <xPortStartScheduler+0x140>)
 8004406:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800440a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800440c:	f7ff ff64 	bl	80042d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004410:	f7ff f864 	bl	80034dc <vTaskSwitchContext>
    prvTaskExitError();
 8004414:	f7ff ff1c 	bl	8004250 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3718      	adds	r7, #24
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	e000ed00 	.word	0xe000ed00
 8004428:	410fc271 	.word	0x410fc271
 800442c:	410fc270 	.word	0x410fc270
 8004430:	e000e400 	.word	0xe000e400
 8004434:	20000178 	.word	0x20000178
 8004438:	2000017c 	.word	0x2000017c
 800443c:	e000ed20 	.word	0xe000ed20
 8004440:	20000010 	.word	0x20000010
 8004444:	e000ef34 	.word	0xe000ef34

08004448 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800444e:	4b37      	ldr	r3, [pc, #220]	; (800452c <vInitPrioGroupValue+0xe4>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a37      	ldr	r2, [pc, #220]	; (8004530 <vInitPrioGroupValue+0xe8>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d10a      	bne.n	800446e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445c:	f383 8811 	msr	BASEPRI, r3
 8004460:	f3bf 8f6f 	isb	sy
 8004464:	f3bf 8f4f 	dsb	sy
 8004468:	613b      	str	r3, [r7, #16]
    }
 800446a:	bf00      	nop
 800446c:	e7fe      	b.n	800446c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800446e:	4b2f      	ldr	r3, [pc, #188]	; (800452c <vInitPrioGroupValue+0xe4>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a30      	ldr	r2, [pc, #192]	; (8004534 <vInitPrioGroupValue+0xec>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d10a      	bne.n	800448e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447c:	f383 8811 	msr	BASEPRI, r3
 8004480:	f3bf 8f6f 	isb	sy
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	60fb      	str	r3, [r7, #12]
    }
 800448a:	bf00      	nop
 800448c:	e7fe      	b.n	800448c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800448e:	4b2a      	ldr	r3, [pc, #168]	; (8004538 <vInitPrioGroupValue+0xf0>)
 8004490:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	b2db      	uxtb	r3, r3
 8004498:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	22ff      	movs	r2, #255	; 0xff
 800449e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80044a8:	78fb      	ldrb	r3, [r7, #3]
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	4b22      	ldr	r3, [pc, #136]	; (800453c <vInitPrioGroupValue+0xf4>)
 80044b4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80044b6:	4b22      	ldr	r3, [pc, #136]	; (8004540 <vInitPrioGroupValue+0xf8>)
 80044b8:	2207      	movs	r2, #7
 80044ba:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044bc:	e009      	b.n	80044d2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80044be:	4b20      	ldr	r3, [pc, #128]	; (8004540 <vInitPrioGroupValue+0xf8>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	3b01      	subs	r3, #1
 80044c4:	4a1e      	ldr	r2, [pc, #120]	; (8004540 <vInitPrioGroupValue+0xf8>)
 80044c6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80044c8:	78fb      	ldrb	r3, [r7, #3]
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044d2:	78fb      	ldrb	r3, [r7, #3]
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044da:	2b80      	cmp	r3, #128	; 0x80
 80044dc:	d0ef      	beq.n	80044be <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80044de:	4b18      	ldr	r3, [pc, #96]	; (8004540 <vInitPrioGroupValue+0xf8>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f1c3 0307 	rsb	r3, r3, #7
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	d00a      	beq.n	8004500 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80044ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ee:	f383 8811 	msr	BASEPRI, r3
 80044f2:	f3bf 8f6f 	isb	sy
 80044f6:	f3bf 8f4f 	dsb	sy
 80044fa:	60bb      	str	r3, [r7, #8]
    }
 80044fc:	bf00      	nop
 80044fe:	e7fe      	b.n	80044fe <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004500:	4b0f      	ldr	r3, [pc, #60]	; (8004540 <vInitPrioGroupValue+0xf8>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	021b      	lsls	r3, r3, #8
 8004506:	4a0e      	ldr	r2, [pc, #56]	; (8004540 <vInitPrioGroupValue+0xf8>)
 8004508:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800450a:	4b0d      	ldr	r3, [pc, #52]	; (8004540 <vInitPrioGroupValue+0xf8>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004512:	4a0b      	ldr	r2, [pc, #44]	; (8004540 <vInitPrioGroupValue+0xf8>)
 8004514:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	b2da      	uxtb	r2, r3
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800451e:	bf00      	nop
 8004520:	371c      	adds	r7, #28
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	e000ed00 	.word	0xe000ed00
 8004530:	410fc271 	.word	0x410fc271
 8004534:	410fc270 	.word	0x410fc270
 8004538:	e000e400 	.word	0xe000e400
 800453c:	20000178 	.word	0x20000178
 8004540:	2000017c 	.word	0x2000017c

08004544 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
        __asm volatile
 800454a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454e:	f383 8811 	msr	BASEPRI, r3
 8004552:	f3bf 8f6f 	isb	sy
 8004556:	f3bf 8f4f 	dsb	sy
 800455a:	607b      	str	r3, [r7, #4]
    }
 800455c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800455e:	4b0f      	ldr	r3, [pc, #60]	; (800459c <vPortEnterCritical+0x58>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	3301      	adds	r3, #1
 8004564:	4a0d      	ldr	r2, [pc, #52]	; (800459c <vPortEnterCritical+0x58>)
 8004566:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004568:	4b0c      	ldr	r3, [pc, #48]	; (800459c <vPortEnterCritical+0x58>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d10f      	bne.n	8004590 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004570:	4b0b      	ldr	r3, [pc, #44]	; (80045a0 <vPortEnterCritical+0x5c>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <vPortEnterCritical+0x4c>
        __asm volatile
 800457a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457e:	f383 8811 	msr	BASEPRI, r3
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	f3bf 8f4f 	dsb	sy
 800458a:	603b      	str	r3, [r7, #0]
    }
 800458c:	bf00      	nop
 800458e:	e7fe      	b.n	800458e <vPortEnterCritical+0x4a>
    }
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	20000010 	.word	0x20000010
 80045a0:	e000ed04 	.word	0xe000ed04

080045a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80045aa:	4b12      	ldr	r3, [pc, #72]	; (80045f4 <vPortExitCritical+0x50>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10a      	bne.n	80045c8 <vPortExitCritical+0x24>
        __asm volatile
 80045b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b6:	f383 8811 	msr	BASEPRI, r3
 80045ba:	f3bf 8f6f 	isb	sy
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	607b      	str	r3, [r7, #4]
    }
 80045c4:	bf00      	nop
 80045c6:	e7fe      	b.n	80045c6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80045c8:	4b0a      	ldr	r3, [pc, #40]	; (80045f4 <vPortExitCritical+0x50>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	3b01      	subs	r3, #1
 80045ce:	4a09      	ldr	r2, [pc, #36]	; (80045f4 <vPortExitCritical+0x50>)
 80045d0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80045d2:	4b08      	ldr	r3, [pc, #32]	; (80045f4 <vPortExitCritical+0x50>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d105      	bne.n	80045e6 <vPortExitCritical+0x42>
 80045da:	2300      	movs	r3, #0
 80045dc:	603b      	str	r3, [r7, #0]
        __asm volatile
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	f383 8811 	msr	BASEPRI, r3
    }
 80045e4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80045e6:	bf00      	nop
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	20000010 	.word	0x20000010
	...

08004600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004600:	f3ef 8009 	mrs	r0, PSP
 8004604:	f3bf 8f6f 	isb	sy
 8004608:	4b15      	ldr	r3, [pc, #84]	; (8004660 <pxCurrentTCBConst>)
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	f01e 0f10 	tst.w	lr, #16
 8004610:	bf08      	it	eq
 8004612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800461a:	6010      	str	r0, [r2, #0]
 800461c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004620:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004624:	f380 8811 	msr	BASEPRI, r0
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f7fe ff54 	bl	80034dc <vTaskSwitchContext>
 8004634:	f04f 0000 	mov.w	r0, #0
 8004638:	f380 8811 	msr	BASEPRI, r0
 800463c:	bc09      	pop	{r0, r3}
 800463e:	6819      	ldr	r1, [r3, #0]
 8004640:	6808      	ldr	r0, [r1, #0]
 8004642:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004646:	f01e 0f10 	tst.w	lr, #16
 800464a:	bf08      	it	eq
 800464c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004650:	f380 8809 	msr	PSP, r0
 8004654:	f3bf 8f6f 	isb	sy
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	f3af 8000 	nop.w

08004660 <pxCurrentTCBConst>:
 8004660:	20000038 	.word	0x20000038
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004664:	bf00      	nop
 8004666:	bf00      	nop

08004668 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
        __asm volatile
 800466e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004672:	f383 8811 	msr	BASEPRI, r3
 8004676:	f3bf 8f6f 	isb	sy
 800467a:	f3bf 8f4f 	dsb	sy
 800467e:	607b      	str	r3, [r7, #4]
    }
 8004680:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004682:	f002 fb59 	bl	8006d38 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004686:	f7fe fe6d 	bl	8003364 <xTaskIncrementTick>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d006      	beq.n	800469e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004690:	f002 fbb0 	bl	8006df4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004694:	4b08      	ldr	r3, [pc, #32]	; (80046b8 <SysTick_Handler+0x50>)
 8004696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	e001      	b.n	80046a2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800469e:	f002 fb8d 	bl	8006dbc <SEGGER_SYSVIEW_RecordExitISR>
 80046a2:	2300      	movs	r3, #0
 80046a4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	f383 8811 	msr	BASEPRI, r3
    }
 80046ac:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80046ae:	bf00      	nop
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	e000ed04 	.word	0xe000ed04

080046bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80046c0:	4b0b      	ldr	r3, [pc, #44]	; (80046f0 <vPortSetupTimerInterrupt+0x34>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80046c6:	4b0b      	ldr	r3, [pc, #44]	; (80046f4 <vPortSetupTimerInterrupt+0x38>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80046cc:	4b0a      	ldr	r3, [pc, #40]	; (80046f8 <vPortSetupTimerInterrupt+0x3c>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a0a      	ldr	r2, [pc, #40]	; (80046fc <vPortSetupTimerInterrupt+0x40>)
 80046d2:	fba2 2303 	umull	r2, r3, r2, r3
 80046d6:	099b      	lsrs	r3, r3, #6
 80046d8:	4a09      	ldr	r2, [pc, #36]	; (8004700 <vPortSetupTimerInterrupt+0x44>)
 80046da:	3b01      	subs	r3, #1
 80046dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80046de:	4b04      	ldr	r3, [pc, #16]	; (80046f0 <vPortSetupTimerInterrupt+0x34>)
 80046e0:	2207      	movs	r2, #7
 80046e2:	601a      	str	r2, [r3, #0]
}
 80046e4:	bf00      	nop
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	e000e010 	.word	0xe000e010
 80046f4:	e000e018 	.word	0xe000e018
 80046f8:	20000000 	.word	0x20000000
 80046fc:	10624dd3 	.word	0x10624dd3
 8004700:	e000e014 	.word	0xe000e014

08004704 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004704:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004714 <vPortEnableVFP+0x10>
 8004708:	6801      	ldr	r1, [r0, #0]
 800470a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800470e:	6001      	str	r1, [r0, #0]
 8004710:	4770      	bx	lr
 8004712:	0000      	.short	0x0000
 8004714:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004718:	bf00      	nop
 800471a:	bf00      	nop

0800471c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004722:	f3ef 8305 	mrs	r3, IPSR
 8004726:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2b0f      	cmp	r3, #15
 800472c:	d914      	bls.n	8004758 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800472e:	4a17      	ldr	r2, [pc, #92]	; (800478c <vPortValidateInterruptPriority+0x70>)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4413      	add	r3, r2
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004738:	4b15      	ldr	r3, [pc, #84]	; (8004790 <vPortValidateInterruptPriority+0x74>)
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	7afa      	ldrb	r2, [r7, #11]
 800473e:	429a      	cmp	r2, r3
 8004740:	d20a      	bcs.n	8004758 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004746:	f383 8811 	msr	BASEPRI, r3
 800474a:	f3bf 8f6f 	isb	sy
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	607b      	str	r3, [r7, #4]
    }
 8004754:	bf00      	nop
 8004756:	e7fe      	b.n	8004756 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004758:	4b0e      	ldr	r3, [pc, #56]	; (8004794 <vPortValidateInterruptPriority+0x78>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004760:	4b0d      	ldr	r3, [pc, #52]	; (8004798 <vPortValidateInterruptPriority+0x7c>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	429a      	cmp	r2, r3
 8004766:	d90a      	bls.n	800477e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476c:	f383 8811 	msr	BASEPRI, r3
 8004770:	f3bf 8f6f 	isb	sy
 8004774:	f3bf 8f4f 	dsb	sy
 8004778:	603b      	str	r3, [r7, #0]
    }
 800477a:	bf00      	nop
 800477c:	e7fe      	b.n	800477c <vPortValidateInterruptPriority+0x60>
    }
 800477e:	bf00      	nop
 8004780:	3714      	adds	r7, #20
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	e000e3f0 	.word	0xe000e3f0
 8004790:	20000178 	.word	0x20000178
 8004794:	e000ed0c 	.word	0xe000ed0c
 8004798:	2000017c 	.word	0x2000017c

0800479c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b08a      	sub	sp, #40	; 0x28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80047a4:	2300      	movs	r3, #0
 80047a6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80047a8:	f7fe fd0c 	bl	80031c4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80047ac:	4b65      	ldr	r3, [pc, #404]	; (8004944 <pvPortMalloc+0x1a8>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80047b4:	f000 f934 	bl	8004a20 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80047b8:	4b63      	ldr	r3, [pc, #396]	; (8004948 <pvPortMalloc+0x1ac>)
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4013      	ands	r3, r2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f040 80a7 	bne.w	8004914 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d02d      	beq.n	8004828 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80047cc:	2208      	movs	r2, #8
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d227      	bcs.n	8004828 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80047d8:	2208      	movs	r2, #8
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4413      	add	r3, r2
 80047de:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d021      	beq.n	800482e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f023 0307 	bic.w	r3, r3, #7
 80047f0:	3308      	adds	r3, #8
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d214      	bcs.n	8004822 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f023 0307 	bic.w	r3, r3, #7
 80047fe:	3308      	adds	r3, #8
 8004800:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f003 0307 	and.w	r3, r3, #7
 8004808:	2b00      	cmp	r3, #0
 800480a:	d010      	beq.n	800482e <pvPortMalloc+0x92>
        __asm volatile
 800480c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004810:	f383 8811 	msr	BASEPRI, r3
 8004814:	f3bf 8f6f 	isb	sy
 8004818:	f3bf 8f4f 	dsb	sy
 800481c:	617b      	str	r3, [r7, #20]
    }
 800481e:	bf00      	nop
 8004820:	e7fe      	b.n	8004820 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004822:	2300      	movs	r3, #0
 8004824:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004826:	e002      	b.n	800482e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004828:	2300      	movs	r3, #0
 800482a:	607b      	str	r3, [r7, #4]
 800482c:	e000      	b.n	8004830 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800482e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d06e      	beq.n	8004914 <pvPortMalloc+0x178>
 8004836:	4b45      	ldr	r3, [pc, #276]	; (800494c <pvPortMalloc+0x1b0>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	429a      	cmp	r2, r3
 800483e:	d869      	bhi.n	8004914 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004840:	4b43      	ldr	r3, [pc, #268]	; (8004950 <pvPortMalloc+0x1b4>)
 8004842:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004844:	4b42      	ldr	r3, [pc, #264]	; (8004950 <pvPortMalloc+0x1b4>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800484a:	e004      	b.n	8004856 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	429a      	cmp	r2, r3
 800485e:	d903      	bls.n	8004868 <pvPortMalloc+0xcc>
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1f1      	bne.n	800484c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004868:	4b36      	ldr	r3, [pc, #216]	; (8004944 <pvPortMalloc+0x1a8>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800486e:	429a      	cmp	r2, r3
 8004870:	d050      	beq.n	8004914 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004872:	6a3b      	ldr	r3, [r7, #32]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2208      	movs	r2, #8
 8004878:	4413      	add	r3, r2
 800487a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	6a3b      	ldr	r3, [r7, #32]
 8004882:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	1ad2      	subs	r2, r2, r3
 800488c:	2308      	movs	r3, #8
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	429a      	cmp	r2, r3
 8004892:	d91f      	bls.n	80048d4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4413      	add	r3, r2
 800489a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	f003 0307 	and.w	r3, r3, #7
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00a      	beq.n	80048bc <pvPortMalloc+0x120>
        __asm volatile
 80048a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048aa:	f383 8811 	msr	BASEPRI, r3
 80048ae:	f3bf 8f6f 	isb	sy
 80048b2:	f3bf 8f4f 	dsb	sy
 80048b6:	613b      	str	r3, [r7, #16]
    }
 80048b8:	bf00      	nop
 80048ba:	e7fe      	b.n	80048ba <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80048bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	1ad2      	subs	r2, r2, r3
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80048ce:	69b8      	ldr	r0, [r7, #24]
 80048d0:	f000 f908 	bl	8004ae4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80048d4:	4b1d      	ldr	r3, [pc, #116]	; (800494c <pvPortMalloc+0x1b0>)
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	4a1b      	ldr	r2, [pc, #108]	; (800494c <pvPortMalloc+0x1b0>)
 80048e0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80048e2:	4b1a      	ldr	r3, [pc, #104]	; (800494c <pvPortMalloc+0x1b0>)
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	4b1b      	ldr	r3, [pc, #108]	; (8004954 <pvPortMalloc+0x1b8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d203      	bcs.n	80048f6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80048ee:	4b17      	ldr	r3, [pc, #92]	; (800494c <pvPortMalloc+0x1b0>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a18      	ldr	r2, [pc, #96]	; (8004954 <pvPortMalloc+0x1b8>)
 80048f4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	4b13      	ldr	r3, [pc, #76]	; (8004948 <pvPortMalloc+0x1ac>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	431a      	orrs	r2, r3
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004906:	2200      	movs	r2, #0
 8004908:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800490a:	4b13      	ldr	r3, [pc, #76]	; (8004958 <pvPortMalloc+0x1bc>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	3301      	adds	r3, #1
 8004910:	4a11      	ldr	r2, [pc, #68]	; (8004958 <pvPortMalloc+0x1bc>)
 8004912:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004914:	f7fe fc64 	bl	80031e0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	f003 0307 	and.w	r3, r3, #7
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00a      	beq.n	8004938 <pvPortMalloc+0x19c>
        __asm volatile
 8004922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004926:	f383 8811 	msr	BASEPRI, r3
 800492a:	f3bf 8f6f 	isb	sy
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	60fb      	str	r3, [r7, #12]
    }
 8004934:	bf00      	nop
 8004936:	e7fe      	b.n	8004936 <pvPortMalloc+0x19a>
    return pvReturn;
 8004938:	69fb      	ldr	r3, [r7, #28]
}
 800493a:	4618      	mov	r0, r3
 800493c:	3728      	adds	r7, #40	; 0x28
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	20012d88 	.word	0x20012d88
 8004948:	20012d9c 	.word	0x20012d9c
 800494c:	20012d8c 	.word	0x20012d8c
 8004950:	20012d80 	.word	0x20012d80
 8004954:	20012d90 	.word	0x20012d90
 8004958:	20012d94 	.word	0x20012d94

0800495c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d04d      	beq.n	8004a0a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800496e:	2308      	movs	r3, #8
 8004970:	425b      	negs	r3, r3
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	4413      	add	r3, r2
 8004976:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	4b24      	ldr	r3, [pc, #144]	; (8004a14 <vPortFree+0xb8>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4013      	ands	r3, r2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10a      	bne.n	80049a0 <vPortFree+0x44>
        __asm volatile
 800498a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	60fb      	str	r3, [r7, #12]
    }
 800499c:	bf00      	nop
 800499e:	e7fe      	b.n	800499e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00a      	beq.n	80049be <vPortFree+0x62>
        __asm volatile
 80049a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ac:	f383 8811 	msr	BASEPRI, r3
 80049b0:	f3bf 8f6f 	isb	sy
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	60bb      	str	r3, [r7, #8]
    }
 80049ba:	bf00      	nop
 80049bc:	e7fe      	b.n	80049bc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	4b14      	ldr	r3, [pc, #80]	; (8004a14 <vPortFree+0xb8>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4013      	ands	r3, r2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d01e      	beq.n	8004a0a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d11a      	bne.n	8004a0a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	685a      	ldr	r2, [r3, #4]
 80049d8:	4b0e      	ldr	r3, [pc, #56]	; (8004a14 <vPortFree+0xb8>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	43db      	mvns	r3, r3
 80049de:	401a      	ands	r2, r3
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80049e4:	f7fe fbee 	bl	80031c4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	4b0a      	ldr	r3, [pc, #40]	; (8004a18 <vPortFree+0xbc>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4413      	add	r3, r2
 80049f2:	4a09      	ldr	r2, [pc, #36]	; (8004a18 <vPortFree+0xbc>)
 80049f4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80049f6:	6938      	ldr	r0, [r7, #16]
 80049f8:	f000 f874 	bl	8004ae4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80049fc:	4b07      	ldr	r3, [pc, #28]	; (8004a1c <vPortFree+0xc0>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	3301      	adds	r3, #1
 8004a02:	4a06      	ldr	r2, [pc, #24]	; (8004a1c <vPortFree+0xc0>)
 8004a04:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004a06:	f7fe fbeb 	bl	80031e0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004a0a:	bf00      	nop
 8004a0c:	3718      	adds	r7, #24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	20012d9c 	.word	0x20012d9c
 8004a18:	20012d8c 	.word	0x20012d8c
 8004a1c:	20012d98 	.word	0x20012d98

08004a20 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a26:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004a2a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004a2c:	4b27      	ldr	r3, [pc, #156]	; (8004acc <prvHeapInit+0xac>)
 8004a2e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f003 0307 	and.w	r3, r3, #7
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00c      	beq.n	8004a54 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	3307      	adds	r3, #7
 8004a3e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f023 0307 	bic.w	r3, r3, #7
 8004a46:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	4a1f      	ldr	r2, [pc, #124]	; (8004acc <prvHeapInit+0xac>)
 8004a50:	4413      	add	r3, r2
 8004a52:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a58:	4a1d      	ldr	r2, [pc, #116]	; (8004ad0 <prvHeapInit+0xb0>)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004a5e:	4b1c      	ldr	r3, [pc, #112]	; (8004ad0 <prvHeapInit+0xb0>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	4413      	add	r3, r2
 8004a6a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004a6c:	2208      	movs	r2, #8
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	1a9b      	subs	r3, r3, r2
 8004a72:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f023 0307 	bic.w	r3, r3, #7
 8004a7a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4a15      	ldr	r2, [pc, #84]	; (8004ad4 <prvHeapInit+0xb4>)
 8004a80:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004a82:	4b14      	ldr	r3, [pc, #80]	; (8004ad4 <prvHeapInit+0xb4>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2200      	movs	r2, #0
 8004a88:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004a8a:	4b12      	ldr	r3, [pc, #72]	; (8004ad4 <prvHeapInit+0xb4>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	1ad2      	subs	r2, r2, r3
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004aa0:	4b0c      	ldr	r3, [pc, #48]	; (8004ad4 <prvHeapInit+0xb4>)
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	4a0a      	ldr	r2, [pc, #40]	; (8004ad8 <prvHeapInit+0xb8>)
 8004aae:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	4a09      	ldr	r2, [pc, #36]	; (8004adc <prvHeapInit+0xbc>)
 8004ab6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ab8:	4b09      	ldr	r3, [pc, #36]	; (8004ae0 <prvHeapInit+0xc0>)
 8004aba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004abe:	601a      	str	r2, [r3, #0]
}
 8004ac0:	bf00      	nop
 8004ac2:	3714      	adds	r7, #20
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	20000180 	.word	0x20000180
 8004ad0:	20012d80 	.word	0x20012d80
 8004ad4:	20012d88 	.word	0x20012d88
 8004ad8:	20012d90 	.word	0x20012d90
 8004adc:	20012d8c 	.word	0x20012d8c
 8004ae0:	20012d9c 	.word	0x20012d9c

08004ae4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004aec:	4b28      	ldr	r3, [pc, #160]	; (8004b90 <prvInsertBlockIntoFreeList+0xac>)
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	e002      	b.n	8004af8 <prvInsertBlockIntoFreeList+0x14>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d8f7      	bhi.n	8004af2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d108      	bne.n	8004b26 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	441a      	add	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	441a      	add	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d118      	bne.n	8004b6c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	4b15      	ldr	r3, [pc, #84]	; (8004b94 <prvInsertBlockIntoFreeList+0xb0>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d00d      	beq.n	8004b62 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	441a      	add	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	e008      	b.n	8004b74 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b62:	4b0c      	ldr	r3, [pc, #48]	; (8004b94 <prvInsertBlockIntoFreeList+0xb0>)
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	601a      	str	r2, [r3, #0]
 8004b6a:	e003      	b.n	8004b74 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d002      	beq.n	8004b82 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004b82:	bf00      	nop
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	20012d80 	.word	0x20012d80
 8004b94:	20012d88 	.word	0x20012d88

08004b98 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	607b      	str	r3, [r7, #4]
 8004ba2:	e033      	b.n	8004c0c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004ba4:	491e      	ldr	r1, [pc, #120]	; (8004c20 <_cbSendTaskList+0x88>)
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	440b      	add	r3, r1
 8004bb2:	6818      	ldr	r0, [r3, #0]
 8004bb4:	491a      	ldr	r1, [pc, #104]	; (8004c20 <_cbSendTaskList+0x88>)
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	440b      	add	r3, r1
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	6819      	ldr	r1, [r3, #0]
 8004bc6:	4c16      	ldr	r4, [pc, #88]	; (8004c20 <_cbSendTaskList+0x88>)
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	4413      	add	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4423      	add	r3, r4
 8004bd4:	3308      	adds	r3, #8
 8004bd6:	681c      	ldr	r4, [r3, #0]
 8004bd8:	4d11      	ldr	r5, [pc, #68]	; (8004c20 <_cbSendTaskList+0x88>)
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4413      	add	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	442b      	add	r3, r5
 8004be6:	330c      	adds	r3, #12
 8004be8:	681d      	ldr	r5, [r3, #0]
 8004bea:	4e0d      	ldr	r6, [pc, #52]	; (8004c20 <_cbSendTaskList+0x88>)
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4433      	add	r3, r6
 8004bf8:	3310      	adds	r3, #16
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	462b      	mov	r3, r5
 8004c00:	4622      	mov	r2, r4
 8004c02:	f000 f8b5 	bl	8004d70 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	607b      	str	r3, [r7, #4]
 8004c0c:	4b05      	ldr	r3, [pc, #20]	; (8004c24 <_cbSendTaskList+0x8c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d3c6      	bcc.n	8004ba4 <_cbSendTaskList+0xc>
  }
}
 8004c16:	bf00      	nop
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c20:	20012da0 	.word	0x20012da0
 8004c24:	20012e40 	.word	0x20012e40

08004c28 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004c28:	b5b0      	push	{r4, r5, r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004c2e:	f7fe fb87 	bl	8003340 <xTaskGetTickCountFromISR>
 8004c32:	4603      	mov	r3, r0
 8004c34:	461a      	mov	r2, r3
 8004c36:	f04f 0300 	mov.w	r3, #0
 8004c3a:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004c3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c42:	4602      	mov	r2, r0
 8004c44:	460b      	mov	r3, r1
 8004c46:	f04f 0400 	mov.w	r4, #0
 8004c4a:	f04f 0500 	mov.w	r5, #0
 8004c4e:	015d      	lsls	r5, r3, #5
 8004c50:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8004c54:	0154      	lsls	r4, r2, #5
 8004c56:	4622      	mov	r2, r4
 8004c58:	462b      	mov	r3, r5
 8004c5a:	1a12      	subs	r2, r2, r0
 8004c5c:	eb63 0301 	sbc.w	r3, r3, r1
 8004c60:	f04f 0400 	mov.w	r4, #0
 8004c64:	f04f 0500 	mov.w	r5, #0
 8004c68:	009d      	lsls	r5, r3, #2
 8004c6a:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8004c6e:	0094      	lsls	r4, r2, #2
 8004c70:	4622      	mov	r2, r4
 8004c72:	462b      	mov	r3, r5
 8004c74:	1812      	adds	r2, r2, r0
 8004c76:	eb41 0303 	adc.w	r3, r1, r3
 8004c7a:	f04f 0000 	mov.w	r0, #0
 8004c7e:	f04f 0100 	mov.w	r1, #0
 8004c82:	00d9      	lsls	r1, r3, #3
 8004c84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c88:	00d0      	lsls	r0, r2, #3
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8004c92:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004c96:	4610      	mov	r0, r2
 8004c98:	4619      	mov	r1, r3
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bdb0      	pop	{r4, r5, r7, pc}

08004ca0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af02      	add	r7, sp, #8
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
 8004cac:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004cae:	2205      	movs	r2, #5
 8004cb0:	492b      	ldr	r1, [pc, #172]	; (8004d60 <SYSVIEW_AddTask+0xc0>)
 8004cb2:	68b8      	ldr	r0, [r7, #8]
 8004cb4:	f002 fbce 	bl	8007454 <memcmp>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d04b      	beq.n	8004d56 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004cbe:	4b29      	ldr	r3, [pc, #164]	; (8004d64 <SYSVIEW_AddTask+0xc4>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2b07      	cmp	r3, #7
 8004cc4:	d903      	bls.n	8004cce <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004cc6:	4828      	ldr	r0, [pc, #160]	; (8004d68 <SYSVIEW_AddTask+0xc8>)
 8004cc8:	f002 faf2 	bl	80072b0 <SEGGER_SYSVIEW_Warn>
    return;
 8004ccc:	e044      	b.n	8004d58 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004cce:	4b25      	ldr	r3, [pc, #148]	; (8004d64 <SYSVIEW_AddTask+0xc4>)
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	4926      	ldr	r1, [pc, #152]	; (8004d6c <SYSVIEW_AddTask+0xcc>)
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	440b      	add	r3, r1
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004ce2:	4b20      	ldr	r3, [pc, #128]	; (8004d64 <SYSVIEW_AddTask+0xc4>)
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	4921      	ldr	r1, [pc, #132]	; (8004d6c <SYSVIEW_AddTask+0xcc>)
 8004ce8:	4613      	mov	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	440b      	add	r3, r1
 8004cf2:	3304      	adds	r3, #4
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004cf8:	4b1a      	ldr	r3, [pc, #104]	; (8004d64 <SYSVIEW_AddTask+0xc4>)
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	491b      	ldr	r1, [pc, #108]	; (8004d6c <SYSVIEW_AddTask+0xcc>)
 8004cfe:	4613      	mov	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	440b      	add	r3, r1
 8004d08:	3308      	adds	r3, #8
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004d0e:	4b15      	ldr	r3, [pc, #84]	; (8004d64 <SYSVIEW_AddTask+0xc4>)
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	4916      	ldr	r1, [pc, #88]	; (8004d6c <SYSVIEW_AddTask+0xcc>)
 8004d14:	4613      	mov	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	440b      	add	r3, r1
 8004d1e:	330c      	adds	r3, #12
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004d24:	4b0f      	ldr	r3, [pc, #60]	; (8004d64 <SYSVIEW_AddTask+0xc4>)
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	4910      	ldr	r1, [pc, #64]	; (8004d6c <SYSVIEW_AddTask+0xcc>)
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	440b      	add	r3, r1
 8004d34:	3310      	adds	r3, #16
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004d3a:	4b0a      	ldr	r3, [pc, #40]	; (8004d64 <SYSVIEW_AddTask+0xc4>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	3301      	adds	r3, #1
 8004d40:	4a08      	ldr	r2, [pc, #32]	; (8004d64 <SYSVIEW_AddTask+0xc4>)
 8004d42:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	68b9      	ldr	r1, [r7, #8]
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f000 f80e 	bl	8004d70 <SYSVIEW_SendTaskInfo>
 8004d54:	e000      	b.n	8004d58 <SYSVIEW_AddTask+0xb8>
    return;
 8004d56:	bf00      	nop

}
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	08007538 	.word	0x08007538
 8004d64:	20012e40 	.word	0x20012e40
 8004d68:	08007540 	.word	0x08007540
 8004d6c:	20012da0 	.word	0x20012da0

08004d70 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b08a      	sub	sp, #40	; 0x28
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
 8004d7c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004d7e:	f107 0314 	add.w	r3, r7, #20
 8004d82:	2214      	movs	r2, #20
 8004d84:	2100      	movs	r1, #0
 8004d86:	4618      	mov	r0, r3
 8004d88:	f002 fb80 	bl	800748c <memset>
  TaskInfo.TaskID     = TaskID;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004da0:	f107 0314 	add.w	r3, r7, #20
 8004da4:	4618      	mov	r0, r3
 8004da6:	f001 fe79 	bl	8006a9c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004daa:	bf00      	nop
 8004dac:	3728      	adds	r7, #40	; 0x28
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
	...

08004db4 <__NVIC_EnableIRQ>:
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	4603      	mov	r3, r0
 8004dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	db0b      	blt.n	8004dde <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dc6:	79fb      	ldrb	r3, [r7, #7]
 8004dc8:	f003 021f 	and.w	r2, r3, #31
 8004dcc:	4907      	ldr	r1, [pc, #28]	; (8004dec <__NVIC_EnableIRQ+0x38>)
 8004dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dd2:	095b      	lsrs	r3, r3, #5
 8004dd4:	2001      	movs	r0, #1
 8004dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8004dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004dde:	bf00      	nop
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	e000e100 	.word	0xe000e100

08004df0 <__NVIC_SetPriority>:
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	4603      	mov	r3, r0
 8004df8:	6039      	str	r1, [r7, #0]
 8004dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	db0a      	blt.n	8004e1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	b2da      	uxtb	r2, r3
 8004e08:	490c      	ldr	r1, [pc, #48]	; (8004e3c <__NVIC_SetPriority+0x4c>)
 8004e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e0e:	0112      	lsls	r2, r2, #4
 8004e10:	b2d2      	uxtb	r2, r2
 8004e12:	440b      	add	r3, r1
 8004e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004e18:	e00a      	b.n	8004e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	b2da      	uxtb	r2, r3
 8004e1e:	4908      	ldr	r1, [pc, #32]	; (8004e40 <__NVIC_SetPriority+0x50>)
 8004e20:	79fb      	ldrb	r3, [r7, #7]
 8004e22:	f003 030f 	and.w	r3, r3, #15
 8004e26:	3b04      	subs	r3, #4
 8004e28:	0112      	lsls	r2, r2, #4
 8004e2a:	b2d2      	uxtb	r2, r2
 8004e2c:	440b      	add	r3, r1
 8004e2e:	761a      	strb	r2, [r3, #24]
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	e000e100 	.word	0xe000e100
 8004e40:	e000ed00 	.word	0xe000ed00

08004e44 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8004e4a:	f002 fa8d 	bl	8007368 <SEGGER_SYSVIEW_IsStarted>
 8004e4e:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8004e56:	f001 fca5 	bl	80067a4 <SEGGER_SYSVIEW_Start>
  }
}
 8004e5a:	bf00      	nop
 8004e5c:	3708      	adds	r7, #8
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
	...

08004e64 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8004e6e:	4b0c      	ldr	r3, [pc, #48]	; (8004ea0 <_cbOnUARTRx+0x3c>)
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	2b03      	cmp	r3, #3
 8004e74:	d806      	bhi.n	8004e84 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8004e76:	4b0a      	ldr	r3, [pc, #40]	; (8004ea0 <_cbOnUARTRx+0x3c>)
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	b2da      	uxtb	r2, r3
 8004e7e:	4b08      	ldr	r3, [pc, #32]	; (8004ea0 <_cbOnUARTRx+0x3c>)
 8004e80:	701a      	strb	r2, [r3, #0]
    goto Done;
 8004e82:	e009      	b.n	8004e98 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8004e84:	f7ff ffde 	bl	8004e44 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004e88:	4b05      	ldr	r3, [pc, #20]	; (8004ea0 <_cbOnUARTRx+0x3c>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	1dfb      	adds	r3, r7, #7
 8004e90:	2201      	movs	r2, #1
 8004e92:	4619      	mov	r1, r3
 8004e94:	f000 fb9a 	bl	80055cc <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004e98:	bf00      	nop
}
 8004e9a:	3708      	adds	r7, #8
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	20000014 	.word	0x20000014

08004ea4 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004eac:	4b14      	ldr	r3, [pc, #80]	; (8004f00 <_cbOnUARTTx+0x5c>)
 8004eae:	785b      	ldrb	r3, [r3, #1]
 8004eb0:	2b03      	cmp	r3, #3
 8004eb2:	d80f      	bhi.n	8004ed4 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004eb4:	4b12      	ldr	r3, [pc, #72]	; (8004f00 <_cbOnUARTTx+0x5c>)
 8004eb6:	785b      	ldrb	r3, [r3, #1]
 8004eb8:	461a      	mov	r2, r3
 8004eba:	4b12      	ldr	r3, [pc, #72]	; (8004f04 <_cbOnUARTTx+0x60>)
 8004ebc:	5c9a      	ldrb	r2, [r3, r2]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004ec2:	4b0f      	ldr	r3, [pc, #60]	; (8004f00 <_cbOnUARTTx+0x5c>)
 8004ec4:	785b      	ldrb	r3, [r3, #1]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	4b0d      	ldr	r3, [pc, #52]	; (8004f00 <_cbOnUARTTx+0x5c>)
 8004ecc:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004ed2:	e00f      	b.n	8004ef4 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004ed4:	4b0a      	ldr	r3, [pc, #40]	; (8004f00 <_cbOnUARTTx+0x5c>)
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	6879      	ldr	r1, [r7, #4]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f000 fa19 	bl	8005314 <SEGGER_RTT_ReadUpBufferNoLock>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	da02      	bge.n	8004ef2 <_cbOnUARTTx+0x4e>
    r = 0;
 8004eec:	2300      	movs	r3, #0
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	e000      	b.n	8004ef4 <_cbOnUARTTx+0x50>
  }
Done:
 8004ef2:	bf00      	nop
  return r;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	20000014 	.word	0x20000014
 8004f04:	08007624 	.word	0x08007624

08004f08 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004f10:	4a04      	ldr	r2, [pc, #16]	; (8004f24 <SEGGER_UART_init+0x1c>)
 8004f12:	4905      	ldr	r1, [pc, #20]	; (8004f28 <SEGGER_UART_init+0x20>)
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 f863 	bl	8004fe0 <HIF_UART_Init>
}
 8004f1a:	bf00      	nop
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	08004e65 	.word	0x08004e65
 8004f28:	08004ea5 	.word	0x08004ea5

08004f2c <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004f32:	4b1e      	ldr	r3, [pc, #120]	; (8004fac <USART2_IRQHandler+0x80>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f003 0320 	and.w	r3, r3, #32
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d011      	beq.n	8004f66 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004f42:	4b1b      	ldr	r3, [pc, #108]	; (8004fb0 <USART2_IRQHandler+0x84>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f003 030b 	and.w	r3, r3, #11
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d108      	bne.n	8004f66 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004f54:	4b17      	ldr	r3, [pc, #92]	; (8004fb4 <USART2_IRQHandler+0x88>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d004      	beq.n	8004f66 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004f5c:	4b15      	ldr	r3, [pc, #84]	; (8004fb4 <USART2_IRQHandler+0x88>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	79fa      	ldrb	r2, [r7, #7]
 8004f62:	4610      	mov	r0, r2
 8004f64:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d01a      	beq.n	8004fa6 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004f70:	4b11      	ldr	r3, [pc, #68]	; (8004fb8 <USART2_IRQHandler+0x8c>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d015      	beq.n	8004fa4 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004f78:	4b0f      	ldr	r3, [pc, #60]	; (8004fb8 <USART2_IRQHandler+0x8c>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	1dfa      	adds	r2, r7, #7
 8004f7e:	4610      	mov	r0, r2
 8004f80:	4798      	blx	r3
 8004f82:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d106      	bne.n	8004f98 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004f8a:	4b0c      	ldr	r3, [pc, #48]	; (8004fbc <USART2_IRQHandler+0x90>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a0b      	ldr	r2, [pc, #44]	; (8004fbc <USART2_IRQHandler+0x90>)
 8004f90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f94:	6013      	str	r3, [r2, #0]
 8004f96:	e006      	b.n	8004fa6 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004f98:	4b04      	ldr	r3, [pc, #16]	; (8004fac <USART2_IRQHandler+0x80>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004f9c:	79fa      	ldrb	r2, [r7, #7]
 8004f9e:	4b04      	ldr	r3, [pc, #16]	; (8004fb0 <USART2_IRQHandler+0x84>)
 8004fa0:	601a      	str	r2, [r3, #0]
 8004fa2:	e000      	b.n	8004fa6 <USART2_IRQHandler+0x7a>
      return;
 8004fa4:	bf00      	nop
    }
  }
}
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	40004400 	.word	0x40004400
 8004fb0:	40004404 	.word	0x40004404
 8004fb4:	20012e44 	.word	0x20012e44
 8004fb8:	20012e48 	.word	0x20012e48
 8004fbc:	4000440c 	.word	0x4000440c

08004fc0 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004fc0:	b480      	push	{r7}
 8004fc2:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004fc4:	4b05      	ldr	r3, [pc, #20]	; (8004fdc <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a04      	ldr	r2, [pc, #16]	; (8004fdc <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fce:	6013      	str	r3, [r2, #0]
}
 8004fd0:	bf00      	nop
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	4000440c 	.word	0x4000440c

08004fe0 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8004fec:	4b2e      	ldr	r3, [pc, #184]	; (80050a8 <HIF_UART_Init+0xc8>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a2d      	ldr	r2, [pc, #180]	; (80050a8 <HIF_UART_Init+0xc8>)
 8004ff2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ff6:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004ff8:	4b2c      	ldr	r3, [pc, #176]	; (80050ac <HIF_UART_Init+0xcc>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a2b      	ldr	r2, [pc, #172]	; (80050ac <HIF_UART_Init+0xcc>)
 8004ffe:	f043 0301 	orr.w	r3, r3, #1
 8005002:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8005004:	4b2a      	ldr	r3, [pc, #168]	; (80050b0 <HIF_UART_Init+0xd0>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005010:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8005018:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 800501a:	4a25      	ldr	r2, [pc, #148]	; (80050b0 <HIF_UART_Init+0xd0>)
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8005020:	4b24      	ldr	r3, [pc, #144]	; (80050b4 <HIF_UART_Init+0xd4>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800502c:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8005034:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8005036:	4a1f      	ldr	r2, [pc, #124]	; (80050b4 <HIF_UART_Init+0xd4>)
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 800503c:	4b1e      	ldr	r3, [pc, #120]	; (80050b8 <HIF_UART_Init+0xd8>)
 800503e:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8005042:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8005044:	4b1d      	ldr	r3, [pc, #116]	; (80050bc <HIF_UART_Init+0xdc>)
 8005046:	2200      	movs	r2, #0
 8005048:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 800504a:	4b1d      	ldr	r3, [pc, #116]	; (80050c0 <HIF_UART_Init+0xe0>)
 800504c:	2280      	movs	r2, #128	; 0x80
 800504e:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8005056:	4a1b      	ldr	r2, [pc, #108]	; (80050c4 <HIF_UART_Init+0xe4>)
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	fbb2 f3f3 	udiv	r3, r2, r3
 800505e:	3301      	adds	r3, #1
 8005060:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	085b      	lsrs	r3, r3, #1
 8005066:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800506e:	d302      	bcc.n	8005076 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8005070:	f640 73ff 	movw	r3, #4095	; 0xfff
 8005074:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d004      	beq.n	8005086 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	011b      	lsls	r3, r3, #4
 8005080:	4a11      	ldr	r2, [pc, #68]	; (80050c8 <HIF_UART_Init+0xe8>)
 8005082:	b29b      	uxth	r3, r3
 8005084:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8005086:	4a11      	ldr	r2, [pc, #68]	; (80050cc <HIF_UART_Init+0xec>)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 800508c:	4a10      	ldr	r2, [pc, #64]	; (80050d0 <HIF_UART_Init+0xf0>)
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8005092:	2106      	movs	r1, #6
 8005094:	2026      	movs	r0, #38	; 0x26
 8005096:	f7ff feab 	bl	8004df0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800509a:	2026      	movs	r0, #38	; 0x26
 800509c:	f7ff fe8a 	bl	8004db4 <__NVIC_EnableIRQ>
}
 80050a0:	bf00      	nop
 80050a2:	3718      	adds	r7, #24
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	40023840 	.word	0x40023840
 80050ac:	40023830 	.word	0x40023830
 80050b0:	40020020 	.word	0x40020020
 80050b4:	40020000 	.word	0x40020000
 80050b8:	4000440c 	.word	0x4000440c
 80050bc:	40004410 	.word	0x40004410
 80050c0:	40004414 	.word	0x40004414
 80050c4:	0501bd00 	.word	0x0501bd00
 80050c8:	40004408 	.word	0x40004408
 80050cc:	20012e44 	.word	0x20012e44
 80050d0:	20012e48 	.word	0x20012e48

080050d4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80050da:	4b24      	ldr	r3, [pc, #144]	; (800516c <_DoInit+0x98>)
 80050dc:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2203      	movs	r2, #3
 80050e2:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2203      	movs	r2, #3
 80050e8:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a20      	ldr	r2, [pc, #128]	; (8005170 <_DoInit+0x9c>)
 80050ee:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a20      	ldr	r2, [pc, #128]	; (8005174 <_DoInit+0xa0>)
 80050f4:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050fc:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a17      	ldr	r2, [pc, #92]	; (8005170 <_DoInit+0x9c>)
 8005114:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a17      	ldr	r2, [pc, #92]	; (8005178 <_DoInit+0xa4>)
 800511a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2210      	movs	r2, #16
 8005120:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	3307      	adds	r3, #7
 8005138:	4a10      	ldr	r2, [pc, #64]	; (800517c <_DoInit+0xa8>)
 800513a:	6810      	ldr	r0, [r2, #0]
 800513c:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800513e:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a0e      	ldr	r2, [pc, #56]	; (8005180 <_DoInit+0xac>)
 8005146:	6810      	ldr	r0, [r2, #0]
 8005148:	6018      	str	r0, [r3, #0]
 800514a:	8891      	ldrh	r1, [r2, #4]
 800514c:	7992      	ldrb	r2, [r2, #6]
 800514e:	8099      	strh	r1, [r3, #4]
 8005150:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005152:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2220      	movs	r2, #32
 800515a:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800515c:	f3bf 8f5f 	dmb	sy
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	20014404 	.word	0x20014404
 8005170:	08007590 	.word	0x08007590
 8005174:	20012e4c 	.word	0x20012e4c
 8005178:	2001324c 	.word	0x2001324c
 800517c:	0800759c 	.word	0x0800759c
 8005180:	080075a0 	.word	0x080075a0

08005184 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005184:	b580      	push	{r7, lr}
 8005186:	b08a      	sub	sp, #40	; 0x28
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005190:	2300      	movs	r3, #0
 8005192:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d905      	bls.n	80051b4 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	3b01      	subs	r3, #1
 80051b0:	627b      	str	r3, [r7, #36]	; 0x24
 80051b2:	e007      	b.n	80051c4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	689a      	ldr	r2, [r3, #8]
 80051b8:	69b9      	ldr	r1, [r7, #24]
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	1acb      	subs	r3, r1, r3
 80051be:	4413      	add	r3, r2
 80051c0:	3b01      	subs	r3, #1
 80051c2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	689a      	ldr	r2, [r3, #8]
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ce:	4293      	cmp	r3, r2
 80051d0:	bf28      	it	cs
 80051d2:	4613      	movcs	r3, r2
 80051d4:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80051d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4293      	cmp	r3, r2
 80051dc:	bf28      	it	cs
 80051de:	4613      	movcs	r3, r2
 80051e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	4413      	add	r3, r2
 80051ea:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80051ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ee:	68b9      	ldr	r1, [r7, #8]
 80051f0:	6978      	ldr	r0, [r7, #20]
 80051f2:	f002 f93d 	bl	8007470 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80051f6:	6a3a      	ldr	r2, [r7, #32]
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	4413      	add	r3, r2
 80051fc:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	4413      	add	r3, r2
 8005204:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800520e:	69fa      	ldr	r2, [r7, #28]
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	4413      	add	r3, r2
 8005214:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	69fa      	ldr	r2, [r7, #28]
 800521c:	429a      	cmp	r2, r3
 800521e:	d101      	bne.n	8005224 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005220:	2300      	movs	r3, #0
 8005222:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005224:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	69fa      	ldr	r2, [r7, #28]
 800522c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1b2      	bne.n	800519a <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005234:	6a3b      	ldr	r3, [r7, #32]
}
 8005236:	4618      	mov	r0, r3
 8005238:	3728      	adds	r7, #40	; 0x28
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800523e:	b580      	push	{r7, lr}
 8005240:	b088      	sub	sp, #32
 8005242:	af00      	add	r7, sp, #0
 8005244:	60f8      	str	r0, [r7, #12]
 8005246:	60b9      	str	r1, [r7, #8]
 8005248:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	689a      	ldr	r2, [r3, #8]
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	429a      	cmp	r2, r3
 8005260:	d911      	bls.n	8005286 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	4413      	add	r3, r2
 800526a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	68b9      	ldr	r1, [r7, #8]
 8005270:	6938      	ldr	r0, [r7, #16]
 8005272:	f002 f8fd 	bl	8007470 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005276:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800527a:	69fa      	ldr	r2, [r7, #28]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	441a      	add	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005284:	e01f      	b.n	80052c6 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	4413      	add	r3, r2
 8005292:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	68b9      	ldr	r1, [r7, #8]
 8005298:	6938      	ldr	r0, [r7, #16]
 800529a:	f002 f8e9 	bl	8007470 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	4413      	add	r3, r2
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	4619      	mov	r1, r3
 80052b6:	6938      	ldr	r0, [r7, #16]
 80052b8:	f002 f8da 	bl	8007470 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80052bc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	60da      	str	r2, [r3, #12]
}
 80052c6:	bf00      	nop
 80052c8:	3720      	adds	r7, #32
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80052ce:	b480      	push	{r7}
 80052d0:	b087      	sub	sp, #28
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d808      	bhi.n	80052fc <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689a      	ldr	r2, [r3, #8]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	1ad2      	subs	r2, r2, r3
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	4413      	add	r3, r2
 80052f6:	3b01      	subs	r3, #1
 80052f8:	617b      	str	r3, [r7, #20]
 80052fa:	e004      	b.n	8005306 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	3b01      	subs	r3, #1
 8005304:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005306:	697b      	ldr	r3, [r7, #20]
}
 8005308:	4618      	mov	r0, r3
 800530a:	371c      	adds	r7, #28
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005314:	b580      	push	{r7, lr}
 8005316:	b08c      	sub	sp, #48	; 0x30
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005320:	4b3e      	ldr	r3, [pc, #248]	; (800541c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005322:	623b      	str	r3, [r7, #32]
 8005324:	6a3b      	ldr	r3, [r7, #32]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800532e:	f7ff fed1 	bl	80050d4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	1c5a      	adds	r2, r3, #1
 8005336:	4613      	mov	r3, r2
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	4413      	add	r3, r2
 800533c:	00db      	lsls	r3, r3, #3
 800533e:	4a37      	ldr	r2, [pc, #220]	; (800541c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005340:	4413      	add	r3, r2
 8005342:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005354:	2300      	movs	r3, #0
 8005356:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005358:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	429a      	cmp	r2, r3
 800535e:	d92b      	bls.n	80053b8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	689a      	ldr	r2, [r3, #8]
 8005364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4293      	cmp	r3, r2
 8005370:	bf28      	it	cs
 8005372:	4613      	movcs	r3, r2
 8005374:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	685a      	ldr	r2, [r3, #4]
 800537a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537c:	4413      	add	r3, r2
 800537e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	6939      	ldr	r1, [r7, #16]
 8005384:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005386:	f002 f873 	bl	8007470 <memcpy>
    NumBytesRead += NumBytesRem;
 800538a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	4413      	add	r3, r2
 8005390:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	4413      	add	r3, r2
 8005398:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80053a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	4413      	add	r3, r2
 80053a8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d101      	bne.n	80053b8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80053b4:	2300      	movs	r3, #0
 80053b6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4293      	cmp	r3, r2
 80053c6:	bf28      	it	cs
 80053c8:	4613      	movcs	r3, r2
 80053ca:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d019      	beq.n	8005406 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d8:	4413      	add	r3, r2
 80053da:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	6939      	ldr	r1, [r7, #16]
 80053e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053e2:	f002 f845 	bl	8007470 <memcpy>
    NumBytesRead += NumBytesRem;
 80053e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	4413      	add	r3, r2
 80053ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80053ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	4413      	add	r3, r2
 80053f4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80053fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	4413      	add	r3, r2
 8005404:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005408:	2b00      	cmp	r3, #0
 800540a:	d002      	beq.n	8005412 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005410:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005414:	4618      	mov	r0, r3
 8005416:	3730      	adds	r7, #48	; 0x30
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	20014404 	.word	0x20014404

08005420 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005420:	b580      	push	{r7, lr}
 8005422:	b08c      	sub	sp, #48	; 0x30
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800542c:	4b3e      	ldr	r3, [pc, #248]	; (8005528 <SEGGER_RTT_ReadNoLock+0x108>)
 800542e:	623b      	str	r3, [r7, #32]
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <SEGGER_RTT_ReadNoLock+0x1e>
 800543a:	f7ff fe4b 	bl	80050d4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	4613      	mov	r3, r2
 8005442:	005b      	lsls	r3, r3, #1
 8005444:	4413      	add	r3, r2
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	3360      	adds	r3, #96	; 0x60
 800544a:	4a37      	ldr	r2, [pc, #220]	; (8005528 <SEGGER_RTT_ReadNoLock+0x108>)
 800544c:	4413      	add	r3, r2
 800544e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005460:	2300      	movs	r3, #0
 8005462:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005464:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	429a      	cmp	r2, r3
 800546a:	d92b      	bls.n	80054c4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	689a      	ldr	r2, [r3, #8]
 8005470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4293      	cmp	r3, r2
 800547c:	bf28      	it	cs
 800547e:	4613      	movcs	r3, r2
 8005480:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005488:	4413      	add	r3, r2
 800548a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800548c:	697a      	ldr	r2, [r7, #20]
 800548e:	6939      	ldr	r1, [r7, #16]
 8005490:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005492:	f001 ffed 	bl	8007470 <memcpy>
    NumBytesRead += NumBytesRem;
 8005496:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	4413      	add	r3, r2
 800549c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800549e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	4413      	add	r3, r2
 80054a4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80054ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	4413      	add	r3, r2
 80054b4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054bc:	429a      	cmp	r2, r3
 80054be:	d101      	bne.n	80054c4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80054c0:	2300      	movs	r3, #0
 80054c2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80054c4:	69ba      	ldr	r2, [r7, #24]
 80054c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4293      	cmp	r3, r2
 80054d2:	bf28      	it	cs
 80054d4:	4613      	movcs	r3, r2
 80054d6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d019      	beq.n	8005512 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e4:	4413      	add	r3, r2
 80054e6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	6939      	ldr	r1, [r7, #16]
 80054ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054ee:	f001 ffbf 	bl	8007470 <memcpy>
    NumBytesRead += NumBytesRem;
 80054f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	4413      	add	r3, r2
 80054f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80054fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	4413      	add	r3, r2
 8005500:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800550a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	4413      	add	r3, r2
 8005510:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005514:	2b00      	cmp	r3, #0
 8005516:	d002      	beq.n	800551e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800551c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800551e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005520:	4618      	mov	r0, r3
 8005522:	3730      	adds	r7, #48	; 0x30
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	20014404 	.word	0x20014404

0800552c <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800552c:	b580      	push	{r7, lr}
 800552e:	b088      	sub	sp, #32
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	4613      	mov	r3, r2
 8005540:	005b      	lsls	r3, r3, #1
 8005542:	4413      	add	r3, r2
 8005544:	00db      	lsls	r3, r3, #3
 8005546:	3360      	adds	r3, #96	; 0x60
 8005548:	4a1f      	ldr	r2, [pc, #124]	; (80055c8 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 800554a:	4413      	add	r3, r2
 800554c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	2b02      	cmp	r3, #2
 8005554:	d029      	beq.n	80055aa <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8005556:	2b02      	cmp	r3, #2
 8005558:	d82e      	bhi.n	80055b8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800555a:	2b00      	cmp	r3, #0
 800555c:	d002      	beq.n	8005564 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800555e:	2b01      	cmp	r3, #1
 8005560:	d013      	beq.n	800558a <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8005562:	e029      	b.n	80055b8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005564:	6978      	ldr	r0, [r7, #20]
 8005566:	f7ff feb2 	bl	80052ce <_GetAvailWriteSpace>
 800556a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	429a      	cmp	r2, r3
 8005572:	d202      	bcs.n	800557a <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005574:	2300      	movs	r3, #0
 8005576:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005578:	e021      	b.n	80055be <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	69b9      	ldr	r1, [r7, #24]
 8005582:	6978      	ldr	r0, [r7, #20]
 8005584:	f7ff fe5b 	bl	800523e <_WriteNoCheck>
    break;
 8005588:	e019      	b.n	80055be <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800558a:	6978      	ldr	r0, [r7, #20]
 800558c:	f7ff fe9f 	bl	80052ce <_GetAvailWriteSpace>
 8005590:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	4293      	cmp	r3, r2
 8005598:	bf28      	it	cs
 800559a:	4613      	movcs	r3, r2
 800559c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800559e:	69fa      	ldr	r2, [r7, #28]
 80055a0:	69b9      	ldr	r1, [r7, #24]
 80055a2:	6978      	ldr	r0, [r7, #20]
 80055a4:	f7ff fe4b 	bl	800523e <_WriteNoCheck>
    break;
 80055a8:	e009      	b.n	80055be <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	69b9      	ldr	r1, [r7, #24]
 80055ae:	6978      	ldr	r0, [r7, #20]
 80055b0:	f7ff fde8 	bl	8005184 <_WriteBlocking>
 80055b4:	61f8      	str	r0, [r7, #28]
    break;
 80055b6:	e002      	b.n	80055be <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80055b8:	2300      	movs	r3, #0
 80055ba:	61fb      	str	r3, [r7, #28]
    break;
 80055bc:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80055be:	69fb      	ldr	r3, [r7, #28]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3720      	adds	r7, #32
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	20014404 	.word	0x20014404

080055cc <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b088      	sub	sp, #32
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80055d8:	4b0e      	ldr	r3, [pc, #56]	; (8005614 <SEGGER_RTT_WriteDownBuffer+0x48>)
 80055da:	61fb      	str	r3, [r7, #28]
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d101      	bne.n	80055ea <SEGGER_RTT_WriteDownBuffer+0x1e>
 80055e6:	f7ff fd75 	bl	80050d4 <_DoInit>
  SEGGER_RTT_LOCK();
 80055ea:	f3ef 8311 	mrs	r3, BASEPRI
 80055ee:	f04f 0120 	mov.w	r1, #32
 80055f2:	f381 8811 	msr	BASEPRI, r1
 80055f6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	68b9      	ldr	r1, [r7, #8]
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	f7ff ff95 	bl	800552c <SEGGER_RTT_WriteDownBufferNoLock>
 8005602:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800560a:	697b      	ldr	r3, [r7, #20]
}
 800560c:	4618      	mov	r0, r3
 800560e:	3720      	adds	r7, #32
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	20014404 	.word	0x20014404

08005618 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005618:	b580      	push	{r7, lr}
 800561a:	b088      	sub	sp, #32
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
 8005624:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005626:	4b3d      	ldr	r3, [pc, #244]	; (800571c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005628:	61bb      	str	r3, [r7, #24]
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b00      	cmp	r3, #0
 8005632:	d101      	bne.n	8005638 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005634:	f7ff fd4e 	bl	80050d4 <_DoInit>
  SEGGER_RTT_LOCK();
 8005638:	f3ef 8311 	mrs	r3, BASEPRI
 800563c:	f04f 0120 	mov.w	r1, #32
 8005640:	f381 8811 	msr	BASEPRI, r1
 8005644:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005646:	4b35      	ldr	r3, [pc, #212]	; (800571c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005648:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800564a:	2300      	movs	r3, #0
 800564c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800564e:	6939      	ldr	r1, [r7, #16]
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	1c5a      	adds	r2, r3, #1
 8005654:	4613      	mov	r3, r2
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	4413      	add	r3, r2
 800565a:	00db      	lsls	r3, r3, #3
 800565c:	440b      	add	r3, r1
 800565e:	3304      	adds	r3, #4
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d008      	beq.n	8005678 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	3301      	adds	r3, #1
 800566a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	69fa      	ldr	r2, [r7, #28]
 8005672:	429a      	cmp	r2, r3
 8005674:	dbeb      	blt.n	800564e <SEGGER_RTT_AllocUpBuffer+0x36>
 8005676:	e000      	b.n	800567a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005678:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	69fa      	ldr	r2, [r7, #28]
 8005680:	429a      	cmp	r2, r3
 8005682:	da3f      	bge.n	8005704 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005684:	6939      	ldr	r1, [r7, #16]
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	1c5a      	adds	r2, r3, #1
 800568a:	4613      	mov	r3, r2
 800568c:	005b      	lsls	r3, r3, #1
 800568e:	4413      	add	r3, r2
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	440b      	add	r3, r1
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005698:	6939      	ldr	r1, [r7, #16]
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	1c5a      	adds	r2, r3, #1
 800569e:	4613      	mov	r3, r2
 80056a0:	005b      	lsls	r3, r3, #1
 80056a2:	4413      	add	r3, r2
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	440b      	add	r3, r1
 80056a8:	3304      	adds	r3, #4
 80056aa:	68ba      	ldr	r2, [r7, #8]
 80056ac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80056ae:	6939      	ldr	r1, [r7, #16]
 80056b0:	69fa      	ldr	r2, [r7, #28]
 80056b2:	4613      	mov	r3, r2
 80056b4:	005b      	lsls	r3, r3, #1
 80056b6:	4413      	add	r3, r2
 80056b8:	00db      	lsls	r3, r3, #3
 80056ba:	440b      	add	r3, r1
 80056bc:	3320      	adds	r3, #32
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80056c2:	6939      	ldr	r1, [r7, #16]
 80056c4:	69fa      	ldr	r2, [r7, #28]
 80056c6:	4613      	mov	r3, r2
 80056c8:	005b      	lsls	r3, r3, #1
 80056ca:	4413      	add	r3, r2
 80056cc:	00db      	lsls	r3, r3, #3
 80056ce:	440b      	add	r3, r1
 80056d0:	3328      	adds	r3, #40	; 0x28
 80056d2:	2200      	movs	r2, #0
 80056d4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80056d6:	6939      	ldr	r1, [r7, #16]
 80056d8:	69fa      	ldr	r2, [r7, #28]
 80056da:	4613      	mov	r3, r2
 80056dc:	005b      	lsls	r3, r3, #1
 80056de:	4413      	add	r3, r2
 80056e0:	00db      	lsls	r3, r3, #3
 80056e2:	440b      	add	r3, r1
 80056e4:	3324      	adds	r3, #36	; 0x24
 80056e6:	2200      	movs	r2, #0
 80056e8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80056ea:	6939      	ldr	r1, [r7, #16]
 80056ec:	69fa      	ldr	r2, [r7, #28]
 80056ee:	4613      	mov	r3, r2
 80056f0:	005b      	lsls	r3, r3, #1
 80056f2:	4413      	add	r3, r2
 80056f4:	00db      	lsls	r3, r3, #3
 80056f6:	440b      	add	r3, r1
 80056f8:	332c      	adds	r3, #44	; 0x2c
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80056fe:	f3bf 8f5f 	dmb	sy
 8005702:	e002      	b.n	800570a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005704:	f04f 33ff 	mov.w	r3, #4294967295
 8005708:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005710:	69fb      	ldr	r3, [r7, #28]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3720      	adds	r7, #32
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	20014404 	.word	0x20014404

08005720 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005720:	b580      	push	{r7, lr}
 8005722:	b088      	sub	sp, #32
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
 800572c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800572e:	4b33      	ldr	r3, [pc, #204]	; (80057fc <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005730:	61bb      	str	r3, [r7, #24]
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b00      	cmp	r3, #0
 800573a:	d101      	bne.n	8005740 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800573c:	f7ff fcca 	bl	80050d4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005740:	4b2e      	ldr	r3, [pc, #184]	; (80057fc <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005742:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	461a      	mov	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	4293      	cmp	r3, r2
 800574e:	d24d      	bcs.n	80057ec <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005750:	f3ef 8311 	mrs	r3, BASEPRI
 8005754:	f04f 0120 	mov.w	r1, #32
 8005758:	f381 8811 	msr	BASEPRI, r1
 800575c:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d031      	beq.n	80057c8 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005764:	6979      	ldr	r1, [r7, #20]
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	4613      	mov	r3, r2
 800576a:	005b      	lsls	r3, r3, #1
 800576c:	4413      	add	r3, r2
 800576e:	00db      	lsls	r3, r3, #3
 8005770:	440b      	add	r3, r1
 8005772:	3360      	adds	r3, #96	; 0x60
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005778:	6979      	ldr	r1, [r7, #20]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	4613      	mov	r3, r2
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	4413      	add	r3, r2
 8005782:	00db      	lsls	r3, r3, #3
 8005784:	440b      	add	r3, r1
 8005786:	3364      	adds	r3, #100	; 0x64
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800578c:	6979      	ldr	r1, [r7, #20]
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	4613      	mov	r3, r2
 8005792:	005b      	lsls	r3, r3, #1
 8005794:	4413      	add	r3, r2
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	440b      	add	r3, r1
 800579a:	3368      	adds	r3, #104	; 0x68
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80057a0:	6979      	ldr	r1, [r7, #20]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	4613      	mov	r3, r2
 80057a6:	005b      	lsls	r3, r3, #1
 80057a8:	4413      	add	r3, r2
 80057aa:	00db      	lsls	r3, r3, #3
 80057ac:	440b      	add	r3, r1
 80057ae:	3370      	adds	r3, #112	; 0x70
 80057b0:	2200      	movs	r2, #0
 80057b2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80057b4:	6979      	ldr	r1, [r7, #20]
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	4613      	mov	r3, r2
 80057ba:	005b      	lsls	r3, r3, #1
 80057bc:	4413      	add	r3, r2
 80057be:	00db      	lsls	r3, r3, #3
 80057c0:	440b      	add	r3, r1
 80057c2:	336c      	adds	r3, #108	; 0x6c
 80057c4:	2200      	movs	r2, #0
 80057c6:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80057c8:	6979      	ldr	r1, [r7, #20]
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	4613      	mov	r3, r2
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	4413      	add	r3, r2
 80057d2:	00db      	lsls	r3, r3, #3
 80057d4:	440b      	add	r3, r1
 80057d6:	3374      	adds	r3, #116	; 0x74
 80057d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057da:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80057dc:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80057e6:	2300      	movs	r3, #0
 80057e8:	61fb      	str	r3, [r7, #28]
 80057ea:	e002      	b.n	80057f2 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 80057ec:	f04f 33ff 	mov.w	r3, #4294967295
 80057f0:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80057f2:	69fb      	ldr	r3, [r7, #28]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3720      	adds	r7, #32
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	20014404 	.word	0x20014404

08005800 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800580c:	2300      	movs	r3, #0
 800580e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005810:	e002      	b.n	8005818 <_EncodeStr+0x18>
    Len++;
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	3301      	adds	r3, #1
 8005816:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	4413      	add	r3, r2
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1f6      	bne.n	8005812 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	429a      	cmp	r2, r3
 800582a:	d901      	bls.n	8005830 <_EncodeStr+0x30>
    Len = Limit;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	2bfe      	cmp	r3, #254	; 0xfe
 8005834:	d806      	bhi.n	8005844 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	1c5a      	adds	r2, r3, #1
 800583a:	60fa      	str	r2, [r7, #12]
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	b2d2      	uxtb	r2, r2
 8005840:	701a      	strb	r2, [r3, #0]
 8005842:	e011      	b.n	8005868 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	1c5a      	adds	r2, r3, #1
 8005848:	60fa      	str	r2, [r7, #12]
 800584a:	22ff      	movs	r2, #255	; 0xff
 800584c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	1c5a      	adds	r2, r3, #1
 8005852:	60fa      	str	r2, [r7, #12]
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	b2d2      	uxtb	r2, r2
 8005858:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	0a19      	lsrs	r1, r3, #8
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	1c5a      	adds	r2, r3, #1
 8005862:	60fa      	str	r2, [r7, #12]
 8005864:	b2ca      	uxtb	r2, r1
 8005866:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005868:	2300      	movs	r3, #0
 800586a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800586c:	e00a      	b.n	8005884 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	1c53      	adds	r3, r2, #1
 8005872:	60bb      	str	r3, [r7, #8]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	1c59      	adds	r1, r3, #1
 8005878:	60f9      	str	r1, [r7, #12]
 800587a:	7812      	ldrb	r2, [r2, #0]
 800587c:	701a      	strb	r2, [r3, #0]
    n++;
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	3301      	adds	r3, #1
 8005882:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	429a      	cmp	r2, r3
 800588a:	d3f0      	bcc.n	800586e <_EncodeStr+0x6e>
  }
  return pPayload;
 800588c:	68fb      	ldr	r3, [r7, #12]
}
 800588e:	4618      	mov	r0, r3
 8005890:	371c      	adds	r7, #28
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800589a:	b480      	push	{r7}
 800589c:	b083      	sub	sp, #12
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	3304      	adds	r3, #4
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	370c      	adds	r7, #12
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
	...

080058b4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80058ba:	4b36      	ldr	r3, [pc, #216]	; (8005994 <_HandleIncomingPacket+0xe0>)
 80058bc:	7e1b      	ldrb	r3, [r3, #24]
 80058be:	4618      	mov	r0, r3
 80058c0:	1cfb      	adds	r3, r7, #3
 80058c2:	2201      	movs	r2, #1
 80058c4:	4619      	mov	r1, r3
 80058c6:	f7ff fdab 	bl	8005420 <SEGGER_RTT_ReadNoLock>
 80058ca:	4603      	mov	r3, r0
 80058cc:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	dd54      	ble.n	800597e <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80058d4:	78fb      	ldrb	r3, [r7, #3]
 80058d6:	2b80      	cmp	r3, #128	; 0x80
 80058d8:	d032      	beq.n	8005940 <_HandleIncomingPacket+0x8c>
 80058da:	2b80      	cmp	r3, #128	; 0x80
 80058dc:	dc42      	bgt.n	8005964 <_HandleIncomingPacket+0xb0>
 80058de:	2b07      	cmp	r3, #7
 80058e0:	dc16      	bgt.n	8005910 <_HandleIncomingPacket+0x5c>
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	dd3e      	ble.n	8005964 <_HandleIncomingPacket+0xb0>
 80058e6:	3b01      	subs	r3, #1
 80058e8:	2b06      	cmp	r3, #6
 80058ea:	d83b      	bhi.n	8005964 <_HandleIncomingPacket+0xb0>
 80058ec:	a201      	add	r2, pc, #4	; (adr r2, 80058f4 <_HandleIncomingPacket+0x40>)
 80058ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f2:	bf00      	nop
 80058f4:	08005917 	.word	0x08005917
 80058f8:	0800591d 	.word	0x0800591d
 80058fc:	08005923 	.word	0x08005923
 8005900:	08005929 	.word	0x08005929
 8005904:	0800592f 	.word	0x0800592f
 8005908:	08005935 	.word	0x08005935
 800590c:	0800593b 	.word	0x0800593b
 8005910:	2b7f      	cmp	r3, #127	; 0x7f
 8005912:	d036      	beq.n	8005982 <_HandleIncomingPacket+0xce>
 8005914:	e026      	b.n	8005964 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005916:	f000 ff45 	bl	80067a4 <SEGGER_SYSVIEW_Start>
      break;
 800591a:	e037      	b.n	800598c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800591c:	f000 fffe 	bl	800691c <SEGGER_SYSVIEW_Stop>
      break;
 8005920:	e034      	b.n	800598c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005922:	f001 f9d7 	bl	8006cd4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005926:	e031      	b.n	800598c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005928:	f001 f99c 	bl	8006c64 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800592c:	e02e      	b.n	800598c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800592e:	f001 f81b 	bl	8006968 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005932:	e02b      	b.n	800598c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005934:	f001 fc6a 	bl	800720c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005938:	e028      	b.n	800598c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800593a:	f001 fc49 	bl	80071d0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800593e:	e025      	b.n	800598c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005940:	4b14      	ldr	r3, [pc, #80]	; (8005994 <_HandleIncomingPacket+0xe0>)
 8005942:	7e1b      	ldrb	r3, [r3, #24]
 8005944:	4618      	mov	r0, r3
 8005946:	1cfb      	adds	r3, r7, #3
 8005948:	2201      	movs	r2, #1
 800594a:	4619      	mov	r1, r3
 800594c:	f7ff fd68 	bl	8005420 <SEGGER_RTT_ReadNoLock>
 8005950:	4603      	mov	r3, r0
 8005952:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	dd15      	ble.n	8005986 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800595a:	78fb      	ldrb	r3, [r7, #3]
 800595c:	4618      	mov	r0, r3
 800595e:	f001 fbb7 	bl	80070d0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005962:	e010      	b.n	8005986 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005964:	78fb      	ldrb	r3, [r7, #3]
 8005966:	b25b      	sxtb	r3, r3
 8005968:	2b00      	cmp	r3, #0
 800596a:	da0e      	bge.n	800598a <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800596c:	4b09      	ldr	r3, [pc, #36]	; (8005994 <_HandleIncomingPacket+0xe0>)
 800596e:	7e1b      	ldrb	r3, [r3, #24]
 8005970:	4618      	mov	r0, r3
 8005972:	1cfb      	adds	r3, r7, #3
 8005974:	2201      	movs	r2, #1
 8005976:	4619      	mov	r1, r3
 8005978:	f7ff fd52 	bl	8005420 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800597c:	e005      	b.n	800598a <_HandleIncomingPacket+0xd6>
    }
  }
 800597e:	bf00      	nop
 8005980:	e004      	b.n	800598c <_HandleIncomingPacket+0xd8>
      break;
 8005982:	bf00      	nop
 8005984:	e002      	b.n	800598c <_HandleIncomingPacket+0xd8>
      break;
 8005986:	bf00      	nop
 8005988:	e000      	b.n	800598c <_HandleIncomingPacket+0xd8>
      break;
 800598a:	bf00      	nop
}
 800598c:	bf00      	nop
 800598e:	3708      	adds	r7, #8
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	20014264 	.word	0x20014264

08005998 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005998:	b580      	push	{r7, lr}
 800599a:	b08c      	sub	sp, #48	; 0x30
 800599c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800599e:	2301      	movs	r3, #1
 80059a0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80059a2:	1d3b      	adds	r3, r7, #4
 80059a4:	3301      	adds	r3, #1
 80059a6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059ac:	4b32      	ldr	r3, [pc, #200]	; (8005a78 <_TrySendOverflowPacket+0xe0>)
 80059ae:	695b      	ldr	r3, [r3, #20]
 80059b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80059b2:	e00b      	b.n	80059cc <_TrySendOverflowPacket+0x34>
 80059b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b6:	b2da      	uxtb	r2, r3
 80059b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ba:	1c59      	adds	r1, r3, #1
 80059bc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80059be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059c2:	b2d2      	uxtb	r2, r2
 80059c4:	701a      	strb	r2, [r3, #0]
 80059c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c8:	09db      	lsrs	r3, r3, #7
 80059ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80059cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ce:	2b7f      	cmp	r3, #127	; 0x7f
 80059d0:	d8f0      	bhi.n	80059b4 <_TrySendOverflowPacket+0x1c>
 80059d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d4:	1c5a      	adds	r2, r3, #1
 80059d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059da:	b2d2      	uxtb	r2, r2
 80059dc:	701a      	strb	r2, [r3, #0]
 80059de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80059e2:	4b26      	ldr	r3, [pc, #152]	; (8005a7c <_TrySendOverflowPacket+0xe4>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80059e8:	4b23      	ldr	r3, [pc, #140]	; (8005a78 <_TrySendOverflowPacket+0xe0>)
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	627b      	str	r3, [r7, #36]	; 0x24
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	623b      	str	r3, [r7, #32]
 80059fa:	e00b      	b.n	8005a14 <_TrySendOverflowPacket+0x7c>
 80059fc:	6a3b      	ldr	r3, [r7, #32]
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	1c59      	adds	r1, r3, #1
 8005a04:	6279      	str	r1, [r7, #36]	; 0x24
 8005a06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a0a:	b2d2      	uxtb	r2, r2
 8005a0c:	701a      	strb	r2, [r3, #0]
 8005a0e:	6a3b      	ldr	r3, [r7, #32]
 8005a10:	09db      	lsrs	r3, r3, #7
 8005a12:	623b      	str	r3, [r7, #32]
 8005a14:	6a3b      	ldr	r3, [r7, #32]
 8005a16:	2b7f      	cmp	r3, #127	; 0x7f
 8005a18:	d8f0      	bhi.n	80059fc <_TrySendOverflowPacket+0x64>
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1c:	1c5a      	adds	r2, r3, #1
 8005a1e:	627a      	str	r2, [r7, #36]	; 0x24
 8005a20:	6a3a      	ldr	r2, [r7, #32]
 8005a22:	b2d2      	uxtb	r2, r2
 8005a24:	701a      	strb	r2, [r3, #0]
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005a2a:	4b13      	ldr	r3, [pc, #76]	; (8005a78 <_TrySendOverflowPacket+0xe0>)
 8005a2c:	785b      	ldrb	r3, [r3, #1]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	1d3b      	adds	r3, r7, #4
 8005a32:	69fa      	ldr	r2, [r7, #28]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	461a      	mov	r2, r3
 8005a38:	1d3b      	adds	r3, r7, #4
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	f7fa fbc8 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005a40:	4603      	mov	r3, r0
 8005a42:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005a44:	f7ff fabc 	bl	8004fc0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d009      	beq.n	8005a62 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005a4e:	4a0a      	ldr	r2, [pc, #40]	; (8005a78 <_TrySendOverflowPacket+0xe0>)
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005a54:	4b08      	ldr	r3, [pc, #32]	; (8005a78 <_TrySendOverflowPacket+0xe0>)
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	b2da      	uxtb	r2, r3
 8005a5c:	4b06      	ldr	r3, [pc, #24]	; (8005a78 <_TrySendOverflowPacket+0xe0>)
 8005a5e:	701a      	strb	r2, [r3, #0]
 8005a60:	e004      	b.n	8005a6c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005a62:	4b05      	ldr	r3, [pc, #20]	; (8005a78 <_TrySendOverflowPacket+0xe0>)
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	3301      	adds	r3, #1
 8005a68:	4a03      	ldr	r2, [pc, #12]	; (8005a78 <_TrySendOverflowPacket+0xe0>)
 8005a6a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005a6c:	693b      	ldr	r3, [r7, #16]
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3730      	adds	r7, #48	; 0x30
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	20014264 	.word	0x20014264
 8005a7c:	e0001004 	.word	0xe0001004

08005a80 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b08a      	sub	sp, #40	; 0x28
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005a8c:	4b6d      	ldr	r3, [pc, #436]	; (8005c44 <_SendPacket+0x1c4>)
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d010      	beq.n	8005ab6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005a94:	4b6b      	ldr	r3, [pc, #428]	; (8005c44 <_SendPacket+0x1c4>)
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f000 80a5 	beq.w	8005be8 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005a9e:	4b69      	ldr	r3, [pc, #420]	; (8005c44 <_SendPacket+0x1c4>)
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d109      	bne.n	8005aba <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005aa6:	f7ff ff77 	bl	8005998 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005aaa:	4b66      	ldr	r3, [pc, #408]	; (8005c44 <_SendPacket+0x1c4>)
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	f040 809c 	bne.w	8005bec <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8005ab4:	e001      	b.n	8005aba <_SendPacket+0x3a>
    goto Send;
 8005ab6:	bf00      	nop
 8005ab8:	e000      	b.n	8005abc <_SendPacket+0x3c>
Send:
 8005aba:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b1f      	cmp	r3, #31
 8005ac0:	d809      	bhi.n	8005ad6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005ac2:	4b60      	ldr	r3, [pc, #384]	; (8005c44 <_SendPacket+0x1c4>)
 8005ac4:	69da      	ldr	r2, [r3, #28]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f040 808d 	bne.w	8005bf0 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2b17      	cmp	r3, #23
 8005ada:	d807      	bhi.n	8005aec <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	60fb      	str	r3, [r7, #12]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	b2da      	uxtb	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	701a      	strb	r2, [r3, #0]
 8005aea:	e03d      	b.n	8005b68 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	2b7f      	cmp	r3, #127	; 0x7f
 8005af8:	d912      	bls.n	8005b20 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	09da      	lsrs	r2, r3, #7
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	3b01      	subs	r3, #1
 8005b02:	60fb      	str	r3, [r7, #12]
 8005b04:	b2d2      	uxtb	r2, r2
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	3a01      	subs	r2, #1
 8005b12:	60fa      	str	r2, [r7, #12]
 8005b14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b18:	b2da      	uxtb	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	701a      	strb	r2, [r3, #0]
 8005b1e:	e006      	b.n	8005b2e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	3b01      	subs	r3, #1
 8005b24:	60fb      	str	r3, [r7, #12]
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	b2da      	uxtb	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2b7f      	cmp	r3, #127	; 0x7f
 8005b32:	d912      	bls.n	8005b5a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	09da      	lsrs	r2, r3, #7
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	60fb      	str	r3, [r7, #12]
 8005b3e:	b2d2      	uxtb	r2, r2
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	3a01      	subs	r2, #1
 8005b4c:	60fa      	str	r2, [r7, #12]
 8005b4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	701a      	strb	r2, [r3, #0]
 8005b58:	e006      	b.n	8005b68 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	60fb      	str	r3, [r7, #12]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	b2da      	uxtb	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005b68:	4b37      	ldr	r3, [pc, #220]	; (8005c48 <_SendPacket+0x1c8>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005b6e:	4b35      	ldr	r3, [pc, #212]	; (8005c44 <_SendPacket+0x1c4>)
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	69ba      	ldr	r2, [r7, #24]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	623b      	str	r3, [r7, #32]
 8005b80:	e00b      	b.n	8005b9a <_SendPacket+0x11a>
 8005b82:	6a3b      	ldr	r3, [r7, #32]
 8005b84:	b2da      	uxtb	r2, r3
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b88:	1c59      	adds	r1, r3, #1
 8005b8a:	6279      	str	r1, [r7, #36]	; 0x24
 8005b8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b90:	b2d2      	uxtb	r2, r2
 8005b92:	701a      	strb	r2, [r3, #0]
 8005b94:	6a3b      	ldr	r3, [r7, #32]
 8005b96:	09db      	lsrs	r3, r3, #7
 8005b98:	623b      	str	r3, [r7, #32]
 8005b9a:	6a3b      	ldr	r3, [r7, #32]
 8005b9c:	2b7f      	cmp	r3, #127	; 0x7f
 8005b9e:	d8f0      	bhi.n	8005b82 <_SendPacket+0x102>
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba2:	1c5a      	adds	r2, r3, #1
 8005ba4:	627a      	str	r2, [r7, #36]	; 0x24
 8005ba6:	6a3a      	ldr	r2, [r7, #32]
 8005ba8:	b2d2      	uxtb	r2, r2
 8005baa:	701a      	strb	r2, [r3, #0]
 8005bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bae:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005bb0:	4b24      	ldr	r3, [pc, #144]	; (8005c44 <_SendPacket+0x1c4>)
 8005bb2:	785b      	ldrb	r3, [r3, #1]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	68f9      	ldr	r1, [r7, #12]
 8005bc0:	f7fa fb06 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005bc8:	f7ff f9fa 	bl	8004fc0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d003      	beq.n	8005bda <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005bd2:	4a1c      	ldr	r2, [pc, #112]	; (8005c44 <_SendPacket+0x1c4>)
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	60d3      	str	r3, [r2, #12]
 8005bd8:	e00b      	b.n	8005bf2 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005bda:	4b1a      	ldr	r3, [pc, #104]	; (8005c44 <_SendPacket+0x1c4>)
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	3301      	adds	r3, #1
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	4b18      	ldr	r3, [pc, #96]	; (8005c44 <_SendPacket+0x1c4>)
 8005be4:	701a      	strb	r2, [r3, #0]
 8005be6:	e004      	b.n	8005bf2 <_SendPacket+0x172>
    goto SendDone;
 8005be8:	bf00      	nop
 8005bea:	e002      	b.n	8005bf2 <_SendPacket+0x172>
      goto SendDone;
 8005bec:	bf00      	nop
 8005bee:	e000      	b.n	8005bf2 <_SendPacket+0x172>
      goto SendDone;
 8005bf0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005bf2:	4b14      	ldr	r3, [pc, #80]	; (8005c44 <_SendPacket+0x1c4>)
 8005bf4:	7e1b      	ldrb	r3, [r3, #24]
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	4a14      	ldr	r2, [pc, #80]	; (8005c4c <_SendPacket+0x1cc>)
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	005b      	lsls	r3, r3, #1
 8005bfe:	440b      	add	r3, r1
 8005c00:	00db      	lsls	r3, r3, #3
 8005c02:	4413      	add	r3, r2
 8005c04:	336c      	adds	r3, #108	; 0x6c
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	4b0e      	ldr	r3, [pc, #56]	; (8005c44 <_SendPacket+0x1c4>)
 8005c0a:	7e1b      	ldrb	r3, [r3, #24]
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	490f      	ldr	r1, [pc, #60]	; (8005c4c <_SendPacket+0x1cc>)
 8005c10:	4603      	mov	r3, r0
 8005c12:	005b      	lsls	r3, r3, #1
 8005c14:	4403      	add	r3, r0
 8005c16:	00db      	lsls	r3, r3, #3
 8005c18:	440b      	add	r3, r1
 8005c1a:	3370      	adds	r3, #112	; 0x70
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d00b      	beq.n	8005c3a <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005c22:	4b08      	ldr	r3, [pc, #32]	; (8005c44 <_SendPacket+0x1c4>)
 8005c24:	789b      	ldrb	r3, [r3, #2]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d107      	bne.n	8005c3a <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005c2a:	4b06      	ldr	r3, [pc, #24]	; (8005c44 <_SendPacket+0x1c4>)
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005c30:	f7ff fe40 	bl	80058b4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005c34:	4b03      	ldr	r3, [pc, #12]	; (8005c44 <_SendPacket+0x1c4>)
 8005c36:	2200      	movs	r2, #0
 8005c38:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005c3a:	bf00      	nop
 8005c3c:	3728      	adds	r7, #40	; 0x28
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	20014264 	.word	0x20014264
 8005c48:	e0001004 	.word	0xe0001004
 8005c4c:	20014404 	.word	0x20014404

08005c50 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b08a      	sub	sp, #40	; 0x28
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	460b      	mov	r3, r1
 8005c5a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	3301      	adds	r3, #1
 8005c66:	2b80      	cmp	r3, #128	; 0x80
 8005c68:	d80a      	bhi.n	8005c80 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	1c59      	adds	r1, r3, #1
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	6051      	str	r1, [r2, #4]
 8005c74:	78fa      	ldrb	r2, [r7, #3]
 8005c76:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	1c5a      	adds	r2, r3, #1
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	2b80      	cmp	r3, #128	; 0x80
 8005c86:	d15a      	bne.n	8005d3e <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	691a      	ldr	r2, [r3, #16]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	b2d2      	uxtb	r2, r2
 8005c92:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	623b      	str	r3, [r7, #32]
 8005ca8:	e00b      	b.n	8005cc2 <_StoreChar+0x72>
 8005caa:	6a3b      	ldr	r3, [r7, #32]
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb0:	1c59      	adds	r1, r3, #1
 8005cb2:	6279      	str	r1, [r7, #36]	; 0x24
 8005cb4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cb8:	b2d2      	uxtb	r2, r2
 8005cba:	701a      	strb	r2, [r3, #0]
 8005cbc:	6a3b      	ldr	r3, [r7, #32]
 8005cbe:	09db      	lsrs	r3, r3, #7
 8005cc0:	623b      	str	r3, [r7, #32]
 8005cc2:	6a3b      	ldr	r3, [r7, #32]
 8005cc4:	2b7f      	cmp	r3, #127	; 0x7f
 8005cc6:	d8f0      	bhi.n	8005caa <_StoreChar+0x5a>
 8005cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cca:	1c5a      	adds	r2, r3, #1
 8005ccc:	627a      	str	r2, [r7, #36]	; 0x24
 8005cce:	6a3a      	ldr	r2, [r7, #32]
 8005cd0:	b2d2      	uxtb	r2, r2
 8005cd2:	701a      	strb	r2, [r3, #0]
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd6:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	61fb      	str	r3, [r7, #28]
 8005cdc:	2300      	movs	r3, #0
 8005cde:	61bb      	str	r3, [r7, #24]
 8005ce0:	e00b      	b.n	8005cfa <_StoreChar+0xaa>
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	b2da      	uxtb	r2, r3
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	1c59      	adds	r1, r3, #1
 8005cea:	61f9      	str	r1, [r7, #28]
 8005cec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cf0:	b2d2      	uxtb	r2, r2
 8005cf2:	701a      	strb	r2, [r3, #0]
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	09db      	lsrs	r3, r3, #7
 8005cf8:	61bb      	str	r3, [r7, #24]
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	2b7f      	cmp	r3, #127	; 0x7f
 8005cfe:	d8f0      	bhi.n	8005ce2 <_StoreChar+0x92>
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	1c5a      	adds	r2, r3, #1
 8005d04:	61fa      	str	r2, [r7, #28]
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	b2d2      	uxtb	r2, r2
 8005d0a:	701a      	strb	r2, [r3, #0]
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	221a      	movs	r2, #26
 8005d16:	6939      	ldr	r1, [r7, #16]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7ff feb1 	bl	8005a80 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7ff fdb9 	bl	800589a <_PreparePacket>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	1c5a      	adds	r2, r3, #1
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	611a      	str	r2, [r3, #16]
  }
}
 8005d3e:	bf00      	nop
 8005d40:	3728      	adds	r7, #40	; 0x28
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
	...

08005d48 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b08a      	sub	sp, #40	; 0x28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
 8005d54:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005d62:	e007      	b.n	8005d74 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005d64:	6a3a      	ldr	r2, [r7, #32]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d6c:	623b      	str	r3, [r7, #32]
    Width++;
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	3301      	adds	r3, #1
 8005d72:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005d74:	6a3a      	ldr	r2, [r7, #32]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d2f3      	bcs.n	8005d64 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005d7c:	683a      	ldr	r2, [r7, #0]
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d901      	bls.n	8005d88 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d11f      	bne.n	8005dd2 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d01c      	beq.n	8005dd2 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d9a:	f003 0302 	and.w	r3, r3, #2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d005      	beq.n	8005dae <_PrintUnsigned+0x66>
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d102      	bne.n	8005dae <_PrintUnsigned+0x66>
        c = '0';
 8005da8:	2330      	movs	r3, #48	; 0x30
 8005daa:	76fb      	strb	r3, [r7, #27]
 8005dac:	e001      	b.n	8005db2 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005dae:	2320      	movs	r3, #32
 8005db0:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005db2:	e007      	b.n	8005dc4 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db6:	3b01      	subs	r3, #1
 8005db8:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005dba:	7efb      	ldrb	r3, [r7, #27]
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f7ff ff46 	bl	8005c50 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d003      	beq.n	8005dd2 <_PrintUnsigned+0x8a>
 8005dca:	69fa      	ldr	r2, [r7, #28]
 8005dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d3f0      	bcc.n	8005db4 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d903      	bls.n	8005de0 <_PrintUnsigned+0x98>
      NumDigits--;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	603b      	str	r3, [r7, #0]
 8005dde:	e009      	b.n	8005df4 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de8:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d200      	bcs.n	8005df4 <_PrintUnsigned+0xac>
        break;
 8005df2:	e005      	b.n	8005e00 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	fb02 f303 	mul.w	r3, r2, r3
 8005dfc:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005dfe:	e7e8      	b.n	8005dd2 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005e00:	68ba      	ldr	r2, [r7, #8]
 8005e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e08:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e0e:	fb02 f303 	mul.w	r3, r2, r3
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005e18:	4a15      	ldr	r2, [pc, #84]	; (8005e70 <_PrintUnsigned+0x128>)
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	4619      	mov	r1, r3
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f7ff ff14 	bl	8005c50 <_StoreChar>
    Digit /= Base;
 8005e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e30:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1e3      	bne.n	8005e00 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d011      	beq.n	8005e66 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00e      	beq.n	8005e66 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e48:	e006      	b.n	8005e58 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005e50:	2120      	movs	r1, #32
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f7ff fefc 	bl	8005c50 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d003      	beq.n	8005e66 <_PrintUnsigned+0x11e>
 8005e5e:	69fa      	ldr	r2, [r7, #28]
 8005e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d3f1      	bcc.n	8005e4a <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005e66:	bf00      	nop
 8005e68:	3728      	adds	r7, #40	; 0x28
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	08007634 	.word	0x08007634

08005e74 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b088      	sub	sp, #32
 8005e78:	af02      	add	r7, sp, #8
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
 8005e80:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	bfb8      	it	lt
 8005e88:	425b      	neglt	r3, r3
 8005e8a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005e90:	e007      	b.n	8005ea2 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	fb92 f3f3 	sdiv	r3, r2, r3
 8005e9a:	613b      	str	r3, [r7, #16]
    Width++;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	daf3      	bge.n	8005e92 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005eaa:	683a      	ldr	r2, [r7, #0]
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d901      	bls.n	8005eb6 <_PrintInt+0x42>
    Width = NumDigits;
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005eb6:	6a3b      	ldr	r3, [r7, #32]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00a      	beq.n	8005ed2 <_PrintInt+0x5e>
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	db04      	blt.n	8005ecc <_PrintInt+0x58>
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec4:	f003 0304 	and.w	r3, r3, #4
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d002      	beq.n	8005ed2 <_PrintInt+0x5e>
    FieldWidth--;
 8005ecc:	6a3b      	ldr	r3, [r7, #32]
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed4:	f003 0302 	and.w	r3, r3, #2
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d002      	beq.n	8005ee2 <_PrintInt+0x6e>
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d016      	beq.n	8005f10 <_PrintInt+0x9c>
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d111      	bne.n	8005f10 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005eec:	6a3b      	ldr	r3, [r7, #32]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00e      	beq.n	8005f10 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ef2:	e006      	b.n	8005f02 <_PrintInt+0x8e>
        FieldWidth--;
 8005ef4:	6a3b      	ldr	r3, [r7, #32]
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005efa:	2120      	movs	r1, #32
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f7ff fea7 	bl	8005c50 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f02:	6a3b      	ldr	r3, [r7, #32]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d003      	beq.n	8005f10 <_PrintInt+0x9c>
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	6a3b      	ldr	r3, [r7, #32]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d3f1      	bcc.n	8005ef4 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	da07      	bge.n	8005f26 <_PrintInt+0xb2>
    v = -v;
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	425b      	negs	r3, r3
 8005f1a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005f1c:	212d      	movs	r1, #45	; 0x2d
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f7ff fe96 	bl	8005c50 <_StoreChar>
 8005f24:	e008      	b.n	8005f38 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f28:	f003 0304 	and.w	r3, r3, #4
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d003      	beq.n	8005f38 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005f30:	212b      	movs	r1, #43	; 0x2b
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f7ff fe8c 	bl	8005c50 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3a:	f003 0302 	and.w	r3, r3, #2
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d019      	beq.n	8005f76 <_PrintInt+0x102>
 8005f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f44:	f003 0301 	and.w	r3, r3, #1
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d114      	bne.n	8005f76 <_PrintInt+0x102>
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d111      	bne.n	8005f76 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005f52:	6a3b      	ldr	r3, [r7, #32]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00e      	beq.n	8005f76 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f58:	e006      	b.n	8005f68 <_PrintInt+0xf4>
        FieldWidth--;
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005f60:	2130      	movs	r1, #48	; 0x30
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f7ff fe74 	bl	8005c50 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f68:	6a3b      	ldr	r3, [r7, #32]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d003      	beq.n	8005f76 <_PrintInt+0x102>
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	6a3b      	ldr	r3, [r7, #32]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d3f1      	bcc.n	8005f5a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005f76:	68b9      	ldr	r1, [r7, #8]
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7a:	9301      	str	r3, [sp, #4]
 8005f7c:	6a3b      	ldr	r3, [r7, #32]
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f7ff fedf 	bl	8005d48 <_PrintUnsigned>
}
 8005f8a:	bf00      	nop
 8005f8c:	3718      	adds	r7, #24
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
	...

08005f94 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b098      	sub	sp, #96	; 0x60
 8005f98:	af02      	add	r7, sp, #8
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005fa0:	f3ef 8311 	mrs	r3, BASEPRI
 8005fa4:	f04f 0120 	mov.w	r1, #32
 8005fa8:	f381 8811 	msr	BASEPRI, r1
 8005fac:	633b      	str	r3, [r7, #48]	; 0x30
 8005fae:	48b7      	ldr	r0, [pc, #732]	; (800628c <_VPrintTarget+0x2f8>)
 8005fb0:	f7ff fc73 	bl	800589a <_PreparePacket>
 8005fb4:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005fb6:	4bb5      	ldr	r3, [pc, #724]	; (800628c <_VPrintTarget+0x2f8>)
 8005fb8:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc0:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005fda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f000 8183 	beq.w	80062ea <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005fe4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fe8:	2b25      	cmp	r3, #37	; 0x25
 8005fea:	f040 8170 	bne.w	80062ce <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005ffe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006002:	3b23      	subs	r3, #35	; 0x23
 8006004:	2b0d      	cmp	r3, #13
 8006006:	d83f      	bhi.n	8006088 <_VPrintTarget+0xf4>
 8006008:	a201      	add	r2, pc, #4	; (adr r2, 8006010 <_VPrintTarget+0x7c>)
 800600a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600e:	bf00      	nop
 8006010:	08006079 	.word	0x08006079
 8006014:	08006089 	.word	0x08006089
 8006018:	08006089 	.word	0x08006089
 800601c:	08006089 	.word	0x08006089
 8006020:	08006089 	.word	0x08006089
 8006024:	08006089 	.word	0x08006089
 8006028:	08006089 	.word	0x08006089
 800602c:	08006089 	.word	0x08006089
 8006030:	08006069 	.word	0x08006069
 8006034:	08006089 	.word	0x08006089
 8006038:	08006049 	.word	0x08006049
 800603c:	08006089 	.word	0x08006089
 8006040:	08006089 	.word	0x08006089
 8006044:	08006059 	.word	0x08006059
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800604a:	f043 0301 	orr.w	r3, r3, #1
 800604e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	3301      	adds	r3, #1
 8006054:	60fb      	str	r3, [r7, #12]
 8006056:	e01a      	b.n	800608e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006058:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800605a:	f043 0302 	orr.w	r3, r3, #2
 800605e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	3301      	adds	r3, #1
 8006064:	60fb      	str	r3, [r7, #12]
 8006066:	e012      	b.n	800608e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006068:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800606a:	f043 0304 	orr.w	r3, r3, #4
 800606e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	3301      	adds	r3, #1
 8006074:	60fb      	str	r3, [r7, #12]
 8006076:	e00a      	b.n	800608e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800607a:	f043 0308 	orr.w	r3, r3, #8
 800607e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	3301      	adds	r3, #1
 8006084:	60fb      	str	r3, [r7, #12]
 8006086:	e002      	b.n	800608e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006088:	2300      	movs	r3, #0
 800608a:	653b      	str	r3, [r7, #80]	; 0x50
 800608c:	bf00      	nop
        }
      } while (v);
 800608e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1b0      	bne.n	8005ff6 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8006094:	2300      	movs	r3, #0
 8006096:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80060a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060a4:	2b2f      	cmp	r3, #47	; 0x2f
 80060a6:	d912      	bls.n	80060ce <_VPrintTarget+0x13a>
 80060a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060ac:	2b39      	cmp	r3, #57	; 0x39
 80060ae:	d80e      	bhi.n	80060ce <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	3301      	adds	r3, #1
 80060b4:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80060b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060b8:	4613      	mov	r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	4413      	add	r3, r2
 80060be:	005b      	lsls	r3, r3, #1
 80060c0:	461a      	mov	r2, r3
 80060c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060c6:	4413      	add	r3, r2
 80060c8:	3b30      	subs	r3, #48	; 0x30
 80060ca:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 80060cc:	e7e4      	b.n	8006098 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80060ce:	2300      	movs	r3, #0
 80060d0:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80060da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060de:	2b2e      	cmp	r3, #46	; 0x2e
 80060e0:	d11d      	bne.n	800611e <_VPrintTarget+0x18a>
        sFormat++;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	3301      	adds	r3, #1
 80060e6:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 80060f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060f4:	2b2f      	cmp	r3, #47	; 0x2f
 80060f6:	d912      	bls.n	800611e <_VPrintTarget+0x18a>
 80060f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060fc:	2b39      	cmp	r3, #57	; 0x39
 80060fe:	d80e      	bhi.n	800611e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	3301      	adds	r3, #1
 8006104:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8006106:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006108:	4613      	mov	r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4413      	add	r3, r2
 800610e:	005b      	lsls	r3, r3, #1
 8006110:	461a      	mov	r2, r3
 8006112:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006116:	4413      	add	r3, r2
 8006118:	3b30      	subs	r3, #48	; 0x30
 800611a:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 800611c:	e7e4      	b.n	80060e8 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8006126:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800612a:	2b6c      	cmp	r3, #108	; 0x6c
 800612c:	d003      	beq.n	8006136 <_VPrintTarget+0x1a2>
 800612e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006132:	2b68      	cmp	r3, #104	; 0x68
 8006134:	d107      	bne.n	8006146 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	3301      	adds	r3, #1
 8006142:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8006144:	e7ef      	b.n	8006126 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8006146:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800614a:	2b25      	cmp	r3, #37	; 0x25
 800614c:	f000 80b3 	beq.w	80062b6 <_VPrintTarget+0x322>
 8006150:	2b25      	cmp	r3, #37	; 0x25
 8006152:	f2c0 80b7 	blt.w	80062c4 <_VPrintTarget+0x330>
 8006156:	2b78      	cmp	r3, #120	; 0x78
 8006158:	f300 80b4 	bgt.w	80062c4 <_VPrintTarget+0x330>
 800615c:	2b58      	cmp	r3, #88	; 0x58
 800615e:	f2c0 80b1 	blt.w	80062c4 <_VPrintTarget+0x330>
 8006162:	3b58      	subs	r3, #88	; 0x58
 8006164:	2b20      	cmp	r3, #32
 8006166:	f200 80ad 	bhi.w	80062c4 <_VPrintTarget+0x330>
 800616a:	a201      	add	r2, pc, #4	; (adr r2, 8006170 <_VPrintTarget+0x1dc>)
 800616c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006170:	08006267 	.word	0x08006267
 8006174:	080062c5 	.word	0x080062c5
 8006178:	080062c5 	.word	0x080062c5
 800617c:	080062c5 	.word	0x080062c5
 8006180:	080062c5 	.word	0x080062c5
 8006184:	080062c5 	.word	0x080062c5
 8006188:	080062c5 	.word	0x080062c5
 800618c:	080062c5 	.word	0x080062c5
 8006190:	080062c5 	.word	0x080062c5
 8006194:	080062c5 	.word	0x080062c5
 8006198:	080062c5 	.word	0x080062c5
 800619c:	080061f5 	.word	0x080061f5
 80061a0:	0800621b 	.word	0x0800621b
 80061a4:	080062c5 	.word	0x080062c5
 80061a8:	080062c5 	.word	0x080062c5
 80061ac:	080062c5 	.word	0x080062c5
 80061b0:	080062c5 	.word	0x080062c5
 80061b4:	080062c5 	.word	0x080062c5
 80061b8:	080062c5 	.word	0x080062c5
 80061bc:	080062c5 	.word	0x080062c5
 80061c0:	080062c5 	.word	0x080062c5
 80061c4:	080062c5 	.word	0x080062c5
 80061c8:	080062c5 	.word	0x080062c5
 80061cc:	080062c5 	.word	0x080062c5
 80061d0:	08006291 	.word	0x08006291
 80061d4:	080062c5 	.word	0x080062c5
 80061d8:	080062c5 	.word	0x080062c5
 80061dc:	080062c5 	.word	0x080062c5
 80061e0:	080062c5 	.word	0x080062c5
 80061e4:	08006241 	.word	0x08006241
 80061e8:	080062c5 	.word	0x080062c5
 80061ec:	080062c5 	.word	0x080062c5
 80061f0:	08006267 	.word	0x08006267
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	1d19      	adds	r1, r3, #4
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	6011      	str	r1, [r2, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8006202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006204:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8006208:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800620c:	f107 0314 	add.w	r3, r7, #20
 8006210:	4611      	mov	r1, r2
 8006212:	4618      	mov	r0, r3
 8006214:	f7ff fd1c 	bl	8005c50 <_StoreChar>
        break;
 8006218:	e055      	b.n	80062c6 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	1d19      	adds	r1, r3, #4
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	6011      	str	r1, [r2, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006228:	f107 0014 	add.w	r0, r7, #20
 800622c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800622e:	9301      	str	r3, [sp, #4]
 8006230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006232:	9300      	str	r3, [sp, #0]
 8006234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006236:	220a      	movs	r2, #10
 8006238:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800623a:	f7ff fe1b 	bl	8005e74 <_PrintInt>
        break;
 800623e:	e042      	b.n	80062c6 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	1d19      	adds	r1, r3, #4
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	6011      	str	r1, [r2, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800624e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006250:	f107 0014 	add.w	r0, r7, #20
 8006254:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006256:	9301      	str	r3, [sp, #4]
 8006258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800625a:	9300      	str	r3, [sp, #0]
 800625c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800625e:	220a      	movs	r2, #10
 8006260:	f7ff fd72 	bl	8005d48 <_PrintUnsigned>
        break;
 8006264:	e02f      	b.n	80062c6 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	1d19      	adds	r1, r3, #4
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	6011      	str	r1, [r2, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006274:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006276:	f107 0014 	add.w	r0, r7, #20
 800627a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800627c:	9301      	str	r3, [sp, #4]
 800627e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006284:	2210      	movs	r2, #16
 8006286:	f7ff fd5f 	bl	8005d48 <_PrintUnsigned>
        break;
 800628a:	e01c      	b.n	80062c6 <_VPrintTarget+0x332>
 800628c:	20014294 	.word	0x20014294
      case 'p':
        v = va_arg(*pParamList, int);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	1d19      	adds	r1, r3, #4
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	6011      	str	r1, [r2, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 800629e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80062a0:	f107 0014 	add.w	r0, r7, #20
 80062a4:	2300      	movs	r3, #0
 80062a6:	9301      	str	r3, [sp, #4]
 80062a8:	2308      	movs	r3, #8
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	2308      	movs	r3, #8
 80062ae:	2210      	movs	r2, #16
 80062b0:	f7ff fd4a 	bl	8005d48 <_PrintUnsigned>
        break;
 80062b4:	e007      	b.n	80062c6 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80062b6:	f107 0314 	add.w	r3, r7, #20
 80062ba:	2125      	movs	r1, #37	; 0x25
 80062bc:	4618      	mov	r0, r3
 80062be:	f7ff fcc7 	bl	8005c50 <_StoreChar>
        break;
 80062c2:	e000      	b.n	80062c6 <_VPrintTarget+0x332>
      default:
        break;
 80062c4:	bf00      	nop
      }
      sFormat++;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	3301      	adds	r3, #1
 80062ca:	60fb      	str	r3, [r7, #12]
 80062cc:	e007      	b.n	80062de <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 80062ce:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80062d2:	f107 0314 	add.w	r3, r7, #20
 80062d6:	4611      	mov	r1, r2
 80062d8:	4618      	mov	r0, r3
 80062da:	f7ff fcb9 	bl	8005c50 <_StoreChar>
    }
  } while (*sFormat);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f47f ae72 	bne.w	8005fcc <_VPrintTarget+0x38>
 80062e8:	e000      	b.n	80062ec <_VPrintTarget+0x358>
      break;
 80062ea:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d041      	beq.n	8006376 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 80062f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	b2d2      	uxtb	r2, r2
 80062f8:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	643b      	str	r3, [r7, #64]	; 0x40
 80062fe:	6a3b      	ldr	r3, [r7, #32]
 8006300:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006302:	e00b      	b.n	800631c <_VPrintTarget+0x388>
 8006304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006306:	b2da      	uxtb	r2, r3
 8006308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800630a:	1c59      	adds	r1, r3, #1
 800630c:	6439      	str	r1, [r7, #64]	; 0x40
 800630e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006312:	b2d2      	uxtb	r2, r2
 8006314:	701a      	strb	r2, [r3, #0]
 8006316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006318:	09db      	lsrs	r3, r3, #7
 800631a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800631c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800631e:	2b7f      	cmp	r3, #127	; 0x7f
 8006320:	d8f0      	bhi.n	8006304 <_VPrintTarget+0x370>
 8006322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006324:	1c5a      	adds	r2, r3, #1
 8006326:	643a      	str	r2, [r7, #64]	; 0x40
 8006328:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800632a:	b2d2      	uxtb	r2, r2
 800632c:	701a      	strb	r2, [r3, #0]
 800632e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006330:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	63bb      	str	r3, [r7, #56]	; 0x38
 8006336:	2300      	movs	r3, #0
 8006338:	637b      	str	r3, [r7, #52]	; 0x34
 800633a:	e00b      	b.n	8006354 <_VPrintTarget+0x3c0>
 800633c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800633e:	b2da      	uxtb	r2, r3
 8006340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006342:	1c59      	adds	r1, r3, #1
 8006344:	63b9      	str	r1, [r7, #56]	; 0x38
 8006346:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800634a:	b2d2      	uxtb	r2, r2
 800634c:	701a      	strb	r2, [r3, #0]
 800634e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006350:	09db      	lsrs	r3, r3, #7
 8006352:	637b      	str	r3, [r7, #52]	; 0x34
 8006354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006356:	2b7f      	cmp	r3, #127	; 0x7f
 8006358:	d8f0      	bhi.n	800633c <_VPrintTarget+0x3a8>
 800635a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635c:	1c5a      	adds	r2, r3, #1
 800635e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006360:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006362:	b2d2      	uxtb	r2, r2
 8006364:	701a      	strb	r2, [r3, #0]
 8006366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006368:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	69b9      	ldr	r1, [r7, #24]
 800636e:	221a      	movs	r2, #26
 8006370:	4618      	mov	r0, r3
 8006372:	f7ff fb85 	bl	8005a80 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006378:	f383 8811 	msr	BASEPRI, r3
#endif
}
 800637c:	bf00      	nop
 800637e:	3758      	adds	r7, #88	; 0x58
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af02      	add	r7, sp, #8
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
 8006390:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006392:	2300      	movs	r3, #0
 8006394:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006398:	4917      	ldr	r1, [pc, #92]	; (80063f8 <SEGGER_SYSVIEW_Init+0x74>)
 800639a:	4818      	ldr	r0, [pc, #96]	; (80063fc <SEGGER_SYSVIEW_Init+0x78>)
 800639c:	f7ff f93c 	bl	8005618 <SEGGER_RTT_AllocUpBuffer>
 80063a0:	4603      	mov	r3, r0
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	4b16      	ldr	r3, [pc, #88]	; (8006400 <SEGGER_SYSVIEW_Init+0x7c>)
 80063a6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80063a8:	4b15      	ldr	r3, [pc, #84]	; (8006400 <SEGGER_SYSVIEW_Init+0x7c>)
 80063aa:	785a      	ldrb	r2, [r3, #1]
 80063ac:	4b14      	ldr	r3, [pc, #80]	; (8006400 <SEGGER_SYSVIEW_Init+0x7c>)
 80063ae:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80063b0:	4b13      	ldr	r3, [pc, #76]	; (8006400 <SEGGER_SYSVIEW_Init+0x7c>)
 80063b2:	7e1b      	ldrb	r3, [r3, #24]
 80063b4:	4618      	mov	r0, r3
 80063b6:	2300      	movs	r3, #0
 80063b8:	9300      	str	r3, [sp, #0]
 80063ba:	2308      	movs	r3, #8
 80063bc:	4a11      	ldr	r2, [pc, #68]	; (8006404 <SEGGER_SYSVIEW_Init+0x80>)
 80063be:	490f      	ldr	r1, [pc, #60]	; (80063fc <SEGGER_SYSVIEW_Init+0x78>)
 80063c0:	f7ff f9ae 	bl	8005720 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80063c4:	4b0e      	ldr	r3, [pc, #56]	; (8006400 <SEGGER_SYSVIEW_Init+0x7c>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80063ca:	4b0f      	ldr	r3, [pc, #60]	; (8006408 <SEGGER_SYSVIEW_Init+0x84>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a0c      	ldr	r2, [pc, #48]	; (8006400 <SEGGER_SYSVIEW_Init+0x7c>)
 80063d0:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80063d2:	4a0b      	ldr	r2, [pc, #44]	; (8006400 <SEGGER_SYSVIEW_Init+0x7c>)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80063d8:	4a09      	ldr	r2, [pc, #36]	; (8006400 <SEGGER_SYSVIEW_Init+0x7c>)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80063de:	4a08      	ldr	r2, [pc, #32]	; (8006400 <SEGGER_SYSVIEW_Init+0x7c>)
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80063e4:	4a06      	ldr	r2, [pc, #24]	; (8006400 <SEGGER_SYSVIEW_Init+0x7c>)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80063ea:	4b05      	ldr	r3, [pc, #20]	; (8006400 <SEGGER_SYSVIEW_Init+0x7c>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80063f0:	bf00      	nop
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	2001325c 	.word	0x2001325c
 80063fc:	080075a8 	.word	0x080075a8
 8006400:	20014264 	.word	0x20014264
 8006404:	2001425c 	.word	0x2001425c
 8006408:	e0001004 	.word	0xe0001004

0800640c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006414:	4a04      	ldr	r2, [pc, #16]	; (8006428 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6113      	str	r3, [r2, #16]
}
 800641a:	bf00      	nop
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	20014264 	.word	0x20014264

0800642c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006434:	f3ef 8311 	mrs	r3, BASEPRI
 8006438:	f04f 0120 	mov.w	r1, #32
 800643c:	f381 8811 	msr	BASEPRI, r1
 8006440:	60fb      	str	r3, [r7, #12]
 8006442:	4808      	ldr	r0, [pc, #32]	; (8006464 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006444:	f7ff fa29 	bl	800589a <_PreparePacket>
 8006448:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	68b9      	ldr	r1, [r7, #8]
 800644e:	68b8      	ldr	r0, [r7, #8]
 8006450:	f7ff fb16 	bl	8005a80 <_SendPacket>
  RECORD_END();
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f383 8811 	msr	BASEPRI, r3
}
 800645a:	bf00      	nop
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	20014294 	.word	0x20014294

08006468 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006468:	b580      	push	{r7, lr}
 800646a:	b088      	sub	sp, #32
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006472:	f3ef 8311 	mrs	r3, BASEPRI
 8006476:	f04f 0120 	mov.w	r1, #32
 800647a:	f381 8811 	msr	BASEPRI, r1
 800647e:	617b      	str	r3, [r7, #20]
 8006480:	4816      	ldr	r0, [pc, #88]	; (80064dc <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006482:	f7ff fa0a 	bl	800589a <_PreparePacket>
 8006486:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	61fb      	str	r3, [r7, #28]
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	61bb      	str	r3, [r7, #24]
 8006494:	e00b      	b.n	80064ae <SEGGER_SYSVIEW_RecordU32+0x46>
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	b2da      	uxtb	r2, r3
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	1c59      	adds	r1, r3, #1
 800649e:	61f9      	str	r1, [r7, #28]
 80064a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064a4:	b2d2      	uxtb	r2, r2
 80064a6:	701a      	strb	r2, [r3, #0]
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	09db      	lsrs	r3, r3, #7
 80064ac:	61bb      	str	r3, [r7, #24]
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	2b7f      	cmp	r3, #127	; 0x7f
 80064b2:	d8f0      	bhi.n	8006496 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	1c5a      	adds	r2, r3, #1
 80064b8:	61fa      	str	r2, [r7, #28]
 80064ba:	69ba      	ldr	r2, [r7, #24]
 80064bc:	b2d2      	uxtb	r2, r2
 80064be:	701a      	strb	r2, [r3, #0]
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	68f9      	ldr	r1, [r7, #12]
 80064c8:	6938      	ldr	r0, [r7, #16]
 80064ca:	f7ff fad9 	bl	8005a80 <_SendPacket>
  RECORD_END();
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f383 8811 	msr	BASEPRI, r3
}
 80064d4:	bf00      	nop
 80064d6:	3720      	adds	r7, #32
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	20014294 	.word	0x20014294

080064e0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b08c      	sub	sp, #48	; 0x30
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80064ec:	f3ef 8311 	mrs	r3, BASEPRI
 80064f0:	f04f 0120 	mov.w	r1, #32
 80064f4:	f381 8811 	msr	BASEPRI, r1
 80064f8:	61fb      	str	r3, [r7, #28]
 80064fa:	4825      	ldr	r0, [pc, #148]	; (8006590 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80064fc:	f7ff f9cd 	bl	800589a <_PreparePacket>
 8006500:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	62fb      	str	r3, [r7, #44]	; 0x2c
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	62bb      	str	r3, [r7, #40]	; 0x28
 800650e:	e00b      	b.n	8006528 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006512:	b2da      	uxtb	r2, r3
 8006514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006516:	1c59      	adds	r1, r3, #1
 8006518:	62f9      	str	r1, [r7, #44]	; 0x2c
 800651a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800651e:	b2d2      	uxtb	r2, r2
 8006520:	701a      	strb	r2, [r3, #0]
 8006522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006524:	09db      	lsrs	r3, r3, #7
 8006526:	62bb      	str	r3, [r7, #40]	; 0x28
 8006528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652a:	2b7f      	cmp	r3, #127	; 0x7f
 800652c:	d8f0      	bhi.n	8006510 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800652e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006530:	1c5a      	adds	r2, r3, #1
 8006532:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006534:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006536:	b2d2      	uxtb	r2, r2
 8006538:	701a      	strb	r2, [r3, #0]
 800653a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	627b      	str	r3, [r7, #36]	; 0x24
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	623b      	str	r3, [r7, #32]
 8006546:	e00b      	b.n	8006560 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006548:	6a3b      	ldr	r3, [r7, #32]
 800654a:	b2da      	uxtb	r2, r3
 800654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654e:	1c59      	adds	r1, r3, #1
 8006550:	6279      	str	r1, [r7, #36]	; 0x24
 8006552:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006556:	b2d2      	uxtb	r2, r2
 8006558:	701a      	strb	r2, [r3, #0]
 800655a:	6a3b      	ldr	r3, [r7, #32]
 800655c:	09db      	lsrs	r3, r3, #7
 800655e:	623b      	str	r3, [r7, #32]
 8006560:	6a3b      	ldr	r3, [r7, #32]
 8006562:	2b7f      	cmp	r3, #127	; 0x7f
 8006564:	d8f0      	bhi.n	8006548 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006568:	1c5a      	adds	r2, r3, #1
 800656a:	627a      	str	r2, [r7, #36]	; 0x24
 800656c:	6a3a      	ldr	r2, [r7, #32]
 800656e:	b2d2      	uxtb	r2, r2
 8006570:	701a      	strb	r2, [r3, #0]
 8006572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006574:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	6979      	ldr	r1, [r7, #20]
 800657a:	69b8      	ldr	r0, [r7, #24]
 800657c:	f7ff fa80 	bl	8005a80 <_SendPacket>
  RECORD_END();
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	f383 8811 	msr	BASEPRI, r3
}
 8006586:	bf00      	nop
 8006588:	3730      	adds	r7, #48	; 0x30
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	20014294 	.word	0x20014294

08006594 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006594:	b580      	push	{r7, lr}
 8006596:	b08e      	sub	sp, #56	; 0x38
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	607a      	str	r2, [r7, #4]
 80065a0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80065a2:	f3ef 8311 	mrs	r3, BASEPRI
 80065a6:	f04f 0120 	mov.w	r1, #32
 80065aa:	f381 8811 	msr	BASEPRI, r1
 80065ae:	61fb      	str	r3, [r7, #28]
 80065b0:	4832      	ldr	r0, [pc, #200]	; (800667c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80065b2:	f7ff f972 	bl	800589a <_PreparePacket>
 80065b6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	637b      	str	r3, [r7, #52]	; 0x34
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	633b      	str	r3, [r7, #48]	; 0x30
 80065c4:	e00b      	b.n	80065de <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80065c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c8:	b2da      	uxtb	r2, r3
 80065ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065cc:	1c59      	adds	r1, r3, #1
 80065ce:	6379      	str	r1, [r7, #52]	; 0x34
 80065d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065d4:	b2d2      	uxtb	r2, r2
 80065d6:	701a      	strb	r2, [r3, #0]
 80065d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065da:	09db      	lsrs	r3, r3, #7
 80065dc:	633b      	str	r3, [r7, #48]	; 0x30
 80065de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e0:	2b7f      	cmp	r3, #127	; 0x7f
 80065e2:	d8f0      	bhi.n	80065c6 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80065e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065e6:	1c5a      	adds	r2, r3, #1
 80065e8:	637a      	str	r2, [r7, #52]	; 0x34
 80065ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065ec:	b2d2      	uxtb	r2, r2
 80065ee:	701a      	strb	r2, [r3, #0]
 80065f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80065fc:	e00b      	b.n	8006616 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80065fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006600:	b2da      	uxtb	r2, r3
 8006602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006604:	1c59      	adds	r1, r3, #1
 8006606:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006608:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800660c:	b2d2      	uxtb	r2, r2
 800660e:	701a      	strb	r2, [r3, #0]
 8006610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006612:	09db      	lsrs	r3, r3, #7
 8006614:	62bb      	str	r3, [r7, #40]	; 0x28
 8006616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006618:	2b7f      	cmp	r3, #127	; 0x7f
 800661a:	d8f0      	bhi.n	80065fe <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800661c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661e:	1c5a      	adds	r2, r3, #1
 8006620:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006622:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006624:	b2d2      	uxtb	r2, r2
 8006626:	701a      	strb	r2, [r3, #0]
 8006628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	627b      	str	r3, [r7, #36]	; 0x24
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	623b      	str	r3, [r7, #32]
 8006634:	e00b      	b.n	800664e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006636:	6a3b      	ldr	r3, [r7, #32]
 8006638:	b2da      	uxtb	r2, r3
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663c:	1c59      	adds	r1, r3, #1
 800663e:	6279      	str	r1, [r7, #36]	; 0x24
 8006640:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006644:	b2d2      	uxtb	r2, r2
 8006646:	701a      	strb	r2, [r3, #0]
 8006648:	6a3b      	ldr	r3, [r7, #32]
 800664a:	09db      	lsrs	r3, r3, #7
 800664c:	623b      	str	r3, [r7, #32]
 800664e:	6a3b      	ldr	r3, [r7, #32]
 8006650:	2b7f      	cmp	r3, #127	; 0x7f
 8006652:	d8f0      	bhi.n	8006636 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006656:	1c5a      	adds	r2, r3, #1
 8006658:	627a      	str	r2, [r7, #36]	; 0x24
 800665a:	6a3a      	ldr	r2, [r7, #32]
 800665c:	b2d2      	uxtb	r2, r2
 800665e:	701a      	strb	r2, [r3, #0]
 8006660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006662:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	6979      	ldr	r1, [r7, #20]
 8006668:	69b8      	ldr	r0, [r7, #24]
 800666a:	f7ff fa09 	bl	8005a80 <_SendPacket>
  RECORD_END();
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	f383 8811 	msr	BASEPRI, r3
}
 8006674:	bf00      	nop
 8006676:	3738      	adds	r7, #56	; 0x38
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	20014294 	.word	0x20014294

08006680 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006680:	b580      	push	{r7, lr}
 8006682:	b090      	sub	sp, #64	; 0x40
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
 800668c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800668e:	f3ef 8311 	mrs	r3, BASEPRI
 8006692:	f04f 0120 	mov.w	r1, #32
 8006696:	f381 8811 	msr	BASEPRI, r1
 800669a:	61fb      	str	r3, [r7, #28]
 800669c:	4840      	ldr	r0, [pc, #256]	; (80067a0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800669e:	f7ff f8fc 	bl	800589a <_PreparePacket>
 80066a2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80066b0:	e00b      	b.n	80066ca <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80066b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066b8:	1c59      	adds	r1, r3, #1
 80066ba:	63f9      	str	r1, [r7, #60]	; 0x3c
 80066bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066c0:	b2d2      	uxtb	r2, r2
 80066c2:	701a      	strb	r2, [r3, #0]
 80066c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c6:	09db      	lsrs	r3, r3, #7
 80066c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80066ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066cc:	2b7f      	cmp	r3, #127	; 0x7f
 80066ce:	d8f0      	bhi.n	80066b2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80066d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066d2:	1c5a      	adds	r2, r3, #1
 80066d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80066d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066d8:	b2d2      	uxtb	r2, r2
 80066da:	701a      	strb	r2, [r3, #0]
 80066dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066de:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	637b      	str	r3, [r7, #52]	; 0x34
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	633b      	str	r3, [r7, #48]	; 0x30
 80066e8:	e00b      	b.n	8006702 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80066ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ec:	b2da      	uxtb	r2, r3
 80066ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f0:	1c59      	adds	r1, r3, #1
 80066f2:	6379      	str	r1, [r7, #52]	; 0x34
 80066f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066f8:	b2d2      	uxtb	r2, r2
 80066fa:	701a      	strb	r2, [r3, #0]
 80066fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fe:	09db      	lsrs	r3, r3, #7
 8006700:	633b      	str	r3, [r7, #48]	; 0x30
 8006702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006704:	2b7f      	cmp	r3, #127	; 0x7f
 8006706:	d8f0      	bhi.n	80066ea <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800670a:	1c5a      	adds	r2, r3, #1
 800670c:	637a      	str	r2, [r7, #52]	; 0x34
 800670e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006710:	b2d2      	uxtb	r2, r2
 8006712:	701a      	strb	r2, [r3, #0]
 8006714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006716:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006720:	e00b      	b.n	800673a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006724:	b2da      	uxtb	r2, r3
 8006726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006728:	1c59      	adds	r1, r3, #1
 800672a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800672c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006730:	b2d2      	uxtb	r2, r2
 8006732:	701a      	strb	r2, [r3, #0]
 8006734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006736:	09db      	lsrs	r3, r3, #7
 8006738:	62bb      	str	r3, [r7, #40]	; 0x28
 800673a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673c:	2b7f      	cmp	r3, #127	; 0x7f
 800673e:	d8f0      	bhi.n	8006722 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006742:	1c5a      	adds	r2, r3, #1
 8006744:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006746:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006748:	b2d2      	uxtb	r2, r2
 800674a:	701a      	strb	r2, [r3, #0]
 800674c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	627b      	str	r3, [r7, #36]	; 0x24
 8006754:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006756:	623b      	str	r3, [r7, #32]
 8006758:	e00b      	b.n	8006772 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800675a:	6a3b      	ldr	r3, [r7, #32]
 800675c:	b2da      	uxtb	r2, r3
 800675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006760:	1c59      	adds	r1, r3, #1
 8006762:	6279      	str	r1, [r7, #36]	; 0x24
 8006764:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006768:	b2d2      	uxtb	r2, r2
 800676a:	701a      	strb	r2, [r3, #0]
 800676c:	6a3b      	ldr	r3, [r7, #32]
 800676e:	09db      	lsrs	r3, r3, #7
 8006770:	623b      	str	r3, [r7, #32]
 8006772:	6a3b      	ldr	r3, [r7, #32]
 8006774:	2b7f      	cmp	r3, #127	; 0x7f
 8006776:	d8f0      	bhi.n	800675a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	627a      	str	r2, [r7, #36]	; 0x24
 800677e:	6a3a      	ldr	r2, [r7, #32]
 8006780:	b2d2      	uxtb	r2, r2
 8006782:	701a      	strb	r2, [r3, #0]
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	6979      	ldr	r1, [r7, #20]
 800678c:	69b8      	ldr	r0, [r7, #24]
 800678e:	f7ff f977 	bl	8005a80 <_SendPacket>
  RECORD_END();
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	f383 8811 	msr	BASEPRI, r3
}
 8006798:	bf00      	nop
 800679a:	3740      	adds	r7, #64	; 0x40
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	20014294 	.word	0x20014294

080067a4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b08c      	sub	sp, #48	; 0x30
 80067a8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80067aa:	4b59      	ldr	r3, [pc, #356]	; (8006910 <SEGGER_SYSVIEW_Start+0x16c>)
 80067ac:	2201      	movs	r2, #1
 80067ae:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80067b0:	f3ef 8311 	mrs	r3, BASEPRI
 80067b4:	f04f 0120 	mov.w	r1, #32
 80067b8:	f381 8811 	msr	BASEPRI, r1
 80067bc:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80067be:	4b54      	ldr	r3, [pc, #336]	; (8006910 <SEGGER_SYSVIEW_Start+0x16c>)
 80067c0:	785b      	ldrb	r3, [r3, #1]
 80067c2:	220a      	movs	r2, #10
 80067c4:	4953      	ldr	r1, [pc, #332]	; (8006914 <SEGGER_SYSVIEW_Start+0x170>)
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7f9 fd02 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80067d2:	f7fe fbf5 	bl	8004fc0 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80067d6:	200a      	movs	r0, #10
 80067d8:	f7ff fe28 	bl	800642c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80067dc:	f3ef 8311 	mrs	r3, BASEPRI
 80067e0:	f04f 0120 	mov.w	r1, #32
 80067e4:	f381 8811 	msr	BASEPRI, r1
 80067e8:	60bb      	str	r3, [r7, #8]
 80067ea:	484b      	ldr	r0, [pc, #300]	; (8006918 <SEGGER_SYSVIEW_Start+0x174>)
 80067ec:	f7ff f855 	bl	800589a <_PreparePacket>
 80067f0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067fa:	4b45      	ldr	r3, [pc, #276]	; (8006910 <SEGGER_SYSVIEW_Start+0x16c>)
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006800:	e00b      	b.n	800681a <SEGGER_SYSVIEW_Start+0x76>
 8006802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006804:	b2da      	uxtb	r2, r3
 8006806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006808:	1c59      	adds	r1, r3, #1
 800680a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800680c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006810:	b2d2      	uxtb	r2, r2
 8006812:	701a      	strb	r2, [r3, #0]
 8006814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006816:	09db      	lsrs	r3, r3, #7
 8006818:	62bb      	str	r3, [r7, #40]	; 0x28
 800681a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681c:	2b7f      	cmp	r3, #127	; 0x7f
 800681e:	d8f0      	bhi.n	8006802 <SEGGER_SYSVIEW_Start+0x5e>
 8006820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006822:	1c5a      	adds	r2, r3, #1
 8006824:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006826:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006828:	b2d2      	uxtb	r2, r2
 800682a:	701a      	strb	r2, [r3, #0]
 800682c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800682e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	627b      	str	r3, [r7, #36]	; 0x24
 8006834:	4b36      	ldr	r3, [pc, #216]	; (8006910 <SEGGER_SYSVIEW_Start+0x16c>)
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	623b      	str	r3, [r7, #32]
 800683a:	e00b      	b.n	8006854 <SEGGER_SYSVIEW_Start+0xb0>
 800683c:	6a3b      	ldr	r3, [r7, #32]
 800683e:	b2da      	uxtb	r2, r3
 8006840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006842:	1c59      	adds	r1, r3, #1
 8006844:	6279      	str	r1, [r7, #36]	; 0x24
 8006846:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800684a:	b2d2      	uxtb	r2, r2
 800684c:	701a      	strb	r2, [r3, #0]
 800684e:	6a3b      	ldr	r3, [r7, #32]
 8006850:	09db      	lsrs	r3, r3, #7
 8006852:	623b      	str	r3, [r7, #32]
 8006854:	6a3b      	ldr	r3, [r7, #32]
 8006856:	2b7f      	cmp	r3, #127	; 0x7f
 8006858:	d8f0      	bhi.n	800683c <SEGGER_SYSVIEW_Start+0x98>
 800685a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685c:	1c5a      	adds	r2, r3, #1
 800685e:	627a      	str	r2, [r7, #36]	; 0x24
 8006860:	6a3a      	ldr	r2, [r7, #32]
 8006862:	b2d2      	uxtb	r2, r2
 8006864:	701a      	strb	r2, [r3, #0]
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	61fb      	str	r3, [r7, #28]
 800686e:	4b28      	ldr	r3, [pc, #160]	; (8006910 <SEGGER_SYSVIEW_Start+0x16c>)
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	61bb      	str	r3, [r7, #24]
 8006874:	e00b      	b.n	800688e <SEGGER_SYSVIEW_Start+0xea>
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	b2da      	uxtb	r2, r3
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	1c59      	adds	r1, r3, #1
 800687e:	61f9      	str	r1, [r7, #28]
 8006880:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006884:	b2d2      	uxtb	r2, r2
 8006886:	701a      	strb	r2, [r3, #0]
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	09db      	lsrs	r3, r3, #7
 800688c:	61bb      	str	r3, [r7, #24]
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	2b7f      	cmp	r3, #127	; 0x7f
 8006892:	d8f0      	bhi.n	8006876 <SEGGER_SYSVIEW_Start+0xd2>
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	1c5a      	adds	r2, r3, #1
 8006898:	61fa      	str	r2, [r7, #28]
 800689a:	69ba      	ldr	r2, [r7, #24]
 800689c:	b2d2      	uxtb	r2, r2
 800689e:	701a      	strb	r2, [r3, #0]
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	617b      	str	r3, [r7, #20]
 80068a8:	2300      	movs	r3, #0
 80068aa:	613b      	str	r3, [r7, #16]
 80068ac:	e00b      	b.n	80068c6 <SEGGER_SYSVIEW_Start+0x122>
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	b2da      	uxtb	r2, r3
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	1c59      	adds	r1, r3, #1
 80068b6:	6179      	str	r1, [r7, #20]
 80068b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068bc:	b2d2      	uxtb	r2, r2
 80068be:	701a      	strb	r2, [r3, #0]
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	09db      	lsrs	r3, r3, #7
 80068c4:	613b      	str	r3, [r7, #16]
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	2b7f      	cmp	r3, #127	; 0x7f
 80068ca:	d8f0      	bhi.n	80068ae <SEGGER_SYSVIEW_Start+0x10a>
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	1c5a      	adds	r2, r3, #1
 80068d0:	617a      	str	r2, [r7, #20]
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	b2d2      	uxtb	r2, r2
 80068d6:	701a      	strb	r2, [r3, #0]
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80068dc:	2218      	movs	r2, #24
 80068de:	6839      	ldr	r1, [r7, #0]
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f7ff f8cd 	bl	8005a80 <_SendPacket>
      RECORD_END();
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80068ec:	4b08      	ldr	r3, [pc, #32]	; (8006910 <SEGGER_SYSVIEW_Start+0x16c>)
 80068ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d002      	beq.n	80068fa <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80068f4:	4b06      	ldr	r3, [pc, #24]	; (8006910 <SEGGER_SYSVIEW_Start+0x16c>)
 80068f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80068fa:	f000 f9eb 	bl	8006cd4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80068fe:	f000 f9b1 	bl	8006c64 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006902:	f000 fc83 	bl	800720c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006906:	bf00      	nop
 8006908:	3730      	adds	r7, #48	; 0x30
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	20014264 	.word	0x20014264
 8006914:	08007628 	.word	0x08007628
 8006918:	20014294 	.word	0x20014294

0800691c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006922:	f3ef 8311 	mrs	r3, BASEPRI
 8006926:	f04f 0120 	mov.w	r1, #32
 800692a:	f381 8811 	msr	BASEPRI, r1
 800692e:	607b      	str	r3, [r7, #4]
 8006930:	480b      	ldr	r0, [pc, #44]	; (8006960 <SEGGER_SYSVIEW_Stop+0x44>)
 8006932:	f7fe ffb2 	bl	800589a <_PreparePacket>
 8006936:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006938:	4b0a      	ldr	r3, [pc, #40]	; (8006964 <SEGGER_SYSVIEW_Stop+0x48>)
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d007      	beq.n	8006950 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006940:	220b      	movs	r2, #11
 8006942:	6839      	ldr	r1, [r7, #0]
 8006944:	6838      	ldr	r0, [r7, #0]
 8006946:	f7ff f89b 	bl	8005a80 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800694a:	4b06      	ldr	r3, [pc, #24]	; (8006964 <SEGGER_SYSVIEW_Stop+0x48>)
 800694c:	2200      	movs	r2, #0
 800694e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f383 8811 	msr	BASEPRI, r3
}
 8006956:	bf00      	nop
 8006958:	3708      	adds	r7, #8
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	20014294 	.word	0x20014294
 8006964:	20014264 	.word	0x20014264

08006968 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006968:	b580      	push	{r7, lr}
 800696a:	b08c      	sub	sp, #48	; 0x30
 800696c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800696e:	f3ef 8311 	mrs	r3, BASEPRI
 8006972:	f04f 0120 	mov.w	r1, #32
 8006976:	f381 8811 	msr	BASEPRI, r1
 800697a:	60fb      	str	r3, [r7, #12]
 800697c:	4845      	ldr	r0, [pc, #276]	; (8006a94 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800697e:	f7fe ff8c 	bl	800589a <_PreparePacket>
 8006982:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800698c:	4b42      	ldr	r3, [pc, #264]	; (8006a98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	62bb      	str	r3, [r7, #40]	; 0x28
 8006992:	e00b      	b.n	80069ac <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006996:	b2da      	uxtb	r2, r3
 8006998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699a:	1c59      	adds	r1, r3, #1
 800699c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800699e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069a2:	b2d2      	uxtb	r2, r2
 80069a4:	701a      	strb	r2, [r3, #0]
 80069a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a8:	09db      	lsrs	r3, r3, #7
 80069aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80069ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ae:	2b7f      	cmp	r3, #127	; 0x7f
 80069b0:	d8f0      	bhi.n	8006994 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80069b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b4:	1c5a      	adds	r2, r3, #1
 80069b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069ba:	b2d2      	uxtb	r2, r2
 80069bc:	701a      	strb	r2, [r3, #0]
 80069be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	627b      	str	r3, [r7, #36]	; 0x24
 80069c6:	4b34      	ldr	r3, [pc, #208]	; (8006a98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	623b      	str	r3, [r7, #32]
 80069cc:	e00b      	b.n	80069e6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80069ce:	6a3b      	ldr	r3, [r7, #32]
 80069d0:	b2da      	uxtb	r2, r3
 80069d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d4:	1c59      	adds	r1, r3, #1
 80069d6:	6279      	str	r1, [r7, #36]	; 0x24
 80069d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069dc:	b2d2      	uxtb	r2, r2
 80069de:	701a      	strb	r2, [r3, #0]
 80069e0:	6a3b      	ldr	r3, [r7, #32]
 80069e2:	09db      	lsrs	r3, r3, #7
 80069e4:	623b      	str	r3, [r7, #32]
 80069e6:	6a3b      	ldr	r3, [r7, #32]
 80069e8:	2b7f      	cmp	r3, #127	; 0x7f
 80069ea:	d8f0      	bhi.n	80069ce <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80069ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ee:	1c5a      	adds	r2, r3, #1
 80069f0:	627a      	str	r2, [r7, #36]	; 0x24
 80069f2:	6a3a      	ldr	r2, [r7, #32]
 80069f4:	b2d2      	uxtb	r2, r2
 80069f6:	701a      	strb	r2, [r3, #0]
 80069f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	61fb      	str	r3, [r7, #28]
 8006a00:	4b25      	ldr	r3, [pc, #148]	; (8006a98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	61bb      	str	r3, [r7, #24]
 8006a06:	e00b      	b.n	8006a20 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	b2da      	uxtb	r2, r3
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	1c59      	adds	r1, r3, #1
 8006a10:	61f9      	str	r1, [r7, #28]
 8006a12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a16:	b2d2      	uxtb	r2, r2
 8006a18:	701a      	strb	r2, [r3, #0]
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	09db      	lsrs	r3, r3, #7
 8006a1e:	61bb      	str	r3, [r7, #24]
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	2b7f      	cmp	r3, #127	; 0x7f
 8006a24:	d8f0      	bhi.n	8006a08 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	1c5a      	adds	r2, r3, #1
 8006a2a:	61fa      	str	r2, [r7, #28]
 8006a2c:	69ba      	ldr	r2, [r7, #24]
 8006a2e:	b2d2      	uxtb	r2, r2
 8006a30:	701a      	strb	r2, [r3, #0]
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	617b      	str	r3, [r7, #20]
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	613b      	str	r3, [r7, #16]
 8006a3e:	e00b      	b.n	8006a58 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	b2da      	uxtb	r2, r3
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	1c59      	adds	r1, r3, #1
 8006a48:	6179      	str	r1, [r7, #20]
 8006a4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a4e:	b2d2      	uxtb	r2, r2
 8006a50:	701a      	strb	r2, [r3, #0]
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	09db      	lsrs	r3, r3, #7
 8006a56:	613b      	str	r3, [r7, #16]
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	2b7f      	cmp	r3, #127	; 0x7f
 8006a5c:	d8f0      	bhi.n	8006a40 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	1c5a      	adds	r2, r3, #1
 8006a62:	617a      	str	r2, [r7, #20]
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	b2d2      	uxtb	r2, r2
 8006a68:	701a      	strb	r2, [r3, #0]
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006a6e:	2218      	movs	r2, #24
 8006a70:	6879      	ldr	r1, [r7, #4]
 8006a72:	68b8      	ldr	r0, [r7, #8]
 8006a74:	f7ff f804 	bl	8005a80 <_SendPacket>
  RECORD_END();
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006a7e:	4b06      	ldr	r3, [pc, #24]	; (8006a98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d002      	beq.n	8006a8c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006a86:	4b04      	ldr	r3, [pc, #16]	; (8006a98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8a:	4798      	blx	r3
  }
}
 8006a8c:	bf00      	nop
 8006a8e:	3730      	adds	r7, #48	; 0x30
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	20014294 	.word	0x20014294
 8006a98:	20014264 	.word	0x20014264

08006a9c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b092      	sub	sp, #72	; 0x48
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006aa4:	f3ef 8311 	mrs	r3, BASEPRI
 8006aa8:	f04f 0120 	mov.w	r1, #32
 8006aac:	f381 8811 	msr	BASEPRI, r1
 8006ab0:	617b      	str	r3, [r7, #20]
 8006ab2:	486a      	ldr	r0, [pc, #424]	; (8006c5c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006ab4:	f7fe fef1 	bl	800589a <_PreparePacket>
 8006ab8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	647b      	str	r3, [r7, #68]	; 0x44
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	4b66      	ldr	r3, [pc, #408]	; (8006c60 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	643b      	str	r3, [r7, #64]	; 0x40
 8006ace:	e00b      	b.n	8006ae8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ad2:	b2da      	uxtb	r2, r3
 8006ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ad6:	1c59      	adds	r1, r3, #1
 8006ad8:	6479      	str	r1, [r7, #68]	; 0x44
 8006ada:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ade:	b2d2      	uxtb	r2, r2
 8006ae0:	701a      	strb	r2, [r3, #0]
 8006ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ae4:	09db      	lsrs	r3, r3, #7
 8006ae6:	643b      	str	r3, [r7, #64]	; 0x40
 8006ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aea:	2b7f      	cmp	r3, #127	; 0x7f
 8006aec:	d8f0      	bhi.n	8006ad0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006aee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006af0:	1c5a      	adds	r2, r3, #1
 8006af2:	647a      	str	r2, [r7, #68]	; 0x44
 8006af4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006af6:	b2d2      	uxtb	r2, r2
 8006af8:	701a      	strb	r2, [r3, #0]
 8006afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006afc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b08:	e00b      	b.n	8006b22 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0c:	b2da      	uxtb	r2, r3
 8006b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b10:	1c59      	adds	r1, r3, #1
 8006b12:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006b14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b18:	b2d2      	uxtb	r2, r2
 8006b1a:	701a      	strb	r2, [r3, #0]
 8006b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1e:	09db      	lsrs	r3, r3, #7
 8006b20:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b24:	2b7f      	cmp	r3, #127	; 0x7f
 8006b26:	d8f0      	bhi.n	8006b0a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b2a:	1c5a      	adds	r2, r3, #1
 8006b2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006b2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b30:	b2d2      	uxtb	r2, r2
 8006b32:	701a      	strb	r2, [r3, #0]
 8006b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b36:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	4619      	mov	r1, r3
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f7fe fe5d 	bl	8005800 <_EncodeStr>
 8006b46:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006b48:	2209      	movs	r2, #9
 8006b4a:	68f9      	ldr	r1, [r7, #12]
 8006b4c:	6938      	ldr	r0, [r7, #16]
 8006b4e:	f7fe ff97 	bl	8005a80 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	637b      	str	r3, [r7, #52]	; 0x34
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	4b40      	ldr	r3, [pc, #256]	; (8006c60 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	633b      	str	r3, [r7, #48]	; 0x30
 8006b66:	e00b      	b.n	8006b80 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6a:	b2da      	uxtb	r2, r3
 8006b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b6e:	1c59      	adds	r1, r3, #1
 8006b70:	6379      	str	r1, [r7, #52]	; 0x34
 8006b72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b76:	b2d2      	uxtb	r2, r2
 8006b78:	701a      	strb	r2, [r3, #0]
 8006b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7c:	09db      	lsrs	r3, r3, #7
 8006b7e:	633b      	str	r3, [r7, #48]	; 0x30
 8006b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b82:	2b7f      	cmp	r3, #127	; 0x7f
 8006b84:	d8f0      	bhi.n	8006b68 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b88:	1c5a      	adds	r2, r3, #1
 8006b8a:	637a      	str	r2, [r7, #52]	; 0x34
 8006b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b8e:	b2d2      	uxtb	r2, r2
 8006b90:	701a      	strb	r2, [r3, #0]
 8006b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b94:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ba0:	e00b      	b.n	8006bba <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba4:	b2da      	uxtb	r2, r3
 8006ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba8:	1c59      	adds	r1, r3, #1
 8006baa:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006bac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bb0:	b2d2      	uxtb	r2, r2
 8006bb2:	701a      	strb	r2, [r3, #0]
 8006bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb6:	09db      	lsrs	r3, r3, #7
 8006bb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bbc:	2b7f      	cmp	r3, #127	; 0x7f
 8006bbe:	d8f0      	bhi.n	8006ba2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc2:	1c5a      	adds	r2, r3, #1
 8006bc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bc8:	b2d2      	uxtb	r2, r2
 8006bca:	701a      	strb	r2, [r3, #0]
 8006bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bce:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	623b      	str	r3, [r7, #32]
 8006bda:	e00b      	b.n	8006bf4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006bdc:	6a3b      	ldr	r3, [r7, #32]
 8006bde:	b2da      	uxtb	r2, r3
 8006be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be2:	1c59      	adds	r1, r3, #1
 8006be4:	6279      	str	r1, [r7, #36]	; 0x24
 8006be6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bea:	b2d2      	uxtb	r2, r2
 8006bec:	701a      	strb	r2, [r3, #0]
 8006bee:	6a3b      	ldr	r3, [r7, #32]
 8006bf0:	09db      	lsrs	r3, r3, #7
 8006bf2:	623b      	str	r3, [r7, #32]
 8006bf4:	6a3b      	ldr	r3, [r7, #32]
 8006bf6:	2b7f      	cmp	r3, #127	; 0x7f
 8006bf8:	d8f0      	bhi.n	8006bdc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfc:	1c5a      	adds	r2, r3, #1
 8006bfe:	627a      	str	r2, [r7, #36]	; 0x24
 8006c00:	6a3a      	ldr	r2, [r7, #32]
 8006c02:	b2d2      	uxtb	r2, r2
 8006c04:	701a      	strb	r2, [r3, #0]
 8006c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c08:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	61fb      	str	r3, [r7, #28]
 8006c0e:	2300      	movs	r3, #0
 8006c10:	61bb      	str	r3, [r7, #24]
 8006c12:	e00b      	b.n	8006c2c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	b2da      	uxtb	r2, r3
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	1c59      	adds	r1, r3, #1
 8006c1c:	61f9      	str	r1, [r7, #28]
 8006c1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c22:	b2d2      	uxtb	r2, r2
 8006c24:	701a      	strb	r2, [r3, #0]
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	09db      	lsrs	r3, r3, #7
 8006c2a:	61bb      	str	r3, [r7, #24]
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	2b7f      	cmp	r3, #127	; 0x7f
 8006c30:	d8f0      	bhi.n	8006c14 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	1c5a      	adds	r2, r3, #1
 8006c36:	61fa      	str	r2, [r7, #28]
 8006c38:	69ba      	ldr	r2, [r7, #24]
 8006c3a:	b2d2      	uxtb	r2, r2
 8006c3c:	701a      	strb	r2, [r3, #0]
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006c42:	2215      	movs	r2, #21
 8006c44:	68f9      	ldr	r1, [r7, #12]
 8006c46:	6938      	ldr	r0, [r7, #16]
 8006c48:	f7fe ff1a 	bl	8005a80 <_SendPacket>
  RECORD_END();
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	f383 8811 	msr	BASEPRI, r3
}
 8006c52:	bf00      	nop
 8006c54:	3748      	adds	r7, #72	; 0x48
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	20014294 	.word	0x20014294
 8006c60:	20014264 	.word	0x20014264

08006c64 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006c64:	b580      	push	{r7, lr}
 8006c66:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006c68:	4b07      	ldr	r3, [pc, #28]	; (8006c88 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006c6a:	6a1b      	ldr	r3, [r3, #32]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d008      	beq.n	8006c82 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006c70:	4b05      	ldr	r3, [pc, #20]	; (8006c88 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006c72:	6a1b      	ldr	r3, [r3, #32]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d003      	beq.n	8006c82 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006c7a:	4b03      	ldr	r3, [pc, #12]	; (8006c88 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	4798      	blx	r3
  }
}
 8006c82:	bf00      	nop
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	20014264 	.word	0x20014264

08006c8c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b086      	sub	sp, #24
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c94:	f3ef 8311 	mrs	r3, BASEPRI
 8006c98:	f04f 0120 	mov.w	r1, #32
 8006c9c:	f381 8811 	msr	BASEPRI, r1
 8006ca0:	617b      	str	r3, [r7, #20]
 8006ca2:	480b      	ldr	r0, [pc, #44]	; (8006cd0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006ca4:	f7fe fdf9 	bl	800589a <_PreparePacket>
 8006ca8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006caa:	2280      	movs	r2, #128	; 0x80
 8006cac:	6879      	ldr	r1, [r7, #4]
 8006cae:	6938      	ldr	r0, [r7, #16]
 8006cb0:	f7fe fda6 	bl	8005800 <_EncodeStr>
 8006cb4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006cb6:	220e      	movs	r2, #14
 8006cb8:	68f9      	ldr	r1, [r7, #12]
 8006cba:	6938      	ldr	r0, [r7, #16]
 8006cbc:	f7fe fee0 	bl	8005a80 <_SendPacket>
  RECORD_END();
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	f383 8811 	msr	BASEPRI, r3
}
 8006cc6:	bf00      	nop
 8006cc8:	3718      	adds	r7, #24
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	20014294 	.word	0x20014294

08006cd4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006cd4:	b590      	push	{r4, r7, lr}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006cda:	4b15      	ldr	r3, [pc, #84]	; (8006d30 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006cdc:	6a1b      	ldr	r3, [r3, #32]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d01a      	beq.n	8006d18 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006ce2:	4b13      	ldr	r3, [pc, #76]	; (8006d30 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006ce4:	6a1b      	ldr	r3, [r3, #32]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d015      	beq.n	8006d18 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006cec:	4b10      	ldr	r3, [pc, #64]	; (8006d30 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006cee:	6a1b      	ldr	r3, [r3, #32]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4798      	blx	r3
 8006cf4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006cf8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006cfa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cfe:	f04f 0200 	mov.w	r2, #0
 8006d02:	f04f 0300 	mov.w	r3, #0
 8006d06:	000a      	movs	r2, r1
 8006d08:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	4621      	mov	r1, r4
 8006d10:	200d      	movs	r0, #13
 8006d12:	f7ff fbe5 	bl	80064e0 <SEGGER_SYSVIEW_RecordU32x2>
 8006d16:	e006      	b.n	8006d26 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006d18:	4b06      	ldr	r3, [pc, #24]	; (8006d34 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	200c      	movs	r0, #12
 8006d20:	f7ff fba2 	bl	8006468 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006d24:	bf00      	nop
 8006d26:	bf00      	nop
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd90      	pop	{r4, r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	20014264 	.word	0x20014264
 8006d34:	e0001004 	.word	0xe0001004

08006d38 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b086      	sub	sp, #24
 8006d3c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006d3e:	f3ef 8311 	mrs	r3, BASEPRI
 8006d42:	f04f 0120 	mov.w	r1, #32
 8006d46:	f381 8811 	msr	BASEPRI, r1
 8006d4a:	60fb      	str	r3, [r7, #12]
 8006d4c:	4819      	ldr	r0, [pc, #100]	; (8006db4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006d4e:	f7fe fda4 	bl	800589a <_PreparePacket>
 8006d52:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006d58:	4b17      	ldr	r3, [pc, #92]	; (8006db8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d60:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	617b      	str	r3, [r7, #20]
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	613b      	str	r3, [r7, #16]
 8006d6a:	e00b      	b.n	8006d84 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	b2da      	uxtb	r2, r3
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	1c59      	adds	r1, r3, #1
 8006d74:	6179      	str	r1, [r7, #20]
 8006d76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d7a:	b2d2      	uxtb	r2, r2
 8006d7c:	701a      	strb	r2, [r3, #0]
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	09db      	lsrs	r3, r3, #7
 8006d82:	613b      	str	r3, [r7, #16]
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	2b7f      	cmp	r3, #127	; 0x7f
 8006d88:	d8f0      	bhi.n	8006d6c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	1c5a      	adds	r2, r3, #1
 8006d8e:	617a      	str	r2, [r7, #20]
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	b2d2      	uxtb	r2, r2
 8006d94:	701a      	strb	r2, [r3, #0]
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	6879      	ldr	r1, [r7, #4]
 8006d9e:	68b8      	ldr	r0, [r7, #8]
 8006da0:	f7fe fe6e 	bl	8005a80 <_SendPacket>
  RECORD_END();
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f383 8811 	msr	BASEPRI, r3
}
 8006daa:	bf00      	nop
 8006dac:	3718      	adds	r7, #24
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	20014294 	.word	0x20014294
 8006db8:	e000ed04 	.word	0xe000ed04

08006dbc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006dc2:	f3ef 8311 	mrs	r3, BASEPRI
 8006dc6:	f04f 0120 	mov.w	r1, #32
 8006dca:	f381 8811 	msr	BASEPRI, r1
 8006dce:	607b      	str	r3, [r7, #4]
 8006dd0:	4807      	ldr	r0, [pc, #28]	; (8006df0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006dd2:	f7fe fd62 	bl	800589a <_PreparePacket>
 8006dd6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006dd8:	2203      	movs	r2, #3
 8006dda:	6839      	ldr	r1, [r7, #0]
 8006ddc:	6838      	ldr	r0, [r7, #0]
 8006dde:	f7fe fe4f 	bl	8005a80 <_SendPacket>
  RECORD_END();
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f383 8811 	msr	BASEPRI, r3
}
 8006de8:	bf00      	nop
 8006dea:	3708      	adds	r7, #8
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	20014294 	.word	0x20014294

08006df4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006dfa:	f3ef 8311 	mrs	r3, BASEPRI
 8006dfe:	f04f 0120 	mov.w	r1, #32
 8006e02:	f381 8811 	msr	BASEPRI, r1
 8006e06:	607b      	str	r3, [r7, #4]
 8006e08:	4807      	ldr	r0, [pc, #28]	; (8006e28 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006e0a:	f7fe fd46 	bl	800589a <_PreparePacket>
 8006e0e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006e10:	2212      	movs	r2, #18
 8006e12:	6839      	ldr	r1, [r7, #0]
 8006e14:	6838      	ldr	r0, [r7, #0]
 8006e16:	f7fe fe33 	bl	8005a80 <_SendPacket>
  RECORD_END();
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f383 8811 	msr	BASEPRI, r3
}
 8006e20:	bf00      	nop
 8006e22:	3708      	adds	r7, #8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	20014294 	.word	0x20014294

08006e2c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006e32:	f3ef 8311 	mrs	r3, BASEPRI
 8006e36:	f04f 0120 	mov.w	r1, #32
 8006e3a:	f381 8811 	msr	BASEPRI, r1
 8006e3e:	607b      	str	r3, [r7, #4]
 8006e40:	4807      	ldr	r0, [pc, #28]	; (8006e60 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006e42:	f7fe fd2a 	bl	800589a <_PreparePacket>
 8006e46:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006e48:	2211      	movs	r2, #17
 8006e4a:	6839      	ldr	r1, [r7, #0]
 8006e4c:	6838      	ldr	r0, [r7, #0]
 8006e4e:	f7fe fe17 	bl	8005a80 <_SendPacket>
  RECORD_END();
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f383 8811 	msr	BASEPRI, r3
}
 8006e58:	bf00      	nop
 8006e5a:	3708      	adds	r7, #8
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	20014294 	.word	0x20014294

08006e64 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b088      	sub	sp, #32
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006e6c:	f3ef 8311 	mrs	r3, BASEPRI
 8006e70:	f04f 0120 	mov.w	r1, #32
 8006e74:	f381 8811 	msr	BASEPRI, r1
 8006e78:	617b      	str	r3, [r7, #20]
 8006e7a:	4819      	ldr	r0, [pc, #100]	; (8006ee0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006e7c:	f7fe fd0d 	bl	800589a <_PreparePacket>
 8006e80:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006e86:	4b17      	ldr	r3, [pc, #92]	; (8006ee4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	61fb      	str	r3, [r7, #28]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	61bb      	str	r3, [r7, #24]
 8006e98:	e00b      	b.n	8006eb2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	b2da      	uxtb	r2, r3
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	1c59      	adds	r1, r3, #1
 8006ea2:	61f9      	str	r1, [r7, #28]
 8006ea4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ea8:	b2d2      	uxtb	r2, r2
 8006eaa:	701a      	strb	r2, [r3, #0]
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	09db      	lsrs	r3, r3, #7
 8006eb0:	61bb      	str	r3, [r7, #24]
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	2b7f      	cmp	r3, #127	; 0x7f
 8006eb6:	d8f0      	bhi.n	8006e9a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	1c5a      	adds	r2, r3, #1
 8006ebc:	61fa      	str	r2, [r7, #28]
 8006ebe:	69ba      	ldr	r2, [r7, #24]
 8006ec0:	b2d2      	uxtb	r2, r2
 8006ec2:	701a      	strb	r2, [r3, #0]
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006ec8:	2208      	movs	r2, #8
 8006eca:	68f9      	ldr	r1, [r7, #12]
 8006ecc:	6938      	ldr	r0, [r7, #16]
 8006ece:	f7fe fdd7 	bl	8005a80 <_SendPacket>
  RECORD_END();
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	f383 8811 	msr	BASEPRI, r3
}
 8006ed8:	bf00      	nop
 8006eda:	3720      	adds	r7, #32
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	20014294 	.word	0x20014294
 8006ee4:	20014264 	.word	0x20014264

08006ee8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b088      	sub	sp, #32
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ef0:	f3ef 8311 	mrs	r3, BASEPRI
 8006ef4:	f04f 0120 	mov.w	r1, #32
 8006ef8:	f381 8811 	msr	BASEPRI, r1
 8006efc:	617b      	str	r3, [r7, #20]
 8006efe:	4819      	ldr	r0, [pc, #100]	; (8006f64 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006f00:	f7fe fccb 	bl	800589a <_PreparePacket>
 8006f04:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006f0a:	4b17      	ldr	r3, [pc, #92]	; (8006f68 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	61fb      	str	r3, [r7, #28]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	61bb      	str	r3, [r7, #24]
 8006f1c:	e00b      	b.n	8006f36 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	b2da      	uxtb	r2, r3
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	1c59      	adds	r1, r3, #1
 8006f26:	61f9      	str	r1, [r7, #28]
 8006f28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f2c:	b2d2      	uxtb	r2, r2
 8006f2e:	701a      	strb	r2, [r3, #0]
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	09db      	lsrs	r3, r3, #7
 8006f34:	61bb      	str	r3, [r7, #24]
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	2b7f      	cmp	r3, #127	; 0x7f
 8006f3a:	d8f0      	bhi.n	8006f1e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	1c5a      	adds	r2, r3, #1
 8006f40:	61fa      	str	r2, [r7, #28]
 8006f42:	69ba      	ldr	r2, [r7, #24]
 8006f44:	b2d2      	uxtb	r2, r2
 8006f46:	701a      	strb	r2, [r3, #0]
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006f4c:	2204      	movs	r2, #4
 8006f4e:	68f9      	ldr	r1, [r7, #12]
 8006f50:	6938      	ldr	r0, [r7, #16]
 8006f52:	f7fe fd95 	bl	8005a80 <_SendPacket>
  RECORD_END();
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f383 8811 	msr	BASEPRI, r3
}
 8006f5c:	bf00      	nop
 8006f5e:	3720      	adds	r7, #32
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	20014294 	.word	0x20014294
 8006f68:	20014264 	.word	0x20014264

08006f6c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b088      	sub	sp, #32
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006f74:	f3ef 8311 	mrs	r3, BASEPRI
 8006f78:	f04f 0120 	mov.w	r1, #32
 8006f7c:	f381 8811 	msr	BASEPRI, r1
 8006f80:	617b      	str	r3, [r7, #20]
 8006f82:	4819      	ldr	r0, [pc, #100]	; (8006fe8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006f84:	f7fe fc89 	bl	800589a <_PreparePacket>
 8006f88:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006f8e:	4b17      	ldr	r3, [pc, #92]	; (8006fec <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	61fb      	str	r3, [r7, #28]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	61bb      	str	r3, [r7, #24]
 8006fa0:	e00b      	b.n	8006fba <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	b2da      	uxtb	r2, r3
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	1c59      	adds	r1, r3, #1
 8006faa:	61f9      	str	r1, [r7, #28]
 8006fac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fb0:	b2d2      	uxtb	r2, r2
 8006fb2:	701a      	strb	r2, [r3, #0]
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	09db      	lsrs	r3, r3, #7
 8006fb8:	61bb      	str	r3, [r7, #24]
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	2b7f      	cmp	r3, #127	; 0x7f
 8006fbe:	d8f0      	bhi.n	8006fa2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	1c5a      	adds	r2, r3, #1
 8006fc4:	61fa      	str	r2, [r7, #28]
 8006fc6:	69ba      	ldr	r2, [r7, #24]
 8006fc8:	b2d2      	uxtb	r2, r2
 8006fca:	701a      	strb	r2, [r3, #0]
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006fd0:	2206      	movs	r2, #6
 8006fd2:	68f9      	ldr	r1, [r7, #12]
 8006fd4:	6938      	ldr	r0, [r7, #16]
 8006fd6:	f7fe fd53 	bl	8005a80 <_SendPacket>
  RECORD_END();
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	f383 8811 	msr	BASEPRI, r3
}
 8006fe0:	bf00      	nop
 8006fe2:	3720      	adds	r7, #32
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	20014294 	.word	0x20014294
 8006fec:	20014264 	.word	0x20014264

08006ff0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b08a      	sub	sp, #40	; 0x28
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006ffa:	f3ef 8311 	mrs	r3, BASEPRI
 8006ffe:	f04f 0120 	mov.w	r1, #32
 8007002:	f381 8811 	msr	BASEPRI, r1
 8007006:	617b      	str	r3, [r7, #20]
 8007008:	4827      	ldr	r0, [pc, #156]	; (80070a8 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800700a:	f7fe fc46 	bl	800589a <_PreparePacket>
 800700e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007014:	4b25      	ldr	r3, [pc, #148]	; (80070ac <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	1ad3      	subs	r3, r2, r3
 800701c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	627b      	str	r3, [r7, #36]	; 0x24
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	623b      	str	r3, [r7, #32]
 8007026:	e00b      	b.n	8007040 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007028:	6a3b      	ldr	r3, [r7, #32]
 800702a:	b2da      	uxtb	r2, r3
 800702c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702e:	1c59      	adds	r1, r3, #1
 8007030:	6279      	str	r1, [r7, #36]	; 0x24
 8007032:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007036:	b2d2      	uxtb	r2, r2
 8007038:	701a      	strb	r2, [r3, #0]
 800703a:	6a3b      	ldr	r3, [r7, #32]
 800703c:	09db      	lsrs	r3, r3, #7
 800703e:	623b      	str	r3, [r7, #32]
 8007040:	6a3b      	ldr	r3, [r7, #32]
 8007042:	2b7f      	cmp	r3, #127	; 0x7f
 8007044:	d8f0      	bhi.n	8007028 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8007046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007048:	1c5a      	adds	r2, r3, #1
 800704a:	627a      	str	r2, [r7, #36]	; 0x24
 800704c:	6a3a      	ldr	r2, [r7, #32]
 800704e:	b2d2      	uxtb	r2, r2
 8007050:	701a      	strb	r2, [r3, #0]
 8007052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007054:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	61fb      	str	r3, [r7, #28]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	61bb      	str	r3, [r7, #24]
 800705e:	e00b      	b.n	8007078 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	b2da      	uxtb	r2, r3
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	1c59      	adds	r1, r3, #1
 8007068:	61f9      	str	r1, [r7, #28]
 800706a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800706e:	b2d2      	uxtb	r2, r2
 8007070:	701a      	strb	r2, [r3, #0]
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	09db      	lsrs	r3, r3, #7
 8007076:	61bb      	str	r3, [r7, #24]
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	2b7f      	cmp	r3, #127	; 0x7f
 800707c:	d8f0      	bhi.n	8007060 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	1c5a      	adds	r2, r3, #1
 8007082:	61fa      	str	r2, [r7, #28]
 8007084:	69ba      	ldr	r2, [r7, #24]
 8007086:	b2d2      	uxtb	r2, r2
 8007088:	701a      	strb	r2, [r3, #0]
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800708e:	2207      	movs	r2, #7
 8007090:	68f9      	ldr	r1, [r7, #12]
 8007092:	6938      	ldr	r0, [r7, #16]
 8007094:	f7fe fcf4 	bl	8005a80 <_SendPacket>
  RECORD_END();
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	f383 8811 	msr	BASEPRI, r3
}
 800709e:	bf00      	nop
 80070a0:	3728      	adds	r7, #40	; 0x28
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	20014294 	.word	0x20014294
 80070ac:	20014264 	.word	0x20014264

080070b0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80070b8:	4b04      	ldr	r3, [pc, #16]	; (80070cc <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	1ad3      	subs	r3, r2, r3
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr
 80070cc:	20014264 	.word	0x20014264

080070d0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b08c      	sub	sp, #48	; 0x30
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	4603      	mov	r3, r0
 80070d8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80070da:	4b3b      	ldr	r3, [pc, #236]	; (80071c8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d06d      	beq.n	80071be <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80070e2:	4b39      	ldr	r3, [pc, #228]	; (80071c8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80070e8:	2300      	movs	r3, #0
 80070ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80070ec:	e008      	b.n	8007100 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80070ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80070f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d007      	beq.n	800710a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80070fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fc:	3301      	adds	r3, #1
 80070fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8007100:	79fb      	ldrb	r3, [r7, #7]
 8007102:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007104:	429a      	cmp	r2, r3
 8007106:	d3f2      	bcc.n	80070ee <SEGGER_SYSVIEW_SendModule+0x1e>
 8007108:	e000      	b.n	800710c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800710a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800710c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710e:	2b00      	cmp	r3, #0
 8007110:	d055      	beq.n	80071be <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007112:	f3ef 8311 	mrs	r3, BASEPRI
 8007116:	f04f 0120 	mov.w	r1, #32
 800711a:	f381 8811 	msr	BASEPRI, r1
 800711e:	617b      	str	r3, [r7, #20]
 8007120:	482a      	ldr	r0, [pc, #168]	; (80071cc <SEGGER_SYSVIEW_SendModule+0xfc>)
 8007122:	f7fe fbba 	bl	800589a <_PreparePacket>
 8007126:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	627b      	str	r3, [r7, #36]	; 0x24
 8007130:	79fb      	ldrb	r3, [r7, #7]
 8007132:	623b      	str	r3, [r7, #32]
 8007134:	e00b      	b.n	800714e <SEGGER_SYSVIEW_SendModule+0x7e>
 8007136:	6a3b      	ldr	r3, [r7, #32]
 8007138:	b2da      	uxtb	r2, r3
 800713a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713c:	1c59      	adds	r1, r3, #1
 800713e:	6279      	str	r1, [r7, #36]	; 0x24
 8007140:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007144:	b2d2      	uxtb	r2, r2
 8007146:	701a      	strb	r2, [r3, #0]
 8007148:	6a3b      	ldr	r3, [r7, #32]
 800714a:	09db      	lsrs	r3, r3, #7
 800714c:	623b      	str	r3, [r7, #32]
 800714e:	6a3b      	ldr	r3, [r7, #32]
 8007150:	2b7f      	cmp	r3, #127	; 0x7f
 8007152:	d8f0      	bhi.n	8007136 <SEGGER_SYSVIEW_SendModule+0x66>
 8007154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007156:	1c5a      	adds	r2, r3, #1
 8007158:	627a      	str	r2, [r7, #36]	; 0x24
 800715a:	6a3a      	ldr	r2, [r7, #32]
 800715c:	b2d2      	uxtb	r2, r2
 800715e:	701a      	strb	r2, [r3, #0]
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007162:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	61fb      	str	r3, [r7, #28]
 8007168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	61bb      	str	r3, [r7, #24]
 800716e:	e00b      	b.n	8007188 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	b2da      	uxtb	r2, r3
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	1c59      	adds	r1, r3, #1
 8007178:	61f9      	str	r1, [r7, #28]
 800717a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800717e:	b2d2      	uxtb	r2, r2
 8007180:	701a      	strb	r2, [r3, #0]
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	09db      	lsrs	r3, r3, #7
 8007186:	61bb      	str	r3, [r7, #24]
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	2b7f      	cmp	r3, #127	; 0x7f
 800718c:	d8f0      	bhi.n	8007170 <SEGGER_SYSVIEW_SendModule+0xa0>
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	1c5a      	adds	r2, r3, #1
 8007192:	61fa      	str	r2, [r7, #28]
 8007194:	69ba      	ldr	r2, [r7, #24]
 8007196:	b2d2      	uxtb	r2, r2
 8007198:	701a      	strb	r2, [r3, #0]
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800719e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2280      	movs	r2, #128	; 0x80
 80071a4:	4619      	mov	r1, r3
 80071a6:	68f8      	ldr	r0, [r7, #12]
 80071a8:	f7fe fb2a 	bl	8005800 <_EncodeStr>
 80071ac:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80071ae:	2216      	movs	r2, #22
 80071b0:	68f9      	ldr	r1, [r7, #12]
 80071b2:	6938      	ldr	r0, [r7, #16]
 80071b4:	f7fe fc64 	bl	8005a80 <_SendPacket>
      RECORD_END();
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80071be:	bf00      	nop
 80071c0:	3730      	adds	r7, #48	; 0x30
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	2001428c 	.word	0x2001428c
 80071cc:	20014294 	.word	0x20014294

080071d0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80071d6:	4b0c      	ldr	r3, [pc, #48]	; (8007208 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00f      	beq.n	80071fe <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80071de:	4b0a      	ldr	r3, [pc, #40]	; (8007208 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d002      	beq.n	80071f2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1f2      	bne.n	80071e4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80071fe:	bf00      	nop
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	2001428c 	.word	0x2001428c

0800720c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800720c:	b580      	push	{r7, lr}
 800720e:	b086      	sub	sp, #24
 8007210:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007212:	f3ef 8311 	mrs	r3, BASEPRI
 8007216:	f04f 0120 	mov.w	r1, #32
 800721a:	f381 8811 	msr	BASEPRI, r1
 800721e:	60fb      	str	r3, [r7, #12]
 8007220:	4817      	ldr	r0, [pc, #92]	; (8007280 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007222:	f7fe fb3a 	bl	800589a <_PreparePacket>
 8007226:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	617b      	str	r3, [r7, #20]
 8007230:	4b14      	ldr	r3, [pc, #80]	; (8007284 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	613b      	str	r3, [r7, #16]
 8007236:	e00b      	b.n	8007250 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	b2da      	uxtb	r2, r3
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	1c59      	adds	r1, r3, #1
 8007240:	6179      	str	r1, [r7, #20]
 8007242:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007246:	b2d2      	uxtb	r2, r2
 8007248:	701a      	strb	r2, [r3, #0]
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	09db      	lsrs	r3, r3, #7
 800724e:	613b      	str	r3, [r7, #16]
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	2b7f      	cmp	r3, #127	; 0x7f
 8007254:	d8f0      	bhi.n	8007238 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	1c5a      	adds	r2, r3, #1
 800725a:	617a      	str	r2, [r7, #20]
 800725c:	693a      	ldr	r2, [r7, #16]
 800725e:	b2d2      	uxtb	r2, r2
 8007260:	701a      	strb	r2, [r3, #0]
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007266:	221b      	movs	r2, #27
 8007268:	6879      	ldr	r1, [r7, #4]
 800726a:	68b8      	ldr	r0, [r7, #8]
 800726c:	f7fe fc08 	bl	8005a80 <_SendPacket>
  RECORD_END();
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f383 8811 	msr	BASEPRI, r3
}
 8007276:	bf00      	nop
 8007278:	3718      	adds	r7, #24
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	20014294 	.word	0x20014294
 8007284:	20014290 	.word	0x20014290

08007288 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007288:	b40f      	push	{r0, r1, r2, r3}
 800728a:	b580      	push	{r7, lr}
 800728c:	b082      	sub	sp, #8
 800728e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007290:	f107 0314 	add.w	r3, r7, #20
 8007294:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8007296:	1d3b      	adds	r3, r7, #4
 8007298:	461a      	mov	r2, r3
 800729a:	2100      	movs	r1, #0
 800729c:	6938      	ldr	r0, [r7, #16]
 800729e:	f7fe fe79 	bl	8005f94 <_VPrintTarget>
  va_end(ParamList);
}
 80072a2:	bf00      	nop
 80072a4:	3708      	adds	r7, #8
 80072a6:	46bd      	mov	sp, r7
 80072a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072ac:	b004      	add	sp, #16
 80072ae:	4770      	bx	lr

080072b0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b08a      	sub	sp, #40	; 0x28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80072b8:	f3ef 8311 	mrs	r3, BASEPRI
 80072bc:	f04f 0120 	mov.w	r1, #32
 80072c0:	f381 8811 	msr	BASEPRI, r1
 80072c4:	617b      	str	r3, [r7, #20]
 80072c6:	4827      	ldr	r0, [pc, #156]	; (8007364 <SEGGER_SYSVIEW_Warn+0xb4>)
 80072c8:	f7fe fae7 	bl	800589a <_PreparePacket>
 80072cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80072ce:	2280      	movs	r2, #128	; 0x80
 80072d0:	6879      	ldr	r1, [r7, #4]
 80072d2:	6938      	ldr	r0, [r7, #16]
 80072d4:	f7fe fa94 	bl	8005800 <_EncodeStr>
 80072d8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	627b      	str	r3, [r7, #36]	; 0x24
 80072de:	2301      	movs	r3, #1
 80072e0:	623b      	str	r3, [r7, #32]
 80072e2:	e00b      	b.n	80072fc <SEGGER_SYSVIEW_Warn+0x4c>
 80072e4:	6a3b      	ldr	r3, [r7, #32]
 80072e6:	b2da      	uxtb	r2, r3
 80072e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ea:	1c59      	adds	r1, r3, #1
 80072ec:	6279      	str	r1, [r7, #36]	; 0x24
 80072ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072f2:	b2d2      	uxtb	r2, r2
 80072f4:	701a      	strb	r2, [r3, #0]
 80072f6:	6a3b      	ldr	r3, [r7, #32]
 80072f8:	09db      	lsrs	r3, r3, #7
 80072fa:	623b      	str	r3, [r7, #32]
 80072fc:	6a3b      	ldr	r3, [r7, #32]
 80072fe:	2b7f      	cmp	r3, #127	; 0x7f
 8007300:	d8f0      	bhi.n	80072e4 <SEGGER_SYSVIEW_Warn+0x34>
 8007302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007304:	1c5a      	adds	r2, r3, #1
 8007306:	627a      	str	r2, [r7, #36]	; 0x24
 8007308:	6a3a      	ldr	r2, [r7, #32]
 800730a:	b2d2      	uxtb	r2, r2
 800730c:	701a      	strb	r2, [r3, #0]
 800730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007310:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	61fb      	str	r3, [r7, #28]
 8007316:	2300      	movs	r3, #0
 8007318:	61bb      	str	r3, [r7, #24]
 800731a:	e00b      	b.n	8007334 <SEGGER_SYSVIEW_Warn+0x84>
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	b2da      	uxtb	r2, r3
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	1c59      	adds	r1, r3, #1
 8007324:	61f9      	str	r1, [r7, #28]
 8007326:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800732a:	b2d2      	uxtb	r2, r2
 800732c:	701a      	strb	r2, [r3, #0]
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	09db      	lsrs	r3, r3, #7
 8007332:	61bb      	str	r3, [r7, #24]
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	2b7f      	cmp	r3, #127	; 0x7f
 8007338:	d8f0      	bhi.n	800731c <SEGGER_SYSVIEW_Warn+0x6c>
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	1c5a      	adds	r2, r3, #1
 800733e:	61fa      	str	r2, [r7, #28]
 8007340:	69ba      	ldr	r2, [r7, #24]
 8007342:	b2d2      	uxtb	r2, r2
 8007344:	701a      	strb	r2, [r3, #0]
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800734a:	221a      	movs	r2, #26
 800734c:	68f9      	ldr	r1, [r7, #12]
 800734e:	6938      	ldr	r0, [r7, #16]
 8007350:	f7fe fb96 	bl	8005a80 <_SendPacket>
  RECORD_END();
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	f383 8811 	msr	BASEPRI, r3
}
 800735a:	bf00      	nop
 800735c:	3728      	adds	r7, #40	; 0x28
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	20014294 	.word	0x20014294

08007368 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007368:	b580      	push	{r7, lr}
 800736a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800736c:	4b13      	ldr	r3, [pc, #76]	; (80073bc <SEGGER_SYSVIEW_IsStarted+0x54>)
 800736e:	7e1b      	ldrb	r3, [r3, #24]
 8007370:	4619      	mov	r1, r3
 8007372:	4a13      	ldr	r2, [pc, #76]	; (80073c0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007374:	460b      	mov	r3, r1
 8007376:	005b      	lsls	r3, r3, #1
 8007378:	440b      	add	r3, r1
 800737a:	00db      	lsls	r3, r3, #3
 800737c:	4413      	add	r3, r2
 800737e:	336c      	adds	r3, #108	; 0x6c
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	4b0e      	ldr	r3, [pc, #56]	; (80073bc <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007384:	7e1b      	ldrb	r3, [r3, #24]
 8007386:	4618      	mov	r0, r3
 8007388:	490d      	ldr	r1, [pc, #52]	; (80073c0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800738a:	4603      	mov	r3, r0
 800738c:	005b      	lsls	r3, r3, #1
 800738e:	4403      	add	r3, r0
 8007390:	00db      	lsls	r3, r3, #3
 8007392:	440b      	add	r3, r1
 8007394:	3370      	adds	r3, #112	; 0x70
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	429a      	cmp	r2, r3
 800739a:	d00b      	beq.n	80073b4 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800739c:	4b07      	ldr	r3, [pc, #28]	; (80073bc <SEGGER_SYSVIEW_IsStarted+0x54>)
 800739e:	789b      	ldrb	r3, [r3, #2]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d107      	bne.n	80073b4 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80073a4:	4b05      	ldr	r3, [pc, #20]	; (80073bc <SEGGER_SYSVIEW_IsStarted+0x54>)
 80073a6:	2201      	movs	r2, #1
 80073a8:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80073aa:	f7fe fa83 	bl	80058b4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80073ae:	4b03      	ldr	r3, [pc, #12]	; (80073bc <SEGGER_SYSVIEW_IsStarted+0x54>)
 80073b0:	2200      	movs	r2, #0
 80073b2:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80073b4:	4b01      	ldr	r3, [pc, #4]	; (80073bc <SEGGER_SYSVIEW_IsStarted+0x54>)
 80073b6:	781b      	ldrb	r3, [r3, #0]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	20014264 	.word	0x20014264
 80073c0:	20014404 	.word	0x20014404

080073c4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80073c4:	b580      	push	{r7, lr}
 80073c6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80073c8:	4803      	ldr	r0, [pc, #12]	; (80073d8 <_cbSendSystemDesc+0x14>)
 80073ca:	f7ff fc5f 	bl	8006c8c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80073ce:	4803      	ldr	r0, [pc, #12]	; (80073dc <_cbSendSystemDesc+0x18>)
 80073d0:	f7ff fc5c 	bl	8006c8c <SEGGER_SYSVIEW_SendSysDesc>
}
 80073d4:	bf00      	nop
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	080075b0 	.word	0x080075b0
 80073dc:	080075f4 	.word	0x080075f4

080073e0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80073e0:	b580      	push	{r7, lr}
 80073e2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80073e4:	4b06      	ldr	r3, [pc, #24]	; (8007400 <SEGGER_SYSVIEW_Conf+0x20>)
 80073e6:	6818      	ldr	r0, [r3, #0]
 80073e8:	4b05      	ldr	r3, [pc, #20]	; (8007400 <SEGGER_SYSVIEW_Conf+0x20>)
 80073ea:	6819      	ldr	r1, [r3, #0]
 80073ec:	4b05      	ldr	r3, [pc, #20]	; (8007404 <SEGGER_SYSVIEW_Conf+0x24>)
 80073ee:	4a06      	ldr	r2, [pc, #24]	; (8007408 <SEGGER_SYSVIEW_Conf+0x28>)
 80073f0:	f7fe ffc8 	bl	8006384 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80073f4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80073f8:	f7ff f808 	bl	800640c <SEGGER_SYSVIEW_SetRAMBase>
}
 80073fc:	bf00      	nop
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	20000000 	.word	0x20000000
 8007404:	080073c5 	.word	0x080073c5
 8007408:	0800761c 	.word	0x0800761c

0800740c <__libc_init_array>:
 800740c:	b570      	push	{r4, r5, r6, lr}
 800740e:	4d0d      	ldr	r5, [pc, #52]	; (8007444 <__libc_init_array+0x38>)
 8007410:	4c0d      	ldr	r4, [pc, #52]	; (8007448 <__libc_init_array+0x3c>)
 8007412:	1b64      	subs	r4, r4, r5
 8007414:	10a4      	asrs	r4, r4, #2
 8007416:	2600      	movs	r6, #0
 8007418:	42a6      	cmp	r6, r4
 800741a:	d109      	bne.n	8007430 <__libc_init_array+0x24>
 800741c:	4d0b      	ldr	r5, [pc, #44]	; (800744c <__libc_init_array+0x40>)
 800741e:	4c0c      	ldr	r4, [pc, #48]	; (8007450 <__libc_init_array+0x44>)
 8007420:	f000 f83c 	bl	800749c <_init>
 8007424:	1b64      	subs	r4, r4, r5
 8007426:	10a4      	asrs	r4, r4, #2
 8007428:	2600      	movs	r6, #0
 800742a:	42a6      	cmp	r6, r4
 800742c:	d105      	bne.n	800743a <__libc_init_array+0x2e>
 800742e:	bd70      	pop	{r4, r5, r6, pc}
 8007430:	f855 3b04 	ldr.w	r3, [r5], #4
 8007434:	4798      	blx	r3
 8007436:	3601      	adds	r6, #1
 8007438:	e7ee      	b.n	8007418 <__libc_init_array+0xc>
 800743a:	f855 3b04 	ldr.w	r3, [r5], #4
 800743e:	4798      	blx	r3
 8007440:	3601      	adds	r6, #1
 8007442:	e7f2      	b.n	800742a <__libc_init_array+0x1e>
 8007444:	0800764c 	.word	0x0800764c
 8007448:	0800764c 	.word	0x0800764c
 800744c:	0800764c 	.word	0x0800764c
 8007450:	08007650 	.word	0x08007650

08007454 <memcmp>:
 8007454:	b530      	push	{r4, r5, lr}
 8007456:	3901      	subs	r1, #1
 8007458:	2400      	movs	r4, #0
 800745a:	42a2      	cmp	r2, r4
 800745c:	d101      	bne.n	8007462 <memcmp+0xe>
 800745e:	2000      	movs	r0, #0
 8007460:	e005      	b.n	800746e <memcmp+0x1a>
 8007462:	5d03      	ldrb	r3, [r0, r4]
 8007464:	3401      	adds	r4, #1
 8007466:	5d0d      	ldrb	r5, [r1, r4]
 8007468:	42ab      	cmp	r3, r5
 800746a:	d0f6      	beq.n	800745a <memcmp+0x6>
 800746c:	1b58      	subs	r0, r3, r5
 800746e:	bd30      	pop	{r4, r5, pc}

08007470 <memcpy>:
 8007470:	440a      	add	r2, r1
 8007472:	4291      	cmp	r1, r2
 8007474:	f100 33ff 	add.w	r3, r0, #4294967295
 8007478:	d100      	bne.n	800747c <memcpy+0xc>
 800747a:	4770      	bx	lr
 800747c:	b510      	push	{r4, lr}
 800747e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007482:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007486:	4291      	cmp	r1, r2
 8007488:	d1f9      	bne.n	800747e <memcpy+0xe>
 800748a:	bd10      	pop	{r4, pc}

0800748c <memset>:
 800748c:	4402      	add	r2, r0
 800748e:	4603      	mov	r3, r0
 8007490:	4293      	cmp	r3, r2
 8007492:	d100      	bne.n	8007496 <memset+0xa>
 8007494:	4770      	bx	lr
 8007496:	f803 1b01 	strb.w	r1, [r3], #1
 800749a:	e7f9      	b.n	8007490 <memset+0x4>

0800749c <_init>:
 800749c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800749e:	bf00      	nop
 80074a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074a2:	bc08      	pop	{r3}
 80074a4:	469e      	mov	lr, r3
 80074a6:	4770      	bx	lr

080074a8 <_fini>:
 80074a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074aa:	bf00      	nop
 80074ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ae:	bc08      	pop	{r3}
 80074b0:	469e      	mov	lr, r3
 80074b2:	4770      	bx	lr
