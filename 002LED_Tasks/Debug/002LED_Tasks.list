
002LED_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08007384  08007384  00017384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007514  08007514  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08007514  08007514  00017514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800751c  0800751c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800751c  0800751c  0001751c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007520  08007520  00017520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08007524  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00014490  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200144ac  200144ac  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019e63  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003430  00000000  00000000  00039eaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001348  00000000  00000000  0003d2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011c0  00000000  00000000  0003e628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023db2  00000000  00000000  0003f7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001580f  00000000  00000000  0006359a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8243  00000000  00000000  00078da9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00150fec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005070  00000000  00000000  00151040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800736c 	.word	0x0800736c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	0800736c 	.word	0x0800736c

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20014404 	.word	0x20014404

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96e 	b.w	8000558 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468c      	mov	ip, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	f040 8083 	bne.w	80003aa <__udivmoddi4+0x116>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4617      	mov	r7, r2
 80002a8:	d947      	bls.n	800033a <__udivmoddi4+0xa6>
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	b142      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	f1c2 0020 	rsb	r0, r2, #32
 80002b4:	fa24 f000 	lsr.w	r0, r4, r0
 80002b8:	4091      	lsls	r1, r2
 80002ba:	4097      	lsls	r7, r2
 80002bc:	ea40 0c01 	orr.w	ip, r0, r1
 80002c0:	4094      	lsls	r4, r2
 80002c2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fbbc f6f8 	udiv	r6, ip, r8
 80002cc:	fa1f fe87 	uxth.w	lr, r7
 80002d0:	fb08 c116 	mls	r1, r8, r6, ip
 80002d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d8:	fb06 f10e 	mul.w	r1, r6, lr
 80002dc:	4299      	cmp	r1, r3
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x60>
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002e6:	f080 8119 	bcs.w	800051c <__udivmoddi4+0x288>
 80002ea:	4299      	cmp	r1, r3
 80002ec:	f240 8116 	bls.w	800051c <__udivmoddi4+0x288>
 80002f0:	3e02      	subs	r6, #2
 80002f2:	443b      	add	r3, r7
 80002f4:	1a5b      	subs	r3, r3, r1
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000300:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000304:	fb00 fe0e 	mul.w	lr, r0, lr
 8000308:	45a6      	cmp	lr, r4
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x8c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	f080 8105 	bcs.w	8000520 <__udivmoddi4+0x28c>
 8000316:	45a6      	cmp	lr, r4
 8000318:	f240 8102 	bls.w	8000520 <__udivmoddi4+0x28c>
 800031c:	3802      	subs	r0, #2
 800031e:	443c      	add	r4, r7
 8000320:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000324:	eba4 040e 	sub.w	r4, r4, lr
 8000328:	2600      	movs	r6, #0
 800032a:	b11d      	cbz	r5, 8000334 <__udivmoddi4+0xa0>
 800032c:	40d4      	lsrs	r4, r2
 800032e:	2300      	movs	r3, #0
 8000330:	e9c5 4300 	strd	r4, r3, [r5]
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xaa>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f282 	clz	r2, r2
 8000342:	2a00      	cmp	r2, #0
 8000344:	d150      	bne.n	80003e8 <__udivmoddi4+0x154>
 8000346:	1bcb      	subs	r3, r1, r7
 8000348:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034c:	fa1f f887 	uxth.w	r8, r7
 8000350:	2601      	movs	r6, #1
 8000352:	fbb3 fcfe 	udiv	ip, r3, lr
 8000356:	0c21      	lsrs	r1, r4, #16
 8000358:	fb0e 331c 	mls	r3, lr, ip, r3
 800035c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000360:	fb08 f30c 	mul.w	r3, r8, ip
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xe4>
 8000368:	1879      	adds	r1, r7, r1
 800036a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0xe2>
 8000370:	428b      	cmp	r3, r1
 8000372:	f200 80e9 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 8000376:	4684      	mov	ip, r0
 8000378:	1ac9      	subs	r1, r1, r3
 800037a:	b2a3      	uxth	r3, r4
 800037c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000380:	fb0e 1110 	mls	r1, lr, r0, r1
 8000384:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000388:	fb08 f800 	mul.w	r8, r8, r0
 800038c:	45a0      	cmp	r8, r4
 800038e:	d907      	bls.n	80003a0 <__udivmoddi4+0x10c>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x10a>
 8000398:	45a0      	cmp	r8, r4
 800039a:	f200 80d9 	bhi.w	8000550 <__udivmoddi4+0x2bc>
 800039e:	4618      	mov	r0, r3
 80003a0:	eba4 0408 	sub.w	r4, r4, r8
 80003a4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a8:	e7bf      	b.n	800032a <__udivmoddi4+0x96>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0x12e>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80b1 	beq.w	8000516 <__udivmoddi4+0x282>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x1cc>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0x140>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80b8 	bhi.w	8000544 <__udivmoddi4+0x2b0>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0103 	sbc.w	r1, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	468c      	mov	ip, r1
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0a8      	beq.n	8000334 <__udivmoddi4+0xa0>
 80003e2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003e6:	e7a5      	b.n	8000334 <__udivmoddi4+0xa0>
 80003e8:	f1c2 0320 	rsb	r3, r2, #32
 80003ec:	fa20 f603 	lsr.w	r6, r0, r3
 80003f0:	4097      	lsls	r7, r2
 80003f2:	fa01 f002 	lsl.w	r0, r1, r2
 80003f6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fa:	40d9      	lsrs	r1, r3
 80003fc:	4330      	orrs	r0, r6
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	fbb1 f6fe 	udiv	r6, r1, lr
 8000404:	fa1f f887 	uxth.w	r8, r7
 8000408:	fb0e 1116 	mls	r1, lr, r6, r1
 800040c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000410:	fb06 f108 	mul.w	r1, r6, r8
 8000414:	4299      	cmp	r1, r3
 8000416:	fa04 f402 	lsl.w	r4, r4, r2
 800041a:	d909      	bls.n	8000430 <__udivmoddi4+0x19c>
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000422:	f080 808d 	bcs.w	8000540 <__udivmoddi4+0x2ac>
 8000426:	4299      	cmp	r1, r3
 8000428:	f240 808a 	bls.w	8000540 <__udivmoddi4+0x2ac>
 800042c:	3e02      	subs	r6, #2
 800042e:	443b      	add	r3, r7
 8000430:	1a5b      	subs	r3, r3, r1
 8000432:	b281      	uxth	r1, r0
 8000434:	fbb3 f0fe 	udiv	r0, r3, lr
 8000438:	fb0e 3310 	mls	r3, lr, r0, r3
 800043c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000440:	fb00 f308 	mul.w	r3, r0, r8
 8000444:	428b      	cmp	r3, r1
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x1c4>
 8000448:	1879      	adds	r1, r7, r1
 800044a:	f100 3cff 	add.w	ip, r0, #4294967295
 800044e:	d273      	bcs.n	8000538 <__udivmoddi4+0x2a4>
 8000450:	428b      	cmp	r3, r1
 8000452:	d971      	bls.n	8000538 <__udivmoddi4+0x2a4>
 8000454:	3802      	subs	r0, #2
 8000456:	4439      	add	r1, r7
 8000458:	1acb      	subs	r3, r1, r3
 800045a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800045e:	e778      	b.n	8000352 <__udivmoddi4+0xbe>
 8000460:	f1c6 0c20 	rsb	ip, r6, #32
 8000464:	fa03 f406 	lsl.w	r4, r3, r6
 8000468:	fa22 f30c 	lsr.w	r3, r2, ip
 800046c:	431c      	orrs	r4, r3
 800046e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800047a:	fa21 f10c 	lsr.w	r1, r1, ip
 800047e:	431f      	orrs	r7, r3
 8000480:	0c3b      	lsrs	r3, r7, #16
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fa1f f884 	uxth.w	r8, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000492:	fb09 fa08 	mul.w	sl, r9, r8
 8000496:	458a      	cmp	sl, r1
 8000498:	fa02 f206 	lsl.w	r2, r2, r6
 800049c:	fa00 f306 	lsl.w	r3, r0, r6
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x220>
 80004a2:	1861      	adds	r1, r4, r1
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	d248      	bcs.n	800053c <__udivmoddi4+0x2a8>
 80004aa:	458a      	cmp	sl, r1
 80004ac:	d946      	bls.n	800053c <__udivmoddi4+0x2a8>
 80004ae:	f1a9 0902 	sub.w	r9, r9, #2
 80004b2:	4421      	add	r1, r4
 80004b4:	eba1 010a 	sub.w	r1, r1, sl
 80004b8:	b2bf      	uxth	r7, r7
 80004ba:	fbb1 f0fe 	udiv	r0, r1, lr
 80004be:	fb0e 1110 	mls	r1, lr, r0, r1
 80004c2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004c6:	fb00 f808 	mul.w	r8, r0, r8
 80004ca:	45b8      	cmp	r8, r7
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x24a>
 80004ce:	19e7      	adds	r7, r4, r7
 80004d0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004d4:	d22e      	bcs.n	8000534 <__udivmoddi4+0x2a0>
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d92c      	bls.n	8000534 <__udivmoddi4+0x2a0>
 80004da:	3802      	subs	r0, #2
 80004dc:	4427      	add	r7, r4
 80004de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e2:	eba7 0708 	sub.w	r7, r7, r8
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	454f      	cmp	r7, r9
 80004ec:	46c6      	mov	lr, r8
 80004ee:	4649      	mov	r1, r9
 80004f0:	d31a      	bcc.n	8000528 <__udivmoddi4+0x294>
 80004f2:	d017      	beq.n	8000524 <__udivmoddi4+0x290>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x27a>
 80004f6:	ebb3 020e 	subs.w	r2, r3, lr
 80004fa:	eb67 0701 	sbc.w	r7, r7, r1
 80004fe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000502:	40f2      	lsrs	r2, r6
 8000504:	ea4c 0202 	orr.w	r2, ip, r2
 8000508:	40f7      	lsrs	r7, r6
 800050a:	e9c5 2700 	strd	r2, r7, [r5]
 800050e:	2600      	movs	r6, #0
 8000510:	4631      	mov	r1, r6
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	462e      	mov	r6, r5
 8000518:	4628      	mov	r0, r5
 800051a:	e70b      	b.n	8000334 <__udivmoddi4+0xa0>
 800051c:	4606      	mov	r6, r0
 800051e:	e6e9      	b.n	80002f4 <__udivmoddi4+0x60>
 8000520:	4618      	mov	r0, r3
 8000522:	e6fd      	b.n	8000320 <__udivmoddi4+0x8c>
 8000524:	4543      	cmp	r3, r8
 8000526:	d2e5      	bcs.n	80004f4 <__udivmoddi4+0x260>
 8000528:	ebb8 0e02 	subs.w	lr, r8, r2
 800052c:	eb69 0104 	sbc.w	r1, r9, r4
 8000530:	3801      	subs	r0, #1
 8000532:	e7df      	b.n	80004f4 <__udivmoddi4+0x260>
 8000534:	4608      	mov	r0, r1
 8000536:	e7d2      	b.n	80004de <__udivmoddi4+0x24a>
 8000538:	4660      	mov	r0, ip
 800053a:	e78d      	b.n	8000458 <__udivmoddi4+0x1c4>
 800053c:	4681      	mov	r9, r0
 800053e:	e7b9      	b.n	80004b4 <__udivmoddi4+0x220>
 8000540:	4666      	mov	r6, ip
 8000542:	e775      	b.n	8000430 <__udivmoddi4+0x19c>
 8000544:	4630      	mov	r0, r6
 8000546:	e74a      	b.n	80003de <__udivmoddi4+0x14a>
 8000548:	f1ac 0c02 	sub.w	ip, ip, #2
 800054c:	4439      	add	r1, r7
 800054e:	e713      	b.n	8000378 <__udivmoddi4+0xe4>
 8000550:	3802      	subs	r0, #2
 8000552:	443c      	add	r4, r7
 8000554:	e724      	b.n	80003a0 <__udivmoddi4+0x10c>
 8000556:	bf00      	nop

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08a      	sub	sp, #40	; 0x28
 8000560:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 fb6f 	bl	8000c44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f86d 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 f8d5 	bl	8000718 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //Enable the CYCCNT counter
  DWT_CTRL |= (1<<0);
 800056e:	4b2d      	ldr	r3, [pc, #180]	; (8000624 <main+0xc8>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a2c      	ldr	r2, [pc, #176]	; (8000624 <main+0xc8>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 800057a:	482b      	ldr	r0, [pc, #172]	; (8000628 <main+0xcc>)
 800057c:	f004 fc2c 	bl	8004dd8 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8000580:	f006 fe96 	bl	80072b0 <SEGGER_SYSVIEW_Conf>

 // SEGGER_SYSVIEW_Start();  //this line is there in segger_uart.c under segger->config->Rec

  status=xTaskCreate(led_green_handler, "led_green_task", 200, NULL, 2, &task1_handle);
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	9301      	str	r3, [sp, #4]
 800058a:	2302      	movs	r3, #2
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2300      	movs	r3, #0
 8000590:	22c8      	movs	r2, #200	; 0xc8
 8000592:	4926      	ldr	r1, [pc, #152]	; (800062c <main+0xd0>)
 8000594:	4826      	ldr	r0, [pc, #152]	; (8000630 <main+0xd4>)
 8000596:	f002 fbbb 	bl	8002d10 <xTaskCreate>
 800059a:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 800059c:	69fb      	ldr	r3, [r7, #28]
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d00a      	beq.n	80005b8 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005a6:	f383 8811 	msr	BASEPRI, r3
 80005aa:	f3bf 8f6f 	isb	sy
 80005ae:	f3bf 8f4f 	dsb	sy
 80005b2:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b4:	bf00      	nop
 80005b6:	e7fe      	b.n	80005b6 <main+0x5a>

  status=xTaskCreate(led_orange_handler, "led_orange_task", 200, NULL, 2, &task2_handle);
 80005b8:	f107 0308 	add.w	r3, r7, #8
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	2302      	movs	r3, #2
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2300      	movs	r3, #0
 80005c4:	22c8      	movs	r2, #200	; 0xc8
 80005c6:	491b      	ldr	r1, [pc, #108]	; (8000634 <main+0xd8>)
 80005c8:	481b      	ldr	r0, [pc, #108]	; (8000638 <main+0xdc>)
 80005ca:	f002 fba1 	bl	8002d10 <xTaskCreate>
 80005ce:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005d0:	69fb      	ldr	r3, [r7, #28]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d00a      	beq.n	80005ec <main+0x90>
        __asm volatile
 80005d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005da:	f383 8811 	msr	BASEPRI, r3
 80005de:	f3bf 8f6f 	isb	sy
 80005e2:	f3bf 8f4f 	dsb	sy
 80005e6:	617b      	str	r3, [r7, #20]
    }
 80005e8:	bf00      	nop
 80005ea:	e7fe      	b.n	80005ea <main+0x8e>

  status=xTaskCreate(led_red_handler, "led_red_task", 200, NULL, 2, &task3_handle);
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	9301      	str	r3, [sp, #4]
 80005f0:	2302      	movs	r3, #2
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	2300      	movs	r3, #0
 80005f6:	22c8      	movs	r2, #200	; 0xc8
 80005f8:	4910      	ldr	r1, [pc, #64]	; (800063c <main+0xe0>)
 80005fa:	4811      	ldr	r0, [pc, #68]	; (8000640 <main+0xe4>)
 80005fc:	f002 fb88 	bl	8002d10 <xTaskCreate>
 8000600:	61f8      	str	r0, [r7, #28]

   configASSERT(status == pdPASS);
 8000602:	69fb      	ldr	r3, [r7, #28]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d00a      	beq.n	800061e <main+0xc2>
        __asm volatile
 8000608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800060c:	f383 8811 	msr	BASEPRI, r3
 8000610:	f3bf 8f6f 	isb	sy
 8000614:	f3bf 8f4f 	dsb	sy
 8000618:	613b      	str	r3, [r7, #16]
    }
 800061a:	bf00      	nop
 800061c:	e7fe      	b.n	800061c <main+0xc0>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 800061e:	f002 fcdb 	bl	8002fd8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000622:	e7fe      	b.n	8000622 <main+0xc6>
 8000624:	e0001000 	.word	0xe0001000
 8000628:	0007a120 	.word	0x0007a120
 800062c:	08007384 	.word	0x08007384
 8000630:	080009d5 	.word	0x080009d5
 8000634:	08007394 	.word	0x08007394
 8000638:	08000a01 	.word	0x08000a01
 800063c:	080073a4 	.word	0x080073a4
 8000640:	08000a2d 	.word	0x08000a2d

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	; 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2230      	movs	r2, #48	; 0x30
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f006 fe82 	bl	800735c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	4b28      	ldr	r3, [pc, #160]	; (8000710 <SystemClock_Config+0xcc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	4a27      	ldr	r2, [pc, #156]	; (8000710 <SystemClock_Config+0xcc>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	; 0x40
 8000678:	4b25      	ldr	r3, [pc, #148]	; (8000710 <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b22      	ldr	r3, [pc, #136]	; (8000714 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a21      	ldr	r2, [pc, #132]	; (8000714 <SystemClock_Config+0xd0>)
 800068e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a0:	2302      	movs	r3, #2
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a4:	2301      	movs	r3, #1
 80006a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a8:	2310      	movs	r3, #16
 80006aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ac:	2302      	movs	r3, #2
 80006ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b0:	2300      	movs	r3, #0
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b4:	2308      	movs	r3, #8
 80006b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006b8:	23a8      	movs	r3, #168	; 0xa8
 80006ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006c0:	2307      	movs	r3, #7
 80006c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0320 	add.w	r3, r7, #32
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 fdd3 	bl	8001274 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d4:	f000 f9d2 	bl	8000a7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2302      	movs	r3, #2
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2105      	movs	r1, #5
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 f834 	bl	8001764 <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000702:	f000 f9bb 	bl	8000a7c <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3750      	adds	r7, #80	; 0x50
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08c      	sub	sp, #48	; 0x30
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
 8000732:	4ba2      	ldr	r3, [pc, #648]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4aa1      	ldr	r2, [pc, #644]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000738:	f043 0310 	orr.w	r3, r3, #16
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b9f      	ldr	r3, [pc, #636]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0310 	and.w	r3, r3, #16
 8000746:	61bb      	str	r3, [r7, #24]
 8000748:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
 800074e:	4b9b      	ldr	r3, [pc, #620]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a9a      	ldr	r2, [pc, #616]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b98      	ldr	r3, [pc, #608]	; (80009bc <MX_GPIO_Init+0x2a4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	4b94      	ldr	r3, [pc, #592]	; (80009bc <MX_GPIO_Init+0x2a4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a93      	ldr	r2, [pc, #588]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b91      	ldr	r3, [pc, #580]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	4b8d      	ldr	r3, [pc, #564]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a8c      	ldr	r2, [pc, #560]	; (80009bc <MX_GPIO_Init+0x2a4>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b8a      	ldr	r3, [pc, #552]	; (80009bc <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	4b86      	ldr	r3, [pc, #536]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a85      	ldr	r2, [pc, #532]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b83      	ldr	r3, [pc, #524]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b7f      	ldr	r3, [pc, #508]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a7e      	ldr	r2, [pc, #504]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80007c4:	f043 0308 	orr.w	r3, r3, #8
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b7c      	ldr	r3, [pc, #496]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0308 	and.w	r3, r3, #8
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2108      	movs	r1, #8
 80007da:	4879      	ldr	r0, [pc, #484]	; (80009c0 <MX_GPIO_Init+0x2a8>)
 80007dc:	f000 fd16 	bl	800120c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	2101      	movs	r1, #1
 80007e4:	4877      	ldr	r0, [pc, #476]	; (80009c4 <MX_GPIO_Init+0x2ac>)
 80007e6:	f000 fd11 	bl	800120c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007ea:	2200      	movs	r2, #0
 80007ec:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007f0:	4875      	ldr	r0, [pc, #468]	; (80009c8 <MX_GPIO_Init+0x2b0>)
 80007f2:	f000 fd0b 	bl	800120c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007f6:	2308      	movs	r3, #8
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	486c      	ldr	r0, [pc, #432]	; (80009c0 <MX_GPIO_Init+0x2a8>)
 800080e:	f000 fb61 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000812:	2301      	movs	r3, #1
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	4619      	mov	r1, r3
 8000828:	4866      	ldr	r0, [pc, #408]	; (80009c4 <MX_GPIO_Init+0x2ac>)
 800082a:	f000 fb53 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800082e:	2308      	movs	r3, #8
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800083e:	2305      	movs	r3, #5
 8000840:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	485e      	ldr	r0, [pc, #376]	; (80009c4 <MX_GPIO_Init+0x2ac>)
 800084a:	f000 fb43 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800084e:	2301      	movs	r3, #1
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000852:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	4619      	mov	r1, r3
 8000862:	485a      	ldr	r0, [pc, #360]	; (80009cc <MX_GPIO_Init+0x2b4>)
 8000864:	f000 fb36 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000868:	2310      	movs	r3, #16
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086c:	2302      	movs	r3, #2
 800086e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000878:	2306      	movs	r3, #6
 800087a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	4852      	ldr	r0, [pc, #328]	; (80009cc <MX_GPIO_Init+0x2b4>)
 8000884:	f000 fb26 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000888:	23e0      	movs	r3, #224	; 0xe0
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000898:	2305      	movs	r3, #5
 800089a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	484a      	ldr	r0, [pc, #296]	; (80009cc <MX_GPIO_Init+0x2b4>)
 80008a4:	f000 fb16 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008a8:	2304      	movs	r3, #4
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ac:	2300      	movs	r3, #0
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	4845      	ldr	r0, [pc, #276]	; (80009d0 <MX_GPIO_Init+0x2b8>)
 80008bc:	f000 fb0a 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d2:	2305      	movs	r3, #5
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	483c      	ldr	r0, [pc, #240]	; (80009d0 <MX_GPIO_Init+0x2b8>)
 80008de:	f000 faf9 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008e2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008e6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4833      	ldr	r0, [pc, #204]	; (80009c8 <MX_GPIO_Init+0x2b0>)
 80008fc:	f000 faea 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000900:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000912:	2306      	movs	r3, #6
 8000914:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4829      	ldr	r0, [pc, #164]	; (80009c4 <MX_GPIO_Init+0x2ac>)
 800091e:	f000 fad9 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000922:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	4825      	ldr	r0, [pc, #148]	; (80009cc <MX_GPIO_Init+0x2b4>)
 8000938:	f000 facc 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800093c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800094e:	230a      	movs	r3, #10
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	481c      	ldr	r0, [pc, #112]	; (80009cc <MX_GPIO_Init+0x2b4>)
 800095a:	f000 fabb 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800095e:	2320      	movs	r3, #32
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4815      	ldr	r0, [pc, #84]	; (80009c8 <MX_GPIO_Init+0x2b0>)
 8000972:	f000 faaf 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000976:	f44f 7310 	mov.w	r3, #576	; 0x240
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800097c:	2312      	movs	r3, #18
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000988:	2304      	movs	r3, #4
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	480f      	ldr	r0, [pc, #60]	; (80009d0 <MX_GPIO_Init+0x2b8>)
 8000994:	f000 fa9e 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000998:	2302      	movs	r3, #2
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800099c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4804      	ldr	r0, [pc, #16]	; (80009c0 <MX_GPIO_Init+0x2a8>)
 80009ae:	f000 fa91 	bl	8000ed4 <HAL_GPIO_Init>

}
 80009b2:	bf00      	nop
 80009b4:	3730      	adds	r7, #48	; 0x30
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40021000 	.word	0x40021000
 80009c4:	40020800 	.word	0x40020800
 80009c8:	40020c00 	.word	0x40020c00
 80009cc:	40020000 	.word	0x40020000
 80009d0:	40020400 	.word	0x40020400

080009d4 <led_green_handler>:

/* USER CODE BEGIN 4 */


static void led_green_handler(void *parameters)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	while(1)
	{

		SEGGER_SYSVIEW_PrintfTarget("Toggling green led");
 80009dc:	4806      	ldr	r0, [pc, #24]	; (80009f8 <led_green_handler+0x24>)
 80009de:	f006 fbbb 	bl	8007158 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 80009e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <led_green_handler+0x28>)
 80009e8:	f000 fc29 	bl	800123e <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80009ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009f0:	f000 f96a 	bl	8000cc8 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green led");
 80009f4:	e7f2      	b.n	80009dc <led_green_handler+0x8>
 80009f6:	bf00      	nop
 80009f8:	080073b4 	.word	0x080073b4
 80009fc:	40020c00 	.word	0x40020c00

08000a00 <led_orange_handler>:
	}
}

static void led_orange_handler(void *parameters)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange led");
 8000a08:	4806      	ldr	r0, [pc, #24]	; (8000a24 <led_orange_handler+0x24>)
 8000a0a:	f006 fba5 	bl	8007158 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000a0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <led_orange_handler+0x28>)
 8000a14:	f000 fc13 	bl	800123e <HAL_GPIO_TogglePin>
		HAL_Delay(800);
 8000a18:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000a1c:	f000 f954 	bl	8000cc8 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange led");
 8000a20:	e7f2      	b.n	8000a08 <led_orange_handler+0x8>
 8000a22:	bf00      	nop
 8000a24:	080073c8 	.word	0x080073c8
 8000a28:	40020c00 	.word	0x40020c00

08000a2c <led_red_handler>:
	}
}

static void led_red_handler(void *parameters)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red led");
 8000a34:	4806      	ldr	r0, [pc, #24]	; (8000a50 <led_red_handler+0x24>)
 8000a36:	f006 fb8f 	bl	8007158 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000a3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <led_red_handler+0x28>)
 8000a40:	f000 fbfd 	bl	800123e <HAL_GPIO_TogglePin>
		HAL_Delay(400);
 8000a44:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000a48:	f000 f93e 	bl	8000cc8 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red led");
 8000a4c:	e7f2      	b.n	8000a34 <led_red_handler+0x8>
 8000a4e:	bf00      	nop
 8000a50:	080073dc 	.word	0x080073dc
 8000a54:	40020c00 	.word	0x40020c00

08000a58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d101      	bne.n	8000a6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a6a:	f000 f90d 	bl	8000c88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40001000 	.word	0x40001000

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a80:	b672      	cpsid	i
}
 8000a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <Error_Handler+0x8>
	...

08000a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a96:	4a0f      	ldr	r2, [pc, #60]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	4a08      	ldr	r2, [pc, #32]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000ac6:	f003 fc27 	bl	8004318 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800

08000ad8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08c      	sub	sp, #48	; 0x30
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	2036      	movs	r0, #54	; 0x36
 8000aee:	f000 f9c7 	bl	8000e80 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000af2:	2036      	movs	r0, #54	; 0x36
 8000af4:	f000 f9e0 	bl	8000eb8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <HAL_InitTick+0xa4>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	4a1e      	ldr	r2, [pc, #120]	; (8000b7c <HAL_InitTick+0xa4>)
 8000b02:	f043 0310 	orr.w	r3, r3, #16
 8000b06:	6413      	str	r3, [r2, #64]	; 0x40
 8000b08:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <HAL_InitTick+0xa4>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0c:	f003 0310 	and.w	r3, r3, #16
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b14:	f107 0210 	add.w	r2, r7, #16
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4611      	mov	r1, r2
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f001 f808 	bl	8001b34 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b24:	f000 fff2 	bl	8001b0c <HAL_RCC_GetPCLK1Freq>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b30:	4a13      	ldr	r2, [pc, #76]	; (8000b80 <HAL_InitTick+0xa8>)
 8000b32:	fba2 2303 	umull	r2, r3, r2, r3
 8000b36:	0c9b      	lsrs	r3, r3, #18
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <HAL_InitTick+0xac>)
 8000b3e:	4a12      	ldr	r2, [pc, #72]	; (8000b88 <HAL_InitTick+0xb0>)
 8000b40:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <HAL_InitTick+0xac>)
 8000b44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b48:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b4a:	4a0e      	ldr	r2, [pc, #56]	; (8000b84 <HAL_InitTick+0xac>)
 8000b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b4e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <HAL_InitTick+0xac>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <HAL_InitTick+0xac>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000b5c:	4809      	ldr	r0, [pc, #36]	; (8000b84 <HAL_InitTick+0xac>)
 8000b5e:	f001 f81b 	bl	8001b98 <HAL_TIM_Base_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d104      	bne.n	8000b72 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000b68:	4806      	ldr	r0, [pc, #24]	; (8000b84 <HAL_InitTick+0xac>)
 8000b6a:	f001 f86f 	bl	8001c4c <HAL_TIM_Base_Start_IT>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	e000      	b.n	8000b74 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3730      	adds	r7, #48	; 0x30
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	431bde83 	.word	0x431bde83
 8000b84:	20014378 	.word	0x20014378
 8000b88:	40001000 	.word	0x40001000

08000b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <NMI_Handler+0x4>

08000b92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <HardFault_Handler+0x4>

08000b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <MemManage_Handler+0x4>

08000b9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <BusFault_Handler+0x4>

08000ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <UsageFault_Handler+0x4>

08000baa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bbc:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <TIM6_DAC_IRQHandler+0x10>)
 8000bbe:	f001 f8b5 	bl	8001d2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20014378 	.word	0x20014378

08000bcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <SystemInit+0x20>)
 8000bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bd6:	4a05      	ldr	r2, [pc, #20]	; (8000bec <SystemInit+0x20>)
 8000bd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bf4:	480d      	ldr	r0, [pc, #52]	; (8000c2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bf6:	490e      	ldr	r1, [pc, #56]	; (8000c30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bf8:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bfc:	e002      	b.n	8000c04 <LoopCopyDataInit>

08000bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c02:	3304      	adds	r3, #4

08000c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c08:	d3f9      	bcc.n	8000bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0a:	4a0b      	ldr	r2, [pc, #44]	; (8000c38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c0c:	4c0b      	ldr	r4, [pc, #44]	; (8000c3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c10:	e001      	b.n	8000c16 <LoopFillZerobss>

08000c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c14:	3204      	adds	r2, #4

08000c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c18:	d3fb      	bcc.n	8000c12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c1a:	f7ff ffd7 	bl	8000bcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c1e:	f006 fb5d 	bl	80072dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c22:	f7ff fc9b 	bl	800055c <main>
  bx  lr    
 8000c26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c30:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000c34:	08007524 	.word	0x08007524
  ldr r2, =_sbss
 8000c38:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000c3c:	200144ac 	.word	0x200144ac

08000c40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c40:	e7fe      	b.n	8000c40 <ADC_IRQHandler>
	...

08000c44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c48:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <HAL_Init+0x40>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	; (8000c84 <HAL_Init+0x40>)
 8000c4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c54:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <HAL_Init+0x40>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <HAL_Init+0x40>)
 8000c5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a07      	ldr	r2, [pc, #28]	; (8000c84 <HAL_Init+0x40>)
 8000c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c6c:	2003      	movs	r0, #3
 8000c6e:	f000 f8fc 	bl	8000e6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c72:	2000      	movs	r0, #0
 8000c74:	f7ff ff30 	bl	8000ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c78:	f7ff ff06 	bl	8000a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40023c00 	.word	0x40023c00

08000c88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_IncTick+0x20>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_IncTick+0x24>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4413      	add	r3, r2
 8000c98:	4a04      	ldr	r2, [pc, #16]	; (8000cac <HAL_IncTick+0x24>)
 8000c9a:	6013      	str	r3, [r2, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	20000008 	.word	0x20000008
 8000cac:	200143c0 	.word	0x200143c0

08000cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb4:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <HAL_GetTick+0x14>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	200143c0 	.word	0x200143c0

08000cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd0:	f7ff ffee 	bl	8000cb0 <HAL_GetTick>
 8000cd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce0:	d005      	beq.n	8000cee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <HAL_Delay+0x44>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4413      	add	r3, r2
 8000cec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cee:	bf00      	nop
 8000cf0:	f7ff ffde 	bl	8000cb0 <HAL_GetTick>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d8f7      	bhi.n	8000cf0 <HAL_Delay+0x28>
  {
  }
}
 8000d00:	bf00      	nop
 8000d02:	bf00      	nop
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000008 	.word	0x20000008

08000d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <__NVIC_SetPriorityGrouping+0x44>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d26:	68ba      	ldr	r2, [r7, #8]
 8000d28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d42:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <__NVIC_SetPriorityGrouping+0x44>)
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	60d3      	str	r3, [r2, #12]
}
 8000d48:	bf00      	nop
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <__NVIC_GetPriorityGrouping+0x18>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	0a1b      	lsrs	r3, r3, #8
 8000d62:	f003 0307 	and.w	r3, r3, #7
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	db0b      	blt.n	8000d9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	f003 021f 	and.w	r2, r3, #31
 8000d8c:	4907      	ldr	r1, [pc, #28]	; (8000dac <__NVIC_EnableIRQ+0x38>)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	095b      	lsrs	r3, r3, #5
 8000d94:	2001      	movs	r0, #1
 8000d96:	fa00 f202 	lsl.w	r2, r0, r2
 8000d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000e100 	.word	0xe000e100

08000db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	6039      	str	r1, [r7, #0]
 8000dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	db0a      	blt.n	8000dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	490c      	ldr	r1, [pc, #48]	; (8000dfc <__NVIC_SetPriority+0x4c>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	0112      	lsls	r2, r2, #4
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd8:	e00a      	b.n	8000df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4908      	ldr	r1, [pc, #32]	; (8000e00 <__NVIC_SetPriority+0x50>)
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	3b04      	subs	r3, #4
 8000de8:	0112      	lsls	r2, r2, #4
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	440b      	add	r3, r1
 8000dee:	761a      	strb	r2, [r3, #24]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000e100 	.word	0xe000e100
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b089      	sub	sp, #36	; 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f1c3 0307 	rsb	r3, r3, #7
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	bf28      	it	cs
 8000e22:	2304      	movcs	r3, #4
 8000e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	2b06      	cmp	r3, #6
 8000e2c:	d902      	bls.n	8000e34 <NVIC_EncodePriority+0x30>
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3b03      	subs	r3, #3
 8000e32:	e000      	b.n	8000e36 <NVIC_EncodePriority+0x32>
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	f04f 32ff 	mov.w	r2, #4294967295
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43da      	mvns	r2, r3
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	401a      	ands	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	43d9      	mvns	r1, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	4313      	orrs	r3, r2
         );
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3724      	adds	r7, #36	; 0x24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff ff4c 	bl	8000d10 <__NVIC_SetPriorityGrouping>
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
 8000e8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e92:	f7ff ff61 	bl	8000d58 <__NVIC_GetPriorityGrouping>
 8000e96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	68b9      	ldr	r1, [r7, #8]
 8000e9c:	6978      	ldr	r0, [r7, #20]
 8000e9e:	f7ff ffb1 	bl	8000e04 <NVIC_EncodePriority>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff ff80 	bl	8000db0 <__NVIC_SetPriority>
}
 8000eb0:	bf00      	nop
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff ff54 	bl	8000d74 <__NVIC_EnableIRQ>
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b089      	sub	sp, #36	; 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
 8000eee:	e16b      	b.n	80011c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	f040 815a 	bne.w	80011c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f003 0303 	and.w	r3, r3, #3
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d005      	beq.n	8000f26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d130      	bne.n	8000f88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	2203      	movs	r2, #3
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	68da      	ldr	r2, [r3, #12]
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	091b      	lsrs	r3, r3, #4
 8000f72:	f003 0201 	and.w	r2, r3, #1
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b03      	cmp	r3, #3
 8000f92:	d017      	beq.n	8000fc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	689a      	ldr	r2, [r3, #8]
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d123      	bne.n	8001018 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	08da      	lsrs	r2, r3, #3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3208      	adds	r2, #8
 8000fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	f003 0307 	and.w	r3, r3, #7
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	220f      	movs	r2, #15
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	691a      	ldr	r2, [r3, #16]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	08da      	lsrs	r2, r3, #3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3208      	adds	r2, #8
 8001012:	69b9      	ldr	r1, [r7, #24]
 8001014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	2203      	movs	r2, #3
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 0203 	and.w	r2, r3, #3
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001054:	2b00      	cmp	r3, #0
 8001056:	f000 80b4 	beq.w	80011c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b60      	ldr	r3, [pc, #384]	; (80011e0 <HAL_GPIO_Init+0x30c>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	4a5f      	ldr	r2, [pc, #380]	; (80011e0 <HAL_GPIO_Init+0x30c>)
 8001064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001068:	6453      	str	r3, [r2, #68]	; 0x44
 800106a:	4b5d      	ldr	r3, [pc, #372]	; (80011e0 <HAL_GPIO_Init+0x30c>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001076:	4a5b      	ldr	r2, [pc, #364]	; (80011e4 <HAL_GPIO_Init+0x310>)
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	089b      	lsrs	r3, r3, #2
 800107c:	3302      	adds	r3, #2
 800107e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	220f      	movs	r2, #15
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a52      	ldr	r2, [pc, #328]	; (80011e8 <HAL_GPIO_Init+0x314>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d02b      	beq.n	80010fa <HAL_GPIO_Init+0x226>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a51      	ldr	r2, [pc, #324]	; (80011ec <HAL_GPIO_Init+0x318>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d025      	beq.n	80010f6 <HAL_GPIO_Init+0x222>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a50      	ldr	r2, [pc, #320]	; (80011f0 <HAL_GPIO_Init+0x31c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d01f      	beq.n	80010f2 <HAL_GPIO_Init+0x21e>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4f      	ldr	r2, [pc, #316]	; (80011f4 <HAL_GPIO_Init+0x320>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d019      	beq.n	80010ee <HAL_GPIO_Init+0x21a>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4e      	ldr	r2, [pc, #312]	; (80011f8 <HAL_GPIO_Init+0x324>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d013      	beq.n	80010ea <HAL_GPIO_Init+0x216>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4d      	ldr	r2, [pc, #308]	; (80011fc <HAL_GPIO_Init+0x328>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d00d      	beq.n	80010e6 <HAL_GPIO_Init+0x212>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a4c      	ldr	r2, [pc, #304]	; (8001200 <HAL_GPIO_Init+0x32c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d007      	beq.n	80010e2 <HAL_GPIO_Init+0x20e>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a4b      	ldr	r2, [pc, #300]	; (8001204 <HAL_GPIO_Init+0x330>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d101      	bne.n	80010de <HAL_GPIO_Init+0x20a>
 80010da:	2307      	movs	r3, #7
 80010dc:	e00e      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010de:	2308      	movs	r3, #8
 80010e0:	e00c      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010e2:	2306      	movs	r3, #6
 80010e4:	e00a      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010e6:	2305      	movs	r3, #5
 80010e8:	e008      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010ea:	2304      	movs	r3, #4
 80010ec:	e006      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010ee:	2303      	movs	r3, #3
 80010f0:	e004      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010f2:	2302      	movs	r3, #2
 80010f4:	e002      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010f6:	2301      	movs	r3, #1
 80010f8:	e000      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010fa:	2300      	movs	r3, #0
 80010fc:	69fa      	ldr	r2, [r7, #28]
 80010fe:	f002 0203 	and.w	r2, r2, #3
 8001102:	0092      	lsls	r2, r2, #2
 8001104:	4093      	lsls	r3, r2
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800110c:	4935      	ldr	r1, [pc, #212]	; (80011e4 <HAL_GPIO_Init+0x310>)
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	089b      	lsrs	r3, r3, #2
 8001112:	3302      	adds	r3, #2
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800111a:	4b3b      	ldr	r3, [pc, #236]	; (8001208 <HAL_GPIO_Init+0x334>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	43db      	mvns	r3, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4013      	ands	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800113e:	4a32      	ldr	r2, [pc, #200]	; (8001208 <HAL_GPIO_Init+0x334>)
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001144:	4b30      	ldr	r3, [pc, #192]	; (8001208 <HAL_GPIO_Init+0x334>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001168:	4a27      	ldr	r2, [pc, #156]	; (8001208 <HAL_GPIO_Init+0x334>)
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800116e:	4b26      	ldr	r3, [pc, #152]	; (8001208 <HAL_GPIO_Init+0x334>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	43db      	mvns	r3, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4013      	ands	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001192:	4a1d      	ldr	r2, [pc, #116]	; (8001208 <HAL_GPIO_Init+0x334>)
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001198:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <HAL_GPIO_Init+0x334>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011bc:	4a12      	ldr	r2, [pc, #72]	; (8001208 <HAL_GPIO_Init+0x334>)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3301      	adds	r3, #1
 80011c6:	61fb      	str	r3, [r7, #28]
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	2b0f      	cmp	r3, #15
 80011cc:	f67f ae90 	bls.w	8000ef0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	3724      	adds	r7, #36	; 0x24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40013800 	.word	0x40013800
 80011e8:	40020000 	.word	0x40020000
 80011ec:	40020400 	.word	0x40020400
 80011f0:	40020800 	.word	0x40020800
 80011f4:	40020c00 	.word	0x40020c00
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40021400 	.word	0x40021400
 8001200:	40021800 	.word	0x40021800
 8001204:	40021c00 	.word	0x40021c00
 8001208:	40013c00 	.word	0x40013c00

0800120c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]
 8001218:	4613      	mov	r3, r2
 800121a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800121c:	787b      	ldrb	r3, [r7, #1]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001222:	887a      	ldrh	r2, [r7, #2]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001228:	e003      	b.n	8001232 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800122a:	887b      	ldrh	r3, [r7, #2]
 800122c:	041a      	lsls	r2, r3, #16
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	619a      	str	r2, [r3, #24]
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800123e:	b480      	push	{r7}
 8001240:	b085      	sub	sp, #20
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
 8001246:	460b      	mov	r3, r1
 8001248:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001250:	887a      	ldrh	r2, [r7, #2]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4013      	ands	r3, r2
 8001256:	041a      	lsls	r2, r3, #16
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	43d9      	mvns	r1, r3
 800125c:	887b      	ldrh	r3, [r7, #2]
 800125e:	400b      	ands	r3, r1
 8001260:	431a      	orrs	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	619a      	str	r2, [r3, #24]
}
 8001266:	bf00      	nop
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e264      	b.n	8001750 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b00      	cmp	r3, #0
 8001290:	d075      	beq.n	800137e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001292:	4ba3      	ldr	r3, [pc, #652]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 030c 	and.w	r3, r3, #12
 800129a:	2b04      	cmp	r3, #4
 800129c:	d00c      	beq.n	80012b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800129e:	4ba0      	ldr	r3, [pc, #640]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012a6:	2b08      	cmp	r3, #8
 80012a8:	d112      	bne.n	80012d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012aa:	4b9d      	ldr	r3, [pc, #628]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012b6:	d10b      	bne.n	80012d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b8:	4b99      	ldr	r3, [pc, #612]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d05b      	beq.n	800137c <HAL_RCC_OscConfig+0x108>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d157      	bne.n	800137c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e23f      	b.n	8001750 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d8:	d106      	bne.n	80012e8 <HAL_RCC_OscConfig+0x74>
 80012da:	4b91      	ldr	r3, [pc, #580]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a90      	ldr	r2, [pc, #576]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 80012e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	e01d      	b.n	8001324 <HAL_RCC_OscConfig+0xb0>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012f0:	d10c      	bne.n	800130c <HAL_RCC_OscConfig+0x98>
 80012f2:	4b8b      	ldr	r3, [pc, #556]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a8a      	ldr	r2, [pc, #552]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 80012f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	4b88      	ldr	r3, [pc, #544]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a87      	ldr	r2, [pc, #540]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 8001304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	e00b      	b.n	8001324 <HAL_RCC_OscConfig+0xb0>
 800130c:	4b84      	ldr	r3, [pc, #528]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a83      	ldr	r2, [pc, #524]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 8001312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001316:	6013      	str	r3, [r2, #0]
 8001318:	4b81      	ldr	r3, [pc, #516]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a80      	ldr	r2, [pc, #512]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 800131e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001322:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d013      	beq.n	8001354 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132c:	f7ff fcc0 	bl	8000cb0 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001334:	f7ff fcbc 	bl	8000cb0 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b64      	cmp	r3, #100	; 0x64
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e204      	b.n	8001750 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001346:	4b76      	ldr	r3, [pc, #472]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0f0      	beq.n	8001334 <HAL_RCC_OscConfig+0xc0>
 8001352:	e014      	b.n	800137e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001354:	f7ff fcac 	bl	8000cb0 <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800135c:	f7ff fca8 	bl	8000cb0 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b64      	cmp	r3, #100	; 0x64
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e1f0      	b.n	8001750 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800136e:	4b6c      	ldr	r3, [pc, #432]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f0      	bne.n	800135c <HAL_RCC_OscConfig+0xe8>
 800137a:	e000      	b.n	800137e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800137c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d063      	beq.n	8001452 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800138a:	4b65      	ldr	r3, [pc, #404]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	2b00      	cmp	r3, #0
 8001394:	d00b      	beq.n	80013ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001396:	4b62      	ldr	r3, [pc, #392]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800139e:	2b08      	cmp	r3, #8
 80013a0:	d11c      	bne.n	80013dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013a2:	4b5f      	ldr	r3, [pc, #380]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d116      	bne.n	80013dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ae:	4b5c      	ldr	r3, [pc, #368]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d005      	beq.n	80013c6 <HAL_RCC_OscConfig+0x152>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d001      	beq.n	80013c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e1c4      	b.n	8001750 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c6:	4b56      	ldr	r3, [pc, #344]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	4952      	ldr	r1, [pc, #328]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013da:	e03a      	b.n	8001452 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d020      	beq.n	8001426 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013e4:	4b4f      	ldr	r3, [pc, #316]	; (8001524 <HAL_RCC_OscConfig+0x2b0>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ea:	f7ff fc61 	bl	8000cb0 <HAL_GetTick>
 80013ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f0:	e008      	b.n	8001404 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f2:	f7ff fc5d 	bl	8000cb0 <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e1a5      	b.n	8001750 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001404:	4b46      	ldr	r3, [pc, #280]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d0f0      	beq.n	80013f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001410:	4b43      	ldr	r3, [pc, #268]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	4940      	ldr	r1, [pc, #256]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 8001420:	4313      	orrs	r3, r2
 8001422:	600b      	str	r3, [r1, #0]
 8001424:	e015      	b.n	8001452 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001426:	4b3f      	ldr	r3, [pc, #252]	; (8001524 <HAL_RCC_OscConfig+0x2b0>)
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142c:	f7ff fc40 	bl	8000cb0 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001434:	f7ff fc3c 	bl	8000cb0 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e184      	b.n	8001750 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001446:	4b36      	ldr	r3, [pc, #216]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f0      	bne.n	8001434 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	2b00      	cmp	r3, #0
 800145c:	d030      	beq.n	80014c0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d016      	beq.n	8001494 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001466:	4b30      	ldr	r3, [pc, #192]	; (8001528 <HAL_RCC_OscConfig+0x2b4>)
 8001468:	2201      	movs	r2, #1
 800146a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800146c:	f7ff fc20 	bl	8000cb0 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001474:	f7ff fc1c 	bl	8000cb0 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e164      	b.n	8001750 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001486:	4b26      	ldr	r3, [pc, #152]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 8001488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d0f0      	beq.n	8001474 <HAL_RCC_OscConfig+0x200>
 8001492:	e015      	b.n	80014c0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001494:	4b24      	ldr	r3, [pc, #144]	; (8001528 <HAL_RCC_OscConfig+0x2b4>)
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149a:	f7ff fc09 	bl	8000cb0 <HAL_GetTick>
 800149e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a0:	e008      	b.n	80014b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a2:	f7ff fc05 	bl	8000cb0 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e14d      	b.n	8001750 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b4:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 80014b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1f0      	bne.n	80014a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0304 	and.w	r3, r3, #4
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f000 80a0 	beq.w	800160e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ce:	2300      	movs	r3, #0
 80014d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014d2:	4b13      	ldr	r3, [pc, #76]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10f      	bne.n	80014fe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	4a0e      	ldr	r2, [pc, #56]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 80014e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ec:	6413      	str	r3, [r2, #64]	; 0x40
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014fa:	2301      	movs	r3, #1
 80014fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <HAL_RCC_OscConfig+0x2b8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001506:	2b00      	cmp	r3, #0
 8001508:	d121      	bne.n	800154e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800150a:	4b08      	ldr	r3, [pc, #32]	; (800152c <HAL_RCC_OscConfig+0x2b8>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a07      	ldr	r2, [pc, #28]	; (800152c <HAL_RCC_OscConfig+0x2b8>)
 8001510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001514:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001516:	f7ff fbcb 	bl	8000cb0 <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151c:	e011      	b.n	8001542 <HAL_RCC_OscConfig+0x2ce>
 800151e:	bf00      	nop
 8001520:	40023800 	.word	0x40023800
 8001524:	42470000 	.word	0x42470000
 8001528:	42470e80 	.word	0x42470e80
 800152c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001530:	f7ff fbbe 	bl	8000cb0 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e106      	b.n	8001750 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001542:	4b85      	ldr	r3, [pc, #532]	; (8001758 <HAL_RCC_OscConfig+0x4e4>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0f0      	beq.n	8001530 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d106      	bne.n	8001564 <HAL_RCC_OscConfig+0x2f0>
 8001556:	4b81      	ldr	r3, [pc, #516]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 8001558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155a:	4a80      	ldr	r2, [pc, #512]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6713      	str	r3, [r2, #112]	; 0x70
 8001562:	e01c      	b.n	800159e <HAL_RCC_OscConfig+0x32a>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	2b05      	cmp	r3, #5
 800156a:	d10c      	bne.n	8001586 <HAL_RCC_OscConfig+0x312>
 800156c:	4b7b      	ldr	r3, [pc, #492]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 800156e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001570:	4a7a      	ldr	r2, [pc, #488]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 8001572:	f043 0304 	orr.w	r3, r3, #4
 8001576:	6713      	str	r3, [r2, #112]	; 0x70
 8001578:	4b78      	ldr	r3, [pc, #480]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 800157a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157c:	4a77      	ldr	r2, [pc, #476]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	6713      	str	r3, [r2, #112]	; 0x70
 8001584:	e00b      	b.n	800159e <HAL_RCC_OscConfig+0x32a>
 8001586:	4b75      	ldr	r3, [pc, #468]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 8001588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158a:	4a74      	ldr	r2, [pc, #464]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 800158c:	f023 0301 	bic.w	r3, r3, #1
 8001590:	6713      	str	r3, [r2, #112]	; 0x70
 8001592:	4b72      	ldr	r3, [pc, #456]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 8001594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001596:	4a71      	ldr	r2, [pc, #452]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 8001598:	f023 0304 	bic.w	r3, r3, #4
 800159c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d015      	beq.n	80015d2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a6:	f7ff fb83 	bl	8000cb0 <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ac:	e00a      	b.n	80015c4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ae:	f7ff fb7f 	bl	8000cb0 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015bc:	4293      	cmp	r3, r2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e0c5      	b.n	8001750 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c4:	4b65      	ldr	r3, [pc, #404]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 80015c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0ee      	beq.n	80015ae <HAL_RCC_OscConfig+0x33a>
 80015d0:	e014      	b.n	80015fc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d2:	f7ff fb6d 	bl	8000cb0 <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d8:	e00a      	b.n	80015f0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015da:	f7ff fb69 	bl	8000cb0 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e0af      	b.n	8001750 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f0:	4b5a      	ldr	r3, [pc, #360]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 80015f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1ee      	bne.n	80015da <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015fc:	7dfb      	ldrb	r3, [r7, #23]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d105      	bne.n	800160e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001602:	4b56      	ldr	r3, [pc, #344]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	4a55      	ldr	r2, [pc, #340]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 8001608:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800160c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 809b 	beq.w	800174e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001618:	4b50      	ldr	r3, [pc, #320]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 030c 	and.w	r3, r3, #12
 8001620:	2b08      	cmp	r3, #8
 8001622:	d05c      	beq.n	80016de <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	2b02      	cmp	r3, #2
 800162a:	d141      	bne.n	80016b0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800162c:	4b4c      	ldr	r3, [pc, #304]	; (8001760 <HAL_RCC_OscConfig+0x4ec>)
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001632:	f7ff fb3d 	bl	8000cb0 <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800163a:	f7ff fb39 	bl	8000cb0 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e081      	b.n	8001750 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800164c:	4b43      	ldr	r3, [pc, #268]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1f0      	bne.n	800163a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	69da      	ldr	r2, [r3, #28]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	431a      	orrs	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001666:	019b      	lsls	r3, r3, #6
 8001668:	431a      	orrs	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166e:	085b      	lsrs	r3, r3, #1
 8001670:	3b01      	subs	r3, #1
 8001672:	041b      	lsls	r3, r3, #16
 8001674:	431a      	orrs	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167a:	061b      	lsls	r3, r3, #24
 800167c:	4937      	ldr	r1, [pc, #220]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 800167e:	4313      	orrs	r3, r2
 8001680:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001682:	4b37      	ldr	r3, [pc, #220]	; (8001760 <HAL_RCC_OscConfig+0x4ec>)
 8001684:	2201      	movs	r2, #1
 8001686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff fb12 	bl	8000cb0 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001690:	f7ff fb0e 	bl	8000cb0 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e056      	b.n	8001750 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a2:	4b2e      	ldr	r3, [pc, #184]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0f0      	beq.n	8001690 <HAL_RCC_OscConfig+0x41c>
 80016ae:	e04e      	b.n	800174e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016b0:	4b2b      	ldr	r3, [pc, #172]	; (8001760 <HAL_RCC_OscConfig+0x4ec>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b6:	f7ff fafb 	bl	8000cb0 <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016be:	f7ff faf7 	bl	8000cb0 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e03f      	b.n	8001750 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d0:	4b22      	ldr	r3, [pc, #136]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1f0      	bne.n	80016be <HAL_RCC_OscConfig+0x44a>
 80016dc:	e037      	b.n	800174e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d101      	bne.n	80016ea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e032      	b.n	8001750 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016ea:	4b1c      	ldr	r3, [pc, #112]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d028      	beq.n	800174a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001702:	429a      	cmp	r2, r3
 8001704:	d121      	bne.n	800174a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001710:	429a      	cmp	r2, r3
 8001712:	d11a      	bne.n	800174a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001714:	68fa      	ldr	r2, [r7, #12]
 8001716:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800171a:	4013      	ands	r3, r2
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001720:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001722:	4293      	cmp	r3, r2
 8001724:	d111      	bne.n	800174a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001730:	085b      	lsrs	r3, r3, #1
 8001732:	3b01      	subs	r3, #1
 8001734:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001736:	429a      	cmp	r2, r3
 8001738:	d107      	bne.n	800174a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001744:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001746:	429a      	cmp	r2, r3
 8001748:	d001      	beq.n	800174e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e000      	b.n	8001750 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40007000 	.word	0x40007000
 800175c:	40023800 	.word	0x40023800
 8001760:	42470060 	.word	0x42470060

08001764 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e0cc      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001778:	4b68      	ldr	r3, [pc, #416]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d90c      	bls.n	80017a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001786:	4b65      	ldr	r3, [pc, #404]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800178e:	4b63      	ldr	r3, [pc, #396]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	429a      	cmp	r2, r3
 800179a:	d001      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e0b8      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d020      	beq.n	80017ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d005      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017b8:	4b59      	ldr	r3, [pc, #356]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	4a58      	ldr	r2, [pc, #352]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0308 	and.w	r3, r3, #8
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d005      	beq.n	80017dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017d0:	4b53      	ldr	r3, [pc, #332]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	4a52      	ldr	r2, [pc, #328]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017dc:	4b50      	ldr	r3, [pc, #320]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	494d      	ldr	r1, [pc, #308]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d044      	beq.n	8001884 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d107      	bne.n	8001812 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001802:	4b47      	ldr	r3, [pc, #284]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d119      	bne.n	8001842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e07f      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d003      	beq.n	8001822 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800181e:	2b03      	cmp	r3, #3
 8001820:	d107      	bne.n	8001832 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001822:	4b3f      	ldr	r3, [pc, #252]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d109      	bne.n	8001842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e06f      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001832:	4b3b      	ldr	r3, [pc, #236]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e067      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001842:	4b37      	ldr	r3, [pc, #220]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f023 0203 	bic.w	r2, r3, #3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	4934      	ldr	r1, [pc, #208]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	4313      	orrs	r3, r2
 8001852:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001854:	f7ff fa2c 	bl	8000cb0 <HAL_GetTick>
 8001858:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185a:	e00a      	b.n	8001872 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800185c:	f7ff fa28 	bl	8000cb0 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	f241 3288 	movw	r2, #5000	; 0x1388
 800186a:	4293      	cmp	r3, r2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e04f      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001872:	4b2b      	ldr	r3, [pc, #172]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 020c 	and.w	r2, r3, #12
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	429a      	cmp	r2, r3
 8001882:	d1eb      	bne.n	800185c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001884:	4b25      	ldr	r3, [pc, #148]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d20c      	bcs.n	80018ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001892:	4b22      	ldr	r3, [pc, #136]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189a:	4b20      	ldr	r3, [pc, #128]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d001      	beq.n	80018ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e032      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d008      	beq.n	80018ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018b8:	4b19      	ldr	r3, [pc, #100]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	4916      	ldr	r1, [pc, #88]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0308 	and.w	r3, r3, #8
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d009      	beq.n	80018ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018d6:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	490e      	ldr	r1, [pc, #56]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ea:	f000 f821 	bl	8001930 <HAL_RCC_GetSysClockFreq>
 80018ee:	4602      	mov	r2, r0
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	091b      	lsrs	r3, r3, #4
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	490a      	ldr	r1, [pc, #40]	; (8001924 <HAL_RCC_ClockConfig+0x1c0>)
 80018fc:	5ccb      	ldrb	r3, [r1, r3]
 80018fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001902:	4a09      	ldr	r2, [pc, #36]	; (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 8001904:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <HAL_RCC_ClockConfig+0x1c8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff f8e4 	bl	8000ad8 <HAL_InitTick>

  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40023c00 	.word	0x40023c00
 8001920:	40023800 	.word	0x40023800
 8001924:	080074d4 	.word	0x080074d4
 8001928:	20000000 	.word	0x20000000
 800192c:	20000004 	.word	0x20000004

08001930 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001930:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001934:	b084      	sub	sp, #16
 8001936:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001938:	2300      	movs	r3, #0
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	2300      	movs	r3, #0
 8001942:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001944:	2300      	movs	r3, #0
 8001946:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001948:	4b67      	ldr	r3, [pc, #412]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 030c 	and.w	r3, r3, #12
 8001950:	2b08      	cmp	r3, #8
 8001952:	d00d      	beq.n	8001970 <HAL_RCC_GetSysClockFreq+0x40>
 8001954:	2b08      	cmp	r3, #8
 8001956:	f200 80bd 	bhi.w	8001ad4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800195a:	2b00      	cmp	r3, #0
 800195c:	d002      	beq.n	8001964 <HAL_RCC_GetSysClockFreq+0x34>
 800195e:	2b04      	cmp	r3, #4
 8001960:	d003      	beq.n	800196a <HAL_RCC_GetSysClockFreq+0x3a>
 8001962:	e0b7      	b.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001964:	4b61      	ldr	r3, [pc, #388]	; (8001aec <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001966:	60bb      	str	r3, [r7, #8]
       break;
 8001968:	e0b7      	b.n	8001ada <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800196a:	4b61      	ldr	r3, [pc, #388]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800196c:	60bb      	str	r3, [r7, #8]
      break;
 800196e:	e0b4      	b.n	8001ada <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001970:	4b5d      	ldr	r3, [pc, #372]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001978:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800197a:	4b5b      	ldr	r3, [pc, #364]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d04d      	beq.n	8001a22 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001986:	4b58      	ldr	r3, [pc, #352]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	099b      	lsrs	r3, r3, #6
 800198c:	461a      	mov	r2, r3
 800198e:	f04f 0300 	mov.w	r3, #0
 8001992:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001996:	f04f 0100 	mov.w	r1, #0
 800199a:	ea02 0800 	and.w	r8, r2, r0
 800199e:	ea03 0901 	and.w	r9, r3, r1
 80019a2:	4640      	mov	r0, r8
 80019a4:	4649      	mov	r1, r9
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	014b      	lsls	r3, r1, #5
 80019b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019b4:	0142      	lsls	r2, r0, #5
 80019b6:	4610      	mov	r0, r2
 80019b8:	4619      	mov	r1, r3
 80019ba:	ebb0 0008 	subs.w	r0, r0, r8
 80019be:	eb61 0109 	sbc.w	r1, r1, r9
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	f04f 0300 	mov.w	r3, #0
 80019ca:	018b      	lsls	r3, r1, #6
 80019cc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019d0:	0182      	lsls	r2, r0, #6
 80019d2:	1a12      	subs	r2, r2, r0
 80019d4:	eb63 0301 	sbc.w	r3, r3, r1
 80019d8:	f04f 0000 	mov.w	r0, #0
 80019dc:	f04f 0100 	mov.w	r1, #0
 80019e0:	00d9      	lsls	r1, r3, #3
 80019e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019e6:	00d0      	lsls	r0, r2, #3
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	eb12 0208 	adds.w	r2, r2, r8
 80019f0:	eb43 0309 	adc.w	r3, r3, r9
 80019f4:	f04f 0000 	mov.w	r0, #0
 80019f8:	f04f 0100 	mov.w	r1, #0
 80019fc:	0259      	lsls	r1, r3, #9
 80019fe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001a02:	0250      	lsls	r0, r2, #9
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	f7fe fc26 	bl	8000264 <__aeabi_uldivmod>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	e04a      	b.n	8001ab8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a22:	4b31      	ldr	r3, [pc, #196]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	099b      	lsrs	r3, r3, #6
 8001a28:	461a      	mov	r2, r3
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a32:	f04f 0100 	mov.w	r1, #0
 8001a36:	ea02 0400 	and.w	r4, r2, r0
 8001a3a:	ea03 0501 	and.w	r5, r3, r1
 8001a3e:	4620      	mov	r0, r4
 8001a40:	4629      	mov	r1, r5
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	f04f 0300 	mov.w	r3, #0
 8001a4a:	014b      	lsls	r3, r1, #5
 8001a4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a50:	0142      	lsls	r2, r0, #5
 8001a52:	4610      	mov	r0, r2
 8001a54:	4619      	mov	r1, r3
 8001a56:	1b00      	subs	r0, r0, r4
 8001a58:	eb61 0105 	sbc.w	r1, r1, r5
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	f04f 0300 	mov.w	r3, #0
 8001a64:	018b      	lsls	r3, r1, #6
 8001a66:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a6a:	0182      	lsls	r2, r0, #6
 8001a6c:	1a12      	subs	r2, r2, r0
 8001a6e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a72:	f04f 0000 	mov.w	r0, #0
 8001a76:	f04f 0100 	mov.w	r1, #0
 8001a7a:	00d9      	lsls	r1, r3, #3
 8001a7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a80:	00d0      	lsls	r0, r2, #3
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	1912      	adds	r2, r2, r4
 8001a88:	eb45 0303 	adc.w	r3, r5, r3
 8001a8c:	f04f 0000 	mov.w	r0, #0
 8001a90:	f04f 0100 	mov.w	r1, #0
 8001a94:	0299      	lsls	r1, r3, #10
 8001a96:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a9a:	0290      	lsls	r0, r2, #10
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	f04f 0300 	mov.w	r3, #0
 8001aac:	f7fe fbda 	bl	8000264 <__aeabi_uldivmod>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	0c1b      	lsrs	r3, r3, #16
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad0:	60bb      	str	r3, [r7, #8]
      break;
 8001ad2:	e002      	b.n	8001ada <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001ad6:	60bb      	str	r3, [r7, #8]
      break;
 8001ad8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ada:	68bb      	ldr	r3, [r7, #8]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	00f42400 	.word	0x00f42400
 8001af0:	007a1200 	.word	0x007a1200

08001af4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af8:	4b03      	ldr	r3, [pc, #12]	; (8001b08 <HAL_RCC_GetHCLKFreq+0x14>)
 8001afa:	681b      	ldr	r3, [r3, #0]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	20000000 	.word	0x20000000

08001b0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b10:	f7ff fff0 	bl	8001af4 <HAL_RCC_GetHCLKFreq>
 8001b14:	4602      	mov	r2, r0
 8001b16:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	0a9b      	lsrs	r3, r3, #10
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	4903      	ldr	r1, [pc, #12]	; (8001b30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b22:	5ccb      	ldrb	r3, [r1, r3]
 8001b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	080074e4 	.word	0x080074e4

08001b34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	220f      	movs	r2, #15
 8001b42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_RCC_GetClockConfig+0x5c>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 0203 	and.w	r2, r3, #3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b50:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <HAL_RCC_GetClockConfig+0x5c>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <HAL_RCC_GetClockConfig+0x5c>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b68:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <HAL_RCC_GetClockConfig+0x5c>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	08db      	lsrs	r3, r3, #3
 8001b6e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b76:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <HAL_RCC_GetClockConfig+0x60>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0207 	and.w	r2, r3, #7
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	601a      	str	r2, [r3, #0]
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40023c00 	.word	0x40023c00

08001b98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e041      	b.n	8001c2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d106      	bne.n	8001bc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f839 	bl	8001c36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3304      	adds	r3, #4
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	f000 f9d8 	bl	8001f8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
	...

08001c4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d001      	beq.n	8001c64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e04e      	b.n	8001d02 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2202      	movs	r2, #2
 8001c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68da      	ldr	r2, [r3, #12]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 0201 	orr.w	r2, r2, #1
 8001c7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a23      	ldr	r2, [pc, #140]	; (8001d10 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d022      	beq.n	8001ccc <HAL_TIM_Base_Start_IT+0x80>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c8e:	d01d      	beq.n	8001ccc <HAL_TIM_Base_Start_IT+0x80>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a1f      	ldr	r2, [pc, #124]	; (8001d14 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d018      	beq.n	8001ccc <HAL_TIM_Base_Start_IT+0x80>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a1e      	ldr	r2, [pc, #120]	; (8001d18 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d013      	beq.n	8001ccc <HAL_TIM_Base_Start_IT+0x80>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a1c      	ldr	r2, [pc, #112]	; (8001d1c <HAL_TIM_Base_Start_IT+0xd0>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d00e      	beq.n	8001ccc <HAL_TIM_Base_Start_IT+0x80>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a1b      	ldr	r2, [pc, #108]	; (8001d20 <HAL_TIM_Base_Start_IT+0xd4>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d009      	beq.n	8001ccc <HAL_TIM_Base_Start_IT+0x80>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a19      	ldr	r2, [pc, #100]	; (8001d24 <HAL_TIM_Base_Start_IT+0xd8>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d004      	beq.n	8001ccc <HAL_TIM_Base_Start_IT+0x80>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a18      	ldr	r2, [pc, #96]	; (8001d28 <HAL_TIM_Base_Start_IT+0xdc>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d111      	bne.n	8001cf0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2b06      	cmp	r3, #6
 8001cdc:	d010      	beq.n	8001d00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f042 0201 	orr.w	r2, r2, #1
 8001cec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cee:	e007      	b.n	8001d00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0201 	orr.w	r2, r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40010000 	.word	0x40010000
 8001d14:	40000400 	.word	0x40000400
 8001d18:	40000800 	.word	0x40000800
 8001d1c:	40000c00 	.word	0x40000c00
 8001d20:	40010400 	.word	0x40010400
 8001d24:	40014000 	.word	0x40014000
 8001d28:	40001800 	.word	0x40001800

08001d2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d122      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d11b      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f06f 0202 	mvn.w	r2, #2
 8001d58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f8ee 	bl	8001f50 <HAL_TIM_IC_CaptureCallback>
 8001d74:	e005      	b.n	8001d82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f8e0 	bl	8001f3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f8f1 	bl	8001f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	f003 0304 	and.w	r3, r3, #4
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d122      	bne.n	8001ddc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	2b04      	cmp	r3, #4
 8001da2:	d11b      	bne.n	8001ddc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f06f 0204 	mvn.w	r2, #4
 8001dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2202      	movs	r2, #2
 8001db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f8c4 	bl	8001f50 <HAL_TIM_IC_CaptureCallback>
 8001dc8:	e005      	b.n	8001dd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f8b6 	bl	8001f3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 f8c7 	bl	8001f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b08      	cmp	r3, #8
 8001de8:	d122      	bne.n	8001e30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	d11b      	bne.n	8001e30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f06f 0208 	mvn.w	r2, #8
 8001e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2204      	movs	r2, #4
 8001e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f89a 	bl	8001f50 <HAL_TIM_IC_CaptureCallback>
 8001e1c:	e005      	b.n	8001e2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f88c 	bl	8001f3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f89d 	bl	8001f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	f003 0310 	and.w	r3, r3, #16
 8001e3a:	2b10      	cmp	r3, #16
 8001e3c:	d122      	bne.n	8001e84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	f003 0310 	and.w	r3, r3, #16
 8001e48:	2b10      	cmp	r3, #16
 8001e4a:	d11b      	bne.n	8001e84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f06f 0210 	mvn.w	r2, #16
 8001e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2208      	movs	r2, #8
 8001e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f870 	bl	8001f50 <HAL_TIM_IC_CaptureCallback>
 8001e70:	e005      	b.n	8001e7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f862 	bl	8001f3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 f873 	bl	8001f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d10e      	bne.n	8001eb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d107      	bne.n	8001eb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f06f 0201 	mvn.w	r2, #1
 8001ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7fe fdd4 	bl	8000a58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eba:	2b80      	cmp	r3, #128	; 0x80
 8001ebc:	d10e      	bne.n	8001edc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec8:	2b80      	cmp	r3, #128	; 0x80
 8001eca:	d107      	bne.n	8001edc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f902 	bl	80020e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee6:	2b40      	cmp	r3, #64	; 0x40
 8001ee8:	d10e      	bne.n	8001f08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef4:	2b40      	cmp	r3, #64	; 0x40
 8001ef6:	d107      	bne.n	8001f08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f838 	bl	8001f78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	f003 0320 	and.w	r3, r3, #32
 8001f12:	2b20      	cmp	r3, #32
 8001f14:	d10e      	bne.n	8001f34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f003 0320 	and.w	r3, r3, #32
 8001f20:	2b20      	cmp	r3, #32
 8001f22:	d107      	bne.n	8001f34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0220 	mvn.w	r2, #32
 8001f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f8cc 	bl	80020cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a40      	ldr	r2, [pc, #256]	; (80020a0 <TIM_Base_SetConfig+0x114>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d013      	beq.n	8001fcc <TIM_Base_SetConfig+0x40>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001faa:	d00f      	beq.n	8001fcc <TIM_Base_SetConfig+0x40>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a3d      	ldr	r2, [pc, #244]	; (80020a4 <TIM_Base_SetConfig+0x118>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d00b      	beq.n	8001fcc <TIM_Base_SetConfig+0x40>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a3c      	ldr	r2, [pc, #240]	; (80020a8 <TIM_Base_SetConfig+0x11c>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d007      	beq.n	8001fcc <TIM_Base_SetConfig+0x40>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a3b      	ldr	r2, [pc, #236]	; (80020ac <TIM_Base_SetConfig+0x120>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d003      	beq.n	8001fcc <TIM_Base_SetConfig+0x40>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a3a      	ldr	r2, [pc, #232]	; (80020b0 <TIM_Base_SetConfig+0x124>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d108      	bne.n	8001fde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a2f      	ldr	r2, [pc, #188]	; (80020a0 <TIM_Base_SetConfig+0x114>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d02b      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fec:	d027      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a2c      	ldr	r2, [pc, #176]	; (80020a4 <TIM_Base_SetConfig+0x118>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d023      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a2b      	ldr	r2, [pc, #172]	; (80020a8 <TIM_Base_SetConfig+0x11c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d01f      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a2a      	ldr	r2, [pc, #168]	; (80020ac <TIM_Base_SetConfig+0x120>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d01b      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a29      	ldr	r2, [pc, #164]	; (80020b0 <TIM_Base_SetConfig+0x124>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d017      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a28      	ldr	r2, [pc, #160]	; (80020b4 <TIM_Base_SetConfig+0x128>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d013      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a27      	ldr	r2, [pc, #156]	; (80020b8 <TIM_Base_SetConfig+0x12c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d00f      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a26      	ldr	r2, [pc, #152]	; (80020bc <TIM_Base_SetConfig+0x130>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d00b      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a25      	ldr	r2, [pc, #148]	; (80020c0 <TIM_Base_SetConfig+0x134>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d007      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a24      	ldr	r2, [pc, #144]	; (80020c4 <TIM_Base_SetConfig+0x138>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d003      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a23      	ldr	r2, [pc, #140]	; (80020c8 <TIM_Base_SetConfig+0x13c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d108      	bne.n	8002050 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	4313      	orrs	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	4313      	orrs	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a0a      	ldr	r2, [pc, #40]	; (80020a0 <TIM_Base_SetConfig+0x114>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d003      	beq.n	8002084 <TIM_Base_SetConfig+0xf8>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a0c      	ldr	r2, [pc, #48]	; (80020b0 <TIM_Base_SetConfig+0x124>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d103      	bne.n	800208c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	691a      	ldr	r2, [r3, #16]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	615a      	str	r2, [r3, #20]
}
 8002092:	bf00      	nop
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	40010000 	.word	0x40010000
 80020a4:	40000400 	.word	0x40000400
 80020a8:	40000800 	.word	0x40000800
 80020ac:	40000c00 	.word	0x40000c00
 80020b0:	40010400 	.word	0x40010400
 80020b4:	40014000 	.word	0x40014000
 80020b8:	40014400 	.word	0x40014400
 80020bc:	40014800 	.word	0x40014800
 80020c0:	40001800 	.word	0x40001800
 80020c4:	40001c00 	.word	0x40001c00
 80020c8:	40002000 	.word	0x40002000

080020cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f103 0208 	add.w	r2, r3, #8
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f04f 32ff 	mov.w	r2, #4294967295
 800210c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f103 0208 	add.w	r2, r3, #8
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f103 0208 	add.w	r2, r3, #8
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800214e:	b480      	push	{r7}
 8002150:	b085      	sub	sp, #20
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
 8002156:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	1c5a      	adds	r2, r3, #1
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	601a      	str	r2, [r3, #0]
}
 800218a:	bf00      	nop
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002196:	b480      	push	{r7}
 8002198:	b085      	sub	sp, #20
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ac:	d103      	bne.n	80021b6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	e00c      	b.n	80021d0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3308      	adds	r3, #8
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	e002      	b.n	80021c4 <vListInsert+0x2e>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d2f6      	bcs.n	80021be <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	1c5a      	adds	r2, r3, #1
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	601a      	str	r2, [r3, #0]
}
 80021fc:	bf00      	nop
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6892      	ldr	r2, [r2, #8]
 800221e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6852      	ldr	r2, [r2, #4]
 8002228:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	429a      	cmp	r2, r3
 8002232:	d103      	bne.n	800223c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	1e5a      	subs	r2, r3, #1
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
}
 8002250:	4618      	mov	r0, r3
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10a      	bne.n	8002286 <xQueueGenericReset+0x2a>
        __asm volatile
 8002270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002274:	f383 8811 	msr	BASEPRI, r3
 8002278:	f3bf 8f6f 	isb	sy
 800227c:	f3bf 8f4f 	dsb	sy
 8002280:	60bb      	str	r3, [r7, #8]
    }
 8002282:	bf00      	nop
 8002284:	e7fe      	b.n	8002284 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002286:	f002 f8c5 	bl	8004414 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002292:	68f9      	ldr	r1, [r7, #12]
 8002294:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002296:	fb01 f303 	mul.w	r3, r1, r3
 800229a:	441a      	add	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b6:	3b01      	subs	r3, #1
 80022b8:	68f9      	ldr	r1, [r7, #12]
 80022ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022bc:	fb01 f303 	mul.w	r3, r1, r3
 80022c0:	441a      	add	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	22ff      	movs	r2, #255	; 0xff
 80022ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	22ff      	movs	r2, #255	; 0xff
 80022d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d114      	bne.n	8002306 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d01a      	beq.n	800231a <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	3310      	adds	r3, #16
 80022e8:	4618      	mov	r0, r3
 80022ea:	f001 f91f 	bl	800352c <xTaskRemoveFromEventList>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d012      	beq.n	800231a <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80022f4:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <xQueueGenericReset+0xcc>)
 80022f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	f3bf 8f4f 	dsb	sy
 8002300:	f3bf 8f6f 	isb	sy
 8002304:	e009      	b.n	800231a <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	3310      	adds	r3, #16
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff fef2 	bl	80020f4 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	3324      	adds	r3, #36	; 0x24
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff feed 	bl	80020f4 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800231a:	f002 f8ab 	bl	8004474 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800231e:	2301      	movs	r3, #1
}
 8002320:	4618      	mov	r0, r3
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	e000ed04 	.word	0xe000ed04

0800232c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800232c:	b580      	push	{r7, lr}
 800232e:	b08c      	sub	sp, #48	; 0x30
 8002330:	af02      	add	r7, sp, #8
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	4613      	mov	r3, r2
 8002338:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10a      	bne.n	8002356 <xQueueGenericCreate+0x2a>
        __asm volatile
 8002340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002344:	f383 8811 	msr	BASEPRI, r3
 8002348:	f3bf 8f6f 	isb	sy
 800234c:	f3bf 8f4f 	dsb	sy
 8002350:	61bb      	str	r3, [r7, #24]
    }
 8002352:	bf00      	nop
 8002354:	e7fe      	b.n	8002354 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	fb02 f303 	mul.w	r3, r2, r3
 800235e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d006      	beq.n	8002374 <xQueueGenericCreate+0x48>
 8002366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	fbb2 f3f3 	udiv	r3, r2, r3
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	429a      	cmp	r2, r3
 8002372:	d101      	bne.n	8002378 <xQueueGenericCreate+0x4c>
 8002374:	2301      	movs	r3, #1
 8002376:	e000      	b.n	800237a <xQueueGenericCreate+0x4e>
 8002378:	2300      	movs	r3, #0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10a      	bne.n	8002394 <xQueueGenericCreate+0x68>
        __asm volatile
 800237e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002382:	f383 8811 	msr	BASEPRI, r3
 8002386:	f3bf 8f6f 	isb	sy
 800238a:	f3bf 8f4f 	dsb	sy
 800238e:	617b      	str	r3, [r7, #20]
    }
 8002390:	bf00      	nop
 8002392:	e7fe      	b.n	8002392 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800239a:	d90a      	bls.n	80023b2 <xQueueGenericCreate+0x86>
        __asm volatile
 800239c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a0:	f383 8811 	msr	BASEPRI, r3
 80023a4:	f3bf 8f6f 	isb	sy
 80023a8:	f3bf 8f4f 	dsb	sy
 80023ac:	613b      	str	r3, [r7, #16]
    }
 80023ae:	bf00      	nop
 80023b0:	e7fe      	b.n	80023b0 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	3350      	adds	r3, #80	; 0x50
 80023b6:	4618      	mov	r0, r3
 80023b8:	f002 f958 	bl	800466c <pvPortMalloc>
 80023bc:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80023be:	6a3b      	ldr	r3, [r7, #32]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00d      	beq.n	80023e0 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	3350      	adds	r3, #80	; 0x50
 80023cc:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023ce:	79fa      	ldrb	r2, [r7, #7]
 80023d0:	6a3b      	ldr	r3, [r7, #32]
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	4613      	mov	r3, r2
 80023d6:	69fa      	ldr	r2, [r7, #28]
 80023d8:	68b9      	ldr	r1, [r7, #8]
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f000 f805 	bl	80023ea <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80023e0:	6a3b      	ldr	r3, [r7, #32]
    }
 80023e2:	4618      	mov	r0, r3
 80023e4:	3728      	adds	r7, #40	; 0x28
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b084      	sub	sp, #16
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	60f8      	str	r0, [r7, #12]
 80023f2:	60b9      	str	r1, [r7, #8]
 80023f4:	607a      	str	r2, [r7, #4]
 80023f6:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d103      	bne.n	8002406 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	e002      	b.n	800240c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002418:	2101      	movs	r1, #1
 800241a:	69b8      	ldr	r0, [r7, #24]
 800241c:	f7ff ff1e 	bl	800225c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	78fa      	ldrb	r2, [r7, #3]
 8002424:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002428:	78fb      	ldrb	r3, [r7, #3]
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	68f9      	ldr	r1, [r7, #12]
 800242e:	2073      	movs	r0, #115	; 0x73
 8002430:	f004 f818 	bl	8006464 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002434:	bf00      	nop
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b090      	sub	sp, #64	; 0x40
 8002440:	af02      	add	r7, sp, #8
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
 8002448:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800244a:	2300      	movs	r3, #0
 800244c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10a      	bne.n	800246e <xQueueGenericSend+0x32>
        __asm volatile
 8002458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800245c:	f383 8811 	msr	BASEPRI, r3
 8002460:	f3bf 8f6f 	isb	sy
 8002464:	f3bf 8f4f 	dsb	sy
 8002468:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800246a:	bf00      	nop
 800246c:	e7fe      	b.n	800246c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d103      	bne.n	800247c <xQueueGenericSend+0x40>
 8002474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <xQueueGenericSend+0x44>
 800247c:	2301      	movs	r3, #1
 800247e:	e000      	b.n	8002482 <xQueueGenericSend+0x46>
 8002480:	2300      	movs	r3, #0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10a      	bne.n	800249c <xQueueGenericSend+0x60>
        __asm volatile
 8002486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800248a:	f383 8811 	msr	BASEPRI, r3
 800248e:	f3bf 8f6f 	isb	sy
 8002492:	f3bf 8f4f 	dsb	sy
 8002496:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002498:	bf00      	nop
 800249a:	e7fe      	b.n	800249a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d103      	bne.n	80024aa <xQueueGenericSend+0x6e>
 80024a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d101      	bne.n	80024ae <xQueueGenericSend+0x72>
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <xQueueGenericSend+0x74>
 80024ae:	2300      	movs	r3, #0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10a      	bne.n	80024ca <xQueueGenericSend+0x8e>
        __asm volatile
 80024b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b8:	f383 8811 	msr	BASEPRI, r3
 80024bc:	f3bf 8f6f 	isb	sy
 80024c0:	f3bf 8f4f 	dsb	sy
 80024c4:	623b      	str	r3, [r7, #32]
    }
 80024c6:	bf00      	nop
 80024c8:	e7fe      	b.n	80024c8 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024ca:	f001 f9cf 	bl	800386c <xTaskGetSchedulerState>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d102      	bne.n	80024da <xQueueGenericSend+0x9e>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <xQueueGenericSend+0xa2>
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <xQueueGenericSend+0xa4>
 80024de:	2300      	movs	r3, #0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10a      	bne.n	80024fa <xQueueGenericSend+0xbe>
        __asm volatile
 80024e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e8:	f383 8811 	msr	BASEPRI, r3
 80024ec:	f3bf 8f6f 	isb	sy
 80024f0:	f3bf 8f4f 	dsb	sy
 80024f4:	61fb      	str	r3, [r7, #28]
    }
 80024f6:	bf00      	nop
 80024f8:	e7fe      	b.n	80024f8 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80024fa:	f001 ff8b 	bl	8004414 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80024fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002500:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002506:	429a      	cmp	r2, r3
 8002508:	d302      	bcc.n	8002510 <xQueueGenericSend+0xd4>
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	2b02      	cmp	r3, #2
 800250e:	d136      	bne.n	800257e <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8002510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002512:	4618      	mov	r0, r3
 8002514:	f004 fd34 	bl	8006f80 <SEGGER_SYSVIEW_ShrinkId>
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	460b      	mov	r3, r1
 8002522:	4601      	mov	r1, r0
 8002524:	205a      	movs	r0, #90	; 0x5a
 8002526:	f004 f813 	bl	8006550 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	68b9      	ldr	r1, [r7, #8]
 800252e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002530:	f000 fa78 	bl	8002a24 <prvCopyDataToQueue>
 8002534:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	2b00      	cmp	r3, #0
 800253c:	d010      	beq.n	8002560 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800253e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002540:	3324      	adds	r3, #36	; 0x24
 8002542:	4618      	mov	r0, r3
 8002544:	f000 fff2 	bl	800352c <xTaskRemoveFromEventList>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d013      	beq.n	8002576 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800254e:	4b4d      	ldr	r3, [pc, #308]	; (8002684 <xQueueGenericSend+0x248>)
 8002550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	f3bf 8f4f 	dsb	sy
 800255a:	f3bf 8f6f 	isb	sy
 800255e:	e00a      	b.n	8002576 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002562:	2b00      	cmp	r3, #0
 8002564:	d007      	beq.n	8002576 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002566:	4b47      	ldr	r3, [pc, #284]	; (8002684 <xQueueGenericSend+0x248>)
 8002568:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	f3bf 8f4f 	dsb	sy
 8002572:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002576:	f001 ff7d 	bl	8004474 <vPortExitCritical>
                return pdPASS;
 800257a:	2301      	movs	r3, #1
 800257c:	e07d      	b.n	800267a <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d110      	bne.n	80025a6 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002584:	f001 ff76 	bl	8004474 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258a:	4618      	mov	r0, r3
 800258c:	f004 fcf8 	bl	8006f80 <SEGGER_SYSVIEW_ShrinkId>
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	460b      	mov	r3, r1
 800259a:	4601      	mov	r1, r0
 800259c:	205a      	movs	r0, #90	; 0x5a
 800259e:	f003 ffd7 	bl	8006550 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	e069      	b.n	800267a <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80025a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d106      	bne.n	80025ba <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80025ac:	f107 0314 	add.w	r3, r7, #20
 80025b0:	4618      	mov	r0, r3
 80025b2:	f001 f821 	bl	80035f8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80025b6:	2301      	movs	r3, #1
 80025b8:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80025ba:	f001 ff5b 	bl	8004474 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80025be:	f000 fd6d 	bl	800309c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80025c2:	f001 ff27 	bl	8004414 <vPortEnterCritical>
 80025c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025cc:	b25b      	sxtb	r3, r3
 80025ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d2:	d103      	bne.n	80025dc <xQueueGenericSend+0x1a0>
 80025d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025e2:	b25b      	sxtb	r3, r3
 80025e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e8:	d103      	bne.n	80025f2 <xQueueGenericSend+0x1b6>
 80025ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025f2:	f001 ff3f 	bl	8004474 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025f6:	1d3a      	adds	r2, r7, #4
 80025f8:	f107 0314 	add.w	r3, r7, #20
 80025fc:	4611      	mov	r1, r2
 80025fe:	4618      	mov	r0, r3
 8002600:	f001 f810 	bl	8003624 <xTaskCheckForTimeOut>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d124      	bne.n	8002654 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800260a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800260c:	f000 fb02 	bl	8002c14 <prvIsQueueFull>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d018      	beq.n	8002648 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002618:	3310      	adds	r3, #16
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	4611      	mov	r1, r2
 800261e:	4618      	mov	r0, r3
 8002620:	f000 ff32 	bl	8003488 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002626:	f000 fa8d 	bl	8002b44 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800262a:	f000 fd45 	bl	80030b8 <xTaskResumeAll>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	f47f af62 	bne.w	80024fa <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002636:	4b13      	ldr	r3, [pc, #76]	; (8002684 <xQueueGenericSend+0x248>)
 8002638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	f3bf 8f4f 	dsb	sy
 8002642:	f3bf 8f6f 	isb	sy
 8002646:	e758      	b.n	80024fa <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002648:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800264a:	f000 fa7b 	bl	8002b44 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800264e:	f000 fd33 	bl	80030b8 <xTaskResumeAll>
 8002652:	e752      	b.n	80024fa <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002654:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002656:	f000 fa75 	bl	8002b44 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800265a:	f000 fd2d 	bl	80030b8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 800265e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002660:	4618      	mov	r0, r3
 8002662:	f004 fc8d 	bl	8006f80 <SEGGER_SYSVIEW_ShrinkId>
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	6879      	ldr	r1, [r7, #4]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	460b      	mov	r3, r1
 8002670:	4601      	mov	r1, r0
 8002672:	205a      	movs	r0, #90	; 0x5a
 8002674:	f003 ff6c 	bl	8006550 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002678:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800267a:	4618      	mov	r0, r3
 800267c:	3738      	adds	r7, #56	; 0x38
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	e000ed04 	.word	0xe000ed04

08002688 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b090      	sub	sp, #64	; 0x40
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
 8002694:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800269a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10a      	bne.n	80026b6 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80026a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a4:	f383 8811 	msr	BASEPRI, r3
 80026a8:	f3bf 8f6f 	isb	sy
 80026ac:	f3bf 8f4f 	dsb	sy
 80026b0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80026b2:	bf00      	nop
 80026b4:	e7fe      	b.n	80026b4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d103      	bne.n	80026c4 <xQueueGenericSendFromISR+0x3c>
 80026bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <xQueueGenericSendFromISR+0x40>
 80026c4:	2301      	movs	r3, #1
 80026c6:	e000      	b.n	80026ca <xQueueGenericSendFromISR+0x42>
 80026c8:	2300      	movs	r3, #0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10a      	bne.n	80026e4 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80026ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d2:	f383 8811 	msr	BASEPRI, r3
 80026d6:	f3bf 8f6f 	isb	sy
 80026da:	f3bf 8f4f 	dsb	sy
 80026de:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80026e0:	bf00      	nop
 80026e2:	e7fe      	b.n	80026e2 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d103      	bne.n	80026f2 <xQueueGenericSendFromISR+0x6a>
 80026ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <xQueueGenericSendFromISR+0x6e>
 80026f2:	2301      	movs	r3, #1
 80026f4:	e000      	b.n	80026f8 <xQueueGenericSendFromISR+0x70>
 80026f6:	2300      	movs	r3, #0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10a      	bne.n	8002712 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80026fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002700:	f383 8811 	msr	BASEPRI, r3
 8002704:	f3bf 8f6f 	isb	sy
 8002708:	f3bf 8f4f 	dsb	sy
 800270c:	623b      	str	r3, [r7, #32]
    }
 800270e:	bf00      	nop
 8002710:	e7fe      	b.n	8002710 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002712:	f001 ff6b 	bl	80045ec <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002716:	f3ef 8211 	mrs	r2, BASEPRI
 800271a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271e:	f383 8811 	msr	BASEPRI, r3
 8002722:	f3bf 8f6f 	isb	sy
 8002726:	f3bf 8f4f 	dsb	sy
 800272a:	61fa      	str	r2, [r7, #28]
 800272c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800272e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002730:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002734:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273a:	429a      	cmp	r2, r3
 800273c:	d302      	bcc.n	8002744 <xQueueGenericSendFromISR+0xbc>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	2b02      	cmp	r3, #2
 8002742:	d148      	bne.n	80027d6 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002746:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800274a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800274e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002752:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002756:	4618      	mov	r0, r3
 8002758:	f004 fc12 	bl	8006f80 <SEGGER_SYSVIEW_ShrinkId>
 800275c:	4601      	mov	r1, r0
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	461a      	mov	r2, r3
 8002762:	2060      	movs	r0, #96	; 0x60
 8002764:	f003 fe24 	bl	80063b0 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	68b9      	ldr	r1, [r7, #8]
 800276c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800276e:	f000 f959 	bl	8002a24 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002772:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277a:	d112      	bne.n	80027a2 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800277c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	2b00      	cmp	r3, #0
 8002782:	d025      	beq.n	80027d0 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002786:	3324      	adds	r3, #36	; 0x24
 8002788:	4618      	mov	r0, r3
 800278a:	f000 fecf 	bl	800352c <xTaskRemoveFromEventList>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d01d      	beq.n	80027d0 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d01a      	beq.n	80027d0 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	e016      	b.n	80027d0 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80027a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80027a6:	2b7f      	cmp	r3, #127	; 0x7f
 80027a8:	d10a      	bne.n	80027c0 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 80027aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ae:	f383 8811 	msr	BASEPRI, r3
 80027b2:	f3bf 8f6f 	isb	sy
 80027b6:	f3bf 8f4f 	dsb	sy
 80027ba:	617b      	str	r3, [r7, #20]
    }
 80027bc:	bf00      	nop
 80027be:	e7fe      	b.n	80027be <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80027c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80027c4:	3301      	adds	r3, #1
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	b25a      	sxtb	r2, r3
 80027ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80027d0:	2301      	movs	r3, #1
 80027d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80027d4:	e00b      	b.n	80027ee <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80027d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d8:	4618      	mov	r0, r3
 80027da:	f004 fbd1 	bl	8006f80 <SEGGER_SYSVIEW_ShrinkId>
 80027de:	4601      	mov	r1, r0
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	461a      	mov	r2, r3
 80027e4:	2060      	movs	r0, #96	; 0x60
 80027e6:	f003 fde3 	bl	80063b0 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f0:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80027f8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80027fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3740      	adds	r7, #64	; 0x40
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002804:	b590      	push	{r4, r7, lr}
 8002806:	b08f      	sub	sp, #60	; 0x3c
 8002808:	af02      	add	r7, sp, #8
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002810:	2300      	movs	r3, #0
 8002812:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10a      	bne.n	8002834 <xQueueReceive+0x30>
        __asm volatile
 800281e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002822:	f383 8811 	msr	BASEPRI, r3
 8002826:	f3bf 8f6f 	isb	sy
 800282a:	f3bf 8f4f 	dsb	sy
 800282e:	623b      	str	r3, [r7, #32]
    }
 8002830:	bf00      	nop
 8002832:	e7fe      	b.n	8002832 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d103      	bne.n	8002842 <xQueueReceive+0x3e>
 800283a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <xQueueReceive+0x42>
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <xQueueReceive+0x44>
 8002846:	2300      	movs	r3, #0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10a      	bne.n	8002862 <xQueueReceive+0x5e>
        __asm volatile
 800284c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002850:	f383 8811 	msr	BASEPRI, r3
 8002854:	f3bf 8f6f 	isb	sy
 8002858:	f3bf 8f4f 	dsb	sy
 800285c:	61fb      	str	r3, [r7, #28]
    }
 800285e:	bf00      	nop
 8002860:	e7fe      	b.n	8002860 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002862:	f001 f803 	bl	800386c <xTaskGetSchedulerState>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d102      	bne.n	8002872 <xQueueReceive+0x6e>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <xQueueReceive+0x72>
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <xQueueReceive+0x74>
 8002876:	2300      	movs	r3, #0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10a      	bne.n	8002892 <xQueueReceive+0x8e>
        __asm volatile
 800287c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002880:	f383 8811 	msr	BASEPRI, r3
 8002884:	f3bf 8f6f 	isb	sy
 8002888:	f3bf 8f4f 	dsb	sy
 800288c:	61bb      	str	r3, [r7, #24]
    }
 800288e:	bf00      	nop
 8002890:	e7fe      	b.n	8002890 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002892:	f001 fdbf 	bl	8004414 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d02f      	beq.n	8002902 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80028a2:	68b9      	ldr	r1, [r7, #8]
 80028a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028a6:	f000 f927 	bl	8002af8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80028aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ac:	4618      	mov	r0, r3
 80028ae:	f004 fb67 	bl	8006f80 <SEGGER_SYSVIEW_ShrinkId>
 80028b2:	4604      	mov	r4, r0
 80028b4:	2000      	movs	r0, #0
 80028b6:	f004 fb63 	bl	8006f80 <SEGGER_SYSVIEW_ShrinkId>
 80028ba:	4602      	mov	r2, r0
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2101      	movs	r1, #1
 80028c0:	9100      	str	r1, [sp, #0]
 80028c2:	4621      	mov	r1, r4
 80028c4:	205c      	movs	r0, #92	; 0x5c
 80028c6:	f003 fe43 	bl	8006550 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	1e5a      	subs	r2, r3, #1
 80028ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00f      	beq.n	80028fa <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028dc:	3310      	adds	r3, #16
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 fe24 	bl	800352c <xTaskRemoveFromEventList>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d007      	beq.n	80028fa <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80028ea:	4b4d      	ldr	r3, [pc, #308]	; (8002a20 <xQueueReceive+0x21c>)
 80028ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	f3bf 8f4f 	dsb	sy
 80028f6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80028fa:	f001 fdbb 	bl	8004474 <vPortExitCritical>
                return pdPASS;
 80028fe:	2301      	movs	r3, #1
 8002900:	e08a      	b.n	8002a18 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d113      	bne.n	8002930 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002908:	f001 fdb4 	bl	8004474 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800290c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800290e:	4618      	mov	r0, r3
 8002910:	f004 fb36 	bl	8006f80 <SEGGER_SYSVIEW_ShrinkId>
 8002914:	4604      	mov	r4, r0
 8002916:	2000      	movs	r0, #0
 8002918:	f004 fb32 	bl	8006f80 <SEGGER_SYSVIEW_ShrinkId>
 800291c:	4602      	mov	r2, r0
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2101      	movs	r1, #1
 8002922:	9100      	str	r1, [sp, #0]
 8002924:	4621      	mov	r1, r4
 8002926:	205c      	movs	r0, #92	; 0x5c
 8002928:	f003 fe12 	bl	8006550 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800292c:	2300      	movs	r3, #0
 800292e:	e073      	b.n	8002a18 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002936:	f107 0310 	add.w	r3, r7, #16
 800293a:	4618      	mov	r0, r3
 800293c:	f000 fe5c 	bl	80035f8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002940:	2301      	movs	r3, #1
 8002942:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002944:	f001 fd96 	bl	8004474 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002948:	f000 fba8 	bl	800309c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800294c:	f001 fd62 	bl	8004414 <vPortEnterCritical>
 8002950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002952:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002956:	b25b      	sxtb	r3, r3
 8002958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295c:	d103      	bne.n	8002966 <xQueueReceive+0x162>
 800295e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002968:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800296c:	b25b      	sxtb	r3, r3
 800296e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002972:	d103      	bne.n	800297c <xQueueReceive+0x178>
 8002974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800297c:	f001 fd7a 	bl	8004474 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002980:	1d3a      	adds	r2, r7, #4
 8002982:	f107 0310 	add.w	r3, r7, #16
 8002986:	4611      	mov	r1, r2
 8002988:	4618      	mov	r0, r3
 800298a:	f000 fe4b 	bl	8003624 <xTaskCheckForTimeOut>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d124      	bne.n	80029de <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002996:	f000 f927 	bl	8002be8 <prvIsQueueEmpty>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d018      	beq.n	80029d2 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80029a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a2:	3324      	adds	r3, #36	; 0x24
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	4611      	mov	r1, r2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 fd6d 	bl	8003488 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80029ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029b0:	f000 f8c8 	bl	8002b44 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80029b4:	f000 fb80 	bl	80030b8 <xTaskResumeAll>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f47f af69 	bne.w	8002892 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80029c0:	4b17      	ldr	r3, [pc, #92]	; (8002a20 <xQueueReceive+0x21c>)
 80029c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	f3bf 8f4f 	dsb	sy
 80029cc:	f3bf 8f6f 	isb	sy
 80029d0:	e75f      	b.n	8002892 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80029d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029d4:	f000 f8b6 	bl	8002b44 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80029d8:	f000 fb6e 	bl	80030b8 <xTaskResumeAll>
 80029dc:	e759      	b.n	8002892 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80029de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029e0:	f000 f8b0 	bl	8002b44 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80029e4:	f000 fb68 	bl	80030b8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029ea:	f000 f8fd 	bl	8002be8 <prvIsQueueEmpty>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f43f af4e 	beq.w	8002892 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80029f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f8:	4618      	mov	r0, r3
 80029fa:	f004 fac1 	bl	8006f80 <SEGGER_SYSVIEW_ShrinkId>
 80029fe:	4604      	mov	r4, r0
 8002a00:	2000      	movs	r0, #0
 8002a02:	f004 fabd 	bl	8006f80 <SEGGER_SYSVIEW_ShrinkId>
 8002a06:	4602      	mov	r2, r0
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	9100      	str	r1, [sp, #0]
 8002a0e:	4621      	mov	r1, r4
 8002a10:	205c      	movs	r0, #92	; 0x5c
 8002a12:	f003 fd9d 	bl	8006550 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002a16:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3734      	adds	r7, #52	; 0x34
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd90      	pop	{r4, r7, pc}
 8002a20:	e000ed04 	.word	0xe000ed04

08002a24 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a38:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10d      	bne.n	8002a5e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d14d      	bne.n	8002ae6 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 ff2a 	bl	80038a8 <xTaskPriorityDisinherit>
 8002a54:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	609a      	str	r2, [r3, #8]
 8002a5c:	e043      	b.n	8002ae6 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d119      	bne.n	8002a98 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6858      	ldr	r0, [r3, #4]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	68b9      	ldr	r1, [r7, #8]
 8002a70:	f004 fc66 	bl	8007340 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7c:	441a      	add	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d32b      	bcc.n	8002ae6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	e026      	b.n	8002ae6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	68d8      	ldr	r0, [r3, #12]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	68b9      	ldr	r1, [r7, #8]
 8002aa4:	f004 fc4c 	bl	8007340 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab0:	425b      	negs	r3, r3
 8002ab2:	441a      	add	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	68da      	ldr	r2, [r3, #12]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d207      	bcs.n	8002ad4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	425b      	negs	r3, r3
 8002ace:	441a      	add	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d105      	bne.n	8002ae6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d002      	beq.n	8002ae6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002aee:	697b      	ldr	r3, [r7, #20]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d018      	beq.n	8002b3c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	441a      	add	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d303      	bcc.n	8002b2c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68d9      	ldr	r1, [r3, #12]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	461a      	mov	r2, r3
 8002b36:	6838      	ldr	r0, [r7, #0]
 8002b38:	f004 fc02 	bl	8007340 <memcpy>
    }
}
 8002b3c:	bf00      	nop
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002b4c:	f001 fc62 	bl	8004414 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b56:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b58:	e011      	b.n	8002b7e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d012      	beq.n	8002b88 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3324      	adds	r3, #36	; 0x24
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 fce0 	bl	800352c <xTaskRemoveFromEventList>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002b72:	f000 fdbd 	bl	80036f0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002b76:	7bfb      	ldrb	r3, [r7, #15]
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	dce9      	bgt.n	8002b5a <prvUnlockQueue+0x16>
 8002b86:	e000      	b.n	8002b8a <prvUnlockQueue+0x46>
                        break;
 8002b88:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	22ff      	movs	r2, #255	; 0xff
 8002b8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002b92:	f001 fc6f 	bl	8004474 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002b96:	f001 fc3d 	bl	8004414 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ba0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ba2:	e011      	b.n	8002bc8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d012      	beq.n	8002bd2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3310      	adds	r3, #16
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f000 fcbb 	bl	800352c <xTaskRemoveFromEventList>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002bbc:	f000 fd98 	bl	80036f0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002bc0:	7bbb      	ldrb	r3, [r7, #14]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002bc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	dce9      	bgt.n	8002ba4 <prvUnlockQueue+0x60>
 8002bd0:	e000      	b.n	8002bd4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002bd2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	22ff      	movs	r2, #255	; 0xff
 8002bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002bdc:	f001 fc4a 	bl	8004474 <vPortExitCritical>
}
 8002be0:	bf00      	nop
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002bf0:	f001 fc10 	bl	8004414 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d102      	bne.n	8002c02 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	e001      	b.n	8002c06 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002c02:	2300      	movs	r3, #0
 8002c04:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002c06:	f001 fc35 	bl	8004474 <vPortExitCritical>

    return xReturn;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002c1c:	f001 fbfa 	bl	8004414 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d102      	bne.n	8002c32 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	e001      	b.n	8002c36 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002c32:	2300      	movs	r3, #0
 8002c34:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002c36:	f001 fc1d 	bl	8004474 <vPortExitCritical>

    return xReturn;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	e01e      	b.n	8002c92 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002c54:	4a13      	ldr	r2, [pc, #76]	; (8002ca4 <vQueueAddToRegistry+0x60>)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d115      	bne.n	8002c8c <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002c60:	4910      	ldr	r1, [pc, #64]	; (8002ca4 <vQueueAddToRegistry+0x60>)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002c6a:	4a0e      	ldr	r2, [pc, #56]	; (8002ca4 <vQueueAddToRegistry+0x60>)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	4413      	add	r3, r2
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f004 f981 	bl	8006f80 <SEGGER_SYSVIEW_ShrinkId>
 8002c7e:	4601      	mov	r1, r0
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	461a      	mov	r2, r3
 8002c84:	2071      	movs	r0, #113	; 0x71
 8002c86:	f003 fb93 	bl	80063b0 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002c8a:	e006      	b.n	8002c9a <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2b07      	cmp	r3, #7
 8002c96:	d9dd      	bls.n	8002c54 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002c98:	bf00      	nop
 8002c9a:	bf00      	nop
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	200143c4 	.word	0x200143c4

08002ca8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002cb8:	f001 fbac 	bl	8004414 <vPortEnterCritical>
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cc2:	b25b      	sxtb	r3, r3
 8002cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc8:	d103      	bne.n	8002cd2 <vQueueWaitForMessageRestricted+0x2a>
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cd8:	b25b      	sxtb	r3, r3
 8002cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cde:	d103      	bne.n	8002ce8 <vQueueWaitForMessageRestricted+0x40>
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ce8:	f001 fbc4 	bl	8004474 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d106      	bne.n	8002d02 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	3324      	adds	r3, #36	; 0x24
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	68b9      	ldr	r1, [r7, #8]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f000 fbe7 	bl	80034d0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002d02:	6978      	ldr	r0, [r7, #20]
 8002d04:	f7ff ff1e 	bl	8002b44 <prvUnlockQueue>
    }
 8002d08:	bf00      	nop
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08c      	sub	sp, #48	; 0x30
 8002d14:	af04      	add	r7, sp, #16
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	603b      	str	r3, [r7, #0]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002d20:	88fb      	ldrh	r3, [r7, #6]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4618      	mov	r0, r3
 8002d26:	f001 fca1 	bl	800466c <pvPortMalloc>
 8002d2a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00e      	beq.n	8002d50 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002d32:	2058      	movs	r0, #88	; 0x58
 8002d34:	f001 fc9a 	bl	800466c <pvPortMalloc>
 8002d38:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	631a      	str	r2, [r3, #48]	; 0x30
 8002d46:	e005      	b.n	8002d54 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002d48:	6978      	ldr	r0, [r7, #20]
 8002d4a:	f001 fd6f 	bl	800482c <vPortFree>
 8002d4e:	e001      	b.n	8002d54 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d013      	beq.n	8002d82 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d5a:	88fa      	ldrh	r2, [r7, #6]
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	9303      	str	r3, [sp, #12]
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	9302      	str	r3, [sp, #8]
 8002d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d66:	9301      	str	r3, [sp, #4]
 8002d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	68b9      	ldr	r1, [r7, #8]
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 f80e 	bl	8002d92 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002d76:	69f8      	ldr	r0, [r7, #28]
 8002d78:	f000 f8a2 	bl	8002ec0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	61bb      	str	r3, [r7, #24]
 8002d80:	e002      	b.n	8002d88 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d82:	f04f 33ff 	mov.w	r3, #4294967295
 8002d86:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002d88:	69bb      	ldr	r3, [r7, #24]
    }
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3720      	adds	r7, #32
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b088      	sub	sp, #32
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	607a      	str	r2, [r7, #4]
 8002d9e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	461a      	mov	r2, r3
 8002daa:	21a5      	movs	r1, #165	; 0xa5
 8002dac:	f004 fad6 	bl	800735c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	f023 0307 	bic.w	r3, r3, #7
 8002dc8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00a      	beq.n	8002dea <prvInitialiseNewTask+0x58>
        __asm volatile
 8002dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd8:	f383 8811 	msr	BASEPRI, r3
 8002ddc:	f3bf 8f6f 	isb	sy
 8002de0:	f3bf 8f4f 	dsb	sy
 8002de4:	617b      	str	r3, [r7, #20]
    }
 8002de6:	bf00      	nop
 8002de8:	e7fe      	b.n	8002de8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d01f      	beq.n	8002e30 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002df0:	2300      	movs	r3, #0
 8002df2:	61fb      	str	r3, [r7, #28]
 8002df4:	e012      	b.n	8002e1c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	7819      	ldrb	r1, [r3, #0]
 8002dfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	4413      	add	r3, r2
 8002e04:	3334      	adds	r3, #52	; 0x34
 8002e06:	460a      	mov	r2, r1
 8002e08:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	4413      	add	r3, r2
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d006      	beq.n	8002e24 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	61fb      	str	r3, [r7, #28]
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	2b09      	cmp	r3, #9
 8002e20:	d9e9      	bls.n	8002df6 <prvInitialiseNewTask+0x64>
 8002e22:	e000      	b.n	8002e26 <prvInitialiseNewTask+0x94>
            {
                break;
 8002e24:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002e2e:	e003      	b.n	8002e38 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	d901      	bls.n	8002e42 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e3e:	2304      	movs	r3, #4
 8002e40:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e46:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e4c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e50:	2200      	movs	r2, #0
 8002e52:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e56:	3304      	adds	r3, #4
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff f96b 	bl	8002134 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e60:	3318      	adds	r3, #24
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff f966 	bl	8002134 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e6c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e70:	f1c3 0205 	rsb	r2, r3, #5
 8002e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e76:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e7c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e80:	3350      	adds	r3, #80	; 0x50
 8002e82:	2204      	movs	r2, #4
 8002e84:	2100      	movs	r1, #0
 8002e86:	4618      	mov	r0, r3
 8002e88:	f004 fa68 	bl	800735c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8e:	3354      	adds	r3, #84	; 0x54
 8002e90:	2201      	movs	r2, #1
 8002e92:	2100      	movs	r1, #0
 8002e94:	4618      	mov	r0, r3
 8002e96:	f004 fa61 	bl	800735c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	68f9      	ldr	r1, [r7, #12]
 8002e9e:	69b8      	ldr	r0, [r7, #24]
 8002ea0:	f001 f90c 	bl	80040bc <pxPortInitialiseStack>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d002      	beq.n	8002eb6 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eb4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002eb6:	bf00      	nop
 8002eb8:	3720      	adds	r7, #32
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
	...

08002ec0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002ec0:	b5b0      	push	{r4, r5, r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af02      	add	r7, sp, #8
 8002ec6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002ec8:	f001 faa4 	bl	8004414 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002ecc:	4b3b      	ldr	r3, [pc, #236]	; (8002fbc <prvAddNewTaskToReadyList+0xfc>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	4a3a      	ldr	r2, [pc, #232]	; (8002fbc <prvAddNewTaskToReadyList+0xfc>)
 8002ed4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002ed6:	4b3a      	ldr	r3, [pc, #232]	; (8002fc0 <prvAddNewTaskToReadyList+0x100>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d109      	bne.n	8002ef2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002ede:	4a38      	ldr	r2, [pc, #224]	; (8002fc0 <prvAddNewTaskToReadyList+0x100>)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ee4:	4b35      	ldr	r3, [pc, #212]	; (8002fbc <prvAddNewTaskToReadyList+0xfc>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d110      	bne.n	8002f0e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002eec:	f000 fc24 	bl	8003738 <prvInitialiseTaskLists>
 8002ef0:	e00d      	b.n	8002f0e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002ef2:	4b34      	ldr	r3, [pc, #208]	; (8002fc4 <prvAddNewTaskToReadyList+0x104>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d109      	bne.n	8002f0e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002efa:	4b31      	ldr	r3, [pc, #196]	; (8002fc0 <prvAddNewTaskToReadyList+0x100>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d802      	bhi.n	8002f0e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002f08:	4a2d      	ldr	r2, [pc, #180]	; (8002fc0 <prvAddNewTaskToReadyList+0x100>)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002f0e:	4b2e      	ldr	r3, [pc, #184]	; (8002fc8 <prvAddNewTaskToReadyList+0x108>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	3301      	adds	r3, #1
 8002f14:	4a2c      	ldr	r2, [pc, #176]	; (8002fc8 <prvAddNewTaskToReadyList+0x108>)
 8002f16:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f18:	4b2b      	ldr	r3, [pc, #172]	; (8002fc8 <prvAddNewTaskToReadyList+0x108>)
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d016      	beq.n	8002f54 <prvAddNewTaskToReadyList+0x94>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f003 ff03 	bl	8006d34 <SEGGER_SYSVIEW_OnTaskCreate>
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	461d      	mov	r5, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	461c      	mov	r4, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	1ae3      	subs	r3, r4, r3
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	462b      	mov	r3, r5
 8002f50:	f001 fe0e 	bl	8004b70 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f003 ff70 	bl	8006e3c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f60:	2201      	movs	r2, #1
 8002f62:	409a      	lsls	r2, r3
 8002f64:	4b19      	ldr	r3, [pc, #100]	; (8002fcc <prvAddNewTaskToReadyList+0x10c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	4a18      	ldr	r2, [pc, #96]	; (8002fcc <prvAddNewTaskToReadyList+0x10c>)
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f72:	4613      	mov	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4a15      	ldr	r2, [pc, #84]	; (8002fd0 <prvAddNewTaskToReadyList+0x110>)
 8002f7c:	441a      	add	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3304      	adds	r3, #4
 8002f82:	4619      	mov	r1, r3
 8002f84:	4610      	mov	r0, r2
 8002f86:	f7ff f8e2 	bl	800214e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002f8a:	f001 fa73 	bl	8004474 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002f8e:	4b0d      	ldr	r3, [pc, #52]	; (8002fc4 <prvAddNewTaskToReadyList+0x104>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00e      	beq.n	8002fb4 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f96:	4b0a      	ldr	r3, [pc, #40]	; (8002fc0 <prvAddNewTaskToReadyList+0x100>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d207      	bcs.n	8002fb4 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <prvAddNewTaskToReadyList+0x114>)
 8002fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	f3bf 8f4f 	dsb	sy
 8002fb0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002fb4:	bf00      	nop
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bdb0      	pop	{r4, r5, r7, pc}
 8002fbc:	20000110 	.word	0x20000110
 8002fc0:	20000038 	.word	0x20000038
 8002fc4:	2000011c 	.word	0x2000011c
 8002fc8:	2000012c 	.word	0x2000012c
 8002fcc:	20000118 	.word	0x20000118
 8002fd0:	2000003c 	.word	0x2000003c
 8002fd4:	e000ed04 	.word	0xe000ed04

08002fd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002fde:	4b27      	ldr	r3, [pc, #156]	; (800307c <vTaskStartScheduler+0xa4>)
 8002fe0:	9301      	str	r3, [sp, #4]
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	2282      	movs	r2, #130	; 0x82
 8002fea:	4925      	ldr	r1, [pc, #148]	; (8003080 <vTaskStartScheduler+0xa8>)
 8002fec:	4825      	ldr	r0, [pc, #148]	; (8003084 <vTaskStartScheduler+0xac>)
 8002fee:	f7ff fe8f 	bl	8002d10 <xTaskCreate>
 8002ff2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d102      	bne.n	8003000 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002ffa:	f000 fd4d 	bl	8003a98 <xTimerCreateTimerTask>
 8002ffe:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d124      	bne.n	8003050 <vTaskStartScheduler+0x78>
        __asm volatile
 8003006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300a:	f383 8811 	msr	BASEPRI, r3
 800300e:	f3bf 8f6f 	isb	sy
 8003012:	f3bf 8f4f 	dsb	sy
 8003016:	60bb      	str	r3, [r7, #8]
    }
 8003018:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800301a:	4b1b      	ldr	r3, [pc, #108]	; (8003088 <vTaskStartScheduler+0xb0>)
 800301c:	f04f 32ff 	mov.w	r2, #4294967295
 8003020:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003022:	4b1a      	ldr	r3, [pc, #104]	; (800308c <vTaskStartScheduler+0xb4>)
 8003024:	2201      	movs	r2, #1
 8003026:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003028:	4b19      	ldr	r3, [pc, #100]	; (8003090 <vTaskStartScheduler+0xb8>)
 800302a:	2200      	movs	r2, #0
 800302c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800302e:	4b19      	ldr	r3, [pc, #100]	; (8003094 <vTaskStartScheduler+0xbc>)
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	4b12      	ldr	r3, [pc, #72]	; (800307c <vTaskStartScheduler+0xa4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d102      	bne.n	8003040 <vTaskStartScheduler+0x68>
 800303a:	f003 fe5f 	bl	8006cfc <SEGGER_SYSVIEW_OnIdle>
 800303e:	e004      	b.n	800304a <vTaskStartScheduler+0x72>
 8003040:	4b14      	ldr	r3, [pc, #80]	; (8003094 <vTaskStartScheduler+0xbc>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f003 feb7 	bl	8006db8 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800304a:	f001 f8c3 	bl	80041d4 <xPortStartScheduler>
 800304e:	e00e      	b.n	800306e <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003056:	d10a      	bne.n	800306e <vTaskStartScheduler+0x96>
        __asm volatile
 8003058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305c:	f383 8811 	msr	BASEPRI, r3
 8003060:	f3bf 8f6f 	isb	sy
 8003064:	f3bf 8f4f 	dsb	sy
 8003068:	607b      	str	r3, [r7, #4]
    }
 800306a:	bf00      	nop
 800306c:	e7fe      	b.n	800306c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800306e:	4b0a      	ldr	r3, [pc, #40]	; (8003098 <vTaskStartScheduler+0xc0>)
 8003070:	681b      	ldr	r3, [r3, #0]
}
 8003072:	bf00      	nop
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	20000134 	.word	0x20000134
 8003080:	080073f0 	.word	0x080073f0
 8003084:	08003709 	.word	0x08003709
 8003088:	20000130 	.word	0x20000130
 800308c:	2000011c 	.word	0x2000011c
 8003090:	20000114 	.word	0x20000114
 8003094:	20000038 	.word	0x20000038
 8003098:	2000000c 	.word	0x2000000c

0800309c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80030a0:	4b04      	ldr	r3, [pc, #16]	; (80030b4 <vTaskSuspendAll+0x18>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	3301      	adds	r3, #1
 80030a6:	4a03      	ldr	r2, [pc, #12]	; (80030b4 <vTaskSuspendAll+0x18>)
 80030a8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80030aa:	bf00      	nop
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	20000138 	.word	0x20000138

080030b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80030be:	2300      	movs	r3, #0
 80030c0:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80030c2:	2300      	movs	r3, #0
 80030c4:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80030c6:	4b43      	ldr	r3, [pc, #268]	; (80031d4 <xTaskResumeAll+0x11c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10a      	bne.n	80030e4 <xTaskResumeAll+0x2c>
        __asm volatile
 80030ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d2:	f383 8811 	msr	BASEPRI, r3
 80030d6:	f3bf 8f6f 	isb	sy
 80030da:	f3bf 8f4f 	dsb	sy
 80030de:	603b      	str	r3, [r7, #0]
    }
 80030e0:	bf00      	nop
 80030e2:	e7fe      	b.n	80030e2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80030e4:	f001 f996 	bl	8004414 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80030e8:	4b3a      	ldr	r3, [pc, #232]	; (80031d4 <xTaskResumeAll+0x11c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	3b01      	subs	r3, #1
 80030ee:	4a39      	ldr	r2, [pc, #228]	; (80031d4 <xTaskResumeAll+0x11c>)
 80030f0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030f2:	4b38      	ldr	r3, [pc, #224]	; (80031d4 <xTaskResumeAll+0x11c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d165      	bne.n	80031c6 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80030fa:	4b37      	ldr	r3, [pc, #220]	; (80031d8 <xTaskResumeAll+0x120>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d061      	beq.n	80031c6 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003102:	e032      	b.n	800316a <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003104:	4b35      	ldr	r3, [pc, #212]	; (80031dc <xTaskResumeAll+0x124>)
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	3318      	adds	r3, #24
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff f879 	bl	8002208 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	3304      	adds	r3, #4
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff f874 	bl	8002208 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4618      	mov	r0, r3
 8003124:	f003 fe8a 	bl	8006e3c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312c:	2201      	movs	r2, #1
 800312e:	409a      	lsls	r2, r3
 8003130:	4b2b      	ldr	r3, [pc, #172]	; (80031e0 <xTaskResumeAll+0x128>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4313      	orrs	r3, r2
 8003136:	4a2a      	ldr	r2, [pc, #168]	; (80031e0 <xTaskResumeAll+0x128>)
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800313e:	4613      	mov	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4a27      	ldr	r2, [pc, #156]	; (80031e4 <xTaskResumeAll+0x12c>)
 8003148:	441a      	add	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	3304      	adds	r3, #4
 800314e:	4619      	mov	r1, r3
 8003150:	4610      	mov	r0, r2
 8003152:	f7fe fffc 	bl	800214e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800315a:	4b23      	ldr	r3, [pc, #140]	; (80031e8 <xTaskResumeAll+0x130>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003160:	429a      	cmp	r2, r3
 8003162:	d302      	bcc.n	800316a <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8003164:	4b21      	ldr	r3, [pc, #132]	; (80031ec <xTaskResumeAll+0x134>)
 8003166:	2201      	movs	r2, #1
 8003168:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800316a:	4b1c      	ldr	r3, [pc, #112]	; (80031dc <xTaskResumeAll+0x124>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1c8      	bne.n	8003104 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003178:	f000 fb5c 	bl	8003834 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800317c:	4b1c      	ldr	r3, [pc, #112]	; (80031f0 <xTaskResumeAll+0x138>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d010      	beq.n	80031aa <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003188:	f000 f858 	bl	800323c <xTaskIncrementTick>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d002      	beq.n	8003198 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8003192:	4b16      	ldr	r3, [pc, #88]	; (80031ec <xTaskResumeAll+0x134>)
 8003194:	2201      	movs	r2, #1
 8003196:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3b01      	subs	r3, #1
 800319c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1f1      	bne.n	8003188 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80031a4:	4b12      	ldr	r3, [pc, #72]	; (80031f0 <xTaskResumeAll+0x138>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80031aa:	4b10      	ldr	r3, [pc, #64]	; (80031ec <xTaskResumeAll+0x134>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d009      	beq.n	80031c6 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80031b2:	2301      	movs	r3, #1
 80031b4:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80031b6:	4b0f      	ldr	r3, [pc, #60]	; (80031f4 <xTaskResumeAll+0x13c>)
 80031b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	f3bf 8f4f 	dsb	sy
 80031c2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80031c6:	f001 f955 	bl	8004474 <vPortExitCritical>

    return xAlreadyYielded;
 80031ca:	68bb      	ldr	r3, [r7, #8]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	20000138 	.word	0x20000138
 80031d8:	20000110 	.word	0x20000110
 80031dc:	200000d0 	.word	0x200000d0
 80031e0:	20000118 	.word	0x20000118
 80031e4:	2000003c 	.word	0x2000003c
 80031e8:	20000038 	.word	0x20000038
 80031ec:	20000124 	.word	0x20000124
 80031f0:	20000120 	.word	0x20000120
 80031f4:	e000ed04 	.word	0xe000ed04

080031f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80031fe:	4b05      	ldr	r3, [pc, #20]	; (8003214 <xTaskGetTickCount+0x1c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003204:	687b      	ldr	r3, [r7, #4]
}
 8003206:	4618      	mov	r0, r3
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	20000114 	.word	0x20000114

08003218 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800321e:	f001 f9e5 	bl	80045ec <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003222:	2300      	movs	r3, #0
 8003224:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003226:	4b04      	ldr	r3, [pc, #16]	; (8003238 <xTaskGetTickCountFromISR+0x20>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800322c:	683b      	ldr	r3, [r7, #0]
}
 800322e:	4618      	mov	r0, r3
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	20000114 	.word	0x20000114

0800323c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003242:	2300      	movs	r3, #0
 8003244:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003246:	4b50      	ldr	r3, [pc, #320]	; (8003388 <xTaskIncrementTick+0x14c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	f040 8092 	bne.w	8003374 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003250:	4b4e      	ldr	r3, [pc, #312]	; (800338c <xTaskIncrementTick+0x150>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	3301      	adds	r3, #1
 8003256:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003258:	4a4c      	ldr	r2, [pc, #304]	; (800338c <xTaskIncrementTick+0x150>)
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d120      	bne.n	80032a6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003264:	4b4a      	ldr	r3, [pc, #296]	; (8003390 <xTaskIncrementTick+0x154>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00a      	beq.n	8003284 <xTaskIncrementTick+0x48>
        __asm volatile
 800326e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003272:	f383 8811 	msr	BASEPRI, r3
 8003276:	f3bf 8f6f 	isb	sy
 800327a:	f3bf 8f4f 	dsb	sy
 800327e:	603b      	str	r3, [r7, #0]
    }
 8003280:	bf00      	nop
 8003282:	e7fe      	b.n	8003282 <xTaskIncrementTick+0x46>
 8003284:	4b42      	ldr	r3, [pc, #264]	; (8003390 <xTaskIncrementTick+0x154>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	4b42      	ldr	r3, [pc, #264]	; (8003394 <xTaskIncrementTick+0x158>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a40      	ldr	r2, [pc, #256]	; (8003390 <xTaskIncrementTick+0x154>)
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	4a40      	ldr	r2, [pc, #256]	; (8003394 <xTaskIncrementTick+0x158>)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6013      	str	r3, [r2, #0]
 8003298:	4b3f      	ldr	r3, [pc, #252]	; (8003398 <xTaskIncrementTick+0x15c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	3301      	adds	r3, #1
 800329e:	4a3e      	ldr	r2, [pc, #248]	; (8003398 <xTaskIncrementTick+0x15c>)
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	f000 fac7 	bl	8003834 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80032a6:	4b3d      	ldr	r3, [pc, #244]	; (800339c <xTaskIncrementTick+0x160>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d34c      	bcc.n	800334a <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032b0:	4b37      	ldr	r3, [pc, #220]	; (8003390 <xTaskIncrementTick+0x154>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d104      	bne.n	80032c4 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032ba:	4b38      	ldr	r3, [pc, #224]	; (800339c <xTaskIncrementTick+0x160>)
 80032bc:	f04f 32ff 	mov.w	r2, #4294967295
 80032c0:	601a      	str	r2, [r3, #0]
                    break;
 80032c2:	e042      	b.n	800334a <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032c4:	4b32      	ldr	r3, [pc, #200]	; (8003390 <xTaskIncrementTick+0x154>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d203      	bcs.n	80032e4 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80032dc:	4a2f      	ldr	r2, [pc, #188]	; (800339c <xTaskIncrementTick+0x160>)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80032e2:	e032      	b.n	800334a <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	3304      	adds	r3, #4
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fe ff8d 	bl	8002208 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d004      	beq.n	8003300 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	3318      	adds	r3, #24
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fe ff84 	bl	8002208 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	4618      	mov	r0, r3
 8003304:	f003 fd9a 	bl	8006e3c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330c:	2201      	movs	r2, #1
 800330e:	409a      	lsls	r2, r3
 8003310:	4b23      	ldr	r3, [pc, #140]	; (80033a0 <xTaskIncrementTick+0x164>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4313      	orrs	r3, r2
 8003316:	4a22      	ldr	r2, [pc, #136]	; (80033a0 <xTaskIncrementTick+0x164>)
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800331e:	4613      	mov	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4413      	add	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4a1f      	ldr	r2, [pc, #124]	; (80033a4 <xTaskIncrementTick+0x168>)
 8003328:	441a      	add	r2, r3
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	3304      	adds	r3, #4
 800332e:	4619      	mov	r1, r3
 8003330:	4610      	mov	r0, r2
 8003332:	f7fe ff0c 	bl	800214e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800333a:	4b1b      	ldr	r3, [pc, #108]	; (80033a8 <xTaskIncrementTick+0x16c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003340:	429a      	cmp	r2, r3
 8003342:	d3b5      	bcc.n	80032b0 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8003344:	2301      	movs	r3, #1
 8003346:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003348:	e7b2      	b.n	80032b0 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800334a:	4b17      	ldr	r3, [pc, #92]	; (80033a8 <xTaskIncrementTick+0x16c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003350:	4914      	ldr	r1, [pc, #80]	; (80033a4 <xTaskIncrementTick+0x168>)
 8003352:	4613      	mov	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d901      	bls.n	8003366 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8003362:	2301      	movs	r3, #1
 8003364:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003366:	4b11      	ldr	r3, [pc, #68]	; (80033ac <xTaskIncrementTick+0x170>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d007      	beq.n	800337e <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 800336e:	2301      	movs	r3, #1
 8003370:	617b      	str	r3, [r7, #20]
 8003372:	e004      	b.n	800337e <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003374:	4b0e      	ldr	r3, [pc, #56]	; (80033b0 <xTaskIncrementTick+0x174>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	3301      	adds	r3, #1
 800337a:	4a0d      	ldr	r2, [pc, #52]	; (80033b0 <xTaskIncrementTick+0x174>)
 800337c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800337e:	697b      	ldr	r3, [r7, #20]
}
 8003380:	4618      	mov	r0, r3
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	20000138 	.word	0x20000138
 800338c:	20000114 	.word	0x20000114
 8003390:	200000c8 	.word	0x200000c8
 8003394:	200000cc 	.word	0x200000cc
 8003398:	20000128 	.word	0x20000128
 800339c:	20000130 	.word	0x20000130
 80033a0:	20000118 	.word	0x20000118
 80033a4:	2000003c 	.word	0x2000003c
 80033a8:	20000038 	.word	0x20000038
 80033ac:	20000124 	.word	0x20000124
 80033b0:	20000120 	.word	0x20000120

080033b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80033ba:	4b2d      	ldr	r3, [pc, #180]	; (8003470 <vTaskSwitchContext+0xbc>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80033c2:	4b2c      	ldr	r3, [pc, #176]	; (8003474 <vTaskSwitchContext+0xc0>)
 80033c4:	2201      	movs	r2, #1
 80033c6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80033c8:	e04d      	b.n	8003466 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80033ca:	4b2a      	ldr	r3, [pc, #168]	; (8003474 <vTaskSwitchContext+0xc0>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033d0:	4b29      	ldr	r3, [pc, #164]	; (8003478 <vTaskSwitchContext+0xc4>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	fab3 f383 	clz	r3, r3
 80033dc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80033de:	7afb      	ldrb	r3, [r7, #11]
 80033e0:	f1c3 031f 	rsb	r3, r3, #31
 80033e4:	617b      	str	r3, [r7, #20]
 80033e6:	4925      	ldr	r1, [pc, #148]	; (800347c <vTaskSwitchContext+0xc8>)
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	4613      	mov	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	440b      	add	r3, r1
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10a      	bne.n	8003410 <vTaskSwitchContext+0x5c>
        __asm volatile
 80033fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fe:	f383 8811 	msr	BASEPRI, r3
 8003402:	f3bf 8f6f 	isb	sy
 8003406:	f3bf 8f4f 	dsb	sy
 800340a:	607b      	str	r3, [r7, #4]
    }
 800340c:	bf00      	nop
 800340e:	e7fe      	b.n	800340e <vTaskSwitchContext+0x5a>
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	4613      	mov	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4a18      	ldr	r2, [pc, #96]	; (800347c <vTaskSwitchContext+0xc8>)
 800341c:	4413      	add	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	605a      	str	r2, [r3, #4]
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	3308      	adds	r3, #8
 8003432:	429a      	cmp	r2, r3
 8003434:	d104      	bne.n	8003440 <vTaskSwitchContext+0x8c>
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	605a      	str	r2, [r3, #4]
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	4a0e      	ldr	r2, [pc, #56]	; (8003480 <vTaskSwitchContext+0xcc>)
 8003448:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800344a:	4b0d      	ldr	r3, [pc, #52]	; (8003480 <vTaskSwitchContext+0xcc>)
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	4b0d      	ldr	r3, [pc, #52]	; (8003484 <vTaskSwitchContext+0xd0>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d102      	bne.n	800345c <vTaskSwitchContext+0xa8>
 8003456:	f003 fc51 	bl	8006cfc <SEGGER_SYSVIEW_OnIdle>
}
 800345a:	e004      	b.n	8003466 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 800345c:	4b08      	ldr	r3, [pc, #32]	; (8003480 <vTaskSwitchContext+0xcc>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4618      	mov	r0, r3
 8003462:	f003 fca9 	bl	8006db8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003466:	bf00      	nop
 8003468:	3718      	adds	r7, #24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	20000138 	.word	0x20000138
 8003474:	20000124 	.word	0x20000124
 8003478:	20000118 	.word	0x20000118
 800347c:	2000003c 	.word	0x2000003c
 8003480:	20000038 	.word	0x20000038
 8003484:	20000134 	.word	0x20000134

08003488 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10a      	bne.n	80034ae <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349c:	f383 8811 	msr	BASEPRI, r3
 80034a0:	f3bf 8f6f 	isb	sy
 80034a4:	f3bf 8f4f 	dsb	sy
 80034a8:	60fb      	str	r3, [r7, #12]
    }
 80034aa:	bf00      	nop
 80034ac:	e7fe      	b.n	80034ac <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034ae:	4b07      	ldr	r3, [pc, #28]	; (80034cc <vTaskPlaceOnEventList+0x44>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	3318      	adds	r3, #24
 80034b4:	4619      	mov	r1, r3
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7fe fe6d 	bl	8002196 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80034bc:	2101      	movs	r1, #1
 80034be:	6838      	ldr	r0, [r7, #0]
 80034c0:	f000 fa72 	bl	80039a8 <prvAddCurrentTaskToDelayedList>
}
 80034c4:	bf00      	nop
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	20000038 	.word	0x20000038

080034d0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10a      	bne.n	80034f8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80034e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e6:	f383 8811 	msr	BASEPRI, r3
 80034ea:	f3bf 8f6f 	isb	sy
 80034ee:	f3bf 8f4f 	dsb	sy
 80034f2:	617b      	str	r3, [r7, #20]
    }
 80034f4:	bf00      	nop
 80034f6:	e7fe      	b.n	80034f6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034f8:	4b0b      	ldr	r3, [pc, #44]	; (8003528 <vTaskPlaceOnEventListRestricted+0x58>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	3318      	adds	r3, #24
 80034fe:	4619      	mov	r1, r3
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f7fe fe24 	bl	800214e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d002      	beq.n	8003512 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 800350c:	f04f 33ff 	mov.w	r3, #4294967295
 8003510:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003512:	2024      	movs	r0, #36	; 0x24
 8003514:	f002 fef2 	bl	80062fc <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	68b8      	ldr	r0, [r7, #8]
 800351c:	f000 fa44 	bl	80039a8 <prvAddCurrentTaskToDelayedList>
    }
 8003520:	bf00      	nop
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	20000038 	.word	0x20000038

0800352c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10a      	bne.n	8003558 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003546:	f383 8811 	msr	BASEPRI, r3
 800354a:	f3bf 8f6f 	isb	sy
 800354e:	f3bf 8f4f 	dsb	sy
 8003552:	60fb      	str	r3, [r7, #12]
    }
 8003554:	bf00      	nop
 8003556:	e7fe      	b.n	8003556 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	3318      	adds	r3, #24
 800355c:	4618      	mov	r0, r3
 800355e:	f7fe fe53 	bl	8002208 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003562:	4b1f      	ldr	r3, [pc, #124]	; (80035e0 <xTaskRemoveFromEventList+0xb4>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d120      	bne.n	80035ac <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	3304      	adds	r3, #4
 800356e:	4618      	mov	r0, r3
 8003570:	f7fe fe4a 	bl	8002208 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	4618      	mov	r0, r3
 8003578:	f003 fc60 	bl	8006e3c <SEGGER_SYSVIEW_OnTaskStartReady>
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003580:	2201      	movs	r2, #1
 8003582:	409a      	lsls	r2, r3
 8003584:	4b17      	ldr	r3, [pc, #92]	; (80035e4 <xTaskRemoveFromEventList+0xb8>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4313      	orrs	r3, r2
 800358a:	4a16      	ldr	r2, [pc, #88]	; (80035e4 <xTaskRemoveFromEventList+0xb8>)
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003592:	4613      	mov	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4a13      	ldr	r2, [pc, #76]	; (80035e8 <xTaskRemoveFromEventList+0xbc>)
 800359c:	441a      	add	r2, r3
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	3304      	adds	r3, #4
 80035a2:	4619      	mov	r1, r3
 80035a4:	4610      	mov	r0, r2
 80035a6:	f7fe fdd2 	bl	800214e <vListInsertEnd>
 80035aa:	e005      	b.n	80035b8 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	3318      	adds	r3, #24
 80035b0:	4619      	mov	r1, r3
 80035b2:	480e      	ldr	r0, [pc, #56]	; (80035ec <xTaskRemoveFromEventList+0xc0>)
 80035b4:	f7fe fdcb 	bl	800214e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035bc:	4b0c      	ldr	r3, [pc, #48]	; (80035f0 <xTaskRemoveFromEventList+0xc4>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d905      	bls.n	80035d2 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80035c6:	2301      	movs	r3, #1
 80035c8:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80035ca:	4b0a      	ldr	r3, [pc, #40]	; (80035f4 <xTaskRemoveFromEventList+0xc8>)
 80035cc:	2201      	movs	r2, #1
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	e001      	b.n	80035d6 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 80035d2:	2300      	movs	r3, #0
 80035d4:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80035d6:	697b      	ldr	r3, [r7, #20]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	20000138 	.word	0x20000138
 80035e4:	20000118 	.word	0x20000118
 80035e8:	2000003c 	.word	0x2000003c
 80035ec:	200000d0 	.word	0x200000d0
 80035f0:	20000038 	.word	0x20000038
 80035f4:	20000124 	.word	0x20000124

080035f8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003600:	4b06      	ldr	r3, [pc, #24]	; (800361c <vTaskInternalSetTimeOutState+0x24>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003608:	4b05      	ldr	r3, [pc, #20]	; (8003620 <vTaskInternalSetTimeOutState+0x28>)
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	605a      	str	r2, [r3, #4]
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	20000128 	.word	0x20000128
 8003620:	20000114 	.word	0x20000114

08003624 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b088      	sub	sp, #32
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10a      	bne.n	800364a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003638:	f383 8811 	msr	BASEPRI, r3
 800363c:	f3bf 8f6f 	isb	sy
 8003640:	f3bf 8f4f 	dsb	sy
 8003644:	613b      	str	r3, [r7, #16]
    }
 8003646:	bf00      	nop
 8003648:	e7fe      	b.n	8003648 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10a      	bne.n	8003666 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003654:	f383 8811 	msr	BASEPRI, r3
 8003658:	f3bf 8f6f 	isb	sy
 800365c:	f3bf 8f4f 	dsb	sy
 8003660:	60fb      	str	r3, [r7, #12]
    }
 8003662:	bf00      	nop
 8003664:	e7fe      	b.n	8003664 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003666:	f000 fed5 	bl	8004414 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800366a:	4b1f      	ldr	r3, [pc, #124]	; (80036e8 <xTaskCheckForTimeOut+0xc4>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003682:	d102      	bne.n	800368a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003684:	2300      	movs	r3, #0
 8003686:	61fb      	str	r3, [r7, #28]
 8003688:	e026      	b.n	80036d8 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	4b17      	ldr	r3, [pc, #92]	; (80036ec <xTaskCheckForTimeOut+0xc8>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	429a      	cmp	r2, r3
 8003694:	d00a      	beq.n	80036ac <xTaskCheckForTimeOut+0x88>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	429a      	cmp	r2, r3
 800369e:	d305      	bcc.n	80036ac <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80036a0:	2301      	movs	r3, #1
 80036a2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	2200      	movs	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	e015      	b.n	80036d8 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d20b      	bcs.n	80036ce <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	1ad2      	subs	r2, r2, r3
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff ff98 	bl	80035f8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80036c8:	2300      	movs	r3, #0
 80036ca:	61fb      	str	r3, [r7, #28]
 80036cc:	e004      	b.n	80036d8 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80036d4:	2301      	movs	r3, #1
 80036d6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80036d8:	f000 fecc 	bl	8004474 <vPortExitCritical>

    return xReturn;
 80036dc:	69fb      	ldr	r3, [r7, #28]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3720      	adds	r7, #32
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	20000114 	.word	0x20000114
 80036ec:	20000128 	.word	0x20000128

080036f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80036f4:	4b03      	ldr	r3, [pc, #12]	; (8003704 <vTaskMissedYield+0x14>)
 80036f6:	2201      	movs	r2, #1
 80036f8:	601a      	str	r2, [r3, #0]
}
 80036fa:	bf00      	nop
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	20000124 	.word	0x20000124

08003708 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003710:	f000 f852 	bl	80037b8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003714:	4b06      	ldr	r3, [pc, #24]	; (8003730 <prvIdleTask+0x28>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d9f9      	bls.n	8003710 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800371c:	4b05      	ldr	r3, [pc, #20]	; (8003734 <prvIdleTask+0x2c>)
 800371e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	f3bf 8f4f 	dsb	sy
 8003728:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800372c:	e7f0      	b.n	8003710 <prvIdleTask+0x8>
 800372e:	bf00      	nop
 8003730:	2000003c 	.word	0x2000003c
 8003734:	e000ed04 	.word	0xe000ed04

08003738 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800373e:	2300      	movs	r3, #0
 8003740:	607b      	str	r3, [r7, #4]
 8003742:	e00c      	b.n	800375e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	4613      	mov	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4413      	add	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4a12      	ldr	r2, [pc, #72]	; (8003798 <prvInitialiseTaskLists+0x60>)
 8003750:	4413      	add	r3, r2
 8003752:	4618      	mov	r0, r3
 8003754:	f7fe fcce 	bl	80020f4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3301      	adds	r3, #1
 800375c:	607b      	str	r3, [r7, #4]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b04      	cmp	r3, #4
 8003762:	d9ef      	bls.n	8003744 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003764:	480d      	ldr	r0, [pc, #52]	; (800379c <prvInitialiseTaskLists+0x64>)
 8003766:	f7fe fcc5 	bl	80020f4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800376a:	480d      	ldr	r0, [pc, #52]	; (80037a0 <prvInitialiseTaskLists+0x68>)
 800376c:	f7fe fcc2 	bl	80020f4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003770:	480c      	ldr	r0, [pc, #48]	; (80037a4 <prvInitialiseTaskLists+0x6c>)
 8003772:	f7fe fcbf 	bl	80020f4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003776:	480c      	ldr	r0, [pc, #48]	; (80037a8 <prvInitialiseTaskLists+0x70>)
 8003778:	f7fe fcbc 	bl	80020f4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800377c:	480b      	ldr	r0, [pc, #44]	; (80037ac <prvInitialiseTaskLists+0x74>)
 800377e:	f7fe fcb9 	bl	80020f4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003782:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <prvInitialiseTaskLists+0x78>)
 8003784:	4a05      	ldr	r2, [pc, #20]	; (800379c <prvInitialiseTaskLists+0x64>)
 8003786:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003788:	4b0a      	ldr	r3, [pc, #40]	; (80037b4 <prvInitialiseTaskLists+0x7c>)
 800378a:	4a05      	ldr	r2, [pc, #20]	; (80037a0 <prvInitialiseTaskLists+0x68>)
 800378c:	601a      	str	r2, [r3, #0]
}
 800378e:	bf00      	nop
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	2000003c 	.word	0x2000003c
 800379c:	200000a0 	.word	0x200000a0
 80037a0:	200000b4 	.word	0x200000b4
 80037a4:	200000d0 	.word	0x200000d0
 80037a8:	200000e4 	.word	0x200000e4
 80037ac:	200000fc 	.word	0x200000fc
 80037b0:	200000c8 	.word	0x200000c8
 80037b4:	200000cc 	.word	0x200000cc

080037b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037be:	e019      	b.n	80037f4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80037c0:	f000 fe28 	bl	8004414 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037c4:	4b10      	ldr	r3, [pc, #64]	; (8003808 <prvCheckTasksWaitingTermination+0x50>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3304      	adds	r3, #4
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fe fd19 	bl	8002208 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80037d6:	4b0d      	ldr	r3, [pc, #52]	; (800380c <prvCheckTasksWaitingTermination+0x54>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	3b01      	subs	r3, #1
 80037dc:	4a0b      	ldr	r2, [pc, #44]	; (800380c <prvCheckTasksWaitingTermination+0x54>)
 80037de:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80037e0:	4b0b      	ldr	r3, [pc, #44]	; (8003810 <prvCheckTasksWaitingTermination+0x58>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	3b01      	subs	r3, #1
 80037e6:	4a0a      	ldr	r2, [pc, #40]	; (8003810 <prvCheckTasksWaitingTermination+0x58>)
 80037e8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80037ea:	f000 fe43 	bl	8004474 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f810 	bl	8003814 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037f4:	4b06      	ldr	r3, [pc, #24]	; (8003810 <prvCheckTasksWaitingTermination+0x58>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1e1      	bne.n	80037c0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80037fc:	bf00      	nop
 80037fe:	bf00      	nop
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	200000e4 	.word	0x200000e4
 800380c:	20000110 	.word	0x20000110
 8003810:	200000f8 	.word	0x200000f8

08003814 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003820:	4618      	mov	r0, r3
 8003822:	f001 f803 	bl	800482c <vPortFree>
                vPortFree( pxTCB );
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f001 f800 	bl	800482c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800382c:	bf00      	nop
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003838:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <prvResetNextTaskUnblockTime+0x30>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d104      	bne.n	800384c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003842:	4b09      	ldr	r3, [pc, #36]	; (8003868 <prvResetNextTaskUnblockTime+0x34>)
 8003844:	f04f 32ff 	mov.w	r2, #4294967295
 8003848:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800384a:	e005      	b.n	8003858 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800384c:	4b05      	ldr	r3, [pc, #20]	; (8003864 <prvResetNextTaskUnblockTime+0x30>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a04      	ldr	r2, [pc, #16]	; (8003868 <prvResetNextTaskUnblockTime+0x34>)
 8003856:	6013      	str	r3, [r2, #0]
}
 8003858:	bf00      	nop
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	200000c8 	.word	0x200000c8
 8003868:	20000130 	.word	0x20000130

0800386c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003872:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <xTaskGetSchedulerState+0x34>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d102      	bne.n	8003880 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800387a:	2301      	movs	r3, #1
 800387c:	607b      	str	r3, [r7, #4]
 800387e:	e008      	b.n	8003892 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003880:	4b08      	ldr	r3, [pc, #32]	; (80038a4 <xTaskGetSchedulerState+0x38>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d102      	bne.n	800388e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003888:	2302      	movs	r3, #2
 800388a:	607b      	str	r3, [r7, #4]
 800388c:	e001      	b.n	8003892 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800388e:	2300      	movs	r3, #0
 8003890:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003892:	687b      	ldr	r3, [r7, #4]
    }
 8003894:	4618      	mov	r0, r3
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	2000011c 	.word	0x2000011c
 80038a4:	20000138 	.word	0x20000138

080038a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80038b4:	2300      	movs	r3, #0
 80038b6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d068      	beq.n	8003990 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80038be:	4b37      	ldr	r3, [pc, #220]	; (800399c <xTaskPriorityDisinherit+0xf4>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d00a      	beq.n	80038de <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80038c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038cc:	f383 8811 	msr	BASEPRI, r3
 80038d0:	f3bf 8f6f 	isb	sy
 80038d4:	f3bf 8f4f 	dsb	sy
 80038d8:	60fb      	str	r3, [r7, #12]
    }
 80038da:	bf00      	nop
 80038dc:	e7fe      	b.n	80038dc <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10a      	bne.n	80038fc <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80038e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ea:	f383 8811 	msr	BASEPRI, r3
 80038ee:	f3bf 8f6f 	isb	sy
 80038f2:	f3bf 8f4f 	dsb	sy
 80038f6:	60bb      	str	r3, [r7, #8]
    }
 80038f8:	bf00      	nop
 80038fa:	e7fe      	b.n	80038fa <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003900:	1e5a      	subs	r2, r3, #1
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800390e:	429a      	cmp	r2, r3
 8003910:	d03e      	beq.n	8003990 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003916:	2b00      	cmp	r3, #0
 8003918:	d13a      	bne.n	8003990 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	3304      	adds	r3, #4
 800391e:	4618      	mov	r0, r3
 8003920:	f7fe fc72 	bl	8002208 <uxListRemove>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10a      	bne.n	8003940 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	2201      	movs	r2, #1
 8003930:	fa02 f303 	lsl.w	r3, r2, r3
 8003934:	43da      	mvns	r2, r3
 8003936:	4b1a      	ldr	r3, [pc, #104]	; (80039a0 <xTaskPriorityDisinherit+0xf8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4013      	ands	r3, r2
 800393c:	4a18      	ldr	r2, [pc, #96]	; (80039a0 <xTaskPriorityDisinherit+0xf8>)
 800393e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4619      	mov	r1, r3
 8003944:	204a      	movs	r0, #74	; 0x4a
 8003946:	f002 fcf7 	bl	8006338 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003956:	f1c3 0205 	rsb	r2, r3, #5
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003962:	2201      	movs	r2, #1
 8003964:	409a      	lsls	r2, r3
 8003966:	4b0e      	ldr	r3, [pc, #56]	; (80039a0 <xTaskPriorityDisinherit+0xf8>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4313      	orrs	r3, r2
 800396c:	4a0c      	ldr	r2, [pc, #48]	; (80039a0 <xTaskPriorityDisinherit+0xf8>)
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003974:	4613      	mov	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4413      	add	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4a09      	ldr	r2, [pc, #36]	; (80039a4 <xTaskPriorityDisinherit+0xfc>)
 800397e:	441a      	add	r2, r3
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	3304      	adds	r3, #4
 8003984:	4619      	mov	r1, r3
 8003986:	4610      	mov	r0, r2
 8003988:	f7fe fbe1 	bl	800214e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800398c:	2301      	movs	r3, #1
 800398e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003990:	697b      	ldr	r3, [r7, #20]
    }
 8003992:	4618      	mov	r0, r3
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	20000038 	.word	0x20000038
 80039a0:	20000118 	.word	0x20000118
 80039a4:	2000003c 	.word	0x2000003c

080039a8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80039b2:	4b32      	ldr	r3, [pc, #200]	; (8003a7c <prvAddCurrentTaskToDelayedList+0xd4>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039b8:	4b31      	ldr	r3, [pc, #196]	; (8003a80 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	3304      	adds	r3, #4
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fe fc22 	bl	8002208 <uxListRemove>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10b      	bne.n	80039e2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80039ca:	4b2d      	ldr	r3, [pc, #180]	; (8003a80 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d0:	2201      	movs	r2, #1
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	43da      	mvns	r2, r3
 80039d8:	4b2a      	ldr	r3, [pc, #168]	; (8003a84 <prvAddCurrentTaskToDelayedList+0xdc>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4013      	ands	r3, r2
 80039de:	4a29      	ldr	r2, [pc, #164]	; (8003a84 <prvAddCurrentTaskToDelayedList+0xdc>)
 80039e0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e8:	d110      	bne.n	8003a0c <prvAddCurrentTaskToDelayedList+0x64>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00d      	beq.n	8003a0c <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80039f0:	4b23      	ldr	r3, [pc, #140]	; (8003a80 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	211b      	movs	r1, #27
 80039f6:	4618      	mov	r0, r3
 80039f8:	f003 fa62 	bl	8006ec0 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039fc:	4b20      	ldr	r3, [pc, #128]	; (8003a80 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	3304      	adds	r3, #4
 8003a02:	4619      	mov	r1, r3
 8003a04:	4820      	ldr	r0, [pc, #128]	; (8003a88 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003a06:	f7fe fba2 	bl	800214e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003a0a:	e032      	b.n	8003a72 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4413      	add	r3, r2
 8003a12:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a14:	4b1a      	ldr	r3, [pc, #104]	; (8003a80 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d20f      	bcs.n	8003a44 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003a24:	4b16      	ldr	r3, [pc, #88]	; (8003a80 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2104      	movs	r1, #4
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f003 fa48 	bl	8006ec0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a30:	4b16      	ldr	r3, [pc, #88]	; (8003a8c <prvAddCurrentTaskToDelayedList+0xe4>)
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	4b12      	ldr	r3, [pc, #72]	; (8003a80 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	3304      	adds	r3, #4
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	4610      	mov	r0, r2
 8003a3e:	f7fe fbaa 	bl	8002196 <vListInsert>
}
 8003a42:	e016      	b.n	8003a72 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003a44:	4b0e      	ldr	r3, [pc, #56]	; (8003a80 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2104      	movs	r1, #4
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f003 fa38 	bl	8006ec0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a50:	4b0f      	ldr	r3, [pc, #60]	; (8003a90 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	4b0a      	ldr	r3, [pc, #40]	; (8003a80 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	3304      	adds	r3, #4
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	4610      	mov	r0, r2
 8003a5e:	f7fe fb9a 	bl	8002196 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003a62:	4b0c      	ldr	r3, [pc, #48]	; (8003a94 <prvAddCurrentTaskToDelayedList+0xec>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d202      	bcs.n	8003a72 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003a6c:	4a09      	ldr	r2, [pc, #36]	; (8003a94 <prvAddCurrentTaskToDelayedList+0xec>)
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	6013      	str	r3, [r2, #0]
}
 8003a72:	bf00      	nop
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	20000114 	.word	0x20000114
 8003a80:	20000038 	.word	0x20000038
 8003a84:	20000118 	.word	0x20000118
 8003a88:	200000fc 	.word	0x200000fc
 8003a8c:	200000cc 	.word	0x200000cc
 8003a90:	200000c8 	.word	0x200000c8
 8003a94:	20000130 	.word	0x20000130

08003a98 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003aa2:	f000 fad5 	bl	8004050 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003aa6:	4b11      	ldr	r3, [pc, #68]	; (8003aec <xTimerCreateTimerTask+0x54>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00b      	beq.n	8003ac6 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003aae:	4b10      	ldr	r3, [pc, #64]	; (8003af0 <xTimerCreateTimerTask+0x58>)
 8003ab0:	9301      	str	r3, [sp, #4]
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003abc:	490d      	ldr	r1, [pc, #52]	; (8003af4 <xTimerCreateTimerTask+0x5c>)
 8003abe:	480e      	ldr	r0, [pc, #56]	; (8003af8 <xTimerCreateTimerTask+0x60>)
 8003ac0:	f7ff f926 	bl	8002d10 <xTaskCreate>
 8003ac4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10a      	bne.n	8003ae2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad0:	f383 8811 	msr	BASEPRI, r3
 8003ad4:	f3bf 8f6f 	isb	sy
 8003ad8:	f3bf 8f4f 	dsb	sy
 8003adc:	603b      	str	r3, [r7, #0]
    }
 8003ade:	bf00      	nop
 8003ae0:	e7fe      	b.n	8003ae0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003ae2:	687b      	ldr	r3, [r7, #4]
    }
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	2000016c 	.word	0x2000016c
 8003af0:	20000170 	.word	0x20000170
 8003af4:	080073f8 	.word	0x080073f8
 8003af8:	08003c31 	.word	0x08003c31

08003afc <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08a      	sub	sp, #40	; 0x28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
 8003b08:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10a      	bne.n	8003b2a <xTimerGenericCommand+0x2e>
        __asm volatile
 8003b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b18:	f383 8811 	msr	BASEPRI, r3
 8003b1c:	f3bf 8f6f 	isb	sy
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	623b      	str	r3, [r7, #32]
    }
 8003b26:	bf00      	nop
 8003b28:	e7fe      	b.n	8003b28 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003b2a:	4b1a      	ldr	r3, [pc, #104]	; (8003b94 <xTimerGenericCommand+0x98>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d02a      	beq.n	8003b88 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2b05      	cmp	r3, #5
 8003b42:	dc18      	bgt.n	8003b76 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003b44:	f7ff fe92 	bl	800386c <xTaskGetSchedulerState>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d109      	bne.n	8003b62 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003b4e:	4b11      	ldr	r3, [pc, #68]	; (8003b94 <xTimerGenericCommand+0x98>)
 8003b50:	6818      	ldr	r0, [r3, #0]
 8003b52:	f107 0114 	add.w	r1, r7, #20
 8003b56:	2300      	movs	r3, #0
 8003b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b5a:	f7fe fc6f 	bl	800243c <xQueueGenericSend>
 8003b5e:	6278      	str	r0, [r7, #36]	; 0x24
 8003b60:	e012      	b.n	8003b88 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003b62:	4b0c      	ldr	r3, [pc, #48]	; (8003b94 <xTimerGenericCommand+0x98>)
 8003b64:	6818      	ldr	r0, [r3, #0]
 8003b66:	f107 0114 	add.w	r1, r7, #20
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f7fe fc65 	bl	800243c <xQueueGenericSend>
 8003b72:	6278      	str	r0, [r7, #36]	; 0x24
 8003b74:	e008      	b.n	8003b88 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003b76:	4b07      	ldr	r3, [pc, #28]	; (8003b94 <xTimerGenericCommand+0x98>)
 8003b78:	6818      	ldr	r0, [r3, #0]
 8003b7a:	f107 0114 	add.w	r1, r7, #20
 8003b7e:	2300      	movs	r3, #0
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	f7fe fd81 	bl	8002688 <xQueueGenericSendFromISR>
 8003b86:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3728      	adds	r7, #40	; 0x28
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	2000016c 	.word	0x2000016c

08003b98 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b088      	sub	sp, #32
 8003b9c:	af02      	add	r7, sp, #8
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ba2:	4b22      	ldr	r3, [pc, #136]	; (8003c2c <prvProcessExpiredTimer+0x94>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	3304      	adds	r3, #4
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7fe fb29 	bl	8002208 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d022      	beq.n	8003c0a <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	699a      	ldr	r2, [r3, #24]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	18d1      	adds	r1, r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	6978      	ldr	r0, [r7, #20]
 8003bd2:	f000 f8d1 	bl	8003d78 <prvInsertTimerInActiveList>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d01f      	beq.n	8003c1c <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003bdc:	2300      	movs	r3, #0
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	2300      	movs	r3, #0
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	2100      	movs	r1, #0
 8003be6:	6978      	ldr	r0, [r7, #20]
 8003be8:	f7ff ff88 	bl	8003afc <xTimerGenericCommand>
 8003bec:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d113      	bne.n	8003c1c <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf8:	f383 8811 	msr	BASEPRI, r3
 8003bfc:	f3bf 8f6f 	isb	sy
 8003c00:	f3bf 8f4f 	dsb	sy
 8003c04:	60fb      	str	r3, [r7, #12]
    }
 8003c06:	bf00      	nop
 8003c08:	e7fe      	b.n	8003c08 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c10:	f023 0301 	bic.w	r3, r3, #1
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	6978      	ldr	r0, [r7, #20]
 8003c22:	4798      	blx	r3
    }
 8003c24:	bf00      	nop
 8003c26:	3718      	adds	r7, #24
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	20000164 	.word	0x20000164

08003c30 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c38:	f107 0308 	add.w	r3, r7, #8
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f000 f857 	bl	8003cf0 <prvGetNextExpireTime>
 8003c42:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	4619      	mov	r1, r3
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 f803 	bl	8003c54 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003c4e:	f000 f8d5 	bl	8003dfc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c52:	e7f1      	b.n	8003c38 <prvTimerTask+0x8>

08003c54 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003c5e:	f7ff fa1d 	bl	800309c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c62:	f107 0308 	add.w	r3, r7, #8
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 f866 	bl	8003d38 <prvSampleTimeNow>
 8003c6c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d130      	bne.n	8003cd6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10a      	bne.n	8003c90 <prvProcessTimerOrBlockTask+0x3c>
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d806      	bhi.n	8003c90 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003c82:	f7ff fa19 	bl	80030b8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003c86:	68f9      	ldr	r1, [r7, #12]
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7ff ff85 	bl	8003b98 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003c8e:	e024      	b.n	8003cda <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d008      	beq.n	8003ca8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003c96:	4b13      	ldr	r3, [pc, #76]	; (8003ce4 <prvProcessTimerOrBlockTask+0x90>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <prvProcessTimerOrBlockTask+0x50>
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e000      	b.n	8003ca6 <prvProcessTimerOrBlockTask+0x52>
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003ca8:	4b0f      	ldr	r3, [pc, #60]	; (8003ce8 <prvProcessTimerOrBlockTask+0x94>)
 8003caa:	6818      	ldr	r0, [r3, #0]
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	f7fe fff7 	bl	8002ca8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003cba:	f7ff f9fd 	bl	80030b8 <xTaskResumeAll>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10a      	bne.n	8003cda <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003cc4:	4b09      	ldr	r3, [pc, #36]	; (8003cec <prvProcessTimerOrBlockTask+0x98>)
 8003cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	f3bf 8f4f 	dsb	sy
 8003cd0:	f3bf 8f6f 	isb	sy
    }
 8003cd4:	e001      	b.n	8003cda <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003cd6:	f7ff f9ef 	bl	80030b8 <xTaskResumeAll>
    }
 8003cda:	bf00      	nop
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20000168 	.word	0x20000168
 8003ce8:	2000016c 	.word	0x2000016c
 8003cec:	e000ed04 	.word	0xe000ed04

08003cf0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003cf8:	4b0e      	ldr	r3, [pc, #56]	; (8003d34 <prvGetNextExpireTime+0x44>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <prvGetNextExpireTime+0x16>
 8003d02:	2201      	movs	r2, #1
 8003d04:	e000      	b.n	8003d08 <prvGetNextExpireTime+0x18>
 8003d06:	2200      	movs	r2, #0
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d105      	bne.n	8003d20 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d14:	4b07      	ldr	r3, [pc, #28]	; (8003d34 <prvGetNextExpireTime+0x44>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	60fb      	str	r3, [r7, #12]
 8003d1e:	e001      	b.n	8003d24 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003d20:	2300      	movs	r3, #0
 8003d22:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003d24:	68fb      	ldr	r3, [r7, #12]
    }
 8003d26:	4618      	mov	r0, r3
 8003d28:	3714      	adds	r7, #20
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	20000164 	.word	0x20000164

08003d38 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003d40:	f7ff fa5a 	bl	80031f8 <xTaskGetTickCount>
 8003d44:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003d46:	4b0b      	ldr	r3, [pc, #44]	; (8003d74 <prvSampleTimeNow+0x3c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d205      	bcs.n	8003d5c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003d50:	f000 f91a 	bl	8003f88 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	e002      	b.n	8003d62 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003d62:	4a04      	ldr	r2, [pc, #16]	; (8003d74 <prvSampleTimeNow+0x3c>)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003d68:	68fb      	ldr	r3, [r7, #12]
    }
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	20000174 	.word	0x20000174

08003d78 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
 8003d84:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003d86:	2300      	movs	r3, #0
 8003d88:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d812      	bhi.n	8003dc4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	1ad2      	subs	r2, r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d302      	bcc.n	8003db2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003dac:	2301      	movs	r3, #1
 8003dae:	617b      	str	r3, [r7, #20]
 8003db0:	e01b      	b.n	8003dea <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003db2:	4b10      	ldr	r3, [pc, #64]	; (8003df4 <prvInsertTimerInActiveList+0x7c>)
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	3304      	adds	r3, #4
 8003dba:	4619      	mov	r1, r3
 8003dbc:	4610      	mov	r0, r2
 8003dbe:	f7fe f9ea 	bl	8002196 <vListInsert>
 8003dc2:	e012      	b.n	8003dea <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d206      	bcs.n	8003dda <prvInsertTimerInActiveList+0x62>
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d302      	bcc.n	8003dda <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	617b      	str	r3, [r7, #20]
 8003dd8:	e007      	b.n	8003dea <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003dda:	4b07      	ldr	r3, [pc, #28]	; (8003df8 <prvInsertTimerInActiveList+0x80>)
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	3304      	adds	r3, #4
 8003de2:	4619      	mov	r1, r3
 8003de4:	4610      	mov	r0, r2
 8003de6:	f7fe f9d6 	bl	8002196 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003dea:	697b      	ldr	r3, [r7, #20]
    }
 8003dec:	4618      	mov	r0, r3
 8003dee:	3718      	adds	r7, #24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	20000168 	.word	0x20000168
 8003df8:	20000164 	.word	0x20000164

08003dfc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b08c      	sub	sp, #48	; 0x30
 8003e00:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e02:	e0ae      	b.n	8003f62 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f2c0 80aa 	blt.w	8003f60 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d004      	beq.n	8003e22 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7fe f9f3 	bl	8002208 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e22:	1d3b      	adds	r3, r7, #4
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff ff87 	bl	8003d38 <prvSampleTimeNow>
 8003e2a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	2b09      	cmp	r3, #9
 8003e30:	f200 8097 	bhi.w	8003f62 <prvProcessReceivedCommands+0x166>
 8003e34:	a201      	add	r2, pc, #4	; (adr r2, 8003e3c <prvProcessReceivedCommands+0x40>)
 8003e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3a:	bf00      	nop
 8003e3c:	08003e65 	.word	0x08003e65
 8003e40:	08003e65 	.word	0x08003e65
 8003e44:	08003e65 	.word	0x08003e65
 8003e48:	08003ed9 	.word	0x08003ed9
 8003e4c:	08003eed 	.word	0x08003eed
 8003e50:	08003f37 	.word	0x08003f37
 8003e54:	08003e65 	.word	0x08003e65
 8003e58:	08003e65 	.word	0x08003e65
 8003e5c:	08003ed9 	.word	0x08003ed9
 8003e60:	08003eed 	.word	0x08003eed
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e6a:	f043 0301 	orr.w	r3, r3, #1
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	18d1      	adds	r1, r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6a3a      	ldr	r2, [r7, #32]
 8003e82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e84:	f7ff ff78 	bl	8003d78 <prvInsertTimerInActiveList>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d069      	beq.n	8003f62 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e94:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d05e      	beq.n	8003f62 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	441a      	add	r2, r3
 8003eac:	2300      	movs	r3, #0
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003eb6:	f7ff fe21 	bl	8003afc <xTimerGenericCommand>
 8003eba:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d14f      	bne.n	8003f62 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec6:	f383 8811 	msr	BASEPRI, r3
 8003eca:	f3bf 8f6f 	isb	sy
 8003ece:	f3bf 8f4f 	dsb	sy
 8003ed2:	61bb      	str	r3, [r7, #24]
    }
 8003ed4:	bf00      	nop
 8003ed6:	e7fe      	b.n	8003ed6 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ede:	f023 0301 	bic.w	r3, r3, #1
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003eea:	e03a      	b.n	8003f62 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ef2:	f043 0301 	orr.w	r3, r3, #1
 8003ef6:	b2da      	uxtb	r2, r3
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10a      	bne.n	8003f22 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8003f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f10:	f383 8811 	msr	BASEPRI, r3
 8003f14:	f3bf 8f6f 	isb	sy
 8003f18:	f3bf 8f4f 	dsb	sy
 8003f1c:	617b      	str	r3, [r7, #20]
    }
 8003f1e:	bf00      	nop
 8003f20:	e7fe      	b.n	8003f20 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	699a      	ldr	r2, [r3, #24]
 8003f26:	6a3b      	ldr	r3, [r7, #32]
 8003f28:	18d1      	adds	r1, r2, r3
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	6a3a      	ldr	r2, [r7, #32]
 8003f2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f30:	f7ff ff22 	bl	8003d78 <prvInsertTimerInActiveList>
                        break;
 8003f34:	e015      	b.n	8003f62 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d103      	bne.n	8003f4c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8003f44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f46:	f000 fc71 	bl	800482c <vPortFree>
 8003f4a:	e00a      	b.n	8003f62 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f52:	f023 0301 	bic.w	r3, r3, #1
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003f5e:	e000      	b.n	8003f62 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003f60:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f62:	4b08      	ldr	r3, [pc, #32]	; (8003f84 <prvProcessReceivedCommands+0x188>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f107 0108 	add.w	r1, r7, #8
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7fe fc49 	bl	8002804 <xQueueReceive>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f47f af45 	bne.w	8003e04 <prvProcessReceivedCommands+0x8>
        }
    }
 8003f7a:	bf00      	nop
 8003f7c:	bf00      	nop
 8003f7e:	3728      	adds	r7, #40	; 0x28
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	2000016c 	.word	0x2000016c

08003f88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b088      	sub	sp, #32
 8003f8c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f8e:	e048      	b.n	8004022 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f90:	4b2d      	ldr	r3, [pc, #180]	; (8004048 <prvSwitchTimerLists+0xc0>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f9a:	4b2b      	ldr	r3, [pc, #172]	; (8004048 <prvSwitchTimerLists+0xc0>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7fe f92d 	bl	8002208 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d02e      	beq.n	8004022 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	4413      	add	r3, r2
 8003fcc:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d90e      	bls.n	8003ff4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003fe2:	4b19      	ldr	r3, [pc, #100]	; (8004048 <prvSwitchTimerLists+0xc0>)
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	3304      	adds	r3, #4
 8003fea:	4619      	mov	r1, r3
 8003fec:	4610      	mov	r0, r2
 8003fee:	f7fe f8d2 	bl	8002196 <vListInsert>
 8003ff2:	e016      	b.n	8004022 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f7ff fd7c 	bl	8003afc <xTimerGenericCommand>
 8004004:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10a      	bne.n	8004022 <prvSwitchTimerLists+0x9a>
        __asm volatile
 800400c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004010:	f383 8811 	msr	BASEPRI, r3
 8004014:	f3bf 8f6f 	isb	sy
 8004018:	f3bf 8f4f 	dsb	sy
 800401c:	603b      	str	r3, [r7, #0]
    }
 800401e:	bf00      	nop
 8004020:	e7fe      	b.n	8004020 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004022:	4b09      	ldr	r3, [pc, #36]	; (8004048 <prvSwitchTimerLists+0xc0>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1b1      	bne.n	8003f90 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800402c:	4b06      	ldr	r3, [pc, #24]	; (8004048 <prvSwitchTimerLists+0xc0>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004032:	4b06      	ldr	r3, [pc, #24]	; (800404c <prvSwitchTimerLists+0xc4>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a04      	ldr	r2, [pc, #16]	; (8004048 <prvSwitchTimerLists+0xc0>)
 8004038:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800403a:	4a04      	ldr	r2, [pc, #16]	; (800404c <prvSwitchTimerLists+0xc4>)
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	6013      	str	r3, [r2, #0]
    }
 8004040:	bf00      	nop
 8004042:	3718      	adds	r7, #24
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	20000164 	.word	0x20000164
 800404c:	20000168 	.word	0x20000168

08004050 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004054:	f000 f9de 	bl	8004414 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004058:	4b12      	ldr	r3, [pc, #72]	; (80040a4 <prvCheckForValidListAndQueue+0x54>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d11d      	bne.n	800409c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004060:	4811      	ldr	r0, [pc, #68]	; (80040a8 <prvCheckForValidListAndQueue+0x58>)
 8004062:	f7fe f847 	bl	80020f4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004066:	4811      	ldr	r0, [pc, #68]	; (80040ac <prvCheckForValidListAndQueue+0x5c>)
 8004068:	f7fe f844 	bl	80020f4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800406c:	4b10      	ldr	r3, [pc, #64]	; (80040b0 <prvCheckForValidListAndQueue+0x60>)
 800406e:	4a0e      	ldr	r2, [pc, #56]	; (80040a8 <prvCheckForValidListAndQueue+0x58>)
 8004070:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004072:	4b10      	ldr	r3, [pc, #64]	; (80040b4 <prvCheckForValidListAndQueue+0x64>)
 8004074:	4a0d      	ldr	r2, [pc, #52]	; (80040ac <prvCheckForValidListAndQueue+0x5c>)
 8004076:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004078:	2200      	movs	r2, #0
 800407a:	210c      	movs	r1, #12
 800407c:	200a      	movs	r0, #10
 800407e:	f7fe f955 	bl	800232c <xQueueGenericCreate>
 8004082:	4603      	mov	r3, r0
 8004084:	4a07      	ldr	r2, [pc, #28]	; (80040a4 <prvCheckForValidListAndQueue+0x54>)
 8004086:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004088:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <prvCheckForValidListAndQueue+0x54>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d005      	beq.n	800409c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004090:	4b04      	ldr	r3, [pc, #16]	; (80040a4 <prvCheckForValidListAndQueue+0x54>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4908      	ldr	r1, [pc, #32]	; (80040b8 <prvCheckForValidListAndQueue+0x68>)
 8004096:	4618      	mov	r0, r3
 8004098:	f7fe fdd4 	bl	8002c44 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800409c:	f000 f9ea 	bl	8004474 <vPortExitCritical>
    }
 80040a0:	bf00      	nop
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	2000016c 	.word	0x2000016c
 80040a8:	2000013c 	.word	0x2000013c
 80040ac:	20000150 	.word	0x20000150
 80040b0:	20000164 	.word	0x20000164
 80040b4:	20000168 	.word	0x20000168
 80040b8:	08007400 	.word	0x08007400

080040bc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	3b04      	subs	r3, #4
 80040cc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040d4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	3b04      	subs	r3, #4
 80040da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f023 0201 	bic.w	r2, r3, #1
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	3b04      	subs	r3, #4
 80040ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80040ec:	4a0c      	ldr	r2, [pc, #48]	; (8004120 <pxPortInitialiseStack+0x64>)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	3b14      	subs	r3, #20
 80040f6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	3b04      	subs	r3, #4
 8004102:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f06f 0202 	mvn.w	r2, #2
 800410a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	3b20      	subs	r3, #32
 8004110:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004112:	68fb      	ldr	r3, [r7, #12]
}
 8004114:	4618      	mov	r0, r3
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	08004125 	.word	0x08004125

08004124 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800412a:	2300      	movs	r3, #0
 800412c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800412e:	4b12      	ldr	r3, [pc, #72]	; (8004178 <prvTaskExitError+0x54>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004136:	d00a      	beq.n	800414e <prvTaskExitError+0x2a>
        __asm volatile
 8004138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413c:	f383 8811 	msr	BASEPRI, r3
 8004140:	f3bf 8f6f 	isb	sy
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	60fb      	str	r3, [r7, #12]
    }
 800414a:	bf00      	nop
 800414c:	e7fe      	b.n	800414c <prvTaskExitError+0x28>
        __asm volatile
 800414e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004152:	f383 8811 	msr	BASEPRI, r3
 8004156:	f3bf 8f6f 	isb	sy
 800415a:	f3bf 8f4f 	dsb	sy
 800415e:	60bb      	str	r3, [r7, #8]
    }
 8004160:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004162:	bf00      	nop
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0fc      	beq.n	8004164 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800416a:	bf00      	nop
 800416c:	bf00      	nop
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	20000010 	.word	0x20000010
 800417c:	00000000 	.word	0x00000000

08004180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004180:	4b07      	ldr	r3, [pc, #28]	; (80041a0 <pxCurrentTCBConst2>)
 8004182:	6819      	ldr	r1, [r3, #0]
 8004184:	6808      	ldr	r0, [r1, #0]
 8004186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800418a:	f380 8809 	msr	PSP, r0
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f04f 0000 	mov.w	r0, #0
 8004196:	f380 8811 	msr	BASEPRI, r0
 800419a:	4770      	bx	lr
 800419c:	f3af 8000 	nop.w

080041a0 <pxCurrentTCBConst2>:
 80041a0:	20000038 	.word	0x20000038
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80041a4:	bf00      	nop
 80041a6:	bf00      	nop

080041a8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80041a8:	4808      	ldr	r0, [pc, #32]	; (80041cc <prvPortStartFirstTask+0x24>)
 80041aa:	6800      	ldr	r0, [r0, #0]
 80041ac:	6800      	ldr	r0, [r0, #0]
 80041ae:	f380 8808 	msr	MSP, r0
 80041b2:	f04f 0000 	mov.w	r0, #0
 80041b6:	f380 8814 	msr	CONTROL, r0
 80041ba:	b662      	cpsie	i
 80041bc:	b661      	cpsie	f
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	f3bf 8f6f 	isb	sy
 80041c6:	df00      	svc	0
 80041c8:	bf00      	nop
 80041ca:	0000      	.short	0x0000
 80041cc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80041d0:	bf00      	nop
 80041d2:	bf00      	nop

080041d4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80041da:	4b46      	ldr	r3, [pc, #280]	; (80042f4 <xPortStartScheduler+0x120>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a46      	ldr	r2, [pc, #280]	; (80042f8 <xPortStartScheduler+0x124>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d10a      	bne.n	80041fa <xPortStartScheduler+0x26>
        __asm volatile
 80041e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e8:	f383 8811 	msr	BASEPRI, r3
 80041ec:	f3bf 8f6f 	isb	sy
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	613b      	str	r3, [r7, #16]
    }
 80041f6:	bf00      	nop
 80041f8:	e7fe      	b.n	80041f8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80041fa:	4b3e      	ldr	r3, [pc, #248]	; (80042f4 <xPortStartScheduler+0x120>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a3f      	ldr	r2, [pc, #252]	; (80042fc <xPortStartScheduler+0x128>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d10a      	bne.n	800421a <xPortStartScheduler+0x46>
        __asm volatile
 8004204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	60fb      	str	r3, [r7, #12]
    }
 8004216:	bf00      	nop
 8004218:	e7fe      	b.n	8004218 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800421a:	4b39      	ldr	r3, [pc, #228]	; (8004300 <xPortStartScheduler+0x12c>)
 800421c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	b2db      	uxtb	r3, r3
 8004224:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	22ff      	movs	r2, #255	; 0xff
 800422a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	b2db      	uxtb	r3, r3
 8004232:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004234:	78fb      	ldrb	r3, [r7, #3]
 8004236:	b2db      	uxtb	r3, r3
 8004238:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800423c:	b2da      	uxtb	r2, r3
 800423e:	4b31      	ldr	r3, [pc, #196]	; (8004304 <xPortStartScheduler+0x130>)
 8004240:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004242:	4b31      	ldr	r3, [pc, #196]	; (8004308 <xPortStartScheduler+0x134>)
 8004244:	2207      	movs	r2, #7
 8004246:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004248:	e009      	b.n	800425e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800424a:	4b2f      	ldr	r3, [pc, #188]	; (8004308 <xPortStartScheduler+0x134>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	3b01      	subs	r3, #1
 8004250:	4a2d      	ldr	r2, [pc, #180]	; (8004308 <xPortStartScheduler+0x134>)
 8004252:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004254:	78fb      	ldrb	r3, [r7, #3]
 8004256:	b2db      	uxtb	r3, r3
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	b2db      	uxtb	r3, r3
 800425c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800425e:	78fb      	ldrb	r3, [r7, #3]
 8004260:	b2db      	uxtb	r3, r3
 8004262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004266:	2b80      	cmp	r3, #128	; 0x80
 8004268:	d0ef      	beq.n	800424a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800426a:	4b27      	ldr	r3, [pc, #156]	; (8004308 <xPortStartScheduler+0x134>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f1c3 0307 	rsb	r3, r3, #7
 8004272:	2b04      	cmp	r3, #4
 8004274:	d00a      	beq.n	800428c <xPortStartScheduler+0xb8>
        __asm volatile
 8004276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427a:	f383 8811 	msr	BASEPRI, r3
 800427e:	f3bf 8f6f 	isb	sy
 8004282:	f3bf 8f4f 	dsb	sy
 8004286:	60bb      	str	r3, [r7, #8]
    }
 8004288:	bf00      	nop
 800428a:	e7fe      	b.n	800428a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800428c:	4b1e      	ldr	r3, [pc, #120]	; (8004308 <xPortStartScheduler+0x134>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	021b      	lsls	r3, r3, #8
 8004292:	4a1d      	ldr	r2, [pc, #116]	; (8004308 <xPortStartScheduler+0x134>)
 8004294:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004296:	4b1c      	ldr	r3, [pc, #112]	; (8004308 <xPortStartScheduler+0x134>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800429e:	4a1a      	ldr	r2, [pc, #104]	; (8004308 <xPortStartScheduler+0x134>)
 80042a0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80042aa:	4b18      	ldr	r3, [pc, #96]	; (800430c <xPortStartScheduler+0x138>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a17      	ldr	r2, [pc, #92]	; (800430c <xPortStartScheduler+0x138>)
 80042b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042b4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80042b6:	4b15      	ldr	r3, [pc, #84]	; (800430c <xPortStartScheduler+0x138>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a14      	ldr	r2, [pc, #80]	; (800430c <xPortStartScheduler+0x138>)
 80042bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80042c0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80042c2:	f000 f963 	bl	800458c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80042c6:	4b12      	ldr	r3, [pc, #72]	; (8004310 <xPortStartScheduler+0x13c>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80042cc:	f000 f982 	bl	80045d4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80042d0:	4b10      	ldr	r3, [pc, #64]	; (8004314 <xPortStartScheduler+0x140>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a0f      	ldr	r2, [pc, #60]	; (8004314 <xPortStartScheduler+0x140>)
 80042d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80042da:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80042dc:	f7ff ff64 	bl	80041a8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80042e0:	f7ff f868 	bl	80033b4 <vTaskSwitchContext>
    prvTaskExitError();
 80042e4:	f7ff ff1e 	bl	8004124 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3718      	adds	r7, #24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	e000ed00 	.word	0xe000ed00
 80042f8:	410fc271 	.word	0x410fc271
 80042fc:	410fc270 	.word	0x410fc270
 8004300:	e000e400 	.word	0xe000e400
 8004304:	20000178 	.word	0x20000178
 8004308:	2000017c 	.word	0x2000017c
 800430c:	e000ed20 	.word	0xe000ed20
 8004310:	20000010 	.word	0x20000010
 8004314:	e000ef34 	.word	0xe000ef34

08004318 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004318:	b480      	push	{r7}
 800431a:	b087      	sub	sp, #28
 800431c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800431e:	4b37      	ldr	r3, [pc, #220]	; (80043fc <vInitPrioGroupValue+0xe4>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a37      	ldr	r2, [pc, #220]	; (8004400 <vInitPrioGroupValue+0xe8>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d10a      	bne.n	800433e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432c:	f383 8811 	msr	BASEPRI, r3
 8004330:	f3bf 8f6f 	isb	sy
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	613b      	str	r3, [r7, #16]
    }
 800433a:	bf00      	nop
 800433c:	e7fe      	b.n	800433c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800433e:	4b2f      	ldr	r3, [pc, #188]	; (80043fc <vInitPrioGroupValue+0xe4>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a30      	ldr	r2, [pc, #192]	; (8004404 <vInitPrioGroupValue+0xec>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d10a      	bne.n	800435e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434c:	f383 8811 	msr	BASEPRI, r3
 8004350:	f3bf 8f6f 	isb	sy
 8004354:	f3bf 8f4f 	dsb	sy
 8004358:	60fb      	str	r3, [r7, #12]
    }
 800435a:	bf00      	nop
 800435c:	e7fe      	b.n	800435c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800435e:	4b2a      	ldr	r3, [pc, #168]	; (8004408 <vInitPrioGroupValue+0xf0>)
 8004360:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	b2db      	uxtb	r3, r3
 8004368:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	22ff      	movs	r2, #255	; 0xff
 800436e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	b2db      	uxtb	r3, r3
 8004376:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004378:	78fb      	ldrb	r3, [r7, #3]
 800437a:	b2db      	uxtb	r3, r3
 800437c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004380:	b2da      	uxtb	r2, r3
 8004382:	4b22      	ldr	r3, [pc, #136]	; (800440c <vInitPrioGroupValue+0xf4>)
 8004384:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004386:	4b22      	ldr	r3, [pc, #136]	; (8004410 <vInitPrioGroupValue+0xf8>)
 8004388:	2207      	movs	r2, #7
 800438a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800438c:	e009      	b.n	80043a2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800438e:	4b20      	ldr	r3, [pc, #128]	; (8004410 <vInitPrioGroupValue+0xf8>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	3b01      	subs	r3, #1
 8004394:	4a1e      	ldr	r2, [pc, #120]	; (8004410 <vInitPrioGroupValue+0xf8>)
 8004396:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004398:	78fb      	ldrb	r3, [r7, #3]
 800439a:	b2db      	uxtb	r3, r3
 800439c:	005b      	lsls	r3, r3, #1
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043a2:	78fb      	ldrb	r3, [r7, #3]
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043aa:	2b80      	cmp	r3, #128	; 0x80
 80043ac:	d0ef      	beq.n	800438e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80043ae:	4b18      	ldr	r3, [pc, #96]	; (8004410 <vInitPrioGroupValue+0xf8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f1c3 0307 	rsb	r3, r3, #7
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	d00a      	beq.n	80043d0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80043ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	60bb      	str	r3, [r7, #8]
    }
 80043cc:	bf00      	nop
 80043ce:	e7fe      	b.n	80043ce <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80043d0:	4b0f      	ldr	r3, [pc, #60]	; (8004410 <vInitPrioGroupValue+0xf8>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	021b      	lsls	r3, r3, #8
 80043d6:	4a0e      	ldr	r2, [pc, #56]	; (8004410 <vInitPrioGroupValue+0xf8>)
 80043d8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043da:	4b0d      	ldr	r3, [pc, #52]	; (8004410 <vInitPrioGroupValue+0xf8>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043e2:	4a0b      	ldr	r2, [pc, #44]	; (8004410 <vInitPrioGroupValue+0xf8>)
 80043e4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	b2da      	uxtb	r2, r3
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80043ee:	bf00      	nop
 80043f0:	371c      	adds	r7, #28
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	e000ed00 	.word	0xe000ed00
 8004400:	410fc271 	.word	0x410fc271
 8004404:	410fc270 	.word	0x410fc270
 8004408:	e000e400 	.word	0xe000e400
 800440c:	20000178 	.word	0x20000178
 8004410:	2000017c 	.word	0x2000017c

08004414 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
        __asm volatile
 800441a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441e:	f383 8811 	msr	BASEPRI, r3
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	607b      	str	r3, [r7, #4]
    }
 800442c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800442e:	4b0f      	ldr	r3, [pc, #60]	; (800446c <vPortEnterCritical+0x58>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	3301      	adds	r3, #1
 8004434:	4a0d      	ldr	r2, [pc, #52]	; (800446c <vPortEnterCritical+0x58>)
 8004436:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004438:	4b0c      	ldr	r3, [pc, #48]	; (800446c <vPortEnterCritical+0x58>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d10f      	bne.n	8004460 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004440:	4b0b      	ldr	r3, [pc, #44]	; (8004470 <vPortEnterCritical+0x5c>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00a      	beq.n	8004460 <vPortEnterCritical+0x4c>
        __asm volatile
 800444a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444e:	f383 8811 	msr	BASEPRI, r3
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	603b      	str	r3, [r7, #0]
    }
 800445c:	bf00      	nop
 800445e:	e7fe      	b.n	800445e <vPortEnterCritical+0x4a>
    }
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr
 800446c:	20000010 	.word	0x20000010
 8004470:	e000ed04 	.word	0xe000ed04

08004474 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800447a:	4b12      	ldr	r3, [pc, #72]	; (80044c4 <vPortExitCritical+0x50>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10a      	bne.n	8004498 <vPortExitCritical+0x24>
        __asm volatile
 8004482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004486:	f383 8811 	msr	BASEPRI, r3
 800448a:	f3bf 8f6f 	isb	sy
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	607b      	str	r3, [r7, #4]
    }
 8004494:	bf00      	nop
 8004496:	e7fe      	b.n	8004496 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004498:	4b0a      	ldr	r3, [pc, #40]	; (80044c4 <vPortExitCritical+0x50>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3b01      	subs	r3, #1
 800449e:	4a09      	ldr	r2, [pc, #36]	; (80044c4 <vPortExitCritical+0x50>)
 80044a0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80044a2:	4b08      	ldr	r3, [pc, #32]	; (80044c4 <vPortExitCritical+0x50>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d105      	bne.n	80044b6 <vPortExitCritical+0x42>
 80044aa:	2300      	movs	r3, #0
 80044ac:	603b      	str	r3, [r7, #0]
        __asm volatile
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	f383 8811 	msr	BASEPRI, r3
    }
 80044b4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80044b6:	bf00      	nop
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	20000010 	.word	0x20000010
	...

080044d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80044d0:	f3ef 8009 	mrs	r0, PSP
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	4b15      	ldr	r3, [pc, #84]	; (8004530 <pxCurrentTCBConst>)
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	f01e 0f10 	tst.w	lr, #16
 80044e0:	bf08      	it	eq
 80044e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80044e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ea:	6010      	str	r0, [r2, #0]
 80044ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80044f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80044f4:	f380 8811 	msr	BASEPRI, r0
 80044f8:	f3bf 8f4f 	dsb	sy
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	f7fe ff58 	bl	80033b4 <vTaskSwitchContext>
 8004504:	f04f 0000 	mov.w	r0, #0
 8004508:	f380 8811 	msr	BASEPRI, r0
 800450c:	bc09      	pop	{r0, r3}
 800450e:	6819      	ldr	r1, [r3, #0]
 8004510:	6808      	ldr	r0, [r1, #0]
 8004512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004516:	f01e 0f10 	tst.w	lr, #16
 800451a:	bf08      	it	eq
 800451c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004520:	f380 8809 	msr	PSP, r0
 8004524:	f3bf 8f6f 	isb	sy
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	f3af 8000 	nop.w

08004530 <pxCurrentTCBConst>:
 8004530:	20000038 	.word	0x20000038
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004534:	bf00      	nop
 8004536:	bf00      	nop

08004538 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
        __asm volatile
 800453e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004542:	f383 8811 	msr	BASEPRI, r3
 8004546:	f3bf 8f6f 	isb	sy
 800454a:	f3bf 8f4f 	dsb	sy
 800454e:	607b      	str	r3, [r7, #4]
    }
 8004550:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004552:	f002 fb59 	bl	8006c08 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004556:	f7fe fe71 	bl	800323c <xTaskIncrementTick>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d006      	beq.n	800456e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004560:	f002 fbb0 	bl	8006cc4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004564:	4b08      	ldr	r3, [pc, #32]	; (8004588 <SysTick_Handler+0x50>)
 8004566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	e001      	b.n	8004572 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800456e:	f002 fb8d 	bl	8006c8c <SEGGER_SYSVIEW_RecordExitISR>
 8004572:	2300      	movs	r3, #0
 8004574:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	f383 8811 	msr	BASEPRI, r3
    }
 800457c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800457e:	bf00      	nop
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	e000ed04 	.word	0xe000ed04

0800458c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004590:	4b0b      	ldr	r3, [pc, #44]	; (80045c0 <vPortSetupTimerInterrupt+0x34>)
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004596:	4b0b      	ldr	r3, [pc, #44]	; (80045c4 <vPortSetupTimerInterrupt+0x38>)
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800459c:	4b0a      	ldr	r3, [pc, #40]	; (80045c8 <vPortSetupTimerInterrupt+0x3c>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a0a      	ldr	r2, [pc, #40]	; (80045cc <vPortSetupTimerInterrupt+0x40>)
 80045a2:	fba2 2303 	umull	r2, r3, r2, r3
 80045a6:	099b      	lsrs	r3, r3, #6
 80045a8:	4a09      	ldr	r2, [pc, #36]	; (80045d0 <vPortSetupTimerInterrupt+0x44>)
 80045aa:	3b01      	subs	r3, #1
 80045ac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80045ae:	4b04      	ldr	r3, [pc, #16]	; (80045c0 <vPortSetupTimerInterrupt+0x34>)
 80045b0:	2207      	movs	r2, #7
 80045b2:	601a      	str	r2, [r3, #0]
}
 80045b4:	bf00      	nop
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	e000e010 	.word	0xe000e010
 80045c4:	e000e018 	.word	0xe000e018
 80045c8:	20000000 	.word	0x20000000
 80045cc:	10624dd3 	.word	0x10624dd3
 80045d0:	e000e014 	.word	0xe000e014

080045d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80045d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80045e4 <vPortEnableVFP+0x10>
 80045d8:	6801      	ldr	r1, [r0, #0]
 80045da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80045de:	6001      	str	r1, [r0, #0]
 80045e0:	4770      	bx	lr
 80045e2:	0000      	.short	0x0000
 80045e4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80045e8:	bf00      	nop
 80045ea:	bf00      	nop

080045ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80045f2:	f3ef 8305 	mrs	r3, IPSR
 80045f6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2b0f      	cmp	r3, #15
 80045fc:	d914      	bls.n	8004628 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80045fe:	4a17      	ldr	r2, [pc, #92]	; (800465c <vPortValidateInterruptPriority+0x70>)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4413      	add	r3, r2
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004608:	4b15      	ldr	r3, [pc, #84]	; (8004660 <vPortValidateInterruptPriority+0x74>)
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	7afa      	ldrb	r2, [r7, #11]
 800460e:	429a      	cmp	r2, r3
 8004610:	d20a      	bcs.n	8004628 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004616:	f383 8811 	msr	BASEPRI, r3
 800461a:	f3bf 8f6f 	isb	sy
 800461e:	f3bf 8f4f 	dsb	sy
 8004622:	607b      	str	r3, [r7, #4]
    }
 8004624:	bf00      	nop
 8004626:	e7fe      	b.n	8004626 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004628:	4b0e      	ldr	r3, [pc, #56]	; (8004664 <vPortValidateInterruptPriority+0x78>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004630:	4b0d      	ldr	r3, [pc, #52]	; (8004668 <vPortValidateInterruptPriority+0x7c>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	429a      	cmp	r2, r3
 8004636:	d90a      	bls.n	800464e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463c:	f383 8811 	msr	BASEPRI, r3
 8004640:	f3bf 8f6f 	isb	sy
 8004644:	f3bf 8f4f 	dsb	sy
 8004648:	603b      	str	r3, [r7, #0]
    }
 800464a:	bf00      	nop
 800464c:	e7fe      	b.n	800464c <vPortValidateInterruptPriority+0x60>
    }
 800464e:	bf00      	nop
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	e000e3f0 	.word	0xe000e3f0
 8004660:	20000178 	.word	0x20000178
 8004664:	e000ed0c 	.word	0xe000ed0c
 8004668:	2000017c 	.word	0x2000017c

0800466c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b08a      	sub	sp, #40	; 0x28
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004674:	2300      	movs	r3, #0
 8004676:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004678:	f7fe fd10 	bl	800309c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800467c:	4b65      	ldr	r3, [pc, #404]	; (8004814 <pvPortMalloc+0x1a8>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004684:	f000 f934 	bl	80048f0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004688:	4b63      	ldr	r3, [pc, #396]	; (8004818 <pvPortMalloc+0x1ac>)
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4013      	ands	r3, r2
 8004690:	2b00      	cmp	r3, #0
 8004692:	f040 80a7 	bne.w	80047e4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d02d      	beq.n	80046f8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800469c:	2208      	movs	r2, #8
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d227      	bcs.n	80046f8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80046a8:	2208      	movs	r2, #8
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4413      	add	r3, r2
 80046ae:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f003 0307 	and.w	r3, r3, #7
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d021      	beq.n	80046fe <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f023 0307 	bic.w	r3, r3, #7
 80046c0:	3308      	adds	r3, #8
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d214      	bcs.n	80046f2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f023 0307 	bic.w	r3, r3, #7
 80046ce:	3308      	adds	r3, #8
 80046d0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d010      	beq.n	80046fe <pvPortMalloc+0x92>
        __asm volatile
 80046dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e0:	f383 8811 	msr	BASEPRI, r3
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	f3bf 8f4f 	dsb	sy
 80046ec:	617b      	str	r3, [r7, #20]
    }
 80046ee:	bf00      	nop
 80046f0:	e7fe      	b.n	80046f0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80046f2:	2300      	movs	r3, #0
 80046f4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046f6:	e002      	b.n	80046fe <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80046f8:	2300      	movs	r3, #0
 80046fa:	607b      	str	r3, [r7, #4]
 80046fc:	e000      	b.n	8004700 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046fe:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d06e      	beq.n	80047e4 <pvPortMalloc+0x178>
 8004706:	4b45      	ldr	r3, [pc, #276]	; (800481c <pvPortMalloc+0x1b0>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	429a      	cmp	r2, r3
 800470e:	d869      	bhi.n	80047e4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004710:	4b43      	ldr	r3, [pc, #268]	; (8004820 <pvPortMalloc+0x1b4>)
 8004712:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004714:	4b42      	ldr	r3, [pc, #264]	; (8004820 <pvPortMalloc+0x1b4>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800471a:	e004      	b.n	8004726 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	429a      	cmp	r2, r3
 800472e:	d903      	bls.n	8004738 <pvPortMalloc+0xcc>
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1f1      	bne.n	800471c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004738:	4b36      	ldr	r3, [pc, #216]	; (8004814 <pvPortMalloc+0x1a8>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800473e:	429a      	cmp	r2, r3
 8004740:	d050      	beq.n	80047e4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004742:	6a3b      	ldr	r3, [r7, #32]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2208      	movs	r2, #8
 8004748:	4413      	add	r3, r2
 800474a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	1ad2      	subs	r2, r2, r3
 800475c:	2308      	movs	r3, #8
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	429a      	cmp	r2, r3
 8004762:	d91f      	bls.n	80047a4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4413      	add	r3, r2
 800476a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00a      	beq.n	800478c <pvPortMalloc+0x120>
        __asm volatile
 8004776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477a:	f383 8811 	msr	BASEPRI, r3
 800477e:	f3bf 8f6f 	isb	sy
 8004782:	f3bf 8f4f 	dsb	sy
 8004786:	613b      	str	r3, [r7, #16]
    }
 8004788:	bf00      	nop
 800478a:	e7fe      	b.n	800478a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	685a      	ldr	r2, [r3, #4]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	1ad2      	subs	r2, r2, r3
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800479e:	69b8      	ldr	r0, [r7, #24]
 80047a0:	f000 f908 	bl	80049b4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80047a4:	4b1d      	ldr	r3, [pc, #116]	; (800481c <pvPortMalloc+0x1b0>)
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	4a1b      	ldr	r2, [pc, #108]	; (800481c <pvPortMalloc+0x1b0>)
 80047b0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80047b2:	4b1a      	ldr	r3, [pc, #104]	; (800481c <pvPortMalloc+0x1b0>)
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	4b1b      	ldr	r3, [pc, #108]	; (8004824 <pvPortMalloc+0x1b8>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d203      	bcs.n	80047c6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80047be:	4b17      	ldr	r3, [pc, #92]	; (800481c <pvPortMalloc+0x1b0>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a18      	ldr	r2, [pc, #96]	; (8004824 <pvPortMalloc+0x1b8>)
 80047c4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	4b13      	ldr	r3, [pc, #76]	; (8004818 <pvPortMalloc+0x1ac>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	431a      	orrs	r2, r3
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	2200      	movs	r2, #0
 80047d8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80047da:	4b13      	ldr	r3, [pc, #76]	; (8004828 <pvPortMalloc+0x1bc>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	3301      	adds	r3, #1
 80047e0:	4a11      	ldr	r2, [pc, #68]	; (8004828 <pvPortMalloc+0x1bc>)
 80047e2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80047e4:	f7fe fc68 	bl	80030b8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	f003 0307 	and.w	r3, r3, #7
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00a      	beq.n	8004808 <pvPortMalloc+0x19c>
        __asm volatile
 80047f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f6:	f383 8811 	msr	BASEPRI, r3
 80047fa:	f3bf 8f6f 	isb	sy
 80047fe:	f3bf 8f4f 	dsb	sy
 8004802:	60fb      	str	r3, [r7, #12]
    }
 8004804:	bf00      	nop
 8004806:	e7fe      	b.n	8004806 <pvPortMalloc+0x19a>
    return pvReturn;
 8004808:	69fb      	ldr	r3, [r7, #28]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3728      	adds	r7, #40	; 0x28
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	20012d88 	.word	0x20012d88
 8004818:	20012d9c 	.word	0x20012d9c
 800481c:	20012d8c 	.word	0x20012d8c
 8004820:	20012d80 	.word	0x20012d80
 8004824:	20012d90 	.word	0x20012d90
 8004828:	20012d94 	.word	0x20012d94

0800482c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d04d      	beq.n	80048da <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800483e:	2308      	movs	r3, #8
 8004840:	425b      	negs	r3, r3
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	4413      	add	r3, r2
 8004846:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	4b24      	ldr	r3, [pc, #144]	; (80048e4 <vPortFree+0xb8>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4013      	ands	r3, r2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10a      	bne.n	8004870 <vPortFree+0x44>
        __asm volatile
 800485a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485e:	f383 8811 	msr	BASEPRI, r3
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	f3bf 8f4f 	dsb	sy
 800486a:	60fb      	str	r3, [r7, #12]
    }
 800486c:	bf00      	nop
 800486e:	e7fe      	b.n	800486e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00a      	beq.n	800488e <vPortFree+0x62>
        __asm volatile
 8004878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487c:	f383 8811 	msr	BASEPRI, r3
 8004880:	f3bf 8f6f 	isb	sy
 8004884:	f3bf 8f4f 	dsb	sy
 8004888:	60bb      	str	r3, [r7, #8]
    }
 800488a:	bf00      	nop
 800488c:	e7fe      	b.n	800488c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	4b14      	ldr	r3, [pc, #80]	; (80048e4 <vPortFree+0xb8>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4013      	ands	r3, r2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d01e      	beq.n	80048da <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d11a      	bne.n	80048da <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	4b0e      	ldr	r3, [pc, #56]	; (80048e4 <vPortFree+0xb8>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	43db      	mvns	r3, r3
 80048ae:	401a      	ands	r2, r3
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80048b4:	f7fe fbf2 	bl	800309c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	4b0a      	ldr	r3, [pc, #40]	; (80048e8 <vPortFree+0xbc>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4413      	add	r3, r2
 80048c2:	4a09      	ldr	r2, [pc, #36]	; (80048e8 <vPortFree+0xbc>)
 80048c4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80048c6:	6938      	ldr	r0, [r7, #16]
 80048c8:	f000 f874 	bl	80049b4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80048cc:	4b07      	ldr	r3, [pc, #28]	; (80048ec <vPortFree+0xc0>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3301      	adds	r3, #1
 80048d2:	4a06      	ldr	r2, [pc, #24]	; (80048ec <vPortFree+0xc0>)
 80048d4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80048d6:	f7fe fbef 	bl	80030b8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80048da:	bf00      	nop
 80048dc:	3718      	adds	r7, #24
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	20012d9c 	.word	0x20012d9c
 80048e8:	20012d8c 	.word	0x20012d8c
 80048ec:	20012d98 	.word	0x20012d98

080048f0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80048f6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80048fa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80048fc:	4b27      	ldr	r3, [pc, #156]	; (800499c <prvHeapInit+0xac>)
 80048fe:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00c      	beq.n	8004924 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	3307      	adds	r3, #7
 800490e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f023 0307 	bic.w	r3, r3, #7
 8004916:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004918:	68ba      	ldr	r2, [r7, #8]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	4a1f      	ldr	r2, [pc, #124]	; (800499c <prvHeapInit+0xac>)
 8004920:	4413      	add	r3, r2
 8004922:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004928:	4a1d      	ldr	r2, [pc, #116]	; (80049a0 <prvHeapInit+0xb0>)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800492e:	4b1c      	ldr	r3, [pc, #112]	; (80049a0 <prvHeapInit+0xb0>)
 8004930:	2200      	movs	r2, #0
 8004932:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	4413      	add	r3, r2
 800493a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800493c:	2208      	movs	r2, #8
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	1a9b      	subs	r3, r3, r2
 8004942:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f023 0307 	bic.w	r3, r3, #7
 800494a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4a15      	ldr	r2, [pc, #84]	; (80049a4 <prvHeapInit+0xb4>)
 8004950:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004952:	4b14      	ldr	r3, [pc, #80]	; (80049a4 <prvHeapInit+0xb4>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2200      	movs	r2, #0
 8004958:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800495a:	4b12      	ldr	r3, [pc, #72]	; (80049a4 <prvHeapInit+0xb4>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2200      	movs	r2, #0
 8004960:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	1ad2      	subs	r2, r2, r3
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004970:	4b0c      	ldr	r3, [pc, #48]	; (80049a4 <prvHeapInit+0xb4>)
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	4a0a      	ldr	r2, [pc, #40]	; (80049a8 <prvHeapInit+0xb8>)
 800497e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	4a09      	ldr	r2, [pc, #36]	; (80049ac <prvHeapInit+0xbc>)
 8004986:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004988:	4b09      	ldr	r3, [pc, #36]	; (80049b0 <prvHeapInit+0xc0>)
 800498a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800498e:	601a      	str	r2, [r3, #0]
}
 8004990:	bf00      	nop
 8004992:	3714      	adds	r7, #20
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr
 800499c:	20000180 	.word	0x20000180
 80049a0:	20012d80 	.word	0x20012d80
 80049a4:	20012d88 	.word	0x20012d88
 80049a8:	20012d90 	.word	0x20012d90
 80049ac:	20012d8c 	.word	0x20012d8c
 80049b0:	20012d9c 	.word	0x20012d9c

080049b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80049bc:	4b28      	ldr	r3, [pc, #160]	; (8004a60 <prvInsertBlockIntoFreeList+0xac>)
 80049be:	60fb      	str	r3, [r7, #12]
 80049c0:	e002      	b.n	80049c8 <prvInsertBlockIntoFreeList+0x14>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d8f7      	bhi.n	80049c2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	4413      	add	r3, r2
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d108      	bne.n	80049f6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	685a      	ldr	r2, [r3, #4]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	441a      	add	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	441a      	add	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d118      	bne.n	8004a3c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	4b15      	ldr	r3, [pc, #84]	; (8004a64 <prvInsertBlockIntoFreeList+0xb0>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d00d      	beq.n	8004a32 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	441a      	add	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	601a      	str	r2, [r3, #0]
 8004a30:	e008      	b.n	8004a44 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a32:	4b0c      	ldr	r3, [pc, #48]	; (8004a64 <prvInsertBlockIntoFreeList+0xb0>)
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	e003      	b.n	8004a44 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d002      	beq.n	8004a52 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004a52:	bf00      	nop
 8004a54:	3714      	adds	r7, #20
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	20012d80 	.word	0x20012d80
 8004a64:	20012d88 	.word	0x20012d88

08004a68 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004a6e:	2300      	movs	r3, #0
 8004a70:	607b      	str	r3, [r7, #4]
 8004a72:	e033      	b.n	8004adc <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004a74:	491e      	ldr	r1, [pc, #120]	; (8004af0 <_cbSendTaskList+0x88>)
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	440b      	add	r3, r1
 8004a82:	6818      	ldr	r0, [r3, #0]
 8004a84:	491a      	ldr	r1, [pc, #104]	; (8004af0 <_cbSendTaskList+0x88>)
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	440b      	add	r3, r1
 8004a92:	3304      	adds	r3, #4
 8004a94:	6819      	ldr	r1, [r3, #0]
 8004a96:	4c16      	ldr	r4, [pc, #88]	; (8004af0 <_cbSendTaskList+0x88>)
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4423      	add	r3, r4
 8004aa4:	3308      	adds	r3, #8
 8004aa6:	681c      	ldr	r4, [r3, #0]
 8004aa8:	4d11      	ldr	r5, [pc, #68]	; (8004af0 <_cbSendTaskList+0x88>)
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	4613      	mov	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4413      	add	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	442b      	add	r3, r5
 8004ab6:	330c      	adds	r3, #12
 8004ab8:	681d      	ldr	r5, [r3, #0]
 8004aba:	4e0d      	ldr	r6, [pc, #52]	; (8004af0 <_cbSendTaskList+0x88>)
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4433      	add	r3, r6
 8004ac8:	3310      	adds	r3, #16
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	462b      	mov	r3, r5
 8004ad0:	4622      	mov	r2, r4
 8004ad2:	f000 f8b5 	bl	8004c40 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	607b      	str	r3, [r7, #4]
 8004adc:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <_cbSendTaskList+0x8c>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d3c6      	bcc.n	8004a74 <_cbSendTaskList+0xc>
  }
}
 8004ae6:	bf00      	nop
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004af0:	20012da0 	.word	0x20012da0
 8004af4:	20012e40 	.word	0x20012e40

08004af8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004af8:	b5b0      	push	{r4, r5, r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004afe:	f7fe fb8b 	bl	8003218 <xTaskGetTickCountFromISR>
 8004b02:	4603      	mov	r3, r0
 8004b04:	461a      	mov	r2, r3
 8004b06:	f04f 0300 	mov.w	r3, #0
 8004b0a:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004b0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b12:	4602      	mov	r2, r0
 8004b14:	460b      	mov	r3, r1
 8004b16:	f04f 0400 	mov.w	r4, #0
 8004b1a:	f04f 0500 	mov.w	r5, #0
 8004b1e:	015d      	lsls	r5, r3, #5
 8004b20:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8004b24:	0154      	lsls	r4, r2, #5
 8004b26:	4622      	mov	r2, r4
 8004b28:	462b      	mov	r3, r5
 8004b2a:	1a12      	subs	r2, r2, r0
 8004b2c:	eb63 0301 	sbc.w	r3, r3, r1
 8004b30:	f04f 0400 	mov.w	r4, #0
 8004b34:	f04f 0500 	mov.w	r5, #0
 8004b38:	009d      	lsls	r5, r3, #2
 8004b3a:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8004b3e:	0094      	lsls	r4, r2, #2
 8004b40:	4622      	mov	r2, r4
 8004b42:	462b      	mov	r3, r5
 8004b44:	1812      	adds	r2, r2, r0
 8004b46:	eb41 0303 	adc.w	r3, r1, r3
 8004b4a:	f04f 0000 	mov.w	r0, #0
 8004b4e:	f04f 0100 	mov.w	r1, #0
 8004b52:	00d9      	lsls	r1, r3, #3
 8004b54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b58:	00d0      	lsls	r0, r2, #3
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8004b62:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004b66:	4610      	mov	r0, r2
 8004b68:	4619      	mov	r1, r3
 8004b6a:	3708      	adds	r7, #8
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bdb0      	pop	{r4, r5, r7, pc}

08004b70 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af02      	add	r7, sp, #8
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
 8004b7c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004b7e:	2205      	movs	r2, #5
 8004b80:	492b      	ldr	r1, [pc, #172]	; (8004c30 <SYSVIEW_AddTask+0xc0>)
 8004b82:	68b8      	ldr	r0, [r7, #8]
 8004b84:	f002 fbce 	bl	8007324 <memcmp>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d04b      	beq.n	8004c26 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004b8e:	4b29      	ldr	r3, [pc, #164]	; (8004c34 <SYSVIEW_AddTask+0xc4>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2b07      	cmp	r3, #7
 8004b94:	d903      	bls.n	8004b9e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004b96:	4828      	ldr	r0, [pc, #160]	; (8004c38 <SYSVIEW_AddTask+0xc8>)
 8004b98:	f002 faf2 	bl	8007180 <SEGGER_SYSVIEW_Warn>
    return;
 8004b9c:	e044      	b.n	8004c28 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004b9e:	4b25      	ldr	r3, [pc, #148]	; (8004c34 <SYSVIEW_AddTask+0xc4>)
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	4926      	ldr	r1, [pc, #152]	; (8004c3c <SYSVIEW_AddTask+0xcc>)
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	440b      	add	r3, r1
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004bb2:	4b20      	ldr	r3, [pc, #128]	; (8004c34 <SYSVIEW_AddTask+0xc4>)
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	4921      	ldr	r1, [pc, #132]	; (8004c3c <SYSVIEW_AddTask+0xcc>)
 8004bb8:	4613      	mov	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	440b      	add	r3, r1
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004bc8:	4b1a      	ldr	r3, [pc, #104]	; (8004c34 <SYSVIEW_AddTask+0xc4>)
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	491b      	ldr	r1, [pc, #108]	; (8004c3c <SYSVIEW_AddTask+0xcc>)
 8004bce:	4613      	mov	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4413      	add	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	440b      	add	r3, r1
 8004bd8:	3308      	adds	r3, #8
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004bde:	4b15      	ldr	r3, [pc, #84]	; (8004c34 <SYSVIEW_AddTask+0xc4>)
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	4916      	ldr	r1, [pc, #88]	; (8004c3c <SYSVIEW_AddTask+0xcc>)
 8004be4:	4613      	mov	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	440b      	add	r3, r1
 8004bee:	330c      	adds	r3, #12
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004bf4:	4b0f      	ldr	r3, [pc, #60]	; (8004c34 <SYSVIEW_AddTask+0xc4>)
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	4910      	ldr	r1, [pc, #64]	; (8004c3c <SYSVIEW_AddTask+0xcc>)
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4413      	add	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	440b      	add	r3, r1
 8004c04:	3310      	adds	r3, #16
 8004c06:	69ba      	ldr	r2, [r7, #24]
 8004c08:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004c0a:	4b0a      	ldr	r3, [pc, #40]	; (8004c34 <SYSVIEW_AddTask+0xc4>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	4a08      	ldr	r2, [pc, #32]	; (8004c34 <SYSVIEW_AddTask+0xc4>)
 8004c12:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	68b9      	ldr	r1, [r7, #8]
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f000 f80e 	bl	8004c40 <SYSVIEW_SendTaskInfo>
 8004c24:	e000      	b.n	8004c28 <SYSVIEW_AddTask+0xb8>
    return;
 8004c26:	bf00      	nop

}
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	08007408 	.word	0x08007408
 8004c34:	20012e40 	.word	0x20012e40
 8004c38:	08007410 	.word	0x08007410
 8004c3c:	20012da0 	.word	0x20012da0

08004c40 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b08a      	sub	sp, #40	; 0x28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
 8004c4c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004c4e:	f107 0314 	add.w	r3, r7, #20
 8004c52:	2214      	movs	r2, #20
 8004c54:	2100      	movs	r1, #0
 8004c56:	4618      	mov	r0, r3
 8004c58:	f002 fb80 	bl	800735c <memset>
  TaskInfo.TaskID     = TaskID;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004c70:	f107 0314 	add.w	r3, r7, #20
 8004c74:	4618      	mov	r0, r3
 8004c76:	f001 fe79 	bl	800696c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004c7a:	bf00      	nop
 8004c7c:	3728      	adds	r7, #40	; 0x28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
	...

08004c84 <__NVIC_EnableIRQ>:
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	db0b      	blt.n	8004cae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c96:	79fb      	ldrb	r3, [r7, #7]
 8004c98:	f003 021f 	and.w	r2, r3, #31
 8004c9c:	4907      	ldr	r1, [pc, #28]	; (8004cbc <__NVIC_EnableIRQ+0x38>)
 8004c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ca2:	095b      	lsrs	r3, r3, #5
 8004ca4:	2001      	movs	r0, #1
 8004ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8004caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004cae:	bf00      	nop
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	e000e100 	.word	0xe000e100

08004cc0 <__NVIC_SetPriority>:
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	6039      	str	r1, [r7, #0]
 8004cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	db0a      	blt.n	8004cea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	b2da      	uxtb	r2, r3
 8004cd8:	490c      	ldr	r1, [pc, #48]	; (8004d0c <__NVIC_SetPriority+0x4c>)
 8004cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cde:	0112      	lsls	r2, r2, #4
 8004ce0:	b2d2      	uxtb	r2, r2
 8004ce2:	440b      	add	r3, r1
 8004ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004ce8:	e00a      	b.n	8004d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	4908      	ldr	r1, [pc, #32]	; (8004d10 <__NVIC_SetPriority+0x50>)
 8004cf0:	79fb      	ldrb	r3, [r7, #7]
 8004cf2:	f003 030f 	and.w	r3, r3, #15
 8004cf6:	3b04      	subs	r3, #4
 8004cf8:	0112      	lsls	r2, r2, #4
 8004cfa:	b2d2      	uxtb	r2, r2
 8004cfc:	440b      	add	r3, r1
 8004cfe:	761a      	strb	r2, [r3, #24]
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	e000e100 	.word	0xe000e100
 8004d10:	e000ed00 	.word	0xe000ed00

08004d14 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8004d1a:	f002 fa8d 	bl	8007238 <SEGGER_SYSVIEW_IsStarted>
 8004d1e:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8004d26:	f001 fca5 	bl	8006674 <SEGGER_SYSVIEW_Start>
  }
}
 8004d2a:	bf00      	nop
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
	...

08004d34 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8004d3e:	4b0c      	ldr	r3, [pc, #48]	; (8004d70 <_cbOnUARTRx+0x3c>)
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	2b03      	cmp	r3, #3
 8004d44:	d806      	bhi.n	8004d54 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8004d46:	4b0a      	ldr	r3, [pc, #40]	; (8004d70 <_cbOnUARTRx+0x3c>)
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	b2da      	uxtb	r2, r3
 8004d4e:	4b08      	ldr	r3, [pc, #32]	; (8004d70 <_cbOnUARTRx+0x3c>)
 8004d50:	701a      	strb	r2, [r3, #0]
    goto Done;
 8004d52:	e009      	b.n	8004d68 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8004d54:	f7ff ffde 	bl	8004d14 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004d58:	4b05      	ldr	r3, [pc, #20]	; (8004d70 <_cbOnUARTRx+0x3c>)
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	1dfb      	adds	r3, r7, #7
 8004d60:	2201      	movs	r2, #1
 8004d62:	4619      	mov	r1, r3
 8004d64:	f000 fb9a 	bl	800549c <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004d68:	bf00      	nop
}
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	20000014 	.word	0x20000014

08004d74 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004d7c:	4b14      	ldr	r3, [pc, #80]	; (8004dd0 <_cbOnUARTTx+0x5c>)
 8004d7e:	785b      	ldrb	r3, [r3, #1]
 8004d80:	2b03      	cmp	r3, #3
 8004d82:	d80f      	bhi.n	8004da4 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004d84:	4b12      	ldr	r3, [pc, #72]	; (8004dd0 <_cbOnUARTTx+0x5c>)
 8004d86:	785b      	ldrb	r3, [r3, #1]
 8004d88:	461a      	mov	r2, r3
 8004d8a:	4b12      	ldr	r3, [pc, #72]	; (8004dd4 <_cbOnUARTTx+0x60>)
 8004d8c:	5c9a      	ldrb	r2, [r3, r2]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004d92:	4b0f      	ldr	r3, [pc, #60]	; (8004dd0 <_cbOnUARTTx+0x5c>)
 8004d94:	785b      	ldrb	r3, [r3, #1]
 8004d96:	3301      	adds	r3, #1
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	4b0d      	ldr	r3, [pc, #52]	; (8004dd0 <_cbOnUARTTx+0x5c>)
 8004d9c:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004da2:	e00f      	b.n	8004dc4 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004da4:	4b0a      	ldr	r3, [pc, #40]	; (8004dd0 <_cbOnUARTTx+0x5c>)
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	6879      	ldr	r1, [r7, #4]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f000 fa19 	bl	80051e4 <SEGGER_RTT_ReadUpBufferNoLock>
 8004db2:	4603      	mov	r3, r0
 8004db4:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	da02      	bge.n	8004dc2 <_cbOnUARTTx+0x4e>
    r = 0;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	e000      	b.n	8004dc4 <_cbOnUARTTx+0x50>
  }
Done:
 8004dc2:	bf00      	nop
  return r;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	20000014 	.word	0x20000014
 8004dd4:	080074f4 	.word	0x080074f4

08004dd8 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004de0:	4a04      	ldr	r2, [pc, #16]	; (8004df4 <SEGGER_UART_init+0x1c>)
 8004de2:	4905      	ldr	r1, [pc, #20]	; (8004df8 <SEGGER_UART_init+0x20>)
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 f863 	bl	8004eb0 <HIF_UART_Init>
}
 8004dea:	bf00      	nop
 8004dec:	3708      	adds	r7, #8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	08004d35 	.word	0x08004d35
 8004df8:	08004d75 	.word	0x08004d75

08004dfc <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004e02:	4b1e      	ldr	r3, [pc, #120]	; (8004e7c <USART2_IRQHandler+0x80>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f003 0320 	and.w	r3, r3, #32
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d011      	beq.n	8004e36 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004e12:	4b1b      	ldr	r3, [pc, #108]	; (8004e80 <USART2_IRQHandler+0x84>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f003 030b 	and.w	r3, r3, #11
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d108      	bne.n	8004e36 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004e24:	4b17      	ldr	r3, [pc, #92]	; (8004e84 <USART2_IRQHandler+0x88>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d004      	beq.n	8004e36 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004e2c:	4b15      	ldr	r3, [pc, #84]	; (8004e84 <USART2_IRQHandler+0x88>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	79fa      	ldrb	r2, [r7, #7]
 8004e32:	4610      	mov	r0, r2
 8004e34:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d01a      	beq.n	8004e76 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004e40:	4b11      	ldr	r3, [pc, #68]	; (8004e88 <USART2_IRQHandler+0x8c>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d015      	beq.n	8004e74 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004e48:	4b0f      	ldr	r3, [pc, #60]	; (8004e88 <USART2_IRQHandler+0x8c>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	1dfa      	adds	r2, r7, #7
 8004e4e:	4610      	mov	r0, r2
 8004e50:	4798      	blx	r3
 8004e52:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d106      	bne.n	8004e68 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004e5a:	4b0c      	ldr	r3, [pc, #48]	; (8004e8c <USART2_IRQHandler+0x90>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a0b      	ldr	r2, [pc, #44]	; (8004e8c <USART2_IRQHandler+0x90>)
 8004e60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e64:	6013      	str	r3, [r2, #0]
 8004e66:	e006      	b.n	8004e76 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004e68:	4b04      	ldr	r3, [pc, #16]	; (8004e7c <USART2_IRQHandler+0x80>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004e6c:	79fa      	ldrb	r2, [r7, #7]
 8004e6e:	4b04      	ldr	r3, [pc, #16]	; (8004e80 <USART2_IRQHandler+0x84>)
 8004e70:	601a      	str	r2, [r3, #0]
 8004e72:	e000      	b.n	8004e76 <USART2_IRQHandler+0x7a>
      return;
 8004e74:	bf00      	nop
    }
  }
}
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	40004400 	.word	0x40004400
 8004e80:	40004404 	.word	0x40004404
 8004e84:	20012e44 	.word	0x20012e44
 8004e88:	20012e48 	.word	0x20012e48
 8004e8c:	4000440c 	.word	0x4000440c

08004e90 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004e94:	4b05      	ldr	r3, [pc, #20]	; (8004eac <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a04      	ldr	r2, [pc, #16]	; (8004eac <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e9e:	6013      	str	r3, [r2, #0]
}
 8004ea0:	bf00      	nop
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	4000440c 	.word	0x4000440c

08004eb0 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8004ebc:	4b2e      	ldr	r3, [pc, #184]	; (8004f78 <HIF_UART_Init+0xc8>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a2d      	ldr	r2, [pc, #180]	; (8004f78 <HIF_UART_Init+0xc8>)
 8004ec2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ec6:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004ec8:	4b2c      	ldr	r3, [pc, #176]	; (8004f7c <HIF_UART_Init+0xcc>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a2b      	ldr	r2, [pc, #172]	; (8004f7c <HIF_UART_Init+0xcc>)
 8004ece:	f043 0301 	orr.w	r3, r3, #1
 8004ed2:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8004ed4:	4b2a      	ldr	r3, [pc, #168]	; (8004f80 <HIF_UART_Init+0xd0>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ee0:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8004ee8:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8004eea:	4a25      	ldr	r2, [pc, #148]	; (8004f80 <HIF_UART_Init+0xd0>)
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004ef0:	4b24      	ldr	r3, [pc, #144]	; (8004f84 <HIF_UART_Init+0xd4>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004efc:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8004f04:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8004f06:	4a1f      	ldr	r2, [pc, #124]	; (8004f84 <HIF_UART_Init+0xd4>)
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8004f0c:	4b1e      	ldr	r3, [pc, #120]	; (8004f88 <HIF_UART_Init+0xd8>)
 8004f0e:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8004f12:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8004f14:	4b1d      	ldr	r3, [pc, #116]	; (8004f8c <HIF_UART_Init+0xdc>)
 8004f16:	2200      	movs	r2, #0
 8004f18:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8004f1a:	4b1d      	ldr	r3, [pc, #116]	; (8004f90 <HIF_UART_Init+0xe0>)
 8004f1c:	2280      	movs	r2, #128	; 0x80
 8004f1e:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8004f26:	4a1b      	ldr	r2, [pc, #108]	; (8004f94 <HIF_UART_Init+0xe4>)
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f2e:	3301      	adds	r3, #1
 8004f30:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	085b      	lsrs	r3, r3, #1
 8004f36:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f3e:	d302      	bcc.n	8004f46 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8004f40:	f640 73ff 	movw	r3, #4095	; 0xfff
 8004f44:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d004      	beq.n	8004f56 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	011b      	lsls	r3, r3, #4
 8004f50:	4a11      	ldr	r2, [pc, #68]	; (8004f98 <HIF_UART_Init+0xe8>)
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8004f56:	4a11      	ldr	r2, [pc, #68]	; (8004f9c <HIF_UART_Init+0xec>)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8004f5c:	4a10      	ldr	r2, [pc, #64]	; (8004fa0 <HIF_UART_Init+0xf0>)
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8004f62:	2106      	movs	r1, #6
 8004f64:	2026      	movs	r0, #38	; 0x26
 8004f66:	f7ff feab 	bl	8004cc0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8004f6a:	2026      	movs	r0, #38	; 0x26
 8004f6c:	f7ff fe8a 	bl	8004c84 <__NVIC_EnableIRQ>
}
 8004f70:	bf00      	nop
 8004f72:	3718      	adds	r7, #24
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	40023840 	.word	0x40023840
 8004f7c:	40023830 	.word	0x40023830
 8004f80:	40020020 	.word	0x40020020
 8004f84:	40020000 	.word	0x40020000
 8004f88:	4000440c 	.word	0x4000440c
 8004f8c:	40004410 	.word	0x40004410
 8004f90:	40004414 	.word	0x40004414
 8004f94:	0501bd00 	.word	0x0501bd00
 8004f98:	40004408 	.word	0x40004408
 8004f9c:	20012e44 	.word	0x20012e44
 8004fa0:	20012e48 	.word	0x20012e48

08004fa4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004faa:	4b24      	ldr	r3, [pc, #144]	; (800503c <_DoInit+0x98>)
 8004fac:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2203      	movs	r2, #3
 8004fb2:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2203      	movs	r2, #3
 8004fb8:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a20      	ldr	r2, [pc, #128]	; (8005040 <_DoInit+0x9c>)
 8004fbe:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a20      	ldr	r2, [pc, #128]	; (8005044 <_DoInit+0xa0>)
 8004fc4:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fcc:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a17      	ldr	r2, [pc, #92]	; (8005040 <_DoInit+0x9c>)
 8004fe4:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a17      	ldr	r2, [pc, #92]	; (8005048 <_DoInit+0xa4>)
 8004fea:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2210      	movs	r2, #16
 8004ff0:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	3307      	adds	r3, #7
 8005008:	4a10      	ldr	r2, [pc, #64]	; (800504c <_DoInit+0xa8>)
 800500a:	6810      	ldr	r0, [r2, #0]
 800500c:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800500e:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a0e      	ldr	r2, [pc, #56]	; (8005050 <_DoInit+0xac>)
 8005016:	6810      	ldr	r0, [r2, #0]
 8005018:	6018      	str	r0, [r3, #0]
 800501a:	8891      	ldrh	r1, [r2, #4]
 800501c:	7992      	ldrb	r2, [r2, #6]
 800501e:	8099      	strh	r1, [r3, #4]
 8005020:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005022:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2220      	movs	r2, #32
 800502a:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800502c:	f3bf 8f5f 	dmb	sy
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	20014404 	.word	0x20014404
 8005040:	08007460 	.word	0x08007460
 8005044:	20012e4c 	.word	0x20012e4c
 8005048:	2001324c 	.word	0x2001324c
 800504c:	0800746c 	.word	0x0800746c
 8005050:	08007470 	.word	0x08007470

08005054 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005054:	b580      	push	{r7, lr}
 8005056:	b08a      	sub	sp, #40	; 0x28
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005060:	2300      	movs	r3, #0
 8005062:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	429a      	cmp	r2, r3
 8005076:	d905      	bls.n	8005084 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	3b01      	subs	r3, #1
 8005080:	627b      	str	r3, [r7, #36]	; 0x24
 8005082:	e007      	b.n	8005094 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	69b9      	ldr	r1, [r7, #24]
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	1acb      	subs	r3, r1, r3
 800508e:	4413      	add	r3, r2
 8005090:	3b01      	subs	r3, #1
 8005092:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	689a      	ldr	r2, [r3, #8]
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800509e:	4293      	cmp	r3, r2
 80050a0:	bf28      	it	cs
 80050a2:	4613      	movcs	r3, r2
 80050a4:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80050a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4293      	cmp	r3, r2
 80050ac:	bf28      	it	cs
 80050ae:	4613      	movcs	r3, r2
 80050b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	4413      	add	r3, r2
 80050ba:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80050bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050be:	68b9      	ldr	r1, [r7, #8]
 80050c0:	6978      	ldr	r0, [r7, #20]
 80050c2:	f002 f93d 	bl	8007340 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80050c6:	6a3a      	ldr	r2, [r7, #32]
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	4413      	add	r3, r2
 80050cc:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d2:	4413      	add	r3, r2
 80050d4:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80050de:	69fa      	ldr	r2, [r7, #28]
 80050e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e2:	4413      	add	r3, r2
 80050e4:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	69fa      	ldr	r2, [r7, #28]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d101      	bne.n	80050f4 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80050f0:	2300      	movs	r3, #0
 80050f2:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80050f4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	69fa      	ldr	r2, [r7, #28]
 80050fc:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1b2      	bne.n	800506a <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005104:	6a3b      	ldr	r3, [r7, #32]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3728      	adds	r7, #40	; 0x28
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800510e:	b580      	push	{r7, lr}
 8005110:	b088      	sub	sp, #32
 8005112:	af00      	add	r7, sp, #0
 8005114:	60f8      	str	r0, [r7, #12]
 8005116:	60b9      	str	r1, [r7, #8]
 8005118:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	689a      	ldr	r2, [r3, #8]
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800512a:	69ba      	ldr	r2, [r7, #24]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	429a      	cmp	r2, r3
 8005130:	d911      	bls.n	8005156 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	4413      	add	r3, r2
 800513a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	68b9      	ldr	r1, [r7, #8]
 8005140:	6938      	ldr	r0, [r7, #16]
 8005142:	f002 f8fd 	bl	8007340 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005146:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800514a:	69fa      	ldr	r2, [r7, #28]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	441a      	add	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005154:	e01f      	b.n	8005196 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	4413      	add	r3, r2
 8005162:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	68b9      	ldr	r1, [r7, #8]
 8005168:	6938      	ldr	r0, [r7, #16]
 800516a:	f002 f8e9 	bl	8007340 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	4413      	add	r3, r2
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	4619      	mov	r1, r3
 8005186:	6938      	ldr	r0, [r7, #16]
 8005188:	f002 f8da 	bl	8007340 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800518c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	60da      	str	r2, [r3, #12]
}
 8005196:	bf00      	nop
 8005198:	3720      	adds	r7, #32
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800519e:	b480      	push	{r7}
 80051a0:	b087      	sub	sp, #28
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d808      	bhi.n	80051cc <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	689a      	ldr	r2, [r3, #8]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	1ad2      	subs	r2, r2, r3
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	4413      	add	r3, r2
 80051c6:	3b01      	subs	r3, #1
 80051c8:	617b      	str	r3, [r7, #20]
 80051ca:	e004      	b.n	80051d6 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	3b01      	subs	r3, #1
 80051d4:	617b      	str	r3, [r7, #20]
  }
  return r;
 80051d6:	697b      	ldr	r3, [r7, #20]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	371c      	adds	r7, #28
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b08c      	sub	sp, #48	; 0x30
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80051f0:	4b3e      	ldr	r3, [pc, #248]	; (80052ec <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80051f2:	623b      	str	r3, [r7, #32]
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80051fe:	f7ff fed1 	bl	8004fa4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	1c5a      	adds	r2, r3, #1
 8005206:	4613      	mov	r3, r2
 8005208:	005b      	lsls	r3, r3, #1
 800520a:	4413      	add	r3, r2
 800520c:	00db      	lsls	r3, r3, #3
 800520e:	4a37      	ldr	r2, [pc, #220]	; (80052ec <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005210:	4413      	add	r3, r2
 8005212:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005224:	2300      	movs	r3, #0
 8005226:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005228:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	429a      	cmp	r2, r3
 800522e:	d92b      	bls.n	8005288 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	689a      	ldr	r2, [r3, #8]
 8005234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4293      	cmp	r3, r2
 8005240:	bf28      	it	cs
 8005242:	4613      	movcs	r3, r2
 8005244:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524c:	4413      	add	r3, r2
 800524e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	6939      	ldr	r1, [r7, #16]
 8005254:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005256:	f002 f873 	bl	8007340 <memcpy>
    NumBytesRead += NumBytesRem;
 800525a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	4413      	add	r3, r2
 8005260:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	4413      	add	r3, r2
 8005268:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005272:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	4413      	add	r3, r2
 8005278:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005280:	429a      	cmp	r2, r3
 8005282:	d101      	bne.n	8005288 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005284:	2300      	movs	r3, #0
 8005286:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4293      	cmp	r3, r2
 8005296:	bf28      	it	cs
 8005298:	4613      	movcs	r3, r2
 800529a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d019      	beq.n	80052d6 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a8:	4413      	add	r3, r2
 80052aa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	6939      	ldr	r1, [r7, #16]
 80052b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052b2:	f002 f845 	bl	8007340 <memcpy>
    NumBytesRead += NumBytesRem;
 80052b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	4413      	add	r3, r2
 80052bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80052be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	4413      	add	r3, r2
 80052c4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80052ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	4413      	add	r3, r2
 80052d4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80052d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d002      	beq.n	80052e2 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052e0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80052e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3730      	adds	r7, #48	; 0x30
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	20014404 	.word	0x20014404

080052f0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b08c      	sub	sp, #48	; 0x30
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80052fc:	4b3e      	ldr	r3, [pc, #248]	; (80053f8 <SEGGER_RTT_ReadNoLock+0x108>)
 80052fe:	623b      	str	r3, [r7, #32]
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <SEGGER_RTT_ReadNoLock+0x1e>
 800530a:	f7ff fe4b 	bl	8004fa4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	4613      	mov	r3, r2
 8005312:	005b      	lsls	r3, r3, #1
 8005314:	4413      	add	r3, r2
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	3360      	adds	r3, #96	; 0x60
 800531a:	4a37      	ldr	r2, [pc, #220]	; (80053f8 <SEGGER_RTT_ReadNoLock+0x108>)
 800531c:	4413      	add	r3, r2
 800531e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005330:	2300      	movs	r3, #0
 8005332:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005334:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	429a      	cmp	r2, r3
 800533a:	d92b      	bls.n	8005394 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	689a      	ldr	r2, [r3, #8]
 8005340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4293      	cmp	r3, r2
 800534c:	bf28      	it	cs
 800534e:	4613      	movcs	r3, r2
 8005350:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005358:	4413      	add	r3, r2
 800535a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	6939      	ldr	r1, [r7, #16]
 8005360:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005362:	f001 ffed 	bl	8007340 <memcpy>
    NumBytesRead += NumBytesRem;
 8005366:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	4413      	add	r3, r2
 800536c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800536e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	4413      	add	r3, r2
 8005374:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800537e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	4413      	add	r3, r2
 8005384:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800538c:	429a      	cmp	r2, r3
 800538e:	d101      	bne.n	8005394 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005390:	2300      	movs	r3, #0
 8005392:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4293      	cmp	r3, r2
 80053a2:	bf28      	it	cs
 80053a4:	4613      	movcs	r3, r2
 80053a6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d019      	beq.n	80053e2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b4:	4413      	add	r3, r2
 80053b6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	6939      	ldr	r1, [r7, #16]
 80053bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053be:	f001 ffbf 	bl	8007340 <memcpy>
    NumBytesRead += NumBytesRem;
 80053c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	4413      	add	r3, r2
 80053c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80053ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	4413      	add	r3, r2
 80053d0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80053da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	4413      	add	r3, r2
 80053e0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80053e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d002      	beq.n	80053ee <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053ec:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80053ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3730      	adds	r7, #48	; 0x30
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	20014404 	.word	0x20014404

080053fc <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b088      	sub	sp, #32
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	4613      	mov	r3, r2
 8005410:	005b      	lsls	r3, r3, #1
 8005412:	4413      	add	r3, r2
 8005414:	00db      	lsls	r3, r3, #3
 8005416:	3360      	adds	r3, #96	; 0x60
 8005418:	4a1f      	ldr	r2, [pc, #124]	; (8005498 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 800541a:	4413      	add	r3, r2
 800541c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	2b02      	cmp	r3, #2
 8005424:	d029      	beq.n	800547a <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8005426:	2b02      	cmp	r3, #2
 8005428:	d82e      	bhi.n	8005488 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800542e:	2b01      	cmp	r3, #1
 8005430:	d013      	beq.n	800545a <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8005432:	e029      	b.n	8005488 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005434:	6978      	ldr	r0, [r7, #20]
 8005436:	f7ff feb2 	bl	800519e <_GetAvailWriteSpace>
 800543a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	429a      	cmp	r2, r3
 8005442:	d202      	bcs.n	800544a <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005444:	2300      	movs	r3, #0
 8005446:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005448:	e021      	b.n	800548e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	69b9      	ldr	r1, [r7, #24]
 8005452:	6978      	ldr	r0, [r7, #20]
 8005454:	f7ff fe5b 	bl	800510e <_WriteNoCheck>
    break;
 8005458:	e019      	b.n	800548e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800545a:	6978      	ldr	r0, [r7, #20]
 800545c:	f7ff fe9f 	bl	800519e <_GetAvailWriteSpace>
 8005460:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	4293      	cmp	r3, r2
 8005468:	bf28      	it	cs
 800546a:	4613      	movcs	r3, r2
 800546c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800546e:	69fa      	ldr	r2, [r7, #28]
 8005470:	69b9      	ldr	r1, [r7, #24]
 8005472:	6978      	ldr	r0, [r7, #20]
 8005474:	f7ff fe4b 	bl	800510e <_WriteNoCheck>
    break;
 8005478:	e009      	b.n	800548e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	69b9      	ldr	r1, [r7, #24]
 800547e:	6978      	ldr	r0, [r7, #20]
 8005480:	f7ff fde8 	bl	8005054 <_WriteBlocking>
 8005484:	61f8      	str	r0, [r7, #28]
    break;
 8005486:	e002      	b.n	800548e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005488:	2300      	movs	r3, #0
 800548a:	61fb      	str	r3, [r7, #28]
    break;
 800548c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800548e:	69fb      	ldr	r3, [r7, #28]
}
 8005490:	4618      	mov	r0, r3
 8005492:	3720      	adds	r7, #32
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	20014404 	.word	0x20014404

0800549c <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800549c:	b580      	push	{r7, lr}
 800549e:	b088      	sub	sp, #32
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80054a8:	4b0e      	ldr	r3, [pc, #56]	; (80054e4 <SEGGER_RTT_WriteDownBuffer+0x48>)
 80054aa:	61fb      	str	r3, [r7, #28]
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <SEGGER_RTT_WriteDownBuffer+0x1e>
 80054b6:	f7ff fd75 	bl	8004fa4 <_DoInit>
  SEGGER_RTT_LOCK();
 80054ba:	f3ef 8311 	mrs	r3, BASEPRI
 80054be:	f04f 0120 	mov.w	r1, #32
 80054c2:	f381 8811 	msr	BASEPRI, r1
 80054c6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	68b9      	ldr	r1, [r7, #8]
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f7ff ff95 	bl	80053fc <SEGGER_RTT_WriteDownBufferNoLock>
 80054d2:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80054da:	697b      	ldr	r3, [r7, #20]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3720      	adds	r7, #32
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	20014404 	.word	0x20014404

080054e8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b088      	sub	sp, #32
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
 80054f4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80054f6:	4b3d      	ldr	r3, [pc, #244]	; (80055ec <SEGGER_RTT_AllocUpBuffer+0x104>)
 80054f8:	61bb      	str	r3, [r7, #24]
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b00      	cmp	r3, #0
 8005502:	d101      	bne.n	8005508 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005504:	f7ff fd4e 	bl	8004fa4 <_DoInit>
  SEGGER_RTT_LOCK();
 8005508:	f3ef 8311 	mrs	r3, BASEPRI
 800550c:	f04f 0120 	mov.w	r1, #32
 8005510:	f381 8811 	msr	BASEPRI, r1
 8005514:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005516:	4b35      	ldr	r3, [pc, #212]	; (80055ec <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005518:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800551a:	2300      	movs	r3, #0
 800551c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800551e:	6939      	ldr	r1, [r7, #16]
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	1c5a      	adds	r2, r3, #1
 8005524:	4613      	mov	r3, r2
 8005526:	005b      	lsls	r3, r3, #1
 8005528:	4413      	add	r3, r2
 800552a:	00db      	lsls	r3, r3, #3
 800552c:	440b      	add	r3, r1
 800552e:	3304      	adds	r3, #4
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d008      	beq.n	8005548 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	3301      	adds	r3, #1
 800553a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	69fa      	ldr	r2, [r7, #28]
 8005542:	429a      	cmp	r2, r3
 8005544:	dbeb      	blt.n	800551e <SEGGER_RTT_AllocUpBuffer+0x36>
 8005546:	e000      	b.n	800554a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005548:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	69fa      	ldr	r2, [r7, #28]
 8005550:	429a      	cmp	r2, r3
 8005552:	da3f      	bge.n	80055d4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005554:	6939      	ldr	r1, [r7, #16]
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	1c5a      	adds	r2, r3, #1
 800555a:	4613      	mov	r3, r2
 800555c:	005b      	lsls	r3, r3, #1
 800555e:	4413      	add	r3, r2
 8005560:	00db      	lsls	r3, r3, #3
 8005562:	440b      	add	r3, r1
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005568:	6939      	ldr	r1, [r7, #16]
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	1c5a      	adds	r2, r3, #1
 800556e:	4613      	mov	r3, r2
 8005570:	005b      	lsls	r3, r3, #1
 8005572:	4413      	add	r3, r2
 8005574:	00db      	lsls	r3, r3, #3
 8005576:	440b      	add	r3, r1
 8005578:	3304      	adds	r3, #4
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800557e:	6939      	ldr	r1, [r7, #16]
 8005580:	69fa      	ldr	r2, [r7, #28]
 8005582:	4613      	mov	r3, r2
 8005584:	005b      	lsls	r3, r3, #1
 8005586:	4413      	add	r3, r2
 8005588:	00db      	lsls	r3, r3, #3
 800558a:	440b      	add	r3, r1
 800558c:	3320      	adds	r3, #32
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005592:	6939      	ldr	r1, [r7, #16]
 8005594:	69fa      	ldr	r2, [r7, #28]
 8005596:	4613      	mov	r3, r2
 8005598:	005b      	lsls	r3, r3, #1
 800559a:	4413      	add	r3, r2
 800559c:	00db      	lsls	r3, r3, #3
 800559e:	440b      	add	r3, r1
 80055a0:	3328      	adds	r3, #40	; 0x28
 80055a2:	2200      	movs	r2, #0
 80055a4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80055a6:	6939      	ldr	r1, [r7, #16]
 80055a8:	69fa      	ldr	r2, [r7, #28]
 80055aa:	4613      	mov	r3, r2
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	4413      	add	r3, r2
 80055b0:	00db      	lsls	r3, r3, #3
 80055b2:	440b      	add	r3, r1
 80055b4:	3324      	adds	r3, #36	; 0x24
 80055b6:	2200      	movs	r2, #0
 80055b8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80055ba:	6939      	ldr	r1, [r7, #16]
 80055bc:	69fa      	ldr	r2, [r7, #28]
 80055be:	4613      	mov	r3, r2
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	4413      	add	r3, r2
 80055c4:	00db      	lsls	r3, r3, #3
 80055c6:	440b      	add	r3, r1
 80055c8:	332c      	adds	r3, #44	; 0x2c
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80055ce:	f3bf 8f5f 	dmb	sy
 80055d2:	e002      	b.n	80055da <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80055d4:	f04f 33ff 	mov.w	r3, #4294967295
 80055d8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80055e0:	69fb      	ldr	r3, [r7, #28]
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3720      	adds	r7, #32
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	20014404 	.word	0x20014404

080055f0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b088      	sub	sp, #32
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
 80055fc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80055fe:	4b33      	ldr	r3, [pc, #204]	; (80056cc <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005600:	61bb      	str	r3, [r7, #24]
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	b2db      	uxtb	r3, r3
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800560c:	f7ff fcca 	bl	8004fa4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005610:	4b2e      	ldr	r3, [pc, #184]	; (80056cc <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005612:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	461a      	mov	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	4293      	cmp	r3, r2
 800561e:	d24d      	bcs.n	80056bc <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005620:	f3ef 8311 	mrs	r3, BASEPRI
 8005624:	f04f 0120 	mov.w	r1, #32
 8005628:	f381 8811 	msr	BASEPRI, r1
 800562c:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d031      	beq.n	8005698 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005634:	6979      	ldr	r1, [r7, #20]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	4613      	mov	r3, r2
 800563a:	005b      	lsls	r3, r3, #1
 800563c:	4413      	add	r3, r2
 800563e:	00db      	lsls	r3, r3, #3
 8005640:	440b      	add	r3, r1
 8005642:	3360      	adds	r3, #96	; 0x60
 8005644:	68ba      	ldr	r2, [r7, #8]
 8005646:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005648:	6979      	ldr	r1, [r7, #20]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	4613      	mov	r3, r2
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	4413      	add	r3, r2
 8005652:	00db      	lsls	r3, r3, #3
 8005654:	440b      	add	r3, r1
 8005656:	3364      	adds	r3, #100	; 0x64
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800565c:	6979      	ldr	r1, [r7, #20]
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	4613      	mov	r3, r2
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	4413      	add	r3, r2
 8005666:	00db      	lsls	r3, r3, #3
 8005668:	440b      	add	r3, r1
 800566a:	3368      	adds	r3, #104	; 0x68
 800566c:	683a      	ldr	r2, [r7, #0]
 800566e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005670:	6979      	ldr	r1, [r7, #20]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	4613      	mov	r3, r2
 8005676:	005b      	lsls	r3, r3, #1
 8005678:	4413      	add	r3, r2
 800567a:	00db      	lsls	r3, r3, #3
 800567c:	440b      	add	r3, r1
 800567e:	3370      	adds	r3, #112	; 0x70
 8005680:	2200      	movs	r2, #0
 8005682:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005684:	6979      	ldr	r1, [r7, #20]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	4613      	mov	r3, r2
 800568a:	005b      	lsls	r3, r3, #1
 800568c:	4413      	add	r3, r2
 800568e:	00db      	lsls	r3, r3, #3
 8005690:	440b      	add	r3, r1
 8005692:	336c      	adds	r3, #108	; 0x6c
 8005694:	2200      	movs	r2, #0
 8005696:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005698:	6979      	ldr	r1, [r7, #20]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	4613      	mov	r3, r2
 800569e:	005b      	lsls	r3, r3, #1
 80056a0:	4413      	add	r3, r2
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	440b      	add	r3, r1
 80056a6:	3374      	adds	r3, #116	; 0x74
 80056a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056aa:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80056ac:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80056b6:	2300      	movs	r3, #0
 80056b8:	61fb      	str	r3, [r7, #28]
 80056ba:	e002      	b.n	80056c2 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 80056bc:	f04f 33ff 	mov.w	r3, #4294967295
 80056c0:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80056c2:	69fb      	ldr	r3, [r7, #28]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3720      	adds	r7, #32
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	20014404 	.word	0x20014404

080056d0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80056d0:	b480      	push	{r7}
 80056d2:	b087      	sub	sp, #28
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80056dc:	2300      	movs	r3, #0
 80056de:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80056e0:	e002      	b.n	80056e8 <_EncodeStr+0x18>
    Len++;
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	3301      	adds	r3, #1
 80056e6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	4413      	add	r3, r2
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1f6      	bne.n	80056e2 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d901      	bls.n	8005700 <_EncodeStr+0x30>
    Len = Limit;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	2bfe      	cmp	r3, #254	; 0xfe
 8005704:	d806      	bhi.n	8005714 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	1c5a      	adds	r2, r3, #1
 800570a:	60fa      	str	r2, [r7, #12]
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	b2d2      	uxtb	r2, r2
 8005710:	701a      	strb	r2, [r3, #0]
 8005712:	e011      	b.n	8005738 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	1c5a      	adds	r2, r3, #1
 8005718:	60fa      	str	r2, [r7, #12]
 800571a:	22ff      	movs	r2, #255	; 0xff
 800571c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	1c5a      	adds	r2, r3, #1
 8005722:	60fa      	str	r2, [r7, #12]
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	b2d2      	uxtb	r2, r2
 8005728:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	0a19      	lsrs	r1, r3, #8
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	1c5a      	adds	r2, r3, #1
 8005732:	60fa      	str	r2, [r7, #12]
 8005734:	b2ca      	uxtb	r2, r1
 8005736:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005738:	2300      	movs	r3, #0
 800573a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800573c:	e00a      	b.n	8005754 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	1c53      	adds	r3, r2, #1
 8005742:	60bb      	str	r3, [r7, #8]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	1c59      	adds	r1, r3, #1
 8005748:	60f9      	str	r1, [r7, #12]
 800574a:	7812      	ldrb	r2, [r2, #0]
 800574c:	701a      	strb	r2, [r3, #0]
    n++;
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	3301      	adds	r3, #1
 8005752:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	429a      	cmp	r2, r3
 800575a:	d3f0      	bcc.n	800573e <_EncodeStr+0x6e>
  }
  return pPayload;
 800575c:	68fb      	ldr	r3, [r7, #12]
}
 800575e:	4618      	mov	r0, r3
 8005760:	371c      	adds	r7, #28
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800576a:	b480      	push	{r7}
 800576c:	b083      	sub	sp, #12
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	3304      	adds	r3, #4
}
 8005776:	4618      	mov	r0, r3
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
	...

08005784 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800578a:	4b36      	ldr	r3, [pc, #216]	; (8005864 <_HandleIncomingPacket+0xe0>)
 800578c:	7e1b      	ldrb	r3, [r3, #24]
 800578e:	4618      	mov	r0, r3
 8005790:	1cfb      	adds	r3, r7, #3
 8005792:	2201      	movs	r2, #1
 8005794:	4619      	mov	r1, r3
 8005796:	f7ff fdab 	bl	80052f0 <SEGGER_RTT_ReadNoLock>
 800579a:	4603      	mov	r3, r0
 800579c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	dd54      	ble.n	800584e <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80057a4:	78fb      	ldrb	r3, [r7, #3]
 80057a6:	2b80      	cmp	r3, #128	; 0x80
 80057a8:	d032      	beq.n	8005810 <_HandleIncomingPacket+0x8c>
 80057aa:	2b80      	cmp	r3, #128	; 0x80
 80057ac:	dc42      	bgt.n	8005834 <_HandleIncomingPacket+0xb0>
 80057ae:	2b07      	cmp	r3, #7
 80057b0:	dc16      	bgt.n	80057e0 <_HandleIncomingPacket+0x5c>
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	dd3e      	ble.n	8005834 <_HandleIncomingPacket+0xb0>
 80057b6:	3b01      	subs	r3, #1
 80057b8:	2b06      	cmp	r3, #6
 80057ba:	d83b      	bhi.n	8005834 <_HandleIncomingPacket+0xb0>
 80057bc:	a201      	add	r2, pc, #4	; (adr r2, 80057c4 <_HandleIncomingPacket+0x40>)
 80057be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c2:	bf00      	nop
 80057c4:	080057e7 	.word	0x080057e7
 80057c8:	080057ed 	.word	0x080057ed
 80057cc:	080057f3 	.word	0x080057f3
 80057d0:	080057f9 	.word	0x080057f9
 80057d4:	080057ff 	.word	0x080057ff
 80057d8:	08005805 	.word	0x08005805
 80057dc:	0800580b 	.word	0x0800580b
 80057e0:	2b7f      	cmp	r3, #127	; 0x7f
 80057e2:	d036      	beq.n	8005852 <_HandleIncomingPacket+0xce>
 80057e4:	e026      	b.n	8005834 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80057e6:	f000 ff45 	bl	8006674 <SEGGER_SYSVIEW_Start>
      break;
 80057ea:	e037      	b.n	800585c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80057ec:	f000 fffe 	bl	80067ec <SEGGER_SYSVIEW_Stop>
      break;
 80057f0:	e034      	b.n	800585c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80057f2:	f001 f9d7 	bl	8006ba4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80057f6:	e031      	b.n	800585c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80057f8:	f001 f99c 	bl	8006b34 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80057fc:	e02e      	b.n	800585c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80057fe:	f001 f81b 	bl	8006838 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005802:	e02b      	b.n	800585c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005804:	f001 fc6a 	bl	80070dc <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005808:	e028      	b.n	800585c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800580a:	f001 fc49 	bl	80070a0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800580e:	e025      	b.n	800585c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005810:	4b14      	ldr	r3, [pc, #80]	; (8005864 <_HandleIncomingPacket+0xe0>)
 8005812:	7e1b      	ldrb	r3, [r3, #24]
 8005814:	4618      	mov	r0, r3
 8005816:	1cfb      	adds	r3, r7, #3
 8005818:	2201      	movs	r2, #1
 800581a:	4619      	mov	r1, r3
 800581c:	f7ff fd68 	bl	80052f0 <SEGGER_RTT_ReadNoLock>
 8005820:	4603      	mov	r3, r0
 8005822:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	dd15      	ble.n	8005856 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800582a:	78fb      	ldrb	r3, [r7, #3]
 800582c:	4618      	mov	r0, r3
 800582e:	f001 fbb7 	bl	8006fa0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005832:	e010      	b.n	8005856 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005834:	78fb      	ldrb	r3, [r7, #3]
 8005836:	b25b      	sxtb	r3, r3
 8005838:	2b00      	cmp	r3, #0
 800583a:	da0e      	bge.n	800585a <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800583c:	4b09      	ldr	r3, [pc, #36]	; (8005864 <_HandleIncomingPacket+0xe0>)
 800583e:	7e1b      	ldrb	r3, [r3, #24]
 8005840:	4618      	mov	r0, r3
 8005842:	1cfb      	adds	r3, r7, #3
 8005844:	2201      	movs	r2, #1
 8005846:	4619      	mov	r1, r3
 8005848:	f7ff fd52 	bl	80052f0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800584c:	e005      	b.n	800585a <_HandleIncomingPacket+0xd6>
    }
  }
 800584e:	bf00      	nop
 8005850:	e004      	b.n	800585c <_HandleIncomingPacket+0xd8>
      break;
 8005852:	bf00      	nop
 8005854:	e002      	b.n	800585c <_HandleIncomingPacket+0xd8>
      break;
 8005856:	bf00      	nop
 8005858:	e000      	b.n	800585c <_HandleIncomingPacket+0xd8>
      break;
 800585a:	bf00      	nop
}
 800585c:	bf00      	nop
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	20014264 	.word	0x20014264

08005868 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005868:	b580      	push	{r7, lr}
 800586a:	b08c      	sub	sp, #48	; 0x30
 800586c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800586e:	2301      	movs	r3, #1
 8005870:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005872:	1d3b      	adds	r3, r7, #4
 8005874:	3301      	adds	r3, #1
 8005876:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800587c:	4b32      	ldr	r3, [pc, #200]	; (8005948 <_TrySendOverflowPacket+0xe0>)
 800587e:	695b      	ldr	r3, [r3, #20]
 8005880:	62bb      	str	r3, [r7, #40]	; 0x28
 8005882:	e00b      	b.n	800589c <_TrySendOverflowPacket+0x34>
 8005884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005886:	b2da      	uxtb	r2, r3
 8005888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588a:	1c59      	adds	r1, r3, #1
 800588c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800588e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005892:	b2d2      	uxtb	r2, r2
 8005894:	701a      	strb	r2, [r3, #0]
 8005896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005898:	09db      	lsrs	r3, r3, #7
 800589a:	62bb      	str	r3, [r7, #40]	; 0x28
 800589c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589e:	2b7f      	cmp	r3, #127	; 0x7f
 80058a0:	d8f0      	bhi.n	8005884 <_TrySendOverflowPacket+0x1c>
 80058a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a4:	1c5a      	adds	r2, r3, #1
 80058a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058aa:	b2d2      	uxtb	r2, r2
 80058ac:	701a      	strb	r2, [r3, #0]
 80058ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80058b2:	4b26      	ldr	r3, [pc, #152]	; (800594c <_TrySendOverflowPacket+0xe4>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80058b8:	4b23      	ldr	r3, [pc, #140]	; (8005948 <_TrySendOverflowPacket+0xe0>)
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	627b      	str	r3, [r7, #36]	; 0x24
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	623b      	str	r3, [r7, #32]
 80058ca:	e00b      	b.n	80058e4 <_TrySendOverflowPacket+0x7c>
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	b2da      	uxtb	r2, r3
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	1c59      	adds	r1, r3, #1
 80058d4:	6279      	str	r1, [r7, #36]	; 0x24
 80058d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058da:	b2d2      	uxtb	r2, r2
 80058dc:	701a      	strb	r2, [r3, #0]
 80058de:	6a3b      	ldr	r3, [r7, #32]
 80058e0:	09db      	lsrs	r3, r3, #7
 80058e2:	623b      	str	r3, [r7, #32]
 80058e4:	6a3b      	ldr	r3, [r7, #32]
 80058e6:	2b7f      	cmp	r3, #127	; 0x7f
 80058e8:	d8f0      	bhi.n	80058cc <_TrySendOverflowPacket+0x64>
 80058ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ec:	1c5a      	adds	r2, r3, #1
 80058ee:	627a      	str	r2, [r7, #36]	; 0x24
 80058f0:	6a3a      	ldr	r2, [r7, #32]
 80058f2:	b2d2      	uxtb	r2, r2
 80058f4:	701a      	strb	r2, [r3, #0]
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80058fa:	4b13      	ldr	r3, [pc, #76]	; (8005948 <_TrySendOverflowPacket+0xe0>)
 80058fc:	785b      	ldrb	r3, [r3, #1]
 80058fe:	4618      	mov	r0, r3
 8005900:	1d3b      	adds	r3, r7, #4
 8005902:	69fa      	ldr	r2, [r7, #28]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	461a      	mov	r2, r3
 8005908:	1d3b      	adds	r3, r7, #4
 800590a:	4619      	mov	r1, r3
 800590c:	f7fa fc60 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005910:	4603      	mov	r3, r0
 8005912:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005914:	f7ff fabc 	bl	8004e90 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d009      	beq.n	8005932 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800591e:	4a0a      	ldr	r2, [pc, #40]	; (8005948 <_TrySendOverflowPacket+0xe0>)
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005924:	4b08      	ldr	r3, [pc, #32]	; (8005948 <_TrySendOverflowPacket+0xe0>)
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	3b01      	subs	r3, #1
 800592a:	b2da      	uxtb	r2, r3
 800592c:	4b06      	ldr	r3, [pc, #24]	; (8005948 <_TrySendOverflowPacket+0xe0>)
 800592e:	701a      	strb	r2, [r3, #0]
 8005930:	e004      	b.n	800593c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005932:	4b05      	ldr	r3, [pc, #20]	; (8005948 <_TrySendOverflowPacket+0xe0>)
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	3301      	adds	r3, #1
 8005938:	4a03      	ldr	r2, [pc, #12]	; (8005948 <_TrySendOverflowPacket+0xe0>)
 800593a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800593c:	693b      	ldr	r3, [r7, #16]
}
 800593e:	4618      	mov	r0, r3
 8005940:	3730      	adds	r7, #48	; 0x30
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	20014264 	.word	0x20014264
 800594c:	e0001004 	.word	0xe0001004

08005950 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005950:	b580      	push	{r7, lr}
 8005952:	b08a      	sub	sp, #40	; 0x28
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800595c:	4b6d      	ldr	r3, [pc, #436]	; (8005b14 <_SendPacket+0x1c4>)
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d010      	beq.n	8005986 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005964:	4b6b      	ldr	r3, [pc, #428]	; (8005b14 <_SendPacket+0x1c4>)
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	f000 80a5 	beq.w	8005ab8 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800596e:	4b69      	ldr	r3, [pc, #420]	; (8005b14 <_SendPacket+0x1c4>)
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	2b02      	cmp	r3, #2
 8005974:	d109      	bne.n	800598a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005976:	f7ff ff77 	bl	8005868 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800597a:	4b66      	ldr	r3, [pc, #408]	; (8005b14 <_SendPacket+0x1c4>)
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	2b01      	cmp	r3, #1
 8005980:	f040 809c 	bne.w	8005abc <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8005984:	e001      	b.n	800598a <_SendPacket+0x3a>
    goto Send;
 8005986:	bf00      	nop
 8005988:	e000      	b.n	800598c <_SendPacket+0x3c>
Send:
 800598a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b1f      	cmp	r3, #31
 8005990:	d809      	bhi.n	80059a6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005992:	4b60      	ldr	r3, [pc, #384]	; (8005b14 <_SendPacket+0x1c4>)
 8005994:	69da      	ldr	r2, [r3, #28]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	fa22 f303 	lsr.w	r3, r2, r3
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f040 808d 	bne.w	8005ac0 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b17      	cmp	r3, #23
 80059aa:	d807      	bhi.n	80059bc <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	3b01      	subs	r3, #1
 80059b0:	60fb      	str	r3, [r7, #12]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	b2da      	uxtb	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	701a      	strb	r2, [r3, #0]
 80059ba:	e03d      	b.n	8005a38 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	2b7f      	cmp	r3, #127	; 0x7f
 80059c8:	d912      	bls.n	80059f0 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	09da      	lsrs	r2, r3, #7
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	3b01      	subs	r3, #1
 80059d2:	60fb      	str	r3, [r7, #12]
 80059d4:	b2d2      	uxtb	r2, r2
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	3a01      	subs	r2, #1
 80059e2:	60fa      	str	r2, [r7, #12]
 80059e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80059e8:	b2da      	uxtb	r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	701a      	strb	r2, [r3, #0]
 80059ee:	e006      	b.n	80059fe <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	3b01      	subs	r3, #1
 80059f4:	60fb      	str	r3, [r7, #12]
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	b2da      	uxtb	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2b7f      	cmp	r3, #127	; 0x7f
 8005a02:	d912      	bls.n	8005a2a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	09da      	lsrs	r2, r3, #7
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	60fb      	str	r3, [r7, #12]
 8005a0e:	b2d2      	uxtb	r2, r2
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	3a01      	subs	r2, #1
 8005a1c:	60fa      	str	r2, [r7, #12]
 8005a1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a22:	b2da      	uxtb	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	701a      	strb	r2, [r3, #0]
 8005a28:	e006      	b.n	8005a38 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	60fb      	str	r3, [r7, #12]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	b2da      	uxtb	r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005a38:	4b37      	ldr	r3, [pc, #220]	; (8005b18 <_SendPacket+0x1c8>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005a3e:	4b35      	ldr	r3, [pc, #212]	; (8005b14 <_SendPacket+0x1c4>)
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	69ba      	ldr	r2, [r7, #24]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	623b      	str	r3, [r7, #32]
 8005a50:	e00b      	b.n	8005a6a <_SendPacket+0x11a>
 8005a52:	6a3b      	ldr	r3, [r7, #32]
 8005a54:	b2da      	uxtb	r2, r3
 8005a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a58:	1c59      	adds	r1, r3, #1
 8005a5a:	6279      	str	r1, [r7, #36]	; 0x24
 8005a5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a60:	b2d2      	uxtb	r2, r2
 8005a62:	701a      	strb	r2, [r3, #0]
 8005a64:	6a3b      	ldr	r3, [r7, #32]
 8005a66:	09db      	lsrs	r3, r3, #7
 8005a68:	623b      	str	r3, [r7, #32]
 8005a6a:	6a3b      	ldr	r3, [r7, #32]
 8005a6c:	2b7f      	cmp	r3, #127	; 0x7f
 8005a6e:	d8f0      	bhi.n	8005a52 <_SendPacket+0x102>
 8005a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a72:	1c5a      	adds	r2, r3, #1
 8005a74:	627a      	str	r2, [r7, #36]	; 0x24
 8005a76:	6a3a      	ldr	r2, [r7, #32]
 8005a78:	b2d2      	uxtb	r2, r2
 8005a7a:	701a      	strb	r2, [r3, #0]
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005a80:	4b24      	ldr	r3, [pc, #144]	; (8005b14 <_SendPacket+0x1c4>)
 8005a82:	785b      	ldrb	r3, [r3, #1]
 8005a84:	4618      	mov	r0, r3
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	68f9      	ldr	r1, [r7, #12]
 8005a90:	f7fa fb9e 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005a94:	4603      	mov	r3, r0
 8005a96:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005a98:	f7ff f9fa 	bl	8004e90 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005aa2:	4a1c      	ldr	r2, [pc, #112]	; (8005b14 <_SendPacket+0x1c4>)
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	60d3      	str	r3, [r2, #12]
 8005aa8:	e00b      	b.n	8005ac2 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005aaa:	4b1a      	ldr	r3, [pc, #104]	; (8005b14 <_SendPacket+0x1c4>)
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	b2da      	uxtb	r2, r3
 8005ab2:	4b18      	ldr	r3, [pc, #96]	; (8005b14 <_SendPacket+0x1c4>)
 8005ab4:	701a      	strb	r2, [r3, #0]
 8005ab6:	e004      	b.n	8005ac2 <_SendPacket+0x172>
    goto SendDone;
 8005ab8:	bf00      	nop
 8005aba:	e002      	b.n	8005ac2 <_SendPacket+0x172>
      goto SendDone;
 8005abc:	bf00      	nop
 8005abe:	e000      	b.n	8005ac2 <_SendPacket+0x172>
      goto SendDone;
 8005ac0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005ac2:	4b14      	ldr	r3, [pc, #80]	; (8005b14 <_SendPacket+0x1c4>)
 8005ac4:	7e1b      	ldrb	r3, [r3, #24]
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	4a14      	ldr	r2, [pc, #80]	; (8005b1c <_SendPacket+0x1cc>)
 8005aca:	460b      	mov	r3, r1
 8005acc:	005b      	lsls	r3, r3, #1
 8005ace:	440b      	add	r3, r1
 8005ad0:	00db      	lsls	r3, r3, #3
 8005ad2:	4413      	add	r3, r2
 8005ad4:	336c      	adds	r3, #108	; 0x6c
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	4b0e      	ldr	r3, [pc, #56]	; (8005b14 <_SendPacket+0x1c4>)
 8005ada:	7e1b      	ldrb	r3, [r3, #24]
 8005adc:	4618      	mov	r0, r3
 8005ade:	490f      	ldr	r1, [pc, #60]	; (8005b1c <_SendPacket+0x1cc>)
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	005b      	lsls	r3, r3, #1
 8005ae4:	4403      	add	r3, r0
 8005ae6:	00db      	lsls	r3, r3, #3
 8005ae8:	440b      	add	r3, r1
 8005aea:	3370      	adds	r3, #112	; 0x70
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d00b      	beq.n	8005b0a <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005af2:	4b08      	ldr	r3, [pc, #32]	; (8005b14 <_SendPacket+0x1c4>)
 8005af4:	789b      	ldrb	r3, [r3, #2]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d107      	bne.n	8005b0a <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005afa:	4b06      	ldr	r3, [pc, #24]	; (8005b14 <_SendPacket+0x1c4>)
 8005afc:	2201      	movs	r2, #1
 8005afe:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005b00:	f7ff fe40 	bl	8005784 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005b04:	4b03      	ldr	r3, [pc, #12]	; (8005b14 <_SendPacket+0x1c4>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005b0a:	bf00      	nop
 8005b0c:	3728      	adds	r7, #40	; 0x28
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	20014264 	.word	0x20014264
 8005b18:	e0001004 	.word	0xe0001004
 8005b1c:	20014404 	.word	0x20014404

08005b20 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b08a      	sub	sp, #40	; 0x28
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	460b      	mov	r3, r1
 8005b2a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	3301      	adds	r3, #1
 8005b36:	2b80      	cmp	r3, #128	; 0x80
 8005b38:	d80a      	bhi.n	8005b50 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	1c59      	adds	r1, r3, #1
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	6051      	str	r1, [r2, #4]
 8005b44:	78fa      	ldrb	r2, [r7, #3]
 8005b46:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	1c5a      	adds	r2, r3, #1
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	2b80      	cmp	r3, #128	; 0x80
 8005b56:	d15a      	bne.n	8005c0e <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	691a      	ldr	r2, [r3, #16]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	b2d2      	uxtb	r2, r2
 8005b62:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	627b      	str	r3, [r7, #36]	; 0x24
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	623b      	str	r3, [r7, #32]
 8005b78:	e00b      	b.n	8005b92 <_StoreChar+0x72>
 8005b7a:	6a3b      	ldr	r3, [r7, #32]
 8005b7c:	b2da      	uxtb	r2, r3
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b80:	1c59      	adds	r1, r3, #1
 8005b82:	6279      	str	r1, [r7, #36]	; 0x24
 8005b84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b88:	b2d2      	uxtb	r2, r2
 8005b8a:	701a      	strb	r2, [r3, #0]
 8005b8c:	6a3b      	ldr	r3, [r7, #32]
 8005b8e:	09db      	lsrs	r3, r3, #7
 8005b90:	623b      	str	r3, [r7, #32]
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	2b7f      	cmp	r3, #127	; 0x7f
 8005b96:	d8f0      	bhi.n	8005b7a <_StoreChar+0x5a>
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	1c5a      	adds	r2, r3, #1
 8005b9c:	627a      	str	r2, [r7, #36]	; 0x24
 8005b9e:	6a3a      	ldr	r2, [r7, #32]
 8005ba0:	b2d2      	uxtb	r2, r2
 8005ba2:	701a      	strb	r2, [r3, #0]
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	61fb      	str	r3, [r7, #28]
 8005bac:	2300      	movs	r3, #0
 8005bae:	61bb      	str	r3, [r7, #24]
 8005bb0:	e00b      	b.n	8005bca <_StoreChar+0xaa>
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	b2da      	uxtb	r2, r3
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	1c59      	adds	r1, r3, #1
 8005bba:	61f9      	str	r1, [r7, #28]
 8005bbc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bc0:	b2d2      	uxtb	r2, r2
 8005bc2:	701a      	strb	r2, [r3, #0]
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	09db      	lsrs	r3, r3, #7
 8005bc8:	61bb      	str	r3, [r7, #24]
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	2b7f      	cmp	r3, #127	; 0x7f
 8005bce:	d8f0      	bhi.n	8005bb2 <_StoreChar+0x92>
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	1c5a      	adds	r2, r3, #1
 8005bd4:	61fa      	str	r2, [r7, #28]
 8005bd6:	69ba      	ldr	r2, [r7, #24]
 8005bd8:	b2d2      	uxtb	r2, r2
 8005bda:	701a      	strb	r2, [r3, #0]
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	221a      	movs	r2, #26
 8005be6:	6939      	ldr	r1, [r7, #16]
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7ff feb1 	bl	8005950 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7ff fdb9 	bl	800576a <_PreparePacket>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	1c5a      	adds	r2, r3, #1
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	611a      	str	r2, [r3, #16]
  }
}
 8005c0e:	bf00      	nop
 8005c10:	3728      	adds	r7, #40	; 0x28
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
	...

08005c18 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b08a      	sub	sp, #40	; 0x28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
 8005c24:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005c32:	e007      	b.n	8005c44 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005c34:	6a3a      	ldr	r2, [r7, #32]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c3c:	623b      	str	r3, [r7, #32]
    Width++;
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	3301      	adds	r3, #1
 8005c42:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005c44:	6a3a      	ldr	r2, [r7, #32]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d2f3      	bcs.n	8005c34 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d901      	bls.n	8005c58 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d11f      	bne.n	8005ca2 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d01c      	beq.n	8005ca2 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c6a:	f003 0302 	and.w	r3, r3, #2
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d005      	beq.n	8005c7e <_PrintUnsigned+0x66>
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d102      	bne.n	8005c7e <_PrintUnsigned+0x66>
        c = '0';
 8005c78:	2330      	movs	r3, #48	; 0x30
 8005c7a:	76fb      	strb	r3, [r7, #27]
 8005c7c:	e001      	b.n	8005c82 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005c7e:	2320      	movs	r3, #32
 8005c80:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c82:	e007      	b.n	8005c94 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c86:	3b01      	subs	r3, #1
 8005c88:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005c8a:	7efb      	ldrb	r3, [r7, #27]
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f7ff ff46 	bl	8005b20 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <_PrintUnsigned+0x8a>
 8005c9a:	69fa      	ldr	r2, [r7, #28]
 8005c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d3f0      	bcc.n	8005c84 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d903      	bls.n	8005cb0 <_PrintUnsigned+0x98>
      NumDigits--;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	3b01      	subs	r3, #1
 8005cac:	603b      	str	r3, [r7, #0]
 8005cae:	e009      	b.n	8005cc4 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb8:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d200      	bcs.n	8005cc4 <_PrintUnsigned+0xac>
        break;
 8005cc2:	e005      	b.n	8005cd0 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	fb02 f303 	mul.w	r3, r2, r3
 8005ccc:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005cce:	e7e8      	b.n	8005ca2 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd8:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cde:	fb02 f303 	mul.w	r3, r2, r3
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005ce8:	4a15      	ldr	r2, [pc, #84]	; (8005d40 <_PrintUnsigned+0x128>)
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	4413      	add	r3, r2
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f7ff ff14 	bl	8005b20 <_StoreChar>
    Digit /= Base;
 8005cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d00:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1e3      	bne.n	8005cd0 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d011      	beq.n	8005d36 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00e      	beq.n	8005d36 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005d18:	e006      	b.n	8005d28 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005d20:	2120      	movs	r1, #32
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f7ff fefc 	bl	8005b20 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <_PrintUnsigned+0x11e>
 8005d2e:	69fa      	ldr	r2, [r7, #28]
 8005d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d3f1      	bcc.n	8005d1a <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005d36:	bf00      	nop
 8005d38:	3728      	adds	r7, #40	; 0x28
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	08007504 	.word	0x08007504

08005d44 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b088      	sub	sp, #32
 8005d48:	af02      	add	r7, sp, #8
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
 8005d50:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	bfb8      	it	lt
 8005d58:	425b      	neglt	r3, r3
 8005d5a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005d60:	e007      	b.n	8005d72 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	fb92 f3f3 	sdiv	r3, r2, r3
 8005d6a:	613b      	str	r3, [r7, #16]
    Width++;
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	daf3      	bge.n	8005d62 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d901      	bls.n	8005d86 <_PrintInt+0x42>
    Width = NumDigits;
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005d86:	6a3b      	ldr	r3, [r7, #32]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00a      	beq.n	8005da2 <_PrintInt+0x5e>
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	db04      	blt.n	8005d9c <_PrintInt+0x58>
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	f003 0304 	and.w	r3, r3, #4
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d002      	beq.n	8005da2 <_PrintInt+0x5e>
    FieldWidth--;
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	f003 0302 	and.w	r3, r3, #2
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d002      	beq.n	8005db2 <_PrintInt+0x6e>
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d016      	beq.n	8005de0 <_PrintInt+0x9c>
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	f003 0301 	and.w	r3, r3, #1
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d111      	bne.n	8005de0 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005dbc:	6a3b      	ldr	r3, [r7, #32]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00e      	beq.n	8005de0 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005dc2:	e006      	b.n	8005dd2 <_PrintInt+0x8e>
        FieldWidth--;
 8005dc4:	6a3b      	ldr	r3, [r7, #32]
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005dca:	2120      	movs	r1, #32
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f7ff fea7 	bl	8005b20 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d003      	beq.n	8005de0 <_PrintInt+0x9c>
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	6a3b      	ldr	r3, [r7, #32]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d3f1      	bcc.n	8005dc4 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	da07      	bge.n	8005df6 <_PrintInt+0xb2>
    v = -v;
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	425b      	negs	r3, r3
 8005dea:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005dec:	212d      	movs	r1, #45	; 0x2d
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f7ff fe96 	bl	8005b20 <_StoreChar>
 8005df4:	e008      	b.n	8005e08 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df8:	f003 0304 	and.w	r3, r3, #4
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d003      	beq.n	8005e08 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005e00:	212b      	movs	r1, #43	; 0x2b
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f7ff fe8c 	bl	8005b20 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d019      	beq.n	8005e46 <_PrintInt+0x102>
 8005e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d114      	bne.n	8005e46 <_PrintInt+0x102>
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d111      	bne.n	8005e46 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005e22:	6a3b      	ldr	r3, [r7, #32]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00e      	beq.n	8005e46 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e28:	e006      	b.n	8005e38 <_PrintInt+0xf4>
        FieldWidth--;
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005e30:	2130      	movs	r1, #48	; 0x30
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f7ff fe74 	bl	8005b20 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e38:	6a3b      	ldr	r3, [r7, #32]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <_PrintInt+0x102>
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	6a3b      	ldr	r3, [r7, #32]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d3f1      	bcc.n	8005e2a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005e46:	68b9      	ldr	r1, [r7, #8]
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	9301      	str	r3, [sp, #4]
 8005e4c:	6a3b      	ldr	r3, [r7, #32]
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f7ff fedf 	bl	8005c18 <_PrintUnsigned>
}
 8005e5a:	bf00      	nop
 8005e5c:	3718      	adds	r7, #24
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
	...

08005e64 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b098      	sub	sp, #96	; 0x60
 8005e68:	af02      	add	r7, sp, #8
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005e70:	f3ef 8311 	mrs	r3, BASEPRI
 8005e74:	f04f 0120 	mov.w	r1, #32
 8005e78:	f381 8811 	msr	BASEPRI, r1
 8005e7c:	633b      	str	r3, [r7, #48]	; 0x30
 8005e7e:	48b7      	ldr	r0, [pc, #732]	; (800615c <_VPrintTarget+0x2f8>)
 8005e80:	f7ff fc73 	bl	800576a <_PreparePacket>
 8005e84:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005e86:	4bb5      	ldr	r3, [pc, #724]	; (800615c <_VPrintTarget+0x2f8>)
 8005e88:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e90:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	3301      	adds	r3, #1
 8005e96:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005eaa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f000 8183 	beq.w	80061ba <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005eb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005eb8:	2b25      	cmp	r3, #37	; 0x25
 8005eba:	f040 8170 	bne.w	800619e <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005ece:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ed2:	3b23      	subs	r3, #35	; 0x23
 8005ed4:	2b0d      	cmp	r3, #13
 8005ed6:	d83f      	bhi.n	8005f58 <_VPrintTarget+0xf4>
 8005ed8:	a201      	add	r2, pc, #4	; (adr r2, 8005ee0 <_VPrintTarget+0x7c>)
 8005eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ede:	bf00      	nop
 8005ee0:	08005f49 	.word	0x08005f49
 8005ee4:	08005f59 	.word	0x08005f59
 8005ee8:	08005f59 	.word	0x08005f59
 8005eec:	08005f59 	.word	0x08005f59
 8005ef0:	08005f59 	.word	0x08005f59
 8005ef4:	08005f59 	.word	0x08005f59
 8005ef8:	08005f59 	.word	0x08005f59
 8005efc:	08005f59 	.word	0x08005f59
 8005f00:	08005f39 	.word	0x08005f39
 8005f04:	08005f59 	.word	0x08005f59
 8005f08:	08005f19 	.word	0x08005f19
 8005f0c:	08005f59 	.word	0x08005f59
 8005f10:	08005f59 	.word	0x08005f59
 8005f14:	08005f29 	.word	0x08005f29
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005f18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f1a:	f043 0301 	orr.w	r3, r3, #1
 8005f1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	3301      	adds	r3, #1
 8005f24:	60fb      	str	r3, [r7, #12]
 8005f26:	e01a      	b.n	8005f5e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f2a:	f043 0302 	orr.w	r3, r3, #2
 8005f2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	3301      	adds	r3, #1
 8005f34:	60fb      	str	r3, [r7, #12]
 8005f36:	e012      	b.n	8005f5e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005f38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f3a:	f043 0304 	orr.w	r3, r3, #4
 8005f3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	3301      	adds	r3, #1
 8005f44:	60fb      	str	r3, [r7, #12]
 8005f46:	e00a      	b.n	8005f5e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005f48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f4a:	f043 0308 	orr.w	r3, r3, #8
 8005f4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	3301      	adds	r3, #1
 8005f54:	60fb      	str	r3, [r7, #12]
 8005f56:	e002      	b.n	8005f5e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	653b      	str	r3, [r7, #80]	; 0x50
 8005f5c:	bf00      	nop
        }
      } while (v);
 8005f5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1b0      	bne.n	8005ec6 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005f64:	2300      	movs	r3, #0
 8005f66:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005f70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f74:	2b2f      	cmp	r3, #47	; 0x2f
 8005f76:	d912      	bls.n	8005f9e <_VPrintTarget+0x13a>
 8005f78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f7c:	2b39      	cmp	r3, #57	; 0x39
 8005f7e:	d80e      	bhi.n	8005f9e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	3301      	adds	r3, #1
 8005f84:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005f86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f88:	4613      	mov	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4413      	add	r3, r2
 8005f8e:	005b      	lsls	r3, r3, #1
 8005f90:	461a      	mov	r2, r3
 8005f92:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f96:	4413      	add	r3, r2
 8005f98:	3b30      	subs	r3, #48	; 0x30
 8005f9a:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005f9c:	e7e4      	b.n	8005f68 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005faa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fae:	2b2e      	cmp	r3, #46	; 0x2e
 8005fb0:	d11d      	bne.n	8005fee <_VPrintTarget+0x18a>
        sFormat++;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005fc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fc4:	2b2f      	cmp	r3, #47	; 0x2f
 8005fc6:	d912      	bls.n	8005fee <_VPrintTarget+0x18a>
 8005fc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fcc:	2b39      	cmp	r3, #57	; 0x39
 8005fce:	d80e      	bhi.n	8005fee <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005fd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fd8:	4613      	mov	r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	005b      	lsls	r3, r3, #1
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fe6:	4413      	add	r3, r2
 8005fe8:	3b30      	subs	r3, #48	; 0x30
 8005fea:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005fec:	e7e4      	b.n	8005fb8 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005ff6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ffa:	2b6c      	cmp	r3, #108	; 0x6c
 8005ffc:	d003      	beq.n	8006006 <_VPrintTarget+0x1a2>
 8005ffe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006002:	2b68      	cmp	r3, #104	; 0x68
 8006004:	d107      	bne.n	8006016 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	3301      	adds	r3, #1
 8006012:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8006014:	e7ef      	b.n	8005ff6 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8006016:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800601a:	2b25      	cmp	r3, #37	; 0x25
 800601c:	f000 80b3 	beq.w	8006186 <_VPrintTarget+0x322>
 8006020:	2b25      	cmp	r3, #37	; 0x25
 8006022:	f2c0 80b7 	blt.w	8006194 <_VPrintTarget+0x330>
 8006026:	2b78      	cmp	r3, #120	; 0x78
 8006028:	f300 80b4 	bgt.w	8006194 <_VPrintTarget+0x330>
 800602c:	2b58      	cmp	r3, #88	; 0x58
 800602e:	f2c0 80b1 	blt.w	8006194 <_VPrintTarget+0x330>
 8006032:	3b58      	subs	r3, #88	; 0x58
 8006034:	2b20      	cmp	r3, #32
 8006036:	f200 80ad 	bhi.w	8006194 <_VPrintTarget+0x330>
 800603a:	a201      	add	r2, pc, #4	; (adr r2, 8006040 <_VPrintTarget+0x1dc>)
 800603c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006040:	08006137 	.word	0x08006137
 8006044:	08006195 	.word	0x08006195
 8006048:	08006195 	.word	0x08006195
 800604c:	08006195 	.word	0x08006195
 8006050:	08006195 	.word	0x08006195
 8006054:	08006195 	.word	0x08006195
 8006058:	08006195 	.word	0x08006195
 800605c:	08006195 	.word	0x08006195
 8006060:	08006195 	.word	0x08006195
 8006064:	08006195 	.word	0x08006195
 8006068:	08006195 	.word	0x08006195
 800606c:	080060c5 	.word	0x080060c5
 8006070:	080060eb 	.word	0x080060eb
 8006074:	08006195 	.word	0x08006195
 8006078:	08006195 	.word	0x08006195
 800607c:	08006195 	.word	0x08006195
 8006080:	08006195 	.word	0x08006195
 8006084:	08006195 	.word	0x08006195
 8006088:	08006195 	.word	0x08006195
 800608c:	08006195 	.word	0x08006195
 8006090:	08006195 	.word	0x08006195
 8006094:	08006195 	.word	0x08006195
 8006098:	08006195 	.word	0x08006195
 800609c:	08006195 	.word	0x08006195
 80060a0:	08006161 	.word	0x08006161
 80060a4:	08006195 	.word	0x08006195
 80060a8:	08006195 	.word	0x08006195
 80060ac:	08006195 	.word	0x08006195
 80060b0:	08006195 	.word	0x08006195
 80060b4:	08006111 	.word	0x08006111
 80060b8:	08006195 	.word	0x08006195
 80060bc:	08006195 	.word	0x08006195
 80060c0:	08006137 	.word	0x08006137
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	1d19      	adds	r1, r3, #4
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	6011      	str	r1, [r2, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 80060d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 80060d8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80060dc:	f107 0314 	add.w	r3, r7, #20
 80060e0:	4611      	mov	r1, r2
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7ff fd1c 	bl	8005b20 <_StoreChar>
        break;
 80060e8:	e055      	b.n	8006196 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	1d19      	adds	r1, r3, #4
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	6011      	str	r1, [r2, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80060f8:	f107 0014 	add.w	r0, r7, #20
 80060fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060fe:	9301      	str	r3, [sp, #4]
 8006100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006102:	9300      	str	r3, [sp, #0]
 8006104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006106:	220a      	movs	r2, #10
 8006108:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800610a:	f7ff fe1b 	bl	8005d44 <_PrintInt>
        break;
 800610e:	e042      	b.n	8006196 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	1d19      	adds	r1, r3, #4
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	6011      	str	r1, [r2, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800611e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006120:	f107 0014 	add.w	r0, r7, #20
 8006124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006126:	9301      	str	r3, [sp, #4]
 8006128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800612e:	220a      	movs	r2, #10
 8006130:	f7ff fd72 	bl	8005c18 <_PrintUnsigned>
        break;
 8006134:	e02f      	b.n	8006196 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	1d19      	adds	r1, r3, #4
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	6011      	str	r1, [r2, #0]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006144:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006146:	f107 0014 	add.w	r0, r7, #20
 800614a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800614c:	9301      	str	r3, [sp, #4]
 800614e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006150:	9300      	str	r3, [sp, #0]
 8006152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006154:	2210      	movs	r2, #16
 8006156:	f7ff fd5f 	bl	8005c18 <_PrintUnsigned>
        break;
 800615a:	e01c      	b.n	8006196 <_VPrintTarget+0x332>
 800615c:	20014294 	.word	0x20014294
      case 'p':
        v = va_arg(*pParamList, int);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	1d19      	adds	r1, r3, #4
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	6011      	str	r1, [r2, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 800616e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006170:	f107 0014 	add.w	r0, r7, #20
 8006174:	2300      	movs	r3, #0
 8006176:	9301      	str	r3, [sp, #4]
 8006178:	2308      	movs	r3, #8
 800617a:	9300      	str	r3, [sp, #0]
 800617c:	2308      	movs	r3, #8
 800617e:	2210      	movs	r2, #16
 8006180:	f7ff fd4a 	bl	8005c18 <_PrintUnsigned>
        break;
 8006184:	e007      	b.n	8006196 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006186:	f107 0314 	add.w	r3, r7, #20
 800618a:	2125      	movs	r1, #37	; 0x25
 800618c:	4618      	mov	r0, r3
 800618e:	f7ff fcc7 	bl	8005b20 <_StoreChar>
        break;
 8006192:	e000      	b.n	8006196 <_VPrintTarget+0x332>
      default:
        break;
 8006194:	bf00      	nop
      }
      sFormat++;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	3301      	adds	r3, #1
 800619a:	60fb      	str	r3, [r7, #12]
 800619c:	e007      	b.n	80061ae <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 800619e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80061a2:	f107 0314 	add.w	r3, r7, #20
 80061a6:	4611      	mov	r1, r2
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7ff fcb9 	bl	8005b20 <_StoreChar>
    }
  } while (*sFormat);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f47f ae72 	bne.w	8005e9c <_VPrintTarget+0x38>
 80061b8:	e000      	b.n	80061bc <_VPrintTarget+0x358>
      break;
 80061ba:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80061bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d041      	beq.n	8006246 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 80061c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	b2d2      	uxtb	r2, r2
 80061c8:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	643b      	str	r3, [r7, #64]	; 0x40
 80061ce:	6a3b      	ldr	r3, [r7, #32]
 80061d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061d2:	e00b      	b.n	80061ec <_VPrintTarget+0x388>
 80061d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061d6:	b2da      	uxtb	r2, r3
 80061d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061da:	1c59      	adds	r1, r3, #1
 80061dc:	6439      	str	r1, [r7, #64]	; 0x40
 80061de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061e2:	b2d2      	uxtb	r2, r2
 80061e4:	701a      	strb	r2, [r3, #0]
 80061e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061e8:	09db      	lsrs	r3, r3, #7
 80061ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ee:	2b7f      	cmp	r3, #127	; 0x7f
 80061f0:	d8f0      	bhi.n	80061d4 <_VPrintTarget+0x370>
 80061f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061f4:	1c5a      	adds	r2, r3, #1
 80061f6:	643a      	str	r2, [r7, #64]	; 0x40
 80061f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061fa:	b2d2      	uxtb	r2, r2
 80061fc:	701a      	strb	r2, [r3, #0]
 80061fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006200:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	63bb      	str	r3, [r7, #56]	; 0x38
 8006206:	2300      	movs	r3, #0
 8006208:	637b      	str	r3, [r7, #52]	; 0x34
 800620a:	e00b      	b.n	8006224 <_VPrintTarget+0x3c0>
 800620c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800620e:	b2da      	uxtb	r2, r3
 8006210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006212:	1c59      	adds	r1, r3, #1
 8006214:	63b9      	str	r1, [r7, #56]	; 0x38
 8006216:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800621a:	b2d2      	uxtb	r2, r2
 800621c:	701a      	strb	r2, [r3, #0]
 800621e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006220:	09db      	lsrs	r3, r3, #7
 8006222:	637b      	str	r3, [r7, #52]	; 0x34
 8006224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006226:	2b7f      	cmp	r3, #127	; 0x7f
 8006228:	d8f0      	bhi.n	800620c <_VPrintTarget+0x3a8>
 800622a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622c:	1c5a      	adds	r2, r3, #1
 800622e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006230:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006232:	b2d2      	uxtb	r2, r2
 8006234:	701a      	strb	r2, [r3, #0]
 8006236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006238:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	69b9      	ldr	r1, [r7, #24]
 800623e:	221a      	movs	r2, #26
 8006240:	4618      	mov	r0, r3
 8006242:	f7ff fb85 	bl	8005950 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006248:	f383 8811 	msr	BASEPRI, r3
#endif
}
 800624c:	bf00      	nop
 800624e:	3758      	adds	r7, #88	; 0x58
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006254:	b580      	push	{r7, lr}
 8006256:	b086      	sub	sp, #24
 8006258:	af02      	add	r7, sp, #8
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
 8006260:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006262:	2300      	movs	r3, #0
 8006264:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006268:	4917      	ldr	r1, [pc, #92]	; (80062c8 <SEGGER_SYSVIEW_Init+0x74>)
 800626a:	4818      	ldr	r0, [pc, #96]	; (80062cc <SEGGER_SYSVIEW_Init+0x78>)
 800626c:	f7ff f93c 	bl	80054e8 <SEGGER_RTT_AllocUpBuffer>
 8006270:	4603      	mov	r3, r0
 8006272:	b2da      	uxtb	r2, r3
 8006274:	4b16      	ldr	r3, [pc, #88]	; (80062d0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006276:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006278:	4b15      	ldr	r3, [pc, #84]	; (80062d0 <SEGGER_SYSVIEW_Init+0x7c>)
 800627a:	785a      	ldrb	r2, [r3, #1]
 800627c:	4b14      	ldr	r3, [pc, #80]	; (80062d0 <SEGGER_SYSVIEW_Init+0x7c>)
 800627e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006280:	4b13      	ldr	r3, [pc, #76]	; (80062d0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006282:	7e1b      	ldrb	r3, [r3, #24]
 8006284:	4618      	mov	r0, r3
 8006286:	2300      	movs	r3, #0
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	2308      	movs	r3, #8
 800628c:	4a11      	ldr	r2, [pc, #68]	; (80062d4 <SEGGER_SYSVIEW_Init+0x80>)
 800628e:	490f      	ldr	r1, [pc, #60]	; (80062cc <SEGGER_SYSVIEW_Init+0x78>)
 8006290:	f7ff f9ae 	bl	80055f0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006294:	4b0e      	ldr	r3, [pc, #56]	; (80062d0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006296:	2200      	movs	r2, #0
 8006298:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800629a:	4b0f      	ldr	r3, [pc, #60]	; (80062d8 <SEGGER_SYSVIEW_Init+0x84>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a0c      	ldr	r2, [pc, #48]	; (80062d0 <SEGGER_SYSVIEW_Init+0x7c>)
 80062a0:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80062a2:	4a0b      	ldr	r2, [pc, #44]	; (80062d0 <SEGGER_SYSVIEW_Init+0x7c>)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80062a8:	4a09      	ldr	r2, [pc, #36]	; (80062d0 <SEGGER_SYSVIEW_Init+0x7c>)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80062ae:	4a08      	ldr	r2, [pc, #32]	; (80062d0 <SEGGER_SYSVIEW_Init+0x7c>)
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80062b4:	4a06      	ldr	r2, [pc, #24]	; (80062d0 <SEGGER_SYSVIEW_Init+0x7c>)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80062ba:	4b05      	ldr	r3, [pc, #20]	; (80062d0 <SEGGER_SYSVIEW_Init+0x7c>)
 80062bc:	2200      	movs	r2, #0
 80062be:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80062c0:	bf00      	nop
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	2001325c 	.word	0x2001325c
 80062cc:	08007478 	.word	0x08007478
 80062d0:	20014264 	.word	0x20014264
 80062d4:	2001425c 	.word	0x2001425c
 80062d8:	e0001004 	.word	0xe0001004

080062dc <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80062e4:	4a04      	ldr	r2, [pc, #16]	; (80062f8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6113      	str	r3, [r2, #16]
}
 80062ea:	bf00      	nop
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	20014264 	.word	0x20014264

080062fc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006304:	f3ef 8311 	mrs	r3, BASEPRI
 8006308:	f04f 0120 	mov.w	r1, #32
 800630c:	f381 8811 	msr	BASEPRI, r1
 8006310:	60fb      	str	r3, [r7, #12]
 8006312:	4808      	ldr	r0, [pc, #32]	; (8006334 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006314:	f7ff fa29 	bl	800576a <_PreparePacket>
 8006318:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	68b9      	ldr	r1, [r7, #8]
 800631e:	68b8      	ldr	r0, [r7, #8]
 8006320:	f7ff fb16 	bl	8005950 <_SendPacket>
  RECORD_END();
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f383 8811 	msr	BASEPRI, r3
}
 800632a:	bf00      	nop
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	20014294 	.word	0x20014294

08006338 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006338:	b580      	push	{r7, lr}
 800633a:	b088      	sub	sp, #32
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006342:	f3ef 8311 	mrs	r3, BASEPRI
 8006346:	f04f 0120 	mov.w	r1, #32
 800634a:	f381 8811 	msr	BASEPRI, r1
 800634e:	617b      	str	r3, [r7, #20]
 8006350:	4816      	ldr	r0, [pc, #88]	; (80063ac <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006352:	f7ff fa0a 	bl	800576a <_PreparePacket>
 8006356:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	61fb      	str	r3, [r7, #28]
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	61bb      	str	r3, [r7, #24]
 8006364:	e00b      	b.n	800637e <SEGGER_SYSVIEW_RecordU32+0x46>
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	b2da      	uxtb	r2, r3
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	1c59      	adds	r1, r3, #1
 800636e:	61f9      	str	r1, [r7, #28]
 8006370:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006374:	b2d2      	uxtb	r2, r2
 8006376:	701a      	strb	r2, [r3, #0]
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	09db      	lsrs	r3, r3, #7
 800637c:	61bb      	str	r3, [r7, #24]
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	2b7f      	cmp	r3, #127	; 0x7f
 8006382:	d8f0      	bhi.n	8006366 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	1c5a      	adds	r2, r3, #1
 8006388:	61fa      	str	r2, [r7, #28]
 800638a:	69ba      	ldr	r2, [r7, #24]
 800638c:	b2d2      	uxtb	r2, r2
 800638e:	701a      	strb	r2, [r3, #0]
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	68f9      	ldr	r1, [r7, #12]
 8006398:	6938      	ldr	r0, [r7, #16]
 800639a:	f7ff fad9 	bl	8005950 <_SendPacket>
  RECORD_END();
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	f383 8811 	msr	BASEPRI, r3
}
 80063a4:	bf00      	nop
 80063a6:	3720      	adds	r7, #32
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	20014294 	.word	0x20014294

080063b0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b08c      	sub	sp, #48	; 0x30
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80063bc:	f3ef 8311 	mrs	r3, BASEPRI
 80063c0:	f04f 0120 	mov.w	r1, #32
 80063c4:	f381 8811 	msr	BASEPRI, r1
 80063c8:	61fb      	str	r3, [r7, #28]
 80063ca:	4825      	ldr	r0, [pc, #148]	; (8006460 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80063cc:	f7ff f9cd 	bl	800576a <_PreparePacket>
 80063d0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80063de:	e00b      	b.n	80063f8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80063e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e6:	1c59      	adds	r1, r3, #1
 80063e8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80063ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063ee:	b2d2      	uxtb	r2, r2
 80063f0:	701a      	strb	r2, [r3, #0]
 80063f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f4:	09db      	lsrs	r3, r3, #7
 80063f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80063f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fa:	2b7f      	cmp	r3, #127	; 0x7f
 80063fc:	d8f0      	bhi.n	80063e0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80063fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006400:	1c5a      	adds	r2, r3, #1
 8006402:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006404:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006406:	b2d2      	uxtb	r2, r2
 8006408:	701a      	strb	r2, [r3, #0]
 800640a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	627b      	str	r3, [r7, #36]	; 0x24
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	623b      	str	r3, [r7, #32]
 8006416:	e00b      	b.n	8006430 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006418:	6a3b      	ldr	r3, [r7, #32]
 800641a:	b2da      	uxtb	r2, r3
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	1c59      	adds	r1, r3, #1
 8006420:	6279      	str	r1, [r7, #36]	; 0x24
 8006422:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006426:	b2d2      	uxtb	r2, r2
 8006428:	701a      	strb	r2, [r3, #0]
 800642a:	6a3b      	ldr	r3, [r7, #32]
 800642c:	09db      	lsrs	r3, r3, #7
 800642e:	623b      	str	r3, [r7, #32]
 8006430:	6a3b      	ldr	r3, [r7, #32]
 8006432:	2b7f      	cmp	r3, #127	; 0x7f
 8006434:	d8f0      	bhi.n	8006418 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006438:	1c5a      	adds	r2, r3, #1
 800643a:	627a      	str	r2, [r7, #36]	; 0x24
 800643c:	6a3a      	ldr	r2, [r7, #32]
 800643e:	b2d2      	uxtb	r2, r2
 8006440:	701a      	strb	r2, [r3, #0]
 8006442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006444:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	6979      	ldr	r1, [r7, #20]
 800644a:	69b8      	ldr	r0, [r7, #24]
 800644c:	f7ff fa80 	bl	8005950 <_SendPacket>
  RECORD_END();
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	f383 8811 	msr	BASEPRI, r3
}
 8006456:	bf00      	nop
 8006458:	3730      	adds	r7, #48	; 0x30
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	20014294 	.word	0x20014294

08006464 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006464:	b580      	push	{r7, lr}
 8006466:	b08e      	sub	sp, #56	; 0x38
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
 8006470:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006472:	f3ef 8311 	mrs	r3, BASEPRI
 8006476:	f04f 0120 	mov.w	r1, #32
 800647a:	f381 8811 	msr	BASEPRI, r1
 800647e:	61fb      	str	r3, [r7, #28]
 8006480:	4832      	ldr	r0, [pc, #200]	; (800654c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006482:	f7ff f972 	bl	800576a <_PreparePacket>
 8006486:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	637b      	str	r3, [r7, #52]	; 0x34
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	633b      	str	r3, [r7, #48]	; 0x30
 8006494:	e00b      	b.n	80064ae <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006498:	b2da      	uxtb	r2, r3
 800649a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800649c:	1c59      	adds	r1, r3, #1
 800649e:	6379      	str	r1, [r7, #52]	; 0x34
 80064a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064a4:	b2d2      	uxtb	r2, r2
 80064a6:	701a      	strb	r2, [r3, #0]
 80064a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064aa:	09db      	lsrs	r3, r3, #7
 80064ac:	633b      	str	r3, [r7, #48]	; 0x30
 80064ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b0:	2b7f      	cmp	r3, #127	; 0x7f
 80064b2:	d8f0      	bhi.n	8006496 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80064b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b6:	1c5a      	adds	r2, r3, #1
 80064b8:	637a      	str	r2, [r7, #52]	; 0x34
 80064ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064bc:	b2d2      	uxtb	r2, r2
 80064be:	701a      	strb	r2, [r3, #0]
 80064c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80064cc:	e00b      	b.n	80064e6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80064ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d0:	b2da      	uxtb	r2, r3
 80064d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d4:	1c59      	adds	r1, r3, #1
 80064d6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80064d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064dc:	b2d2      	uxtb	r2, r2
 80064de:	701a      	strb	r2, [r3, #0]
 80064e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e2:	09db      	lsrs	r3, r3, #7
 80064e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80064e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e8:	2b7f      	cmp	r3, #127	; 0x7f
 80064ea:	d8f0      	bhi.n	80064ce <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80064ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ee:	1c5a      	adds	r2, r3, #1
 80064f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064f4:	b2d2      	uxtb	r2, r2
 80064f6:	701a      	strb	r2, [r3, #0]
 80064f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	623b      	str	r3, [r7, #32]
 8006504:	e00b      	b.n	800651e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006506:	6a3b      	ldr	r3, [r7, #32]
 8006508:	b2da      	uxtb	r2, r3
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650c:	1c59      	adds	r1, r3, #1
 800650e:	6279      	str	r1, [r7, #36]	; 0x24
 8006510:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006514:	b2d2      	uxtb	r2, r2
 8006516:	701a      	strb	r2, [r3, #0]
 8006518:	6a3b      	ldr	r3, [r7, #32]
 800651a:	09db      	lsrs	r3, r3, #7
 800651c:	623b      	str	r3, [r7, #32]
 800651e:	6a3b      	ldr	r3, [r7, #32]
 8006520:	2b7f      	cmp	r3, #127	; 0x7f
 8006522:	d8f0      	bhi.n	8006506 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006526:	1c5a      	adds	r2, r3, #1
 8006528:	627a      	str	r2, [r7, #36]	; 0x24
 800652a:	6a3a      	ldr	r2, [r7, #32]
 800652c:	b2d2      	uxtb	r2, r2
 800652e:	701a      	strb	r2, [r3, #0]
 8006530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006532:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	6979      	ldr	r1, [r7, #20]
 8006538:	69b8      	ldr	r0, [r7, #24]
 800653a:	f7ff fa09 	bl	8005950 <_SendPacket>
  RECORD_END();
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	f383 8811 	msr	BASEPRI, r3
}
 8006544:	bf00      	nop
 8006546:	3738      	adds	r7, #56	; 0x38
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	20014294 	.word	0x20014294

08006550 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006550:	b580      	push	{r7, lr}
 8006552:	b090      	sub	sp, #64	; 0x40
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
 800655c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800655e:	f3ef 8311 	mrs	r3, BASEPRI
 8006562:	f04f 0120 	mov.w	r1, #32
 8006566:	f381 8811 	msr	BASEPRI, r1
 800656a:	61fb      	str	r3, [r7, #28]
 800656c:	4840      	ldr	r0, [pc, #256]	; (8006670 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800656e:	f7ff f8fc 	bl	800576a <_PreparePacket>
 8006572:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006580:	e00b      	b.n	800659a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006584:	b2da      	uxtb	r2, r3
 8006586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006588:	1c59      	adds	r1, r3, #1
 800658a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800658c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006590:	b2d2      	uxtb	r2, r2
 8006592:	701a      	strb	r2, [r3, #0]
 8006594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006596:	09db      	lsrs	r3, r3, #7
 8006598:	63bb      	str	r3, [r7, #56]	; 0x38
 800659a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659c:	2b7f      	cmp	r3, #127	; 0x7f
 800659e:	d8f0      	bhi.n	8006582 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80065a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065a2:	1c5a      	adds	r2, r3, #1
 80065a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80065a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065a8:	b2d2      	uxtb	r2, r2
 80065aa:	701a      	strb	r2, [r3, #0]
 80065ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	637b      	str	r3, [r7, #52]	; 0x34
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	633b      	str	r3, [r7, #48]	; 0x30
 80065b8:	e00b      	b.n	80065d2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80065ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065bc:	b2da      	uxtb	r2, r3
 80065be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c0:	1c59      	adds	r1, r3, #1
 80065c2:	6379      	str	r1, [r7, #52]	; 0x34
 80065c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065c8:	b2d2      	uxtb	r2, r2
 80065ca:	701a      	strb	r2, [r3, #0]
 80065cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ce:	09db      	lsrs	r3, r3, #7
 80065d0:	633b      	str	r3, [r7, #48]	; 0x30
 80065d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d4:	2b7f      	cmp	r3, #127	; 0x7f
 80065d6:	d8f0      	bhi.n	80065ba <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80065d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065da:	1c5a      	adds	r2, r3, #1
 80065dc:	637a      	str	r2, [r7, #52]	; 0x34
 80065de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065e0:	b2d2      	uxtb	r2, r2
 80065e2:	701a      	strb	r2, [r3, #0]
 80065e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065e6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80065f0:	e00b      	b.n	800660a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80065f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f4:	b2da      	uxtb	r2, r3
 80065f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f8:	1c59      	adds	r1, r3, #1
 80065fa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80065fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006600:	b2d2      	uxtb	r2, r2
 8006602:	701a      	strb	r2, [r3, #0]
 8006604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006606:	09db      	lsrs	r3, r3, #7
 8006608:	62bb      	str	r3, [r7, #40]	; 0x28
 800660a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660c:	2b7f      	cmp	r3, #127	; 0x7f
 800660e:	d8f0      	bhi.n	80065f2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006612:	1c5a      	adds	r2, r3, #1
 8006614:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006616:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006618:	b2d2      	uxtb	r2, r2
 800661a:	701a      	strb	r2, [r3, #0]
 800661c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	627b      	str	r3, [r7, #36]	; 0x24
 8006624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006626:	623b      	str	r3, [r7, #32]
 8006628:	e00b      	b.n	8006642 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800662a:	6a3b      	ldr	r3, [r7, #32]
 800662c:	b2da      	uxtb	r2, r3
 800662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006630:	1c59      	adds	r1, r3, #1
 8006632:	6279      	str	r1, [r7, #36]	; 0x24
 8006634:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006638:	b2d2      	uxtb	r2, r2
 800663a:	701a      	strb	r2, [r3, #0]
 800663c:	6a3b      	ldr	r3, [r7, #32]
 800663e:	09db      	lsrs	r3, r3, #7
 8006640:	623b      	str	r3, [r7, #32]
 8006642:	6a3b      	ldr	r3, [r7, #32]
 8006644:	2b7f      	cmp	r3, #127	; 0x7f
 8006646:	d8f0      	bhi.n	800662a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664a:	1c5a      	adds	r2, r3, #1
 800664c:	627a      	str	r2, [r7, #36]	; 0x24
 800664e:	6a3a      	ldr	r2, [r7, #32]
 8006650:	b2d2      	uxtb	r2, r2
 8006652:	701a      	strb	r2, [r3, #0]
 8006654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006656:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	6979      	ldr	r1, [r7, #20]
 800665c:	69b8      	ldr	r0, [r7, #24]
 800665e:	f7ff f977 	bl	8005950 <_SendPacket>
  RECORD_END();
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	f383 8811 	msr	BASEPRI, r3
}
 8006668:	bf00      	nop
 800666a:	3740      	adds	r7, #64	; 0x40
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	20014294 	.word	0x20014294

08006674 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006674:	b580      	push	{r7, lr}
 8006676:	b08c      	sub	sp, #48	; 0x30
 8006678:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800667a:	4b59      	ldr	r3, [pc, #356]	; (80067e0 <SEGGER_SYSVIEW_Start+0x16c>)
 800667c:	2201      	movs	r2, #1
 800667e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006680:	f3ef 8311 	mrs	r3, BASEPRI
 8006684:	f04f 0120 	mov.w	r1, #32
 8006688:	f381 8811 	msr	BASEPRI, r1
 800668c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800668e:	4b54      	ldr	r3, [pc, #336]	; (80067e0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006690:	785b      	ldrb	r3, [r3, #1]
 8006692:	220a      	movs	r2, #10
 8006694:	4953      	ldr	r1, [pc, #332]	; (80067e4 <SEGGER_SYSVIEW_Start+0x170>)
 8006696:	4618      	mov	r0, r3
 8006698:	f7f9 fd9a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80066a2:	f7fe fbf5 	bl	8004e90 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80066a6:	200a      	movs	r0, #10
 80066a8:	f7ff fe28 	bl	80062fc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80066ac:	f3ef 8311 	mrs	r3, BASEPRI
 80066b0:	f04f 0120 	mov.w	r1, #32
 80066b4:	f381 8811 	msr	BASEPRI, r1
 80066b8:	60bb      	str	r3, [r7, #8]
 80066ba:	484b      	ldr	r0, [pc, #300]	; (80067e8 <SEGGER_SYSVIEW_Start+0x174>)
 80066bc:	f7ff f855 	bl	800576a <_PreparePacket>
 80066c0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066ca:	4b45      	ldr	r3, [pc, #276]	; (80067e0 <SEGGER_SYSVIEW_Start+0x16c>)
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80066d0:	e00b      	b.n	80066ea <SEGGER_SYSVIEW_Start+0x76>
 80066d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d4:	b2da      	uxtb	r2, r3
 80066d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d8:	1c59      	adds	r1, r3, #1
 80066da:	62f9      	str	r1, [r7, #44]	; 0x2c
 80066dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066e0:	b2d2      	uxtb	r2, r2
 80066e2:	701a      	strb	r2, [r3, #0]
 80066e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e6:	09db      	lsrs	r3, r3, #7
 80066e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80066ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ec:	2b7f      	cmp	r3, #127	; 0x7f
 80066ee:	d8f0      	bhi.n	80066d2 <SEGGER_SYSVIEW_Start+0x5e>
 80066f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f2:	1c5a      	adds	r2, r3, #1
 80066f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066f8:	b2d2      	uxtb	r2, r2
 80066fa:	701a      	strb	r2, [r3, #0]
 80066fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fe:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	627b      	str	r3, [r7, #36]	; 0x24
 8006704:	4b36      	ldr	r3, [pc, #216]	; (80067e0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	623b      	str	r3, [r7, #32]
 800670a:	e00b      	b.n	8006724 <SEGGER_SYSVIEW_Start+0xb0>
 800670c:	6a3b      	ldr	r3, [r7, #32]
 800670e:	b2da      	uxtb	r2, r3
 8006710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006712:	1c59      	adds	r1, r3, #1
 8006714:	6279      	str	r1, [r7, #36]	; 0x24
 8006716:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800671a:	b2d2      	uxtb	r2, r2
 800671c:	701a      	strb	r2, [r3, #0]
 800671e:	6a3b      	ldr	r3, [r7, #32]
 8006720:	09db      	lsrs	r3, r3, #7
 8006722:	623b      	str	r3, [r7, #32]
 8006724:	6a3b      	ldr	r3, [r7, #32]
 8006726:	2b7f      	cmp	r3, #127	; 0x7f
 8006728:	d8f0      	bhi.n	800670c <SEGGER_SYSVIEW_Start+0x98>
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	1c5a      	adds	r2, r3, #1
 800672e:	627a      	str	r2, [r7, #36]	; 0x24
 8006730:	6a3a      	ldr	r2, [r7, #32]
 8006732:	b2d2      	uxtb	r2, r2
 8006734:	701a      	strb	r2, [r3, #0]
 8006736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006738:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	61fb      	str	r3, [r7, #28]
 800673e:	4b28      	ldr	r3, [pc, #160]	; (80067e0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	61bb      	str	r3, [r7, #24]
 8006744:	e00b      	b.n	800675e <SEGGER_SYSVIEW_Start+0xea>
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	b2da      	uxtb	r2, r3
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	1c59      	adds	r1, r3, #1
 800674e:	61f9      	str	r1, [r7, #28]
 8006750:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006754:	b2d2      	uxtb	r2, r2
 8006756:	701a      	strb	r2, [r3, #0]
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	09db      	lsrs	r3, r3, #7
 800675c:	61bb      	str	r3, [r7, #24]
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	2b7f      	cmp	r3, #127	; 0x7f
 8006762:	d8f0      	bhi.n	8006746 <SEGGER_SYSVIEW_Start+0xd2>
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	1c5a      	adds	r2, r3, #1
 8006768:	61fa      	str	r2, [r7, #28]
 800676a:	69ba      	ldr	r2, [r7, #24]
 800676c:	b2d2      	uxtb	r2, r2
 800676e:	701a      	strb	r2, [r3, #0]
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	617b      	str	r3, [r7, #20]
 8006778:	2300      	movs	r3, #0
 800677a:	613b      	str	r3, [r7, #16]
 800677c:	e00b      	b.n	8006796 <SEGGER_SYSVIEW_Start+0x122>
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	b2da      	uxtb	r2, r3
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	1c59      	adds	r1, r3, #1
 8006786:	6179      	str	r1, [r7, #20]
 8006788:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800678c:	b2d2      	uxtb	r2, r2
 800678e:	701a      	strb	r2, [r3, #0]
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	09db      	lsrs	r3, r3, #7
 8006794:	613b      	str	r3, [r7, #16]
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	2b7f      	cmp	r3, #127	; 0x7f
 800679a:	d8f0      	bhi.n	800677e <SEGGER_SYSVIEW_Start+0x10a>
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	1c5a      	adds	r2, r3, #1
 80067a0:	617a      	str	r2, [r7, #20]
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	b2d2      	uxtb	r2, r2
 80067a6:	701a      	strb	r2, [r3, #0]
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80067ac:	2218      	movs	r2, #24
 80067ae:	6839      	ldr	r1, [r7, #0]
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f7ff f8cd 	bl	8005950 <_SendPacket>
      RECORD_END();
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80067bc:	4b08      	ldr	r3, [pc, #32]	; (80067e0 <SEGGER_SYSVIEW_Start+0x16c>)
 80067be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d002      	beq.n	80067ca <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80067c4:	4b06      	ldr	r3, [pc, #24]	; (80067e0 <SEGGER_SYSVIEW_Start+0x16c>)
 80067c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80067ca:	f000 f9eb 	bl	8006ba4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80067ce:	f000 f9b1 	bl	8006b34 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80067d2:	f000 fc83 	bl	80070dc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80067d6:	bf00      	nop
 80067d8:	3730      	adds	r7, #48	; 0x30
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	20014264 	.word	0x20014264
 80067e4:	080074f8 	.word	0x080074f8
 80067e8:	20014294 	.word	0x20014294

080067ec <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80067f2:	f3ef 8311 	mrs	r3, BASEPRI
 80067f6:	f04f 0120 	mov.w	r1, #32
 80067fa:	f381 8811 	msr	BASEPRI, r1
 80067fe:	607b      	str	r3, [r7, #4]
 8006800:	480b      	ldr	r0, [pc, #44]	; (8006830 <SEGGER_SYSVIEW_Stop+0x44>)
 8006802:	f7fe ffb2 	bl	800576a <_PreparePacket>
 8006806:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006808:	4b0a      	ldr	r3, [pc, #40]	; (8006834 <SEGGER_SYSVIEW_Stop+0x48>)
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d007      	beq.n	8006820 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006810:	220b      	movs	r2, #11
 8006812:	6839      	ldr	r1, [r7, #0]
 8006814:	6838      	ldr	r0, [r7, #0]
 8006816:	f7ff f89b 	bl	8005950 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800681a:	4b06      	ldr	r3, [pc, #24]	; (8006834 <SEGGER_SYSVIEW_Stop+0x48>)
 800681c:	2200      	movs	r2, #0
 800681e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f383 8811 	msr	BASEPRI, r3
}
 8006826:	bf00      	nop
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	20014294 	.word	0x20014294
 8006834:	20014264 	.word	0x20014264

08006838 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006838:	b580      	push	{r7, lr}
 800683a:	b08c      	sub	sp, #48	; 0x30
 800683c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800683e:	f3ef 8311 	mrs	r3, BASEPRI
 8006842:	f04f 0120 	mov.w	r1, #32
 8006846:	f381 8811 	msr	BASEPRI, r1
 800684a:	60fb      	str	r3, [r7, #12]
 800684c:	4845      	ldr	r0, [pc, #276]	; (8006964 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800684e:	f7fe ff8c 	bl	800576a <_PreparePacket>
 8006852:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800685c:	4b42      	ldr	r3, [pc, #264]	; (8006968 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	62bb      	str	r3, [r7, #40]	; 0x28
 8006862:	e00b      	b.n	800687c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006866:	b2da      	uxtb	r2, r3
 8006868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686a:	1c59      	adds	r1, r3, #1
 800686c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800686e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006872:	b2d2      	uxtb	r2, r2
 8006874:	701a      	strb	r2, [r3, #0]
 8006876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006878:	09db      	lsrs	r3, r3, #7
 800687a:	62bb      	str	r3, [r7, #40]	; 0x28
 800687c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687e:	2b7f      	cmp	r3, #127	; 0x7f
 8006880:	d8f0      	bhi.n	8006864 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006884:	1c5a      	adds	r2, r3, #1
 8006886:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006888:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800688a:	b2d2      	uxtb	r2, r2
 800688c:	701a      	strb	r2, [r3, #0]
 800688e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006890:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	627b      	str	r3, [r7, #36]	; 0x24
 8006896:	4b34      	ldr	r3, [pc, #208]	; (8006968 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	623b      	str	r3, [r7, #32]
 800689c:	e00b      	b.n	80068b6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800689e:	6a3b      	ldr	r3, [r7, #32]
 80068a0:	b2da      	uxtb	r2, r3
 80068a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a4:	1c59      	adds	r1, r3, #1
 80068a6:	6279      	str	r1, [r7, #36]	; 0x24
 80068a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068ac:	b2d2      	uxtb	r2, r2
 80068ae:	701a      	strb	r2, [r3, #0]
 80068b0:	6a3b      	ldr	r3, [r7, #32]
 80068b2:	09db      	lsrs	r3, r3, #7
 80068b4:	623b      	str	r3, [r7, #32]
 80068b6:	6a3b      	ldr	r3, [r7, #32]
 80068b8:	2b7f      	cmp	r3, #127	; 0x7f
 80068ba:	d8f0      	bhi.n	800689e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80068bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068be:	1c5a      	adds	r2, r3, #1
 80068c0:	627a      	str	r2, [r7, #36]	; 0x24
 80068c2:	6a3a      	ldr	r2, [r7, #32]
 80068c4:	b2d2      	uxtb	r2, r2
 80068c6:	701a      	strb	r2, [r3, #0]
 80068c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	61fb      	str	r3, [r7, #28]
 80068d0:	4b25      	ldr	r3, [pc, #148]	; (8006968 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	61bb      	str	r3, [r7, #24]
 80068d6:	e00b      	b.n	80068f0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	b2da      	uxtb	r2, r3
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	1c59      	adds	r1, r3, #1
 80068e0:	61f9      	str	r1, [r7, #28]
 80068e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068e6:	b2d2      	uxtb	r2, r2
 80068e8:	701a      	strb	r2, [r3, #0]
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	09db      	lsrs	r3, r3, #7
 80068ee:	61bb      	str	r3, [r7, #24]
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	2b7f      	cmp	r3, #127	; 0x7f
 80068f4:	d8f0      	bhi.n	80068d8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	1c5a      	adds	r2, r3, #1
 80068fa:	61fa      	str	r2, [r7, #28]
 80068fc:	69ba      	ldr	r2, [r7, #24]
 80068fe:	b2d2      	uxtb	r2, r2
 8006900:	701a      	strb	r2, [r3, #0]
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	617b      	str	r3, [r7, #20]
 800690a:	2300      	movs	r3, #0
 800690c:	613b      	str	r3, [r7, #16]
 800690e:	e00b      	b.n	8006928 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	b2da      	uxtb	r2, r3
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	1c59      	adds	r1, r3, #1
 8006918:	6179      	str	r1, [r7, #20]
 800691a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800691e:	b2d2      	uxtb	r2, r2
 8006920:	701a      	strb	r2, [r3, #0]
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	09db      	lsrs	r3, r3, #7
 8006926:	613b      	str	r3, [r7, #16]
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	2b7f      	cmp	r3, #127	; 0x7f
 800692c:	d8f0      	bhi.n	8006910 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	1c5a      	adds	r2, r3, #1
 8006932:	617a      	str	r2, [r7, #20]
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	b2d2      	uxtb	r2, r2
 8006938:	701a      	strb	r2, [r3, #0]
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800693e:	2218      	movs	r2, #24
 8006940:	6879      	ldr	r1, [r7, #4]
 8006942:	68b8      	ldr	r0, [r7, #8]
 8006944:	f7ff f804 	bl	8005950 <_SendPacket>
  RECORD_END();
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800694e:	4b06      	ldr	r3, [pc, #24]	; (8006968 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006952:	2b00      	cmp	r3, #0
 8006954:	d002      	beq.n	800695c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006956:	4b04      	ldr	r3, [pc, #16]	; (8006968 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695a:	4798      	blx	r3
  }
}
 800695c:	bf00      	nop
 800695e:	3730      	adds	r7, #48	; 0x30
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	20014294 	.word	0x20014294
 8006968:	20014264 	.word	0x20014264

0800696c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800696c:	b580      	push	{r7, lr}
 800696e:	b092      	sub	sp, #72	; 0x48
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006974:	f3ef 8311 	mrs	r3, BASEPRI
 8006978:	f04f 0120 	mov.w	r1, #32
 800697c:	f381 8811 	msr	BASEPRI, r1
 8006980:	617b      	str	r3, [r7, #20]
 8006982:	486a      	ldr	r0, [pc, #424]	; (8006b2c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006984:	f7fe fef1 	bl	800576a <_PreparePacket>
 8006988:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	647b      	str	r3, [r7, #68]	; 0x44
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	4b66      	ldr	r3, [pc, #408]	; (8006b30 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	643b      	str	r3, [r7, #64]	; 0x40
 800699e:	e00b      	b.n	80069b8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80069a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069a2:	b2da      	uxtb	r2, r3
 80069a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069a6:	1c59      	adds	r1, r3, #1
 80069a8:	6479      	str	r1, [r7, #68]	; 0x44
 80069aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069ae:	b2d2      	uxtb	r2, r2
 80069b0:	701a      	strb	r2, [r3, #0]
 80069b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069b4:	09db      	lsrs	r3, r3, #7
 80069b6:	643b      	str	r3, [r7, #64]	; 0x40
 80069b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069ba:	2b7f      	cmp	r3, #127	; 0x7f
 80069bc:	d8f0      	bhi.n	80069a0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80069be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069c0:	1c5a      	adds	r2, r3, #1
 80069c2:	647a      	str	r2, [r7, #68]	; 0x44
 80069c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069c6:	b2d2      	uxtb	r2, r2
 80069c8:	701a      	strb	r2, [r3, #0]
 80069ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80069d8:	e00b      	b.n	80069f2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80069da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069dc:	b2da      	uxtb	r2, r3
 80069de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069e0:	1c59      	adds	r1, r3, #1
 80069e2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80069e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069e8:	b2d2      	uxtb	r2, r2
 80069ea:	701a      	strb	r2, [r3, #0]
 80069ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ee:	09db      	lsrs	r3, r3, #7
 80069f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80069f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f4:	2b7f      	cmp	r3, #127	; 0x7f
 80069f6:	d8f0      	bhi.n	80069da <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80069f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069fa:	1c5a      	adds	r2, r3, #1
 80069fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80069fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a00:	b2d2      	uxtb	r2, r2
 8006a02:	701a      	strb	r2, [r3, #0]
 8006a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a06:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	2220      	movs	r2, #32
 8006a0e:	4619      	mov	r1, r3
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f7fe fe5d 	bl	80056d0 <_EncodeStr>
 8006a16:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006a18:	2209      	movs	r2, #9
 8006a1a:	68f9      	ldr	r1, [r7, #12]
 8006a1c:	6938      	ldr	r0, [r7, #16]
 8006a1e:	f7fe ff97 	bl	8005950 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	637b      	str	r3, [r7, #52]	; 0x34
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	4b40      	ldr	r3, [pc, #256]	; (8006b30 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	633b      	str	r3, [r7, #48]	; 0x30
 8006a36:	e00b      	b.n	8006a50 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3a:	b2da      	uxtb	r2, r3
 8006a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a3e:	1c59      	adds	r1, r3, #1
 8006a40:	6379      	str	r1, [r7, #52]	; 0x34
 8006a42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a46:	b2d2      	uxtb	r2, r2
 8006a48:	701a      	strb	r2, [r3, #0]
 8006a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4c:	09db      	lsrs	r3, r3, #7
 8006a4e:	633b      	str	r3, [r7, #48]	; 0x30
 8006a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a52:	2b7f      	cmp	r3, #127	; 0x7f
 8006a54:	d8f0      	bhi.n	8006a38 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a58:	1c5a      	adds	r2, r3, #1
 8006a5a:	637a      	str	r2, [r7, #52]	; 0x34
 8006a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a5e:	b2d2      	uxtb	r2, r2
 8006a60:	701a      	strb	r2, [r3, #0]
 8006a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a64:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a70:	e00b      	b.n	8006a8a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a74:	b2da      	uxtb	r2, r3
 8006a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a78:	1c59      	adds	r1, r3, #1
 8006a7a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006a7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a80:	b2d2      	uxtb	r2, r2
 8006a82:	701a      	strb	r2, [r3, #0]
 8006a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a86:	09db      	lsrs	r3, r3, #7
 8006a88:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8c:	2b7f      	cmp	r3, #127	; 0x7f
 8006a8e:	d8f0      	bhi.n	8006a72 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a92:	1c5a      	adds	r2, r3, #1
 8006a94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a98:	b2d2      	uxtb	r2, r2
 8006a9a:	701a      	strb	r2, [r3, #0]
 8006a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	623b      	str	r3, [r7, #32]
 8006aaa:	e00b      	b.n	8006ac4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006aac:	6a3b      	ldr	r3, [r7, #32]
 8006aae:	b2da      	uxtb	r2, r3
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab2:	1c59      	adds	r1, r3, #1
 8006ab4:	6279      	str	r1, [r7, #36]	; 0x24
 8006ab6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006aba:	b2d2      	uxtb	r2, r2
 8006abc:	701a      	strb	r2, [r3, #0]
 8006abe:	6a3b      	ldr	r3, [r7, #32]
 8006ac0:	09db      	lsrs	r3, r3, #7
 8006ac2:	623b      	str	r3, [r7, #32]
 8006ac4:	6a3b      	ldr	r3, [r7, #32]
 8006ac6:	2b7f      	cmp	r3, #127	; 0x7f
 8006ac8:	d8f0      	bhi.n	8006aac <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006acc:	1c5a      	adds	r2, r3, #1
 8006ace:	627a      	str	r2, [r7, #36]	; 0x24
 8006ad0:	6a3a      	ldr	r2, [r7, #32]
 8006ad2:	b2d2      	uxtb	r2, r2
 8006ad4:	701a      	strb	r2, [r3, #0]
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	61fb      	str	r3, [r7, #28]
 8006ade:	2300      	movs	r3, #0
 8006ae0:	61bb      	str	r3, [r7, #24]
 8006ae2:	e00b      	b.n	8006afc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	b2da      	uxtb	r2, r3
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	1c59      	adds	r1, r3, #1
 8006aec:	61f9      	str	r1, [r7, #28]
 8006aee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006af2:	b2d2      	uxtb	r2, r2
 8006af4:	701a      	strb	r2, [r3, #0]
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	09db      	lsrs	r3, r3, #7
 8006afa:	61bb      	str	r3, [r7, #24]
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	2b7f      	cmp	r3, #127	; 0x7f
 8006b00:	d8f0      	bhi.n	8006ae4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	1c5a      	adds	r2, r3, #1
 8006b06:	61fa      	str	r2, [r7, #28]
 8006b08:	69ba      	ldr	r2, [r7, #24]
 8006b0a:	b2d2      	uxtb	r2, r2
 8006b0c:	701a      	strb	r2, [r3, #0]
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006b12:	2215      	movs	r2, #21
 8006b14:	68f9      	ldr	r1, [r7, #12]
 8006b16:	6938      	ldr	r0, [r7, #16]
 8006b18:	f7fe ff1a 	bl	8005950 <_SendPacket>
  RECORD_END();
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	f383 8811 	msr	BASEPRI, r3
}
 8006b22:	bf00      	nop
 8006b24:	3748      	adds	r7, #72	; 0x48
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	20014294 	.word	0x20014294
 8006b30:	20014264 	.word	0x20014264

08006b34 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006b34:	b580      	push	{r7, lr}
 8006b36:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006b38:	4b07      	ldr	r3, [pc, #28]	; (8006b58 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006b3a:	6a1b      	ldr	r3, [r3, #32]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d008      	beq.n	8006b52 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006b40:	4b05      	ldr	r3, [pc, #20]	; (8006b58 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006b42:	6a1b      	ldr	r3, [r3, #32]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d003      	beq.n	8006b52 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006b4a:	4b03      	ldr	r3, [pc, #12]	; (8006b58 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	4798      	blx	r3
  }
}
 8006b52:	bf00      	nop
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	20014264 	.word	0x20014264

08006b5c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b086      	sub	sp, #24
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b64:	f3ef 8311 	mrs	r3, BASEPRI
 8006b68:	f04f 0120 	mov.w	r1, #32
 8006b6c:	f381 8811 	msr	BASEPRI, r1
 8006b70:	617b      	str	r3, [r7, #20]
 8006b72:	480b      	ldr	r0, [pc, #44]	; (8006ba0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006b74:	f7fe fdf9 	bl	800576a <_PreparePacket>
 8006b78:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b7a:	2280      	movs	r2, #128	; 0x80
 8006b7c:	6879      	ldr	r1, [r7, #4]
 8006b7e:	6938      	ldr	r0, [r7, #16]
 8006b80:	f7fe fda6 	bl	80056d0 <_EncodeStr>
 8006b84:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006b86:	220e      	movs	r2, #14
 8006b88:	68f9      	ldr	r1, [r7, #12]
 8006b8a:	6938      	ldr	r0, [r7, #16]
 8006b8c:	f7fe fee0 	bl	8005950 <_SendPacket>
  RECORD_END();
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	f383 8811 	msr	BASEPRI, r3
}
 8006b96:	bf00      	nop
 8006b98:	3718      	adds	r7, #24
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	20014294 	.word	0x20014294

08006ba4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006ba4:	b590      	push	{r4, r7, lr}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006baa:	4b15      	ldr	r3, [pc, #84]	; (8006c00 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d01a      	beq.n	8006be8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006bb2:	4b13      	ldr	r3, [pc, #76]	; (8006c00 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006bb4:	6a1b      	ldr	r3, [r3, #32]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d015      	beq.n	8006be8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006bbc:	4b10      	ldr	r3, [pc, #64]	; (8006c00 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006bbe:	6a1b      	ldr	r3, [r3, #32]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4798      	blx	r3
 8006bc4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006bc8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006bca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bce:	f04f 0200 	mov.w	r2, #0
 8006bd2:	f04f 0300 	mov.w	r3, #0
 8006bd6:	000a      	movs	r2, r1
 8006bd8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006bda:	4613      	mov	r3, r2
 8006bdc:	461a      	mov	r2, r3
 8006bde:	4621      	mov	r1, r4
 8006be0:	200d      	movs	r0, #13
 8006be2:	f7ff fbe5 	bl	80063b0 <SEGGER_SYSVIEW_RecordU32x2>
 8006be6:	e006      	b.n	8006bf6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006be8:	4b06      	ldr	r3, [pc, #24]	; (8006c04 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4619      	mov	r1, r3
 8006bee:	200c      	movs	r0, #12
 8006bf0:	f7ff fba2 	bl	8006338 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006bf4:	bf00      	nop
 8006bf6:	bf00      	nop
 8006bf8:	370c      	adds	r7, #12
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd90      	pop	{r4, r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	20014264 	.word	0x20014264
 8006c04:	e0001004 	.word	0xe0001004

08006c08 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006c0e:	f3ef 8311 	mrs	r3, BASEPRI
 8006c12:	f04f 0120 	mov.w	r1, #32
 8006c16:	f381 8811 	msr	BASEPRI, r1
 8006c1a:	60fb      	str	r3, [r7, #12]
 8006c1c:	4819      	ldr	r0, [pc, #100]	; (8006c84 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006c1e:	f7fe fda4 	bl	800576a <_PreparePacket>
 8006c22:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006c28:	4b17      	ldr	r3, [pc, #92]	; (8006c88 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c30:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	617b      	str	r3, [r7, #20]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	613b      	str	r3, [r7, #16]
 8006c3a:	e00b      	b.n	8006c54 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	b2da      	uxtb	r2, r3
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	1c59      	adds	r1, r3, #1
 8006c44:	6179      	str	r1, [r7, #20]
 8006c46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c4a:	b2d2      	uxtb	r2, r2
 8006c4c:	701a      	strb	r2, [r3, #0]
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	09db      	lsrs	r3, r3, #7
 8006c52:	613b      	str	r3, [r7, #16]
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	2b7f      	cmp	r3, #127	; 0x7f
 8006c58:	d8f0      	bhi.n	8006c3c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	1c5a      	adds	r2, r3, #1
 8006c5e:	617a      	str	r2, [r7, #20]
 8006c60:	693a      	ldr	r2, [r7, #16]
 8006c62:	b2d2      	uxtb	r2, r2
 8006c64:	701a      	strb	r2, [r3, #0]
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	6879      	ldr	r1, [r7, #4]
 8006c6e:	68b8      	ldr	r0, [r7, #8]
 8006c70:	f7fe fe6e 	bl	8005950 <_SendPacket>
  RECORD_END();
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f383 8811 	msr	BASEPRI, r3
}
 8006c7a:	bf00      	nop
 8006c7c:	3718      	adds	r7, #24
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	20014294 	.word	0x20014294
 8006c88:	e000ed04 	.word	0xe000ed04

08006c8c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006c92:	f3ef 8311 	mrs	r3, BASEPRI
 8006c96:	f04f 0120 	mov.w	r1, #32
 8006c9a:	f381 8811 	msr	BASEPRI, r1
 8006c9e:	607b      	str	r3, [r7, #4]
 8006ca0:	4807      	ldr	r0, [pc, #28]	; (8006cc0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006ca2:	f7fe fd62 	bl	800576a <_PreparePacket>
 8006ca6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006ca8:	2203      	movs	r2, #3
 8006caa:	6839      	ldr	r1, [r7, #0]
 8006cac:	6838      	ldr	r0, [r7, #0]
 8006cae:	f7fe fe4f 	bl	8005950 <_SendPacket>
  RECORD_END();
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f383 8811 	msr	BASEPRI, r3
}
 8006cb8:	bf00      	nop
 8006cba:	3708      	adds	r7, #8
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	20014294 	.word	0x20014294

08006cc4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006cca:	f3ef 8311 	mrs	r3, BASEPRI
 8006cce:	f04f 0120 	mov.w	r1, #32
 8006cd2:	f381 8811 	msr	BASEPRI, r1
 8006cd6:	607b      	str	r3, [r7, #4]
 8006cd8:	4807      	ldr	r0, [pc, #28]	; (8006cf8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006cda:	f7fe fd46 	bl	800576a <_PreparePacket>
 8006cde:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006ce0:	2212      	movs	r2, #18
 8006ce2:	6839      	ldr	r1, [r7, #0]
 8006ce4:	6838      	ldr	r0, [r7, #0]
 8006ce6:	f7fe fe33 	bl	8005950 <_SendPacket>
  RECORD_END();
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f383 8811 	msr	BASEPRI, r3
}
 8006cf0:	bf00      	nop
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	20014294 	.word	0x20014294

08006cfc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006d02:	f3ef 8311 	mrs	r3, BASEPRI
 8006d06:	f04f 0120 	mov.w	r1, #32
 8006d0a:	f381 8811 	msr	BASEPRI, r1
 8006d0e:	607b      	str	r3, [r7, #4]
 8006d10:	4807      	ldr	r0, [pc, #28]	; (8006d30 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006d12:	f7fe fd2a 	bl	800576a <_PreparePacket>
 8006d16:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006d18:	2211      	movs	r2, #17
 8006d1a:	6839      	ldr	r1, [r7, #0]
 8006d1c:	6838      	ldr	r0, [r7, #0]
 8006d1e:	f7fe fe17 	bl	8005950 <_SendPacket>
  RECORD_END();
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f383 8811 	msr	BASEPRI, r3
}
 8006d28:	bf00      	nop
 8006d2a:	3708      	adds	r7, #8
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	20014294 	.word	0x20014294

08006d34 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b088      	sub	sp, #32
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006d3c:	f3ef 8311 	mrs	r3, BASEPRI
 8006d40:	f04f 0120 	mov.w	r1, #32
 8006d44:	f381 8811 	msr	BASEPRI, r1
 8006d48:	617b      	str	r3, [r7, #20]
 8006d4a:	4819      	ldr	r0, [pc, #100]	; (8006db0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006d4c:	f7fe fd0d 	bl	800576a <_PreparePacket>
 8006d50:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006d56:	4b17      	ldr	r3, [pc, #92]	; (8006db4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	61fb      	str	r3, [r7, #28]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	61bb      	str	r3, [r7, #24]
 8006d68:	e00b      	b.n	8006d82 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	b2da      	uxtb	r2, r3
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	1c59      	adds	r1, r3, #1
 8006d72:	61f9      	str	r1, [r7, #28]
 8006d74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d78:	b2d2      	uxtb	r2, r2
 8006d7a:	701a      	strb	r2, [r3, #0]
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	09db      	lsrs	r3, r3, #7
 8006d80:	61bb      	str	r3, [r7, #24]
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	2b7f      	cmp	r3, #127	; 0x7f
 8006d86:	d8f0      	bhi.n	8006d6a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	1c5a      	adds	r2, r3, #1
 8006d8c:	61fa      	str	r2, [r7, #28]
 8006d8e:	69ba      	ldr	r2, [r7, #24]
 8006d90:	b2d2      	uxtb	r2, r2
 8006d92:	701a      	strb	r2, [r3, #0]
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006d98:	2208      	movs	r2, #8
 8006d9a:	68f9      	ldr	r1, [r7, #12]
 8006d9c:	6938      	ldr	r0, [r7, #16]
 8006d9e:	f7fe fdd7 	bl	8005950 <_SendPacket>
  RECORD_END();
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	f383 8811 	msr	BASEPRI, r3
}
 8006da8:	bf00      	nop
 8006daa:	3720      	adds	r7, #32
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	20014294 	.word	0x20014294
 8006db4:	20014264 	.word	0x20014264

08006db8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b088      	sub	sp, #32
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006dc0:	f3ef 8311 	mrs	r3, BASEPRI
 8006dc4:	f04f 0120 	mov.w	r1, #32
 8006dc8:	f381 8811 	msr	BASEPRI, r1
 8006dcc:	617b      	str	r3, [r7, #20]
 8006dce:	4819      	ldr	r0, [pc, #100]	; (8006e34 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006dd0:	f7fe fccb 	bl	800576a <_PreparePacket>
 8006dd4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006dda:	4b17      	ldr	r3, [pc, #92]	; (8006e38 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	61fb      	str	r3, [r7, #28]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	61bb      	str	r3, [r7, #24]
 8006dec:	e00b      	b.n	8006e06 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	b2da      	uxtb	r2, r3
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	1c59      	adds	r1, r3, #1
 8006df6:	61f9      	str	r1, [r7, #28]
 8006df8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dfc:	b2d2      	uxtb	r2, r2
 8006dfe:	701a      	strb	r2, [r3, #0]
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	09db      	lsrs	r3, r3, #7
 8006e04:	61bb      	str	r3, [r7, #24]
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	2b7f      	cmp	r3, #127	; 0x7f
 8006e0a:	d8f0      	bhi.n	8006dee <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	1c5a      	adds	r2, r3, #1
 8006e10:	61fa      	str	r2, [r7, #28]
 8006e12:	69ba      	ldr	r2, [r7, #24]
 8006e14:	b2d2      	uxtb	r2, r2
 8006e16:	701a      	strb	r2, [r3, #0]
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006e1c:	2204      	movs	r2, #4
 8006e1e:	68f9      	ldr	r1, [r7, #12]
 8006e20:	6938      	ldr	r0, [r7, #16]
 8006e22:	f7fe fd95 	bl	8005950 <_SendPacket>
  RECORD_END();
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	f383 8811 	msr	BASEPRI, r3
}
 8006e2c:	bf00      	nop
 8006e2e:	3720      	adds	r7, #32
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	20014294 	.word	0x20014294
 8006e38:	20014264 	.word	0x20014264

08006e3c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b088      	sub	sp, #32
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006e44:	f3ef 8311 	mrs	r3, BASEPRI
 8006e48:	f04f 0120 	mov.w	r1, #32
 8006e4c:	f381 8811 	msr	BASEPRI, r1
 8006e50:	617b      	str	r3, [r7, #20]
 8006e52:	4819      	ldr	r0, [pc, #100]	; (8006eb8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006e54:	f7fe fc89 	bl	800576a <_PreparePacket>
 8006e58:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006e5e:	4b17      	ldr	r3, [pc, #92]	; (8006ebc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	61fb      	str	r3, [r7, #28]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	61bb      	str	r3, [r7, #24]
 8006e70:	e00b      	b.n	8006e8a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	b2da      	uxtb	r2, r3
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	1c59      	adds	r1, r3, #1
 8006e7a:	61f9      	str	r1, [r7, #28]
 8006e7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e80:	b2d2      	uxtb	r2, r2
 8006e82:	701a      	strb	r2, [r3, #0]
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	09db      	lsrs	r3, r3, #7
 8006e88:	61bb      	str	r3, [r7, #24]
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	2b7f      	cmp	r3, #127	; 0x7f
 8006e8e:	d8f0      	bhi.n	8006e72 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	1c5a      	adds	r2, r3, #1
 8006e94:	61fa      	str	r2, [r7, #28]
 8006e96:	69ba      	ldr	r2, [r7, #24]
 8006e98:	b2d2      	uxtb	r2, r2
 8006e9a:	701a      	strb	r2, [r3, #0]
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006ea0:	2206      	movs	r2, #6
 8006ea2:	68f9      	ldr	r1, [r7, #12]
 8006ea4:	6938      	ldr	r0, [r7, #16]
 8006ea6:	f7fe fd53 	bl	8005950 <_SendPacket>
  RECORD_END();
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	f383 8811 	msr	BASEPRI, r3
}
 8006eb0:	bf00      	nop
 8006eb2:	3720      	adds	r7, #32
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	20014294 	.word	0x20014294
 8006ebc:	20014264 	.word	0x20014264

08006ec0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b08a      	sub	sp, #40	; 0x28
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006eca:	f3ef 8311 	mrs	r3, BASEPRI
 8006ece:	f04f 0120 	mov.w	r1, #32
 8006ed2:	f381 8811 	msr	BASEPRI, r1
 8006ed6:	617b      	str	r3, [r7, #20]
 8006ed8:	4827      	ldr	r0, [pc, #156]	; (8006f78 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006eda:	f7fe fc46 	bl	800576a <_PreparePacket>
 8006ede:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006ee4:	4b25      	ldr	r3, [pc, #148]	; (8006f7c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	1ad3      	subs	r3, r2, r3
 8006eec:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	623b      	str	r3, [r7, #32]
 8006ef6:	e00b      	b.n	8006f10 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006ef8:	6a3b      	ldr	r3, [r7, #32]
 8006efa:	b2da      	uxtb	r2, r3
 8006efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efe:	1c59      	adds	r1, r3, #1
 8006f00:	6279      	str	r1, [r7, #36]	; 0x24
 8006f02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f06:	b2d2      	uxtb	r2, r2
 8006f08:	701a      	strb	r2, [r3, #0]
 8006f0a:	6a3b      	ldr	r3, [r7, #32]
 8006f0c:	09db      	lsrs	r3, r3, #7
 8006f0e:	623b      	str	r3, [r7, #32]
 8006f10:	6a3b      	ldr	r3, [r7, #32]
 8006f12:	2b7f      	cmp	r3, #127	; 0x7f
 8006f14:	d8f0      	bhi.n	8006ef8 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f18:	1c5a      	adds	r2, r3, #1
 8006f1a:	627a      	str	r2, [r7, #36]	; 0x24
 8006f1c:	6a3a      	ldr	r2, [r7, #32]
 8006f1e:	b2d2      	uxtb	r2, r2
 8006f20:	701a      	strb	r2, [r3, #0]
 8006f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f24:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	61fb      	str	r3, [r7, #28]
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	61bb      	str	r3, [r7, #24]
 8006f2e:	e00b      	b.n	8006f48 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	b2da      	uxtb	r2, r3
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	1c59      	adds	r1, r3, #1
 8006f38:	61f9      	str	r1, [r7, #28]
 8006f3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f3e:	b2d2      	uxtb	r2, r2
 8006f40:	701a      	strb	r2, [r3, #0]
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	09db      	lsrs	r3, r3, #7
 8006f46:	61bb      	str	r3, [r7, #24]
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	2b7f      	cmp	r3, #127	; 0x7f
 8006f4c:	d8f0      	bhi.n	8006f30 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	1c5a      	adds	r2, r3, #1
 8006f52:	61fa      	str	r2, [r7, #28]
 8006f54:	69ba      	ldr	r2, [r7, #24]
 8006f56:	b2d2      	uxtb	r2, r2
 8006f58:	701a      	strb	r2, [r3, #0]
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006f5e:	2207      	movs	r2, #7
 8006f60:	68f9      	ldr	r1, [r7, #12]
 8006f62:	6938      	ldr	r0, [r7, #16]
 8006f64:	f7fe fcf4 	bl	8005950 <_SendPacket>
  RECORD_END();
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	f383 8811 	msr	BASEPRI, r3
}
 8006f6e:	bf00      	nop
 8006f70:	3728      	adds	r7, #40	; 0x28
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	20014294 	.word	0x20014294
 8006f7c:	20014264 	.word	0x20014264

08006f80 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006f88:	4b04      	ldr	r3, [pc, #16]	; (8006f9c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	1ad3      	subs	r3, r2, r3
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr
 8006f9c:	20014264 	.word	0x20014264

08006fa0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b08c      	sub	sp, #48	; 0x30
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006faa:	4b3b      	ldr	r3, [pc, #236]	; (8007098 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d06d      	beq.n	800708e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006fb2:	4b39      	ldr	r3, [pc, #228]	; (8007098 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006fb8:	2300      	movs	r3, #0
 8006fba:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fbc:	e008      	b.n	8006fd0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d007      	beq.n	8006fda <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fcc:	3301      	adds	r3, #1
 8006fce:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fd0:	79fb      	ldrb	r3, [r7, #7]
 8006fd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d3f2      	bcc.n	8006fbe <SEGGER_SYSVIEW_SendModule+0x1e>
 8006fd8:	e000      	b.n	8006fdc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006fda:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d055      	beq.n	800708e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006fe2:	f3ef 8311 	mrs	r3, BASEPRI
 8006fe6:	f04f 0120 	mov.w	r1, #32
 8006fea:	f381 8811 	msr	BASEPRI, r1
 8006fee:	617b      	str	r3, [r7, #20]
 8006ff0:	482a      	ldr	r0, [pc, #168]	; (800709c <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006ff2:	f7fe fbba 	bl	800576a <_PreparePacket>
 8006ff6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8007000:	79fb      	ldrb	r3, [r7, #7]
 8007002:	623b      	str	r3, [r7, #32]
 8007004:	e00b      	b.n	800701e <SEGGER_SYSVIEW_SendModule+0x7e>
 8007006:	6a3b      	ldr	r3, [r7, #32]
 8007008:	b2da      	uxtb	r2, r3
 800700a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700c:	1c59      	adds	r1, r3, #1
 800700e:	6279      	str	r1, [r7, #36]	; 0x24
 8007010:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007014:	b2d2      	uxtb	r2, r2
 8007016:	701a      	strb	r2, [r3, #0]
 8007018:	6a3b      	ldr	r3, [r7, #32]
 800701a:	09db      	lsrs	r3, r3, #7
 800701c:	623b      	str	r3, [r7, #32]
 800701e:	6a3b      	ldr	r3, [r7, #32]
 8007020:	2b7f      	cmp	r3, #127	; 0x7f
 8007022:	d8f0      	bhi.n	8007006 <SEGGER_SYSVIEW_SendModule+0x66>
 8007024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007026:	1c5a      	adds	r2, r3, #1
 8007028:	627a      	str	r2, [r7, #36]	; 0x24
 800702a:	6a3a      	ldr	r2, [r7, #32]
 800702c:	b2d2      	uxtb	r2, r2
 800702e:	701a      	strb	r2, [r3, #0]
 8007030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007032:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	61fb      	str	r3, [r7, #28]
 8007038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	61bb      	str	r3, [r7, #24]
 800703e:	e00b      	b.n	8007058 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	b2da      	uxtb	r2, r3
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	1c59      	adds	r1, r3, #1
 8007048:	61f9      	str	r1, [r7, #28]
 800704a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800704e:	b2d2      	uxtb	r2, r2
 8007050:	701a      	strb	r2, [r3, #0]
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	09db      	lsrs	r3, r3, #7
 8007056:	61bb      	str	r3, [r7, #24]
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	2b7f      	cmp	r3, #127	; 0x7f
 800705c:	d8f0      	bhi.n	8007040 <SEGGER_SYSVIEW_SendModule+0xa0>
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	1c5a      	adds	r2, r3, #1
 8007062:	61fa      	str	r2, [r7, #28]
 8007064:	69ba      	ldr	r2, [r7, #24]
 8007066:	b2d2      	uxtb	r2, r2
 8007068:	701a      	strb	r2, [r3, #0]
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800706e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2280      	movs	r2, #128	; 0x80
 8007074:	4619      	mov	r1, r3
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f7fe fb2a 	bl	80056d0 <_EncodeStr>
 800707c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800707e:	2216      	movs	r2, #22
 8007080:	68f9      	ldr	r1, [r7, #12]
 8007082:	6938      	ldr	r0, [r7, #16]
 8007084:	f7fe fc64 	bl	8005950 <_SendPacket>
      RECORD_END();
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800708e:	bf00      	nop
 8007090:	3730      	adds	r7, #48	; 0x30
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	2001428c 	.word	0x2001428c
 800709c:	20014294 	.word	0x20014294

080070a0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80070a6:	4b0c      	ldr	r3, [pc, #48]	; (80070d8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00f      	beq.n	80070ce <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80070ae:	4b0a      	ldr	r3, [pc, #40]	; (80070d8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d002      	beq.n	80070c2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1f2      	bne.n	80070b4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80070ce:	bf00      	nop
 80070d0:	3708      	adds	r7, #8
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	2001428c 	.word	0x2001428c

080070dc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80070dc:	b580      	push	{r7, lr}
 80070de:	b086      	sub	sp, #24
 80070e0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80070e2:	f3ef 8311 	mrs	r3, BASEPRI
 80070e6:	f04f 0120 	mov.w	r1, #32
 80070ea:	f381 8811 	msr	BASEPRI, r1
 80070ee:	60fb      	str	r3, [r7, #12]
 80070f0:	4817      	ldr	r0, [pc, #92]	; (8007150 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80070f2:	f7fe fb3a 	bl	800576a <_PreparePacket>
 80070f6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	617b      	str	r3, [r7, #20]
 8007100:	4b14      	ldr	r3, [pc, #80]	; (8007154 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	613b      	str	r3, [r7, #16]
 8007106:	e00b      	b.n	8007120 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	b2da      	uxtb	r2, r3
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	1c59      	adds	r1, r3, #1
 8007110:	6179      	str	r1, [r7, #20]
 8007112:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007116:	b2d2      	uxtb	r2, r2
 8007118:	701a      	strb	r2, [r3, #0]
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	09db      	lsrs	r3, r3, #7
 800711e:	613b      	str	r3, [r7, #16]
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	2b7f      	cmp	r3, #127	; 0x7f
 8007124:	d8f0      	bhi.n	8007108 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	1c5a      	adds	r2, r3, #1
 800712a:	617a      	str	r2, [r7, #20]
 800712c:	693a      	ldr	r2, [r7, #16]
 800712e:	b2d2      	uxtb	r2, r2
 8007130:	701a      	strb	r2, [r3, #0]
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007136:	221b      	movs	r2, #27
 8007138:	6879      	ldr	r1, [r7, #4]
 800713a:	68b8      	ldr	r0, [r7, #8]
 800713c:	f7fe fc08 	bl	8005950 <_SendPacket>
  RECORD_END();
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f383 8811 	msr	BASEPRI, r3
}
 8007146:	bf00      	nop
 8007148:	3718      	adds	r7, #24
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	20014294 	.word	0x20014294
 8007154:	20014290 	.word	0x20014290

08007158 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007158:	b40f      	push	{r0, r1, r2, r3}
 800715a:	b580      	push	{r7, lr}
 800715c:	b082      	sub	sp, #8
 800715e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007160:	f107 0314 	add.w	r3, r7, #20
 8007164:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8007166:	1d3b      	adds	r3, r7, #4
 8007168:	461a      	mov	r2, r3
 800716a:	2100      	movs	r1, #0
 800716c:	6938      	ldr	r0, [r7, #16]
 800716e:	f7fe fe79 	bl	8005e64 <_VPrintTarget>
  va_end(ParamList);
}
 8007172:	bf00      	nop
 8007174:	3708      	adds	r7, #8
 8007176:	46bd      	mov	sp, r7
 8007178:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800717c:	b004      	add	sp, #16
 800717e:	4770      	bx	lr

08007180 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007180:	b580      	push	{r7, lr}
 8007182:	b08a      	sub	sp, #40	; 0x28
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007188:	f3ef 8311 	mrs	r3, BASEPRI
 800718c:	f04f 0120 	mov.w	r1, #32
 8007190:	f381 8811 	msr	BASEPRI, r1
 8007194:	617b      	str	r3, [r7, #20]
 8007196:	4827      	ldr	r0, [pc, #156]	; (8007234 <SEGGER_SYSVIEW_Warn+0xb4>)
 8007198:	f7fe fae7 	bl	800576a <_PreparePacket>
 800719c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800719e:	2280      	movs	r2, #128	; 0x80
 80071a0:	6879      	ldr	r1, [r7, #4]
 80071a2:	6938      	ldr	r0, [r7, #16]
 80071a4:	f7fe fa94 	bl	80056d0 <_EncodeStr>
 80071a8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	627b      	str	r3, [r7, #36]	; 0x24
 80071ae:	2301      	movs	r3, #1
 80071b0:	623b      	str	r3, [r7, #32]
 80071b2:	e00b      	b.n	80071cc <SEGGER_SYSVIEW_Warn+0x4c>
 80071b4:	6a3b      	ldr	r3, [r7, #32]
 80071b6:	b2da      	uxtb	r2, r3
 80071b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ba:	1c59      	adds	r1, r3, #1
 80071bc:	6279      	str	r1, [r7, #36]	; 0x24
 80071be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071c2:	b2d2      	uxtb	r2, r2
 80071c4:	701a      	strb	r2, [r3, #0]
 80071c6:	6a3b      	ldr	r3, [r7, #32]
 80071c8:	09db      	lsrs	r3, r3, #7
 80071ca:	623b      	str	r3, [r7, #32]
 80071cc:	6a3b      	ldr	r3, [r7, #32]
 80071ce:	2b7f      	cmp	r3, #127	; 0x7f
 80071d0:	d8f0      	bhi.n	80071b4 <SEGGER_SYSVIEW_Warn+0x34>
 80071d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d4:	1c5a      	adds	r2, r3, #1
 80071d6:	627a      	str	r2, [r7, #36]	; 0x24
 80071d8:	6a3a      	ldr	r2, [r7, #32]
 80071da:	b2d2      	uxtb	r2, r2
 80071dc:	701a      	strb	r2, [r3, #0]
 80071de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	61fb      	str	r3, [r7, #28]
 80071e6:	2300      	movs	r3, #0
 80071e8:	61bb      	str	r3, [r7, #24]
 80071ea:	e00b      	b.n	8007204 <SEGGER_SYSVIEW_Warn+0x84>
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	b2da      	uxtb	r2, r3
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	1c59      	adds	r1, r3, #1
 80071f4:	61f9      	str	r1, [r7, #28]
 80071f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071fa:	b2d2      	uxtb	r2, r2
 80071fc:	701a      	strb	r2, [r3, #0]
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	09db      	lsrs	r3, r3, #7
 8007202:	61bb      	str	r3, [r7, #24]
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	2b7f      	cmp	r3, #127	; 0x7f
 8007208:	d8f0      	bhi.n	80071ec <SEGGER_SYSVIEW_Warn+0x6c>
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	1c5a      	adds	r2, r3, #1
 800720e:	61fa      	str	r2, [r7, #28]
 8007210:	69ba      	ldr	r2, [r7, #24]
 8007212:	b2d2      	uxtb	r2, r2
 8007214:	701a      	strb	r2, [r3, #0]
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800721a:	221a      	movs	r2, #26
 800721c:	68f9      	ldr	r1, [r7, #12]
 800721e:	6938      	ldr	r0, [r7, #16]
 8007220:	f7fe fb96 	bl	8005950 <_SendPacket>
  RECORD_END();
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	f383 8811 	msr	BASEPRI, r3
}
 800722a:	bf00      	nop
 800722c:	3728      	adds	r7, #40	; 0x28
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	20014294 	.word	0x20014294

08007238 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007238:	b580      	push	{r7, lr}
 800723a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800723c:	4b13      	ldr	r3, [pc, #76]	; (800728c <SEGGER_SYSVIEW_IsStarted+0x54>)
 800723e:	7e1b      	ldrb	r3, [r3, #24]
 8007240:	4619      	mov	r1, r3
 8007242:	4a13      	ldr	r2, [pc, #76]	; (8007290 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007244:	460b      	mov	r3, r1
 8007246:	005b      	lsls	r3, r3, #1
 8007248:	440b      	add	r3, r1
 800724a:	00db      	lsls	r3, r3, #3
 800724c:	4413      	add	r3, r2
 800724e:	336c      	adds	r3, #108	; 0x6c
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	4b0e      	ldr	r3, [pc, #56]	; (800728c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007254:	7e1b      	ldrb	r3, [r3, #24]
 8007256:	4618      	mov	r0, r3
 8007258:	490d      	ldr	r1, [pc, #52]	; (8007290 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800725a:	4603      	mov	r3, r0
 800725c:	005b      	lsls	r3, r3, #1
 800725e:	4403      	add	r3, r0
 8007260:	00db      	lsls	r3, r3, #3
 8007262:	440b      	add	r3, r1
 8007264:	3370      	adds	r3, #112	; 0x70
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	429a      	cmp	r2, r3
 800726a:	d00b      	beq.n	8007284 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800726c:	4b07      	ldr	r3, [pc, #28]	; (800728c <SEGGER_SYSVIEW_IsStarted+0x54>)
 800726e:	789b      	ldrb	r3, [r3, #2]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d107      	bne.n	8007284 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007274:	4b05      	ldr	r3, [pc, #20]	; (800728c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007276:	2201      	movs	r2, #1
 8007278:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800727a:	f7fe fa83 	bl	8005784 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800727e:	4b03      	ldr	r3, [pc, #12]	; (800728c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007280:	2200      	movs	r2, #0
 8007282:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007284:	4b01      	ldr	r3, [pc, #4]	; (800728c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007286:	781b      	ldrb	r3, [r3, #0]
}
 8007288:	4618      	mov	r0, r3
 800728a:	bd80      	pop	{r7, pc}
 800728c:	20014264 	.word	0x20014264
 8007290:	20014404 	.word	0x20014404

08007294 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8007294:	b580      	push	{r7, lr}
 8007296:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8007298:	4803      	ldr	r0, [pc, #12]	; (80072a8 <_cbSendSystemDesc+0x14>)
 800729a:	f7ff fc5f 	bl	8006b5c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800729e:	4803      	ldr	r0, [pc, #12]	; (80072ac <_cbSendSystemDesc+0x18>)
 80072a0:	f7ff fc5c 	bl	8006b5c <SEGGER_SYSVIEW_SendSysDesc>
}
 80072a4:	bf00      	nop
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	08007480 	.word	0x08007480
 80072ac:	080074c4 	.word	0x080074c4

080072b0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80072b0:	b580      	push	{r7, lr}
 80072b2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80072b4:	4b06      	ldr	r3, [pc, #24]	; (80072d0 <SEGGER_SYSVIEW_Conf+0x20>)
 80072b6:	6818      	ldr	r0, [r3, #0]
 80072b8:	4b05      	ldr	r3, [pc, #20]	; (80072d0 <SEGGER_SYSVIEW_Conf+0x20>)
 80072ba:	6819      	ldr	r1, [r3, #0]
 80072bc:	4b05      	ldr	r3, [pc, #20]	; (80072d4 <SEGGER_SYSVIEW_Conf+0x24>)
 80072be:	4a06      	ldr	r2, [pc, #24]	; (80072d8 <SEGGER_SYSVIEW_Conf+0x28>)
 80072c0:	f7fe ffc8 	bl	8006254 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80072c4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80072c8:	f7ff f808 	bl	80062dc <SEGGER_SYSVIEW_SetRAMBase>
}
 80072cc:	bf00      	nop
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	20000000 	.word	0x20000000
 80072d4:	08007295 	.word	0x08007295
 80072d8:	080074ec 	.word	0x080074ec

080072dc <__libc_init_array>:
 80072dc:	b570      	push	{r4, r5, r6, lr}
 80072de:	4d0d      	ldr	r5, [pc, #52]	; (8007314 <__libc_init_array+0x38>)
 80072e0:	4c0d      	ldr	r4, [pc, #52]	; (8007318 <__libc_init_array+0x3c>)
 80072e2:	1b64      	subs	r4, r4, r5
 80072e4:	10a4      	asrs	r4, r4, #2
 80072e6:	2600      	movs	r6, #0
 80072e8:	42a6      	cmp	r6, r4
 80072ea:	d109      	bne.n	8007300 <__libc_init_array+0x24>
 80072ec:	4d0b      	ldr	r5, [pc, #44]	; (800731c <__libc_init_array+0x40>)
 80072ee:	4c0c      	ldr	r4, [pc, #48]	; (8007320 <__libc_init_array+0x44>)
 80072f0:	f000 f83c 	bl	800736c <_init>
 80072f4:	1b64      	subs	r4, r4, r5
 80072f6:	10a4      	asrs	r4, r4, #2
 80072f8:	2600      	movs	r6, #0
 80072fa:	42a6      	cmp	r6, r4
 80072fc:	d105      	bne.n	800730a <__libc_init_array+0x2e>
 80072fe:	bd70      	pop	{r4, r5, r6, pc}
 8007300:	f855 3b04 	ldr.w	r3, [r5], #4
 8007304:	4798      	blx	r3
 8007306:	3601      	adds	r6, #1
 8007308:	e7ee      	b.n	80072e8 <__libc_init_array+0xc>
 800730a:	f855 3b04 	ldr.w	r3, [r5], #4
 800730e:	4798      	blx	r3
 8007310:	3601      	adds	r6, #1
 8007312:	e7f2      	b.n	80072fa <__libc_init_array+0x1e>
 8007314:	0800751c 	.word	0x0800751c
 8007318:	0800751c 	.word	0x0800751c
 800731c:	0800751c 	.word	0x0800751c
 8007320:	08007520 	.word	0x08007520

08007324 <memcmp>:
 8007324:	b530      	push	{r4, r5, lr}
 8007326:	3901      	subs	r1, #1
 8007328:	2400      	movs	r4, #0
 800732a:	42a2      	cmp	r2, r4
 800732c:	d101      	bne.n	8007332 <memcmp+0xe>
 800732e:	2000      	movs	r0, #0
 8007330:	e005      	b.n	800733e <memcmp+0x1a>
 8007332:	5d03      	ldrb	r3, [r0, r4]
 8007334:	3401      	adds	r4, #1
 8007336:	5d0d      	ldrb	r5, [r1, r4]
 8007338:	42ab      	cmp	r3, r5
 800733a:	d0f6      	beq.n	800732a <memcmp+0x6>
 800733c:	1b58      	subs	r0, r3, r5
 800733e:	bd30      	pop	{r4, r5, pc}

08007340 <memcpy>:
 8007340:	440a      	add	r2, r1
 8007342:	4291      	cmp	r1, r2
 8007344:	f100 33ff 	add.w	r3, r0, #4294967295
 8007348:	d100      	bne.n	800734c <memcpy+0xc>
 800734a:	4770      	bx	lr
 800734c:	b510      	push	{r4, lr}
 800734e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007352:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007356:	4291      	cmp	r1, r2
 8007358:	d1f9      	bne.n	800734e <memcpy+0xe>
 800735a:	bd10      	pop	{r4, pc}

0800735c <memset>:
 800735c:	4402      	add	r2, r0
 800735e:	4603      	mov	r3, r0
 8007360:	4293      	cmp	r3, r2
 8007362:	d100      	bne.n	8007366 <memset+0xa>
 8007364:	4770      	bx	lr
 8007366:	f803 1b01 	strb.w	r1, [r3], #1
 800736a:	e7f9      	b.n	8007360 <memset+0x4>

0800736c <_init>:
 800736c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800736e:	bf00      	nop
 8007370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007372:	bc08      	pop	{r3}
 8007374:	469e      	mov	lr, r3
 8007376:	4770      	bx	lr

08007378 <_fini>:
 8007378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800737a:	bf00      	nop
 800737c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800737e:	bc08      	pop	{r3}
 8007380:	469e      	mov	lr, r3
 8007382:	4770      	bx	lr
