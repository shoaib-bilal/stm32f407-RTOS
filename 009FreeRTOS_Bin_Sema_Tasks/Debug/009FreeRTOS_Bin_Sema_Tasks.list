
009FreeRTOS_Bin_Sema_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  0800738c  0800738c  0001738c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075ec  080075ec  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080075ec  080075ec  000175ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075f4  080075f4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075f4  080075f4  000175f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075f8  080075f8  000175f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080075fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00012f7c  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012ff4  20012ff4  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019507  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032f3  00000000  00000000  000395af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001228  00000000  00000000  0003c8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001100  00000000  00000000  0003dad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023e8e  00000000  00000000  0003ebd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001503f  00000000  00000000  00062a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5f5b  00000000  00000000  00077a9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014d9f8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056d8  00000000  00000000  0014da4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007374 	.word	0x08007374

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08007374 	.word	0x08007374

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fd13 	bl	8000fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f865 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f8f7 	bl	8000778 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058a:	f000 f8cb 	bl	8000724 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  sprintf(ur_msg,"Demo of binary semaphore usage between 2 tasks \r\n");
 800058e:	4925      	ldr	r1, [pc, #148]	; (8000624 <main+0xac>)
 8000590:	4825      	ldr	r0, [pc, #148]	; (8000628 <main+0xb0>)
 8000592:	f005 fd69 	bl	8006068 <siprintf>
  print_msg(ur_msg);
 8000596:	4824      	ldr	r0, [pc, #144]	; (8000628 <main+0xb0>)
 8000598:	f000 fada 	bl	8000b50 <print_msg>



  /* Before a semaphore is used it must be explicitly created.
       * In this example a binary semaphore is created . */
      vSemaphoreCreateBinary( xWork );
 800059c:	2203      	movs	r2, #3
 800059e:	2100      	movs	r1, #0
 80005a0:	2001      	movs	r0, #1
 80005a2:	f003 f845 	bl	8003630 <xQueueGenericCreate>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a20      	ldr	r2, [pc, #128]	; (800062c <main+0xb4>)
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <main+0xb4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d006      	beq.n	80005c2 <main+0x4a>
 80005b4:	4b1d      	ldr	r3, [pc, #116]	; (800062c <main+0xb4>)
 80005b6:	6818      	ldr	r0, [r3, #0]
 80005b8:	2300      	movs	r3, #0
 80005ba:	2200      	movs	r2, #0
 80005bc:	2100      	movs	r1, #0
 80005be:	f003 f8b9 	bl	8003734 <xQueueGenericSend>

  	/* The queue is created to hold a maximum of 1 Element. */
      xWorkQueue = xQueueCreate( 1, sizeof( unsigned int ) );
 80005c2:	2200      	movs	r2, #0
 80005c4:	2104      	movs	r1, #4
 80005c6:	2001      	movs	r0, #1
 80005c8:	f003 f832 	bl	8003630 <xQueueGenericCreate>
 80005cc:	4603      	mov	r3, r0
 80005ce:	4a18      	ldr	r2, [pc, #96]	; (8000630 <main+0xb8>)
 80005d0:	6013      	str	r3, [r2, #0]

      /* Check the semaphore and queue was created successfully. */
      if( (xWork != NULL) && (xWorkQueue != NULL) )
 80005d2:	4b16      	ldr	r3, [pc, #88]	; (800062c <main+0xb4>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d01b      	beq.n	8000612 <main+0x9a>
 80005da:	4b15      	ldr	r3, [pc, #84]	; (8000630 <main+0xb8>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d017      	beq.n	8000612 <main+0x9a>
      {

  		/* Create the 'Manager' task.  This is the task that will be synchronized with the Employee task.  The Manager task is created with a high priority  */
          xTaskCreate( vManagerTask, "Manager", 500, NULL, 3, &xTaskHandleM );
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <main+0xbc>)
 80005e4:	9301      	str	r3, [sp, #4]
 80005e6:	2303      	movs	r3, #3
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2300      	movs	r3, #0
 80005ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005f0:	4911      	ldr	r1, [pc, #68]	; (8000638 <main+0xc0>)
 80005f2:	4812      	ldr	r0, [pc, #72]	; (800063c <main+0xc4>)
 80005f4:	f003 fdb8 	bl	8004168 <xTaskCreate>

          /* Create a employee task with less priority than manager */
          xTaskCreate( vEmployeeTask, "Employee", 500, NULL, 1, &xTaskHandleE );
 80005f8:	4b11      	ldr	r3, [pc, #68]	; (8000640 <main+0xc8>)
 80005fa:	9301      	str	r3, [sp, #4]
 80005fc:	2301      	movs	r3, #1
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2300      	movs	r3, #0
 8000602:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000606:	490f      	ldr	r1, [pc, #60]	; (8000644 <main+0xcc>)
 8000608:	480f      	ldr	r0, [pc, #60]	; (8000648 <main+0xd0>)
 800060a:	f003 fdad 	bl	8004168 <xTaskCreate>

          /* Start the scheduler so the created tasks start executing. */
          vTaskStartScheduler();
 800060e:	f003 ff25 	bl	800445c <vTaskStartScheduler>
      }

      sprintf(ur_msg,"Queue/Sema create failed.. \r\n");
 8000612:	490e      	ldr	r1, [pc, #56]	; (800064c <main+0xd4>)
 8000614:	4804      	ldr	r0, [pc, #16]	; (8000628 <main+0xb0>)
 8000616:	f005 fd27 	bl	8006068 <siprintf>
      print_msg(ur_msg);
 800061a:	4803      	ldr	r0, [pc, #12]	; (8000628 <main+0xb0>)
 800061c:	f000 fa98 	bl	8000b50 <print_msg>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000620:	e7fe      	b.n	8000620 <main+0xa8>
 8000622:	bf00      	nop
 8000624:	0800738c 	.word	0x0800738c
 8000628:	2000009c 	.word	0x2000009c
 800062c:	20012f10 	.word	0x20012f10
 8000630:	20012f0c 	.word	0x20012f0c
 8000634:	20000094 	.word	0x20000094
 8000638:	080073c0 	.word	0x080073c0
 800063c:	08000a35 	.word	0x08000a35
 8000640:	20000098 	.word	0x20000098
 8000644:	080073c8 	.word	0x080073c8
 8000648:	08000ab5 	.word	0x08000ab5
 800064c:	080073d4 	.word	0x080073d4

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	; 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	; 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f005 fcba 	bl	8005fd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b28      	ldr	r3, [pc, #160]	; (800071c <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	4a27      	ldr	r2, [pc, #156]	; (800071c <SystemClock_Config+0xcc>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	; 0x40
 8000684:	4b25      	ldr	r3, [pc, #148]	; (800071c <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a21      	ldr	r2, [pc, #132]	; (8000720 <SystemClock_Config+0xd0>)
 800069a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2310      	movs	r3, #16
 80006b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c0:	2308      	movs	r3, #8
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006c4:	23a8      	movs	r3, #168	; 0xa8
 80006c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006cc:	2307      	movs	r3, #7
 80006ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0320 	add.w	r3, r7, #32
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 ffd3 	bl	8001680 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e0:	f000 fa5e 	bl	8000ba0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2302      	movs	r3, #2
 80006ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2105      	movs	r1, #5
 8000702:	4618      	mov	r0, r3
 8000704:	f001 fa34 	bl	8001b70 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800070e:	f000 fa47 	bl	8000ba0 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3750      	adds	r7, #80	; 0x50
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 800072a:	4a12      	ldr	r2, [pc, #72]	; (8000774 <MX_USART2_UART_Init+0x50>)
 800072c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 8000730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000734:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 800075c:	f001 fee4 	bl	8002528 <HAL_UART_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000766:	f000 fa1b 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20012f14 	.word	0x20012f14
 8000774:	40004400 	.word	0x40004400

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08c      	sub	sp, #48	; 0x30
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	61bb      	str	r3, [r7, #24]
 8000792:	4ba2      	ldr	r3, [pc, #648]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4aa1      	ldr	r2, [pc, #644]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000798:	f043 0310 	orr.w	r3, r3, #16
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b9f      	ldr	r3, [pc, #636]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0310 	and.w	r3, r3, #16
 80007a6:	61bb      	str	r3, [r7, #24]
 80007a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
 80007ae:	4b9b      	ldr	r3, [pc, #620]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a9a      	ldr	r2, [pc, #616]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b98      	ldr	r3, [pc, #608]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	617b      	str	r3, [r7, #20]
 80007c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	4b94      	ldr	r3, [pc, #592]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a93      	ldr	r2, [pc, #588]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b91      	ldr	r3, [pc, #580]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	4b8d      	ldr	r3, [pc, #564]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a8c      	ldr	r2, [pc, #560]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b8a      	ldr	r3, [pc, #552]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	4b86      	ldr	r3, [pc, #536]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a85      	ldr	r2, [pc, #532]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b83      	ldr	r3, [pc, #524]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	4b7f      	ldr	r3, [pc, #508]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a7e      	ldr	r2, [pc, #504]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000824:	f043 0308 	orr.w	r3, r3, #8
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b7c      	ldr	r3, [pc, #496]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0308 	and.w	r3, r3, #8
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2108      	movs	r1, #8
 800083a:	4879      	ldr	r0, [pc, #484]	; (8000a20 <MX_GPIO_Init+0x2a8>)
 800083c:	f000 ff06 	bl	800164c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000840:	2201      	movs	r2, #1
 8000842:	2101      	movs	r1, #1
 8000844:	4877      	ldr	r0, [pc, #476]	; (8000a24 <MX_GPIO_Init+0x2ac>)
 8000846:	f000 ff01 	bl	800164c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800084a:	2200      	movs	r2, #0
 800084c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000850:	4875      	ldr	r0, [pc, #468]	; (8000a28 <MX_GPIO_Init+0x2b0>)
 8000852:	f000 fefb 	bl	800164c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000856:	2308      	movs	r3, #8
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	486c      	ldr	r0, [pc, #432]	; (8000a20 <MX_GPIO_Init+0x2a8>)
 800086e:	f000 fd51 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000872:	2301      	movs	r3, #1
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	4866      	ldr	r0, [pc, #408]	; (8000a24 <MX_GPIO_Init+0x2ac>)
 800088a:	f000 fd43 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800088e:	2308      	movs	r3, #8
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800089e:	2305      	movs	r3, #5
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	485e      	ldr	r0, [pc, #376]	; (8000a24 <MX_GPIO_Init+0x2ac>)
 80008aa:	f000 fd33 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ae:	2301      	movs	r3, #1
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	485a      	ldr	r0, [pc, #360]	; (8000a2c <MX_GPIO_Init+0x2b4>)
 80008c4:	f000 fd26 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008c8:	2310      	movs	r3, #16
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008d8:	2306      	movs	r3, #6
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	4852      	ldr	r0, [pc, #328]	; (8000a2c <MX_GPIO_Init+0x2b4>)
 80008e4:	f000 fd16 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008e8:	23e0      	movs	r3, #224	; 0xe0
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008f8:	2305      	movs	r3, #5
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	484a      	ldr	r0, [pc, #296]	; (8000a2c <MX_GPIO_Init+0x2b4>)
 8000904:	f000 fd06 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000908:	2304      	movs	r3, #4
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4845      	ldr	r0, [pc, #276]	; (8000a30 <MX_GPIO_Init+0x2b8>)
 800091c:	f000 fcfa 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000932:	2305      	movs	r3, #5
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	483c      	ldr	r0, [pc, #240]	; (8000a30 <MX_GPIO_Init+0x2b8>)
 800093e:	f000 fce9 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000942:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000946:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000948:	2301      	movs	r3, #1
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	4833      	ldr	r0, [pc, #204]	; (8000a28 <MX_GPIO_Init+0x2b0>)
 800095c:	f000 fcda 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000960:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000972:	2306      	movs	r3, #6
 8000974:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4829      	ldr	r0, [pc, #164]	; (8000a24 <MX_GPIO_Init+0x2ac>)
 800097e:	f000 fcc9 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000982:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4825      	ldr	r0, [pc, #148]	; (8000a2c <MX_GPIO_Init+0x2b4>)
 8000998:	f000 fcbc 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800099c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009ae:	230a      	movs	r3, #10
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	481c      	ldr	r0, [pc, #112]	; (8000a2c <MX_GPIO_Init+0x2b4>)
 80009ba:	f000 fcab 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009be:	2320      	movs	r3, #32
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c2:	2300      	movs	r3, #0
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	4815      	ldr	r0, [pc, #84]	; (8000a28 <MX_GPIO_Init+0x2b0>)
 80009d2:	f000 fc9f 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009d6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009dc:	2312      	movs	r3, #18
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009e8:	2304      	movs	r3, #4
 80009ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	480f      	ldr	r0, [pc, #60]	; (8000a30 <MX_GPIO_Init+0x2b8>)
 80009f4:	f000 fc8e 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009f8:	2302      	movs	r3, #2
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009fc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4804      	ldr	r0, [pc, #16]	; (8000a20 <MX_GPIO_Init+0x2a8>)
 8000a0e:	f000 fc81 	bl	8001314 <HAL_GPIO_Init>

}
 8000a12:	bf00      	nop
 8000a14:	3730      	adds	r7, #48	; 0x30
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40021000 	.word	0x40021000
 8000a24:	40020800 	.word	0x40020800
 8000a28:	40020c00 	.word	0x40020c00
 8000a2c:	40020000 	.word	0x40020000
 8000a30:	40020400 	.word	0x40020400

08000a34 <vManagerTask>:

/* USER CODE BEGIN 4 */

static void vManagerTask(void *pvParamaters)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	unsigned int xWorkTicketId;
	BaseType_t xStatus;

	xSemaphoreGive(xWork);
 8000a3c:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <vManagerTask+0x6c>)
 8000a3e:	6818      	ldr	r0, [r3, #0]
 8000a40:	2300      	movs	r3, #0
 8000a42:	2200      	movs	r2, #0
 8000a44:	2100      	movs	r1, #0
 8000a46:	f002 fe75 	bl	8003734 <xQueueGenericSend>

	while(1)
	{

		xWorkTicketId= ( rand() & 0x1ff );
 8000a4a:	f005 facd 	bl	8005fe8 <rand>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a54:	60bb      	str	r3, [r7, #8]

		xStatus=xQueueSend(xWorkQueue,&xWorkTicketId,portMAX_DELAY );
 8000a56:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <vManagerTask+0x70>)
 8000a58:	6818      	ldr	r0, [r3, #0]
 8000a5a:	f107 0108 	add.w	r1, r7, #8
 8000a5e:	2300      	movs	r3, #0
 8000a60:	f04f 32ff 	mov.w	r2, #4294967295
 8000a64:	f002 fe66 	bl	8003734 <xQueueGenericSend>
 8000a68:	60f8      	str	r0, [r7, #12]

		if(xStatus!=pdPASS)
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d007      	beq.n	8000a80 <vManagerTask+0x4c>
		{
			sprintf(ur_msg,"Could not send to the queue. \r\n");
 8000a70:	490d      	ldr	r1, [pc, #52]	; (8000aa8 <vManagerTask+0x74>)
 8000a72:	480e      	ldr	r0, [pc, #56]	; (8000aac <vManagerTask+0x78>)
 8000a74:	f005 faf8 	bl	8006068 <siprintf>
			print_msg(ur_msg);
 8000a78:	480c      	ldr	r0, [pc, #48]	; (8000aac <vManagerTask+0x78>)
 8000a7a:	f000 f869 	bl	8000b50 <print_msg>
 8000a7e:	e7e4      	b.n	8000a4a <vManagerTask+0x16>
		}
		else
		{
			xSemaphoreGive(xWork);
 8000a80:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <vManagerTask+0x6c>)
 8000a82:	6818      	ldr	r0, [r3, #0]
 8000a84:	2300      	movs	r3, #0
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	f002 fe53 	bl	8003734 <xQueueGenericSend>

			taskYIELD();
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <vManagerTask+0x7c>)
 8000a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	f3bf 8f4f 	dsb	sy
 8000a9a:	f3bf 8f6f 	isb	sy
		xWorkTicketId= ( rand() & 0x1ff );
 8000a9e:	e7d4      	b.n	8000a4a <vManagerTask+0x16>
 8000aa0:	20012f10 	.word	0x20012f10
 8000aa4:	20012f0c 	.word	0x20012f0c
 8000aa8:	080073f4 	.word	0x080073f4
 8000aac:	2000009c 	.word	0x2000009c
 8000ab0:	e000ed04 	.word	0xe000ed04

08000ab4 <vEmployeeTask>:

	}

}
static void vEmployeeTask(void *pvParamters)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	unsigned char xWorkTicketId;
	BaseType_t xStatus;

	while(xSemaphoreTake(xWork,0))
 8000abc:	e018      	b.n	8000af0 <vEmployeeTask+0x3c>
	{


		xStatus = xQueueReceive(xWorkQueue, &xWorkTicketId, portMAX_DELAY);
 8000abe:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <vEmployeeTask+0x58>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f107 010b 	add.w	r1, r7, #11
 8000ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8000aca:	4618      	mov	r0, r3
 8000acc:	f002 ffda 	bl	8003a84 <xQueueReceive>
 8000ad0:	60f8      	str	r0, [r7, #12]

		if (xStatus == pdPASS)
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d104      	bne.n	8000ae2 <vEmployeeTask+0x2e>
		{
			EmployeeDoWork(xWorkTicketId);
 8000ad8:	7afb      	ldrb	r3, [r7, #11]
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 f81e 	bl	8000b1c <EmployeeDoWork>
 8000ae0:	e006      	b.n	8000af0 <vEmployeeTask+0x3c>
		}
		else
		{
			sprintf(ur_msg,"Employee task: Queue is empty nothing to do \r\n");
 8000ae2:	490b      	ldr	r1, [pc, #44]	; (8000b10 <vEmployeeTask+0x5c>)
 8000ae4:	480b      	ldr	r0, [pc, #44]	; (8000b14 <vEmployeeTask+0x60>)
 8000ae6:	f005 fabf 	bl	8006068 <siprintf>
			print_msg(ur_msg);
 8000aea:	480a      	ldr	r0, [pc, #40]	; (8000b14 <vEmployeeTask+0x60>)
 8000aec:	f000 f830 	bl	8000b50 <print_msg>
	while(xSemaphoreTake(xWork,0))
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <vEmployeeTask+0x64>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f003 f8a4 	bl	8003c44 <xQueueSemaphoreTake>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d1dd      	bne.n	8000abe <vEmployeeTask+0xa>


	}


}
 8000b02:	bf00      	nop
 8000b04:	bf00      	nop
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20012f0c 	.word	0x20012f0c
 8000b10:	08007414 	.word	0x08007414
 8000b14:	2000009c 	.word	0x2000009c
 8000b18:	20012f10 	.word	0x20012f10

08000b1c <EmployeeDoWork>:

void EmployeeDoWork(unsigned char TicketId)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
	sprintf(ur_msg,"Employee task: Working on ticket id:%d \r\n",TicketId);
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4907      	ldr	r1, [pc, #28]	; (8000b48 <EmployeeDoWork+0x2c>)
 8000b2c:	4807      	ldr	r0, [pc, #28]	; (8000b4c <EmployeeDoWork+0x30>)
 8000b2e:	f005 fa9b 	bl	8006068 <siprintf>
	print_msg(ur_msg);
 8000b32:	4806      	ldr	r0, [pc, #24]	; (8000b4c <EmployeeDoWork+0x30>)
 8000b34:	f000 f80c 	bl	8000b50 <print_msg>
	vTaskDelay(TicketId);
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f003 fc5a 	bl	80043f4 <vTaskDelay>
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	08007444 	.word	0x08007444
 8000b4c:	2000009c 	.word	0x2000009c

08000b50 <print_msg>:

void print_msg(char *msg)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff fb39 	bl	80001d0 <strlen>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	f04f 33ff 	mov.w	r3, #4294967295
 8000b66:	6879      	ldr	r1, [r7, #4]
 8000b68:	4803      	ldr	r0, [pc, #12]	; (8000b78 <print_msg+0x28>)
 8000b6a:	f001 fd2a 	bl	80025c2 <HAL_UART_Transmit>

}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20012f14 	.word	0x20012f14

08000b7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d101      	bne.n	8000b92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b8e:	f000 fa2d 	bl	8000fec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40001000 	.word	0x40001000

08000ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba4:	b672      	cpsid	i
}
 8000ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <Error_Handler+0x8>
	...

08000bac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	4a0f      	ldr	r2, [pc, #60]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	603b      	str	r3, [r7, #0]
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	4a08      	ldr	r2, [pc, #32]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be6:	603b      	str	r3, [r7, #0]
 8000be8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	40023800 	.word	0x40023800

08000bfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a1d      	ldr	r2, [pc, #116]	; (8000c90 <HAL_UART_MspInit+0x94>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d133      	bne.n	8000c86 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	4b1c      	ldr	r3, [pc, #112]	; (8000c94 <HAL_UART_MspInit+0x98>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	4a1b      	ldr	r2, [pc, #108]	; (8000c94 <HAL_UART_MspInit+0x98>)
 8000c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c2e:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <HAL_UART_MspInit+0x98>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <HAL_UART_MspInit+0x98>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a14      	ldr	r2, [pc, #80]	; (8000c94 <HAL_UART_MspInit+0x98>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <HAL_UART_MspInit+0x98>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c56:	230c      	movs	r3, #12
 8000c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c62:	2303      	movs	r3, #3
 8000c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c66:	2307      	movs	r3, #7
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4809      	ldr	r0, [pc, #36]	; (8000c98 <HAL_UART_MspInit+0x9c>)
 8000c72:	f000 fb4f 	bl	8001314 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2106      	movs	r1, #6
 8000c7a:	2026      	movs	r0, #38	; 0x26
 8000c7c:	f000 fa8e 	bl	800119c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c80:	2026      	movs	r0, #38	; 0x26
 8000c82:	f000 faa7 	bl	80011d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c86:	bf00      	nop
 8000c88:	3728      	adds	r7, #40	; 0x28
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40004400 	.word	0x40004400
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020000 	.word	0x40020000

08000c9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08c      	sub	sp, #48	; 0x30
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000cac:	2200      	movs	r2, #0
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	2036      	movs	r0, #54	; 0x36
 8000cb2:	f000 fa73 	bl	800119c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cb6:	2036      	movs	r0, #54	; 0x36
 8000cb8:	f000 fa8c 	bl	80011d4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	4b1f      	ldr	r3, [pc, #124]	; (8000d40 <HAL_InitTick+0xa4>)
 8000cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc4:	4a1e      	ldr	r2, [pc, #120]	; (8000d40 <HAL_InitTick+0xa4>)
 8000cc6:	f043 0310 	orr.w	r3, r3, #16
 8000cca:	6413      	str	r3, [r2, #64]	; 0x40
 8000ccc:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <HAL_InitTick+0xa4>)
 8000cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd0:	f003 0310 	and.w	r3, r3, #16
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cd8:	f107 0210 	add.w	r2, r7, #16
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	4611      	mov	r1, r2
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f001 f940 	bl	8001f68 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ce8:	f001 f916 	bl	8001f18 <HAL_RCC_GetPCLK1Freq>
 8000cec:	4603      	mov	r3, r0
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cf4:	4a13      	ldr	r2, [pc, #76]	; (8000d44 <HAL_InitTick+0xa8>)
 8000cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cfa:	0c9b      	lsrs	r3, r3, #18
 8000cfc:	3b01      	subs	r3, #1
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <HAL_InitTick+0xac>)
 8000d02:	4a12      	ldr	r2, [pc, #72]	; (8000d4c <HAL_InitTick+0xb0>)
 8000d04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d06:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <HAL_InitTick+0xac>)
 8000d08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d0c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d0e:	4a0e      	ldr	r2, [pc, #56]	; (8000d48 <HAL_InitTick+0xac>)
 8000d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d12:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <HAL_InitTick+0xac>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <HAL_InitTick+0xac>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000d20:	4809      	ldr	r0, [pc, #36]	; (8000d48 <HAL_InitTick+0xac>)
 8000d22:	f001 f953 	bl	8001fcc <HAL_TIM_Base_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d104      	bne.n	8000d36 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000d2c:	4806      	ldr	r0, [pc, #24]	; (8000d48 <HAL_InitTick+0xac>)
 8000d2e:	f001 f9a7 	bl	8002080 <HAL_TIM_Base_Start_IT>
 8000d32:	4603      	mov	r3, r0
 8000d34:	e000      	b.n	8000d38 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3730      	adds	r7, #48	; 0x30
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40023800 	.word	0x40023800
 8000d44:	431bde83 	.word	0x431bde83
 8000d48:	20012f58 	.word	0x20012f58
 8000d4c:	40001000 	.word	0x40001000

08000d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <NMI_Handler+0x4>

08000d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <HardFault_Handler+0x4>

08000d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <MemManage_Handler+0x4>

08000d62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d66:	e7fe      	b.n	8000d66 <BusFault_Handler+0x4>

08000d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <UsageFault_Handler+0x4>

08000d6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d80:	4802      	ldr	r0, [pc, #8]	; (8000d8c <USART2_IRQHandler+0x10>)
 8000d82:	f001 fcb1 	bl	80026e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20012f14 	.word	0x20012f14

08000d90 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d94:	4802      	ldr	r0, [pc, #8]	; (8000da0 <TIM6_DAC_IRQHandler+0x10>)
 8000d96:	f001 f9e3 	bl	8002160 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20012f58 	.word	0x20012f58

08000da4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
	return 1;
 8000da8:	2301      	movs	r3, #1
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <_kill>:

int _kill(int pid, int sig)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000dbe:	f005 f8d3 	bl	8005f68 <__errno>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2216      	movs	r2, #22
 8000dc6:	601a      	str	r2, [r3, #0]
	return -1;
 8000dc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <_exit>:

void _exit (int status)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff ffe7 	bl	8000db4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000de6:	e7fe      	b.n	8000de6 <_exit+0x12>

08000de8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	e00a      	b.n	8000e10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dfa:	f3af 8000 	nop.w
 8000dfe:	4601      	mov	r1, r0
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	1c5a      	adds	r2, r3, #1
 8000e04:	60ba      	str	r2, [r7, #8]
 8000e06:	b2ca      	uxtb	r2, r1
 8000e08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	697a      	ldr	r2, [r7, #20]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	dbf0      	blt.n	8000dfa <_read+0x12>
	}

return len;
 8000e18:	687b      	ldr	r3, [r7, #4]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b086      	sub	sp, #24
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	60f8      	str	r0, [r7, #12]
 8000e2a:	60b9      	str	r1, [r7, #8]
 8000e2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
 8000e32:	e009      	b.n	8000e48 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	1c5a      	adds	r2, r3, #1
 8000e38:	60ba      	str	r2, [r7, #8]
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	3301      	adds	r3, #1
 8000e46:	617b      	str	r3, [r7, #20]
 8000e48:	697a      	ldr	r2, [r7, #20]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	dbf1      	blt.n	8000e34 <_write+0x12>
	}
	return len;
 8000e50:	687b      	ldr	r3, [r7, #4]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <_close>:

int _close(int file)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
	return -1;
 8000e62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e72:	b480      	push	{r7}
 8000e74:	b083      	sub	sp, #12
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
 8000e7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e82:	605a      	str	r2, [r3, #4]
	return 0;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <_isatty>:

int _isatty(int file)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b083      	sub	sp, #12
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
	return 1;
 8000e9a:	2301      	movs	r3, #1
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
	return 0;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
	...

08000ec4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ecc:	4a14      	ldr	r2, [pc, #80]	; (8000f20 <_sbrk+0x5c>)
 8000ece:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <_sbrk+0x60>)
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed8:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <_sbrk+0x64>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d102      	bne.n	8000ee6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <_sbrk+0x64>)
 8000ee2:	4a12      	ldr	r2, [pc, #72]	; (8000f2c <_sbrk+0x68>)
 8000ee4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ee6:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <_sbrk+0x64>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d207      	bcs.n	8000f04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef4:	f005 f838 	bl	8005f68 <__errno>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	220c      	movs	r2, #12
 8000efc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000efe:	f04f 33ff 	mov.w	r3, #4294967295
 8000f02:	e009      	b.n	8000f18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <_sbrk+0x64>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f0a:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <_sbrk+0x64>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	4a05      	ldr	r2, [pc, #20]	; (8000f28 <_sbrk+0x64>)
 8000f14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f16:	68fb      	ldr	r3, [r7, #12]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20020000 	.word	0x20020000
 8000f24:	00000400 	.word	0x00000400
 8000f28:	20000198 	.word	0x20000198
 8000f2c:	20012ff8 	.word	0x20012ff8

08000f30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <SystemInit+0x20>)
 8000f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f3a:	4a05      	ldr	r2, [pc, #20]	; (8000f50 <SystemInit+0x20>)
 8000f3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f58:	480d      	ldr	r0, [pc, #52]	; (8000f90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f5a:	490e      	ldr	r1, [pc, #56]	; (8000f94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f5c:	4a0e      	ldr	r2, [pc, #56]	; (8000f98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f60:	e002      	b.n	8000f68 <LoopCopyDataInit>

08000f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f66:	3304      	adds	r3, #4

08000f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f6c:	d3f9      	bcc.n	8000f62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6e:	4a0b      	ldr	r2, [pc, #44]	; (8000f9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f70:	4c0b      	ldr	r4, [pc, #44]	; (8000fa0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f74:	e001      	b.n	8000f7a <LoopFillZerobss>

08000f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f78:	3204      	adds	r2, #4

08000f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f7c:	d3fb      	bcc.n	8000f76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f7e:	f7ff ffd7 	bl	8000f30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f82:	f004 fff7 	bl	8005f74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f86:	f7ff faf7 	bl	8000578 <main>
  bx  lr    
 8000f8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f94:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000f98:	080075fc 	.word	0x080075fc
  ldr r2, =_sbss
 8000f9c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000fa0:	20012ff4 	.word	0x20012ff4

08000fa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa4:	e7fe      	b.n	8000fa4 <ADC_IRQHandler>
	...

08000fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fac:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	; (8000fe8 <HAL_Init+0x40>)
 8000fb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb8:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <HAL_Init+0x40>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <HAL_Init+0x40>)
 8000fbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <HAL_Init+0x40>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <HAL_Init+0x40>)
 8000fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	f000 f8d8 	bl	8001186 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f7ff fe60 	bl	8000c9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fdc:	f7ff fde6 	bl	8000bac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40023c00 	.word	0x40023c00

08000fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x20>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_IncTick+0x24>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4a04      	ldr	r2, [pc, #16]	; (8001010 <HAL_IncTick+0x24>)
 8000ffe:	6013      	str	r3, [r2, #0]
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000008 	.word	0x20000008
 8001010:	20012fa0 	.word	0x20012fa0

08001014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return uwTick;
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <HAL_GetTick+0x14>)
 800101a:	681b      	ldr	r3, [r3, #0]
}
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20012fa0 	.word	0x20012fa0

0800102c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <__NVIC_SetPriorityGrouping+0x44>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001048:	4013      	ands	r3, r2
 800104a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800105c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105e:	4a04      	ldr	r2, [pc, #16]	; (8001070 <__NVIC_SetPriorityGrouping+0x44>)
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	60d3      	str	r3, [r2, #12]
}
 8001064:	bf00      	nop
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <__NVIC_GetPriorityGrouping+0x18>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	0a1b      	lsrs	r3, r3, #8
 800107e:	f003 0307 	and.w	r3, r3, #7
}
 8001082:	4618      	mov	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	db0b      	blt.n	80010ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	f003 021f 	and.w	r2, r3, #31
 80010a8:	4907      	ldr	r1, [pc, #28]	; (80010c8 <__NVIC_EnableIRQ+0x38>)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	095b      	lsrs	r3, r3, #5
 80010b0:	2001      	movs	r0, #1
 80010b2:	fa00 f202 	lsl.w	r2, r0, r2
 80010b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000e100 	.word	0xe000e100

080010cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	6039      	str	r1, [r7, #0]
 80010d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	db0a      	blt.n	80010f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	490c      	ldr	r1, [pc, #48]	; (8001118 <__NVIC_SetPriority+0x4c>)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	0112      	lsls	r2, r2, #4
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	440b      	add	r3, r1
 80010f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f4:	e00a      	b.n	800110c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4908      	ldr	r1, [pc, #32]	; (800111c <__NVIC_SetPriority+0x50>)
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	f003 030f 	and.w	r3, r3, #15
 8001102:	3b04      	subs	r3, #4
 8001104:	0112      	lsls	r2, r2, #4
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	440b      	add	r3, r1
 800110a:	761a      	strb	r2, [r3, #24]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000e100 	.word	0xe000e100
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001120:	b480      	push	{r7}
 8001122:	b089      	sub	sp, #36	; 0x24
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	f1c3 0307 	rsb	r3, r3, #7
 800113a:	2b04      	cmp	r3, #4
 800113c:	bf28      	it	cs
 800113e:	2304      	movcs	r3, #4
 8001140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3304      	adds	r3, #4
 8001146:	2b06      	cmp	r3, #6
 8001148:	d902      	bls.n	8001150 <NVIC_EncodePriority+0x30>
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	3b03      	subs	r3, #3
 800114e:	e000      	b.n	8001152 <NVIC_EncodePriority+0x32>
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	f04f 32ff 	mov.w	r2, #4294967295
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43da      	mvns	r2, r3
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	401a      	ands	r2, r3
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001168:	f04f 31ff 	mov.w	r1, #4294967295
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	fa01 f303 	lsl.w	r3, r1, r3
 8001172:	43d9      	mvns	r1, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	4313      	orrs	r3, r2
         );
}
 800117a:	4618      	mov	r0, r3
 800117c:	3724      	adds	r7, #36	; 0x24
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff ff4c 	bl	800102c <__NVIC_SetPriorityGrouping>
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
 80011a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ae:	f7ff ff61 	bl	8001074 <__NVIC_GetPriorityGrouping>
 80011b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	68b9      	ldr	r1, [r7, #8]
 80011b8:	6978      	ldr	r0, [r7, #20]
 80011ba:	f7ff ffb1 	bl	8001120 <NVIC_EncodePriority>
 80011be:	4602      	mov	r2, r0
 80011c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ff80 	bl	80010cc <__NVIC_SetPriority>
}
 80011cc:	bf00      	nop
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff ff54 	bl	8001090 <__NVIC_EnableIRQ>
}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011fe:	f7ff ff09 	bl	8001014 <HAL_GetTick>
 8001202:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d008      	beq.n	8001222 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2280      	movs	r2, #128	; 0x80
 8001214:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e052      	b.n	80012c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f022 0216 	bic.w	r2, r2, #22
 8001230:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	695a      	ldr	r2, [r3, #20]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001240:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	2b00      	cmp	r3, #0
 8001248:	d103      	bne.n	8001252 <HAL_DMA_Abort+0x62>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800124e:	2b00      	cmp	r3, #0
 8001250:	d007      	beq.n	8001262 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f022 0208 	bic.w	r2, r2, #8
 8001260:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f022 0201 	bic.w	r2, r2, #1
 8001270:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001272:	e013      	b.n	800129c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001274:	f7ff fece 	bl	8001014 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b05      	cmp	r3, #5
 8001280:	d90c      	bls.n	800129c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2220      	movs	r2, #32
 8001286:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2203      	movs	r2, #3
 800128c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e015      	b.n	80012c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1e4      	bne.n	8001274 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ae:	223f      	movs	r2, #63	; 0x3f
 80012b0:	409a      	lsls	r2, r3
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2201      	movs	r2, #1
 80012ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d004      	beq.n	80012ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2280      	movs	r2, #128	; 0x80
 80012e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00c      	b.n	8001308 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2205      	movs	r2, #5
 80012f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0201 	bic.w	r2, r2, #1
 8001304:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001314:	b480      	push	{r7}
 8001316:	b089      	sub	sp, #36	; 0x24
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001326:	2300      	movs	r3, #0
 8001328:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
 800132e:	e16b      	b.n	8001608 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001330:	2201      	movs	r2, #1
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	697a      	ldr	r2, [r7, #20]
 8001340:	4013      	ands	r3, r2
 8001342:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	429a      	cmp	r2, r3
 800134a:	f040 815a 	bne.w	8001602 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f003 0303 	and.w	r3, r3, #3
 8001356:	2b01      	cmp	r3, #1
 8001358:	d005      	beq.n	8001366 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001362:	2b02      	cmp	r3, #2
 8001364:	d130      	bne.n	80013c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	2203      	movs	r2, #3
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	68da      	ldr	r2, [r3, #12]
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800139c:	2201      	movs	r2, #1
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	091b      	lsrs	r3, r3, #4
 80013b2:	f003 0201 	and.w	r2, r3, #1
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	2b03      	cmp	r3, #3
 80013d2:	d017      	beq.n	8001404 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	2203      	movs	r2, #3
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 0303 	and.w	r3, r3, #3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d123      	bne.n	8001458 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	08da      	lsrs	r2, r3, #3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3208      	adds	r2, #8
 8001418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800141c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	220f      	movs	r2, #15
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	691a      	ldr	r2, [r3, #16]
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	08da      	lsrs	r2, r3, #3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	3208      	adds	r2, #8
 8001452:	69b9      	ldr	r1, [r7, #24]
 8001454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	2203      	movs	r2, #3
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 0203 	and.w	r2, r3, #3
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 80b4 	beq.w	8001602 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	4b60      	ldr	r3, [pc, #384]	; (8001620 <HAL_GPIO_Init+0x30c>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	4a5f      	ldr	r2, [pc, #380]	; (8001620 <HAL_GPIO_Init+0x30c>)
 80014a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014a8:	6453      	str	r3, [r2, #68]	; 0x44
 80014aa:	4b5d      	ldr	r3, [pc, #372]	; (8001620 <HAL_GPIO_Init+0x30c>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014b6:	4a5b      	ldr	r2, [pc, #364]	; (8001624 <HAL_GPIO_Init+0x310>)
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	089b      	lsrs	r3, r3, #2
 80014bc:	3302      	adds	r3, #2
 80014be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f003 0303 	and.w	r3, r3, #3
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	220f      	movs	r2, #15
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4013      	ands	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a52      	ldr	r2, [pc, #328]	; (8001628 <HAL_GPIO_Init+0x314>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d02b      	beq.n	800153a <HAL_GPIO_Init+0x226>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a51      	ldr	r2, [pc, #324]	; (800162c <HAL_GPIO_Init+0x318>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d025      	beq.n	8001536 <HAL_GPIO_Init+0x222>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a50      	ldr	r2, [pc, #320]	; (8001630 <HAL_GPIO_Init+0x31c>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d01f      	beq.n	8001532 <HAL_GPIO_Init+0x21e>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a4f      	ldr	r2, [pc, #316]	; (8001634 <HAL_GPIO_Init+0x320>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d019      	beq.n	800152e <HAL_GPIO_Init+0x21a>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a4e      	ldr	r2, [pc, #312]	; (8001638 <HAL_GPIO_Init+0x324>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d013      	beq.n	800152a <HAL_GPIO_Init+0x216>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a4d      	ldr	r2, [pc, #308]	; (800163c <HAL_GPIO_Init+0x328>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d00d      	beq.n	8001526 <HAL_GPIO_Init+0x212>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a4c      	ldr	r2, [pc, #304]	; (8001640 <HAL_GPIO_Init+0x32c>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d007      	beq.n	8001522 <HAL_GPIO_Init+0x20e>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a4b      	ldr	r2, [pc, #300]	; (8001644 <HAL_GPIO_Init+0x330>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d101      	bne.n	800151e <HAL_GPIO_Init+0x20a>
 800151a:	2307      	movs	r3, #7
 800151c:	e00e      	b.n	800153c <HAL_GPIO_Init+0x228>
 800151e:	2308      	movs	r3, #8
 8001520:	e00c      	b.n	800153c <HAL_GPIO_Init+0x228>
 8001522:	2306      	movs	r3, #6
 8001524:	e00a      	b.n	800153c <HAL_GPIO_Init+0x228>
 8001526:	2305      	movs	r3, #5
 8001528:	e008      	b.n	800153c <HAL_GPIO_Init+0x228>
 800152a:	2304      	movs	r3, #4
 800152c:	e006      	b.n	800153c <HAL_GPIO_Init+0x228>
 800152e:	2303      	movs	r3, #3
 8001530:	e004      	b.n	800153c <HAL_GPIO_Init+0x228>
 8001532:	2302      	movs	r3, #2
 8001534:	e002      	b.n	800153c <HAL_GPIO_Init+0x228>
 8001536:	2301      	movs	r3, #1
 8001538:	e000      	b.n	800153c <HAL_GPIO_Init+0x228>
 800153a:	2300      	movs	r3, #0
 800153c:	69fa      	ldr	r2, [r7, #28]
 800153e:	f002 0203 	and.w	r2, r2, #3
 8001542:	0092      	lsls	r2, r2, #2
 8001544:	4093      	lsls	r3, r2
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4313      	orrs	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800154c:	4935      	ldr	r1, [pc, #212]	; (8001624 <HAL_GPIO_Init+0x310>)
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	089b      	lsrs	r3, r3, #2
 8001552:	3302      	adds	r3, #2
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800155a:	4b3b      	ldr	r3, [pc, #236]	; (8001648 <HAL_GPIO_Init+0x334>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	43db      	mvns	r3, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4013      	ands	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800157e:	4a32      	ldr	r2, [pc, #200]	; (8001648 <HAL_GPIO_Init+0x334>)
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001584:	4b30      	ldr	r3, [pc, #192]	; (8001648 <HAL_GPIO_Init+0x334>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	43db      	mvns	r3, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d003      	beq.n	80015a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015a8:	4a27      	ldr	r2, [pc, #156]	; (8001648 <HAL_GPIO_Init+0x334>)
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015ae:	4b26      	ldr	r3, [pc, #152]	; (8001648 <HAL_GPIO_Init+0x334>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	43db      	mvns	r3, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4013      	ands	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015d2:	4a1d      	ldr	r2, [pc, #116]	; (8001648 <HAL_GPIO_Init+0x334>)
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015d8:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <HAL_GPIO_Init+0x334>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015fc:	4a12      	ldr	r2, [pc, #72]	; (8001648 <HAL_GPIO_Init+0x334>)
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3301      	adds	r3, #1
 8001606:	61fb      	str	r3, [r7, #28]
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	2b0f      	cmp	r3, #15
 800160c:	f67f ae90 	bls.w	8001330 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	3724      	adds	r7, #36	; 0x24
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	40023800 	.word	0x40023800
 8001624:	40013800 	.word	0x40013800
 8001628:	40020000 	.word	0x40020000
 800162c:	40020400 	.word	0x40020400
 8001630:	40020800 	.word	0x40020800
 8001634:	40020c00 	.word	0x40020c00
 8001638:	40021000 	.word	0x40021000
 800163c:	40021400 	.word	0x40021400
 8001640:	40021800 	.word	0x40021800
 8001644:	40021c00 	.word	0x40021c00
 8001648:	40013c00 	.word	0x40013c00

0800164c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	807b      	strh	r3, [r7, #2]
 8001658:	4613      	mov	r3, r2
 800165a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800165c:	787b      	ldrb	r3, [r7, #1]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001662:	887a      	ldrh	r2, [r7, #2]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001668:	e003      	b.n	8001672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800166a:	887b      	ldrh	r3, [r7, #2]
 800166c:	041a      	lsls	r2, r3, #16
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	619a      	str	r2, [r3, #24]
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
	...

08001680 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e264      	b.n	8001b5c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b00      	cmp	r3, #0
 800169c:	d075      	beq.n	800178a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800169e:	4ba3      	ldr	r3, [pc, #652]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f003 030c 	and.w	r3, r3, #12
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	d00c      	beq.n	80016c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016aa:	4ba0      	ldr	r3, [pc, #640]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016b2:	2b08      	cmp	r3, #8
 80016b4:	d112      	bne.n	80016dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016b6:	4b9d      	ldr	r3, [pc, #628]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016c2:	d10b      	bne.n	80016dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c4:	4b99      	ldr	r3, [pc, #612]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d05b      	beq.n	8001788 <HAL_RCC_OscConfig+0x108>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d157      	bne.n	8001788 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e23f      	b.n	8001b5c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e4:	d106      	bne.n	80016f4 <HAL_RCC_OscConfig+0x74>
 80016e6:	4b91      	ldr	r3, [pc, #580]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a90      	ldr	r2, [pc, #576]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 80016ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	e01d      	b.n	8001730 <HAL_RCC_OscConfig+0xb0>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016fc:	d10c      	bne.n	8001718 <HAL_RCC_OscConfig+0x98>
 80016fe:	4b8b      	ldr	r3, [pc, #556]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a8a      	ldr	r2, [pc, #552]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 8001704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	4b88      	ldr	r3, [pc, #544]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a87      	ldr	r2, [pc, #540]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 8001710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	e00b      	b.n	8001730 <HAL_RCC_OscConfig+0xb0>
 8001718:	4b84      	ldr	r3, [pc, #528]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a83      	ldr	r2, [pc, #524]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 800171e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	4b81      	ldr	r3, [pc, #516]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a80      	ldr	r2, [pc, #512]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 800172a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800172e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d013      	beq.n	8001760 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001738:	f7ff fc6c 	bl	8001014 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001740:	f7ff fc68 	bl	8001014 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b64      	cmp	r3, #100	; 0x64
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e204      	b.n	8001b5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001752:	4b76      	ldr	r3, [pc, #472]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0f0      	beq.n	8001740 <HAL_RCC_OscConfig+0xc0>
 800175e:	e014      	b.n	800178a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7ff fc58 	bl	8001014 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001768:	f7ff fc54 	bl	8001014 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b64      	cmp	r3, #100	; 0x64
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e1f0      	b.n	8001b5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177a:	4b6c      	ldr	r3, [pc, #432]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f0      	bne.n	8001768 <HAL_RCC_OscConfig+0xe8>
 8001786:	e000      	b.n	800178a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d063      	beq.n	800185e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001796:	4b65      	ldr	r3, [pc, #404]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 030c 	and.w	r3, r3, #12
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00b      	beq.n	80017ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017a2:	4b62      	ldr	r3, [pc, #392]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017aa:	2b08      	cmp	r3, #8
 80017ac:	d11c      	bne.n	80017e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ae:	4b5f      	ldr	r3, [pc, #380]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d116      	bne.n	80017e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ba:	4b5c      	ldr	r3, [pc, #368]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d005      	beq.n	80017d2 <HAL_RCC_OscConfig+0x152>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d001      	beq.n	80017d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e1c4      	b.n	8001b5c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d2:	4b56      	ldr	r3, [pc, #344]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	4952      	ldr	r1, [pc, #328]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017e6:	e03a      	b.n	800185e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d020      	beq.n	8001832 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017f0:	4b4f      	ldr	r3, [pc, #316]	; (8001930 <HAL_RCC_OscConfig+0x2b0>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f6:	f7ff fc0d 	bl	8001014 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017fe:	f7ff fc09 	bl	8001014 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e1a5      	b.n	8001b5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001810:	4b46      	ldr	r3, [pc, #280]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d0f0      	beq.n	80017fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181c:	4b43      	ldr	r3, [pc, #268]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	4940      	ldr	r1, [pc, #256]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 800182c:	4313      	orrs	r3, r2
 800182e:	600b      	str	r3, [r1, #0]
 8001830:	e015      	b.n	800185e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001832:	4b3f      	ldr	r3, [pc, #252]	; (8001930 <HAL_RCC_OscConfig+0x2b0>)
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001838:	f7ff fbec 	bl	8001014 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001840:	f7ff fbe8 	bl	8001014 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e184      	b.n	8001b5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001852:	4b36      	ldr	r3, [pc, #216]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f0      	bne.n	8001840 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	2b00      	cmp	r3, #0
 8001868:	d030      	beq.n	80018cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d016      	beq.n	80018a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001872:	4b30      	ldr	r3, [pc, #192]	; (8001934 <HAL_RCC_OscConfig+0x2b4>)
 8001874:	2201      	movs	r2, #1
 8001876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001878:	f7ff fbcc 	bl	8001014 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001880:	f7ff fbc8 	bl	8001014 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e164      	b.n	8001b5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001892:	4b26      	ldr	r3, [pc, #152]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 8001894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f0      	beq.n	8001880 <HAL_RCC_OscConfig+0x200>
 800189e:	e015      	b.n	80018cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018a0:	4b24      	ldr	r3, [pc, #144]	; (8001934 <HAL_RCC_OscConfig+0x2b4>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a6:	f7ff fbb5 	bl	8001014 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018ae:	f7ff fbb1 	bl	8001014 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e14d      	b.n	8001b5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c0:	4b1a      	ldr	r3, [pc, #104]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 80018c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1f0      	bne.n	80018ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f000 80a0 	beq.w	8001a1a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018da:	2300      	movs	r3, #0
 80018dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018de:	4b13      	ldr	r3, [pc, #76]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10f      	bne.n	800190a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	4b0f      	ldr	r3, [pc, #60]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	4a0e      	ldr	r2, [pc, #56]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 80018f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f8:	6413      	str	r3, [r2, #64]	; 0x40
 80018fa:	4b0c      	ldr	r3, [pc, #48]	; (800192c <HAL_RCC_OscConfig+0x2ac>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001902:	60bb      	str	r3, [r7, #8]
 8001904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001906:	2301      	movs	r3, #1
 8001908:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <HAL_RCC_OscConfig+0x2b8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001912:	2b00      	cmp	r3, #0
 8001914:	d121      	bne.n	800195a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <HAL_RCC_OscConfig+0x2b8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a07      	ldr	r2, [pc, #28]	; (8001938 <HAL_RCC_OscConfig+0x2b8>)
 800191c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001920:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001922:	f7ff fb77 	bl	8001014 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001928:	e011      	b.n	800194e <HAL_RCC_OscConfig+0x2ce>
 800192a:	bf00      	nop
 800192c:	40023800 	.word	0x40023800
 8001930:	42470000 	.word	0x42470000
 8001934:	42470e80 	.word	0x42470e80
 8001938:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800193c:	f7ff fb6a 	bl	8001014 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e106      	b.n	8001b5c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194e:	4b85      	ldr	r3, [pc, #532]	; (8001b64 <HAL_RCC_OscConfig+0x4e4>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0f0      	beq.n	800193c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d106      	bne.n	8001970 <HAL_RCC_OscConfig+0x2f0>
 8001962:	4b81      	ldr	r3, [pc, #516]	; (8001b68 <HAL_RCC_OscConfig+0x4e8>)
 8001964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001966:	4a80      	ldr	r2, [pc, #512]	; (8001b68 <HAL_RCC_OscConfig+0x4e8>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	6713      	str	r3, [r2, #112]	; 0x70
 800196e:	e01c      	b.n	80019aa <HAL_RCC_OscConfig+0x32a>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2b05      	cmp	r3, #5
 8001976:	d10c      	bne.n	8001992 <HAL_RCC_OscConfig+0x312>
 8001978:	4b7b      	ldr	r3, [pc, #492]	; (8001b68 <HAL_RCC_OscConfig+0x4e8>)
 800197a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800197c:	4a7a      	ldr	r2, [pc, #488]	; (8001b68 <HAL_RCC_OscConfig+0x4e8>)
 800197e:	f043 0304 	orr.w	r3, r3, #4
 8001982:	6713      	str	r3, [r2, #112]	; 0x70
 8001984:	4b78      	ldr	r3, [pc, #480]	; (8001b68 <HAL_RCC_OscConfig+0x4e8>)
 8001986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001988:	4a77      	ldr	r2, [pc, #476]	; (8001b68 <HAL_RCC_OscConfig+0x4e8>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	6713      	str	r3, [r2, #112]	; 0x70
 8001990:	e00b      	b.n	80019aa <HAL_RCC_OscConfig+0x32a>
 8001992:	4b75      	ldr	r3, [pc, #468]	; (8001b68 <HAL_RCC_OscConfig+0x4e8>)
 8001994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001996:	4a74      	ldr	r2, [pc, #464]	; (8001b68 <HAL_RCC_OscConfig+0x4e8>)
 8001998:	f023 0301 	bic.w	r3, r3, #1
 800199c:	6713      	str	r3, [r2, #112]	; 0x70
 800199e:	4b72      	ldr	r3, [pc, #456]	; (8001b68 <HAL_RCC_OscConfig+0x4e8>)
 80019a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a2:	4a71      	ldr	r2, [pc, #452]	; (8001b68 <HAL_RCC_OscConfig+0x4e8>)
 80019a4:	f023 0304 	bic.w	r3, r3, #4
 80019a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d015      	beq.n	80019de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b2:	f7ff fb2f 	bl	8001014 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b8:	e00a      	b.n	80019d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ba:	f7ff fb2b 	bl	8001014 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e0c5      	b.n	8001b5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d0:	4b65      	ldr	r3, [pc, #404]	; (8001b68 <HAL_RCC_OscConfig+0x4e8>)
 80019d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0ee      	beq.n	80019ba <HAL_RCC_OscConfig+0x33a>
 80019dc:	e014      	b.n	8001a08 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019de:	f7ff fb19 	bl	8001014 <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019e4:	e00a      	b.n	80019fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019e6:	f7ff fb15 	bl	8001014 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e0af      	b.n	8001b5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019fc:	4b5a      	ldr	r3, [pc, #360]	; (8001b68 <HAL_RCC_OscConfig+0x4e8>)
 80019fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1ee      	bne.n	80019e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a08:	7dfb      	ldrb	r3, [r7, #23]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d105      	bne.n	8001a1a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a0e:	4b56      	ldr	r3, [pc, #344]	; (8001b68 <HAL_RCC_OscConfig+0x4e8>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	4a55      	ldr	r2, [pc, #340]	; (8001b68 <HAL_RCC_OscConfig+0x4e8>)
 8001a14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 809b 	beq.w	8001b5a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a24:	4b50      	ldr	r3, [pc, #320]	; (8001b68 <HAL_RCC_OscConfig+0x4e8>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 030c 	and.w	r3, r3, #12
 8001a2c:	2b08      	cmp	r3, #8
 8001a2e:	d05c      	beq.n	8001aea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d141      	bne.n	8001abc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a38:	4b4c      	ldr	r3, [pc, #304]	; (8001b6c <HAL_RCC_OscConfig+0x4ec>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3e:	f7ff fae9 	bl	8001014 <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a46:	f7ff fae5 	bl	8001014 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e081      	b.n	8001b5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a58:	4b43      	ldr	r3, [pc, #268]	; (8001b68 <HAL_RCC_OscConfig+0x4e8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1f0      	bne.n	8001a46 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69da      	ldr	r2, [r3, #28]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a72:	019b      	lsls	r3, r3, #6
 8001a74:	431a      	orrs	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7a:	085b      	lsrs	r3, r3, #1
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	041b      	lsls	r3, r3, #16
 8001a80:	431a      	orrs	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a86:	061b      	lsls	r3, r3, #24
 8001a88:	4937      	ldr	r1, [pc, #220]	; (8001b68 <HAL_RCC_OscConfig+0x4e8>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a8e:	4b37      	ldr	r3, [pc, #220]	; (8001b6c <HAL_RCC_OscConfig+0x4ec>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a94:	f7ff fabe 	bl	8001014 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a9c:	f7ff faba 	bl	8001014 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e056      	b.n	8001b5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aae:	4b2e      	ldr	r3, [pc, #184]	; (8001b68 <HAL_RCC_OscConfig+0x4e8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCC_OscConfig+0x41c>
 8001aba:	e04e      	b.n	8001b5a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001abc:	4b2b      	ldr	r3, [pc, #172]	; (8001b6c <HAL_RCC_OscConfig+0x4ec>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac2:	f7ff faa7 	bl	8001014 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aca:	f7ff faa3 	bl	8001014 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e03f      	b.n	8001b5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001adc:	4b22      	ldr	r3, [pc, #136]	; (8001b68 <HAL_RCC_OscConfig+0x4e8>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1f0      	bne.n	8001aca <HAL_RCC_OscConfig+0x44a>
 8001ae8:	e037      	b.n	8001b5a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d101      	bne.n	8001af6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e032      	b.n	8001b5c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001af6:	4b1c      	ldr	r3, [pc, #112]	; (8001b68 <HAL_RCC_OscConfig+0x4e8>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d028      	beq.n	8001b56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d121      	bne.n	8001b56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d11a      	bne.n	8001b56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b26:	4013      	ands	r3, r2
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b2c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d111      	bne.n	8001b56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3c:	085b      	lsrs	r3, r3, #1
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d107      	bne.n	8001b56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b50:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d001      	beq.n	8001b5a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40007000 	.word	0x40007000
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	42470060 	.word	0x42470060

08001b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e0cc      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b84:	4b68      	ldr	r3, [pc, #416]	; (8001d28 <HAL_RCC_ClockConfig+0x1b8>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d90c      	bls.n	8001bac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b92:	4b65      	ldr	r3, [pc, #404]	; (8001d28 <HAL_RCC_ClockConfig+0x1b8>)
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9a:	4b63      	ldr	r3, [pc, #396]	; (8001d28 <HAL_RCC_ClockConfig+0x1b8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d001      	beq.n	8001bac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e0b8      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d020      	beq.n	8001bfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d005      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bc4:	4b59      	ldr	r3, [pc, #356]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	4a58      	ldr	r2, [pc, #352]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001bca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d005      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bdc:	4b53      	ldr	r3, [pc, #332]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	4a52      	ldr	r2, [pc, #328]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001be2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001be6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001be8:	4b50      	ldr	r3, [pc, #320]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	494d      	ldr	r1, [pc, #308]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d044      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d107      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0e:	4b47      	ldr	r3, [pc, #284]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d119      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e07f      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d003      	beq.n	8001c2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d107      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c2e:	4b3f      	ldr	r3, [pc, #252]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d109      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e06f      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3e:	4b3b      	ldr	r3, [pc, #236]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e067      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c4e:	4b37      	ldr	r3, [pc, #220]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f023 0203 	bic.w	r2, r3, #3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	4934      	ldr	r1, [pc, #208]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c60:	f7ff f9d8 	bl	8001014 <HAL_GetTick>
 8001c64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c66:	e00a      	b.n	8001c7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c68:	f7ff f9d4 	bl	8001014 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e04f      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7e:	4b2b      	ldr	r3, [pc, #172]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 020c 	and.w	r2, r3, #12
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d1eb      	bne.n	8001c68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c90:	4b25      	ldr	r3, [pc, #148]	; (8001d28 <HAL_RCC_ClockConfig+0x1b8>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d20c      	bcs.n	8001cb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9e:	4b22      	ldr	r3, [pc, #136]	; (8001d28 <HAL_RCC_ClockConfig+0x1b8>)
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca6:	4b20      	ldr	r3, [pc, #128]	; (8001d28 <HAL_RCC_ClockConfig+0x1b8>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d001      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e032      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d008      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cc4:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	4916      	ldr	r1, [pc, #88]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d009      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ce2:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	490e      	ldr	r1, [pc, #56]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cf6:	f000 f821 	bl	8001d3c <HAL_RCC_GetSysClockFreq>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <HAL_RCC_ClockConfig+0x1bc>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	091b      	lsrs	r3, r3, #4
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	490a      	ldr	r1, [pc, #40]	; (8001d30 <HAL_RCC_ClockConfig+0x1c0>)
 8001d08:	5ccb      	ldrb	r3, [r1, r3]
 8001d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d0e:	4a09      	ldr	r2, [pc, #36]	; (8001d34 <HAL_RCC_ClockConfig+0x1c4>)
 8001d10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <HAL_RCC_ClockConfig+0x1c8>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe ffc0 	bl	8000c9c <HAL_InitTick>

  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40023c00 	.word	0x40023c00
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	08007488 	.word	0x08007488
 8001d34:	20000000 	.word	0x20000000
 8001d38:	20000004 	.word	0x20000004

08001d3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d3c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d40:	b084      	sub	sp, #16
 8001d42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	607b      	str	r3, [r7, #4]
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d54:	4b67      	ldr	r3, [pc, #412]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f003 030c 	and.w	r3, r3, #12
 8001d5c:	2b08      	cmp	r3, #8
 8001d5e:	d00d      	beq.n	8001d7c <HAL_RCC_GetSysClockFreq+0x40>
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	f200 80bd 	bhi.w	8001ee0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d002      	beq.n	8001d70 <HAL_RCC_GetSysClockFreq+0x34>
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	d003      	beq.n	8001d76 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d6e:	e0b7      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d70:	4b61      	ldr	r3, [pc, #388]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001d72:	60bb      	str	r3, [r7, #8]
       break;
 8001d74:	e0b7      	b.n	8001ee6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d76:	4b61      	ldr	r3, [pc, #388]	; (8001efc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001d78:	60bb      	str	r3, [r7, #8]
      break;
 8001d7a:	e0b4      	b.n	8001ee6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d7c:	4b5d      	ldr	r3, [pc, #372]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d84:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d86:	4b5b      	ldr	r3, [pc, #364]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d04d      	beq.n	8001e2e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d92:	4b58      	ldr	r3, [pc, #352]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	099b      	lsrs	r3, r3, #6
 8001d98:	461a      	mov	r2, r3
 8001d9a:	f04f 0300 	mov.w	r3, #0
 8001d9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001da2:	f04f 0100 	mov.w	r1, #0
 8001da6:	ea02 0800 	and.w	r8, r2, r0
 8001daa:	ea03 0901 	and.w	r9, r3, r1
 8001dae:	4640      	mov	r0, r8
 8001db0:	4649      	mov	r1, r9
 8001db2:	f04f 0200 	mov.w	r2, #0
 8001db6:	f04f 0300 	mov.w	r3, #0
 8001dba:	014b      	lsls	r3, r1, #5
 8001dbc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001dc0:	0142      	lsls	r2, r0, #5
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	ebb0 0008 	subs.w	r0, r0, r8
 8001dca:	eb61 0109 	sbc.w	r1, r1, r9
 8001dce:	f04f 0200 	mov.w	r2, #0
 8001dd2:	f04f 0300 	mov.w	r3, #0
 8001dd6:	018b      	lsls	r3, r1, #6
 8001dd8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ddc:	0182      	lsls	r2, r0, #6
 8001dde:	1a12      	subs	r2, r2, r0
 8001de0:	eb63 0301 	sbc.w	r3, r3, r1
 8001de4:	f04f 0000 	mov.w	r0, #0
 8001de8:	f04f 0100 	mov.w	r1, #0
 8001dec:	00d9      	lsls	r1, r3, #3
 8001dee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001df2:	00d0      	lsls	r0, r2, #3
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	eb12 0208 	adds.w	r2, r2, r8
 8001dfc:	eb43 0309 	adc.w	r3, r3, r9
 8001e00:	f04f 0000 	mov.w	r0, #0
 8001e04:	f04f 0100 	mov.w	r1, #0
 8001e08:	0259      	lsls	r1, r3, #9
 8001e0a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001e0e:	0250      	lsls	r0, r2, #9
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4610      	mov	r0, r2
 8001e16:	4619      	mov	r1, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	f04f 0300 	mov.w	r3, #0
 8001e20:	f7fe fa2e 	bl	8000280 <__aeabi_uldivmod>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4613      	mov	r3, r2
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	e04a      	b.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e2e:	4b31      	ldr	r3, [pc, #196]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	099b      	lsrs	r3, r3, #6
 8001e34:	461a      	mov	r2, r3
 8001e36:	f04f 0300 	mov.w	r3, #0
 8001e3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e3e:	f04f 0100 	mov.w	r1, #0
 8001e42:	ea02 0400 	and.w	r4, r2, r0
 8001e46:	ea03 0501 	and.w	r5, r3, r1
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	4629      	mov	r1, r5
 8001e4e:	f04f 0200 	mov.w	r2, #0
 8001e52:	f04f 0300 	mov.w	r3, #0
 8001e56:	014b      	lsls	r3, r1, #5
 8001e58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e5c:	0142      	lsls	r2, r0, #5
 8001e5e:	4610      	mov	r0, r2
 8001e60:	4619      	mov	r1, r3
 8001e62:	1b00      	subs	r0, r0, r4
 8001e64:	eb61 0105 	sbc.w	r1, r1, r5
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	f04f 0300 	mov.w	r3, #0
 8001e70:	018b      	lsls	r3, r1, #6
 8001e72:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e76:	0182      	lsls	r2, r0, #6
 8001e78:	1a12      	subs	r2, r2, r0
 8001e7a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e7e:	f04f 0000 	mov.w	r0, #0
 8001e82:	f04f 0100 	mov.w	r1, #0
 8001e86:	00d9      	lsls	r1, r3, #3
 8001e88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e8c:	00d0      	lsls	r0, r2, #3
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	1912      	adds	r2, r2, r4
 8001e94:	eb45 0303 	adc.w	r3, r5, r3
 8001e98:	f04f 0000 	mov.w	r0, #0
 8001e9c:	f04f 0100 	mov.w	r1, #0
 8001ea0:	0299      	lsls	r1, r3, #10
 8001ea2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ea6:	0290      	lsls	r0, r2, #10
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4610      	mov	r0, r2
 8001eae:	4619      	mov	r1, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	f04f 0300 	mov.w	r3, #0
 8001eb8:	f7fe f9e2 	bl	8000280 <__aeabi_uldivmod>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	0c1b      	lsrs	r3, r3, #16
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	3301      	adds	r3, #1
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001edc:	60bb      	str	r3, [r7, #8]
      break;
 8001ede:	e002      	b.n	8001ee6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ee0:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001ee2:	60bb      	str	r3, [r7, #8]
      break;
 8001ee4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ee6:	68bb      	ldr	r3, [r7, #8]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	00f42400 	.word	0x00f42400
 8001efc:	007a1200 	.word	0x007a1200

08001f00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f04:	4b03      	ldr	r3, [pc, #12]	; (8001f14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f06:	681b      	ldr	r3, [r3, #0]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	20000000 	.word	0x20000000

08001f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f1c:	f7ff fff0 	bl	8001f00 <HAL_RCC_GetHCLKFreq>
 8001f20:	4602      	mov	r2, r0
 8001f22:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	0a9b      	lsrs	r3, r3, #10
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	4903      	ldr	r1, [pc, #12]	; (8001f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f2e:	5ccb      	ldrb	r3, [r1, r3]
 8001f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	08007498 	.word	0x08007498

08001f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f44:	f7ff ffdc 	bl	8001f00 <HAL_RCC_GetHCLKFreq>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	0b5b      	lsrs	r3, r3, #13
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	4903      	ldr	r1, [pc, #12]	; (8001f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f56:	5ccb      	ldrb	r3, [r1, r3]
 8001f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40023800 	.word	0x40023800
 8001f64:	08007498 	.word	0x08007498

08001f68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	220f      	movs	r2, #15
 8001f76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f78:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 0203 	and.w	r2, r3, #3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f84:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f90:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f9c:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	08db      	lsrs	r3, r3, #3
 8001fa2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001faa:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <HAL_RCC_GetClockConfig+0x60>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0207 	and.w	r2, r3, #7
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	601a      	str	r2, [r3, #0]
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40023c00 	.word	0x40023c00

08001fcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e041      	b.n	8002062 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d106      	bne.n	8001ff8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f839 	bl	800206a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3304      	adds	r3, #4
 8002008:	4619      	mov	r1, r3
 800200a:	4610      	mov	r0, r2
 800200c:	f000 f9d8 	bl	80023c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
	...

08002080 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b01      	cmp	r3, #1
 8002092:	d001      	beq.n	8002098 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e04e      	b.n	8002136 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2202      	movs	r2, #2
 800209c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f042 0201 	orr.w	r2, r2, #1
 80020ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a23      	ldr	r2, [pc, #140]	; (8002144 <HAL_TIM_Base_Start_IT+0xc4>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d022      	beq.n	8002100 <HAL_TIM_Base_Start_IT+0x80>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c2:	d01d      	beq.n	8002100 <HAL_TIM_Base_Start_IT+0x80>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a1f      	ldr	r2, [pc, #124]	; (8002148 <HAL_TIM_Base_Start_IT+0xc8>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d018      	beq.n	8002100 <HAL_TIM_Base_Start_IT+0x80>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a1e      	ldr	r2, [pc, #120]	; (800214c <HAL_TIM_Base_Start_IT+0xcc>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d013      	beq.n	8002100 <HAL_TIM_Base_Start_IT+0x80>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a1c      	ldr	r2, [pc, #112]	; (8002150 <HAL_TIM_Base_Start_IT+0xd0>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d00e      	beq.n	8002100 <HAL_TIM_Base_Start_IT+0x80>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a1b      	ldr	r2, [pc, #108]	; (8002154 <HAL_TIM_Base_Start_IT+0xd4>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d009      	beq.n	8002100 <HAL_TIM_Base_Start_IT+0x80>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a19      	ldr	r2, [pc, #100]	; (8002158 <HAL_TIM_Base_Start_IT+0xd8>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d004      	beq.n	8002100 <HAL_TIM_Base_Start_IT+0x80>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a18      	ldr	r2, [pc, #96]	; (800215c <HAL_TIM_Base_Start_IT+0xdc>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d111      	bne.n	8002124 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2b06      	cmp	r3, #6
 8002110:	d010      	beq.n	8002134 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f042 0201 	orr.w	r2, r2, #1
 8002120:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002122:	e007      	b.n	8002134 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0201 	orr.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40010000 	.word	0x40010000
 8002148:	40000400 	.word	0x40000400
 800214c:	40000800 	.word	0x40000800
 8002150:	40000c00 	.word	0x40000c00
 8002154:	40010400 	.word	0x40010400
 8002158:	40014000 	.word	0x40014000
 800215c:	40001800 	.word	0x40001800

08002160 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b02      	cmp	r3, #2
 8002174:	d122      	bne.n	80021bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b02      	cmp	r3, #2
 8002182:	d11b      	bne.n	80021bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f06f 0202 	mvn.w	r2, #2
 800218c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f8ee 	bl	8002384 <HAL_TIM_IC_CaptureCallback>
 80021a8:	e005      	b.n	80021b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f8e0 	bl	8002370 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 f8f1 	bl	8002398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	f003 0304 	and.w	r3, r3, #4
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d122      	bne.n	8002210 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d11b      	bne.n	8002210 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f06f 0204 	mvn.w	r2, #4
 80021e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2202      	movs	r2, #2
 80021e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 f8c4 	bl	8002384 <HAL_TIM_IC_CaptureCallback>
 80021fc:	e005      	b.n	800220a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f8b6 	bl	8002370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 f8c7 	bl	8002398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	2b08      	cmp	r3, #8
 800221c:	d122      	bne.n	8002264 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f003 0308 	and.w	r3, r3, #8
 8002228:	2b08      	cmp	r3, #8
 800222a:	d11b      	bne.n	8002264 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f06f 0208 	mvn.w	r2, #8
 8002234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2204      	movs	r2, #4
 800223a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f89a 	bl	8002384 <HAL_TIM_IC_CaptureCallback>
 8002250:	e005      	b.n	800225e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f88c 	bl	8002370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 f89d 	bl	8002398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	f003 0310 	and.w	r3, r3, #16
 800226e:	2b10      	cmp	r3, #16
 8002270:	d122      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f003 0310 	and.w	r3, r3, #16
 800227c:	2b10      	cmp	r3, #16
 800227e:	d11b      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f06f 0210 	mvn.w	r2, #16
 8002288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2208      	movs	r2, #8
 800228e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f870 	bl	8002384 <HAL_TIM_IC_CaptureCallback>
 80022a4:	e005      	b.n	80022b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f862 	bl	8002370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 f873 	bl	8002398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d10e      	bne.n	80022e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d107      	bne.n	80022e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f06f 0201 	mvn.w	r2, #1
 80022dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7fe fc4c 	bl	8000b7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ee:	2b80      	cmp	r3, #128	; 0x80
 80022f0:	d10e      	bne.n	8002310 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022fc:	2b80      	cmp	r3, #128	; 0x80
 80022fe:	d107      	bne.n	8002310 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f902 	bl	8002514 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800231a:	2b40      	cmp	r3, #64	; 0x40
 800231c:	d10e      	bne.n	800233c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002328:	2b40      	cmp	r3, #64	; 0x40
 800232a:	d107      	bne.n	800233c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f838 	bl	80023ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	f003 0320 	and.w	r3, r3, #32
 8002346:	2b20      	cmp	r3, #32
 8002348:	d10e      	bne.n	8002368 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	f003 0320 	and.w	r3, r3, #32
 8002354:	2b20      	cmp	r3, #32
 8002356:	d107      	bne.n	8002368 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f06f 0220 	mvn.w	r2, #32
 8002360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f8cc 	bl	8002500 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002368:	bf00      	nop
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a40      	ldr	r2, [pc, #256]	; (80024d4 <TIM_Base_SetConfig+0x114>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d013      	beq.n	8002400 <TIM_Base_SetConfig+0x40>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023de:	d00f      	beq.n	8002400 <TIM_Base_SetConfig+0x40>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a3d      	ldr	r2, [pc, #244]	; (80024d8 <TIM_Base_SetConfig+0x118>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d00b      	beq.n	8002400 <TIM_Base_SetConfig+0x40>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a3c      	ldr	r2, [pc, #240]	; (80024dc <TIM_Base_SetConfig+0x11c>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d007      	beq.n	8002400 <TIM_Base_SetConfig+0x40>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a3b      	ldr	r2, [pc, #236]	; (80024e0 <TIM_Base_SetConfig+0x120>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d003      	beq.n	8002400 <TIM_Base_SetConfig+0x40>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a3a      	ldr	r2, [pc, #232]	; (80024e4 <TIM_Base_SetConfig+0x124>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d108      	bne.n	8002412 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002406:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	4313      	orrs	r3, r2
 8002410:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a2f      	ldr	r2, [pc, #188]	; (80024d4 <TIM_Base_SetConfig+0x114>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d02b      	beq.n	8002472 <TIM_Base_SetConfig+0xb2>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002420:	d027      	beq.n	8002472 <TIM_Base_SetConfig+0xb2>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a2c      	ldr	r2, [pc, #176]	; (80024d8 <TIM_Base_SetConfig+0x118>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d023      	beq.n	8002472 <TIM_Base_SetConfig+0xb2>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a2b      	ldr	r2, [pc, #172]	; (80024dc <TIM_Base_SetConfig+0x11c>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d01f      	beq.n	8002472 <TIM_Base_SetConfig+0xb2>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a2a      	ldr	r2, [pc, #168]	; (80024e0 <TIM_Base_SetConfig+0x120>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d01b      	beq.n	8002472 <TIM_Base_SetConfig+0xb2>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a29      	ldr	r2, [pc, #164]	; (80024e4 <TIM_Base_SetConfig+0x124>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d017      	beq.n	8002472 <TIM_Base_SetConfig+0xb2>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a28      	ldr	r2, [pc, #160]	; (80024e8 <TIM_Base_SetConfig+0x128>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d013      	beq.n	8002472 <TIM_Base_SetConfig+0xb2>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a27      	ldr	r2, [pc, #156]	; (80024ec <TIM_Base_SetConfig+0x12c>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d00f      	beq.n	8002472 <TIM_Base_SetConfig+0xb2>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a26      	ldr	r2, [pc, #152]	; (80024f0 <TIM_Base_SetConfig+0x130>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d00b      	beq.n	8002472 <TIM_Base_SetConfig+0xb2>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a25      	ldr	r2, [pc, #148]	; (80024f4 <TIM_Base_SetConfig+0x134>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d007      	beq.n	8002472 <TIM_Base_SetConfig+0xb2>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a24      	ldr	r2, [pc, #144]	; (80024f8 <TIM_Base_SetConfig+0x138>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d003      	beq.n	8002472 <TIM_Base_SetConfig+0xb2>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a23      	ldr	r2, [pc, #140]	; (80024fc <TIM_Base_SetConfig+0x13c>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d108      	bne.n	8002484 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002478:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	4313      	orrs	r3, r2
 8002482:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	4313      	orrs	r3, r2
 8002490:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a0a      	ldr	r2, [pc, #40]	; (80024d4 <TIM_Base_SetConfig+0x114>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d003      	beq.n	80024b8 <TIM_Base_SetConfig+0xf8>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a0c      	ldr	r2, [pc, #48]	; (80024e4 <TIM_Base_SetConfig+0x124>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d103      	bne.n	80024c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	691a      	ldr	r2, [r3, #16]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	615a      	str	r2, [r3, #20]
}
 80024c6:	bf00      	nop
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	40010000 	.word	0x40010000
 80024d8:	40000400 	.word	0x40000400
 80024dc:	40000800 	.word	0x40000800
 80024e0:	40000c00 	.word	0x40000c00
 80024e4:	40010400 	.word	0x40010400
 80024e8:	40014000 	.word	0x40014000
 80024ec:	40014400 	.word	0x40014400
 80024f0:	40014800 	.word	0x40014800
 80024f4:	40001800 	.word	0x40001800
 80024f8:	40001c00 	.word	0x40001c00
 80024fc:	40002000 	.word	0x40002000

08002500 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e03f      	b.n	80025ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d106      	bne.n	8002554 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7fe fb54 	bl	8000bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2224      	movs	r2, #36	; 0x24
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800256a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 fd7b 	bl	8003068 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	691a      	ldr	r2, [r3, #16]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002580:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	695a      	ldr	r2, [r3, #20]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002590:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68da      	ldr	r2, [r3, #12]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2220      	movs	r2, #32
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2220      	movs	r2, #32
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b08a      	sub	sp, #40	; 0x28
 80025c6:	af02      	add	r7, sp, #8
 80025c8:	60f8      	str	r0, [r7, #12]
 80025ca:	60b9      	str	r1, [r7, #8]
 80025cc:	603b      	str	r3, [r7, #0]
 80025ce:	4613      	mov	r3, r2
 80025d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b20      	cmp	r3, #32
 80025e0:	d17c      	bne.n	80026dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d002      	beq.n	80025ee <HAL_UART_Transmit+0x2c>
 80025e8:	88fb      	ldrh	r3, [r7, #6]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e075      	b.n	80026de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d101      	bne.n	8002600 <HAL_UART_Transmit+0x3e>
 80025fc:	2302      	movs	r3, #2
 80025fe:	e06e      	b.n	80026de <HAL_UART_Transmit+0x11c>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2221      	movs	r2, #33	; 0x21
 8002612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002616:	f7fe fcfd 	bl	8001014 <HAL_GetTick>
 800261a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	88fa      	ldrh	r2, [r7, #6]
 8002620:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	88fa      	ldrh	r2, [r7, #6]
 8002626:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002630:	d108      	bne.n	8002644 <HAL_UART_Transmit+0x82>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d104      	bne.n	8002644 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800263a:	2300      	movs	r3, #0
 800263c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	61bb      	str	r3, [r7, #24]
 8002642:	e003      	b.n	800264c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002648:	2300      	movs	r3, #0
 800264a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002654:	e02a      	b.n	80026ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	2200      	movs	r2, #0
 800265e:	2180      	movs	r1, #128	; 0x80
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f000 faf9 	bl	8002c58 <UART_WaitOnFlagUntilTimeout>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e036      	b.n	80026de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10b      	bne.n	800268e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	461a      	mov	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002684:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	3302      	adds	r3, #2
 800268a:	61bb      	str	r3, [r7, #24]
 800268c:	e007      	b.n	800269e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	781a      	ldrb	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	3301      	adds	r3, #1
 800269c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1cf      	bne.n	8002656 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	2200      	movs	r2, #0
 80026be:	2140      	movs	r1, #64	; 0x40
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 fac9 	bl	8002c58 <UART_WaitOnFlagUntilTimeout>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e006      	b.n	80026de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2220      	movs	r2, #32
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80026d8:	2300      	movs	r3, #0
 80026da:	e000      	b.n	80026de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80026dc:	2302      	movs	r3, #2
  }
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3720      	adds	r7, #32
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b0ba      	sub	sp, #232	; 0xe8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800270e:	2300      	movs	r3, #0
 8002710:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002714:	2300      	movs	r3, #0
 8002716:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800271a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002726:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10f      	bne.n	800274e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800272e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002732:	f003 0320 	and.w	r3, r3, #32
 8002736:	2b00      	cmp	r3, #0
 8002738:	d009      	beq.n	800274e <HAL_UART_IRQHandler+0x66>
 800273a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800273e:	f003 0320 	and.w	r3, r3, #32
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 fbd3 	bl	8002ef2 <UART_Receive_IT>
      return;
 800274c:	e256      	b.n	8002bfc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800274e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 80de 	beq.w	8002914 <HAL_UART_IRQHandler+0x22c>
 8002758:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b00      	cmp	r3, #0
 8002762:	d106      	bne.n	8002772 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002768:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 80d1 	beq.w	8002914 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00b      	beq.n	8002796 <HAL_UART_IRQHandler+0xae>
 800277e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002786:	2b00      	cmp	r3, #0
 8002788:	d005      	beq.n	8002796 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f043 0201 	orr.w	r2, r3, #1
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00b      	beq.n	80027ba <HAL_UART_IRQHandler+0xd2>
 80027a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d005      	beq.n	80027ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	f043 0202 	orr.w	r2, r3, #2
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00b      	beq.n	80027de <HAL_UART_IRQHandler+0xf6>
 80027c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d005      	beq.n	80027de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	f043 0204 	orr.w	r2, r3, #4
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80027de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d011      	beq.n	800280e <HAL_UART_IRQHandler+0x126>
 80027ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027ee:	f003 0320 	and.w	r3, r3, #32
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d105      	bne.n	8002802 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80027f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d005      	beq.n	800280e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	f043 0208 	orr.w	r2, r3, #8
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 81ed 	beq.w	8002bf2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800281c:	f003 0320 	and.w	r3, r3, #32
 8002820:	2b00      	cmp	r3, #0
 8002822:	d008      	beq.n	8002836 <HAL_UART_IRQHandler+0x14e>
 8002824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002828:	f003 0320 	and.w	r3, r3, #32
 800282c:	2b00      	cmp	r3, #0
 800282e:	d002      	beq.n	8002836 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 fb5e 	bl	8002ef2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002840:	2b40      	cmp	r3, #64	; 0x40
 8002842:	bf0c      	ite	eq
 8002844:	2301      	moveq	r3, #1
 8002846:	2300      	movne	r3, #0
 8002848:	b2db      	uxtb	r3, r3
 800284a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	2b00      	cmp	r3, #0
 8002858:	d103      	bne.n	8002862 <HAL_UART_IRQHandler+0x17a>
 800285a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800285e:	2b00      	cmp	r3, #0
 8002860:	d04f      	beq.n	8002902 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 fa66 	bl	8002d34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002872:	2b40      	cmp	r3, #64	; 0x40
 8002874:	d141      	bne.n	80028fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	3314      	adds	r3, #20
 800287c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002880:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002884:	e853 3f00 	ldrex	r3, [r3]
 8002888:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800288c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002890:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002894:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	3314      	adds	r3, #20
 800289e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80028a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80028a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80028ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80028b2:	e841 2300 	strex	r3, r2, [r1]
 80028b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80028ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1d9      	bne.n	8002876 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d013      	beq.n	80028f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ce:	4a7d      	ldr	r2, [pc, #500]	; (8002ac4 <HAL_UART_IRQHandler+0x3dc>)
 80028d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fe fcfa 	bl	80012d0 <HAL_DMA_Abort_IT>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d016      	beq.n	8002910 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028ec:	4610      	mov	r0, r2
 80028ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028f0:	e00e      	b.n	8002910 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f99a 	bl	8002c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028f8:	e00a      	b.n	8002910 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f996 	bl	8002c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002900:	e006      	b.n	8002910 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f992 	bl	8002c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800290e:	e170      	b.n	8002bf2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002910:	bf00      	nop
    return;
 8002912:	e16e      	b.n	8002bf2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	2b01      	cmp	r3, #1
 800291a:	f040 814a 	bne.w	8002bb2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800291e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002922:	f003 0310 	and.w	r3, r3, #16
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 8143 	beq.w	8002bb2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800292c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002930:	f003 0310 	and.w	r3, r3, #16
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 813c 	beq.w	8002bb2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800293a:	2300      	movs	r3, #0
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	60bb      	str	r3, [r7, #8]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800295a:	2b40      	cmp	r3, #64	; 0x40
 800295c:	f040 80b4 	bne.w	8002ac8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800296c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 8140 	beq.w	8002bf6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800297a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800297e:	429a      	cmp	r2, r3
 8002980:	f080 8139 	bcs.w	8002bf6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800298a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002996:	f000 8088 	beq.w	8002aaa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	330c      	adds	r3, #12
 80029a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029a8:	e853 3f00 	ldrex	r3, [r3]
 80029ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80029b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	330c      	adds	r3, #12
 80029c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80029c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80029ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80029d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80029d6:	e841 2300 	strex	r3, r2, [r1]
 80029da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80029de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1d9      	bne.n	800299a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	3314      	adds	r3, #20
 80029ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029f0:	e853 3f00 	ldrex	r3, [r3]
 80029f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80029f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029f8:	f023 0301 	bic.w	r3, r3, #1
 80029fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	3314      	adds	r3, #20
 8002a06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a0a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002a0e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a10:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002a12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a16:	e841 2300 	strex	r3, r2, [r1]
 8002a1a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002a1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1e1      	bne.n	80029e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	3314      	adds	r3, #20
 8002a28:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a2c:	e853 3f00 	ldrex	r3, [r3]
 8002a30:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002a32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	3314      	adds	r3, #20
 8002a42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002a46:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a48:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a4a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002a4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a4e:	e841 2300 	strex	r3, r2, [r1]
 8002a52:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002a54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1e3      	bne.n	8002a22 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	330c      	adds	r3, #12
 8002a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a72:	e853 3f00 	ldrex	r3, [r3]
 8002a76:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a7a:	f023 0310 	bic.w	r3, r3, #16
 8002a7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	330c      	adds	r3, #12
 8002a88:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002a8c:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a8e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a94:	e841 2300 	strex	r3, r2, [r1]
 8002a98:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002a9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1e3      	bne.n	8002a68 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fe fba3 	bl	80011f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	4619      	mov	r1, r3
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f8c0 	bl	8002c40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ac0:	e099      	b.n	8002bf6 <HAL_UART_IRQHandler+0x50e>
 8002ac2:	bf00      	nop
 8002ac4:	08002dfb 	.word	0x08002dfb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 808b 	beq.w	8002bfa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002ae4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 8086 	beq.w	8002bfa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	330c      	adds	r3, #12
 8002af4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af8:	e853 3f00 	ldrex	r3, [r3]
 8002afc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	330c      	adds	r3, #12
 8002b0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002b12:	647a      	str	r2, [r7, #68]	; 0x44
 8002b14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b1a:	e841 2300 	strex	r3, r2, [r1]
 8002b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1e3      	bne.n	8002aee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	3314      	adds	r3, #20
 8002b2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	e853 3f00 	ldrex	r3, [r3]
 8002b34:	623b      	str	r3, [r7, #32]
   return(result);
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	f023 0301 	bic.w	r3, r3, #1
 8002b3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	3314      	adds	r3, #20
 8002b46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002b4a:	633a      	str	r2, [r7, #48]	; 0x30
 8002b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b52:	e841 2300 	strex	r3, r2, [r1]
 8002b56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1e3      	bne.n	8002b26 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2220      	movs	r2, #32
 8002b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	330c      	adds	r3, #12
 8002b72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	e853 3f00 	ldrex	r3, [r3]
 8002b7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f023 0310 	bic.w	r3, r3, #16
 8002b82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	330c      	adds	r3, #12
 8002b8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002b90:	61fa      	str	r2, [r7, #28]
 8002b92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b94:	69b9      	ldr	r1, [r7, #24]
 8002b96:	69fa      	ldr	r2, [r7, #28]
 8002b98:	e841 2300 	strex	r3, r2, [r1]
 8002b9c:	617b      	str	r3, [r7, #20]
   return(result);
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1e3      	bne.n	8002b6c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ba4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ba8:	4619      	mov	r1, r3
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f848 	bl	8002c40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002bb0:	e023      	b.n	8002bfa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d009      	beq.n	8002bd2 <HAL_UART_IRQHandler+0x4ea>
 8002bbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f929 	bl	8002e22 <UART_Transmit_IT>
    return;
 8002bd0:	e014      	b.n	8002bfc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00e      	beq.n	8002bfc <HAL_UART_IRQHandler+0x514>
 8002bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d008      	beq.n	8002bfc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f969 	bl	8002ec2 <UART_EndTransmit_IT>
    return;
 8002bf0:	e004      	b.n	8002bfc <HAL_UART_IRQHandler+0x514>
    return;
 8002bf2:	bf00      	nop
 8002bf4:	e002      	b.n	8002bfc <HAL_UART_IRQHandler+0x514>
      return;
 8002bf6:	bf00      	nop
 8002bf8:	e000      	b.n	8002bfc <HAL_UART_IRQHandler+0x514>
      return;
 8002bfa:	bf00      	nop
  }
}
 8002bfc:	37e8      	adds	r7, #232	; 0xe8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop

08002c04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b090      	sub	sp, #64	; 0x40
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	603b      	str	r3, [r7, #0]
 8002c64:	4613      	mov	r3, r2
 8002c66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c68:	e050      	b.n	8002d0c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c70:	d04c      	beq.n	8002d0c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d007      	beq.n	8002c88 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c78:	f7fe f9cc 	bl	8001014 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d241      	bcs.n	8002d0c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	330c      	adds	r3, #12
 8002c8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c92:	e853 3f00 	ldrex	r3, [r3]
 8002c96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	330c      	adds	r3, #12
 8002ca6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ca8:	637a      	str	r2, [r7, #52]	; 0x34
 8002caa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002cae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cb0:	e841 2300 	strex	r3, r2, [r1]
 8002cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1e5      	bne.n	8002c88 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	3314      	adds	r3, #20
 8002cc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	e853 3f00 	ldrex	r3, [r3]
 8002cca:	613b      	str	r3, [r7, #16]
   return(result);
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	f023 0301 	bic.w	r3, r3, #1
 8002cd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	3314      	adds	r3, #20
 8002cda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cdc:	623a      	str	r2, [r7, #32]
 8002cde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce0:	69f9      	ldr	r1, [r7, #28]
 8002ce2:	6a3a      	ldr	r2, [r7, #32]
 8002ce4:	e841 2300 	strex	r3, r2, [r1]
 8002ce8:	61bb      	str	r3, [r7, #24]
   return(result);
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1e5      	bne.n	8002cbc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e00f      	b.n	8002d2c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	4013      	ands	r3, r2
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	bf0c      	ite	eq
 8002d1c:	2301      	moveq	r3, #1
 8002d1e:	2300      	movne	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	461a      	mov	r2, r3
 8002d24:	79fb      	ldrb	r3, [r7, #7]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d09f      	beq.n	8002c6a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3740      	adds	r7, #64	; 0x40
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b095      	sub	sp, #84	; 0x54
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	330c      	adds	r3, #12
 8002d42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d46:	e853 3f00 	ldrex	r3, [r3]
 8002d4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	330c      	adds	r3, #12
 8002d5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d5c:	643a      	str	r2, [r7, #64]	; 0x40
 8002d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d64:	e841 2300 	strex	r3, r2, [r1]
 8002d68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1e5      	bne.n	8002d3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	3314      	adds	r3, #20
 8002d76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	e853 3f00 	ldrex	r3, [r3]
 8002d7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	f023 0301 	bic.w	r3, r3, #1
 8002d86:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	3314      	adds	r3, #20
 8002d8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d98:	e841 2300 	strex	r3, r2, [r1]
 8002d9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1e5      	bne.n	8002d70 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d119      	bne.n	8002de0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	330c      	adds	r3, #12
 8002db2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	e853 3f00 	ldrex	r3, [r3]
 8002dba:	60bb      	str	r3, [r7, #8]
   return(result);
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	f023 0310 	bic.w	r3, r3, #16
 8002dc2:	647b      	str	r3, [r7, #68]	; 0x44
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	330c      	adds	r3, #12
 8002dca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002dcc:	61ba      	str	r2, [r7, #24]
 8002dce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd0:	6979      	ldr	r1, [r7, #20]
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	e841 2300 	strex	r3, r2, [r1]
 8002dd8:	613b      	str	r3, [r7, #16]
   return(result);
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1e5      	bne.n	8002dac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2220      	movs	r2, #32
 8002de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002dee:	bf00      	nop
 8002df0:	3754      	adds	r7, #84	; 0x54
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b084      	sub	sp, #16
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f7ff ff09 	bl	8002c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e1a:	bf00      	nop
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b085      	sub	sp, #20
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b21      	cmp	r3, #33	; 0x21
 8002e34:	d13e      	bne.n	8002eb4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e3e:	d114      	bne.n	8002e6a <UART_Transmit_IT+0x48>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d110      	bne.n	8002e6a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	461a      	mov	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e5c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	1c9a      	adds	r2, r3, #2
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	621a      	str	r2, [r3, #32]
 8002e68:	e008      	b.n	8002e7c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	1c59      	adds	r1, r3, #1
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6211      	str	r1, [r2, #32]
 8002e74:	781a      	ldrb	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	3b01      	subs	r3, #1
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	4619      	mov	r1, r3
 8002e8a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10f      	bne.n	8002eb0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68da      	ldr	r2, [r3, #12]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e9e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	e000      	b.n	8002eb6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002eb4:	2302      	movs	r3, #2
  }
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b082      	sub	sp, #8
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ed8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2220      	movs	r2, #32
 8002ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7ff fe8e 	bl	8002c04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b08c      	sub	sp, #48	; 0x30
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b22      	cmp	r3, #34	; 0x22
 8002f04:	f040 80ab 	bne.w	800305e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f10:	d117      	bne.n	8002f42 <UART_Receive_IT+0x50>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d113      	bne.n	8002f42 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f22:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f34:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3a:	1c9a      	adds	r2, r3, #2
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	629a      	str	r2, [r3, #40]	; 0x28
 8002f40:	e026      	b.n	8002f90 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f46:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f54:	d007      	beq.n	8002f66 <UART_Receive_IT+0x74>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10a      	bne.n	8002f74 <UART_Receive_IT+0x82>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d106      	bne.n	8002f74 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f70:	701a      	strb	r2, [r3, #0]
 8002f72:	e008      	b.n	8002f86 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f84:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8a:	1c5a      	adds	r2, r3, #1
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	3b01      	subs	r3, #1
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d15a      	bne.n	800305a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0220 	bic.w	r2, r2, #32
 8002fb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fc2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	695a      	ldr	r2, [r3, #20]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0201 	bic.w	r2, r2, #1
 8002fd2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d135      	bne.n	8003050 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	330c      	adds	r3, #12
 8002ff0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	e853 3f00 	ldrex	r3, [r3]
 8002ff8:	613b      	str	r3, [r7, #16]
   return(result);
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	f023 0310 	bic.w	r3, r3, #16
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	330c      	adds	r3, #12
 8003008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800300a:	623a      	str	r2, [r7, #32]
 800300c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800300e:	69f9      	ldr	r1, [r7, #28]
 8003010:	6a3a      	ldr	r2, [r7, #32]
 8003012:	e841 2300 	strex	r3, r2, [r1]
 8003016:	61bb      	str	r3, [r7, #24]
   return(result);
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1e5      	bne.n	8002fea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0310 	and.w	r3, r3, #16
 8003028:	2b10      	cmp	r3, #16
 800302a:	d10a      	bne.n	8003042 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800302c:	2300      	movs	r3, #0
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003046:	4619      	mov	r1, r3
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f7ff fdf9 	bl	8002c40 <HAL_UARTEx_RxEventCallback>
 800304e:	e002      	b.n	8003056 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7ff fde1 	bl	8002c18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003056:	2300      	movs	r3, #0
 8003058:	e002      	b.n	8003060 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800305a:	2300      	movs	r3, #0
 800305c:	e000      	b.n	8003060 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800305e:	2302      	movs	r3, #2
  }
}
 8003060:	4618      	mov	r0, r3
 8003062:	3730      	adds	r7, #48	; 0x30
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800306c:	b09f      	sub	sp, #124	; 0x7c
 800306e:	af00      	add	r7, sp, #0
 8003070:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800307c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800307e:	68d9      	ldr	r1, [r3, #12]
 8003080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	ea40 0301 	orr.w	r3, r0, r1
 8003088:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800308a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800308c:	689a      	ldr	r2, [r3, #8]
 800308e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	431a      	orrs	r2, r3
 8003094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	431a      	orrs	r2, r3
 800309a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	4313      	orrs	r3, r2
 80030a0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80030a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80030ac:	f021 010c 	bic.w	r1, r1, #12
 80030b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030b6:	430b      	orrs	r3, r1
 80030b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80030c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c6:	6999      	ldr	r1, [r3, #24]
 80030c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	ea40 0301 	orr.w	r3, r0, r1
 80030d0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	4bc5      	ldr	r3, [pc, #788]	; (80033ec <UART_SetConfig+0x384>)
 80030d8:	429a      	cmp	r2, r3
 80030da:	d004      	beq.n	80030e6 <UART_SetConfig+0x7e>
 80030dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	4bc3      	ldr	r3, [pc, #780]	; (80033f0 <UART_SetConfig+0x388>)
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d103      	bne.n	80030ee <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030e6:	f7fe ff2b 	bl	8001f40 <HAL_RCC_GetPCLK2Freq>
 80030ea:	6778      	str	r0, [r7, #116]	; 0x74
 80030ec:	e002      	b.n	80030f4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030ee:	f7fe ff13 	bl	8001f18 <HAL_RCC_GetPCLK1Freq>
 80030f2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030fc:	f040 80b6 	bne.w	800326c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003100:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003102:	461c      	mov	r4, r3
 8003104:	f04f 0500 	mov.w	r5, #0
 8003108:	4622      	mov	r2, r4
 800310a:	462b      	mov	r3, r5
 800310c:	1891      	adds	r1, r2, r2
 800310e:	6439      	str	r1, [r7, #64]	; 0x40
 8003110:	415b      	adcs	r3, r3
 8003112:	647b      	str	r3, [r7, #68]	; 0x44
 8003114:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003118:	1912      	adds	r2, r2, r4
 800311a:	eb45 0303 	adc.w	r3, r5, r3
 800311e:	f04f 0000 	mov.w	r0, #0
 8003122:	f04f 0100 	mov.w	r1, #0
 8003126:	00d9      	lsls	r1, r3, #3
 8003128:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800312c:	00d0      	lsls	r0, r2, #3
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	1911      	adds	r1, r2, r4
 8003134:	6639      	str	r1, [r7, #96]	; 0x60
 8003136:	416b      	adcs	r3, r5
 8003138:	667b      	str	r3, [r7, #100]	; 0x64
 800313a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	461a      	mov	r2, r3
 8003140:	f04f 0300 	mov.w	r3, #0
 8003144:	1891      	adds	r1, r2, r2
 8003146:	63b9      	str	r1, [r7, #56]	; 0x38
 8003148:	415b      	adcs	r3, r3
 800314a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800314c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003150:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003154:	f7fd f894 	bl	8000280 <__aeabi_uldivmod>
 8003158:	4602      	mov	r2, r0
 800315a:	460b      	mov	r3, r1
 800315c:	4ba5      	ldr	r3, [pc, #660]	; (80033f4 <UART_SetConfig+0x38c>)
 800315e:	fba3 2302 	umull	r2, r3, r3, r2
 8003162:	095b      	lsrs	r3, r3, #5
 8003164:	011e      	lsls	r6, r3, #4
 8003166:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003168:	461c      	mov	r4, r3
 800316a:	f04f 0500 	mov.w	r5, #0
 800316e:	4622      	mov	r2, r4
 8003170:	462b      	mov	r3, r5
 8003172:	1891      	adds	r1, r2, r2
 8003174:	6339      	str	r1, [r7, #48]	; 0x30
 8003176:	415b      	adcs	r3, r3
 8003178:	637b      	str	r3, [r7, #52]	; 0x34
 800317a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800317e:	1912      	adds	r2, r2, r4
 8003180:	eb45 0303 	adc.w	r3, r5, r3
 8003184:	f04f 0000 	mov.w	r0, #0
 8003188:	f04f 0100 	mov.w	r1, #0
 800318c:	00d9      	lsls	r1, r3, #3
 800318e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003192:	00d0      	lsls	r0, r2, #3
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	1911      	adds	r1, r2, r4
 800319a:	65b9      	str	r1, [r7, #88]	; 0x58
 800319c:	416b      	adcs	r3, r5
 800319e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	461a      	mov	r2, r3
 80031a6:	f04f 0300 	mov.w	r3, #0
 80031aa:	1891      	adds	r1, r2, r2
 80031ac:	62b9      	str	r1, [r7, #40]	; 0x28
 80031ae:	415b      	adcs	r3, r3
 80031b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031b6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80031ba:	f7fd f861 	bl	8000280 <__aeabi_uldivmod>
 80031be:	4602      	mov	r2, r0
 80031c0:	460b      	mov	r3, r1
 80031c2:	4b8c      	ldr	r3, [pc, #560]	; (80033f4 <UART_SetConfig+0x38c>)
 80031c4:	fba3 1302 	umull	r1, r3, r3, r2
 80031c8:	095b      	lsrs	r3, r3, #5
 80031ca:	2164      	movs	r1, #100	; 0x64
 80031cc:	fb01 f303 	mul.w	r3, r1, r3
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	3332      	adds	r3, #50	; 0x32
 80031d6:	4a87      	ldr	r2, [pc, #540]	; (80033f4 <UART_SetConfig+0x38c>)
 80031d8:	fba2 2303 	umull	r2, r3, r2, r3
 80031dc:	095b      	lsrs	r3, r3, #5
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031e4:	441e      	add	r6, r3
 80031e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031e8:	4618      	mov	r0, r3
 80031ea:	f04f 0100 	mov.w	r1, #0
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	1894      	adds	r4, r2, r2
 80031f4:	623c      	str	r4, [r7, #32]
 80031f6:	415b      	adcs	r3, r3
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24
 80031fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031fe:	1812      	adds	r2, r2, r0
 8003200:	eb41 0303 	adc.w	r3, r1, r3
 8003204:	f04f 0400 	mov.w	r4, #0
 8003208:	f04f 0500 	mov.w	r5, #0
 800320c:	00dd      	lsls	r5, r3, #3
 800320e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003212:	00d4      	lsls	r4, r2, #3
 8003214:	4622      	mov	r2, r4
 8003216:	462b      	mov	r3, r5
 8003218:	1814      	adds	r4, r2, r0
 800321a:	653c      	str	r4, [r7, #80]	; 0x50
 800321c:	414b      	adcs	r3, r1
 800321e:	657b      	str	r3, [r7, #84]	; 0x54
 8003220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	461a      	mov	r2, r3
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	1891      	adds	r1, r2, r2
 800322c:	61b9      	str	r1, [r7, #24]
 800322e:	415b      	adcs	r3, r3
 8003230:	61fb      	str	r3, [r7, #28]
 8003232:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003236:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800323a:	f7fd f821 	bl	8000280 <__aeabi_uldivmod>
 800323e:	4602      	mov	r2, r0
 8003240:	460b      	mov	r3, r1
 8003242:	4b6c      	ldr	r3, [pc, #432]	; (80033f4 <UART_SetConfig+0x38c>)
 8003244:	fba3 1302 	umull	r1, r3, r3, r2
 8003248:	095b      	lsrs	r3, r3, #5
 800324a:	2164      	movs	r1, #100	; 0x64
 800324c:	fb01 f303 	mul.w	r3, r1, r3
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	3332      	adds	r3, #50	; 0x32
 8003256:	4a67      	ldr	r2, [pc, #412]	; (80033f4 <UART_SetConfig+0x38c>)
 8003258:	fba2 2303 	umull	r2, r3, r2, r3
 800325c:	095b      	lsrs	r3, r3, #5
 800325e:	f003 0207 	and.w	r2, r3, #7
 8003262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4432      	add	r2, r6
 8003268:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800326a:	e0b9      	b.n	80033e0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800326c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800326e:	461c      	mov	r4, r3
 8003270:	f04f 0500 	mov.w	r5, #0
 8003274:	4622      	mov	r2, r4
 8003276:	462b      	mov	r3, r5
 8003278:	1891      	adds	r1, r2, r2
 800327a:	6139      	str	r1, [r7, #16]
 800327c:	415b      	adcs	r3, r3
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003284:	1912      	adds	r2, r2, r4
 8003286:	eb45 0303 	adc.w	r3, r5, r3
 800328a:	f04f 0000 	mov.w	r0, #0
 800328e:	f04f 0100 	mov.w	r1, #0
 8003292:	00d9      	lsls	r1, r3, #3
 8003294:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003298:	00d0      	lsls	r0, r2, #3
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	eb12 0804 	adds.w	r8, r2, r4
 80032a2:	eb43 0905 	adc.w	r9, r3, r5
 80032a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f04f 0100 	mov.w	r1, #0
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	008b      	lsls	r3, r1, #2
 80032ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80032be:	0082      	lsls	r2, r0, #2
 80032c0:	4640      	mov	r0, r8
 80032c2:	4649      	mov	r1, r9
 80032c4:	f7fc ffdc 	bl	8000280 <__aeabi_uldivmod>
 80032c8:	4602      	mov	r2, r0
 80032ca:	460b      	mov	r3, r1
 80032cc:	4b49      	ldr	r3, [pc, #292]	; (80033f4 <UART_SetConfig+0x38c>)
 80032ce:	fba3 2302 	umull	r2, r3, r3, r2
 80032d2:	095b      	lsrs	r3, r3, #5
 80032d4:	011e      	lsls	r6, r3, #4
 80032d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032d8:	4618      	mov	r0, r3
 80032da:	f04f 0100 	mov.w	r1, #0
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	1894      	adds	r4, r2, r2
 80032e4:	60bc      	str	r4, [r7, #8]
 80032e6:	415b      	adcs	r3, r3
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032ee:	1812      	adds	r2, r2, r0
 80032f0:	eb41 0303 	adc.w	r3, r1, r3
 80032f4:	f04f 0400 	mov.w	r4, #0
 80032f8:	f04f 0500 	mov.w	r5, #0
 80032fc:	00dd      	lsls	r5, r3, #3
 80032fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003302:	00d4      	lsls	r4, r2, #3
 8003304:	4622      	mov	r2, r4
 8003306:	462b      	mov	r3, r5
 8003308:	1814      	adds	r4, r2, r0
 800330a:	64bc      	str	r4, [r7, #72]	; 0x48
 800330c:	414b      	adcs	r3, r1
 800330e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	4618      	mov	r0, r3
 8003316:	f04f 0100 	mov.w	r1, #0
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	f04f 0300 	mov.w	r3, #0
 8003322:	008b      	lsls	r3, r1, #2
 8003324:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003328:	0082      	lsls	r2, r0, #2
 800332a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800332e:	f7fc ffa7 	bl	8000280 <__aeabi_uldivmod>
 8003332:	4602      	mov	r2, r0
 8003334:	460b      	mov	r3, r1
 8003336:	4b2f      	ldr	r3, [pc, #188]	; (80033f4 <UART_SetConfig+0x38c>)
 8003338:	fba3 1302 	umull	r1, r3, r3, r2
 800333c:	095b      	lsrs	r3, r3, #5
 800333e:	2164      	movs	r1, #100	; 0x64
 8003340:	fb01 f303 	mul.w	r3, r1, r3
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	3332      	adds	r3, #50	; 0x32
 800334a:	4a2a      	ldr	r2, [pc, #168]	; (80033f4 <UART_SetConfig+0x38c>)
 800334c:	fba2 2303 	umull	r2, r3, r2, r3
 8003350:	095b      	lsrs	r3, r3, #5
 8003352:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003356:	441e      	add	r6, r3
 8003358:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800335a:	4618      	mov	r0, r3
 800335c:	f04f 0100 	mov.w	r1, #0
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	1894      	adds	r4, r2, r2
 8003366:	603c      	str	r4, [r7, #0]
 8003368:	415b      	adcs	r3, r3
 800336a:	607b      	str	r3, [r7, #4]
 800336c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003370:	1812      	adds	r2, r2, r0
 8003372:	eb41 0303 	adc.w	r3, r1, r3
 8003376:	f04f 0400 	mov.w	r4, #0
 800337a:	f04f 0500 	mov.w	r5, #0
 800337e:	00dd      	lsls	r5, r3, #3
 8003380:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003384:	00d4      	lsls	r4, r2, #3
 8003386:	4622      	mov	r2, r4
 8003388:	462b      	mov	r3, r5
 800338a:	eb12 0a00 	adds.w	sl, r2, r0
 800338e:	eb43 0b01 	adc.w	fp, r3, r1
 8003392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	4618      	mov	r0, r3
 8003398:	f04f 0100 	mov.w	r1, #0
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	f04f 0300 	mov.w	r3, #0
 80033a4:	008b      	lsls	r3, r1, #2
 80033a6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80033aa:	0082      	lsls	r2, r0, #2
 80033ac:	4650      	mov	r0, sl
 80033ae:	4659      	mov	r1, fp
 80033b0:	f7fc ff66 	bl	8000280 <__aeabi_uldivmod>
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4b0e      	ldr	r3, [pc, #56]	; (80033f4 <UART_SetConfig+0x38c>)
 80033ba:	fba3 1302 	umull	r1, r3, r3, r2
 80033be:	095b      	lsrs	r3, r3, #5
 80033c0:	2164      	movs	r1, #100	; 0x64
 80033c2:	fb01 f303 	mul.w	r3, r1, r3
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	3332      	adds	r3, #50	; 0x32
 80033cc:	4a09      	ldr	r2, [pc, #36]	; (80033f4 <UART_SetConfig+0x38c>)
 80033ce:	fba2 2303 	umull	r2, r3, r2, r3
 80033d2:	095b      	lsrs	r3, r3, #5
 80033d4:	f003 020f 	and.w	r2, r3, #15
 80033d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4432      	add	r2, r6
 80033de:	609a      	str	r2, [r3, #8]
}
 80033e0:	bf00      	nop
 80033e2:	377c      	adds	r7, #124	; 0x7c
 80033e4:	46bd      	mov	sp, r7
 80033e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033ea:	bf00      	nop
 80033ec:	40011000 	.word	0x40011000
 80033f0:	40011400 	.word	0x40011400
 80033f4:	51eb851f 	.word	0x51eb851f

080033f8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f103 0208 	add.w	r2, r3, #8
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f04f 32ff 	mov.w	r2, #4294967295
 8003410:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f103 0208 	add.w	r2, r3, #8
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f103 0208 	add.w	r2, r3, #8
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8003452:	b480      	push	{r7}
 8003454:	b085      	sub	sp, #20
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	601a      	str	r2, [r3, #0]
}
 800348e:	bf00      	nop
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800349a:	b480      	push	{r7}
 800349c:	b085      	sub	sp, #20
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
 80034a2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b0:	d103      	bne.n	80034ba <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	e00c      	b.n	80034d4 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3308      	adds	r3, #8
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	e002      	b.n	80034c8 <vListInsert+0x2e>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d2f6      	bcs.n	80034c2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	1c5a      	adds	r2, r3, #1
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	601a      	str	r2, [r3, #0]
}
 8003500:	bf00      	nop
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6892      	ldr	r2, [r2, #8]
 8003522:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6852      	ldr	r2, [r2, #4]
 800352c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	429a      	cmp	r2, r3
 8003536:	d103      	bne.n	8003540 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	1e5a      	subs	r2, r3, #1
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
}
 8003554:	4618      	mov	r0, r3
 8003556:	3714      	adds	r7, #20
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10a      	bne.n	800358a <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8003574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003578:	f383 8811 	msr	BASEPRI, r3
 800357c:	f3bf 8f6f 	isb	sy
 8003580:	f3bf 8f4f 	dsb	sy
 8003584:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8003586:	bf00      	nop
 8003588:	e7fe      	b.n	8003588 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800358a:	f002 f9cd 	bl	8005928 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003596:	68f9      	ldr	r1, [r7, #12]
 8003598:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800359a:	fb01 f303 	mul.w	r3, r1, r3
 800359e:	441a      	add	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ba:	3b01      	subs	r3, #1
 80035bc:	68f9      	ldr	r1, [r7, #12]
 80035be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80035c0:	fb01 f303 	mul.w	r3, r1, r3
 80035c4:	441a      	add	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	22ff      	movs	r2, #255	; 0xff
 80035ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	22ff      	movs	r2, #255	; 0xff
 80035d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d114      	bne.n	800360a <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d01a      	beq.n	800361e <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	3310      	adds	r3, #16
 80035ec:	4618      	mov	r0, r3
 80035ee:	f001 f9a5 	bl	800493c <xTaskRemoveFromEventList>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d012      	beq.n	800361e <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80035f8:	4b0c      	ldr	r3, [pc, #48]	; (800362c <xQueueGenericReset+0xcc>)
 80035fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	f3bf 8f4f 	dsb	sy
 8003604:	f3bf 8f6f 	isb	sy
 8003608:	e009      	b.n	800361e <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	3310      	adds	r3, #16
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff fef2 	bl	80033f8 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	3324      	adds	r3, #36	; 0x24
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff feed 	bl	80033f8 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800361e:	f002 f9b3 	bl	8005988 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8003622:	2301      	movs	r3, #1
}
 8003624:	4618      	mov	r0, r3
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	e000ed04 	.word	0xe000ed04

08003630 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003630:	b580      	push	{r7, lr}
 8003632:	b08c      	sub	sp, #48	; 0x30
 8003634:	af02      	add	r7, sp, #8
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	4613      	mov	r3, r2
 800363c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10a      	bne.n	800365a <xQueueGenericCreate+0x2a>
        __asm volatile
 8003644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003648:	f383 8811 	msr	BASEPRI, r3
 800364c:	f3bf 8f6f 	isb	sy
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	61bb      	str	r3, [r7, #24]
    }
 8003656:	bf00      	nop
 8003658:	e7fe      	b.n	8003658 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	fb02 f303 	mul.w	r3, r2, r3
 8003662:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d006      	beq.n	8003678 <xQueueGenericCreate+0x48>
 800366a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	429a      	cmp	r2, r3
 8003676:	d101      	bne.n	800367c <xQueueGenericCreate+0x4c>
 8003678:	2301      	movs	r3, #1
 800367a:	e000      	b.n	800367e <xQueueGenericCreate+0x4e>
 800367c:	2300      	movs	r3, #0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10a      	bne.n	8003698 <xQueueGenericCreate+0x68>
        __asm volatile
 8003682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003686:	f383 8811 	msr	BASEPRI, r3
 800368a:	f3bf 8f6f 	isb	sy
 800368e:	f3bf 8f4f 	dsb	sy
 8003692:	617b      	str	r3, [r7, #20]
    }
 8003694:	bf00      	nop
 8003696:	e7fe      	b.n	8003696 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800369e:	d90a      	bls.n	80036b6 <xQueueGenericCreate+0x86>
        __asm volatile
 80036a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a4:	f383 8811 	msr	BASEPRI, r3
 80036a8:	f3bf 8f6f 	isb	sy
 80036ac:	f3bf 8f4f 	dsb	sy
 80036b0:	613b      	str	r3, [r7, #16]
    }
 80036b2:	bf00      	nop
 80036b4:	e7fe      	b.n	80036b4 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	3350      	adds	r3, #80	; 0x50
 80036ba:	4618      	mov	r0, r3
 80036bc:	f002 fa56 	bl	8005b6c <pvPortMalloc>
 80036c0:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00d      	beq.n	80036e4 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	3350      	adds	r3, #80	; 0x50
 80036d0:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80036d2:	79fa      	ldrb	r2, [r7, #7]
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	4613      	mov	r3, r2
 80036da:	69fa      	ldr	r2, [r7, #28]
 80036dc:	68b9      	ldr	r1, [r7, #8]
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f000 f805 	bl	80036ee <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80036e4:	6a3b      	ldr	r3, [r7, #32]
    }
 80036e6:	4618      	mov	r0, r3
 80036e8:	3728      	adds	r7, #40	; 0x28
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b084      	sub	sp, #16
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	60f8      	str	r0, [r7, #12]
 80036f6:	60b9      	str	r1, [r7, #8]
 80036f8:	607a      	str	r2, [r7, #4]
 80036fa:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d103      	bne.n	800370a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	e002      	b.n	8003710 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800371c:	2101      	movs	r1, #1
 800371e:	69b8      	ldr	r0, [r7, #24]
 8003720:	f7ff ff1e 	bl	8003560 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	78fa      	ldrb	r2, [r7, #3]
 8003728:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800372c:	bf00      	nop
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b08e      	sub	sp, #56	; 0x38
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
 8003740:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003742:	2300      	movs	r3, #0
 8003744:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800374a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10a      	bne.n	8003766 <xQueueGenericSend+0x32>
        __asm volatile
 8003750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003754:	f383 8811 	msr	BASEPRI, r3
 8003758:	f3bf 8f6f 	isb	sy
 800375c:	f3bf 8f4f 	dsb	sy
 8003760:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003762:	bf00      	nop
 8003764:	e7fe      	b.n	8003764 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d103      	bne.n	8003774 <xQueueGenericSend+0x40>
 800376c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <xQueueGenericSend+0x44>
 8003774:	2301      	movs	r3, #1
 8003776:	e000      	b.n	800377a <xQueueGenericSend+0x46>
 8003778:	2300      	movs	r3, #0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10a      	bne.n	8003794 <xQueueGenericSend+0x60>
        __asm volatile
 800377e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003782:	f383 8811 	msr	BASEPRI, r3
 8003786:	f3bf 8f6f 	isb	sy
 800378a:	f3bf 8f4f 	dsb	sy
 800378e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003790:	bf00      	nop
 8003792:	e7fe      	b.n	8003792 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	2b02      	cmp	r3, #2
 8003798:	d103      	bne.n	80037a2 <xQueueGenericSend+0x6e>
 800379a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d101      	bne.n	80037a6 <xQueueGenericSend+0x72>
 80037a2:	2301      	movs	r3, #1
 80037a4:	e000      	b.n	80037a8 <xQueueGenericSend+0x74>
 80037a6:	2300      	movs	r3, #0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10a      	bne.n	80037c2 <xQueueGenericSend+0x8e>
        __asm volatile
 80037ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b0:	f383 8811 	msr	BASEPRI, r3
 80037b4:	f3bf 8f6f 	isb	sy
 80037b8:	f3bf 8f4f 	dsb	sy
 80037bc:	623b      	str	r3, [r7, #32]
    }
 80037be:	bf00      	nop
 80037c0:	e7fe      	b.n	80037c0 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037c2:	f001 fa57 	bl	8004c74 <xTaskGetSchedulerState>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d102      	bne.n	80037d2 <xQueueGenericSend+0x9e>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <xQueueGenericSend+0xa2>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <xQueueGenericSend+0xa4>
 80037d6:	2300      	movs	r3, #0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10a      	bne.n	80037f2 <xQueueGenericSend+0xbe>
        __asm volatile
 80037dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e0:	f383 8811 	msr	BASEPRI, r3
 80037e4:	f3bf 8f6f 	isb	sy
 80037e8:	f3bf 8f4f 	dsb	sy
 80037ec:	61fb      	str	r3, [r7, #28]
    }
 80037ee:	bf00      	nop
 80037f0:	e7fe      	b.n	80037f0 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80037f2:	f002 f899 	bl	8005928 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80037f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fe:	429a      	cmp	r2, r3
 8003800:	d302      	bcc.n	8003808 <xQueueGenericSend+0xd4>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	2b02      	cmp	r3, #2
 8003806:	d129      	bne.n	800385c <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	68b9      	ldr	r1, [r7, #8]
 800380c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800380e:	f000 fb3d 	bl	8003e8c <prvCopyDataToQueue>
 8003812:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	2b00      	cmp	r3, #0
 800381a:	d010      	beq.n	800383e <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800381c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381e:	3324      	adds	r3, #36	; 0x24
 8003820:	4618      	mov	r0, r3
 8003822:	f001 f88b 	bl	800493c <xTaskRemoveFromEventList>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d013      	beq.n	8003854 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800382c:	4b3f      	ldr	r3, [pc, #252]	; (800392c <xQueueGenericSend+0x1f8>)
 800382e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	f3bf 8f4f 	dsb	sy
 8003838:	f3bf 8f6f 	isb	sy
 800383c:	e00a      	b.n	8003854 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800383e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003840:	2b00      	cmp	r3, #0
 8003842:	d007      	beq.n	8003854 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003844:	4b39      	ldr	r3, [pc, #228]	; (800392c <xQueueGenericSend+0x1f8>)
 8003846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	f3bf 8f4f 	dsb	sy
 8003850:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003854:	f002 f898 	bl	8005988 <vPortExitCritical>
                return pdPASS;
 8003858:	2301      	movs	r3, #1
 800385a:	e063      	b.n	8003924 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d103      	bne.n	800386a <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003862:	f002 f891 	bl	8005988 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8003866:	2300      	movs	r3, #0
 8003868:	e05c      	b.n	8003924 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800386a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800386c:	2b00      	cmp	r3, #0
 800386e:	d106      	bne.n	800387e <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003870:	f107 0314 	add.w	r3, r7, #20
 8003874:	4618      	mov	r0, r3
 8003876:	f001 f8c3 	bl	8004a00 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800387a:	2301      	movs	r3, #1
 800387c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800387e:	f002 f883 	bl	8005988 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003882:	f000 fe3d 	bl	8004500 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003886:	f002 f84f 	bl	8005928 <vPortEnterCritical>
 800388a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003890:	b25b      	sxtb	r3, r3
 8003892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003896:	d103      	bne.n	80038a0 <xQueueGenericSend+0x16c>
 8003898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038a6:	b25b      	sxtb	r3, r3
 80038a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ac:	d103      	bne.n	80038b6 <xQueueGenericSend+0x182>
 80038ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038b6:	f002 f867 	bl	8005988 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038ba:	1d3a      	adds	r2, r7, #4
 80038bc:	f107 0314 	add.w	r3, r7, #20
 80038c0:	4611      	mov	r1, r2
 80038c2:	4618      	mov	r0, r3
 80038c4:	f001 f8b2 	bl	8004a2c <xTaskCheckForTimeOut>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d124      	bne.n	8003918 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80038ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038d0:	f000 fbd4 	bl	800407c <prvIsQueueFull>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d018      	beq.n	800390c <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80038da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038dc:	3310      	adds	r3, #16
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	4611      	mov	r1, r2
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 ffda 	bl	800489c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80038e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038ea:	f000 fb5f 	bl	8003fac <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80038ee:	f000 fe15 	bl	800451c <xTaskResumeAll>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f47f af7c 	bne.w	80037f2 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80038fa:	4b0c      	ldr	r3, [pc, #48]	; (800392c <xQueueGenericSend+0x1f8>)
 80038fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	f3bf 8f4f 	dsb	sy
 8003906:	f3bf 8f6f 	isb	sy
 800390a:	e772      	b.n	80037f2 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800390c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800390e:	f000 fb4d 	bl	8003fac <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003912:	f000 fe03 	bl	800451c <xTaskResumeAll>
 8003916:	e76c      	b.n	80037f2 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003918:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800391a:	f000 fb47 	bl	8003fac <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800391e:	f000 fdfd 	bl	800451c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8003922:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003924:	4618      	mov	r0, r3
 8003926:	3738      	adds	r7, #56	; 0x38
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	e000ed04 	.word	0xe000ed04

08003930 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b090      	sub	sp, #64	; 0x40
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
 800393c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8003942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10a      	bne.n	800395e <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8003948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394c:	f383 8811 	msr	BASEPRI, r3
 8003950:	f3bf 8f6f 	isb	sy
 8003954:	f3bf 8f4f 	dsb	sy
 8003958:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800395a:	bf00      	nop
 800395c:	e7fe      	b.n	800395c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d103      	bne.n	800396c <xQueueGenericSendFromISR+0x3c>
 8003964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <xQueueGenericSendFromISR+0x40>
 800396c:	2301      	movs	r3, #1
 800396e:	e000      	b.n	8003972 <xQueueGenericSendFromISR+0x42>
 8003970:	2300      	movs	r3, #0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10a      	bne.n	800398c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8003976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397a:	f383 8811 	msr	BASEPRI, r3
 800397e:	f3bf 8f6f 	isb	sy
 8003982:	f3bf 8f4f 	dsb	sy
 8003986:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003988:	bf00      	nop
 800398a:	e7fe      	b.n	800398a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	2b02      	cmp	r3, #2
 8003990:	d103      	bne.n	800399a <xQueueGenericSendFromISR+0x6a>
 8003992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003996:	2b01      	cmp	r3, #1
 8003998:	d101      	bne.n	800399e <xQueueGenericSendFromISR+0x6e>
 800399a:	2301      	movs	r3, #1
 800399c:	e000      	b.n	80039a0 <xQueueGenericSendFromISR+0x70>
 800399e:	2300      	movs	r3, #0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10a      	bne.n	80039ba <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80039a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a8:	f383 8811 	msr	BASEPRI, r3
 80039ac:	f3bf 8f6f 	isb	sy
 80039b0:	f3bf 8f4f 	dsb	sy
 80039b4:	623b      	str	r3, [r7, #32]
    }
 80039b6:	bf00      	nop
 80039b8:	e7fe      	b.n	80039b8 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80039ba:	f002 f897 	bl	8005aec <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80039be:	f3ef 8211 	mrs	r2, BASEPRI
 80039c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c6:	f383 8811 	msr	BASEPRI, r3
 80039ca:	f3bf 8f6f 	isb	sy
 80039ce:	f3bf 8f4f 	dsb	sy
 80039d2:	61fa      	str	r2, [r7, #28]
 80039d4:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80039d6:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80039d8:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80039da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d302      	bcc.n	80039ec <xQueueGenericSendFromISR+0xbc>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d13e      	bne.n	8003a6a <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80039ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fa:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	68b9      	ldr	r1, [r7, #8]
 8003a00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003a02:	f000 fa43 	bl	8003e8c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003a06:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0e:	d112      	bne.n	8003a36 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d025      	beq.n	8003a64 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1a:	3324      	adds	r3, #36	; 0x24
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 ff8d 	bl	800493c <xTaskRemoveFromEventList>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d01d      	beq.n	8003a64 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d01a      	beq.n	8003a64 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	e016      	b.n	8003a64 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003a36:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003a3a:	2b7f      	cmp	r3, #127	; 0x7f
 8003a3c:	d10a      	bne.n	8003a54 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8003a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a42:	f383 8811 	msr	BASEPRI, r3
 8003a46:	f3bf 8f6f 	isb	sy
 8003a4a:	f3bf 8f4f 	dsb	sy
 8003a4e:	617b      	str	r3, [r7, #20]
    }
 8003a50:	bf00      	nop
 8003a52:	e7fe      	b.n	8003a52 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003a54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a58:	3301      	adds	r3, #1
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	b25a      	sxtb	r2, r3
 8003a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003a64:	2301      	movs	r3, #1
 8003a66:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8003a68:	e001      	b.n	8003a6e <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a70:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003a78:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3740      	adds	r7, #64	; 0x40
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b08c      	sub	sp, #48	; 0x30
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003a90:	2300      	movs	r3, #0
 8003a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10a      	bne.n	8003ab4 <xQueueReceive+0x30>
        __asm volatile
 8003a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa2:	f383 8811 	msr	BASEPRI, r3
 8003aa6:	f3bf 8f6f 	isb	sy
 8003aaa:	f3bf 8f4f 	dsb	sy
 8003aae:	623b      	str	r3, [r7, #32]
    }
 8003ab0:	bf00      	nop
 8003ab2:	e7fe      	b.n	8003ab2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d103      	bne.n	8003ac2 <xQueueReceive+0x3e>
 8003aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <xQueueReceive+0x42>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e000      	b.n	8003ac8 <xQueueReceive+0x44>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10a      	bne.n	8003ae2 <xQueueReceive+0x5e>
        __asm volatile
 8003acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad0:	f383 8811 	msr	BASEPRI, r3
 8003ad4:	f3bf 8f6f 	isb	sy
 8003ad8:	f3bf 8f4f 	dsb	sy
 8003adc:	61fb      	str	r3, [r7, #28]
    }
 8003ade:	bf00      	nop
 8003ae0:	e7fe      	b.n	8003ae0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ae2:	f001 f8c7 	bl	8004c74 <xTaskGetSchedulerState>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d102      	bne.n	8003af2 <xQueueReceive+0x6e>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <xQueueReceive+0x72>
 8003af2:	2301      	movs	r3, #1
 8003af4:	e000      	b.n	8003af8 <xQueueReceive+0x74>
 8003af6:	2300      	movs	r3, #0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10a      	bne.n	8003b12 <xQueueReceive+0x8e>
        __asm volatile
 8003afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b00:	f383 8811 	msr	BASEPRI, r3
 8003b04:	f3bf 8f6f 	isb	sy
 8003b08:	f3bf 8f4f 	dsb	sy
 8003b0c:	61bb      	str	r3, [r7, #24]
    }
 8003b0e:	bf00      	nop
 8003b10:	e7fe      	b.n	8003b10 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003b12:	f001 ff09 	bl	8005928 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d01f      	beq.n	8003b62 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003b22:	68b9      	ldr	r1, [r7, #8]
 8003b24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b26:	f000 fa1b 	bl	8003f60 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2c:	1e5a      	subs	r2, r3, #1
 8003b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b30:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00f      	beq.n	8003b5a <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3c:	3310      	adds	r3, #16
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 fefc 	bl	800493c <xTaskRemoveFromEventList>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d007      	beq.n	8003b5a <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003b4a:	4b3d      	ldr	r3, [pc, #244]	; (8003c40 <xQueueReceive+0x1bc>)
 8003b4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b50:	601a      	str	r2, [r3, #0]
 8003b52:	f3bf 8f4f 	dsb	sy
 8003b56:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003b5a:	f001 ff15 	bl	8005988 <vPortExitCritical>
                return pdPASS;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e069      	b.n	8003c36 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d103      	bne.n	8003b70 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003b68:	f001 ff0e 	bl	8005988 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	e062      	b.n	8003c36 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d106      	bne.n	8003b84 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003b76:	f107 0310 	add.w	r3, r7, #16
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 ff40 	bl	8004a00 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003b80:	2301      	movs	r3, #1
 8003b82:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003b84:	f001 ff00 	bl	8005988 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003b88:	f000 fcba 	bl	8004500 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003b8c:	f001 fecc 	bl	8005928 <vPortEnterCritical>
 8003b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b96:	b25b      	sxtb	r3, r3
 8003b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9c:	d103      	bne.n	8003ba6 <xQueueReceive+0x122>
 8003b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bac:	b25b      	sxtb	r3, r3
 8003bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb2:	d103      	bne.n	8003bbc <xQueueReceive+0x138>
 8003bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bbc:	f001 fee4 	bl	8005988 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003bc0:	1d3a      	adds	r2, r7, #4
 8003bc2:	f107 0310 	add.w	r3, r7, #16
 8003bc6:	4611      	mov	r1, r2
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 ff2f 	bl	8004a2c <xTaskCheckForTimeOut>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d123      	bne.n	8003c1c <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003bd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bd6:	f000 fa3b 	bl	8004050 <prvIsQueueEmpty>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d017      	beq.n	8003c10 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be2:	3324      	adds	r3, #36	; 0x24
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	4611      	mov	r1, r2
 8003be8:	4618      	mov	r0, r3
 8003bea:	f000 fe57 	bl	800489c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003bee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bf0:	f000 f9dc 	bl	8003fac <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003bf4:	f000 fc92 	bl	800451c <xTaskResumeAll>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d189      	bne.n	8003b12 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003bfe:	4b10      	ldr	r3, [pc, #64]	; (8003c40 <xQueueReceive+0x1bc>)
 8003c00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	f3bf 8f4f 	dsb	sy
 8003c0a:	f3bf 8f6f 	isb	sy
 8003c0e:	e780      	b.n	8003b12 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003c10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c12:	f000 f9cb 	bl	8003fac <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003c16:	f000 fc81 	bl	800451c <xTaskResumeAll>
 8003c1a:	e77a      	b.n	8003b12 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003c1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c1e:	f000 f9c5 	bl	8003fac <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003c22:	f000 fc7b 	bl	800451c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c28:	f000 fa12 	bl	8004050 <prvIsQueueEmpty>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f43f af6f 	beq.w	8003b12 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003c34:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3730      	adds	r7, #48	; 0x30
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	e000ed04 	.word	0xe000ed04

08003c44 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08e      	sub	sp, #56	; 0x38
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8003c56:	2300      	movs	r3, #0
 8003c58:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10a      	bne.n	8003c76 <xQueueSemaphoreTake+0x32>
        __asm volatile
 8003c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c64:	f383 8811 	msr	BASEPRI, r3
 8003c68:	f3bf 8f6f 	isb	sy
 8003c6c:	f3bf 8f4f 	dsb	sy
 8003c70:	623b      	str	r3, [r7, #32]
    }
 8003c72:	bf00      	nop
 8003c74:	e7fe      	b.n	8003c74 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8003c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00a      	beq.n	8003c94 <xQueueSemaphoreTake+0x50>
        __asm volatile
 8003c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c82:	f383 8811 	msr	BASEPRI, r3
 8003c86:	f3bf 8f6f 	isb	sy
 8003c8a:	f3bf 8f4f 	dsb	sy
 8003c8e:	61fb      	str	r3, [r7, #28]
    }
 8003c90:	bf00      	nop
 8003c92:	e7fe      	b.n	8003c92 <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c94:	f000 ffee 	bl	8004c74 <xTaskGetSchedulerState>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d102      	bne.n	8003ca4 <xQueueSemaphoreTake+0x60>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <xQueueSemaphoreTake+0x64>
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e000      	b.n	8003caa <xQueueSemaphoreTake+0x66>
 8003ca8:	2300      	movs	r3, #0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10a      	bne.n	8003cc4 <xQueueSemaphoreTake+0x80>
        __asm volatile
 8003cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb2:	f383 8811 	msr	BASEPRI, r3
 8003cb6:	f3bf 8f6f 	isb	sy
 8003cba:	f3bf 8f4f 	dsb	sy
 8003cbe:	61bb      	str	r3, [r7, #24]
    }
 8003cc0:	bf00      	nop
 8003cc2:	e7fe      	b.n	8003cc2 <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003cc4:	f001 fe30 	bl	8005928 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ccc:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d024      	beq.n	8003d1e <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd6:	1e5a      	subs	r2, r3, #1
 8003cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cda:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d104      	bne.n	8003cee <xQueueSemaphoreTake+0xaa>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003ce4:	f001 f962 	bl	8004fac <pvTaskIncrementMutexHeldCount>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cec:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00f      	beq.n	8003d16 <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf8:	3310      	adds	r3, #16
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 fe1e 	bl	800493c <xTaskRemoveFromEventList>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d007      	beq.n	8003d16 <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003d06:	4b54      	ldr	r3, [pc, #336]	; (8003e58 <xQueueSemaphoreTake+0x214>)
 8003d08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d0c:	601a      	str	r2, [r3, #0]
 8003d0e:	f3bf 8f4f 	dsb	sy
 8003d12:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003d16:	f001 fe37 	bl	8005988 <vPortExitCritical>
                return pdPASS;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e097      	b.n	8003e4e <xQueueSemaphoreTake+0x20a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d111      	bne.n	8003d48 <xQueueSemaphoreTake+0x104>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8003d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00a      	beq.n	8003d40 <xQueueSemaphoreTake+0xfc>
        __asm volatile
 8003d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d2e:	f383 8811 	msr	BASEPRI, r3
 8003d32:	f3bf 8f6f 	isb	sy
 8003d36:	f3bf 8f4f 	dsb	sy
 8003d3a:	617b      	str	r3, [r7, #20]
    }
 8003d3c:	bf00      	nop
 8003d3e:	e7fe      	b.n	8003d3e <xQueueSemaphoreTake+0xfa>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003d40:	f001 fe22 	bl	8005988 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003d44:	2300      	movs	r3, #0
 8003d46:	e082      	b.n	8003e4e <xQueueSemaphoreTake+0x20a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d106      	bne.n	8003d5c <xQueueSemaphoreTake+0x118>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003d4e:	f107 030c 	add.w	r3, r7, #12
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fe54 	bl	8004a00 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003d5c:	f001 fe14 	bl	8005988 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003d60:	f000 fbce 	bl	8004500 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003d64:	f001 fde0 	bl	8005928 <vPortEnterCritical>
 8003d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d6e:	b25b      	sxtb	r3, r3
 8003d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d74:	d103      	bne.n	8003d7e <xQueueSemaphoreTake+0x13a>
 8003d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d84:	b25b      	sxtb	r3, r3
 8003d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8a:	d103      	bne.n	8003d94 <xQueueSemaphoreTake+0x150>
 8003d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d94:	f001 fdf8 	bl	8005988 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d98:	463a      	mov	r2, r7
 8003d9a:	f107 030c 	add.w	r3, r7, #12
 8003d9e:	4611      	mov	r1, r2
 8003da0:	4618      	mov	r0, r3
 8003da2:	f000 fe43 	bl	8004a2c <xTaskCheckForTimeOut>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d132      	bne.n	8003e12 <xQueueSemaphoreTake+0x1ce>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003dae:	f000 f94f 	bl	8004050 <prvIsQueueEmpty>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d026      	beq.n	8003e06 <xQueueSemaphoreTake+0x1c2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d109      	bne.n	8003dd4 <xQueueSemaphoreTake+0x190>
                        {
                            taskENTER_CRITICAL();
 8003dc0:	f001 fdb2 	bl	8005928 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 ff71 	bl	8004cb0 <xTaskPriorityInherit>
 8003dce:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8003dd0:	f001 fdda 	bl	8005988 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd6:	3324      	adds	r3, #36	; 0x24
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	4611      	mov	r1, r2
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 fd5d 	bl	800489c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003de2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003de4:	f000 f8e2 	bl	8003fac <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003de8:	f000 fb98 	bl	800451c <xTaskResumeAll>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f47f af68 	bne.w	8003cc4 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8003df4:	4b18      	ldr	r3, [pc, #96]	; (8003e58 <xQueueSemaphoreTake+0x214>)
 8003df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	f3bf 8f4f 	dsb	sy
 8003e00:	f3bf 8f6f 	isb	sy
 8003e04:	e75e      	b.n	8003cc4 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8003e06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e08:	f000 f8d0 	bl	8003fac <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003e0c:	f000 fb86 	bl	800451c <xTaskResumeAll>
 8003e10:	e758      	b.n	8003cc4 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8003e12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e14:	f000 f8ca 	bl	8003fac <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003e18:	f000 fb80 	bl	800451c <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e1e:	f000 f917 	bl	8004050 <prvIsQueueEmpty>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f43f af4d 	beq.w	8003cc4 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8003e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00d      	beq.n	8003e4c <xQueueSemaphoreTake+0x208>
                        {
                            taskENTER_CRITICAL();
 8003e30:	f001 fd7a 	bl	8005928 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003e34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e36:	f000 f811 	bl	8003e5c <prvGetDisinheritPriorityAfterTimeout>
 8003e3a:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e42:	4618      	mov	r0, r3
 8003e44:	f001 f824 	bl	8004e90 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8003e48:	f001 fd9e 	bl	8005988 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003e4c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3738      	adds	r7, #56	; 0x38
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	e000ed04 	.word	0xe000ed04

08003e5c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d006      	beq.n	8003e7a <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f1c3 0305 	rsb	r3, r3, #5
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	e001      	b.n	8003e7e <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
    }
 8003e80:	4618      	mov	r0, r3
 8003e82:	3714      	adds	r7, #20
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10d      	bne.n	8003ec6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d14d      	bne.n	8003f4e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 ff70 	bl	8004d9c <xTaskPriorityDisinherit>
 8003ebc:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	609a      	str	r2, [r3, #8]
 8003ec4:	e043      	b.n	8003f4e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d119      	bne.n	8003f00 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6858      	ldr	r0, [r3, #4]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	68b9      	ldr	r1, [r7, #8]
 8003ed8:	f002 f870 	bl	8005fbc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee4:	441a      	add	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d32b      	bcc.n	8003f4e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	605a      	str	r2, [r3, #4]
 8003efe:	e026      	b.n	8003f4e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	68d8      	ldr	r0, [r3, #12]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f08:	461a      	mov	r2, r3
 8003f0a:	68b9      	ldr	r1, [r7, #8]
 8003f0c:	f002 f856 	bl	8005fbc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	68da      	ldr	r2, [r3, #12]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f18:	425b      	negs	r3, r3
 8003f1a:	441a      	add	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	68da      	ldr	r2, [r3, #12]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d207      	bcs.n	8003f3c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f34:	425b      	negs	r3, r3
 8003f36:	441a      	add	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d105      	bne.n	8003f4e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1c5a      	adds	r2, r3, #1
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003f56:	697b      	ldr	r3, [r7, #20]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3718      	adds	r7, #24
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d018      	beq.n	8003fa4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	441a      	add	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68da      	ldr	r2, [r3, #12]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d303      	bcc.n	8003f94 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68d9      	ldr	r1, [r3, #12]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	6838      	ldr	r0, [r7, #0]
 8003fa0:	f002 f80c 	bl	8005fbc <memcpy>
    }
}
 8003fa4:	bf00      	nop
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003fb4:	f001 fcb8 	bl	8005928 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fbe:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fc0:	e011      	b.n	8003fe6 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d012      	beq.n	8003ff0 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	3324      	adds	r3, #36	; 0x24
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 fcb4 	bl	800493c <xTaskRemoveFromEventList>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8003fda:	f000 fd8d 	bl	8004af8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003fde:	7bfb      	ldrb	r3, [r7, #15]
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	dce9      	bgt.n	8003fc2 <prvUnlockQueue+0x16>
 8003fee:	e000      	b.n	8003ff2 <prvUnlockQueue+0x46>
                        break;
 8003ff0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	22ff      	movs	r2, #255	; 0xff
 8003ff6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003ffa:	f001 fcc5 	bl	8005988 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003ffe:	f001 fc93 	bl	8005928 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004008:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800400a:	e011      	b.n	8004030 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d012      	beq.n	800403a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3310      	adds	r3, #16
 8004018:	4618      	mov	r0, r3
 800401a:	f000 fc8f 	bl	800493c <xTaskRemoveFromEventList>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004024:	f000 fd68 	bl	8004af8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004028:	7bbb      	ldrb	r3, [r7, #14]
 800402a:	3b01      	subs	r3, #1
 800402c:	b2db      	uxtb	r3, r3
 800402e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004030:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004034:	2b00      	cmp	r3, #0
 8004036:	dce9      	bgt.n	800400c <prvUnlockQueue+0x60>
 8004038:	e000      	b.n	800403c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800403a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	22ff      	movs	r2, #255	; 0xff
 8004040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8004044:	f001 fca0 	bl	8005988 <vPortExitCritical>
}
 8004048:	bf00      	nop
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004058:	f001 fc66 	bl	8005928 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004060:	2b00      	cmp	r3, #0
 8004062:	d102      	bne.n	800406a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004064:	2301      	movs	r3, #1
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	e001      	b.n	800406e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800406a:	2300      	movs	r3, #0
 800406c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800406e:	f001 fc8b 	bl	8005988 <vPortExitCritical>

    return xReturn;
 8004072:	68fb      	ldr	r3, [r7, #12]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004084:	f001 fc50 	bl	8005928 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004090:	429a      	cmp	r2, r3
 8004092:	d102      	bne.n	800409a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8004094:	2301      	movs	r3, #1
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	e001      	b.n	800409e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800409a:	2300      	movs	r3, #0
 800409c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800409e:	f001 fc73 	bl	8005988 <vPortExitCritical>

    return xReturn;
 80040a2:	68fb      	ldr	r3, [r7, #12]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]
 80040ba:	e014      	b.n	80040e6 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80040bc:	4a0f      	ldr	r2, [pc, #60]	; (80040fc <vQueueAddToRegistry+0x50>)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10b      	bne.n	80040e0 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80040c8:	490c      	ldr	r1, [pc, #48]	; (80040fc <vQueueAddToRegistry+0x50>)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80040d2:	4a0a      	ldr	r2, [pc, #40]	; (80040fc <vQueueAddToRegistry+0x50>)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	4413      	add	r3, r2
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80040de:	e006      	b.n	80040ee <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	3301      	adds	r3, #1
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2b07      	cmp	r3, #7
 80040ea:	d9e7      	bls.n	80040bc <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80040ec:	bf00      	nop
 80040ee:	bf00      	nop
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	20012fa4 	.word	0x20012fa4

08004100 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004110:	f001 fc0a 	bl	8005928 <vPortEnterCritical>
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800411a:	b25b      	sxtb	r3, r3
 800411c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004120:	d103      	bne.n	800412a <vQueueWaitForMessageRestricted+0x2a>
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004130:	b25b      	sxtb	r3, r3
 8004132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004136:	d103      	bne.n	8004140 <vQueueWaitForMessageRestricted+0x40>
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004140:	f001 fc22 	bl	8005988 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004148:	2b00      	cmp	r3, #0
 800414a:	d106      	bne.n	800415a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	3324      	adds	r3, #36	; 0x24
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	68b9      	ldr	r1, [r7, #8]
 8004154:	4618      	mov	r0, r3
 8004156:	f000 fbc5 	bl	80048e4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800415a:	6978      	ldr	r0, [r7, #20]
 800415c:	f7ff ff26 	bl	8003fac <prvUnlockQueue>
    }
 8004160:	bf00      	nop
 8004162:	3718      	adds	r7, #24
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004168:	b580      	push	{r7, lr}
 800416a:	b08c      	sub	sp, #48	; 0x30
 800416c:	af04      	add	r7, sp, #16
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	603b      	str	r3, [r7, #0]
 8004174:	4613      	mov	r3, r2
 8004176:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004178:	88fb      	ldrh	r3, [r7, #6]
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4618      	mov	r0, r3
 800417e:	f001 fcf5 	bl	8005b6c <pvPortMalloc>
 8004182:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00e      	beq.n	80041a8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800418a:	2058      	movs	r0, #88	; 0x58
 800418c:	f001 fcee 	bl	8005b6c <pvPortMalloc>
 8004190:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d003      	beq.n	80041a0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	631a      	str	r2, [r3, #48]	; 0x30
 800419e:	e005      	b.n	80041ac <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80041a0:	6978      	ldr	r0, [r7, #20]
 80041a2:	f001 fdc3 	bl	8005d2c <vPortFree>
 80041a6:	e001      	b.n	80041ac <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80041a8:	2300      	movs	r3, #0
 80041aa:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d013      	beq.n	80041da <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041b2:	88fa      	ldrh	r2, [r7, #6]
 80041b4:	2300      	movs	r3, #0
 80041b6:	9303      	str	r3, [sp, #12]
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	9302      	str	r3, [sp, #8]
 80041bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041be:	9301      	str	r3, [sp, #4]
 80041c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	68b9      	ldr	r1, [r7, #8]
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f000 f80e 	bl	80041ea <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80041ce:	69f8      	ldr	r0, [r7, #28]
 80041d0:	f000 f8a2 	bl	8004318 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80041d4:	2301      	movs	r3, #1
 80041d6:	61bb      	str	r3, [r7, #24]
 80041d8:	e002      	b.n	80041e0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041da:	f04f 33ff 	mov.w	r3, #4294967295
 80041de:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80041e0:	69bb      	ldr	r3, [r7, #24]
    }
 80041e2:	4618      	mov	r0, r3
 80041e4:	3720      	adds	r7, #32
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b088      	sub	sp, #32
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	60f8      	str	r0, [r7, #12]
 80041f2:	60b9      	str	r1, [r7, #8]
 80041f4:	607a      	str	r2, [r7, #4]
 80041f6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80041f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	461a      	mov	r2, r3
 8004202:	21a5      	movs	r1, #165	; 0xa5
 8004204:	f001 fee8 	bl	8005fd8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004212:	3b01      	subs	r3, #1
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	f023 0307 	bic.w	r3, r3, #7
 8004220:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	f003 0307 	and.w	r3, r3, #7
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00a      	beq.n	8004242 <prvInitialiseNewTask+0x58>
        __asm volatile
 800422c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004230:	f383 8811 	msr	BASEPRI, r3
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	f3bf 8f4f 	dsb	sy
 800423c:	617b      	str	r3, [r7, #20]
    }
 800423e:	bf00      	nop
 8004240:	e7fe      	b.n	8004240 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d01f      	beq.n	8004288 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004248:	2300      	movs	r3, #0
 800424a:	61fb      	str	r3, [r7, #28]
 800424c:	e012      	b.n	8004274 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	4413      	add	r3, r2
 8004254:	7819      	ldrb	r1, [r3, #0]
 8004256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	4413      	add	r3, r2
 800425c:	3334      	adds	r3, #52	; 0x34
 800425e:	460a      	mov	r2, r1
 8004260:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	4413      	add	r3, r2
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d006      	beq.n	800427c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	3301      	adds	r3, #1
 8004272:	61fb      	str	r3, [r7, #28]
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	2b09      	cmp	r3, #9
 8004278:	d9e9      	bls.n	800424e <prvInitialiseNewTask+0x64>
 800427a:	e000      	b.n	800427e <prvInitialiseNewTask+0x94>
            {
                break;
 800427c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800427e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004280:	2200      	movs	r2, #0
 8004282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004286:	e003      	b.n	8004290 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004292:	2b04      	cmp	r3, #4
 8004294:	d901      	bls.n	800429a <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004296:	2304      	movs	r3, #4
 8004298:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800429a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800429e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80042a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042a4:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80042a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a8:	2200      	movs	r2, #0
 80042aa:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ae:	3304      	adds	r3, #4
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7ff f8c1 	bl	8003438 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b8:	3318      	adds	r3, #24
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7ff f8bc 	bl	8003438 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042c4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c8:	f1c3 0205 	rsb	r2, r3, #5
 80042cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ce:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042d4:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80042d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d8:	3350      	adds	r3, #80	; 0x50
 80042da:	2204      	movs	r2, #4
 80042dc:	2100      	movs	r1, #0
 80042de:	4618      	mov	r0, r3
 80042e0:	f001 fe7a 	bl	8005fd8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80042e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e6:	3354      	adds	r3, #84	; 0x54
 80042e8:	2201      	movs	r2, #1
 80042ea:	2100      	movs	r1, #0
 80042ec:	4618      	mov	r0, r3
 80042ee:	f001 fe73 	bl	8005fd8 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	68f9      	ldr	r1, [r7, #12]
 80042f6:	69b8      	ldr	r0, [r7, #24]
 80042f8:	f001 f9e4 	bl	80056c4 <pxPortInitialiseStack>
 80042fc:	4602      	mov	r2, r0
 80042fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004300:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004304:	2b00      	cmp	r3, #0
 8004306:	d002      	beq.n	800430e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800430c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800430e:	bf00      	nop
 8004310:	3720      	adds	r7, #32
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
	...

08004318 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004320:	f001 fb02 	bl	8005928 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004324:	4b2c      	ldr	r3, [pc, #176]	; (80043d8 <prvAddNewTaskToReadyList+0xc0>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	3301      	adds	r3, #1
 800432a:	4a2b      	ldr	r2, [pc, #172]	; (80043d8 <prvAddNewTaskToReadyList+0xc0>)
 800432c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800432e:	4b2b      	ldr	r3, [pc, #172]	; (80043dc <prvAddNewTaskToReadyList+0xc4>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d109      	bne.n	800434a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004336:	4a29      	ldr	r2, [pc, #164]	; (80043dc <prvAddNewTaskToReadyList+0xc4>)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800433c:	4b26      	ldr	r3, [pc, #152]	; (80043d8 <prvAddNewTaskToReadyList+0xc0>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d110      	bne.n	8004366 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004344:	f000 fbfc 	bl	8004b40 <prvInitialiseTaskLists>
 8004348:	e00d      	b.n	8004366 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800434a:	4b25      	ldr	r3, [pc, #148]	; (80043e0 <prvAddNewTaskToReadyList+0xc8>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d109      	bne.n	8004366 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004352:	4b22      	ldr	r3, [pc, #136]	; (80043dc <prvAddNewTaskToReadyList+0xc4>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	429a      	cmp	r2, r3
 800435e:	d802      	bhi.n	8004366 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004360:	4a1e      	ldr	r2, [pc, #120]	; (80043dc <prvAddNewTaskToReadyList+0xc4>)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004366:	4b1f      	ldr	r3, [pc, #124]	; (80043e4 <prvAddNewTaskToReadyList+0xcc>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	3301      	adds	r3, #1
 800436c:	4a1d      	ldr	r2, [pc, #116]	; (80043e4 <prvAddNewTaskToReadyList+0xcc>)
 800436e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004370:	4b1c      	ldr	r3, [pc, #112]	; (80043e4 <prvAddNewTaskToReadyList+0xcc>)
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437c:	2201      	movs	r2, #1
 800437e:	409a      	lsls	r2, r3
 8004380:	4b19      	ldr	r3, [pc, #100]	; (80043e8 <prvAddNewTaskToReadyList+0xd0>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4313      	orrs	r3, r2
 8004386:	4a18      	ldr	r2, [pc, #96]	; (80043e8 <prvAddNewTaskToReadyList+0xd0>)
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800438e:	4613      	mov	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4a15      	ldr	r2, [pc, #84]	; (80043ec <prvAddNewTaskToReadyList+0xd4>)
 8004398:	441a      	add	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	3304      	adds	r3, #4
 800439e:	4619      	mov	r1, r3
 80043a0:	4610      	mov	r0, r2
 80043a2:	f7ff f856 	bl	8003452 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80043a6:	f001 faef 	bl	8005988 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80043aa:	4b0d      	ldr	r3, [pc, #52]	; (80043e0 <prvAddNewTaskToReadyList+0xc8>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00e      	beq.n	80043d0 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043b2:	4b0a      	ldr	r3, [pc, #40]	; (80043dc <prvAddNewTaskToReadyList+0xc4>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043bc:	429a      	cmp	r2, r3
 80043be:	d207      	bcs.n	80043d0 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80043c0:	4b0b      	ldr	r3, [pc, #44]	; (80043f0 <prvAddNewTaskToReadyList+0xd8>)
 80043c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80043d0:	bf00      	nop
 80043d2:	3708      	adds	r7, #8
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	20000274 	.word	0x20000274
 80043dc:	2000019c 	.word	0x2000019c
 80043e0:	20000280 	.word	0x20000280
 80043e4:	20000290 	.word	0x20000290
 80043e8:	2000027c 	.word	0x2000027c
 80043ec:	200001a0 	.word	0x200001a0
 80043f0:	e000ed04 	.word	0xe000ed04

080043f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80043fc:	2300      	movs	r3, #0
 80043fe:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d017      	beq.n	8004436 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8004406:	4b13      	ldr	r3, [pc, #76]	; (8004454 <vTaskDelay+0x60>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00a      	beq.n	8004424 <vTaskDelay+0x30>
        __asm volatile
 800440e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004412:	f383 8811 	msr	BASEPRI, r3
 8004416:	f3bf 8f6f 	isb	sy
 800441a:	f3bf 8f4f 	dsb	sy
 800441e:	60bb      	str	r3, [r7, #8]
    }
 8004420:	bf00      	nop
 8004422:	e7fe      	b.n	8004422 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8004424:	f000 f86c 	bl	8004500 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004428:	2100      	movs	r1, #0
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 fdd2 	bl	8004fd4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8004430:	f000 f874 	bl	800451c <xTaskResumeAll>
 8004434:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d107      	bne.n	800444c <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 800443c:	4b06      	ldr	r3, [pc, #24]	; (8004458 <vTaskDelay+0x64>)
 800443e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	f3bf 8f4f 	dsb	sy
 8004448:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800444c:	bf00      	nop
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	2000029c 	.word	0x2000029c
 8004458:	e000ed04 	.word	0xe000ed04

0800445c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8004462:	4b20      	ldr	r3, [pc, #128]	; (80044e4 <vTaskStartScheduler+0x88>)
 8004464:	9301      	str	r3, [sp, #4]
 8004466:	2300      	movs	r3, #0
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	2300      	movs	r3, #0
 800446c:	2282      	movs	r2, #130	; 0x82
 800446e:	491e      	ldr	r1, [pc, #120]	; (80044e8 <vTaskStartScheduler+0x8c>)
 8004470:	481e      	ldr	r0, [pc, #120]	; (80044ec <vTaskStartScheduler+0x90>)
 8004472:	f7ff fe79 	bl	8004168 <xTaskCreate>
 8004476:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d102      	bne.n	8004484 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800447e:	f000 fe0f 	bl	80050a0 <xTimerCreateTimerTask>
 8004482:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d116      	bne.n	80044b8 <vTaskStartScheduler+0x5c>
        __asm volatile
 800448a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448e:	f383 8811 	msr	BASEPRI, r3
 8004492:	f3bf 8f6f 	isb	sy
 8004496:	f3bf 8f4f 	dsb	sy
 800449a:	60bb      	str	r3, [r7, #8]
    }
 800449c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800449e:	4b14      	ldr	r3, [pc, #80]	; (80044f0 <vTaskStartScheduler+0x94>)
 80044a0:	f04f 32ff 	mov.w	r2, #4294967295
 80044a4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80044a6:	4b13      	ldr	r3, [pc, #76]	; (80044f4 <vTaskStartScheduler+0x98>)
 80044a8:	2201      	movs	r2, #1
 80044aa:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80044ac:	4b12      	ldr	r3, [pc, #72]	; (80044f8 <vTaskStartScheduler+0x9c>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80044b2:	f001 f997 	bl	80057e4 <xPortStartScheduler>
 80044b6:	e00e      	b.n	80044d6 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044be:	d10a      	bne.n	80044d6 <vTaskStartScheduler+0x7a>
        __asm volatile
 80044c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c4:	f383 8811 	msr	BASEPRI, r3
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	607b      	str	r3, [r7, #4]
    }
 80044d2:	bf00      	nop
 80044d4:	e7fe      	b.n	80044d4 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80044d6:	4b09      	ldr	r3, [pc, #36]	; (80044fc <vTaskStartScheduler+0xa0>)
 80044d8:	681b      	ldr	r3, [r3, #0]
}
 80044da:	bf00      	nop
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	20000298 	.word	0x20000298
 80044e8:	08007470 	.word	0x08007470
 80044ec:	08004b11 	.word	0x08004b11
 80044f0:	20000294 	.word	0x20000294
 80044f4:	20000280 	.word	0x20000280
 80044f8:	20000278 	.word	0x20000278
 80044fc:	2000000c 	.word	0x2000000c

08004500 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004504:	4b04      	ldr	r3, [pc, #16]	; (8004518 <vTaskSuspendAll+0x18>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3301      	adds	r3, #1
 800450a:	4a03      	ldr	r2, [pc, #12]	; (8004518 <vTaskSuspendAll+0x18>)
 800450c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800450e:	bf00      	nop
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	2000029c 	.word	0x2000029c

0800451c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004522:	2300      	movs	r3, #0
 8004524:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004526:	2300      	movs	r3, #0
 8004528:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800452a:	4b41      	ldr	r3, [pc, #260]	; (8004630 <xTaskResumeAll+0x114>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10a      	bne.n	8004548 <xTaskResumeAll+0x2c>
        __asm volatile
 8004532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004536:	f383 8811 	msr	BASEPRI, r3
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	603b      	str	r3, [r7, #0]
    }
 8004544:	bf00      	nop
 8004546:	e7fe      	b.n	8004546 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004548:	f001 f9ee 	bl	8005928 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800454c:	4b38      	ldr	r3, [pc, #224]	; (8004630 <xTaskResumeAll+0x114>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	3b01      	subs	r3, #1
 8004552:	4a37      	ldr	r2, [pc, #220]	; (8004630 <xTaskResumeAll+0x114>)
 8004554:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004556:	4b36      	ldr	r3, [pc, #216]	; (8004630 <xTaskResumeAll+0x114>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d161      	bne.n	8004622 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800455e:	4b35      	ldr	r3, [pc, #212]	; (8004634 <xTaskResumeAll+0x118>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d05d      	beq.n	8004622 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004566:	e02e      	b.n	80045c6 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004568:	4b33      	ldr	r3, [pc, #204]	; (8004638 <xTaskResumeAll+0x11c>)
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	3318      	adds	r3, #24
 8004574:	4618      	mov	r0, r3
 8004576:	f7fe ffc9 	bl	800350c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	3304      	adds	r3, #4
 800457e:	4618      	mov	r0, r3
 8004580:	f7fe ffc4 	bl	800350c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004588:	2201      	movs	r2, #1
 800458a:	409a      	lsls	r2, r3
 800458c:	4b2b      	ldr	r3, [pc, #172]	; (800463c <xTaskResumeAll+0x120>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4313      	orrs	r3, r2
 8004592:	4a2a      	ldr	r2, [pc, #168]	; (800463c <xTaskResumeAll+0x120>)
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800459a:	4613      	mov	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4413      	add	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4a27      	ldr	r2, [pc, #156]	; (8004640 <xTaskResumeAll+0x124>)
 80045a4:	441a      	add	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	3304      	adds	r3, #4
 80045aa:	4619      	mov	r1, r3
 80045ac:	4610      	mov	r0, r2
 80045ae:	f7fe ff50 	bl	8003452 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b6:	4b23      	ldr	r3, [pc, #140]	; (8004644 <xTaskResumeAll+0x128>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045bc:	429a      	cmp	r2, r3
 80045be:	d302      	bcc.n	80045c6 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 80045c0:	4b21      	ldr	r3, [pc, #132]	; (8004648 <xTaskResumeAll+0x12c>)
 80045c2:	2201      	movs	r2, #1
 80045c4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045c6:	4b1c      	ldr	r3, [pc, #112]	; (8004638 <xTaskResumeAll+0x11c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1cc      	bne.n	8004568 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d001      	beq.n	80045d8 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80045d4:	f000 fb32 	bl	8004c3c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80045d8:	4b1c      	ldr	r3, [pc, #112]	; (800464c <xTaskResumeAll+0x130>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d010      	beq.n	8004606 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80045e4:	f000 f846 	bl	8004674 <xTaskIncrementTick>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d002      	beq.n	80045f4 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 80045ee:	4b16      	ldr	r3, [pc, #88]	; (8004648 <xTaskResumeAll+0x12c>)
 80045f0:	2201      	movs	r2, #1
 80045f2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	3b01      	subs	r3, #1
 80045f8:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1f1      	bne.n	80045e4 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8004600:	4b12      	ldr	r3, [pc, #72]	; (800464c <xTaskResumeAll+0x130>)
 8004602:	2200      	movs	r2, #0
 8004604:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004606:	4b10      	ldr	r3, [pc, #64]	; (8004648 <xTaskResumeAll+0x12c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d009      	beq.n	8004622 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800460e:	2301      	movs	r3, #1
 8004610:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004612:	4b0f      	ldr	r3, [pc, #60]	; (8004650 <xTaskResumeAll+0x134>)
 8004614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	f3bf 8f4f 	dsb	sy
 800461e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004622:	f001 f9b1 	bl	8005988 <vPortExitCritical>

    return xAlreadyYielded;
 8004626:	68bb      	ldr	r3, [r7, #8]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	2000029c 	.word	0x2000029c
 8004634:	20000274 	.word	0x20000274
 8004638:	20000234 	.word	0x20000234
 800463c:	2000027c 	.word	0x2000027c
 8004640:	200001a0 	.word	0x200001a0
 8004644:	2000019c 	.word	0x2000019c
 8004648:	20000288 	.word	0x20000288
 800464c:	20000284 	.word	0x20000284
 8004650:	e000ed04 	.word	0xe000ed04

08004654 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800465a:	4b05      	ldr	r3, [pc, #20]	; (8004670 <xTaskGetTickCount+0x1c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004660:	687b      	ldr	r3, [r7, #4]
}
 8004662:	4618      	mov	r0, r3
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	20000278 	.word	0x20000278

08004674 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800467a:	2300      	movs	r3, #0
 800467c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800467e:	4b4e      	ldr	r3, [pc, #312]	; (80047b8 <xTaskIncrementTick+0x144>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	f040 808e 	bne.w	80047a4 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004688:	4b4c      	ldr	r3, [pc, #304]	; (80047bc <xTaskIncrementTick+0x148>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	3301      	adds	r3, #1
 800468e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004690:	4a4a      	ldr	r2, [pc, #296]	; (80047bc <xTaskIncrementTick+0x148>)
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d120      	bne.n	80046de <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800469c:	4b48      	ldr	r3, [pc, #288]	; (80047c0 <xTaskIncrementTick+0x14c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00a      	beq.n	80046bc <xTaskIncrementTick+0x48>
        __asm volatile
 80046a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046aa:	f383 8811 	msr	BASEPRI, r3
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	603b      	str	r3, [r7, #0]
    }
 80046b8:	bf00      	nop
 80046ba:	e7fe      	b.n	80046ba <xTaskIncrementTick+0x46>
 80046bc:	4b40      	ldr	r3, [pc, #256]	; (80047c0 <xTaskIncrementTick+0x14c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	4b40      	ldr	r3, [pc, #256]	; (80047c4 <xTaskIncrementTick+0x150>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a3e      	ldr	r2, [pc, #248]	; (80047c0 <xTaskIncrementTick+0x14c>)
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	4a3e      	ldr	r2, [pc, #248]	; (80047c4 <xTaskIncrementTick+0x150>)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6013      	str	r3, [r2, #0]
 80046d0:	4b3d      	ldr	r3, [pc, #244]	; (80047c8 <xTaskIncrementTick+0x154>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	3301      	adds	r3, #1
 80046d6:	4a3c      	ldr	r2, [pc, #240]	; (80047c8 <xTaskIncrementTick+0x154>)
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	f000 faaf 	bl	8004c3c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80046de:	4b3b      	ldr	r3, [pc, #236]	; (80047cc <xTaskIncrementTick+0x158>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d348      	bcc.n	800477a <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046e8:	4b35      	ldr	r3, [pc, #212]	; (80047c0 <xTaskIncrementTick+0x14c>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d104      	bne.n	80046fc <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046f2:	4b36      	ldr	r3, [pc, #216]	; (80047cc <xTaskIncrementTick+0x158>)
 80046f4:	f04f 32ff 	mov.w	r2, #4294967295
 80046f8:	601a      	str	r2, [r3, #0]
                    break;
 80046fa:	e03e      	b.n	800477a <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046fc:	4b30      	ldr	r3, [pc, #192]	; (80047c0 <xTaskIncrementTick+0x14c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	429a      	cmp	r2, r3
 8004712:	d203      	bcs.n	800471c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004714:	4a2d      	ldr	r2, [pc, #180]	; (80047cc <xTaskIncrementTick+0x158>)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800471a:	e02e      	b.n	800477a <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	3304      	adds	r3, #4
 8004720:	4618      	mov	r0, r3
 8004722:	f7fe fef3 	bl	800350c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472a:	2b00      	cmp	r3, #0
 800472c:	d004      	beq.n	8004738 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	3318      	adds	r3, #24
 8004732:	4618      	mov	r0, r3
 8004734:	f7fe feea 	bl	800350c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473c:	2201      	movs	r2, #1
 800473e:	409a      	lsls	r2, r3
 8004740:	4b23      	ldr	r3, [pc, #140]	; (80047d0 <xTaskIncrementTick+0x15c>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4313      	orrs	r3, r2
 8004746:	4a22      	ldr	r2, [pc, #136]	; (80047d0 <xTaskIncrementTick+0x15c>)
 8004748:	6013      	str	r3, [r2, #0]
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800474e:	4613      	mov	r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	4413      	add	r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4a1f      	ldr	r2, [pc, #124]	; (80047d4 <xTaskIncrementTick+0x160>)
 8004758:	441a      	add	r2, r3
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	3304      	adds	r3, #4
 800475e:	4619      	mov	r1, r3
 8004760:	4610      	mov	r0, r2
 8004762:	f7fe fe76 	bl	8003452 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800476a:	4b1b      	ldr	r3, [pc, #108]	; (80047d8 <xTaskIncrementTick+0x164>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004770:	429a      	cmp	r2, r3
 8004772:	d3b9      	bcc.n	80046e8 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8004774:	2301      	movs	r3, #1
 8004776:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004778:	e7b6      	b.n	80046e8 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800477a:	4b17      	ldr	r3, [pc, #92]	; (80047d8 <xTaskIncrementTick+0x164>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004780:	4914      	ldr	r1, [pc, #80]	; (80047d4 <xTaskIncrementTick+0x160>)
 8004782:	4613      	mov	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	440b      	add	r3, r1
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d901      	bls.n	8004796 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8004792:	2301      	movs	r3, #1
 8004794:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8004796:	4b11      	ldr	r3, [pc, #68]	; (80047dc <xTaskIncrementTick+0x168>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d007      	beq.n	80047ae <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 800479e:	2301      	movs	r3, #1
 80047a0:	617b      	str	r3, [r7, #20]
 80047a2:	e004      	b.n	80047ae <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80047a4:	4b0e      	ldr	r3, [pc, #56]	; (80047e0 <xTaskIncrementTick+0x16c>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	3301      	adds	r3, #1
 80047aa:	4a0d      	ldr	r2, [pc, #52]	; (80047e0 <xTaskIncrementTick+0x16c>)
 80047ac:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80047ae:	697b      	ldr	r3, [r7, #20]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3718      	adds	r7, #24
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	2000029c 	.word	0x2000029c
 80047bc:	20000278 	.word	0x20000278
 80047c0:	2000022c 	.word	0x2000022c
 80047c4:	20000230 	.word	0x20000230
 80047c8:	2000028c 	.word	0x2000028c
 80047cc:	20000294 	.word	0x20000294
 80047d0:	2000027c 	.word	0x2000027c
 80047d4:	200001a0 	.word	0x200001a0
 80047d8:	2000019c 	.word	0x2000019c
 80047dc:	20000288 	.word	0x20000288
 80047e0:	20000284 	.word	0x20000284

080047e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80047ea:	4b27      	ldr	r3, [pc, #156]	; (8004888 <vTaskSwitchContext+0xa4>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80047f2:	4b26      	ldr	r3, [pc, #152]	; (800488c <vTaskSwitchContext+0xa8>)
 80047f4:	2201      	movs	r2, #1
 80047f6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80047f8:	e03f      	b.n	800487a <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80047fa:	4b24      	ldr	r3, [pc, #144]	; (800488c <vTaskSwitchContext+0xa8>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004800:	4b23      	ldr	r3, [pc, #140]	; (8004890 <vTaskSwitchContext+0xac>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	fab3 f383 	clz	r3, r3
 800480c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800480e:	7afb      	ldrb	r3, [r7, #11]
 8004810:	f1c3 031f 	rsb	r3, r3, #31
 8004814:	617b      	str	r3, [r7, #20]
 8004816:	491f      	ldr	r1, [pc, #124]	; (8004894 <vTaskSwitchContext+0xb0>)
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	4613      	mov	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	4413      	add	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	440b      	add	r3, r1
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10a      	bne.n	8004840 <vTaskSwitchContext+0x5c>
        __asm volatile
 800482a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482e:	f383 8811 	msr	BASEPRI, r3
 8004832:	f3bf 8f6f 	isb	sy
 8004836:	f3bf 8f4f 	dsb	sy
 800483a:	607b      	str	r3, [r7, #4]
    }
 800483c:	bf00      	nop
 800483e:	e7fe      	b.n	800483e <vTaskSwitchContext+0x5a>
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	4613      	mov	r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	4413      	add	r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	4a12      	ldr	r2, [pc, #72]	; (8004894 <vTaskSwitchContext+0xb0>)
 800484c:	4413      	add	r3, r2
 800484e:	613b      	str	r3, [r7, #16]
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	605a      	str	r2, [r3, #4]
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	3308      	adds	r3, #8
 8004862:	429a      	cmp	r2, r3
 8004864:	d104      	bne.n	8004870 <vTaskSwitchContext+0x8c>
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	685a      	ldr	r2, [r3, #4]
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	605a      	str	r2, [r3, #4]
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	4a08      	ldr	r2, [pc, #32]	; (8004898 <vTaskSwitchContext+0xb4>)
 8004878:	6013      	str	r3, [r2, #0]
}
 800487a:	bf00      	nop
 800487c:	371c      	adds	r7, #28
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	2000029c 	.word	0x2000029c
 800488c:	20000288 	.word	0x20000288
 8004890:	2000027c 	.word	0x2000027c
 8004894:	200001a0 	.word	0x200001a0
 8004898:	2000019c 	.word	0x2000019c

0800489c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10a      	bne.n	80048c2 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80048ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b0:	f383 8811 	msr	BASEPRI, r3
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	f3bf 8f4f 	dsb	sy
 80048bc:	60fb      	str	r3, [r7, #12]
    }
 80048be:	bf00      	nop
 80048c0:	e7fe      	b.n	80048c0 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80048c2:	4b07      	ldr	r3, [pc, #28]	; (80048e0 <vTaskPlaceOnEventList+0x44>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	3318      	adds	r3, #24
 80048c8:	4619      	mov	r1, r3
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7fe fde5 	bl	800349a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80048d0:	2101      	movs	r1, #1
 80048d2:	6838      	ldr	r0, [r7, #0]
 80048d4:	f000 fb7e 	bl	8004fd4 <prvAddCurrentTaskToDelayedList>
}
 80048d8:	bf00      	nop
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	2000019c 	.word	0x2000019c

080048e4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10a      	bne.n	800490c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80048f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fa:	f383 8811 	msr	BASEPRI, r3
 80048fe:	f3bf 8f6f 	isb	sy
 8004902:	f3bf 8f4f 	dsb	sy
 8004906:	617b      	str	r3, [r7, #20]
    }
 8004908:	bf00      	nop
 800490a:	e7fe      	b.n	800490a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800490c:	4b0a      	ldr	r3, [pc, #40]	; (8004938 <vTaskPlaceOnEventListRestricted+0x54>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	3318      	adds	r3, #24
 8004912:	4619      	mov	r1, r3
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f7fe fd9c 	bl	8003452 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d002      	beq.n	8004926 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8004920:	f04f 33ff 	mov.w	r3, #4294967295
 8004924:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004926:	6879      	ldr	r1, [r7, #4]
 8004928:	68b8      	ldr	r0, [r7, #8]
 800492a:	f000 fb53 	bl	8004fd4 <prvAddCurrentTaskToDelayedList>
    }
 800492e:	bf00      	nop
 8004930:	3718      	adds	r7, #24
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	2000019c 	.word	0x2000019c

0800493c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10a      	bne.n	8004968 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8004952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004956:	f383 8811 	msr	BASEPRI, r3
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	60fb      	str	r3, [r7, #12]
    }
 8004964:	bf00      	nop
 8004966:	e7fe      	b.n	8004966 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	3318      	adds	r3, #24
 800496c:	4618      	mov	r0, r3
 800496e:	f7fe fdcd 	bl	800350c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004972:	4b1d      	ldr	r3, [pc, #116]	; (80049e8 <xTaskRemoveFromEventList+0xac>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d11c      	bne.n	80049b4 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	3304      	adds	r3, #4
 800497e:	4618      	mov	r0, r3
 8004980:	f7fe fdc4 	bl	800350c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004988:	2201      	movs	r2, #1
 800498a:	409a      	lsls	r2, r3
 800498c:	4b17      	ldr	r3, [pc, #92]	; (80049ec <xTaskRemoveFromEventList+0xb0>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4313      	orrs	r3, r2
 8004992:	4a16      	ldr	r2, [pc, #88]	; (80049ec <xTaskRemoveFromEventList+0xb0>)
 8004994:	6013      	str	r3, [r2, #0]
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800499a:	4613      	mov	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4a13      	ldr	r2, [pc, #76]	; (80049f0 <xTaskRemoveFromEventList+0xb4>)
 80049a4:	441a      	add	r2, r3
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	3304      	adds	r3, #4
 80049aa:	4619      	mov	r1, r3
 80049ac:	4610      	mov	r0, r2
 80049ae:	f7fe fd50 	bl	8003452 <vListInsertEnd>
 80049b2:	e005      	b.n	80049c0 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	3318      	adds	r3, #24
 80049b8:	4619      	mov	r1, r3
 80049ba:	480e      	ldr	r0, [pc, #56]	; (80049f4 <xTaskRemoveFromEventList+0xb8>)
 80049bc:	f7fe fd49 	bl	8003452 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c4:	4b0c      	ldr	r3, [pc, #48]	; (80049f8 <xTaskRemoveFromEventList+0xbc>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d905      	bls.n	80049da <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80049ce:	2301      	movs	r3, #1
 80049d0:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80049d2:	4b0a      	ldr	r3, [pc, #40]	; (80049fc <xTaskRemoveFromEventList+0xc0>)
 80049d4:	2201      	movs	r2, #1
 80049d6:	601a      	str	r2, [r3, #0]
 80049d8:	e001      	b.n	80049de <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 80049da:	2300      	movs	r3, #0
 80049dc:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80049de:	697b      	ldr	r3, [r7, #20]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3718      	adds	r7, #24
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	2000029c 	.word	0x2000029c
 80049ec:	2000027c 	.word	0x2000027c
 80049f0:	200001a0 	.word	0x200001a0
 80049f4:	20000234 	.word	0x20000234
 80049f8:	2000019c 	.word	0x2000019c
 80049fc:	20000288 	.word	0x20000288

08004a00 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a08:	4b06      	ldr	r3, [pc, #24]	; (8004a24 <vTaskInternalSetTimeOutState+0x24>)
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004a10:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <vTaskInternalSetTimeOutState+0x28>)
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	605a      	str	r2, [r3, #4]
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr
 8004a24:	2000028c 	.word	0x2000028c
 8004a28:	20000278 	.word	0x20000278

08004a2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b088      	sub	sp, #32
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10a      	bne.n	8004a52 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a40:	f383 8811 	msr	BASEPRI, r3
 8004a44:	f3bf 8f6f 	isb	sy
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	613b      	str	r3, [r7, #16]
    }
 8004a4e:	bf00      	nop
 8004a50:	e7fe      	b.n	8004a50 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10a      	bne.n	8004a6e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5c:	f383 8811 	msr	BASEPRI, r3
 8004a60:	f3bf 8f6f 	isb	sy
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	60fb      	str	r3, [r7, #12]
    }
 8004a6a:	bf00      	nop
 8004a6c:	e7fe      	b.n	8004a6c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004a6e:	f000 ff5b 	bl	8005928 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004a72:	4b1f      	ldr	r3, [pc, #124]	; (8004af0 <xTaskCheckForTimeOut+0xc4>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8a:	d102      	bne.n	8004a92 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	61fb      	str	r3, [r7, #28]
 8004a90:	e026      	b.n	8004ae0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	4b17      	ldr	r3, [pc, #92]	; (8004af4 <xTaskCheckForTimeOut+0xc8>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d00a      	beq.n	8004ab4 <xTaskCheckForTimeOut+0x88>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d305      	bcc.n	8004ab4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	601a      	str	r2, [r3, #0]
 8004ab2:	e015      	b.n	8004ae0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d20b      	bcs.n	8004ad6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	1ad2      	subs	r2, r2, r3
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7ff ff98 	bl	8004a00 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	61fb      	str	r3, [r7, #28]
 8004ad4:	e004      	b.n	8004ae0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004adc:	2301      	movs	r3, #1
 8004ade:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004ae0:	f000 ff52 	bl	8005988 <vPortExitCritical>

    return xReturn;
 8004ae4:	69fb      	ldr	r3, [r7, #28]
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3720      	adds	r7, #32
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	20000278 	.word	0x20000278
 8004af4:	2000028c 	.word	0x2000028c

08004af8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004af8:	b480      	push	{r7}
 8004afa:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004afc:	4b03      	ldr	r3, [pc, #12]	; (8004b0c <vTaskMissedYield+0x14>)
 8004afe:	2201      	movs	r2, #1
 8004b00:	601a      	str	r2, [r3, #0]
}
 8004b02:	bf00      	nop
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	20000288 	.word	0x20000288

08004b10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004b18:	f000 f852 	bl	8004bc0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b1c:	4b06      	ldr	r3, [pc, #24]	; (8004b38 <prvIdleTask+0x28>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d9f9      	bls.n	8004b18 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004b24:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <prvIdleTask+0x2c>)
 8004b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b2a:	601a      	str	r2, [r3, #0]
 8004b2c:	f3bf 8f4f 	dsb	sy
 8004b30:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004b34:	e7f0      	b.n	8004b18 <prvIdleTask+0x8>
 8004b36:	bf00      	nop
 8004b38:	200001a0 	.word	0x200001a0
 8004b3c:	e000ed04 	.word	0xe000ed04

08004b40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b46:	2300      	movs	r3, #0
 8004b48:	607b      	str	r3, [r7, #4]
 8004b4a:	e00c      	b.n	8004b66 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4a12      	ldr	r2, [pc, #72]	; (8004ba0 <prvInitialiseTaskLists+0x60>)
 8004b58:	4413      	add	r3, r2
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fe fc4c 	bl	80033f8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	3301      	adds	r3, #1
 8004b64:	607b      	str	r3, [r7, #4]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b04      	cmp	r3, #4
 8004b6a:	d9ef      	bls.n	8004b4c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004b6c:	480d      	ldr	r0, [pc, #52]	; (8004ba4 <prvInitialiseTaskLists+0x64>)
 8004b6e:	f7fe fc43 	bl	80033f8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004b72:	480d      	ldr	r0, [pc, #52]	; (8004ba8 <prvInitialiseTaskLists+0x68>)
 8004b74:	f7fe fc40 	bl	80033f8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004b78:	480c      	ldr	r0, [pc, #48]	; (8004bac <prvInitialiseTaskLists+0x6c>)
 8004b7a:	f7fe fc3d 	bl	80033f8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004b7e:	480c      	ldr	r0, [pc, #48]	; (8004bb0 <prvInitialiseTaskLists+0x70>)
 8004b80:	f7fe fc3a 	bl	80033f8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004b84:	480b      	ldr	r0, [pc, #44]	; (8004bb4 <prvInitialiseTaskLists+0x74>)
 8004b86:	f7fe fc37 	bl	80033f8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004b8a:	4b0b      	ldr	r3, [pc, #44]	; (8004bb8 <prvInitialiseTaskLists+0x78>)
 8004b8c:	4a05      	ldr	r2, [pc, #20]	; (8004ba4 <prvInitialiseTaskLists+0x64>)
 8004b8e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b90:	4b0a      	ldr	r3, [pc, #40]	; (8004bbc <prvInitialiseTaskLists+0x7c>)
 8004b92:	4a05      	ldr	r2, [pc, #20]	; (8004ba8 <prvInitialiseTaskLists+0x68>)
 8004b94:	601a      	str	r2, [r3, #0]
}
 8004b96:	bf00      	nop
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	200001a0 	.word	0x200001a0
 8004ba4:	20000204 	.word	0x20000204
 8004ba8:	20000218 	.word	0x20000218
 8004bac:	20000234 	.word	0x20000234
 8004bb0:	20000248 	.word	0x20000248
 8004bb4:	20000260 	.word	0x20000260
 8004bb8:	2000022c 	.word	0x2000022c
 8004bbc:	20000230 	.word	0x20000230

08004bc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bc6:	e019      	b.n	8004bfc <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004bc8:	f000 feae 	bl	8005928 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bcc:	4b10      	ldr	r3, [pc, #64]	; (8004c10 <prvCheckTasksWaitingTermination+0x50>)
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7fe fc97 	bl	800350c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004bde:	4b0d      	ldr	r3, [pc, #52]	; (8004c14 <prvCheckTasksWaitingTermination+0x54>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	3b01      	subs	r3, #1
 8004be4:	4a0b      	ldr	r2, [pc, #44]	; (8004c14 <prvCheckTasksWaitingTermination+0x54>)
 8004be6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004be8:	4b0b      	ldr	r3, [pc, #44]	; (8004c18 <prvCheckTasksWaitingTermination+0x58>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3b01      	subs	r3, #1
 8004bee:	4a0a      	ldr	r2, [pc, #40]	; (8004c18 <prvCheckTasksWaitingTermination+0x58>)
 8004bf0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004bf2:	f000 fec9 	bl	8005988 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f810 	bl	8004c1c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bfc:	4b06      	ldr	r3, [pc, #24]	; (8004c18 <prvCheckTasksWaitingTermination+0x58>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1e1      	bne.n	8004bc8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004c04:	bf00      	nop
 8004c06:	bf00      	nop
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	20000248 	.word	0x20000248
 8004c14:	20000274 	.word	0x20000274
 8004c18:	2000025c 	.word	0x2000025c

08004c1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f001 f87f 	bl	8005d2c <vPortFree>
                vPortFree( pxTCB );
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f001 f87c 	bl	8005d2c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004c34:	bf00      	nop
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c40:	4b0a      	ldr	r3, [pc, #40]	; (8004c6c <prvResetNextTaskUnblockTime+0x30>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d104      	bne.n	8004c54 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004c4a:	4b09      	ldr	r3, [pc, #36]	; (8004c70 <prvResetNextTaskUnblockTime+0x34>)
 8004c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c50:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004c52:	e005      	b.n	8004c60 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004c54:	4b05      	ldr	r3, [pc, #20]	; (8004c6c <prvResetNextTaskUnblockTime+0x30>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a04      	ldr	r2, [pc, #16]	; (8004c70 <prvResetNextTaskUnblockTime+0x34>)
 8004c5e:	6013      	str	r3, [r2, #0]
}
 8004c60:	bf00      	nop
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	2000022c 	.word	0x2000022c
 8004c70:	20000294 	.word	0x20000294

08004c74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004c7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ca8 <xTaskGetSchedulerState+0x34>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d102      	bne.n	8004c88 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004c82:	2301      	movs	r3, #1
 8004c84:	607b      	str	r3, [r7, #4]
 8004c86:	e008      	b.n	8004c9a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c88:	4b08      	ldr	r3, [pc, #32]	; (8004cac <xTaskGetSchedulerState+0x38>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d102      	bne.n	8004c96 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004c90:	2302      	movs	r3, #2
 8004c92:	607b      	str	r3, [r7, #4]
 8004c94:	e001      	b.n	8004c9a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004c96:	2300      	movs	r3, #0
 8004c98:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004c9a:	687b      	ldr	r3, [r7, #4]
    }
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr
 8004ca8:	20000280 	.word	0x20000280
 8004cac:	2000029c 	.word	0x2000029c

08004cb0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d05e      	beq.n	8004d84 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cca:	4b31      	ldr	r3, [pc, #196]	; (8004d90 <xTaskPriorityInherit+0xe0>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d24e      	bcs.n	8004d72 <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	db06      	blt.n	8004cea <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cdc:	4b2c      	ldr	r3, [pc, #176]	; (8004d90 <xTaskPriorityInherit+0xe0>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce2:	f1c3 0205 	rsb	r2, r3, #5
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	6959      	ldr	r1, [r3, #20]
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	4413      	add	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4a26      	ldr	r2, [pc, #152]	; (8004d94 <xTaskPriorityInherit+0xe4>)
 8004cfc:	4413      	add	r3, r2
 8004cfe:	4299      	cmp	r1, r3
 8004d00:	d12f      	bne.n	8004d62 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	3304      	adds	r3, #4
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7fe fc00 	bl	800350c <uxListRemove>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10a      	bne.n	8004d28 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d16:	2201      	movs	r2, #1
 8004d18:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1c:	43da      	mvns	r2, r3
 8004d1e:	4b1e      	ldr	r3, [pc, #120]	; (8004d98 <xTaskPriorityInherit+0xe8>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4013      	ands	r3, r2
 8004d24:	4a1c      	ldr	r2, [pc, #112]	; (8004d98 <xTaskPriorityInherit+0xe8>)
 8004d26:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004d28:	4b19      	ldr	r3, [pc, #100]	; (8004d90 <xTaskPriorityInherit+0xe0>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d36:	2201      	movs	r2, #1
 8004d38:	409a      	lsls	r2, r3
 8004d3a:	4b17      	ldr	r3, [pc, #92]	; (8004d98 <xTaskPriorityInherit+0xe8>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	4a15      	ldr	r2, [pc, #84]	; (8004d98 <xTaskPriorityInherit+0xe8>)
 8004d42:	6013      	str	r3, [r2, #0]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d48:	4613      	mov	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4a10      	ldr	r2, [pc, #64]	; (8004d94 <xTaskPriorityInherit+0xe4>)
 8004d52:	441a      	add	r2, r3
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	3304      	adds	r3, #4
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4610      	mov	r0, r2
 8004d5c:	f7fe fb79 	bl	8003452 <vListInsertEnd>
 8004d60:	e004      	b.n	8004d6c <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004d62:	4b0b      	ldr	r3, [pc, #44]	; (8004d90 <xTaskPriorityInherit+0xe0>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	e008      	b.n	8004d84 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d76:	4b06      	ldr	r3, [pc, #24]	; (8004d90 <xTaskPriorityInherit+0xe0>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d201      	bcs.n	8004d84 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8004d80:	2301      	movs	r3, #1
 8004d82:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004d84:	68fb      	ldr	r3, [r7, #12]
    }
 8004d86:	4618      	mov	r0, r3
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	2000019c 	.word	0x2000019c
 8004d94:	200001a0 	.word	0x200001a0
 8004d98:	2000027c 	.word	0x2000027c

08004d9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004da8:	2300      	movs	r3, #0
 8004daa:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d063      	beq.n	8004e7a <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004db2:	4b34      	ldr	r3, [pc, #208]	; (8004e84 <xTaskPriorityDisinherit+0xe8>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d00a      	beq.n	8004dd2 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8004dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc0:	f383 8811 	msr	BASEPRI, r3
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	60fb      	str	r3, [r7, #12]
    }
 8004dce:	bf00      	nop
 8004dd0:	e7fe      	b.n	8004dd0 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10a      	bne.n	8004df0 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8004dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dde:	f383 8811 	msr	BASEPRI, r3
 8004de2:	f3bf 8f6f 	isb	sy
 8004de6:	f3bf 8f4f 	dsb	sy
 8004dea:	60bb      	str	r3, [r7, #8]
    }
 8004dec:	bf00      	nop
 8004dee:	e7fe      	b.n	8004dee <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004df4:	1e5a      	subs	r2, r3, #1
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d039      	beq.n	8004e7a <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d135      	bne.n	8004e7a <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	3304      	adds	r3, #4
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fe fb7a 	bl	800350c <uxListRemove>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10a      	bne.n	8004e34 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e22:	2201      	movs	r2, #1
 8004e24:	fa02 f303 	lsl.w	r3, r2, r3
 8004e28:	43da      	mvns	r2, r3
 8004e2a:	4b17      	ldr	r3, [pc, #92]	; (8004e88 <xTaskPriorityDisinherit+0xec>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4013      	ands	r3, r2
 8004e30:	4a15      	ldr	r2, [pc, #84]	; (8004e88 <xTaskPriorityDisinherit+0xec>)
 8004e32:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e40:	f1c3 0205 	rsb	r2, r3, #5
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	409a      	lsls	r2, r3
 8004e50:	4b0d      	ldr	r3, [pc, #52]	; (8004e88 <xTaskPriorityDisinherit+0xec>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	4a0c      	ldr	r2, [pc, #48]	; (8004e88 <xTaskPriorityDisinherit+0xec>)
 8004e58:	6013      	str	r3, [r2, #0]
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e5e:	4613      	mov	r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	4413      	add	r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4a09      	ldr	r2, [pc, #36]	; (8004e8c <xTaskPriorityDisinherit+0xf0>)
 8004e68:	441a      	add	r2, r3
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	4619      	mov	r1, r3
 8004e70:	4610      	mov	r0, r2
 8004e72:	f7fe faee 	bl	8003452 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004e76:	2301      	movs	r3, #1
 8004e78:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004e7a:	697b      	ldr	r3, [r7, #20]
    }
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3718      	adds	r7, #24
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	2000019c 	.word	0x2000019c
 8004e88:	2000027c 	.word	0x2000027c
 8004e8c:	200001a0 	.word	0x200001a0

08004e90 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b088      	sub	sp, #32
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d077      	beq.n	8004f98 <vTaskPriorityDisinheritAfterTimeout+0x108>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10a      	bne.n	8004ec6 <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 8004eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb4:	f383 8811 	msr	BASEPRI, r3
 8004eb8:	f3bf 8f6f 	isb	sy
 8004ebc:	f3bf 8f4f 	dsb	sy
 8004ec0:	60fb      	str	r3, [r7, #12]
    }
 8004ec2:	bf00      	nop
 8004ec4:	e7fe      	b.n	8004ec4 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d902      	bls.n	8004ed6 <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	61fb      	str	r3, [r7, #28]
 8004ed4:	e002      	b.n	8004edc <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eda:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee0:	69fa      	ldr	r2, [r7, #28]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d058      	beq.n	8004f98 <vTaskPriorityDisinheritAfterTimeout+0x108>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d153      	bne.n	8004f98 <vTaskPriorityDisinheritAfterTimeout+0x108>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8004ef0:	4b2b      	ldr	r3, [pc, #172]	; (8004fa0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d10a      	bne.n	8004f10 <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 8004efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efe:	f383 8811 	msr	BASEPRI, r3
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	60bb      	str	r3, [r7, #8]
    }
 8004f0c:	bf00      	nop
 8004f0e:	e7fe      	b.n	8004f0e <vTaskPriorityDisinheritAfterTimeout+0x7e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f14:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	69fa      	ldr	r2, [r7, #28]
 8004f1a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	db04      	blt.n	8004f2e <vTaskPriorityDisinheritAfterTimeout+0x9e>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	f1c3 0205 	rsb	r2, r3, #5
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	6959      	ldr	r1, [r3, #20]
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	4613      	mov	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4a19      	ldr	r2, [pc, #100]	; (8004fa4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004f3e:	4413      	add	r3, r2
 8004f40:	4299      	cmp	r1, r3
 8004f42:	d129      	bne.n	8004f98 <vTaskPriorityDisinheritAfterTimeout+0x108>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	3304      	adds	r3, #4
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7fe fadf 	bl	800350c <uxListRemove>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10a      	bne.n	8004f6a <vTaskPriorityDisinheritAfterTimeout+0xda>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f58:	2201      	movs	r2, #1
 8004f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5e:	43da      	mvns	r2, r3
 8004f60:	4b11      	ldr	r3, [pc, #68]	; (8004fa8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4013      	ands	r3, r2
 8004f66:	4a10      	ldr	r2, [pc, #64]	; (8004fa8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004f68:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6e:	2201      	movs	r2, #1
 8004f70:	409a      	lsls	r2, r3
 8004f72:	4b0d      	ldr	r3, [pc, #52]	; (8004fa8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	4a0b      	ldr	r2, [pc, #44]	; (8004fa8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004f7a:	6013      	str	r3, [r2, #0]
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f80:	4613      	mov	r3, r2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4a06      	ldr	r2, [pc, #24]	; (8004fa4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004f8a:	441a      	add	r2, r3
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	3304      	adds	r3, #4
 8004f90:	4619      	mov	r1, r3
 8004f92:	4610      	mov	r0, r2
 8004f94:	f7fe fa5d 	bl	8003452 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004f98:	bf00      	nop
 8004f9a:	3720      	adds	r7, #32
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	2000019c 	.word	0x2000019c
 8004fa4:	200001a0 	.word	0x200001a0
 8004fa8:	2000027c 	.word	0x2000027c

08004fac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8004fac:	b480      	push	{r7}
 8004fae:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8004fb0:	4b07      	ldr	r3, [pc, #28]	; (8004fd0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d004      	beq.n	8004fc2 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8004fb8:	4b05      	ldr	r3, [pc, #20]	; (8004fd0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fbe:	3201      	adds	r2, #1
 8004fc0:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 8004fc2:	4b03      	ldr	r3, [pc, #12]	; (8004fd0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
    }
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr
 8004fd0:	2000019c 	.word	0x2000019c

08004fd4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004fde:	4b29      	ldr	r3, [pc, #164]	; (8005084 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fe4:	4b28      	ldr	r3, [pc, #160]	; (8005088 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	3304      	adds	r3, #4
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7fe fa8e 	bl	800350c <uxListRemove>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10b      	bne.n	800500e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004ff6:	4b24      	ldr	r3, [pc, #144]	; (8005088 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8005002:	43da      	mvns	r2, r3
 8005004:	4b21      	ldr	r3, [pc, #132]	; (800508c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4013      	ands	r3, r2
 800500a:	4a20      	ldr	r2, [pc, #128]	; (800508c <prvAddCurrentTaskToDelayedList+0xb8>)
 800500c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005014:	d10a      	bne.n	800502c <prvAddCurrentTaskToDelayedList+0x58>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d007      	beq.n	800502c <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800501c:	4b1a      	ldr	r3, [pc, #104]	; (8005088 <prvAddCurrentTaskToDelayedList+0xb4>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3304      	adds	r3, #4
 8005022:	4619      	mov	r1, r3
 8005024:	481a      	ldr	r0, [pc, #104]	; (8005090 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005026:	f7fe fa14 	bl	8003452 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800502a:	e026      	b.n	800507a <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4413      	add	r3, r2
 8005032:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005034:	4b14      	ldr	r3, [pc, #80]	; (8005088 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	429a      	cmp	r2, r3
 8005042:	d209      	bcs.n	8005058 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005044:	4b13      	ldr	r3, [pc, #76]	; (8005094 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	4b0f      	ldr	r3, [pc, #60]	; (8005088 <prvAddCurrentTaskToDelayedList+0xb4>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	3304      	adds	r3, #4
 800504e:	4619      	mov	r1, r3
 8005050:	4610      	mov	r0, r2
 8005052:	f7fe fa22 	bl	800349a <vListInsert>
}
 8005056:	e010      	b.n	800507a <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005058:	4b0f      	ldr	r3, [pc, #60]	; (8005098 <prvAddCurrentTaskToDelayedList+0xc4>)
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	4b0a      	ldr	r3, [pc, #40]	; (8005088 <prvAddCurrentTaskToDelayedList+0xb4>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	3304      	adds	r3, #4
 8005062:	4619      	mov	r1, r3
 8005064:	4610      	mov	r0, r2
 8005066:	f7fe fa18 	bl	800349a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800506a:	4b0c      	ldr	r3, [pc, #48]	; (800509c <prvAddCurrentTaskToDelayedList+0xc8>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	429a      	cmp	r2, r3
 8005072:	d202      	bcs.n	800507a <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8005074:	4a09      	ldr	r2, [pc, #36]	; (800509c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	6013      	str	r3, [r2, #0]
}
 800507a:	bf00      	nop
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	20000278 	.word	0x20000278
 8005088:	2000019c 	.word	0x2000019c
 800508c:	2000027c 	.word	0x2000027c
 8005090:	20000260 	.word	0x20000260
 8005094:	20000230 	.word	0x20000230
 8005098:	2000022c 	.word	0x2000022c
 800509c:	20000294 	.word	0x20000294

080050a0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80050a6:	2300      	movs	r3, #0
 80050a8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80050aa:	f000 fad5 	bl	8005658 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80050ae:	4b11      	ldr	r3, [pc, #68]	; (80050f4 <xTimerCreateTimerTask+0x54>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00b      	beq.n	80050ce <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80050b6:	4b10      	ldr	r3, [pc, #64]	; (80050f8 <xTimerCreateTimerTask+0x58>)
 80050b8:	9301      	str	r3, [sp, #4]
 80050ba:	2302      	movs	r3, #2
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	2300      	movs	r3, #0
 80050c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80050c4:	490d      	ldr	r1, [pc, #52]	; (80050fc <xTimerCreateTimerTask+0x5c>)
 80050c6:	480e      	ldr	r0, [pc, #56]	; (8005100 <xTimerCreateTimerTask+0x60>)
 80050c8:	f7ff f84e 	bl	8004168 <xTaskCreate>
 80050cc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10a      	bne.n	80050ea <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80050d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d8:	f383 8811 	msr	BASEPRI, r3
 80050dc:	f3bf 8f6f 	isb	sy
 80050e0:	f3bf 8f4f 	dsb	sy
 80050e4:	603b      	str	r3, [r7, #0]
    }
 80050e6:	bf00      	nop
 80050e8:	e7fe      	b.n	80050e8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80050ea:	687b      	ldr	r3, [r7, #4]
    }
 80050ec:	4618      	mov	r0, r3
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	200002d0 	.word	0x200002d0
 80050f8:	200002d4 	.word	0x200002d4
 80050fc:	08007478 	.word	0x08007478
 8005100:	08005239 	.word	0x08005239

08005104 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8005104:	b580      	push	{r7, lr}
 8005106:	b08a      	sub	sp, #40	; 0x28
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
 8005110:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8005112:	2300      	movs	r3, #0
 8005114:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10a      	bne.n	8005132 <xTimerGenericCommand+0x2e>
        __asm volatile
 800511c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005120:	f383 8811 	msr	BASEPRI, r3
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	623b      	str	r3, [r7, #32]
    }
 800512e:	bf00      	nop
 8005130:	e7fe      	b.n	8005130 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8005132:	4b1a      	ldr	r3, [pc, #104]	; (800519c <xTimerGenericCommand+0x98>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d02a      	beq.n	8005190 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	2b05      	cmp	r3, #5
 800514a:	dc18      	bgt.n	800517e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800514c:	f7ff fd92 	bl	8004c74 <xTaskGetSchedulerState>
 8005150:	4603      	mov	r3, r0
 8005152:	2b02      	cmp	r3, #2
 8005154:	d109      	bne.n	800516a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005156:	4b11      	ldr	r3, [pc, #68]	; (800519c <xTimerGenericCommand+0x98>)
 8005158:	6818      	ldr	r0, [r3, #0]
 800515a:	f107 0114 	add.w	r1, r7, #20
 800515e:	2300      	movs	r3, #0
 8005160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005162:	f7fe fae7 	bl	8003734 <xQueueGenericSend>
 8005166:	6278      	str	r0, [r7, #36]	; 0x24
 8005168:	e012      	b.n	8005190 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800516a:	4b0c      	ldr	r3, [pc, #48]	; (800519c <xTimerGenericCommand+0x98>)
 800516c:	6818      	ldr	r0, [r3, #0]
 800516e:	f107 0114 	add.w	r1, r7, #20
 8005172:	2300      	movs	r3, #0
 8005174:	2200      	movs	r2, #0
 8005176:	f7fe fadd 	bl	8003734 <xQueueGenericSend>
 800517a:	6278      	str	r0, [r7, #36]	; 0x24
 800517c:	e008      	b.n	8005190 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800517e:	4b07      	ldr	r3, [pc, #28]	; (800519c <xTimerGenericCommand+0x98>)
 8005180:	6818      	ldr	r0, [r3, #0]
 8005182:	f107 0114 	add.w	r1, r7, #20
 8005186:	2300      	movs	r3, #0
 8005188:	683a      	ldr	r2, [r7, #0]
 800518a:	f7fe fbd1 	bl	8003930 <xQueueGenericSendFromISR>
 800518e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8005192:	4618      	mov	r0, r3
 8005194:	3728      	adds	r7, #40	; 0x28
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	200002d0 	.word	0x200002d0

080051a0 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b088      	sub	sp, #32
 80051a4:	af02      	add	r7, sp, #8
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051aa:	4b22      	ldr	r3, [pc, #136]	; (8005234 <prvProcessExpiredTimer+0x94>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	3304      	adds	r3, #4
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7fe f9a7 	bl	800350c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051c4:	f003 0304 	and.w	r3, r3, #4
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d022      	beq.n	8005212 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	699a      	ldr	r2, [r3, #24]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	18d1      	adds	r1, r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	6978      	ldr	r0, [r7, #20]
 80051da:	f000 f8d1 	bl	8005380 <prvInsertTimerInActiveList>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d01f      	beq.n	8005224 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80051e4:	2300      	movs	r3, #0
 80051e6:	9300      	str	r3, [sp, #0]
 80051e8:	2300      	movs	r3, #0
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	2100      	movs	r1, #0
 80051ee:	6978      	ldr	r0, [r7, #20]
 80051f0:	f7ff ff88 	bl	8005104 <xTimerGenericCommand>
 80051f4:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d113      	bne.n	8005224 <prvProcessExpiredTimer+0x84>
        __asm volatile
 80051fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005200:	f383 8811 	msr	BASEPRI, r3
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	60fb      	str	r3, [r7, #12]
    }
 800520e:	bf00      	nop
 8005210:	e7fe      	b.n	8005210 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005218:	f023 0301 	bic.w	r3, r3, #1
 800521c:	b2da      	uxtb	r2, r3
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	6a1b      	ldr	r3, [r3, #32]
 8005228:	6978      	ldr	r0, [r7, #20]
 800522a:	4798      	blx	r3
    }
 800522c:	bf00      	nop
 800522e:	3718      	adds	r7, #24
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	200002c8 	.word	0x200002c8

08005238 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005240:	f107 0308 	add.w	r3, r7, #8
 8005244:	4618      	mov	r0, r3
 8005246:	f000 f857 	bl	80052f8 <prvGetNextExpireTime>
 800524a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	4619      	mov	r1, r3
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f000 f803 	bl	800525c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8005256:	f000 f8d5 	bl	8005404 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800525a:	e7f1      	b.n	8005240 <prvTimerTask+0x8>

0800525c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8005266:	f7ff f94b 	bl	8004500 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800526a:	f107 0308 	add.w	r3, r7, #8
 800526e:	4618      	mov	r0, r3
 8005270:	f000 f866 	bl	8005340 <prvSampleTimeNow>
 8005274:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d130      	bne.n	80052de <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10a      	bne.n	8005298 <prvProcessTimerOrBlockTask+0x3c>
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	429a      	cmp	r2, r3
 8005288:	d806      	bhi.n	8005298 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800528a:	f7ff f947 	bl	800451c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800528e:	68f9      	ldr	r1, [r7, #12]
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f7ff ff85 	bl	80051a0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8005296:	e024      	b.n	80052e2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d008      	beq.n	80052b0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800529e:	4b13      	ldr	r3, [pc, #76]	; (80052ec <prvProcessTimerOrBlockTask+0x90>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <prvProcessTimerOrBlockTask+0x50>
 80052a8:	2301      	movs	r3, #1
 80052aa:	e000      	b.n	80052ae <prvProcessTimerOrBlockTask+0x52>
 80052ac:	2300      	movs	r3, #0
 80052ae:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80052b0:	4b0f      	ldr	r3, [pc, #60]	; (80052f0 <prvProcessTimerOrBlockTask+0x94>)
 80052b2:	6818      	ldr	r0, [r3, #0]
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	4619      	mov	r1, r3
 80052be:	f7fe ff1f 	bl	8004100 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80052c2:	f7ff f92b 	bl	800451c <xTaskResumeAll>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10a      	bne.n	80052e2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80052cc:	4b09      	ldr	r3, [pc, #36]	; (80052f4 <prvProcessTimerOrBlockTask+0x98>)
 80052ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052d2:	601a      	str	r2, [r3, #0]
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	f3bf 8f6f 	isb	sy
    }
 80052dc:	e001      	b.n	80052e2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80052de:	f7ff f91d 	bl	800451c <xTaskResumeAll>
    }
 80052e2:	bf00      	nop
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	200002cc 	.word	0x200002cc
 80052f0:	200002d0 	.word	0x200002d0
 80052f4:	e000ed04 	.word	0xe000ed04

080052f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005300:	4b0e      	ldr	r3, [pc, #56]	; (800533c <prvGetNextExpireTime+0x44>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <prvGetNextExpireTime+0x16>
 800530a:	2201      	movs	r2, #1
 800530c:	e000      	b.n	8005310 <prvGetNextExpireTime+0x18>
 800530e:	2200      	movs	r2, #0
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d105      	bne.n	8005328 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800531c:	4b07      	ldr	r3, [pc, #28]	; (800533c <prvGetNextExpireTime+0x44>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	60fb      	str	r3, [r7, #12]
 8005326:	e001      	b.n	800532c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005328:	2300      	movs	r3, #0
 800532a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800532c:	68fb      	ldr	r3, [r7, #12]
    }
 800532e:	4618      	mov	r0, r3
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	200002c8 	.word	0x200002c8

08005340 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005348:	f7ff f984 	bl	8004654 <xTaskGetTickCount>
 800534c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800534e:	4b0b      	ldr	r3, [pc, #44]	; (800537c <prvSampleTimeNow+0x3c>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	429a      	cmp	r2, r3
 8005356:	d205      	bcs.n	8005364 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005358:	f000 f91a 	bl	8005590 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	e002      	b.n	800536a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800536a:	4a04      	ldr	r2, [pc, #16]	; (800537c <prvSampleTimeNow+0x3c>)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005370:	68fb      	ldr	r3, [r7, #12]
    }
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	200002d8 	.word	0x200002d8

08005380 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
 800538c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800538e:	2300      	movs	r3, #0
 8005390:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d812      	bhi.n	80053cc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	1ad2      	subs	r2, r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d302      	bcc.n	80053ba <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80053b4:	2301      	movs	r3, #1
 80053b6:	617b      	str	r3, [r7, #20]
 80053b8:	e01b      	b.n	80053f2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80053ba:	4b10      	ldr	r3, [pc, #64]	; (80053fc <prvInsertTimerInActiveList+0x7c>)
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	3304      	adds	r3, #4
 80053c2:	4619      	mov	r1, r3
 80053c4:	4610      	mov	r0, r2
 80053c6:	f7fe f868 	bl	800349a <vListInsert>
 80053ca:	e012      	b.n	80053f2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d206      	bcs.n	80053e2 <prvInsertTimerInActiveList+0x62>
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d302      	bcc.n	80053e2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80053dc:	2301      	movs	r3, #1
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	e007      	b.n	80053f2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80053e2:	4b07      	ldr	r3, [pc, #28]	; (8005400 <prvInsertTimerInActiveList+0x80>)
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	3304      	adds	r3, #4
 80053ea:	4619      	mov	r1, r3
 80053ec:	4610      	mov	r0, r2
 80053ee:	f7fe f854 	bl	800349a <vListInsert>
            }
        }

        return xProcessTimerNow;
 80053f2:	697b      	ldr	r3, [r7, #20]
    }
 80053f4:	4618      	mov	r0, r3
 80053f6:	3718      	adds	r7, #24
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	200002cc 	.word	0x200002cc
 8005400:	200002c8 	.word	0x200002c8

08005404 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005404:	b580      	push	{r7, lr}
 8005406:	b08c      	sub	sp, #48	; 0x30
 8005408:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800540a:	e0ae      	b.n	800556a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	2b00      	cmp	r3, #0
 8005410:	f2c0 80aa 	blt.w	8005568 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541a:	695b      	ldr	r3, [r3, #20]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d004      	beq.n	800542a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	3304      	adds	r3, #4
 8005424:	4618      	mov	r0, r3
 8005426:	f7fe f871 	bl	800350c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800542a:	1d3b      	adds	r3, r7, #4
 800542c:	4618      	mov	r0, r3
 800542e:	f7ff ff87 	bl	8005340 <prvSampleTimeNow>
 8005432:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	2b09      	cmp	r3, #9
 8005438:	f200 8097 	bhi.w	800556a <prvProcessReceivedCommands+0x166>
 800543c:	a201      	add	r2, pc, #4	; (adr r2, 8005444 <prvProcessReceivedCommands+0x40>)
 800543e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005442:	bf00      	nop
 8005444:	0800546d 	.word	0x0800546d
 8005448:	0800546d 	.word	0x0800546d
 800544c:	0800546d 	.word	0x0800546d
 8005450:	080054e1 	.word	0x080054e1
 8005454:	080054f5 	.word	0x080054f5
 8005458:	0800553f 	.word	0x0800553f
 800545c:	0800546d 	.word	0x0800546d
 8005460:	0800546d 	.word	0x0800546d
 8005464:	080054e1 	.word	0x080054e1
 8005468:	080054f5 	.word	0x080054f5
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005472:	f043 0301 	orr.w	r3, r3, #1
 8005476:	b2da      	uxtb	r2, r3
 8005478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	18d1      	adds	r1, r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6a3a      	ldr	r2, [r7, #32]
 800548a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800548c:	f7ff ff78 	bl	8005380 <prvInsertTimerInActiveList>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d069      	beq.n	800556a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800549c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d05e      	beq.n	800556a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	441a      	add	r2, r3
 80054b4:	2300      	movs	r3, #0
 80054b6:	9300      	str	r3, [sp, #0]
 80054b8:	2300      	movs	r3, #0
 80054ba:	2100      	movs	r1, #0
 80054bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054be:	f7ff fe21 	bl	8005104 <xTimerGenericCommand>
 80054c2:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d14f      	bne.n	800556a <prvProcessReceivedCommands+0x166>
        __asm volatile
 80054ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	61bb      	str	r3, [r7, #24]
    }
 80054dc:	bf00      	nop
 80054de:	e7fe      	b.n	80054de <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054e6:	f023 0301 	bic.w	r3, r3, #1
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80054f2:	e03a      	b.n	800556a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054fa:	f043 0301 	orr.w	r3, r3, #1
 80054fe:	b2da      	uxtb	r2, r3
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10a      	bne.n	800552a <prvProcessReceivedCommands+0x126>
        __asm volatile
 8005514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005518:	f383 8811 	msr	BASEPRI, r3
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	617b      	str	r3, [r7, #20]
    }
 8005526:	bf00      	nop
 8005528:	e7fe      	b.n	8005528 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	699a      	ldr	r2, [r3, #24]
 800552e:	6a3b      	ldr	r3, [r7, #32]
 8005530:	18d1      	adds	r1, r2, r3
 8005532:	6a3b      	ldr	r3, [r7, #32]
 8005534:	6a3a      	ldr	r2, [r7, #32]
 8005536:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005538:	f7ff ff22 	bl	8005380 <prvInsertTimerInActiveList>
                        break;
 800553c:	e015      	b.n	800556a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005540:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d103      	bne.n	8005554 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 800554c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800554e:	f000 fbed 	bl	8005d2c <vPortFree>
 8005552:	e00a      	b.n	800556a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005556:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800555a:	f023 0301 	bic.w	r3, r3, #1
 800555e:	b2da      	uxtb	r2, r3
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005562:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005566:	e000      	b.n	800556a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8005568:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800556a:	4b08      	ldr	r3, [pc, #32]	; (800558c <prvProcessReceivedCommands+0x188>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f107 0108 	add.w	r1, r7, #8
 8005572:	2200      	movs	r2, #0
 8005574:	4618      	mov	r0, r3
 8005576:	f7fe fa85 	bl	8003a84 <xQueueReceive>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	f47f af45 	bne.w	800540c <prvProcessReceivedCommands+0x8>
        }
    }
 8005582:	bf00      	nop
 8005584:	bf00      	nop
 8005586:	3728      	adds	r7, #40	; 0x28
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	200002d0 	.word	0x200002d0

08005590 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005590:	b580      	push	{r7, lr}
 8005592:	b088      	sub	sp, #32
 8005594:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005596:	e048      	b.n	800562a <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005598:	4b2d      	ldr	r3, [pc, #180]	; (8005650 <prvSwitchTimerLists+0xc0>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055a2:	4b2b      	ldr	r3, [pc, #172]	; (8005650 <prvSwitchTimerLists+0xc0>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	3304      	adds	r3, #4
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7fd ffab 	bl	800350c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055c4:	f003 0304 	and.w	r3, r3, #4
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d02e      	beq.n	800562a <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	4413      	add	r3, r2
 80055d4:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d90e      	bls.n	80055fc <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80055ea:	4b19      	ldr	r3, [pc, #100]	; (8005650 <prvSwitchTimerLists+0xc0>)
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	3304      	adds	r3, #4
 80055f2:	4619      	mov	r1, r3
 80055f4:	4610      	mov	r0, r2
 80055f6:	f7fd ff50 	bl	800349a <vListInsert>
 80055fa:	e016      	b.n	800562a <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80055fc:	2300      	movs	r3, #0
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	2300      	movs	r3, #0
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	2100      	movs	r1, #0
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f7ff fd7c 	bl	8005104 <xTimerGenericCommand>
 800560c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d10a      	bne.n	800562a <prvSwitchTimerLists+0x9a>
        __asm volatile
 8005614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005618:	f383 8811 	msr	BASEPRI, r3
 800561c:	f3bf 8f6f 	isb	sy
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	603b      	str	r3, [r7, #0]
    }
 8005626:	bf00      	nop
 8005628:	e7fe      	b.n	8005628 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800562a:	4b09      	ldr	r3, [pc, #36]	; (8005650 <prvSwitchTimerLists+0xc0>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1b1      	bne.n	8005598 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8005634:	4b06      	ldr	r3, [pc, #24]	; (8005650 <prvSwitchTimerLists+0xc0>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800563a:	4b06      	ldr	r3, [pc, #24]	; (8005654 <prvSwitchTimerLists+0xc4>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a04      	ldr	r2, [pc, #16]	; (8005650 <prvSwitchTimerLists+0xc0>)
 8005640:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005642:	4a04      	ldr	r2, [pc, #16]	; (8005654 <prvSwitchTimerLists+0xc4>)
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	6013      	str	r3, [r2, #0]
    }
 8005648:	bf00      	nop
 800564a:	3718      	adds	r7, #24
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	200002c8 	.word	0x200002c8
 8005654:	200002cc 	.word	0x200002cc

08005658 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005658:	b580      	push	{r7, lr}
 800565a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800565c:	f000 f964 	bl	8005928 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005660:	4b12      	ldr	r3, [pc, #72]	; (80056ac <prvCheckForValidListAndQueue+0x54>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d11d      	bne.n	80056a4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005668:	4811      	ldr	r0, [pc, #68]	; (80056b0 <prvCheckForValidListAndQueue+0x58>)
 800566a:	f7fd fec5 	bl	80033f8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800566e:	4811      	ldr	r0, [pc, #68]	; (80056b4 <prvCheckForValidListAndQueue+0x5c>)
 8005670:	f7fd fec2 	bl	80033f8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005674:	4b10      	ldr	r3, [pc, #64]	; (80056b8 <prvCheckForValidListAndQueue+0x60>)
 8005676:	4a0e      	ldr	r2, [pc, #56]	; (80056b0 <prvCheckForValidListAndQueue+0x58>)
 8005678:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800567a:	4b10      	ldr	r3, [pc, #64]	; (80056bc <prvCheckForValidListAndQueue+0x64>)
 800567c:	4a0d      	ldr	r2, [pc, #52]	; (80056b4 <prvCheckForValidListAndQueue+0x5c>)
 800567e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005680:	2200      	movs	r2, #0
 8005682:	210c      	movs	r1, #12
 8005684:	200a      	movs	r0, #10
 8005686:	f7fd ffd3 	bl	8003630 <xQueueGenericCreate>
 800568a:	4603      	mov	r3, r0
 800568c:	4a07      	ldr	r2, [pc, #28]	; (80056ac <prvCheckForValidListAndQueue+0x54>)
 800568e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8005690:	4b06      	ldr	r3, [pc, #24]	; (80056ac <prvCheckForValidListAndQueue+0x54>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d005      	beq.n	80056a4 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005698:	4b04      	ldr	r3, [pc, #16]	; (80056ac <prvCheckForValidListAndQueue+0x54>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4908      	ldr	r1, [pc, #32]	; (80056c0 <prvCheckForValidListAndQueue+0x68>)
 800569e:	4618      	mov	r0, r3
 80056a0:	f7fe fd04 	bl	80040ac <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80056a4:	f000 f970 	bl	8005988 <vPortExitCritical>
    }
 80056a8:	bf00      	nop
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	200002d0 	.word	0x200002d0
 80056b0:	200002a0 	.word	0x200002a0
 80056b4:	200002b4 	.word	0x200002b4
 80056b8:	200002c8 	.word	0x200002c8
 80056bc:	200002cc 	.word	0x200002cc
 80056c0:	08007480 	.word	0x08007480

080056c4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	3b04      	subs	r3, #4
 80056d4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80056dc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	3b04      	subs	r3, #4
 80056e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	f023 0201 	bic.w	r2, r3, #1
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	3b04      	subs	r3, #4
 80056f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80056f4:	4a0c      	ldr	r2, [pc, #48]	; (8005728 <pxPortInitialiseStack+0x64>)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	3b14      	subs	r3, #20
 80056fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	3b04      	subs	r3, #4
 800570a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f06f 0202 	mvn.w	r2, #2
 8005712:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	3b20      	subs	r3, #32
 8005718:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800571a:	68fb      	ldr	r3, [r7, #12]
}
 800571c:	4618      	mov	r0, r3
 800571e:	3714      	adds	r7, #20
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr
 8005728:	0800572d 	.word	0x0800572d

0800572c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005732:	2300      	movs	r3, #0
 8005734:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005736:	4b12      	ldr	r3, [pc, #72]	; (8005780 <prvTaskExitError+0x54>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800573e:	d00a      	beq.n	8005756 <prvTaskExitError+0x2a>
        __asm volatile
 8005740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005744:	f383 8811 	msr	BASEPRI, r3
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	60fb      	str	r3, [r7, #12]
    }
 8005752:	bf00      	nop
 8005754:	e7fe      	b.n	8005754 <prvTaskExitError+0x28>
        __asm volatile
 8005756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575a:	f383 8811 	msr	BASEPRI, r3
 800575e:	f3bf 8f6f 	isb	sy
 8005762:	f3bf 8f4f 	dsb	sy
 8005766:	60bb      	str	r3, [r7, #8]
    }
 8005768:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800576a:	bf00      	nop
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d0fc      	beq.n	800576c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005772:	bf00      	nop
 8005774:	bf00      	nop
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	20000010 	.word	0x20000010
	...

08005790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005790:	4b07      	ldr	r3, [pc, #28]	; (80057b0 <pxCurrentTCBConst2>)
 8005792:	6819      	ldr	r1, [r3, #0]
 8005794:	6808      	ldr	r0, [r1, #0]
 8005796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800579a:	f380 8809 	msr	PSP, r0
 800579e:	f3bf 8f6f 	isb	sy
 80057a2:	f04f 0000 	mov.w	r0, #0
 80057a6:	f380 8811 	msr	BASEPRI, r0
 80057aa:	4770      	bx	lr
 80057ac:	f3af 8000 	nop.w

080057b0 <pxCurrentTCBConst2>:
 80057b0:	2000019c 	.word	0x2000019c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80057b4:	bf00      	nop
 80057b6:	bf00      	nop

080057b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80057b8:	4808      	ldr	r0, [pc, #32]	; (80057dc <prvPortStartFirstTask+0x24>)
 80057ba:	6800      	ldr	r0, [r0, #0]
 80057bc:	6800      	ldr	r0, [r0, #0]
 80057be:	f380 8808 	msr	MSP, r0
 80057c2:	f04f 0000 	mov.w	r0, #0
 80057c6:	f380 8814 	msr	CONTROL, r0
 80057ca:	b662      	cpsie	i
 80057cc:	b661      	cpsie	f
 80057ce:	f3bf 8f4f 	dsb	sy
 80057d2:	f3bf 8f6f 	isb	sy
 80057d6:	df00      	svc	0
 80057d8:	bf00      	nop
 80057da:	0000      	.short	0x0000
 80057dc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80057e0:	bf00      	nop
 80057e2:	bf00      	nop

080057e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80057ea:	4b46      	ldr	r3, [pc, #280]	; (8005904 <xPortStartScheduler+0x120>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a46      	ldr	r2, [pc, #280]	; (8005908 <xPortStartScheduler+0x124>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d10a      	bne.n	800580a <xPortStartScheduler+0x26>
        __asm volatile
 80057f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f8:	f383 8811 	msr	BASEPRI, r3
 80057fc:	f3bf 8f6f 	isb	sy
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	613b      	str	r3, [r7, #16]
    }
 8005806:	bf00      	nop
 8005808:	e7fe      	b.n	8005808 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800580a:	4b3e      	ldr	r3, [pc, #248]	; (8005904 <xPortStartScheduler+0x120>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a3f      	ldr	r2, [pc, #252]	; (800590c <xPortStartScheduler+0x128>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d10a      	bne.n	800582a <xPortStartScheduler+0x46>
        __asm volatile
 8005814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005818:	f383 8811 	msr	BASEPRI, r3
 800581c:	f3bf 8f6f 	isb	sy
 8005820:	f3bf 8f4f 	dsb	sy
 8005824:	60fb      	str	r3, [r7, #12]
    }
 8005826:	bf00      	nop
 8005828:	e7fe      	b.n	8005828 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800582a:	4b39      	ldr	r3, [pc, #228]	; (8005910 <xPortStartScheduler+0x12c>)
 800582c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	b2db      	uxtb	r3, r3
 8005834:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	22ff      	movs	r2, #255	; 0xff
 800583a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	b2db      	uxtb	r3, r3
 8005842:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005844:	78fb      	ldrb	r3, [r7, #3]
 8005846:	b2db      	uxtb	r3, r3
 8005848:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800584c:	b2da      	uxtb	r2, r3
 800584e:	4b31      	ldr	r3, [pc, #196]	; (8005914 <xPortStartScheduler+0x130>)
 8005850:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005852:	4b31      	ldr	r3, [pc, #196]	; (8005918 <xPortStartScheduler+0x134>)
 8005854:	2207      	movs	r2, #7
 8005856:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005858:	e009      	b.n	800586e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800585a:	4b2f      	ldr	r3, [pc, #188]	; (8005918 <xPortStartScheduler+0x134>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	3b01      	subs	r3, #1
 8005860:	4a2d      	ldr	r2, [pc, #180]	; (8005918 <xPortStartScheduler+0x134>)
 8005862:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005864:	78fb      	ldrb	r3, [r7, #3]
 8005866:	b2db      	uxtb	r3, r3
 8005868:	005b      	lsls	r3, r3, #1
 800586a:	b2db      	uxtb	r3, r3
 800586c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800586e:	78fb      	ldrb	r3, [r7, #3]
 8005870:	b2db      	uxtb	r3, r3
 8005872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005876:	2b80      	cmp	r3, #128	; 0x80
 8005878:	d0ef      	beq.n	800585a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800587a:	4b27      	ldr	r3, [pc, #156]	; (8005918 <xPortStartScheduler+0x134>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f1c3 0307 	rsb	r3, r3, #7
 8005882:	2b04      	cmp	r3, #4
 8005884:	d00a      	beq.n	800589c <xPortStartScheduler+0xb8>
        __asm volatile
 8005886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588a:	f383 8811 	msr	BASEPRI, r3
 800588e:	f3bf 8f6f 	isb	sy
 8005892:	f3bf 8f4f 	dsb	sy
 8005896:	60bb      	str	r3, [r7, #8]
    }
 8005898:	bf00      	nop
 800589a:	e7fe      	b.n	800589a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800589c:	4b1e      	ldr	r3, [pc, #120]	; (8005918 <xPortStartScheduler+0x134>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	021b      	lsls	r3, r3, #8
 80058a2:	4a1d      	ldr	r2, [pc, #116]	; (8005918 <xPortStartScheduler+0x134>)
 80058a4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80058a6:	4b1c      	ldr	r3, [pc, #112]	; (8005918 <xPortStartScheduler+0x134>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80058ae:	4a1a      	ldr	r2, [pc, #104]	; (8005918 <xPortStartScheduler+0x134>)
 80058b0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	b2da      	uxtb	r2, r3
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80058ba:	4b18      	ldr	r3, [pc, #96]	; (800591c <xPortStartScheduler+0x138>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a17      	ldr	r2, [pc, #92]	; (800591c <xPortStartScheduler+0x138>)
 80058c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058c4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80058c6:	4b15      	ldr	r3, [pc, #84]	; (800591c <xPortStartScheduler+0x138>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a14      	ldr	r2, [pc, #80]	; (800591c <xPortStartScheduler+0x138>)
 80058cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80058d0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80058d2:	f000 f8db 	bl	8005a8c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80058d6:	4b12      	ldr	r3, [pc, #72]	; (8005920 <xPortStartScheduler+0x13c>)
 80058d8:	2200      	movs	r2, #0
 80058da:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80058dc:	f000 f8fa 	bl	8005ad4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80058e0:	4b10      	ldr	r3, [pc, #64]	; (8005924 <xPortStartScheduler+0x140>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a0f      	ldr	r2, [pc, #60]	; (8005924 <xPortStartScheduler+0x140>)
 80058e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80058ea:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80058ec:	f7ff ff64 	bl	80057b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80058f0:	f7fe ff78 	bl	80047e4 <vTaskSwitchContext>
    prvTaskExitError();
 80058f4:	f7ff ff1a 	bl	800572c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3718      	adds	r7, #24
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	e000ed00 	.word	0xe000ed00
 8005908:	410fc271 	.word	0x410fc271
 800590c:	410fc270 	.word	0x410fc270
 8005910:	e000e400 	.word	0xe000e400
 8005914:	200002dc 	.word	0x200002dc
 8005918:	200002e0 	.word	0x200002e0
 800591c:	e000ed20 	.word	0xe000ed20
 8005920:	20000010 	.word	0x20000010
 8005924:	e000ef34 	.word	0xe000ef34

08005928 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
        __asm volatile
 800592e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005932:	f383 8811 	msr	BASEPRI, r3
 8005936:	f3bf 8f6f 	isb	sy
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	607b      	str	r3, [r7, #4]
    }
 8005940:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005942:	4b0f      	ldr	r3, [pc, #60]	; (8005980 <vPortEnterCritical+0x58>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	3301      	adds	r3, #1
 8005948:	4a0d      	ldr	r2, [pc, #52]	; (8005980 <vPortEnterCritical+0x58>)
 800594a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800594c:	4b0c      	ldr	r3, [pc, #48]	; (8005980 <vPortEnterCritical+0x58>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d10f      	bne.n	8005974 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005954:	4b0b      	ldr	r3, [pc, #44]	; (8005984 <vPortEnterCritical+0x5c>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00a      	beq.n	8005974 <vPortEnterCritical+0x4c>
        __asm volatile
 800595e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005962:	f383 8811 	msr	BASEPRI, r3
 8005966:	f3bf 8f6f 	isb	sy
 800596a:	f3bf 8f4f 	dsb	sy
 800596e:	603b      	str	r3, [r7, #0]
    }
 8005970:	bf00      	nop
 8005972:	e7fe      	b.n	8005972 <vPortEnterCritical+0x4a>
    }
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	20000010 	.word	0x20000010
 8005984:	e000ed04 	.word	0xe000ed04

08005988 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800598e:	4b12      	ldr	r3, [pc, #72]	; (80059d8 <vPortExitCritical+0x50>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10a      	bne.n	80059ac <vPortExitCritical+0x24>
        __asm volatile
 8005996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599a:	f383 8811 	msr	BASEPRI, r3
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f3bf 8f4f 	dsb	sy
 80059a6:	607b      	str	r3, [r7, #4]
    }
 80059a8:	bf00      	nop
 80059aa:	e7fe      	b.n	80059aa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80059ac:	4b0a      	ldr	r3, [pc, #40]	; (80059d8 <vPortExitCritical+0x50>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	3b01      	subs	r3, #1
 80059b2:	4a09      	ldr	r2, [pc, #36]	; (80059d8 <vPortExitCritical+0x50>)
 80059b4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80059b6:	4b08      	ldr	r3, [pc, #32]	; (80059d8 <vPortExitCritical+0x50>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d105      	bne.n	80059ca <vPortExitCritical+0x42>
 80059be:	2300      	movs	r3, #0
 80059c0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	f383 8811 	msr	BASEPRI, r3
    }
 80059c8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80059ca:	bf00      	nop
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	20000010 	.word	0x20000010
 80059dc:	00000000 	.word	0x00000000

080059e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80059e0:	f3ef 8009 	mrs	r0, PSP
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	4b15      	ldr	r3, [pc, #84]	; (8005a40 <pxCurrentTCBConst>)
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	f01e 0f10 	tst.w	lr, #16
 80059f0:	bf08      	it	eq
 80059f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80059f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059fa:	6010      	str	r0, [r2, #0]
 80059fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005a00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005a04:	f380 8811 	msr	BASEPRI, r0
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f7fe fee8 	bl	80047e4 <vTaskSwitchContext>
 8005a14:	f04f 0000 	mov.w	r0, #0
 8005a18:	f380 8811 	msr	BASEPRI, r0
 8005a1c:	bc09      	pop	{r0, r3}
 8005a1e:	6819      	ldr	r1, [r3, #0]
 8005a20:	6808      	ldr	r0, [r1, #0]
 8005a22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a26:	f01e 0f10 	tst.w	lr, #16
 8005a2a:	bf08      	it	eq
 8005a2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005a30:	f380 8809 	msr	PSP, r0
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	f3af 8000 	nop.w

08005a40 <pxCurrentTCBConst>:
 8005a40:	2000019c 	.word	0x2000019c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005a44:	bf00      	nop
 8005a46:	bf00      	nop

08005a48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
        __asm volatile
 8005a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a52:	f383 8811 	msr	BASEPRI, r3
 8005a56:	f3bf 8f6f 	isb	sy
 8005a5a:	f3bf 8f4f 	dsb	sy
 8005a5e:	607b      	str	r3, [r7, #4]
    }
 8005a60:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005a62:	f7fe fe07 	bl	8004674 <xTaskIncrementTick>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d003      	beq.n	8005a74 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a6c:	4b06      	ldr	r3, [pc, #24]	; (8005a88 <SysTick_Handler+0x40>)
 8005a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a72:	601a      	str	r2, [r3, #0]
 8005a74:	2300      	movs	r3, #0
 8005a76:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	f383 8811 	msr	BASEPRI, r3
    }
 8005a7e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8005a80:	bf00      	nop
 8005a82:	3708      	adds	r7, #8
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	e000ed04 	.word	0xe000ed04

08005a8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a90:	4b0b      	ldr	r3, [pc, #44]	; (8005ac0 <vPortSetupTimerInterrupt+0x34>)
 8005a92:	2200      	movs	r2, #0
 8005a94:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a96:	4b0b      	ldr	r3, [pc, #44]	; (8005ac4 <vPortSetupTimerInterrupt+0x38>)
 8005a98:	2200      	movs	r2, #0
 8005a9a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a9c:	4b0a      	ldr	r3, [pc, #40]	; (8005ac8 <vPortSetupTimerInterrupt+0x3c>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a0a      	ldr	r2, [pc, #40]	; (8005acc <vPortSetupTimerInterrupt+0x40>)
 8005aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa6:	099b      	lsrs	r3, r3, #6
 8005aa8:	4a09      	ldr	r2, [pc, #36]	; (8005ad0 <vPortSetupTimerInterrupt+0x44>)
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005aae:	4b04      	ldr	r3, [pc, #16]	; (8005ac0 <vPortSetupTimerInterrupt+0x34>)
 8005ab0:	2207      	movs	r2, #7
 8005ab2:	601a      	str	r2, [r3, #0]
}
 8005ab4:	bf00      	nop
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	e000e010 	.word	0xe000e010
 8005ac4:	e000e018 	.word	0xe000e018
 8005ac8:	20000000 	.word	0x20000000
 8005acc:	10624dd3 	.word	0x10624dd3
 8005ad0:	e000e014 	.word	0xe000e014

08005ad4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005ad4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005ae4 <vPortEnableVFP+0x10>
 8005ad8:	6801      	ldr	r1, [r0, #0]
 8005ada:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005ade:	6001      	str	r1, [r0, #0]
 8005ae0:	4770      	bx	lr
 8005ae2:	0000      	.short	0x0000
 8005ae4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005ae8:	bf00      	nop
 8005aea:	bf00      	nop

08005aec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005af2:	f3ef 8305 	mrs	r3, IPSR
 8005af6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2b0f      	cmp	r3, #15
 8005afc:	d914      	bls.n	8005b28 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005afe:	4a17      	ldr	r2, [pc, #92]	; (8005b5c <vPortValidateInterruptPriority+0x70>)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	4413      	add	r3, r2
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005b08:	4b15      	ldr	r3, [pc, #84]	; (8005b60 <vPortValidateInterruptPriority+0x74>)
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	7afa      	ldrb	r2, [r7, #11]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d20a      	bcs.n	8005b28 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8005b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b16:	f383 8811 	msr	BASEPRI, r3
 8005b1a:	f3bf 8f6f 	isb	sy
 8005b1e:	f3bf 8f4f 	dsb	sy
 8005b22:	607b      	str	r3, [r7, #4]
    }
 8005b24:	bf00      	nop
 8005b26:	e7fe      	b.n	8005b26 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005b28:	4b0e      	ldr	r3, [pc, #56]	; (8005b64 <vPortValidateInterruptPriority+0x78>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005b30:	4b0d      	ldr	r3, [pc, #52]	; (8005b68 <vPortValidateInterruptPriority+0x7c>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d90a      	bls.n	8005b4e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3c:	f383 8811 	msr	BASEPRI, r3
 8005b40:	f3bf 8f6f 	isb	sy
 8005b44:	f3bf 8f4f 	dsb	sy
 8005b48:	603b      	str	r3, [r7, #0]
    }
 8005b4a:	bf00      	nop
 8005b4c:	e7fe      	b.n	8005b4c <vPortValidateInterruptPriority+0x60>
    }
 8005b4e:	bf00      	nop
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	e000e3f0 	.word	0xe000e3f0
 8005b60:	200002dc 	.word	0x200002dc
 8005b64:	e000ed0c 	.word	0xe000ed0c
 8005b68:	200002e0 	.word	0x200002e0

08005b6c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b08a      	sub	sp, #40	; 0x28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8005b74:	2300      	movs	r3, #0
 8005b76:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8005b78:	f7fe fcc2 	bl	8004500 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005b7c:	4b65      	ldr	r3, [pc, #404]	; (8005d14 <pvPortMalloc+0x1a8>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d101      	bne.n	8005b88 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005b84:	f000 f934 	bl	8005df0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b88:	4b63      	ldr	r3, [pc, #396]	; (8005d18 <pvPortMalloc+0x1ac>)
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4013      	ands	r3, r2
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f040 80a7 	bne.w	8005ce4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d02d      	beq.n	8005bf8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8005b9c:	2208      	movs	r2, #8
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d227      	bcs.n	8005bf8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8005ba8:	2208      	movs	r2, #8
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4413      	add	r3, r2
 8005bae:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f003 0307 	and.w	r3, r3, #7
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d021      	beq.n	8005bfe <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f023 0307 	bic.w	r3, r3, #7
 8005bc0:	3308      	adds	r3, #8
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d214      	bcs.n	8005bf2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f023 0307 	bic.w	r3, r3, #7
 8005bce:	3308      	adds	r3, #8
 8005bd0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f003 0307 	and.w	r3, r3, #7
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d010      	beq.n	8005bfe <pvPortMalloc+0x92>
        __asm volatile
 8005bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be0:	f383 8811 	msr	BASEPRI, r3
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	f3bf 8f4f 	dsb	sy
 8005bec:	617b      	str	r3, [r7, #20]
    }
 8005bee:	bf00      	nop
 8005bf0:	e7fe      	b.n	8005bf0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005bf6:	e002      	b.n	8005bfe <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	607b      	str	r3, [r7, #4]
 8005bfc:	e000      	b.n	8005c00 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005bfe:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d06e      	beq.n	8005ce4 <pvPortMalloc+0x178>
 8005c06:	4b45      	ldr	r3, [pc, #276]	; (8005d1c <pvPortMalloc+0x1b0>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d869      	bhi.n	8005ce4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005c10:	4b43      	ldr	r3, [pc, #268]	; (8005d20 <pvPortMalloc+0x1b4>)
 8005c12:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005c14:	4b42      	ldr	r3, [pc, #264]	; (8005d20 <pvPortMalloc+0x1b4>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c1a:	e004      	b.n	8005c26 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d903      	bls.n	8005c38 <pvPortMalloc+0xcc>
 8005c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1f1      	bne.n	8005c1c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005c38:	4b36      	ldr	r3, [pc, #216]	; (8005d14 <pvPortMalloc+0x1a8>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d050      	beq.n	8005ce4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c42:	6a3b      	ldr	r3, [r7, #32]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2208      	movs	r2, #8
 8005c48:	4413      	add	r3, r2
 8005c4a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	6a3b      	ldr	r3, [r7, #32]
 8005c52:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	1ad2      	subs	r2, r2, r3
 8005c5c:	2308      	movs	r3, #8
 8005c5e:	005b      	lsls	r3, r3, #1
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d91f      	bls.n	8005ca4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4413      	add	r3, r2
 8005c6a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	f003 0307 	and.w	r3, r3, #7
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00a      	beq.n	8005c8c <pvPortMalloc+0x120>
        __asm volatile
 8005c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7a:	f383 8811 	msr	BASEPRI, r3
 8005c7e:	f3bf 8f6f 	isb	sy
 8005c82:	f3bf 8f4f 	dsb	sy
 8005c86:	613b      	str	r3, [r7, #16]
    }
 8005c88:	bf00      	nop
 8005c8a:	e7fe      	b.n	8005c8a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	1ad2      	subs	r2, r2, r3
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c9e:	69b8      	ldr	r0, [r7, #24]
 8005ca0:	f000 f908 	bl	8005eb4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005ca4:	4b1d      	ldr	r3, [pc, #116]	; (8005d1c <pvPortMalloc+0x1b0>)
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	4a1b      	ldr	r2, [pc, #108]	; (8005d1c <pvPortMalloc+0x1b0>)
 8005cb0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005cb2:	4b1a      	ldr	r3, [pc, #104]	; (8005d1c <pvPortMalloc+0x1b0>)
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	4b1b      	ldr	r3, [pc, #108]	; (8005d24 <pvPortMalloc+0x1b8>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d203      	bcs.n	8005cc6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005cbe:	4b17      	ldr	r3, [pc, #92]	; (8005d1c <pvPortMalloc+0x1b0>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a18      	ldr	r2, [pc, #96]	; (8005d24 <pvPortMalloc+0x1b8>)
 8005cc4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	4b13      	ldr	r3, [pc, #76]	; (8005d18 <pvPortMalloc+0x1ac>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005cda:	4b13      	ldr	r3, [pc, #76]	; (8005d28 <pvPortMalloc+0x1bc>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	4a11      	ldr	r2, [pc, #68]	; (8005d28 <pvPortMalloc+0x1bc>)
 8005ce2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005ce4:	f7fe fc1a 	bl	800451c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	f003 0307 	and.w	r3, r3, #7
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00a      	beq.n	8005d08 <pvPortMalloc+0x19c>
        __asm volatile
 8005cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf6:	f383 8811 	msr	BASEPRI, r3
 8005cfa:	f3bf 8f6f 	isb	sy
 8005cfe:	f3bf 8f4f 	dsb	sy
 8005d02:	60fb      	str	r3, [r7, #12]
    }
 8005d04:	bf00      	nop
 8005d06:	e7fe      	b.n	8005d06 <pvPortMalloc+0x19a>
    return pvReturn;
 8005d08:	69fb      	ldr	r3, [r7, #28]
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3728      	adds	r7, #40	; 0x28
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	20012eec 	.word	0x20012eec
 8005d18:	20012f00 	.word	0x20012f00
 8005d1c:	20012ef0 	.word	0x20012ef0
 8005d20:	20012ee4 	.word	0x20012ee4
 8005d24:	20012ef4 	.word	0x20012ef4
 8005d28:	20012ef8 	.word	0x20012ef8

08005d2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b086      	sub	sp, #24
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d04d      	beq.n	8005dda <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005d3e:	2308      	movs	r3, #8
 8005d40:	425b      	negs	r3, r3
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	4413      	add	r3, r2
 8005d46:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	685a      	ldr	r2, [r3, #4]
 8005d50:	4b24      	ldr	r3, [pc, #144]	; (8005de4 <vPortFree+0xb8>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4013      	ands	r3, r2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10a      	bne.n	8005d70 <vPortFree+0x44>
        __asm volatile
 8005d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	60fb      	str	r3, [r7, #12]
    }
 8005d6c:	bf00      	nop
 8005d6e:	e7fe      	b.n	8005d6e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00a      	beq.n	8005d8e <vPortFree+0x62>
        __asm volatile
 8005d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7c:	f383 8811 	msr	BASEPRI, r3
 8005d80:	f3bf 8f6f 	isb	sy
 8005d84:	f3bf 8f4f 	dsb	sy
 8005d88:	60bb      	str	r3, [r7, #8]
    }
 8005d8a:	bf00      	nop
 8005d8c:	e7fe      	b.n	8005d8c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	685a      	ldr	r2, [r3, #4]
 8005d92:	4b14      	ldr	r3, [pc, #80]	; (8005de4 <vPortFree+0xb8>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4013      	ands	r3, r2
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d01e      	beq.n	8005dda <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d11a      	bne.n	8005dda <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	685a      	ldr	r2, [r3, #4]
 8005da8:	4b0e      	ldr	r3, [pc, #56]	; (8005de4 <vPortFree+0xb8>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	43db      	mvns	r3, r3
 8005dae:	401a      	ands	r2, r3
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005db4:	f7fe fba4 	bl	8004500 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	4b0a      	ldr	r3, [pc, #40]	; (8005de8 <vPortFree+0xbc>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	4a09      	ldr	r2, [pc, #36]	; (8005de8 <vPortFree+0xbc>)
 8005dc4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005dc6:	6938      	ldr	r0, [r7, #16]
 8005dc8:	f000 f874 	bl	8005eb4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005dcc:	4b07      	ldr	r3, [pc, #28]	; (8005dec <vPortFree+0xc0>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	4a06      	ldr	r2, [pc, #24]	; (8005dec <vPortFree+0xc0>)
 8005dd4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005dd6:	f7fe fba1 	bl	800451c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005dda:	bf00      	nop
 8005ddc:	3718      	adds	r7, #24
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	20012f00 	.word	0x20012f00
 8005de8:	20012ef0 	.word	0x20012ef0
 8005dec:	20012efc 	.word	0x20012efc

08005df0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005df6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8005dfa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8005dfc:	4b27      	ldr	r3, [pc, #156]	; (8005e9c <prvHeapInit+0xac>)
 8005dfe:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f003 0307 	and.w	r3, r3, #7
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00c      	beq.n	8005e24 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	3307      	adds	r3, #7
 8005e0e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f023 0307 	bic.w	r3, r3, #7
 8005e16:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	4a1f      	ldr	r2, [pc, #124]	; (8005e9c <prvHeapInit+0xac>)
 8005e20:	4413      	add	r3, r2
 8005e22:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e28:	4a1d      	ldr	r2, [pc, #116]	; (8005ea0 <prvHeapInit+0xb0>)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005e2e:	4b1c      	ldr	r3, [pc, #112]	; (8005ea0 <prvHeapInit+0xb0>)
 8005e30:	2200      	movs	r2, #0
 8005e32:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	4413      	add	r3, r2
 8005e3a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005e3c:	2208      	movs	r2, #8
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	1a9b      	subs	r3, r3, r2
 8005e42:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f023 0307 	bic.w	r3, r3, #7
 8005e4a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	4a15      	ldr	r2, [pc, #84]	; (8005ea4 <prvHeapInit+0xb4>)
 8005e50:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005e52:	4b14      	ldr	r3, [pc, #80]	; (8005ea4 <prvHeapInit+0xb4>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2200      	movs	r2, #0
 8005e58:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005e5a:	4b12      	ldr	r3, [pc, #72]	; (8005ea4 <prvHeapInit+0xb4>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	1ad2      	subs	r2, r2, r3
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e70:	4b0c      	ldr	r3, [pc, #48]	; (8005ea4 <prvHeapInit+0xb4>)
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	4a0a      	ldr	r2, [pc, #40]	; (8005ea8 <prvHeapInit+0xb8>)
 8005e7e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	4a09      	ldr	r2, [pc, #36]	; (8005eac <prvHeapInit+0xbc>)
 8005e86:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e88:	4b09      	ldr	r3, [pc, #36]	; (8005eb0 <prvHeapInit+0xc0>)
 8005e8a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005e8e:	601a      	str	r2, [r3, #0]
}
 8005e90:	bf00      	nop
 8005e92:	3714      	adds	r7, #20
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr
 8005e9c:	200002e4 	.word	0x200002e4
 8005ea0:	20012ee4 	.word	0x20012ee4
 8005ea4:	20012eec 	.word	0x20012eec
 8005ea8:	20012ef4 	.word	0x20012ef4
 8005eac:	20012ef0 	.word	0x20012ef0
 8005eb0:	20012f00 	.word	0x20012f00

08005eb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ebc:	4b28      	ldr	r3, [pc, #160]	; (8005f60 <prvInsertBlockIntoFreeList+0xac>)
 8005ebe:	60fb      	str	r3, [r7, #12]
 8005ec0:	e002      	b.n	8005ec8 <prvInsertBlockIntoFreeList+0x14>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	60fb      	str	r3, [r7, #12]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d8f7      	bhi.n	8005ec2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	4413      	add	r3, r2
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d108      	bne.n	8005ef6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	441a      	add	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	441a      	add	r2, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d118      	bne.n	8005f3c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	4b15      	ldr	r3, [pc, #84]	; (8005f64 <prvInsertBlockIntoFreeList+0xb0>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d00d      	beq.n	8005f32 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685a      	ldr	r2, [r3, #4]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	441a      	add	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	601a      	str	r2, [r3, #0]
 8005f30:	e008      	b.n	8005f44 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f32:	4b0c      	ldr	r3, [pc, #48]	; (8005f64 <prvInsertBlockIntoFreeList+0xb0>)
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	601a      	str	r2, [r3, #0]
 8005f3a:	e003      	b.n	8005f44 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d002      	beq.n	8005f52 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005f52:	bf00      	nop
 8005f54:	3714      	adds	r7, #20
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	20012ee4 	.word	0x20012ee4
 8005f64:	20012eec 	.word	0x20012eec

08005f68 <__errno>:
 8005f68:	4b01      	ldr	r3, [pc, #4]	; (8005f70 <__errno+0x8>)
 8005f6a:	6818      	ldr	r0, [r3, #0]
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	20000014 	.word	0x20000014

08005f74 <__libc_init_array>:
 8005f74:	b570      	push	{r4, r5, r6, lr}
 8005f76:	4d0d      	ldr	r5, [pc, #52]	; (8005fac <__libc_init_array+0x38>)
 8005f78:	4c0d      	ldr	r4, [pc, #52]	; (8005fb0 <__libc_init_array+0x3c>)
 8005f7a:	1b64      	subs	r4, r4, r5
 8005f7c:	10a4      	asrs	r4, r4, #2
 8005f7e:	2600      	movs	r6, #0
 8005f80:	42a6      	cmp	r6, r4
 8005f82:	d109      	bne.n	8005f98 <__libc_init_array+0x24>
 8005f84:	4d0b      	ldr	r5, [pc, #44]	; (8005fb4 <__libc_init_array+0x40>)
 8005f86:	4c0c      	ldr	r4, [pc, #48]	; (8005fb8 <__libc_init_array+0x44>)
 8005f88:	f001 f9f4 	bl	8007374 <_init>
 8005f8c:	1b64      	subs	r4, r4, r5
 8005f8e:	10a4      	asrs	r4, r4, #2
 8005f90:	2600      	movs	r6, #0
 8005f92:	42a6      	cmp	r6, r4
 8005f94:	d105      	bne.n	8005fa2 <__libc_init_array+0x2e>
 8005f96:	bd70      	pop	{r4, r5, r6, pc}
 8005f98:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f9c:	4798      	blx	r3
 8005f9e:	3601      	adds	r6, #1
 8005fa0:	e7ee      	b.n	8005f80 <__libc_init_array+0xc>
 8005fa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fa6:	4798      	blx	r3
 8005fa8:	3601      	adds	r6, #1
 8005faa:	e7f2      	b.n	8005f92 <__libc_init_array+0x1e>
 8005fac:	080075f4 	.word	0x080075f4
 8005fb0:	080075f4 	.word	0x080075f4
 8005fb4:	080075f4 	.word	0x080075f4
 8005fb8:	080075f8 	.word	0x080075f8

08005fbc <memcpy>:
 8005fbc:	440a      	add	r2, r1
 8005fbe:	4291      	cmp	r1, r2
 8005fc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fc4:	d100      	bne.n	8005fc8 <memcpy+0xc>
 8005fc6:	4770      	bx	lr
 8005fc8:	b510      	push	{r4, lr}
 8005fca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fd2:	4291      	cmp	r1, r2
 8005fd4:	d1f9      	bne.n	8005fca <memcpy+0xe>
 8005fd6:	bd10      	pop	{r4, pc}

08005fd8 <memset>:
 8005fd8:	4402      	add	r2, r0
 8005fda:	4603      	mov	r3, r0
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d100      	bne.n	8005fe2 <memset+0xa>
 8005fe0:	4770      	bx	lr
 8005fe2:	f803 1b01 	strb.w	r1, [r3], #1
 8005fe6:	e7f9      	b.n	8005fdc <memset+0x4>

08005fe8 <rand>:
 8005fe8:	4b17      	ldr	r3, [pc, #92]	; (8006048 <rand+0x60>)
 8005fea:	b510      	push	{r4, lr}
 8005fec:	681c      	ldr	r4, [r3, #0]
 8005fee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005ff0:	b9b3      	cbnz	r3, 8006020 <rand+0x38>
 8005ff2:	2018      	movs	r0, #24
 8005ff4:	f000 f888 	bl	8006108 <malloc>
 8005ff8:	63a0      	str	r0, [r4, #56]	; 0x38
 8005ffa:	b928      	cbnz	r0, 8006008 <rand+0x20>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	4b13      	ldr	r3, [pc, #76]	; (800604c <rand+0x64>)
 8006000:	4813      	ldr	r0, [pc, #76]	; (8006050 <rand+0x68>)
 8006002:	214e      	movs	r1, #78	; 0x4e
 8006004:	f000 f850 	bl	80060a8 <__assert_func>
 8006008:	4a12      	ldr	r2, [pc, #72]	; (8006054 <rand+0x6c>)
 800600a:	4b13      	ldr	r3, [pc, #76]	; (8006058 <rand+0x70>)
 800600c:	e9c0 2300 	strd	r2, r3, [r0]
 8006010:	4b12      	ldr	r3, [pc, #72]	; (800605c <rand+0x74>)
 8006012:	6083      	str	r3, [r0, #8]
 8006014:	230b      	movs	r3, #11
 8006016:	8183      	strh	r3, [r0, #12]
 8006018:	2201      	movs	r2, #1
 800601a:	2300      	movs	r3, #0
 800601c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006020:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006022:	480f      	ldr	r0, [pc, #60]	; (8006060 <rand+0x78>)
 8006024:	690a      	ldr	r2, [r1, #16]
 8006026:	694b      	ldr	r3, [r1, #20]
 8006028:	4c0e      	ldr	r4, [pc, #56]	; (8006064 <rand+0x7c>)
 800602a:	4350      	muls	r0, r2
 800602c:	fb04 0003 	mla	r0, r4, r3, r0
 8006030:	fba2 3404 	umull	r3, r4, r2, r4
 8006034:	1c5a      	adds	r2, r3, #1
 8006036:	4404      	add	r4, r0
 8006038:	f144 0000 	adc.w	r0, r4, #0
 800603c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8006040:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006044:	bd10      	pop	{r4, pc}
 8006046:	bf00      	nop
 8006048:	20000014 	.word	0x20000014
 800604c:	080074a4 	.word	0x080074a4
 8006050:	080074bb 	.word	0x080074bb
 8006054:	abcd330e 	.word	0xabcd330e
 8006058:	e66d1234 	.word	0xe66d1234
 800605c:	0005deec 	.word	0x0005deec
 8006060:	5851f42d 	.word	0x5851f42d
 8006064:	4c957f2d 	.word	0x4c957f2d

08006068 <siprintf>:
 8006068:	b40e      	push	{r1, r2, r3}
 800606a:	b500      	push	{lr}
 800606c:	b09c      	sub	sp, #112	; 0x70
 800606e:	ab1d      	add	r3, sp, #116	; 0x74
 8006070:	9002      	str	r0, [sp, #8]
 8006072:	9006      	str	r0, [sp, #24]
 8006074:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006078:	4809      	ldr	r0, [pc, #36]	; (80060a0 <siprintf+0x38>)
 800607a:	9107      	str	r1, [sp, #28]
 800607c:	9104      	str	r1, [sp, #16]
 800607e:	4909      	ldr	r1, [pc, #36]	; (80060a4 <siprintf+0x3c>)
 8006080:	f853 2b04 	ldr.w	r2, [r3], #4
 8006084:	9105      	str	r1, [sp, #20]
 8006086:	6800      	ldr	r0, [r0, #0]
 8006088:	9301      	str	r3, [sp, #4]
 800608a:	a902      	add	r1, sp, #8
 800608c:	f000 f94a 	bl	8006324 <_svfiprintf_r>
 8006090:	9b02      	ldr	r3, [sp, #8]
 8006092:	2200      	movs	r2, #0
 8006094:	701a      	strb	r2, [r3, #0]
 8006096:	b01c      	add	sp, #112	; 0x70
 8006098:	f85d eb04 	ldr.w	lr, [sp], #4
 800609c:	b003      	add	sp, #12
 800609e:	4770      	bx	lr
 80060a0:	20000014 	.word	0x20000014
 80060a4:	ffff0208 	.word	0xffff0208

080060a8 <__assert_func>:
 80060a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80060aa:	4614      	mov	r4, r2
 80060ac:	461a      	mov	r2, r3
 80060ae:	4b09      	ldr	r3, [pc, #36]	; (80060d4 <__assert_func+0x2c>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4605      	mov	r5, r0
 80060b4:	68d8      	ldr	r0, [r3, #12]
 80060b6:	b14c      	cbz	r4, 80060cc <__assert_func+0x24>
 80060b8:	4b07      	ldr	r3, [pc, #28]	; (80060d8 <__assert_func+0x30>)
 80060ba:	9100      	str	r1, [sp, #0]
 80060bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80060c0:	4906      	ldr	r1, [pc, #24]	; (80060dc <__assert_func+0x34>)
 80060c2:	462b      	mov	r3, r5
 80060c4:	f000 f80e 	bl	80060e4 <fiprintf>
 80060c8:	f000 fdea 	bl	8006ca0 <abort>
 80060cc:	4b04      	ldr	r3, [pc, #16]	; (80060e0 <__assert_func+0x38>)
 80060ce:	461c      	mov	r4, r3
 80060d0:	e7f3      	b.n	80060ba <__assert_func+0x12>
 80060d2:	bf00      	nop
 80060d4:	20000014 	.word	0x20000014
 80060d8:	0800751a 	.word	0x0800751a
 80060dc:	08007527 	.word	0x08007527
 80060e0:	08007555 	.word	0x08007555

080060e4 <fiprintf>:
 80060e4:	b40e      	push	{r1, r2, r3}
 80060e6:	b503      	push	{r0, r1, lr}
 80060e8:	4601      	mov	r1, r0
 80060ea:	ab03      	add	r3, sp, #12
 80060ec:	4805      	ldr	r0, [pc, #20]	; (8006104 <fiprintf+0x20>)
 80060ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80060f2:	6800      	ldr	r0, [r0, #0]
 80060f4:	9301      	str	r3, [sp, #4]
 80060f6:	f000 fa3f 	bl	8006578 <_vfiprintf_r>
 80060fa:	b002      	add	sp, #8
 80060fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006100:	b003      	add	sp, #12
 8006102:	4770      	bx	lr
 8006104:	20000014 	.word	0x20000014

08006108 <malloc>:
 8006108:	4b02      	ldr	r3, [pc, #8]	; (8006114 <malloc+0xc>)
 800610a:	4601      	mov	r1, r0
 800610c:	6818      	ldr	r0, [r3, #0]
 800610e:	f000 b853 	b.w	80061b8 <_malloc_r>
 8006112:	bf00      	nop
 8006114:	20000014 	.word	0x20000014

08006118 <_free_r>:
 8006118:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800611a:	2900      	cmp	r1, #0
 800611c:	d048      	beq.n	80061b0 <_free_r+0x98>
 800611e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006122:	9001      	str	r0, [sp, #4]
 8006124:	2b00      	cmp	r3, #0
 8006126:	f1a1 0404 	sub.w	r4, r1, #4
 800612a:	bfb8      	it	lt
 800612c:	18e4      	addlt	r4, r4, r3
 800612e:	f000 fff7 	bl	8007120 <__malloc_lock>
 8006132:	4a20      	ldr	r2, [pc, #128]	; (80061b4 <_free_r+0x9c>)
 8006134:	9801      	ldr	r0, [sp, #4]
 8006136:	6813      	ldr	r3, [r2, #0]
 8006138:	4615      	mov	r5, r2
 800613a:	b933      	cbnz	r3, 800614a <_free_r+0x32>
 800613c:	6063      	str	r3, [r4, #4]
 800613e:	6014      	str	r4, [r2, #0]
 8006140:	b003      	add	sp, #12
 8006142:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006146:	f000 bff1 	b.w	800712c <__malloc_unlock>
 800614a:	42a3      	cmp	r3, r4
 800614c:	d90b      	bls.n	8006166 <_free_r+0x4e>
 800614e:	6821      	ldr	r1, [r4, #0]
 8006150:	1862      	adds	r2, r4, r1
 8006152:	4293      	cmp	r3, r2
 8006154:	bf04      	itt	eq
 8006156:	681a      	ldreq	r2, [r3, #0]
 8006158:	685b      	ldreq	r3, [r3, #4]
 800615a:	6063      	str	r3, [r4, #4]
 800615c:	bf04      	itt	eq
 800615e:	1852      	addeq	r2, r2, r1
 8006160:	6022      	streq	r2, [r4, #0]
 8006162:	602c      	str	r4, [r5, #0]
 8006164:	e7ec      	b.n	8006140 <_free_r+0x28>
 8006166:	461a      	mov	r2, r3
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	b10b      	cbz	r3, 8006170 <_free_r+0x58>
 800616c:	42a3      	cmp	r3, r4
 800616e:	d9fa      	bls.n	8006166 <_free_r+0x4e>
 8006170:	6811      	ldr	r1, [r2, #0]
 8006172:	1855      	adds	r5, r2, r1
 8006174:	42a5      	cmp	r5, r4
 8006176:	d10b      	bne.n	8006190 <_free_r+0x78>
 8006178:	6824      	ldr	r4, [r4, #0]
 800617a:	4421      	add	r1, r4
 800617c:	1854      	adds	r4, r2, r1
 800617e:	42a3      	cmp	r3, r4
 8006180:	6011      	str	r1, [r2, #0]
 8006182:	d1dd      	bne.n	8006140 <_free_r+0x28>
 8006184:	681c      	ldr	r4, [r3, #0]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	6053      	str	r3, [r2, #4]
 800618a:	4421      	add	r1, r4
 800618c:	6011      	str	r1, [r2, #0]
 800618e:	e7d7      	b.n	8006140 <_free_r+0x28>
 8006190:	d902      	bls.n	8006198 <_free_r+0x80>
 8006192:	230c      	movs	r3, #12
 8006194:	6003      	str	r3, [r0, #0]
 8006196:	e7d3      	b.n	8006140 <_free_r+0x28>
 8006198:	6825      	ldr	r5, [r4, #0]
 800619a:	1961      	adds	r1, r4, r5
 800619c:	428b      	cmp	r3, r1
 800619e:	bf04      	itt	eq
 80061a0:	6819      	ldreq	r1, [r3, #0]
 80061a2:	685b      	ldreq	r3, [r3, #4]
 80061a4:	6063      	str	r3, [r4, #4]
 80061a6:	bf04      	itt	eq
 80061a8:	1949      	addeq	r1, r1, r5
 80061aa:	6021      	streq	r1, [r4, #0]
 80061ac:	6054      	str	r4, [r2, #4]
 80061ae:	e7c7      	b.n	8006140 <_free_r+0x28>
 80061b0:	b003      	add	sp, #12
 80061b2:	bd30      	pop	{r4, r5, pc}
 80061b4:	20012f04 	.word	0x20012f04

080061b8 <_malloc_r>:
 80061b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ba:	1ccd      	adds	r5, r1, #3
 80061bc:	f025 0503 	bic.w	r5, r5, #3
 80061c0:	3508      	adds	r5, #8
 80061c2:	2d0c      	cmp	r5, #12
 80061c4:	bf38      	it	cc
 80061c6:	250c      	movcc	r5, #12
 80061c8:	2d00      	cmp	r5, #0
 80061ca:	4606      	mov	r6, r0
 80061cc:	db01      	blt.n	80061d2 <_malloc_r+0x1a>
 80061ce:	42a9      	cmp	r1, r5
 80061d0:	d903      	bls.n	80061da <_malloc_r+0x22>
 80061d2:	230c      	movs	r3, #12
 80061d4:	6033      	str	r3, [r6, #0]
 80061d6:	2000      	movs	r0, #0
 80061d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061da:	f000 ffa1 	bl	8007120 <__malloc_lock>
 80061de:	4921      	ldr	r1, [pc, #132]	; (8006264 <_malloc_r+0xac>)
 80061e0:	680a      	ldr	r2, [r1, #0]
 80061e2:	4614      	mov	r4, r2
 80061e4:	b99c      	cbnz	r4, 800620e <_malloc_r+0x56>
 80061e6:	4f20      	ldr	r7, [pc, #128]	; (8006268 <_malloc_r+0xb0>)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	b923      	cbnz	r3, 80061f6 <_malloc_r+0x3e>
 80061ec:	4621      	mov	r1, r4
 80061ee:	4630      	mov	r0, r6
 80061f0:	f000 fc86 	bl	8006b00 <_sbrk_r>
 80061f4:	6038      	str	r0, [r7, #0]
 80061f6:	4629      	mov	r1, r5
 80061f8:	4630      	mov	r0, r6
 80061fa:	f000 fc81 	bl	8006b00 <_sbrk_r>
 80061fe:	1c43      	adds	r3, r0, #1
 8006200:	d123      	bne.n	800624a <_malloc_r+0x92>
 8006202:	230c      	movs	r3, #12
 8006204:	6033      	str	r3, [r6, #0]
 8006206:	4630      	mov	r0, r6
 8006208:	f000 ff90 	bl	800712c <__malloc_unlock>
 800620c:	e7e3      	b.n	80061d6 <_malloc_r+0x1e>
 800620e:	6823      	ldr	r3, [r4, #0]
 8006210:	1b5b      	subs	r3, r3, r5
 8006212:	d417      	bmi.n	8006244 <_malloc_r+0x8c>
 8006214:	2b0b      	cmp	r3, #11
 8006216:	d903      	bls.n	8006220 <_malloc_r+0x68>
 8006218:	6023      	str	r3, [r4, #0]
 800621a:	441c      	add	r4, r3
 800621c:	6025      	str	r5, [r4, #0]
 800621e:	e004      	b.n	800622a <_malloc_r+0x72>
 8006220:	6863      	ldr	r3, [r4, #4]
 8006222:	42a2      	cmp	r2, r4
 8006224:	bf0c      	ite	eq
 8006226:	600b      	streq	r3, [r1, #0]
 8006228:	6053      	strne	r3, [r2, #4]
 800622a:	4630      	mov	r0, r6
 800622c:	f000 ff7e 	bl	800712c <__malloc_unlock>
 8006230:	f104 000b 	add.w	r0, r4, #11
 8006234:	1d23      	adds	r3, r4, #4
 8006236:	f020 0007 	bic.w	r0, r0, #7
 800623a:	1ac2      	subs	r2, r0, r3
 800623c:	d0cc      	beq.n	80061d8 <_malloc_r+0x20>
 800623e:	1a1b      	subs	r3, r3, r0
 8006240:	50a3      	str	r3, [r4, r2]
 8006242:	e7c9      	b.n	80061d8 <_malloc_r+0x20>
 8006244:	4622      	mov	r2, r4
 8006246:	6864      	ldr	r4, [r4, #4]
 8006248:	e7cc      	b.n	80061e4 <_malloc_r+0x2c>
 800624a:	1cc4      	adds	r4, r0, #3
 800624c:	f024 0403 	bic.w	r4, r4, #3
 8006250:	42a0      	cmp	r0, r4
 8006252:	d0e3      	beq.n	800621c <_malloc_r+0x64>
 8006254:	1a21      	subs	r1, r4, r0
 8006256:	4630      	mov	r0, r6
 8006258:	f000 fc52 	bl	8006b00 <_sbrk_r>
 800625c:	3001      	adds	r0, #1
 800625e:	d1dd      	bne.n	800621c <_malloc_r+0x64>
 8006260:	e7cf      	b.n	8006202 <_malloc_r+0x4a>
 8006262:	bf00      	nop
 8006264:	20012f04 	.word	0x20012f04
 8006268:	20012f08 	.word	0x20012f08

0800626c <__ssputs_r>:
 800626c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006270:	688e      	ldr	r6, [r1, #8]
 8006272:	429e      	cmp	r6, r3
 8006274:	4682      	mov	sl, r0
 8006276:	460c      	mov	r4, r1
 8006278:	4690      	mov	r8, r2
 800627a:	461f      	mov	r7, r3
 800627c:	d838      	bhi.n	80062f0 <__ssputs_r+0x84>
 800627e:	898a      	ldrh	r2, [r1, #12]
 8006280:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006284:	d032      	beq.n	80062ec <__ssputs_r+0x80>
 8006286:	6825      	ldr	r5, [r4, #0]
 8006288:	6909      	ldr	r1, [r1, #16]
 800628a:	eba5 0901 	sub.w	r9, r5, r1
 800628e:	6965      	ldr	r5, [r4, #20]
 8006290:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006294:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006298:	3301      	adds	r3, #1
 800629a:	444b      	add	r3, r9
 800629c:	106d      	asrs	r5, r5, #1
 800629e:	429d      	cmp	r5, r3
 80062a0:	bf38      	it	cc
 80062a2:	461d      	movcc	r5, r3
 80062a4:	0553      	lsls	r3, r2, #21
 80062a6:	d531      	bpl.n	800630c <__ssputs_r+0xa0>
 80062a8:	4629      	mov	r1, r5
 80062aa:	f7ff ff85 	bl	80061b8 <_malloc_r>
 80062ae:	4606      	mov	r6, r0
 80062b0:	b950      	cbnz	r0, 80062c8 <__ssputs_r+0x5c>
 80062b2:	230c      	movs	r3, #12
 80062b4:	f8ca 3000 	str.w	r3, [sl]
 80062b8:	89a3      	ldrh	r3, [r4, #12]
 80062ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062be:	81a3      	strh	r3, [r4, #12]
 80062c0:	f04f 30ff 	mov.w	r0, #4294967295
 80062c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062c8:	6921      	ldr	r1, [r4, #16]
 80062ca:	464a      	mov	r2, r9
 80062cc:	f7ff fe76 	bl	8005fbc <memcpy>
 80062d0:	89a3      	ldrh	r3, [r4, #12]
 80062d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80062d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062da:	81a3      	strh	r3, [r4, #12]
 80062dc:	6126      	str	r6, [r4, #16]
 80062de:	6165      	str	r5, [r4, #20]
 80062e0:	444e      	add	r6, r9
 80062e2:	eba5 0509 	sub.w	r5, r5, r9
 80062e6:	6026      	str	r6, [r4, #0]
 80062e8:	60a5      	str	r5, [r4, #8]
 80062ea:	463e      	mov	r6, r7
 80062ec:	42be      	cmp	r6, r7
 80062ee:	d900      	bls.n	80062f2 <__ssputs_r+0x86>
 80062f0:	463e      	mov	r6, r7
 80062f2:	4632      	mov	r2, r6
 80062f4:	6820      	ldr	r0, [r4, #0]
 80062f6:	4641      	mov	r1, r8
 80062f8:	f000 fef8 	bl	80070ec <memmove>
 80062fc:	68a3      	ldr	r3, [r4, #8]
 80062fe:	6822      	ldr	r2, [r4, #0]
 8006300:	1b9b      	subs	r3, r3, r6
 8006302:	4432      	add	r2, r6
 8006304:	60a3      	str	r3, [r4, #8]
 8006306:	6022      	str	r2, [r4, #0]
 8006308:	2000      	movs	r0, #0
 800630a:	e7db      	b.n	80062c4 <__ssputs_r+0x58>
 800630c:	462a      	mov	r2, r5
 800630e:	f000 ff13 	bl	8007138 <_realloc_r>
 8006312:	4606      	mov	r6, r0
 8006314:	2800      	cmp	r0, #0
 8006316:	d1e1      	bne.n	80062dc <__ssputs_r+0x70>
 8006318:	6921      	ldr	r1, [r4, #16]
 800631a:	4650      	mov	r0, sl
 800631c:	f7ff fefc 	bl	8006118 <_free_r>
 8006320:	e7c7      	b.n	80062b2 <__ssputs_r+0x46>
	...

08006324 <_svfiprintf_r>:
 8006324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006328:	4698      	mov	r8, r3
 800632a:	898b      	ldrh	r3, [r1, #12]
 800632c:	061b      	lsls	r3, r3, #24
 800632e:	b09d      	sub	sp, #116	; 0x74
 8006330:	4607      	mov	r7, r0
 8006332:	460d      	mov	r5, r1
 8006334:	4614      	mov	r4, r2
 8006336:	d50e      	bpl.n	8006356 <_svfiprintf_r+0x32>
 8006338:	690b      	ldr	r3, [r1, #16]
 800633a:	b963      	cbnz	r3, 8006356 <_svfiprintf_r+0x32>
 800633c:	2140      	movs	r1, #64	; 0x40
 800633e:	f7ff ff3b 	bl	80061b8 <_malloc_r>
 8006342:	6028      	str	r0, [r5, #0]
 8006344:	6128      	str	r0, [r5, #16]
 8006346:	b920      	cbnz	r0, 8006352 <_svfiprintf_r+0x2e>
 8006348:	230c      	movs	r3, #12
 800634a:	603b      	str	r3, [r7, #0]
 800634c:	f04f 30ff 	mov.w	r0, #4294967295
 8006350:	e0d1      	b.n	80064f6 <_svfiprintf_r+0x1d2>
 8006352:	2340      	movs	r3, #64	; 0x40
 8006354:	616b      	str	r3, [r5, #20]
 8006356:	2300      	movs	r3, #0
 8006358:	9309      	str	r3, [sp, #36]	; 0x24
 800635a:	2320      	movs	r3, #32
 800635c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006360:	f8cd 800c 	str.w	r8, [sp, #12]
 8006364:	2330      	movs	r3, #48	; 0x30
 8006366:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006510 <_svfiprintf_r+0x1ec>
 800636a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800636e:	f04f 0901 	mov.w	r9, #1
 8006372:	4623      	mov	r3, r4
 8006374:	469a      	mov	sl, r3
 8006376:	f813 2b01 	ldrb.w	r2, [r3], #1
 800637a:	b10a      	cbz	r2, 8006380 <_svfiprintf_r+0x5c>
 800637c:	2a25      	cmp	r2, #37	; 0x25
 800637e:	d1f9      	bne.n	8006374 <_svfiprintf_r+0x50>
 8006380:	ebba 0b04 	subs.w	fp, sl, r4
 8006384:	d00b      	beq.n	800639e <_svfiprintf_r+0x7a>
 8006386:	465b      	mov	r3, fp
 8006388:	4622      	mov	r2, r4
 800638a:	4629      	mov	r1, r5
 800638c:	4638      	mov	r0, r7
 800638e:	f7ff ff6d 	bl	800626c <__ssputs_r>
 8006392:	3001      	adds	r0, #1
 8006394:	f000 80aa 	beq.w	80064ec <_svfiprintf_r+0x1c8>
 8006398:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800639a:	445a      	add	r2, fp
 800639c:	9209      	str	r2, [sp, #36]	; 0x24
 800639e:	f89a 3000 	ldrb.w	r3, [sl]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	f000 80a2 	beq.w	80064ec <_svfiprintf_r+0x1c8>
 80063a8:	2300      	movs	r3, #0
 80063aa:	f04f 32ff 	mov.w	r2, #4294967295
 80063ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063b2:	f10a 0a01 	add.w	sl, sl, #1
 80063b6:	9304      	str	r3, [sp, #16]
 80063b8:	9307      	str	r3, [sp, #28]
 80063ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063be:	931a      	str	r3, [sp, #104]	; 0x68
 80063c0:	4654      	mov	r4, sl
 80063c2:	2205      	movs	r2, #5
 80063c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063c8:	4851      	ldr	r0, [pc, #324]	; (8006510 <_svfiprintf_r+0x1ec>)
 80063ca:	f7f9 ff09 	bl	80001e0 <memchr>
 80063ce:	9a04      	ldr	r2, [sp, #16]
 80063d0:	b9d8      	cbnz	r0, 800640a <_svfiprintf_r+0xe6>
 80063d2:	06d0      	lsls	r0, r2, #27
 80063d4:	bf44      	itt	mi
 80063d6:	2320      	movmi	r3, #32
 80063d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063dc:	0711      	lsls	r1, r2, #28
 80063de:	bf44      	itt	mi
 80063e0:	232b      	movmi	r3, #43	; 0x2b
 80063e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063e6:	f89a 3000 	ldrb.w	r3, [sl]
 80063ea:	2b2a      	cmp	r3, #42	; 0x2a
 80063ec:	d015      	beq.n	800641a <_svfiprintf_r+0xf6>
 80063ee:	9a07      	ldr	r2, [sp, #28]
 80063f0:	4654      	mov	r4, sl
 80063f2:	2000      	movs	r0, #0
 80063f4:	f04f 0c0a 	mov.w	ip, #10
 80063f8:	4621      	mov	r1, r4
 80063fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063fe:	3b30      	subs	r3, #48	; 0x30
 8006400:	2b09      	cmp	r3, #9
 8006402:	d94e      	bls.n	80064a2 <_svfiprintf_r+0x17e>
 8006404:	b1b0      	cbz	r0, 8006434 <_svfiprintf_r+0x110>
 8006406:	9207      	str	r2, [sp, #28]
 8006408:	e014      	b.n	8006434 <_svfiprintf_r+0x110>
 800640a:	eba0 0308 	sub.w	r3, r0, r8
 800640e:	fa09 f303 	lsl.w	r3, r9, r3
 8006412:	4313      	orrs	r3, r2
 8006414:	9304      	str	r3, [sp, #16]
 8006416:	46a2      	mov	sl, r4
 8006418:	e7d2      	b.n	80063c0 <_svfiprintf_r+0x9c>
 800641a:	9b03      	ldr	r3, [sp, #12]
 800641c:	1d19      	adds	r1, r3, #4
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	9103      	str	r1, [sp, #12]
 8006422:	2b00      	cmp	r3, #0
 8006424:	bfbb      	ittet	lt
 8006426:	425b      	neglt	r3, r3
 8006428:	f042 0202 	orrlt.w	r2, r2, #2
 800642c:	9307      	strge	r3, [sp, #28]
 800642e:	9307      	strlt	r3, [sp, #28]
 8006430:	bfb8      	it	lt
 8006432:	9204      	strlt	r2, [sp, #16]
 8006434:	7823      	ldrb	r3, [r4, #0]
 8006436:	2b2e      	cmp	r3, #46	; 0x2e
 8006438:	d10c      	bne.n	8006454 <_svfiprintf_r+0x130>
 800643a:	7863      	ldrb	r3, [r4, #1]
 800643c:	2b2a      	cmp	r3, #42	; 0x2a
 800643e:	d135      	bne.n	80064ac <_svfiprintf_r+0x188>
 8006440:	9b03      	ldr	r3, [sp, #12]
 8006442:	1d1a      	adds	r2, r3, #4
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	9203      	str	r2, [sp, #12]
 8006448:	2b00      	cmp	r3, #0
 800644a:	bfb8      	it	lt
 800644c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006450:	3402      	adds	r4, #2
 8006452:	9305      	str	r3, [sp, #20]
 8006454:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006520 <_svfiprintf_r+0x1fc>
 8006458:	7821      	ldrb	r1, [r4, #0]
 800645a:	2203      	movs	r2, #3
 800645c:	4650      	mov	r0, sl
 800645e:	f7f9 febf 	bl	80001e0 <memchr>
 8006462:	b140      	cbz	r0, 8006476 <_svfiprintf_r+0x152>
 8006464:	2340      	movs	r3, #64	; 0x40
 8006466:	eba0 000a 	sub.w	r0, r0, sl
 800646a:	fa03 f000 	lsl.w	r0, r3, r0
 800646e:	9b04      	ldr	r3, [sp, #16]
 8006470:	4303      	orrs	r3, r0
 8006472:	3401      	adds	r4, #1
 8006474:	9304      	str	r3, [sp, #16]
 8006476:	f814 1b01 	ldrb.w	r1, [r4], #1
 800647a:	4826      	ldr	r0, [pc, #152]	; (8006514 <_svfiprintf_r+0x1f0>)
 800647c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006480:	2206      	movs	r2, #6
 8006482:	f7f9 fead 	bl	80001e0 <memchr>
 8006486:	2800      	cmp	r0, #0
 8006488:	d038      	beq.n	80064fc <_svfiprintf_r+0x1d8>
 800648a:	4b23      	ldr	r3, [pc, #140]	; (8006518 <_svfiprintf_r+0x1f4>)
 800648c:	bb1b      	cbnz	r3, 80064d6 <_svfiprintf_r+0x1b2>
 800648e:	9b03      	ldr	r3, [sp, #12]
 8006490:	3307      	adds	r3, #7
 8006492:	f023 0307 	bic.w	r3, r3, #7
 8006496:	3308      	adds	r3, #8
 8006498:	9303      	str	r3, [sp, #12]
 800649a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800649c:	4433      	add	r3, r6
 800649e:	9309      	str	r3, [sp, #36]	; 0x24
 80064a0:	e767      	b.n	8006372 <_svfiprintf_r+0x4e>
 80064a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80064a6:	460c      	mov	r4, r1
 80064a8:	2001      	movs	r0, #1
 80064aa:	e7a5      	b.n	80063f8 <_svfiprintf_r+0xd4>
 80064ac:	2300      	movs	r3, #0
 80064ae:	3401      	adds	r4, #1
 80064b0:	9305      	str	r3, [sp, #20]
 80064b2:	4619      	mov	r1, r3
 80064b4:	f04f 0c0a 	mov.w	ip, #10
 80064b8:	4620      	mov	r0, r4
 80064ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064be:	3a30      	subs	r2, #48	; 0x30
 80064c0:	2a09      	cmp	r2, #9
 80064c2:	d903      	bls.n	80064cc <_svfiprintf_r+0x1a8>
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d0c5      	beq.n	8006454 <_svfiprintf_r+0x130>
 80064c8:	9105      	str	r1, [sp, #20]
 80064ca:	e7c3      	b.n	8006454 <_svfiprintf_r+0x130>
 80064cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80064d0:	4604      	mov	r4, r0
 80064d2:	2301      	movs	r3, #1
 80064d4:	e7f0      	b.n	80064b8 <_svfiprintf_r+0x194>
 80064d6:	ab03      	add	r3, sp, #12
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	462a      	mov	r2, r5
 80064dc:	4b0f      	ldr	r3, [pc, #60]	; (800651c <_svfiprintf_r+0x1f8>)
 80064de:	a904      	add	r1, sp, #16
 80064e0:	4638      	mov	r0, r7
 80064e2:	f3af 8000 	nop.w
 80064e6:	1c42      	adds	r2, r0, #1
 80064e8:	4606      	mov	r6, r0
 80064ea:	d1d6      	bne.n	800649a <_svfiprintf_r+0x176>
 80064ec:	89ab      	ldrh	r3, [r5, #12]
 80064ee:	065b      	lsls	r3, r3, #25
 80064f0:	f53f af2c 	bmi.w	800634c <_svfiprintf_r+0x28>
 80064f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064f6:	b01d      	add	sp, #116	; 0x74
 80064f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064fc:	ab03      	add	r3, sp, #12
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	462a      	mov	r2, r5
 8006502:	4b06      	ldr	r3, [pc, #24]	; (800651c <_svfiprintf_r+0x1f8>)
 8006504:	a904      	add	r1, sp, #16
 8006506:	4638      	mov	r0, r7
 8006508:	f000 f9d4 	bl	80068b4 <_printf_i>
 800650c:	e7eb      	b.n	80064e6 <_svfiprintf_r+0x1c2>
 800650e:	bf00      	nop
 8006510:	08007556 	.word	0x08007556
 8006514:	08007560 	.word	0x08007560
 8006518:	00000000 	.word	0x00000000
 800651c:	0800626d 	.word	0x0800626d
 8006520:	0800755c 	.word	0x0800755c

08006524 <__sfputc_r>:
 8006524:	6893      	ldr	r3, [r2, #8]
 8006526:	3b01      	subs	r3, #1
 8006528:	2b00      	cmp	r3, #0
 800652a:	b410      	push	{r4}
 800652c:	6093      	str	r3, [r2, #8]
 800652e:	da08      	bge.n	8006542 <__sfputc_r+0x1e>
 8006530:	6994      	ldr	r4, [r2, #24]
 8006532:	42a3      	cmp	r3, r4
 8006534:	db01      	blt.n	800653a <__sfputc_r+0x16>
 8006536:	290a      	cmp	r1, #10
 8006538:	d103      	bne.n	8006542 <__sfputc_r+0x1e>
 800653a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800653e:	f000 baef 	b.w	8006b20 <__swbuf_r>
 8006542:	6813      	ldr	r3, [r2, #0]
 8006544:	1c58      	adds	r0, r3, #1
 8006546:	6010      	str	r0, [r2, #0]
 8006548:	7019      	strb	r1, [r3, #0]
 800654a:	4608      	mov	r0, r1
 800654c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006550:	4770      	bx	lr

08006552 <__sfputs_r>:
 8006552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006554:	4606      	mov	r6, r0
 8006556:	460f      	mov	r7, r1
 8006558:	4614      	mov	r4, r2
 800655a:	18d5      	adds	r5, r2, r3
 800655c:	42ac      	cmp	r4, r5
 800655e:	d101      	bne.n	8006564 <__sfputs_r+0x12>
 8006560:	2000      	movs	r0, #0
 8006562:	e007      	b.n	8006574 <__sfputs_r+0x22>
 8006564:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006568:	463a      	mov	r2, r7
 800656a:	4630      	mov	r0, r6
 800656c:	f7ff ffda 	bl	8006524 <__sfputc_r>
 8006570:	1c43      	adds	r3, r0, #1
 8006572:	d1f3      	bne.n	800655c <__sfputs_r+0xa>
 8006574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006578 <_vfiprintf_r>:
 8006578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800657c:	460d      	mov	r5, r1
 800657e:	b09d      	sub	sp, #116	; 0x74
 8006580:	4614      	mov	r4, r2
 8006582:	4698      	mov	r8, r3
 8006584:	4606      	mov	r6, r0
 8006586:	b118      	cbz	r0, 8006590 <_vfiprintf_r+0x18>
 8006588:	6983      	ldr	r3, [r0, #24]
 800658a:	b90b      	cbnz	r3, 8006590 <_vfiprintf_r+0x18>
 800658c:	f000 fcaa 	bl	8006ee4 <__sinit>
 8006590:	4b89      	ldr	r3, [pc, #548]	; (80067b8 <_vfiprintf_r+0x240>)
 8006592:	429d      	cmp	r5, r3
 8006594:	d11b      	bne.n	80065ce <_vfiprintf_r+0x56>
 8006596:	6875      	ldr	r5, [r6, #4]
 8006598:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800659a:	07d9      	lsls	r1, r3, #31
 800659c:	d405      	bmi.n	80065aa <_vfiprintf_r+0x32>
 800659e:	89ab      	ldrh	r3, [r5, #12]
 80065a0:	059a      	lsls	r2, r3, #22
 80065a2:	d402      	bmi.n	80065aa <_vfiprintf_r+0x32>
 80065a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065a6:	f000 fd3b 	bl	8007020 <__retarget_lock_acquire_recursive>
 80065aa:	89ab      	ldrh	r3, [r5, #12]
 80065ac:	071b      	lsls	r3, r3, #28
 80065ae:	d501      	bpl.n	80065b4 <_vfiprintf_r+0x3c>
 80065b0:	692b      	ldr	r3, [r5, #16]
 80065b2:	b9eb      	cbnz	r3, 80065f0 <_vfiprintf_r+0x78>
 80065b4:	4629      	mov	r1, r5
 80065b6:	4630      	mov	r0, r6
 80065b8:	f000 fb04 	bl	8006bc4 <__swsetup_r>
 80065bc:	b1c0      	cbz	r0, 80065f0 <_vfiprintf_r+0x78>
 80065be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065c0:	07dc      	lsls	r4, r3, #31
 80065c2:	d50e      	bpl.n	80065e2 <_vfiprintf_r+0x6a>
 80065c4:	f04f 30ff 	mov.w	r0, #4294967295
 80065c8:	b01d      	add	sp, #116	; 0x74
 80065ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ce:	4b7b      	ldr	r3, [pc, #492]	; (80067bc <_vfiprintf_r+0x244>)
 80065d0:	429d      	cmp	r5, r3
 80065d2:	d101      	bne.n	80065d8 <_vfiprintf_r+0x60>
 80065d4:	68b5      	ldr	r5, [r6, #8]
 80065d6:	e7df      	b.n	8006598 <_vfiprintf_r+0x20>
 80065d8:	4b79      	ldr	r3, [pc, #484]	; (80067c0 <_vfiprintf_r+0x248>)
 80065da:	429d      	cmp	r5, r3
 80065dc:	bf08      	it	eq
 80065de:	68f5      	ldreq	r5, [r6, #12]
 80065e0:	e7da      	b.n	8006598 <_vfiprintf_r+0x20>
 80065e2:	89ab      	ldrh	r3, [r5, #12]
 80065e4:	0598      	lsls	r0, r3, #22
 80065e6:	d4ed      	bmi.n	80065c4 <_vfiprintf_r+0x4c>
 80065e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065ea:	f000 fd1a 	bl	8007022 <__retarget_lock_release_recursive>
 80065ee:	e7e9      	b.n	80065c4 <_vfiprintf_r+0x4c>
 80065f0:	2300      	movs	r3, #0
 80065f2:	9309      	str	r3, [sp, #36]	; 0x24
 80065f4:	2320      	movs	r3, #32
 80065f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80065fe:	2330      	movs	r3, #48	; 0x30
 8006600:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80067c4 <_vfiprintf_r+0x24c>
 8006604:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006608:	f04f 0901 	mov.w	r9, #1
 800660c:	4623      	mov	r3, r4
 800660e:	469a      	mov	sl, r3
 8006610:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006614:	b10a      	cbz	r2, 800661a <_vfiprintf_r+0xa2>
 8006616:	2a25      	cmp	r2, #37	; 0x25
 8006618:	d1f9      	bne.n	800660e <_vfiprintf_r+0x96>
 800661a:	ebba 0b04 	subs.w	fp, sl, r4
 800661e:	d00b      	beq.n	8006638 <_vfiprintf_r+0xc0>
 8006620:	465b      	mov	r3, fp
 8006622:	4622      	mov	r2, r4
 8006624:	4629      	mov	r1, r5
 8006626:	4630      	mov	r0, r6
 8006628:	f7ff ff93 	bl	8006552 <__sfputs_r>
 800662c:	3001      	adds	r0, #1
 800662e:	f000 80aa 	beq.w	8006786 <_vfiprintf_r+0x20e>
 8006632:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006634:	445a      	add	r2, fp
 8006636:	9209      	str	r2, [sp, #36]	; 0x24
 8006638:	f89a 3000 	ldrb.w	r3, [sl]
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 80a2 	beq.w	8006786 <_vfiprintf_r+0x20e>
 8006642:	2300      	movs	r3, #0
 8006644:	f04f 32ff 	mov.w	r2, #4294967295
 8006648:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800664c:	f10a 0a01 	add.w	sl, sl, #1
 8006650:	9304      	str	r3, [sp, #16]
 8006652:	9307      	str	r3, [sp, #28]
 8006654:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006658:	931a      	str	r3, [sp, #104]	; 0x68
 800665a:	4654      	mov	r4, sl
 800665c:	2205      	movs	r2, #5
 800665e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006662:	4858      	ldr	r0, [pc, #352]	; (80067c4 <_vfiprintf_r+0x24c>)
 8006664:	f7f9 fdbc 	bl	80001e0 <memchr>
 8006668:	9a04      	ldr	r2, [sp, #16]
 800666a:	b9d8      	cbnz	r0, 80066a4 <_vfiprintf_r+0x12c>
 800666c:	06d1      	lsls	r1, r2, #27
 800666e:	bf44      	itt	mi
 8006670:	2320      	movmi	r3, #32
 8006672:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006676:	0713      	lsls	r3, r2, #28
 8006678:	bf44      	itt	mi
 800667a:	232b      	movmi	r3, #43	; 0x2b
 800667c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006680:	f89a 3000 	ldrb.w	r3, [sl]
 8006684:	2b2a      	cmp	r3, #42	; 0x2a
 8006686:	d015      	beq.n	80066b4 <_vfiprintf_r+0x13c>
 8006688:	9a07      	ldr	r2, [sp, #28]
 800668a:	4654      	mov	r4, sl
 800668c:	2000      	movs	r0, #0
 800668e:	f04f 0c0a 	mov.w	ip, #10
 8006692:	4621      	mov	r1, r4
 8006694:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006698:	3b30      	subs	r3, #48	; 0x30
 800669a:	2b09      	cmp	r3, #9
 800669c:	d94e      	bls.n	800673c <_vfiprintf_r+0x1c4>
 800669e:	b1b0      	cbz	r0, 80066ce <_vfiprintf_r+0x156>
 80066a0:	9207      	str	r2, [sp, #28]
 80066a2:	e014      	b.n	80066ce <_vfiprintf_r+0x156>
 80066a4:	eba0 0308 	sub.w	r3, r0, r8
 80066a8:	fa09 f303 	lsl.w	r3, r9, r3
 80066ac:	4313      	orrs	r3, r2
 80066ae:	9304      	str	r3, [sp, #16]
 80066b0:	46a2      	mov	sl, r4
 80066b2:	e7d2      	b.n	800665a <_vfiprintf_r+0xe2>
 80066b4:	9b03      	ldr	r3, [sp, #12]
 80066b6:	1d19      	adds	r1, r3, #4
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	9103      	str	r1, [sp, #12]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	bfbb      	ittet	lt
 80066c0:	425b      	neglt	r3, r3
 80066c2:	f042 0202 	orrlt.w	r2, r2, #2
 80066c6:	9307      	strge	r3, [sp, #28]
 80066c8:	9307      	strlt	r3, [sp, #28]
 80066ca:	bfb8      	it	lt
 80066cc:	9204      	strlt	r2, [sp, #16]
 80066ce:	7823      	ldrb	r3, [r4, #0]
 80066d0:	2b2e      	cmp	r3, #46	; 0x2e
 80066d2:	d10c      	bne.n	80066ee <_vfiprintf_r+0x176>
 80066d4:	7863      	ldrb	r3, [r4, #1]
 80066d6:	2b2a      	cmp	r3, #42	; 0x2a
 80066d8:	d135      	bne.n	8006746 <_vfiprintf_r+0x1ce>
 80066da:	9b03      	ldr	r3, [sp, #12]
 80066dc:	1d1a      	adds	r2, r3, #4
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	9203      	str	r2, [sp, #12]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	bfb8      	it	lt
 80066e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80066ea:	3402      	adds	r4, #2
 80066ec:	9305      	str	r3, [sp, #20]
 80066ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80067d4 <_vfiprintf_r+0x25c>
 80066f2:	7821      	ldrb	r1, [r4, #0]
 80066f4:	2203      	movs	r2, #3
 80066f6:	4650      	mov	r0, sl
 80066f8:	f7f9 fd72 	bl	80001e0 <memchr>
 80066fc:	b140      	cbz	r0, 8006710 <_vfiprintf_r+0x198>
 80066fe:	2340      	movs	r3, #64	; 0x40
 8006700:	eba0 000a 	sub.w	r0, r0, sl
 8006704:	fa03 f000 	lsl.w	r0, r3, r0
 8006708:	9b04      	ldr	r3, [sp, #16]
 800670a:	4303      	orrs	r3, r0
 800670c:	3401      	adds	r4, #1
 800670e:	9304      	str	r3, [sp, #16]
 8006710:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006714:	482c      	ldr	r0, [pc, #176]	; (80067c8 <_vfiprintf_r+0x250>)
 8006716:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800671a:	2206      	movs	r2, #6
 800671c:	f7f9 fd60 	bl	80001e0 <memchr>
 8006720:	2800      	cmp	r0, #0
 8006722:	d03f      	beq.n	80067a4 <_vfiprintf_r+0x22c>
 8006724:	4b29      	ldr	r3, [pc, #164]	; (80067cc <_vfiprintf_r+0x254>)
 8006726:	bb1b      	cbnz	r3, 8006770 <_vfiprintf_r+0x1f8>
 8006728:	9b03      	ldr	r3, [sp, #12]
 800672a:	3307      	adds	r3, #7
 800672c:	f023 0307 	bic.w	r3, r3, #7
 8006730:	3308      	adds	r3, #8
 8006732:	9303      	str	r3, [sp, #12]
 8006734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006736:	443b      	add	r3, r7
 8006738:	9309      	str	r3, [sp, #36]	; 0x24
 800673a:	e767      	b.n	800660c <_vfiprintf_r+0x94>
 800673c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006740:	460c      	mov	r4, r1
 8006742:	2001      	movs	r0, #1
 8006744:	e7a5      	b.n	8006692 <_vfiprintf_r+0x11a>
 8006746:	2300      	movs	r3, #0
 8006748:	3401      	adds	r4, #1
 800674a:	9305      	str	r3, [sp, #20]
 800674c:	4619      	mov	r1, r3
 800674e:	f04f 0c0a 	mov.w	ip, #10
 8006752:	4620      	mov	r0, r4
 8006754:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006758:	3a30      	subs	r2, #48	; 0x30
 800675a:	2a09      	cmp	r2, #9
 800675c:	d903      	bls.n	8006766 <_vfiprintf_r+0x1ee>
 800675e:	2b00      	cmp	r3, #0
 8006760:	d0c5      	beq.n	80066ee <_vfiprintf_r+0x176>
 8006762:	9105      	str	r1, [sp, #20]
 8006764:	e7c3      	b.n	80066ee <_vfiprintf_r+0x176>
 8006766:	fb0c 2101 	mla	r1, ip, r1, r2
 800676a:	4604      	mov	r4, r0
 800676c:	2301      	movs	r3, #1
 800676e:	e7f0      	b.n	8006752 <_vfiprintf_r+0x1da>
 8006770:	ab03      	add	r3, sp, #12
 8006772:	9300      	str	r3, [sp, #0]
 8006774:	462a      	mov	r2, r5
 8006776:	4b16      	ldr	r3, [pc, #88]	; (80067d0 <_vfiprintf_r+0x258>)
 8006778:	a904      	add	r1, sp, #16
 800677a:	4630      	mov	r0, r6
 800677c:	f3af 8000 	nop.w
 8006780:	4607      	mov	r7, r0
 8006782:	1c78      	adds	r0, r7, #1
 8006784:	d1d6      	bne.n	8006734 <_vfiprintf_r+0x1bc>
 8006786:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006788:	07d9      	lsls	r1, r3, #31
 800678a:	d405      	bmi.n	8006798 <_vfiprintf_r+0x220>
 800678c:	89ab      	ldrh	r3, [r5, #12]
 800678e:	059a      	lsls	r2, r3, #22
 8006790:	d402      	bmi.n	8006798 <_vfiprintf_r+0x220>
 8006792:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006794:	f000 fc45 	bl	8007022 <__retarget_lock_release_recursive>
 8006798:	89ab      	ldrh	r3, [r5, #12]
 800679a:	065b      	lsls	r3, r3, #25
 800679c:	f53f af12 	bmi.w	80065c4 <_vfiprintf_r+0x4c>
 80067a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067a2:	e711      	b.n	80065c8 <_vfiprintf_r+0x50>
 80067a4:	ab03      	add	r3, sp, #12
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	462a      	mov	r2, r5
 80067aa:	4b09      	ldr	r3, [pc, #36]	; (80067d0 <_vfiprintf_r+0x258>)
 80067ac:	a904      	add	r1, sp, #16
 80067ae:	4630      	mov	r0, r6
 80067b0:	f000 f880 	bl	80068b4 <_printf_i>
 80067b4:	e7e4      	b.n	8006780 <_vfiprintf_r+0x208>
 80067b6:	bf00      	nop
 80067b8:	080075ac 	.word	0x080075ac
 80067bc:	080075cc 	.word	0x080075cc
 80067c0:	0800758c 	.word	0x0800758c
 80067c4:	08007556 	.word	0x08007556
 80067c8:	08007560 	.word	0x08007560
 80067cc:	00000000 	.word	0x00000000
 80067d0:	08006553 	.word	0x08006553
 80067d4:	0800755c 	.word	0x0800755c

080067d8 <_printf_common>:
 80067d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067dc:	4616      	mov	r6, r2
 80067de:	4699      	mov	r9, r3
 80067e0:	688a      	ldr	r2, [r1, #8]
 80067e2:	690b      	ldr	r3, [r1, #16]
 80067e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067e8:	4293      	cmp	r3, r2
 80067ea:	bfb8      	it	lt
 80067ec:	4613      	movlt	r3, r2
 80067ee:	6033      	str	r3, [r6, #0]
 80067f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067f4:	4607      	mov	r7, r0
 80067f6:	460c      	mov	r4, r1
 80067f8:	b10a      	cbz	r2, 80067fe <_printf_common+0x26>
 80067fa:	3301      	adds	r3, #1
 80067fc:	6033      	str	r3, [r6, #0]
 80067fe:	6823      	ldr	r3, [r4, #0]
 8006800:	0699      	lsls	r1, r3, #26
 8006802:	bf42      	ittt	mi
 8006804:	6833      	ldrmi	r3, [r6, #0]
 8006806:	3302      	addmi	r3, #2
 8006808:	6033      	strmi	r3, [r6, #0]
 800680a:	6825      	ldr	r5, [r4, #0]
 800680c:	f015 0506 	ands.w	r5, r5, #6
 8006810:	d106      	bne.n	8006820 <_printf_common+0x48>
 8006812:	f104 0a19 	add.w	sl, r4, #25
 8006816:	68e3      	ldr	r3, [r4, #12]
 8006818:	6832      	ldr	r2, [r6, #0]
 800681a:	1a9b      	subs	r3, r3, r2
 800681c:	42ab      	cmp	r3, r5
 800681e:	dc26      	bgt.n	800686e <_printf_common+0x96>
 8006820:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006824:	1e13      	subs	r3, r2, #0
 8006826:	6822      	ldr	r2, [r4, #0]
 8006828:	bf18      	it	ne
 800682a:	2301      	movne	r3, #1
 800682c:	0692      	lsls	r2, r2, #26
 800682e:	d42b      	bmi.n	8006888 <_printf_common+0xb0>
 8006830:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006834:	4649      	mov	r1, r9
 8006836:	4638      	mov	r0, r7
 8006838:	47c0      	blx	r8
 800683a:	3001      	adds	r0, #1
 800683c:	d01e      	beq.n	800687c <_printf_common+0xa4>
 800683e:	6823      	ldr	r3, [r4, #0]
 8006840:	68e5      	ldr	r5, [r4, #12]
 8006842:	6832      	ldr	r2, [r6, #0]
 8006844:	f003 0306 	and.w	r3, r3, #6
 8006848:	2b04      	cmp	r3, #4
 800684a:	bf08      	it	eq
 800684c:	1aad      	subeq	r5, r5, r2
 800684e:	68a3      	ldr	r3, [r4, #8]
 8006850:	6922      	ldr	r2, [r4, #16]
 8006852:	bf0c      	ite	eq
 8006854:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006858:	2500      	movne	r5, #0
 800685a:	4293      	cmp	r3, r2
 800685c:	bfc4      	itt	gt
 800685e:	1a9b      	subgt	r3, r3, r2
 8006860:	18ed      	addgt	r5, r5, r3
 8006862:	2600      	movs	r6, #0
 8006864:	341a      	adds	r4, #26
 8006866:	42b5      	cmp	r5, r6
 8006868:	d11a      	bne.n	80068a0 <_printf_common+0xc8>
 800686a:	2000      	movs	r0, #0
 800686c:	e008      	b.n	8006880 <_printf_common+0xa8>
 800686e:	2301      	movs	r3, #1
 8006870:	4652      	mov	r2, sl
 8006872:	4649      	mov	r1, r9
 8006874:	4638      	mov	r0, r7
 8006876:	47c0      	blx	r8
 8006878:	3001      	adds	r0, #1
 800687a:	d103      	bne.n	8006884 <_printf_common+0xac>
 800687c:	f04f 30ff 	mov.w	r0, #4294967295
 8006880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006884:	3501      	adds	r5, #1
 8006886:	e7c6      	b.n	8006816 <_printf_common+0x3e>
 8006888:	18e1      	adds	r1, r4, r3
 800688a:	1c5a      	adds	r2, r3, #1
 800688c:	2030      	movs	r0, #48	; 0x30
 800688e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006892:	4422      	add	r2, r4
 8006894:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006898:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800689c:	3302      	adds	r3, #2
 800689e:	e7c7      	b.n	8006830 <_printf_common+0x58>
 80068a0:	2301      	movs	r3, #1
 80068a2:	4622      	mov	r2, r4
 80068a4:	4649      	mov	r1, r9
 80068a6:	4638      	mov	r0, r7
 80068a8:	47c0      	blx	r8
 80068aa:	3001      	adds	r0, #1
 80068ac:	d0e6      	beq.n	800687c <_printf_common+0xa4>
 80068ae:	3601      	adds	r6, #1
 80068b0:	e7d9      	b.n	8006866 <_printf_common+0x8e>
	...

080068b4 <_printf_i>:
 80068b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068b8:	460c      	mov	r4, r1
 80068ba:	4691      	mov	r9, r2
 80068bc:	7e27      	ldrb	r7, [r4, #24]
 80068be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80068c0:	2f78      	cmp	r7, #120	; 0x78
 80068c2:	4680      	mov	r8, r0
 80068c4:	469a      	mov	sl, r3
 80068c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068ca:	d807      	bhi.n	80068dc <_printf_i+0x28>
 80068cc:	2f62      	cmp	r7, #98	; 0x62
 80068ce:	d80a      	bhi.n	80068e6 <_printf_i+0x32>
 80068d0:	2f00      	cmp	r7, #0
 80068d2:	f000 80d8 	beq.w	8006a86 <_printf_i+0x1d2>
 80068d6:	2f58      	cmp	r7, #88	; 0x58
 80068d8:	f000 80a3 	beq.w	8006a22 <_printf_i+0x16e>
 80068dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80068e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80068e4:	e03a      	b.n	800695c <_printf_i+0xa8>
 80068e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80068ea:	2b15      	cmp	r3, #21
 80068ec:	d8f6      	bhi.n	80068dc <_printf_i+0x28>
 80068ee:	a001      	add	r0, pc, #4	; (adr r0, 80068f4 <_printf_i+0x40>)
 80068f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80068f4:	0800694d 	.word	0x0800694d
 80068f8:	08006961 	.word	0x08006961
 80068fc:	080068dd 	.word	0x080068dd
 8006900:	080068dd 	.word	0x080068dd
 8006904:	080068dd 	.word	0x080068dd
 8006908:	080068dd 	.word	0x080068dd
 800690c:	08006961 	.word	0x08006961
 8006910:	080068dd 	.word	0x080068dd
 8006914:	080068dd 	.word	0x080068dd
 8006918:	080068dd 	.word	0x080068dd
 800691c:	080068dd 	.word	0x080068dd
 8006920:	08006a6d 	.word	0x08006a6d
 8006924:	08006991 	.word	0x08006991
 8006928:	08006a4f 	.word	0x08006a4f
 800692c:	080068dd 	.word	0x080068dd
 8006930:	080068dd 	.word	0x080068dd
 8006934:	08006a8f 	.word	0x08006a8f
 8006938:	080068dd 	.word	0x080068dd
 800693c:	08006991 	.word	0x08006991
 8006940:	080068dd 	.word	0x080068dd
 8006944:	080068dd 	.word	0x080068dd
 8006948:	08006a57 	.word	0x08006a57
 800694c:	680b      	ldr	r3, [r1, #0]
 800694e:	1d1a      	adds	r2, r3, #4
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	600a      	str	r2, [r1, #0]
 8006954:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006958:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800695c:	2301      	movs	r3, #1
 800695e:	e0a3      	b.n	8006aa8 <_printf_i+0x1f4>
 8006960:	6825      	ldr	r5, [r4, #0]
 8006962:	6808      	ldr	r0, [r1, #0]
 8006964:	062e      	lsls	r6, r5, #24
 8006966:	f100 0304 	add.w	r3, r0, #4
 800696a:	d50a      	bpl.n	8006982 <_printf_i+0xce>
 800696c:	6805      	ldr	r5, [r0, #0]
 800696e:	600b      	str	r3, [r1, #0]
 8006970:	2d00      	cmp	r5, #0
 8006972:	da03      	bge.n	800697c <_printf_i+0xc8>
 8006974:	232d      	movs	r3, #45	; 0x2d
 8006976:	426d      	negs	r5, r5
 8006978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800697c:	485e      	ldr	r0, [pc, #376]	; (8006af8 <_printf_i+0x244>)
 800697e:	230a      	movs	r3, #10
 8006980:	e019      	b.n	80069b6 <_printf_i+0x102>
 8006982:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006986:	6805      	ldr	r5, [r0, #0]
 8006988:	600b      	str	r3, [r1, #0]
 800698a:	bf18      	it	ne
 800698c:	b22d      	sxthne	r5, r5
 800698e:	e7ef      	b.n	8006970 <_printf_i+0xbc>
 8006990:	680b      	ldr	r3, [r1, #0]
 8006992:	6825      	ldr	r5, [r4, #0]
 8006994:	1d18      	adds	r0, r3, #4
 8006996:	6008      	str	r0, [r1, #0]
 8006998:	0628      	lsls	r0, r5, #24
 800699a:	d501      	bpl.n	80069a0 <_printf_i+0xec>
 800699c:	681d      	ldr	r5, [r3, #0]
 800699e:	e002      	b.n	80069a6 <_printf_i+0xf2>
 80069a0:	0669      	lsls	r1, r5, #25
 80069a2:	d5fb      	bpl.n	800699c <_printf_i+0xe8>
 80069a4:	881d      	ldrh	r5, [r3, #0]
 80069a6:	4854      	ldr	r0, [pc, #336]	; (8006af8 <_printf_i+0x244>)
 80069a8:	2f6f      	cmp	r7, #111	; 0x6f
 80069aa:	bf0c      	ite	eq
 80069ac:	2308      	moveq	r3, #8
 80069ae:	230a      	movne	r3, #10
 80069b0:	2100      	movs	r1, #0
 80069b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069b6:	6866      	ldr	r6, [r4, #4]
 80069b8:	60a6      	str	r6, [r4, #8]
 80069ba:	2e00      	cmp	r6, #0
 80069bc:	bfa2      	ittt	ge
 80069be:	6821      	ldrge	r1, [r4, #0]
 80069c0:	f021 0104 	bicge.w	r1, r1, #4
 80069c4:	6021      	strge	r1, [r4, #0]
 80069c6:	b90d      	cbnz	r5, 80069cc <_printf_i+0x118>
 80069c8:	2e00      	cmp	r6, #0
 80069ca:	d04d      	beq.n	8006a68 <_printf_i+0x1b4>
 80069cc:	4616      	mov	r6, r2
 80069ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80069d2:	fb03 5711 	mls	r7, r3, r1, r5
 80069d6:	5dc7      	ldrb	r7, [r0, r7]
 80069d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069dc:	462f      	mov	r7, r5
 80069de:	42bb      	cmp	r3, r7
 80069e0:	460d      	mov	r5, r1
 80069e2:	d9f4      	bls.n	80069ce <_printf_i+0x11a>
 80069e4:	2b08      	cmp	r3, #8
 80069e6:	d10b      	bne.n	8006a00 <_printf_i+0x14c>
 80069e8:	6823      	ldr	r3, [r4, #0]
 80069ea:	07df      	lsls	r7, r3, #31
 80069ec:	d508      	bpl.n	8006a00 <_printf_i+0x14c>
 80069ee:	6923      	ldr	r3, [r4, #16]
 80069f0:	6861      	ldr	r1, [r4, #4]
 80069f2:	4299      	cmp	r1, r3
 80069f4:	bfde      	ittt	le
 80069f6:	2330      	movle	r3, #48	; 0x30
 80069f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80069fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a00:	1b92      	subs	r2, r2, r6
 8006a02:	6122      	str	r2, [r4, #16]
 8006a04:	f8cd a000 	str.w	sl, [sp]
 8006a08:	464b      	mov	r3, r9
 8006a0a:	aa03      	add	r2, sp, #12
 8006a0c:	4621      	mov	r1, r4
 8006a0e:	4640      	mov	r0, r8
 8006a10:	f7ff fee2 	bl	80067d8 <_printf_common>
 8006a14:	3001      	adds	r0, #1
 8006a16:	d14c      	bne.n	8006ab2 <_printf_i+0x1fe>
 8006a18:	f04f 30ff 	mov.w	r0, #4294967295
 8006a1c:	b004      	add	sp, #16
 8006a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a22:	4835      	ldr	r0, [pc, #212]	; (8006af8 <_printf_i+0x244>)
 8006a24:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a28:	6823      	ldr	r3, [r4, #0]
 8006a2a:	680e      	ldr	r6, [r1, #0]
 8006a2c:	061f      	lsls	r7, r3, #24
 8006a2e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006a32:	600e      	str	r6, [r1, #0]
 8006a34:	d514      	bpl.n	8006a60 <_printf_i+0x1ac>
 8006a36:	07d9      	lsls	r1, r3, #31
 8006a38:	bf44      	itt	mi
 8006a3a:	f043 0320 	orrmi.w	r3, r3, #32
 8006a3e:	6023      	strmi	r3, [r4, #0]
 8006a40:	b91d      	cbnz	r5, 8006a4a <_printf_i+0x196>
 8006a42:	6823      	ldr	r3, [r4, #0]
 8006a44:	f023 0320 	bic.w	r3, r3, #32
 8006a48:	6023      	str	r3, [r4, #0]
 8006a4a:	2310      	movs	r3, #16
 8006a4c:	e7b0      	b.n	80069b0 <_printf_i+0xfc>
 8006a4e:	6823      	ldr	r3, [r4, #0]
 8006a50:	f043 0320 	orr.w	r3, r3, #32
 8006a54:	6023      	str	r3, [r4, #0]
 8006a56:	2378      	movs	r3, #120	; 0x78
 8006a58:	4828      	ldr	r0, [pc, #160]	; (8006afc <_printf_i+0x248>)
 8006a5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a5e:	e7e3      	b.n	8006a28 <_printf_i+0x174>
 8006a60:	065e      	lsls	r6, r3, #25
 8006a62:	bf48      	it	mi
 8006a64:	b2ad      	uxthmi	r5, r5
 8006a66:	e7e6      	b.n	8006a36 <_printf_i+0x182>
 8006a68:	4616      	mov	r6, r2
 8006a6a:	e7bb      	b.n	80069e4 <_printf_i+0x130>
 8006a6c:	680b      	ldr	r3, [r1, #0]
 8006a6e:	6826      	ldr	r6, [r4, #0]
 8006a70:	6960      	ldr	r0, [r4, #20]
 8006a72:	1d1d      	adds	r5, r3, #4
 8006a74:	600d      	str	r5, [r1, #0]
 8006a76:	0635      	lsls	r5, r6, #24
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	d501      	bpl.n	8006a80 <_printf_i+0x1cc>
 8006a7c:	6018      	str	r0, [r3, #0]
 8006a7e:	e002      	b.n	8006a86 <_printf_i+0x1d2>
 8006a80:	0671      	lsls	r1, r6, #25
 8006a82:	d5fb      	bpl.n	8006a7c <_printf_i+0x1c8>
 8006a84:	8018      	strh	r0, [r3, #0]
 8006a86:	2300      	movs	r3, #0
 8006a88:	6123      	str	r3, [r4, #16]
 8006a8a:	4616      	mov	r6, r2
 8006a8c:	e7ba      	b.n	8006a04 <_printf_i+0x150>
 8006a8e:	680b      	ldr	r3, [r1, #0]
 8006a90:	1d1a      	adds	r2, r3, #4
 8006a92:	600a      	str	r2, [r1, #0]
 8006a94:	681e      	ldr	r6, [r3, #0]
 8006a96:	6862      	ldr	r2, [r4, #4]
 8006a98:	2100      	movs	r1, #0
 8006a9a:	4630      	mov	r0, r6
 8006a9c:	f7f9 fba0 	bl	80001e0 <memchr>
 8006aa0:	b108      	cbz	r0, 8006aa6 <_printf_i+0x1f2>
 8006aa2:	1b80      	subs	r0, r0, r6
 8006aa4:	6060      	str	r0, [r4, #4]
 8006aa6:	6863      	ldr	r3, [r4, #4]
 8006aa8:	6123      	str	r3, [r4, #16]
 8006aaa:	2300      	movs	r3, #0
 8006aac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ab0:	e7a8      	b.n	8006a04 <_printf_i+0x150>
 8006ab2:	6923      	ldr	r3, [r4, #16]
 8006ab4:	4632      	mov	r2, r6
 8006ab6:	4649      	mov	r1, r9
 8006ab8:	4640      	mov	r0, r8
 8006aba:	47d0      	blx	sl
 8006abc:	3001      	adds	r0, #1
 8006abe:	d0ab      	beq.n	8006a18 <_printf_i+0x164>
 8006ac0:	6823      	ldr	r3, [r4, #0]
 8006ac2:	079b      	lsls	r3, r3, #30
 8006ac4:	d413      	bmi.n	8006aee <_printf_i+0x23a>
 8006ac6:	68e0      	ldr	r0, [r4, #12]
 8006ac8:	9b03      	ldr	r3, [sp, #12]
 8006aca:	4298      	cmp	r0, r3
 8006acc:	bfb8      	it	lt
 8006ace:	4618      	movlt	r0, r3
 8006ad0:	e7a4      	b.n	8006a1c <_printf_i+0x168>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	4632      	mov	r2, r6
 8006ad6:	4649      	mov	r1, r9
 8006ad8:	4640      	mov	r0, r8
 8006ada:	47d0      	blx	sl
 8006adc:	3001      	adds	r0, #1
 8006ade:	d09b      	beq.n	8006a18 <_printf_i+0x164>
 8006ae0:	3501      	adds	r5, #1
 8006ae2:	68e3      	ldr	r3, [r4, #12]
 8006ae4:	9903      	ldr	r1, [sp, #12]
 8006ae6:	1a5b      	subs	r3, r3, r1
 8006ae8:	42ab      	cmp	r3, r5
 8006aea:	dcf2      	bgt.n	8006ad2 <_printf_i+0x21e>
 8006aec:	e7eb      	b.n	8006ac6 <_printf_i+0x212>
 8006aee:	2500      	movs	r5, #0
 8006af0:	f104 0619 	add.w	r6, r4, #25
 8006af4:	e7f5      	b.n	8006ae2 <_printf_i+0x22e>
 8006af6:	bf00      	nop
 8006af8:	08007567 	.word	0x08007567
 8006afc:	08007578 	.word	0x08007578

08006b00 <_sbrk_r>:
 8006b00:	b538      	push	{r3, r4, r5, lr}
 8006b02:	4d06      	ldr	r5, [pc, #24]	; (8006b1c <_sbrk_r+0x1c>)
 8006b04:	2300      	movs	r3, #0
 8006b06:	4604      	mov	r4, r0
 8006b08:	4608      	mov	r0, r1
 8006b0a:	602b      	str	r3, [r5, #0]
 8006b0c:	f7fa f9da 	bl	8000ec4 <_sbrk>
 8006b10:	1c43      	adds	r3, r0, #1
 8006b12:	d102      	bne.n	8006b1a <_sbrk_r+0x1a>
 8006b14:	682b      	ldr	r3, [r5, #0]
 8006b16:	b103      	cbz	r3, 8006b1a <_sbrk_r+0x1a>
 8006b18:	6023      	str	r3, [r4, #0]
 8006b1a:	bd38      	pop	{r3, r4, r5, pc}
 8006b1c:	20012ff0 	.word	0x20012ff0

08006b20 <__swbuf_r>:
 8006b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b22:	460e      	mov	r6, r1
 8006b24:	4614      	mov	r4, r2
 8006b26:	4605      	mov	r5, r0
 8006b28:	b118      	cbz	r0, 8006b32 <__swbuf_r+0x12>
 8006b2a:	6983      	ldr	r3, [r0, #24]
 8006b2c:	b90b      	cbnz	r3, 8006b32 <__swbuf_r+0x12>
 8006b2e:	f000 f9d9 	bl	8006ee4 <__sinit>
 8006b32:	4b21      	ldr	r3, [pc, #132]	; (8006bb8 <__swbuf_r+0x98>)
 8006b34:	429c      	cmp	r4, r3
 8006b36:	d12b      	bne.n	8006b90 <__swbuf_r+0x70>
 8006b38:	686c      	ldr	r4, [r5, #4]
 8006b3a:	69a3      	ldr	r3, [r4, #24]
 8006b3c:	60a3      	str	r3, [r4, #8]
 8006b3e:	89a3      	ldrh	r3, [r4, #12]
 8006b40:	071a      	lsls	r2, r3, #28
 8006b42:	d52f      	bpl.n	8006ba4 <__swbuf_r+0x84>
 8006b44:	6923      	ldr	r3, [r4, #16]
 8006b46:	b36b      	cbz	r3, 8006ba4 <__swbuf_r+0x84>
 8006b48:	6923      	ldr	r3, [r4, #16]
 8006b4a:	6820      	ldr	r0, [r4, #0]
 8006b4c:	1ac0      	subs	r0, r0, r3
 8006b4e:	6963      	ldr	r3, [r4, #20]
 8006b50:	b2f6      	uxtb	r6, r6
 8006b52:	4283      	cmp	r3, r0
 8006b54:	4637      	mov	r7, r6
 8006b56:	dc04      	bgt.n	8006b62 <__swbuf_r+0x42>
 8006b58:	4621      	mov	r1, r4
 8006b5a:	4628      	mov	r0, r5
 8006b5c:	f000 f92e 	bl	8006dbc <_fflush_r>
 8006b60:	bb30      	cbnz	r0, 8006bb0 <__swbuf_r+0x90>
 8006b62:	68a3      	ldr	r3, [r4, #8]
 8006b64:	3b01      	subs	r3, #1
 8006b66:	60a3      	str	r3, [r4, #8]
 8006b68:	6823      	ldr	r3, [r4, #0]
 8006b6a:	1c5a      	adds	r2, r3, #1
 8006b6c:	6022      	str	r2, [r4, #0]
 8006b6e:	701e      	strb	r6, [r3, #0]
 8006b70:	6963      	ldr	r3, [r4, #20]
 8006b72:	3001      	adds	r0, #1
 8006b74:	4283      	cmp	r3, r0
 8006b76:	d004      	beq.n	8006b82 <__swbuf_r+0x62>
 8006b78:	89a3      	ldrh	r3, [r4, #12]
 8006b7a:	07db      	lsls	r3, r3, #31
 8006b7c:	d506      	bpl.n	8006b8c <__swbuf_r+0x6c>
 8006b7e:	2e0a      	cmp	r6, #10
 8006b80:	d104      	bne.n	8006b8c <__swbuf_r+0x6c>
 8006b82:	4621      	mov	r1, r4
 8006b84:	4628      	mov	r0, r5
 8006b86:	f000 f919 	bl	8006dbc <_fflush_r>
 8006b8a:	b988      	cbnz	r0, 8006bb0 <__swbuf_r+0x90>
 8006b8c:	4638      	mov	r0, r7
 8006b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b90:	4b0a      	ldr	r3, [pc, #40]	; (8006bbc <__swbuf_r+0x9c>)
 8006b92:	429c      	cmp	r4, r3
 8006b94:	d101      	bne.n	8006b9a <__swbuf_r+0x7a>
 8006b96:	68ac      	ldr	r4, [r5, #8]
 8006b98:	e7cf      	b.n	8006b3a <__swbuf_r+0x1a>
 8006b9a:	4b09      	ldr	r3, [pc, #36]	; (8006bc0 <__swbuf_r+0xa0>)
 8006b9c:	429c      	cmp	r4, r3
 8006b9e:	bf08      	it	eq
 8006ba0:	68ec      	ldreq	r4, [r5, #12]
 8006ba2:	e7ca      	b.n	8006b3a <__swbuf_r+0x1a>
 8006ba4:	4621      	mov	r1, r4
 8006ba6:	4628      	mov	r0, r5
 8006ba8:	f000 f80c 	bl	8006bc4 <__swsetup_r>
 8006bac:	2800      	cmp	r0, #0
 8006bae:	d0cb      	beq.n	8006b48 <__swbuf_r+0x28>
 8006bb0:	f04f 37ff 	mov.w	r7, #4294967295
 8006bb4:	e7ea      	b.n	8006b8c <__swbuf_r+0x6c>
 8006bb6:	bf00      	nop
 8006bb8:	080075ac 	.word	0x080075ac
 8006bbc:	080075cc 	.word	0x080075cc
 8006bc0:	0800758c 	.word	0x0800758c

08006bc4 <__swsetup_r>:
 8006bc4:	4b32      	ldr	r3, [pc, #200]	; (8006c90 <__swsetup_r+0xcc>)
 8006bc6:	b570      	push	{r4, r5, r6, lr}
 8006bc8:	681d      	ldr	r5, [r3, #0]
 8006bca:	4606      	mov	r6, r0
 8006bcc:	460c      	mov	r4, r1
 8006bce:	b125      	cbz	r5, 8006bda <__swsetup_r+0x16>
 8006bd0:	69ab      	ldr	r3, [r5, #24]
 8006bd2:	b913      	cbnz	r3, 8006bda <__swsetup_r+0x16>
 8006bd4:	4628      	mov	r0, r5
 8006bd6:	f000 f985 	bl	8006ee4 <__sinit>
 8006bda:	4b2e      	ldr	r3, [pc, #184]	; (8006c94 <__swsetup_r+0xd0>)
 8006bdc:	429c      	cmp	r4, r3
 8006bde:	d10f      	bne.n	8006c00 <__swsetup_r+0x3c>
 8006be0:	686c      	ldr	r4, [r5, #4]
 8006be2:	89a3      	ldrh	r3, [r4, #12]
 8006be4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006be8:	0719      	lsls	r1, r3, #28
 8006bea:	d42c      	bmi.n	8006c46 <__swsetup_r+0x82>
 8006bec:	06dd      	lsls	r5, r3, #27
 8006bee:	d411      	bmi.n	8006c14 <__swsetup_r+0x50>
 8006bf0:	2309      	movs	r3, #9
 8006bf2:	6033      	str	r3, [r6, #0]
 8006bf4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006bf8:	81a3      	strh	r3, [r4, #12]
 8006bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8006bfe:	e03e      	b.n	8006c7e <__swsetup_r+0xba>
 8006c00:	4b25      	ldr	r3, [pc, #148]	; (8006c98 <__swsetup_r+0xd4>)
 8006c02:	429c      	cmp	r4, r3
 8006c04:	d101      	bne.n	8006c0a <__swsetup_r+0x46>
 8006c06:	68ac      	ldr	r4, [r5, #8]
 8006c08:	e7eb      	b.n	8006be2 <__swsetup_r+0x1e>
 8006c0a:	4b24      	ldr	r3, [pc, #144]	; (8006c9c <__swsetup_r+0xd8>)
 8006c0c:	429c      	cmp	r4, r3
 8006c0e:	bf08      	it	eq
 8006c10:	68ec      	ldreq	r4, [r5, #12]
 8006c12:	e7e6      	b.n	8006be2 <__swsetup_r+0x1e>
 8006c14:	0758      	lsls	r0, r3, #29
 8006c16:	d512      	bpl.n	8006c3e <__swsetup_r+0x7a>
 8006c18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c1a:	b141      	cbz	r1, 8006c2e <__swsetup_r+0x6a>
 8006c1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c20:	4299      	cmp	r1, r3
 8006c22:	d002      	beq.n	8006c2a <__swsetup_r+0x66>
 8006c24:	4630      	mov	r0, r6
 8006c26:	f7ff fa77 	bl	8006118 <_free_r>
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	6363      	str	r3, [r4, #52]	; 0x34
 8006c2e:	89a3      	ldrh	r3, [r4, #12]
 8006c30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c34:	81a3      	strh	r3, [r4, #12]
 8006c36:	2300      	movs	r3, #0
 8006c38:	6063      	str	r3, [r4, #4]
 8006c3a:	6923      	ldr	r3, [r4, #16]
 8006c3c:	6023      	str	r3, [r4, #0]
 8006c3e:	89a3      	ldrh	r3, [r4, #12]
 8006c40:	f043 0308 	orr.w	r3, r3, #8
 8006c44:	81a3      	strh	r3, [r4, #12]
 8006c46:	6923      	ldr	r3, [r4, #16]
 8006c48:	b94b      	cbnz	r3, 8006c5e <__swsetup_r+0x9a>
 8006c4a:	89a3      	ldrh	r3, [r4, #12]
 8006c4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c54:	d003      	beq.n	8006c5e <__swsetup_r+0x9a>
 8006c56:	4621      	mov	r1, r4
 8006c58:	4630      	mov	r0, r6
 8006c5a:	f000 fa07 	bl	800706c <__smakebuf_r>
 8006c5e:	89a0      	ldrh	r0, [r4, #12]
 8006c60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c64:	f010 0301 	ands.w	r3, r0, #1
 8006c68:	d00a      	beq.n	8006c80 <__swsetup_r+0xbc>
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	60a3      	str	r3, [r4, #8]
 8006c6e:	6963      	ldr	r3, [r4, #20]
 8006c70:	425b      	negs	r3, r3
 8006c72:	61a3      	str	r3, [r4, #24]
 8006c74:	6923      	ldr	r3, [r4, #16]
 8006c76:	b943      	cbnz	r3, 8006c8a <__swsetup_r+0xc6>
 8006c78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c7c:	d1ba      	bne.n	8006bf4 <__swsetup_r+0x30>
 8006c7e:	bd70      	pop	{r4, r5, r6, pc}
 8006c80:	0781      	lsls	r1, r0, #30
 8006c82:	bf58      	it	pl
 8006c84:	6963      	ldrpl	r3, [r4, #20]
 8006c86:	60a3      	str	r3, [r4, #8]
 8006c88:	e7f4      	b.n	8006c74 <__swsetup_r+0xb0>
 8006c8a:	2000      	movs	r0, #0
 8006c8c:	e7f7      	b.n	8006c7e <__swsetup_r+0xba>
 8006c8e:	bf00      	nop
 8006c90:	20000014 	.word	0x20000014
 8006c94:	080075ac 	.word	0x080075ac
 8006c98:	080075cc 	.word	0x080075cc
 8006c9c:	0800758c 	.word	0x0800758c

08006ca0 <abort>:
 8006ca0:	b508      	push	{r3, lr}
 8006ca2:	2006      	movs	r0, #6
 8006ca4:	f000 fa96 	bl	80071d4 <raise>
 8006ca8:	2001      	movs	r0, #1
 8006caa:	f7fa f893 	bl	8000dd4 <_exit>
	...

08006cb0 <__sflush_r>:
 8006cb0:	898a      	ldrh	r2, [r1, #12]
 8006cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cb6:	4605      	mov	r5, r0
 8006cb8:	0710      	lsls	r0, r2, #28
 8006cba:	460c      	mov	r4, r1
 8006cbc:	d458      	bmi.n	8006d70 <__sflush_r+0xc0>
 8006cbe:	684b      	ldr	r3, [r1, #4]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	dc05      	bgt.n	8006cd0 <__sflush_r+0x20>
 8006cc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	dc02      	bgt.n	8006cd0 <__sflush_r+0x20>
 8006cca:	2000      	movs	r0, #0
 8006ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cd2:	2e00      	cmp	r6, #0
 8006cd4:	d0f9      	beq.n	8006cca <__sflush_r+0x1a>
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006cdc:	682f      	ldr	r7, [r5, #0]
 8006cde:	602b      	str	r3, [r5, #0]
 8006ce0:	d032      	beq.n	8006d48 <__sflush_r+0x98>
 8006ce2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ce4:	89a3      	ldrh	r3, [r4, #12]
 8006ce6:	075a      	lsls	r2, r3, #29
 8006ce8:	d505      	bpl.n	8006cf6 <__sflush_r+0x46>
 8006cea:	6863      	ldr	r3, [r4, #4]
 8006cec:	1ac0      	subs	r0, r0, r3
 8006cee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006cf0:	b10b      	cbz	r3, 8006cf6 <__sflush_r+0x46>
 8006cf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006cf4:	1ac0      	subs	r0, r0, r3
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cfc:	6a21      	ldr	r1, [r4, #32]
 8006cfe:	4628      	mov	r0, r5
 8006d00:	47b0      	blx	r6
 8006d02:	1c43      	adds	r3, r0, #1
 8006d04:	89a3      	ldrh	r3, [r4, #12]
 8006d06:	d106      	bne.n	8006d16 <__sflush_r+0x66>
 8006d08:	6829      	ldr	r1, [r5, #0]
 8006d0a:	291d      	cmp	r1, #29
 8006d0c:	d82c      	bhi.n	8006d68 <__sflush_r+0xb8>
 8006d0e:	4a2a      	ldr	r2, [pc, #168]	; (8006db8 <__sflush_r+0x108>)
 8006d10:	40ca      	lsrs	r2, r1
 8006d12:	07d6      	lsls	r6, r2, #31
 8006d14:	d528      	bpl.n	8006d68 <__sflush_r+0xb8>
 8006d16:	2200      	movs	r2, #0
 8006d18:	6062      	str	r2, [r4, #4]
 8006d1a:	04d9      	lsls	r1, r3, #19
 8006d1c:	6922      	ldr	r2, [r4, #16]
 8006d1e:	6022      	str	r2, [r4, #0]
 8006d20:	d504      	bpl.n	8006d2c <__sflush_r+0x7c>
 8006d22:	1c42      	adds	r2, r0, #1
 8006d24:	d101      	bne.n	8006d2a <__sflush_r+0x7a>
 8006d26:	682b      	ldr	r3, [r5, #0]
 8006d28:	b903      	cbnz	r3, 8006d2c <__sflush_r+0x7c>
 8006d2a:	6560      	str	r0, [r4, #84]	; 0x54
 8006d2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d2e:	602f      	str	r7, [r5, #0]
 8006d30:	2900      	cmp	r1, #0
 8006d32:	d0ca      	beq.n	8006cca <__sflush_r+0x1a>
 8006d34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d38:	4299      	cmp	r1, r3
 8006d3a:	d002      	beq.n	8006d42 <__sflush_r+0x92>
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	f7ff f9eb 	bl	8006118 <_free_r>
 8006d42:	2000      	movs	r0, #0
 8006d44:	6360      	str	r0, [r4, #52]	; 0x34
 8006d46:	e7c1      	b.n	8006ccc <__sflush_r+0x1c>
 8006d48:	6a21      	ldr	r1, [r4, #32]
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	47b0      	blx	r6
 8006d50:	1c41      	adds	r1, r0, #1
 8006d52:	d1c7      	bne.n	8006ce4 <__sflush_r+0x34>
 8006d54:	682b      	ldr	r3, [r5, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d0c4      	beq.n	8006ce4 <__sflush_r+0x34>
 8006d5a:	2b1d      	cmp	r3, #29
 8006d5c:	d001      	beq.n	8006d62 <__sflush_r+0xb2>
 8006d5e:	2b16      	cmp	r3, #22
 8006d60:	d101      	bne.n	8006d66 <__sflush_r+0xb6>
 8006d62:	602f      	str	r7, [r5, #0]
 8006d64:	e7b1      	b.n	8006cca <__sflush_r+0x1a>
 8006d66:	89a3      	ldrh	r3, [r4, #12]
 8006d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d6c:	81a3      	strh	r3, [r4, #12]
 8006d6e:	e7ad      	b.n	8006ccc <__sflush_r+0x1c>
 8006d70:	690f      	ldr	r7, [r1, #16]
 8006d72:	2f00      	cmp	r7, #0
 8006d74:	d0a9      	beq.n	8006cca <__sflush_r+0x1a>
 8006d76:	0793      	lsls	r3, r2, #30
 8006d78:	680e      	ldr	r6, [r1, #0]
 8006d7a:	bf08      	it	eq
 8006d7c:	694b      	ldreq	r3, [r1, #20]
 8006d7e:	600f      	str	r7, [r1, #0]
 8006d80:	bf18      	it	ne
 8006d82:	2300      	movne	r3, #0
 8006d84:	eba6 0807 	sub.w	r8, r6, r7
 8006d88:	608b      	str	r3, [r1, #8]
 8006d8a:	f1b8 0f00 	cmp.w	r8, #0
 8006d8e:	dd9c      	ble.n	8006cca <__sflush_r+0x1a>
 8006d90:	6a21      	ldr	r1, [r4, #32]
 8006d92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d94:	4643      	mov	r3, r8
 8006d96:	463a      	mov	r2, r7
 8006d98:	4628      	mov	r0, r5
 8006d9a:	47b0      	blx	r6
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	dc06      	bgt.n	8006dae <__sflush_r+0xfe>
 8006da0:	89a3      	ldrh	r3, [r4, #12]
 8006da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006da6:	81a3      	strh	r3, [r4, #12]
 8006da8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dac:	e78e      	b.n	8006ccc <__sflush_r+0x1c>
 8006dae:	4407      	add	r7, r0
 8006db0:	eba8 0800 	sub.w	r8, r8, r0
 8006db4:	e7e9      	b.n	8006d8a <__sflush_r+0xda>
 8006db6:	bf00      	nop
 8006db8:	20400001 	.word	0x20400001

08006dbc <_fflush_r>:
 8006dbc:	b538      	push	{r3, r4, r5, lr}
 8006dbe:	690b      	ldr	r3, [r1, #16]
 8006dc0:	4605      	mov	r5, r0
 8006dc2:	460c      	mov	r4, r1
 8006dc4:	b913      	cbnz	r3, 8006dcc <_fflush_r+0x10>
 8006dc6:	2500      	movs	r5, #0
 8006dc8:	4628      	mov	r0, r5
 8006dca:	bd38      	pop	{r3, r4, r5, pc}
 8006dcc:	b118      	cbz	r0, 8006dd6 <_fflush_r+0x1a>
 8006dce:	6983      	ldr	r3, [r0, #24]
 8006dd0:	b90b      	cbnz	r3, 8006dd6 <_fflush_r+0x1a>
 8006dd2:	f000 f887 	bl	8006ee4 <__sinit>
 8006dd6:	4b14      	ldr	r3, [pc, #80]	; (8006e28 <_fflush_r+0x6c>)
 8006dd8:	429c      	cmp	r4, r3
 8006dda:	d11b      	bne.n	8006e14 <_fflush_r+0x58>
 8006ddc:	686c      	ldr	r4, [r5, #4]
 8006dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d0ef      	beq.n	8006dc6 <_fflush_r+0xa>
 8006de6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006de8:	07d0      	lsls	r0, r2, #31
 8006dea:	d404      	bmi.n	8006df6 <_fflush_r+0x3a>
 8006dec:	0599      	lsls	r1, r3, #22
 8006dee:	d402      	bmi.n	8006df6 <_fflush_r+0x3a>
 8006df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006df2:	f000 f915 	bl	8007020 <__retarget_lock_acquire_recursive>
 8006df6:	4628      	mov	r0, r5
 8006df8:	4621      	mov	r1, r4
 8006dfa:	f7ff ff59 	bl	8006cb0 <__sflush_r>
 8006dfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e00:	07da      	lsls	r2, r3, #31
 8006e02:	4605      	mov	r5, r0
 8006e04:	d4e0      	bmi.n	8006dc8 <_fflush_r+0xc>
 8006e06:	89a3      	ldrh	r3, [r4, #12]
 8006e08:	059b      	lsls	r3, r3, #22
 8006e0a:	d4dd      	bmi.n	8006dc8 <_fflush_r+0xc>
 8006e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e0e:	f000 f908 	bl	8007022 <__retarget_lock_release_recursive>
 8006e12:	e7d9      	b.n	8006dc8 <_fflush_r+0xc>
 8006e14:	4b05      	ldr	r3, [pc, #20]	; (8006e2c <_fflush_r+0x70>)
 8006e16:	429c      	cmp	r4, r3
 8006e18:	d101      	bne.n	8006e1e <_fflush_r+0x62>
 8006e1a:	68ac      	ldr	r4, [r5, #8]
 8006e1c:	e7df      	b.n	8006dde <_fflush_r+0x22>
 8006e1e:	4b04      	ldr	r3, [pc, #16]	; (8006e30 <_fflush_r+0x74>)
 8006e20:	429c      	cmp	r4, r3
 8006e22:	bf08      	it	eq
 8006e24:	68ec      	ldreq	r4, [r5, #12]
 8006e26:	e7da      	b.n	8006dde <_fflush_r+0x22>
 8006e28:	080075ac 	.word	0x080075ac
 8006e2c:	080075cc 	.word	0x080075cc
 8006e30:	0800758c 	.word	0x0800758c

08006e34 <std>:
 8006e34:	2300      	movs	r3, #0
 8006e36:	b510      	push	{r4, lr}
 8006e38:	4604      	mov	r4, r0
 8006e3a:	e9c0 3300 	strd	r3, r3, [r0]
 8006e3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e42:	6083      	str	r3, [r0, #8]
 8006e44:	8181      	strh	r1, [r0, #12]
 8006e46:	6643      	str	r3, [r0, #100]	; 0x64
 8006e48:	81c2      	strh	r2, [r0, #14]
 8006e4a:	6183      	str	r3, [r0, #24]
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	2208      	movs	r2, #8
 8006e50:	305c      	adds	r0, #92	; 0x5c
 8006e52:	f7ff f8c1 	bl	8005fd8 <memset>
 8006e56:	4b05      	ldr	r3, [pc, #20]	; (8006e6c <std+0x38>)
 8006e58:	6263      	str	r3, [r4, #36]	; 0x24
 8006e5a:	4b05      	ldr	r3, [pc, #20]	; (8006e70 <std+0x3c>)
 8006e5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e5e:	4b05      	ldr	r3, [pc, #20]	; (8006e74 <std+0x40>)
 8006e60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e62:	4b05      	ldr	r3, [pc, #20]	; (8006e78 <std+0x44>)
 8006e64:	6224      	str	r4, [r4, #32]
 8006e66:	6323      	str	r3, [r4, #48]	; 0x30
 8006e68:	bd10      	pop	{r4, pc}
 8006e6a:	bf00      	nop
 8006e6c:	0800720d 	.word	0x0800720d
 8006e70:	0800722f 	.word	0x0800722f
 8006e74:	08007267 	.word	0x08007267
 8006e78:	0800728b 	.word	0x0800728b

08006e7c <_cleanup_r>:
 8006e7c:	4901      	ldr	r1, [pc, #4]	; (8006e84 <_cleanup_r+0x8>)
 8006e7e:	f000 b8af 	b.w	8006fe0 <_fwalk_reent>
 8006e82:	bf00      	nop
 8006e84:	08006dbd 	.word	0x08006dbd

08006e88 <__sfmoreglue>:
 8006e88:	b570      	push	{r4, r5, r6, lr}
 8006e8a:	1e4a      	subs	r2, r1, #1
 8006e8c:	2568      	movs	r5, #104	; 0x68
 8006e8e:	4355      	muls	r5, r2
 8006e90:	460e      	mov	r6, r1
 8006e92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e96:	f7ff f98f 	bl	80061b8 <_malloc_r>
 8006e9a:	4604      	mov	r4, r0
 8006e9c:	b140      	cbz	r0, 8006eb0 <__sfmoreglue+0x28>
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	e9c0 1600 	strd	r1, r6, [r0]
 8006ea4:	300c      	adds	r0, #12
 8006ea6:	60a0      	str	r0, [r4, #8]
 8006ea8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006eac:	f7ff f894 	bl	8005fd8 <memset>
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	bd70      	pop	{r4, r5, r6, pc}

08006eb4 <__sfp_lock_acquire>:
 8006eb4:	4801      	ldr	r0, [pc, #4]	; (8006ebc <__sfp_lock_acquire+0x8>)
 8006eb6:	f000 b8b3 	b.w	8007020 <__retarget_lock_acquire_recursive>
 8006eba:	bf00      	nop
 8006ebc:	20012fec 	.word	0x20012fec

08006ec0 <__sfp_lock_release>:
 8006ec0:	4801      	ldr	r0, [pc, #4]	; (8006ec8 <__sfp_lock_release+0x8>)
 8006ec2:	f000 b8ae 	b.w	8007022 <__retarget_lock_release_recursive>
 8006ec6:	bf00      	nop
 8006ec8:	20012fec 	.word	0x20012fec

08006ecc <__sinit_lock_acquire>:
 8006ecc:	4801      	ldr	r0, [pc, #4]	; (8006ed4 <__sinit_lock_acquire+0x8>)
 8006ece:	f000 b8a7 	b.w	8007020 <__retarget_lock_acquire_recursive>
 8006ed2:	bf00      	nop
 8006ed4:	20012fe7 	.word	0x20012fe7

08006ed8 <__sinit_lock_release>:
 8006ed8:	4801      	ldr	r0, [pc, #4]	; (8006ee0 <__sinit_lock_release+0x8>)
 8006eda:	f000 b8a2 	b.w	8007022 <__retarget_lock_release_recursive>
 8006ede:	bf00      	nop
 8006ee0:	20012fe7 	.word	0x20012fe7

08006ee4 <__sinit>:
 8006ee4:	b510      	push	{r4, lr}
 8006ee6:	4604      	mov	r4, r0
 8006ee8:	f7ff fff0 	bl	8006ecc <__sinit_lock_acquire>
 8006eec:	69a3      	ldr	r3, [r4, #24]
 8006eee:	b11b      	cbz	r3, 8006ef8 <__sinit+0x14>
 8006ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ef4:	f7ff bff0 	b.w	8006ed8 <__sinit_lock_release>
 8006ef8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006efc:	6523      	str	r3, [r4, #80]	; 0x50
 8006efe:	4b13      	ldr	r3, [pc, #76]	; (8006f4c <__sinit+0x68>)
 8006f00:	4a13      	ldr	r2, [pc, #76]	; (8006f50 <__sinit+0x6c>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f06:	42a3      	cmp	r3, r4
 8006f08:	bf04      	itt	eq
 8006f0a:	2301      	moveq	r3, #1
 8006f0c:	61a3      	streq	r3, [r4, #24]
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f000 f820 	bl	8006f54 <__sfp>
 8006f14:	6060      	str	r0, [r4, #4]
 8006f16:	4620      	mov	r0, r4
 8006f18:	f000 f81c 	bl	8006f54 <__sfp>
 8006f1c:	60a0      	str	r0, [r4, #8]
 8006f1e:	4620      	mov	r0, r4
 8006f20:	f000 f818 	bl	8006f54 <__sfp>
 8006f24:	2200      	movs	r2, #0
 8006f26:	60e0      	str	r0, [r4, #12]
 8006f28:	2104      	movs	r1, #4
 8006f2a:	6860      	ldr	r0, [r4, #4]
 8006f2c:	f7ff ff82 	bl	8006e34 <std>
 8006f30:	68a0      	ldr	r0, [r4, #8]
 8006f32:	2201      	movs	r2, #1
 8006f34:	2109      	movs	r1, #9
 8006f36:	f7ff ff7d 	bl	8006e34 <std>
 8006f3a:	68e0      	ldr	r0, [r4, #12]
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	2112      	movs	r1, #18
 8006f40:	f7ff ff78 	bl	8006e34 <std>
 8006f44:	2301      	movs	r3, #1
 8006f46:	61a3      	str	r3, [r4, #24]
 8006f48:	e7d2      	b.n	8006ef0 <__sinit+0xc>
 8006f4a:	bf00      	nop
 8006f4c:	080074a0 	.word	0x080074a0
 8006f50:	08006e7d 	.word	0x08006e7d

08006f54 <__sfp>:
 8006f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f56:	4607      	mov	r7, r0
 8006f58:	f7ff ffac 	bl	8006eb4 <__sfp_lock_acquire>
 8006f5c:	4b1e      	ldr	r3, [pc, #120]	; (8006fd8 <__sfp+0x84>)
 8006f5e:	681e      	ldr	r6, [r3, #0]
 8006f60:	69b3      	ldr	r3, [r6, #24]
 8006f62:	b913      	cbnz	r3, 8006f6a <__sfp+0x16>
 8006f64:	4630      	mov	r0, r6
 8006f66:	f7ff ffbd 	bl	8006ee4 <__sinit>
 8006f6a:	3648      	adds	r6, #72	; 0x48
 8006f6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f70:	3b01      	subs	r3, #1
 8006f72:	d503      	bpl.n	8006f7c <__sfp+0x28>
 8006f74:	6833      	ldr	r3, [r6, #0]
 8006f76:	b30b      	cbz	r3, 8006fbc <__sfp+0x68>
 8006f78:	6836      	ldr	r6, [r6, #0]
 8006f7a:	e7f7      	b.n	8006f6c <__sfp+0x18>
 8006f7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f80:	b9d5      	cbnz	r5, 8006fb8 <__sfp+0x64>
 8006f82:	4b16      	ldr	r3, [pc, #88]	; (8006fdc <__sfp+0x88>)
 8006f84:	60e3      	str	r3, [r4, #12]
 8006f86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f8a:	6665      	str	r5, [r4, #100]	; 0x64
 8006f8c:	f000 f847 	bl	800701e <__retarget_lock_init_recursive>
 8006f90:	f7ff ff96 	bl	8006ec0 <__sfp_lock_release>
 8006f94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006f98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006f9c:	6025      	str	r5, [r4, #0]
 8006f9e:	61a5      	str	r5, [r4, #24]
 8006fa0:	2208      	movs	r2, #8
 8006fa2:	4629      	mov	r1, r5
 8006fa4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006fa8:	f7ff f816 	bl	8005fd8 <memset>
 8006fac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006fb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fb8:	3468      	adds	r4, #104	; 0x68
 8006fba:	e7d9      	b.n	8006f70 <__sfp+0x1c>
 8006fbc:	2104      	movs	r1, #4
 8006fbe:	4638      	mov	r0, r7
 8006fc0:	f7ff ff62 	bl	8006e88 <__sfmoreglue>
 8006fc4:	4604      	mov	r4, r0
 8006fc6:	6030      	str	r0, [r6, #0]
 8006fc8:	2800      	cmp	r0, #0
 8006fca:	d1d5      	bne.n	8006f78 <__sfp+0x24>
 8006fcc:	f7ff ff78 	bl	8006ec0 <__sfp_lock_release>
 8006fd0:	230c      	movs	r3, #12
 8006fd2:	603b      	str	r3, [r7, #0]
 8006fd4:	e7ee      	b.n	8006fb4 <__sfp+0x60>
 8006fd6:	bf00      	nop
 8006fd8:	080074a0 	.word	0x080074a0
 8006fdc:	ffff0001 	.word	0xffff0001

08006fe0 <_fwalk_reent>:
 8006fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fe4:	4606      	mov	r6, r0
 8006fe6:	4688      	mov	r8, r1
 8006fe8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006fec:	2700      	movs	r7, #0
 8006fee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ff2:	f1b9 0901 	subs.w	r9, r9, #1
 8006ff6:	d505      	bpl.n	8007004 <_fwalk_reent+0x24>
 8006ff8:	6824      	ldr	r4, [r4, #0]
 8006ffa:	2c00      	cmp	r4, #0
 8006ffc:	d1f7      	bne.n	8006fee <_fwalk_reent+0xe>
 8006ffe:	4638      	mov	r0, r7
 8007000:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007004:	89ab      	ldrh	r3, [r5, #12]
 8007006:	2b01      	cmp	r3, #1
 8007008:	d907      	bls.n	800701a <_fwalk_reent+0x3a>
 800700a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800700e:	3301      	adds	r3, #1
 8007010:	d003      	beq.n	800701a <_fwalk_reent+0x3a>
 8007012:	4629      	mov	r1, r5
 8007014:	4630      	mov	r0, r6
 8007016:	47c0      	blx	r8
 8007018:	4307      	orrs	r7, r0
 800701a:	3568      	adds	r5, #104	; 0x68
 800701c:	e7e9      	b.n	8006ff2 <_fwalk_reent+0x12>

0800701e <__retarget_lock_init_recursive>:
 800701e:	4770      	bx	lr

08007020 <__retarget_lock_acquire_recursive>:
 8007020:	4770      	bx	lr

08007022 <__retarget_lock_release_recursive>:
 8007022:	4770      	bx	lr

08007024 <__swhatbuf_r>:
 8007024:	b570      	push	{r4, r5, r6, lr}
 8007026:	460e      	mov	r6, r1
 8007028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800702c:	2900      	cmp	r1, #0
 800702e:	b096      	sub	sp, #88	; 0x58
 8007030:	4614      	mov	r4, r2
 8007032:	461d      	mov	r5, r3
 8007034:	da07      	bge.n	8007046 <__swhatbuf_r+0x22>
 8007036:	2300      	movs	r3, #0
 8007038:	602b      	str	r3, [r5, #0]
 800703a:	89b3      	ldrh	r3, [r6, #12]
 800703c:	061a      	lsls	r2, r3, #24
 800703e:	d410      	bmi.n	8007062 <__swhatbuf_r+0x3e>
 8007040:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007044:	e00e      	b.n	8007064 <__swhatbuf_r+0x40>
 8007046:	466a      	mov	r2, sp
 8007048:	f000 f946 	bl	80072d8 <_fstat_r>
 800704c:	2800      	cmp	r0, #0
 800704e:	dbf2      	blt.n	8007036 <__swhatbuf_r+0x12>
 8007050:	9a01      	ldr	r2, [sp, #4]
 8007052:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007056:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800705a:	425a      	negs	r2, r3
 800705c:	415a      	adcs	r2, r3
 800705e:	602a      	str	r2, [r5, #0]
 8007060:	e7ee      	b.n	8007040 <__swhatbuf_r+0x1c>
 8007062:	2340      	movs	r3, #64	; 0x40
 8007064:	2000      	movs	r0, #0
 8007066:	6023      	str	r3, [r4, #0]
 8007068:	b016      	add	sp, #88	; 0x58
 800706a:	bd70      	pop	{r4, r5, r6, pc}

0800706c <__smakebuf_r>:
 800706c:	898b      	ldrh	r3, [r1, #12]
 800706e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007070:	079d      	lsls	r5, r3, #30
 8007072:	4606      	mov	r6, r0
 8007074:	460c      	mov	r4, r1
 8007076:	d507      	bpl.n	8007088 <__smakebuf_r+0x1c>
 8007078:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800707c:	6023      	str	r3, [r4, #0]
 800707e:	6123      	str	r3, [r4, #16]
 8007080:	2301      	movs	r3, #1
 8007082:	6163      	str	r3, [r4, #20]
 8007084:	b002      	add	sp, #8
 8007086:	bd70      	pop	{r4, r5, r6, pc}
 8007088:	ab01      	add	r3, sp, #4
 800708a:	466a      	mov	r2, sp
 800708c:	f7ff ffca 	bl	8007024 <__swhatbuf_r>
 8007090:	9900      	ldr	r1, [sp, #0]
 8007092:	4605      	mov	r5, r0
 8007094:	4630      	mov	r0, r6
 8007096:	f7ff f88f 	bl	80061b8 <_malloc_r>
 800709a:	b948      	cbnz	r0, 80070b0 <__smakebuf_r+0x44>
 800709c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070a0:	059a      	lsls	r2, r3, #22
 80070a2:	d4ef      	bmi.n	8007084 <__smakebuf_r+0x18>
 80070a4:	f023 0303 	bic.w	r3, r3, #3
 80070a8:	f043 0302 	orr.w	r3, r3, #2
 80070ac:	81a3      	strh	r3, [r4, #12]
 80070ae:	e7e3      	b.n	8007078 <__smakebuf_r+0xc>
 80070b0:	4b0d      	ldr	r3, [pc, #52]	; (80070e8 <__smakebuf_r+0x7c>)
 80070b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80070b4:	89a3      	ldrh	r3, [r4, #12]
 80070b6:	6020      	str	r0, [r4, #0]
 80070b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070bc:	81a3      	strh	r3, [r4, #12]
 80070be:	9b00      	ldr	r3, [sp, #0]
 80070c0:	6163      	str	r3, [r4, #20]
 80070c2:	9b01      	ldr	r3, [sp, #4]
 80070c4:	6120      	str	r0, [r4, #16]
 80070c6:	b15b      	cbz	r3, 80070e0 <__smakebuf_r+0x74>
 80070c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070cc:	4630      	mov	r0, r6
 80070ce:	f000 f915 	bl	80072fc <_isatty_r>
 80070d2:	b128      	cbz	r0, 80070e0 <__smakebuf_r+0x74>
 80070d4:	89a3      	ldrh	r3, [r4, #12]
 80070d6:	f023 0303 	bic.w	r3, r3, #3
 80070da:	f043 0301 	orr.w	r3, r3, #1
 80070de:	81a3      	strh	r3, [r4, #12]
 80070e0:	89a0      	ldrh	r0, [r4, #12]
 80070e2:	4305      	orrs	r5, r0
 80070e4:	81a5      	strh	r5, [r4, #12]
 80070e6:	e7cd      	b.n	8007084 <__smakebuf_r+0x18>
 80070e8:	08006e7d 	.word	0x08006e7d

080070ec <memmove>:
 80070ec:	4288      	cmp	r0, r1
 80070ee:	b510      	push	{r4, lr}
 80070f0:	eb01 0402 	add.w	r4, r1, r2
 80070f4:	d902      	bls.n	80070fc <memmove+0x10>
 80070f6:	4284      	cmp	r4, r0
 80070f8:	4623      	mov	r3, r4
 80070fa:	d807      	bhi.n	800710c <memmove+0x20>
 80070fc:	1e43      	subs	r3, r0, #1
 80070fe:	42a1      	cmp	r1, r4
 8007100:	d008      	beq.n	8007114 <memmove+0x28>
 8007102:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007106:	f803 2f01 	strb.w	r2, [r3, #1]!
 800710a:	e7f8      	b.n	80070fe <memmove+0x12>
 800710c:	4402      	add	r2, r0
 800710e:	4601      	mov	r1, r0
 8007110:	428a      	cmp	r2, r1
 8007112:	d100      	bne.n	8007116 <memmove+0x2a>
 8007114:	bd10      	pop	{r4, pc}
 8007116:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800711a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800711e:	e7f7      	b.n	8007110 <memmove+0x24>

08007120 <__malloc_lock>:
 8007120:	4801      	ldr	r0, [pc, #4]	; (8007128 <__malloc_lock+0x8>)
 8007122:	f7ff bf7d 	b.w	8007020 <__retarget_lock_acquire_recursive>
 8007126:	bf00      	nop
 8007128:	20012fe8 	.word	0x20012fe8

0800712c <__malloc_unlock>:
 800712c:	4801      	ldr	r0, [pc, #4]	; (8007134 <__malloc_unlock+0x8>)
 800712e:	f7ff bf78 	b.w	8007022 <__retarget_lock_release_recursive>
 8007132:	bf00      	nop
 8007134:	20012fe8 	.word	0x20012fe8

08007138 <_realloc_r>:
 8007138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800713a:	4607      	mov	r7, r0
 800713c:	4614      	mov	r4, r2
 800713e:	460e      	mov	r6, r1
 8007140:	b921      	cbnz	r1, 800714c <_realloc_r+0x14>
 8007142:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007146:	4611      	mov	r1, r2
 8007148:	f7ff b836 	b.w	80061b8 <_malloc_r>
 800714c:	b922      	cbnz	r2, 8007158 <_realloc_r+0x20>
 800714e:	f7fe ffe3 	bl	8006118 <_free_r>
 8007152:	4625      	mov	r5, r4
 8007154:	4628      	mov	r0, r5
 8007156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007158:	f000 f8f2 	bl	8007340 <_malloc_usable_size_r>
 800715c:	42a0      	cmp	r0, r4
 800715e:	d20f      	bcs.n	8007180 <_realloc_r+0x48>
 8007160:	4621      	mov	r1, r4
 8007162:	4638      	mov	r0, r7
 8007164:	f7ff f828 	bl	80061b8 <_malloc_r>
 8007168:	4605      	mov	r5, r0
 800716a:	2800      	cmp	r0, #0
 800716c:	d0f2      	beq.n	8007154 <_realloc_r+0x1c>
 800716e:	4631      	mov	r1, r6
 8007170:	4622      	mov	r2, r4
 8007172:	f7fe ff23 	bl	8005fbc <memcpy>
 8007176:	4631      	mov	r1, r6
 8007178:	4638      	mov	r0, r7
 800717a:	f7fe ffcd 	bl	8006118 <_free_r>
 800717e:	e7e9      	b.n	8007154 <_realloc_r+0x1c>
 8007180:	4635      	mov	r5, r6
 8007182:	e7e7      	b.n	8007154 <_realloc_r+0x1c>

08007184 <_raise_r>:
 8007184:	291f      	cmp	r1, #31
 8007186:	b538      	push	{r3, r4, r5, lr}
 8007188:	4604      	mov	r4, r0
 800718a:	460d      	mov	r5, r1
 800718c:	d904      	bls.n	8007198 <_raise_r+0x14>
 800718e:	2316      	movs	r3, #22
 8007190:	6003      	str	r3, [r0, #0]
 8007192:	f04f 30ff 	mov.w	r0, #4294967295
 8007196:	bd38      	pop	{r3, r4, r5, pc}
 8007198:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800719a:	b112      	cbz	r2, 80071a2 <_raise_r+0x1e>
 800719c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80071a0:	b94b      	cbnz	r3, 80071b6 <_raise_r+0x32>
 80071a2:	4620      	mov	r0, r4
 80071a4:	f000 f830 	bl	8007208 <_getpid_r>
 80071a8:	462a      	mov	r2, r5
 80071aa:	4601      	mov	r1, r0
 80071ac:	4620      	mov	r0, r4
 80071ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071b2:	f000 b817 	b.w	80071e4 <_kill_r>
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d00a      	beq.n	80071d0 <_raise_r+0x4c>
 80071ba:	1c59      	adds	r1, r3, #1
 80071bc:	d103      	bne.n	80071c6 <_raise_r+0x42>
 80071be:	2316      	movs	r3, #22
 80071c0:	6003      	str	r3, [r0, #0]
 80071c2:	2001      	movs	r0, #1
 80071c4:	e7e7      	b.n	8007196 <_raise_r+0x12>
 80071c6:	2400      	movs	r4, #0
 80071c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80071cc:	4628      	mov	r0, r5
 80071ce:	4798      	blx	r3
 80071d0:	2000      	movs	r0, #0
 80071d2:	e7e0      	b.n	8007196 <_raise_r+0x12>

080071d4 <raise>:
 80071d4:	4b02      	ldr	r3, [pc, #8]	; (80071e0 <raise+0xc>)
 80071d6:	4601      	mov	r1, r0
 80071d8:	6818      	ldr	r0, [r3, #0]
 80071da:	f7ff bfd3 	b.w	8007184 <_raise_r>
 80071de:	bf00      	nop
 80071e0:	20000014 	.word	0x20000014

080071e4 <_kill_r>:
 80071e4:	b538      	push	{r3, r4, r5, lr}
 80071e6:	4d07      	ldr	r5, [pc, #28]	; (8007204 <_kill_r+0x20>)
 80071e8:	2300      	movs	r3, #0
 80071ea:	4604      	mov	r4, r0
 80071ec:	4608      	mov	r0, r1
 80071ee:	4611      	mov	r1, r2
 80071f0:	602b      	str	r3, [r5, #0]
 80071f2:	f7f9 fddf 	bl	8000db4 <_kill>
 80071f6:	1c43      	adds	r3, r0, #1
 80071f8:	d102      	bne.n	8007200 <_kill_r+0x1c>
 80071fa:	682b      	ldr	r3, [r5, #0]
 80071fc:	b103      	cbz	r3, 8007200 <_kill_r+0x1c>
 80071fe:	6023      	str	r3, [r4, #0]
 8007200:	bd38      	pop	{r3, r4, r5, pc}
 8007202:	bf00      	nop
 8007204:	20012ff0 	.word	0x20012ff0

08007208 <_getpid_r>:
 8007208:	f7f9 bdcc 	b.w	8000da4 <_getpid>

0800720c <__sread>:
 800720c:	b510      	push	{r4, lr}
 800720e:	460c      	mov	r4, r1
 8007210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007214:	f000 f89c 	bl	8007350 <_read_r>
 8007218:	2800      	cmp	r0, #0
 800721a:	bfab      	itete	ge
 800721c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800721e:	89a3      	ldrhlt	r3, [r4, #12]
 8007220:	181b      	addge	r3, r3, r0
 8007222:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007226:	bfac      	ite	ge
 8007228:	6563      	strge	r3, [r4, #84]	; 0x54
 800722a:	81a3      	strhlt	r3, [r4, #12]
 800722c:	bd10      	pop	{r4, pc}

0800722e <__swrite>:
 800722e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007232:	461f      	mov	r7, r3
 8007234:	898b      	ldrh	r3, [r1, #12]
 8007236:	05db      	lsls	r3, r3, #23
 8007238:	4605      	mov	r5, r0
 800723a:	460c      	mov	r4, r1
 800723c:	4616      	mov	r6, r2
 800723e:	d505      	bpl.n	800724c <__swrite+0x1e>
 8007240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007244:	2302      	movs	r3, #2
 8007246:	2200      	movs	r2, #0
 8007248:	f000 f868 	bl	800731c <_lseek_r>
 800724c:	89a3      	ldrh	r3, [r4, #12]
 800724e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007252:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007256:	81a3      	strh	r3, [r4, #12]
 8007258:	4632      	mov	r2, r6
 800725a:	463b      	mov	r3, r7
 800725c:	4628      	mov	r0, r5
 800725e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007262:	f000 b817 	b.w	8007294 <_write_r>

08007266 <__sseek>:
 8007266:	b510      	push	{r4, lr}
 8007268:	460c      	mov	r4, r1
 800726a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800726e:	f000 f855 	bl	800731c <_lseek_r>
 8007272:	1c43      	adds	r3, r0, #1
 8007274:	89a3      	ldrh	r3, [r4, #12]
 8007276:	bf15      	itete	ne
 8007278:	6560      	strne	r0, [r4, #84]	; 0x54
 800727a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800727e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007282:	81a3      	strheq	r3, [r4, #12]
 8007284:	bf18      	it	ne
 8007286:	81a3      	strhne	r3, [r4, #12]
 8007288:	bd10      	pop	{r4, pc}

0800728a <__sclose>:
 800728a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800728e:	f000 b813 	b.w	80072b8 <_close_r>
	...

08007294 <_write_r>:
 8007294:	b538      	push	{r3, r4, r5, lr}
 8007296:	4d07      	ldr	r5, [pc, #28]	; (80072b4 <_write_r+0x20>)
 8007298:	4604      	mov	r4, r0
 800729a:	4608      	mov	r0, r1
 800729c:	4611      	mov	r1, r2
 800729e:	2200      	movs	r2, #0
 80072a0:	602a      	str	r2, [r5, #0]
 80072a2:	461a      	mov	r2, r3
 80072a4:	f7f9 fdbd 	bl	8000e22 <_write>
 80072a8:	1c43      	adds	r3, r0, #1
 80072aa:	d102      	bne.n	80072b2 <_write_r+0x1e>
 80072ac:	682b      	ldr	r3, [r5, #0]
 80072ae:	b103      	cbz	r3, 80072b2 <_write_r+0x1e>
 80072b0:	6023      	str	r3, [r4, #0]
 80072b2:	bd38      	pop	{r3, r4, r5, pc}
 80072b4:	20012ff0 	.word	0x20012ff0

080072b8 <_close_r>:
 80072b8:	b538      	push	{r3, r4, r5, lr}
 80072ba:	4d06      	ldr	r5, [pc, #24]	; (80072d4 <_close_r+0x1c>)
 80072bc:	2300      	movs	r3, #0
 80072be:	4604      	mov	r4, r0
 80072c0:	4608      	mov	r0, r1
 80072c2:	602b      	str	r3, [r5, #0]
 80072c4:	f7f9 fdc9 	bl	8000e5a <_close>
 80072c8:	1c43      	adds	r3, r0, #1
 80072ca:	d102      	bne.n	80072d2 <_close_r+0x1a>
 80072cc:	682b      	ldr	r3, [r5, #0]
 80072ce:	b103      	cbz	r3, 80072d2 <_close_r+0x1a>
 80072d0:	6023      	str	r3, [r4, #0]
 80072d2:	bd38      	pop	{r3, r4, r5, pc}
 80072d4:	20012ff0 	.word	0x20012ff0

080072d8 <_fstat_r>:
 80072d8:	b538      	push	{r3, r4, r5, lr}
 80072da:	4d07      	ldr	r5, [pc, #28]	; (80072f8 <_fstat_r+0x20>)
 80072dc:	2300      	movs	r3, #0
 80072de:	4604      	mov	r4, r0
 80072e0:	4608      	mov	r0, r1
 80072e2:	4611      	mov	r1, r2
 80072e4:	602b      	str	r3, [r5, #0]
 80072e6:	f7f9 fdc4 	bl	8000e72 <_fstat>
 80072ea:	1c43      	adds	r3, r0, #1
 80072ec:	d102      	bne.n	80072f4 <_fstat_r+0x1c>
 80072ee:	682b      	ldr	r3, [r5, #0]
 80072f0:	b103      	cbz	r3, 80072f4 <_fstat_r+0x1c>
 80072f2:	6023      	str	r3, [r4, #0]
 80072f4:	bd38      	pop	{r3, r4, r5, pc}
 80072f6:	bf00      	nop
 80072f8:	20012ff0 	.word	0x20012ff0

080072fc <_isatty_r>:
 80072fc:	b538      	push	{r3, r4, r5, lr}
 80072fe:	4d06      	ldr	r5, [pc, #24]	; (8007318 <_isatty_r+0x1c>)
 8007300:	2300      	movs	r3, #0
 8007302:	4604      	mov	r4, r0
 8007304:	4608      	mov	r0, r1
 8007306:	602b      	str	r3, [r5, #0]
 8007308:	f7f9 fdc3 	bl	8000e92 <_isatty>
 800730c:	1c43      	adds	r3, r0, #1
 800730e:	d102      	bne.n	8007316 <_isatty_r+0x1a>
 8007310:	682b      	ldr	r3, [r5, #0]
 8007312:	b103      	cbz	r3, 8007316 <_isatty_r+0x1a>
 8007314:	6023      	str	r3, [r4, #0]
 8007316:	bd38      	pop	{r3, r4, r5, pc}
 8007318:	20012ff0 	.word	0x20012ff0

0800731c <_lseek_r>:
 800731c:	b538      	push	{r3, r4, r5, lr}
 800731e:	4d07      	ldr	r5, [pc, #28]	; (800733c <_lseek_r+0x20>)
 8007320:	4604      	mov	r4, r0
 8007322:	4608      	mov	r0, r1
 8007324:	4611      	mov	r1, r2
 8007326:	2200      	movs	r2, #0
 8007328:	602a      	str	r2, [r5, #0]
 800732a:	461a      	mov	r2, r3
 800732c:	f7f9 fdbc 	bl	8000ea8 <_lseek>
 8007330:	1c43      	adds	r3, r0, #1
 8007332:	d102      	bne.n	800733a <_lseek_r+0x1e>
 8007334:	682b      	ldr	r3, [r5, #0]
 8007336:	b103      	cbz	r3, 800733a <_lseek_r+0x1e>
 8007338:	6023      	str	r3, [r4, #0]
 800733a:	bd38      	pop	{r3, r4, r5, pc}
 800733c:	20012ff0 	.word	0x20012ff0

08007340 <_malloc_usable_size_r>:
 8007340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007344:	1f18      	subs	r0, r3, #4
 8007346:	2b00      	cmp	r3, #0
 8007348:	bfbc      	itt	lt
 800734a:	580b      	ldrlt	r3, [r1, r0]
 800734c:	18c0      	addlt	r0, r0, r3
 800734e:	4770      	bx	lr

08007350 <_read_r>:
 8007350:	b538      	push	{r3, r4, r5, lr}
 8007352:	4d07      	ldr	r5, [pc, #28]	; (8007370 <_read_r+0x20>)
 8007354:	4604      	mov	r4, r0
 8007356:	4608      	mov	r0, r1
 8007358:	4611      	mov	r1, r2
 800735a:	2200      	movs	r2, #0
 800735c:	602a      	str	r2, [r5, #0]
 800735e:	461a      	mov	r2, r3
 8007360:	f7f9 fd42 	bl	8000de8 <_read>
 8007364:	1c43      	adds	r3, r0, #1
 8007366:	d102      	bne.n	800736e <_read_r+0x1e>
 8007368:	682b      	ldr	r3, [r5, #0]
 800736a:	b103      	cbz	r3, 800736e <_read_r+0x1e>
 800736c:	6023      	str	r3, [r4, #0]
 800736e:	bd38      	pop	{r3, r4, r5, pc}
 8007370:	20012ff0 	.word	0x20012ff0

08007374 <_init>:
 8007374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007376:	bf00      	nop
 8007378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800737a:	bc08      	pop	{r3}
 800737c:	469e      	mov	lr, r3
 800737e:	4770      	bx	lr

08007380 <_fini>:
 8007380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007382:	bf00      	nop
 8007384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007386:	bc08      	pop	{r3}
 8007388:	469e      	mov	lr, r3
 800738a:	4770      	bx	lr
