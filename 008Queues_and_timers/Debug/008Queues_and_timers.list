
008Queues_and_timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08006c04  08006c04  00016c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e3c  08006e3c  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08006e3c  08006e3c  00016e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e44  08006e44  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e44  08006e44  00016e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e48  08006e48  00016e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08006e4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
 10 .bss          00012eb0  20000020  20000020  00020020  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012ed0  20012ed0  00020020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001be53  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000375c  00000000  00000000  0003bea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001348  00000000  00000000  0003f600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001200  00000000  00000000  00040948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023ab4  00000000  00000000  00041b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000175a2  00000000  00000000  000655fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d907d  00000000  00000000  0007cb9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00155c1b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005024  00000000  00000000  00155c70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000020 	.word	0x20000020
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006bec 	.word	0x08006bec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000024 	.word	0x20000024
 80001cc:	08006bec 	.word	0x08006bec

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295
 8000204:	f04f 30ff 	movne.w	r0, #4294967295
 8000208:	f000 b96e 	b.w	80004e8 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9d08      	ldr	r5, [sp, #32]
 800022a:	4604      	mov	r4, r0
 800022c:	468c      	mov	ip, r1
 800022e:	2b00      	cmp	r3, #0
 8000230:	f040 8083 	bne.w	800033a <__udivmoddi4+0x116>
 8000234:	428a      	cmp	r2, r1
 8000236:	4617      	mov	r7, r2
 8000238:	d947      	bls.n	80002ca <__udivmoddi4+0xa6>
 800023a:	fab2 f282 	clz	r2, r2
 800023e:	b142      	cbz	r2, 8000252 <__udivmoddi4+0x2e>
 8000240:	f1c2 0020 	rsb	r0, r2, #32
 8000244:	fa24 f000 	lsr.w	r0, r4, r0
 8000248:	4091      	lsls	r1, r2
 800024a:	4097      	lsls	r7, r2
 800024c:	ea40 0c01 	orr.w	ip, r0, r1
 8000250:	4094      	lsls	r4, r2
 8000252:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000256:	0c23      	lsrs	r3, r4, #16
 8000258:	fbbc f6f8 	udiv	r6, ip, r8
 800025c:	fa1f fe87 	uxth.w	lr, r7
 8000260:	fb08 c116 	mls	r1, r8, r6, ip
 8000264:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000268:	fb06 f10e 	mul.w	r1, r6, lr
 800026c:	4299      	cmp	r1, r3
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x60>
 8000270:	18fb      	adds	r3, r7, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 8119 	bcs.w	80004ac <__udivmoddi4+0x288>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 8116 	bls.w	80004ac <__udivmoddi4+0x288>
 8000280:	3e02      	subs	r6, #2
 8000282:	443b      	add	r3, r7
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 fe0e 	mul.w	lr, r0, lr
 8000298:	45a6      	cmp	lr, r4
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x8c>
 800029c:	193c      	adds	r4, r7, r4
 800029e:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a2:	f080 8105 	bcs.w	80004b0 <__udivmoddi4+0x28c>
 80002a6:	45a6      	cmp	lr, r4
 80002a8:	f240 8102 	bls.w	80004b0 <__udivmoddi4+0x28c>
 80002ac:	3802      	subs	r0, #2
 80002ae:	443c      	add	r4, r7
 80002b0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b4:	eba4 040e 	sub.w	r4, r4, lr
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa0>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	b902      	cbnz	r2, 80002ce <__udivmoddi4+0xaa>
 80002cc:	deff      	udf	#255	; 0xff
 80002ce:	fab2 f282 	clz	r2, r2
 80002d2:	2a00      	cmp	r2, #0
 80002d4:	d150      	bne.n	8000378 <__udivmoddi4+0x154>
 80002d6:	1bcb      	subs	r3, r1, r7
 80002d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002dc:	fa1f f887 	uxth.w	r8, r7
 80002e0:	2601      	movs	r6, #1
 80002e2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002e6:	0c21      	lsrs	r1, r4, #16
 80002e8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002f0:	fb08 f30c 	mul.w	r3, r8, ip
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0xe4>
 80002f8:	1879      	adds	r1, r7, r1
 80002fa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0xe2>
 8000300:	428b      	cmp	r3, r1
 8000302:	f200 80e9 	bhi.w	80004d8 <__udivmoddi4+0x2b4>
 8000306:	4684      	mov	ip, r0
 8000308:	1ac9      	subs	r1, r1, r3
 800030a:	b2a3      	uxth	r3, r4
 800030c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000310:	fb0e 1110 	mls	r1, lr, r0, r1
 8000314:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000318:	fb08 f800 	mul.w	r8, r8, r0
 800031c:	45a0      	cmp	r8, r4
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0x10c>
 8000320:	193c      	adds	r4, r7, r4
 8000322:	f100 33ff 	add.w	r3, r0, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x10a>
 8000328:	45a0      	cmp	r8, r4
 800032a:	f200 80d9 	bhi.w	80004e0 <__udivmoddi4+0x2bc>
 800032e:	4618      	mov	r0, r3
 8000330:	eba4 0408 	sub.w	r4, r4, r8
 8000334:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000338:	e7bf      	b.n	80002ba <__udivmoddi4+0x96>
 800033a:	428b      	cmp	r3, r1
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x12e>
 800033e:	2d00      	cmp	r5, #0
 8000340:	f000 80b1 	beq.w	80004a6 <__udivmoddi4+0x282>
 8000344:	2600      	movs	r6, #0
 8000346:	e9c5 0100 	strd	r0, r1, [r5]
 800034a:	4630      	mov	r0, r6
 800034c:	4631      	mov	r1, r6
 800034e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000352:	fab3 f683 	clz	r6, r3
 8000356:	2e00      	cmp	r6, #0
 8000358:	d14a      	bne.n	80003f0 <__udivmoddi4+0x1cc>
 800035a:	428b      	cmp	r3, r1
 800035c:	d302      	bcc.n	8000364 <__udivmoddi4+0x140>
 800035e:	4282      	cmp	r2, r0
 8000360:	f200 80b8 	bhi.w	80004d4 <__udivmoddi4+0x2b0>
 8000364:	1a84      	subs	r4, r0, r2
 8000366:	eb61 0103 	sbc.w	r1, r1, r3
 800036a:	2001      	movs	r0, #1
 800036c:	468c      	mov	ip, r1
 800036e:	2d00      	cmp	r5, #0
 8000370:	d0a8      	beq.n	80002c4 <__udivmoddi4+0xa0>
 8000372:	e9c5 4c00 	strd	r4, ip, [r5]
 8000376:	e7a5      	b.n	80002c4 <__udivmoddi4+0xa0>
 8000378:	f1c2 0320 	rsb	r3, r2, #32
 800037c:	fa20 f603 	lsr.w	r6, r0, r3
 8000380:	4097      	lsls	r7, r2
 8000382:	fa01 f002 	lsl.w	r0, r1, r2
 8000386:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800038a:	40d9      	lsrs	r1, r3
 800038c:	4330      	orrs	r0, r6
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	fbb1 f6fe 	udiv	r6, r1, lr
 8000394:	fa1f f887 	uxth.w	r8, r7
 8000398:	fb0e 1116 	mls	r1, lr, r6, r1
 800039c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a0:	fb06 f108 	mul.w	r1, r6, r8
 80003a4:	4299      	cmp	r1, r3
 80003a6:	fa04 f402 	lsl.w	r4, r4, r2
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x19c>
 80003ac:	18fb      	adds	r3, r7, r3
 80003ae:	f106 3cff 	add.w	ip, r6, #4294967295
 80003b2:	f080 808d 	bcs.w	80004d0 <__udivmoddi4+0x2ac>
 80003b6:	4299      	cmp	r1, r3
 80003b8:	f240 808a 	bls.w	80004d0 <__udivmoddi4+0x2ac>
 80003bc:	3e02      	subs	r6, #2
 80003be:	443b      	add	r3, r7
 80003c0:	1a5b      	subs	r3, r3, r1
 80003c2:	b281      	uxth	r1, r0
 80003c4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d0:	fb00 f308 	mul.w	r3, r0, r8
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d907      	bls.n	80003e8 <__udivmoddi4+0x1c4>
 80003d8:	1879      	adds	r1, r7, r1
 80003da:	f100 3cff 	add.w	ip, r0, #4294967295
 80003de:	d273      	bcs.n	80004c8 <__udivmoddi4+0x2a4>
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d971      	bls.n	80004c8 <__udivmoddi4+0x2a4>
 80003e4:	3802      	subs	r0, #2
 80003e6:	4439      	add	r1, r7
 80003e8:	1acb      	subs	r3, r1, r3
 80003ea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ee:	e778      	b.n	80002e2 <__udivmoddi4+0xbe>
 80003f0:	f1c6 0c20 	rsb	ip, r6, #32
 80003f4:	fa03 f406 	lsl.w	r4, r3, r6
 80003f8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003fc:	431c      	orrs	r4, r3
 80003fe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000402:	fa01 f306 	lsl.w	r3, r1, r6
 8000406:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800040a:	fa21 f10c 	lsr.w	r1, r1, ip
 800040e:	431f      	orrs	r7, r3
 8000410:	0c3b      	lsrs	r3, r7, #16
 8000412:	fbb1 f9fe 	udiv	r9, r1, lr
 8000416:	fa1f f884 	uxth.w	r8, r4
 800041a:	fb0e 1119 	mls	r1, lr, r9, r1
 800041e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000422:	fb09 fa08 	mul.w	sl, r9, r8
 8000426:	458a      	cmp	sl, r1
 8000428:	fa02 f206 	lsl.w	r2, r2, r6
 800042c:	fa00 f306 	lsl.w	r3, r0, r6
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x220>
 8000432:	1861      	adds	r1, r4, r1
 8000434:	f109 30ff 	add.w	r0, r9, #4294967295
 8000438:	d248      	bcs.n	80004cc <__udivmoddi4+0x2a8>
 800043a:	458a      	cmp	sl, r1
 800043c:	d946      	bls.n	80004cc <__udivmoddi4+0x2a8>
 800043e:	f1a9 0902 	sub.w	r9, r9, #2
 8000442:	4421      	add	r1, r4
 8000444:	eba1 010a 	sub.w	r1, r1, sl
 8000448:	b2bf      	uxth	r7, r7
 800044a:	fbb1 f0fe 	udiv	r0, r1, lr
 800044e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000452:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000456:	fb00 f808 	mul.w	r8, r0, r8
 800045a:	45b8      	cmp	r8, r7
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x24a>
 800045e:	19e7      	adds	r7, r4, r7
 8000460:	f100 31ff 	add.w	r1, r0, #4294967295
 8000464:	d22e      	bcs.n	80004c4 <__udivmoddi4+0x2a0>
 8000466:	45b8      	cmp	r8, r7
 8000468:	d92c      	bls.n	80004c4 <__udivmoddi4+0x2a0>
 800046a:	3802      	subs	r0, #2
 800046c:	4427      	add	r7, r4
 800046e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000472:	eba7 0708 	sub.w	r7, r7, r8
 8000476:	fba0 8902 	umull	r8, r9, r0, r2
 800047a:	454f      	cmp	r7, r9
 800047c:	46c6      	mov	lr, r8
 800047e:	4649      	mov	r1, r9
 8000480:	d31a      	bcc.n	80004b8 <__udivmoddi4+0x294>
 8000482:	d017      	beq.n	80004b4 <__udivmoddi4+0x290>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x27a>
 8000486:	ebb3 020e 	subs.w	r2, r3, lr
 800048a:	eb67 0701 	sbc.w	r7, r7, r1
 800048e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000492:	40f2      	lsrs	r2, r6
 8000494:	ea4c 0202 	orr.w	r2, ip, r2
 8000498:	40f7      	lsrs	r7, r6
 800049a:	e9c5 2700 	strd	r2, r7, [r5]
 800049e:	2600      	movs	r6, #0
 80004a0:	4631      	mov	r1, r6
 80004a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a6:	462e      	mov	r6, r5
 80004a8:	4628      	mov	r0, r5
 80004aa:	e70b      	b.n	80002c4 <__udivmoddi4+0xa0>
 80004ac:	4606      	mov	r6, r0
 80004ae:	e6e9      	b.n	8000284 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fd      	b.n	80002b0 <__udivmoddi4+0x8c>
 80004b4:	4543      	cmp	r3, r8
 80004b6:	d2e5      	bcs.n	8000484 <__udivmoddi4+0x260>
 80004b8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004bc:	eb69 0104 	sbc.w	r1, r9, r4
 80004c0:	3801      	subs	r0, #1
 80004c2:	e7df      	b.n	8000484 <__udivmoddi4+0x260>
 80004c4:	4608      	mov	r0, r1
 80004c6:	e7d2      	b.n	800046e <__udivmoddi4+0x24a>
 80004c8:	4660      	mov	r0, ip
 80004ca:	e78d      	b.n	80003e8 <__udivmoddi4+0x1c4>
 80004cc:	4681      	mov	r9, r0
 80004ce:	e7b9      	b.n	8000444 <__udivmoddi4+0x220>
 80004d0:	4666      	mov	r6, ip
 80004d2:	e775      	b.n	80003c0 <__udivmoddi4+0x19c>
 80004d4:	4630      	mov	r0, r6
 80004d6:	e74a      	b.n	800036e <__udivmoddi4+0x14a>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	4439      	add	r1, r7
 80004de:	e713      	b.n	8000308 <__udivmoddi4+0xe4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	443c      	add	r4, r7
 80004e4:	e724      	b.n	8000330 <__udivmoddi4+0x10c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <led_effect_stop>:


#include"main.h"

void led_effect_stop(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af02      	add	r7, sp, #8
	for (int i=0; i<4; i++)
 80004f2:	2300      	movs	r3, #0
 80004f4:	607b      	str	r3, [r7, #4]
 80004f6:	e00e      	b.n	8000516 <led_effect_stop+0x2a>
		xTimerStop(handle_led_timer[i],portMAX_DELAY);
 80004f8:	4a0b      	ldr	r2, [pc, #44]	; (8000528 <led_effect_stop+0x3c>)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000500:	f04f 33ff 	mov.w	r3, #4294967295
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	2300      	movs	r3, #0
 8000508:	2200      	movs	r2, #0
 800050a:	2103      	movs	r1, #3
 800050c:	f005 fbe6 	bl	8005cdc <xTimerGenericCommand>
	for (int i=0; i<4; i++)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	3301      	adds	r3, #1
 8000514:	607b      	str	r3, [r7, #4]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2b03      	cmp	r3, #3
 800051a:	dded      	ble.n	80004f8 <led_effect_stop+0xc>

}
 800051c:	bf00      	nop
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20012db0 	.word	0x20012db0

0800052c <led_effect>:
void led_effect(int n)
{
 800052c:	b590      	push	{r4, r7, lr}
 800052e:	b085      	sub	sp, #20
 8000530:	af02      	add	r7, sp, #8
 8000532:	6078      	str	r0, [r7, #4]
	led_effect_stop();
 8000534:	f7ff ffda 	bl	80004ec <led_effect_stop>
	xTimerStart(handle_led_timer[n-1], portMAX_DELAY);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	3b01      	subs	r3, #1
 800053c:	4a08      	ldr	r2, [pc, #32]	; (8000560 <led_effect+0x34>)
 800053e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000542:	f004 fccd 	bl	8004ee0 <xTaskGetTickCount>
 8000546:	4602      	mov	r2, r0
 8000548:	f04f 33ff 	mov.w	r3, #4294967295
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	2300      	movs	r3, #0
 8000550:	2101      	movs	r1, #1
 8000552:	4620      	mov	r0, r4
 8000554:	f005 fbc2 	bl	8005cdc <xTimerGenericCommand>
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	bd90      	pop	{r4, r7, pc}
 8000560:	20012db0 	.word	0x20012db0

08000564 <LED_effect1>:

void LED_effect1(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	static int flag=1;
	(flag ^=1) ? turn_off_all_leds() : turn_on_all_leds();
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <LED_effect1+0x28>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f083 0301 	eor.w	r3, r3, #1
 8000570:	4a06      	ldr	r2, [pc, #24]	; (800058c <LED_effect1+0x28>)
 8000572:	6013      	str	r3, [r2, #0]
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <LED_effect1+0x28>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d002      	beq.n	8000582 <LED_effect1+0x1e>
 800057c:	f000 f86c 	bl	8000658 <turn_off_all_leds>

}
 8000580:	e001      	b.n	8000586 <LED_effect1+0x22>
	(flag ^=1) ? turn_off_all_leds() : turn_on_all_leds();
 8000582:	f000 f84b 	bl	800061c <turn_on_all_leds>
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	20000000 	.word	0x20000000

08000590 <LED_effect2>:

void LED_effect2(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	static int flag=1;
	(flag ^=1) ? turn_on_even_leds() : turn_on_odd_leds();
 8000594:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <LED_effect2+0x28>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f083 0301 	eor.w	r3, r3, #1
 800059c:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <LED_effect2+0x28>)
 800059e:	6013      	str	r3, [r2, #0]
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <LED_effect2+0x28>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d002      	beq.n	80005ae <LED_effect2+0x1e>
 80005a8:	f000 f892 	bl	80006d0 <turn_on_even_leds>

}
 80005ac:	e001      	b.n	80005b2 <LED_effect2+0x22>
	(flag ^=1) ? turn_on_even_leds() : turn_on_odd_leds();
 80005ae:	f000 f871 	bl	8000694 <turn_on_odd_leds>
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000004 	.word	0x20000004

080005bc <LED_effect3>:


void LED_effect3(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control( 0x1 << (i++ % 4) );
 80005c0:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <LED_effect3+0x2c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	1c5a      	adds	r2, r3, #1
 80005c6:	4908      	ldr	r1, [pc, #32]	; (80005e8 <LED_effect3+0x2c>)
 80005c8:	600a      	str	r2, [r1, #0]
 80005ca:	425a      	negs	r2, r3
 80005cc:	f003 0303 	and.w	r3, r3, #3
 80005d0:	f002 0203 	and.w	r2, r2, #3
 80005d4:	bf58      	it	pl
 80005d6:	4253      	negpl	r3, r2
 80005d8:	2201      	movs	r2, #1
 80005da:	fa02 f303 	lsl.w	r3, r2, r3
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f894 	bl	800070c <LED_control>
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	2000003c 	.word	0x2000003c

080005ec <LED_effect4>:

void LED_effect4(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control( 0x08 >> (i++ % 4) );
 80005f0:	4b09      	ldr	r3, [pc, #36]	; (8000618 <LED_effect4+0x2c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	1c5a      	adds	r2, r3, #1
 80005f6:	4908      	ldr	r1, [pc, #32]	; (8000618 <LED_effect4+0x2c>)
 80005f8:	600a      	str	r2, [r1, #0]
 80005fa:	425a      	negs	r2, r3
 80005fc:	f003 0303 	and.w	r3, r3, #3
 8000600:	f002 0203 	and.w	r2, r2, #3
 8000604:	bf58      	it	pl
 8000606:	4253      	negpl	r3, r2
 8000608:	2208      	movs	r2, #8
 800060a:	fa42 f303 	asr.w	r3, r2, r3
 800060e:	4618      	mov	r0, r3
 8000610:	f000 f87c 	bl	800070c <LED_control>
}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000040 	.word	0x20000040

0800061c <turn_on_all_leds>:

void turn_on_all_leds(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, LED1, GPIO_PIN_SET);
 8000620:	2201      	movs	r2, #1
 8000622:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000626:	480b      	ldr	r0, [pc, #44]	; (8000654 <turn_on_all_leds+0x38>)
 8000628:	f001 fab4 	bl	8001b94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED2, GPIO_PIN_SET);
 800062c:	2201      	movs	r2, #1
 800062e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000632:	4808      	ldr	r0, [pc, #32]	; (8000654 <turn_on_all_leds+0x38>)
 8000634:	f001 faae 	bl	8001b94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED3, GPIO_PIN_SET);
 8000638:	2201      	movs	r2, #1
 800063a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <turn_on_all_leds+0x38>)
 8000640:	f001 faa8 	bl	8001b94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_SET);
 8000644:	2201      	movs	r2, #1
 8000646:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800064a:	4802      	ldr	r0, [pc, #8]	; (8000654 <turn_on_all_leds+0x38>)
 800064c:	f001 faa2 	bl	8001b94 <HAL_GPIO_WritePin>
}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40020c00 	.word	0x40020c00

08000658 <turn_off_all_leds>:

void turn_off_all_leds(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, LED1, GPIO_PIN_RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000662:	480b      	ldr	r0, [pc, #44]	; (8000690 <turn_off_all_leds+0x38>)
 8000664:	f001 fa96 	bl	8001b94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED2, GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800066e:	4808      	ldr	r0, [pc, #32]	; (8000690 <turn_off_all_leds+0x38>)
 8000670:	f001 fa90 	bl	8001b94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED3, GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <turn_off_all_leds+0x38>)
 800067c:	f001 fa8a 	bl	8001b94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000686:	4802      	ldr	r0, [pc, #8]	; (8000690 <turn_off_all_leds+0x38>)
 8000688:	f001 fa84 	bl	8001b94 <HAL_GPIO_WritePin>
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40020c00 	.word	0x40020c00

08000694 <turn_on_odd_leds>:


void turn_on_odd_leds(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, LED1, GPIO_PIN_SET);
 8000698:	2201      	movs	r2, #1
 800069a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800069e:	480b      	ldr	r0, [pc, #44]	; (80006cc <turn_on_odd_leds+0x38>)
 80006a0:	f001 fa78 	bl	8001b94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED2, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006aa:	4808      	ldr	r0, [pc, #32]	; (80006cc <turn_on_odd_leds+0x38>)
 80006ac:	f001 fa72 	bl	8001b94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED3, GPIO_PIN_SET);
 80006b0:	2201      	movs	r2, #1
 80006b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <turn_on_odd_leds+0x38>)
 80006b8:	f001 fa6c 	bl	8001b94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006c2:	4802      	ldr	r0, [pc, #8]	; (80006cc <turn_on_odd_leds+0x38>)
 80006c4:	f001 fa66 	bl	8001b94 <HAL_GPIO_WritePin>
}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40020c00 	.word	0x40020c00

080006d0 <turn_on_even_leds>:

void turn_on_even_leds(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, LED1, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006da:	480b      	ldr	r0, [pc, #44]	; (8000708 <turn_on_even_leds+0x38>)
 80006dc:	f001 fa5a 	bl	8001b94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED2, GPIO_PIN_SET);
 80006e0:	2201      	movs	r2, #1
 80006e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e6:	4808      	ldr	r0, [pc, #32]	; (8000708 <turn_on_even_leds+0x38>)
 80006e8:	f001 fa54 	bl	8001b94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED3, GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <turn_on_even_leds+0x38>)
 80006f4:	f001 fa4e 	bl	8001b94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006fe:	4802      	ldr	r0, [pc, #8]	; (8000708 <turn_on_even_leds+0x38>)
 8000700:	f001 fa48 	bl	8001b94 <HAL_GPIO_WritePin>
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40020c00 	.word	0x40020c00

0800070c <LED_control>:

void LED_control( int value )
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  for(int i = 0 ; i < 4 ; i++)
 8000714:	2300      	movs	r3, #0
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	e014      	b.n	8000744 <LED_control+0x38>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, (LED1 << i), ((value >> i)& 0x1));
 800071a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	fa02 f303 	lsl.w	r3, r2, r3
 8000724:	b299      	uxth	r1, r3
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	fa42 f303 	asr.w	r3, r2, r3
 800072e:	b2db      	uxtb	r3, r3
 8000730:	f003 0301 	and.w	r3, r3, #1
 8000734:	b2db      	uxtb	r3, r3
 8000736:	461a      	mov	r2, r3
 8000738:	4806      	ldr	r0, [pc, #24]	; (8000754 <LED_control+0x48>)
 800073a:	f001 fa2b 	bl	8001b94 <HAL_GPIO_WritePin>
  for(int i = 0 ; i < 4 ; i++)
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	3301      	adds	r3, #1
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	2b03      	cmp	r3, #3
 8000748:	dde7      	ble.n	800071a <LED_control+0xe>
}
 800074a:	bf00      	nop
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40020c00 	.word	0x40020c00

08000758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000758:	b590      	push	{r4, r7, lr}
 800075a:	b08b      	sub	sp, #44	; 0x2c
 800075c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075e:	f000 fec7 	bl	80014f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000762:	f000 f8e1 	bl	8000928 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000766:	f000 f99b 	bl	8000aa0 <MX_GPIO_Init>
  MX_RTC_Init();
 800076a:	f000 f949 	bl	8000a00 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800076e:	f000 f96d 	bl	8000a4c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	status=xTaskCreate(menu_task, "menu_task", 250, NULL, 2, &handle_menu_task);
 8000772:	4b5a      	ldr	r3, [pc, #360]	; (80008dc <main+0x184>)
 8000774:	9301      	str	r3, [sp, #4]
 8000776:	2302      	movs	r3, #2
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	2300      	movs	r3, #0
 800077c:	22fa      	movs	r2, #250	; 0xfa
 800077e:	4958      	ldr	r1, [pc, #352]	; (80008e0 <main+0x188>)
 8000780:	4858      	ldr	r0, [pc, #352]	; (80008e4 <main+0x18c>)
 8000782:	f004 f96b 	bl	8004a5c <xTaskCreate>
 8000786:	61b8      	str	r0, [r7, #24]

	configASSERT(status == pdPASS);
 8000788:	69bb      	ldr	r3, [r7, #24]
 800078a:	2b01      	cmp	r3, #1
 800078c:	d00a      	beq.n	80007a4 <main+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800078e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000792:	f383 8811 	msr	BASEPRI, r3
 8000796:	f3bf 8f6f 	isb	sy
 800079a:	f3bf 8f4f 	dsb	sy
 800079e:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80007a0:	bf00      	nop
 80007a2:	e7fe      	b.n	80007a2 <main+0x4a>


	status=xTaskCreate(cmd_handler_task, "cmd_task", 250, NULL, 2, &handle_cmd_task);
 80007a4:	4b50      	ldr	r3, [pc, #320]	; (80008e8 <main+0x190>)
 80007a6:	9301      	str	r3, [sp, #4]
 80007a8:	2302      	movs	r3, #2
 80007aa:	9300      	str	r3, [sp, #0]
 80007ac:	2300      	movs	r3, #0
 80007ae:	22fa      	movs	r2, #250	; 0xfa
 80007b0:	494e      	ldr	r1, [pc, #312]	; (80008ec <main+0x194>)
 80007b2:	484f      	ldr	r0, [pc, #316]	; (80008f0 <main+0x198>)
 80007b4:	f004 f952 	bl	8004a5c <xTaskCreate>
 80007b8:	61b8      	str	r0, [r7, #24]

	configASSERT(status == pdPASS);
 80007ba:	69bb      	ldr	r3, [r7, #24]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d00a      	beq.n	80007d6 <main+0x7e>
        __asm volatile
 80007c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007c4:	f383 8811 	msr	BASEPRI, r3
 80007c8:	f3bf 8f6f 	isb	sy
 80007cc:	f3bf 8f4f 	dsb	sy
 80007d0:	613b      	str	r3, [r7, #16]
    }
 80007d2:	bf00      	nop
 80007d4:	e7fe      	b.n	80007d4 <main+0x7c>

	status=xTaskCreate(print_task, "print_task", 250, NULL, 2, &handle_print_task);
 80007d6:	4b47      	ldr	r3, [pc, #284]	; (80008f4 <main+0x19c>)
 80007d8:	9301      	str	r3, [sp, #4]
 80007da:	2302      	movs	r3, #2
 80007dc:	9300      	str	r3, [sp, #0]
 80007de:	2300      	movs	r3, #0
 80007e0:	22fa      	movs	r2, #250	; 0xfa
 80007e2:	4945      	ldr	r1, [pc, #276]	; (80008f8 <main+0x1a0>)
 80007e4:	4845      	ldr	r0, [pc, #276]	; (80008fc <main+0x1a4>)
 80007e6:	f004 f939 	bl	8004a5c <xTaskCreate>
 80007ea:	61b8      	str	r0, [r7, #24]

	configASSERT(status == pdPASS);
 80007ec:	69bb      	ldr	r3, [r7, #24]
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d00a      	beq.n	8000808 <main+0xb0>
        __asm volatile
 80007f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007f6:	f383 8811 	msr	BASEPRI, r3
 80007fa:	f3bf 8f6f 	isb	sy
 80007fe:	f3bf 8f4f 	dsb	sy
 8000802:	60fb      	str	r3, [r7, #12]
    }
 8000804:	bf00      	nop
 8000806:	e7fe      	b.n	8000806 <main+0xae>

	status=xTaskCreate(led_task, "led_task", 250, NULL, 2, &handle_led_task);
 8000808:	4b3d      	ldr	r3, [pc, #244]	; (8000900 <main+0x1a8>)
 800080a:	9301      	str	r3, [sp, #4]
 800080c:	2302      	movs	r3, #2
 800080e:	9300      	str	r3, [sp, #0]
 8000810:	2300      	movs	r3, #0
 8000812:	22fa      	movs	r2, #250	; 0xfa
 8000814:	493b      	ldr	r1, [pc, #236]	; (8000904 <main+0x1ac>)
 8000816:	483c      	ldr	r0, [pc, #240]	; (8000908 <main+0x1b0>)
 8000818:	f004 f920 	bl	8004a5c <xTaskCreate>
 800081c:	61b8      	str	r0, [r7, #24]

	configASSERT(status == pdPASS);
 800081e:	69bb      	ldr	r3, [r7, #24]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d00a      	beq.n	800083a <main+0xe2>
        __asm volatile
 8000824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000828:	f383 8811 	msr	BASEPRI, r3
 800082c:	f3bf 8f6f 	isb	sy
 8000830:	f3bf 8f4f 	dsb	sy
 8000834:	60bb      	str	r3, [r7, #8]
    }
 8000836:	bf00      	nop
 8000838:	e7fe      	b.n	8000838 <main+0xe0>

	//status=xTaskCreate(rtc_task, "rtc_task", 250, NULL, 2, &handle_rtc_task);

	//configASSERT(status == pdPASS);

	q_data= xQueueCreate(10,sizeof(char));
 800083a:	2200      	movs	r2, #0
 800083c:	2101      	movs	r1, #1
 800083e:	200a      	movs	r0, #10
 8000840:	f003 fbc0 	bl	8003fc4 <xQueueGenericCreate>
 8000844:	4603      	mov	r3, r0
 8000846:	4a31      	ldr	r2, [pc, #196]	; (800090c <main+0x1b4>)
 8000848:	6013      	str	r3, [r2, #0]

	configASSERT(q_data !=NULL);
 800084a:	4b30      	ldr	r3, [pc, #192]	; (800090c <main+0x1b4>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d10a      	bne.n	8000868 <main+0x110>
        __asm volatile
 8000852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000856:	f383 8811 	msr	BASEPRI, r3
 800085a:	f3bf 8f6f 	isb	sy
 800085e:	f3bf 8f4f 	dsb	sy
 8000862:	607b      	str	r3, [r7, #4]
    }
 8000864:	bf00      	nop
 8000866:	e7fe      	b.n	8000866 <main+0x10e>

	q_print= xQueueCreate(10,sizeof(size_t));
 8000868:	2200      	movs	r2, #0
 800086a:	2104      	movs	r1, #4
 800086c:	200a      	movs	r0, #10
 800086e:	f003 fba9 	bl	8003fc4 <xQueueGenericCreate>
 8000872:	4603      	mov	r3, r0
 8000874:	4a26      	ldr	r2, [pc, #152]	; (8000910 <main+0x1b8>)
 8000876:	6013      	str	r3, [r2, #0]

	configASSERT(q_print !=NULL);
 8000878:	4b25      	ldr	r3, [pc, #148]	; (8000910 <main+0x1b8>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d10a      	bne.n	8000896 <main+0x13e>
        __asm volatile
 8000880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000884:	f383 8811 	msr	BASEPRI, r3
 8000888:	f3bf 8f6f 	isb	sy
 800088c:	f3bf 8f4f 	dsb	sy
 8000890:	603b      	str	r3, [r7, #0]
    }
 8000892:	bf00      	nop
 8000894:	e7fe      	b.n	8000894 <main+0x13c>

	for (uint8_t i=0; i<4; i++)
 8000896:	2300      	movs	r3, #0
 8000898:	77fb      	strb	r3, [r7, #31]
 800089a:	e013      	b.n	80008c4 <main+0x16c>
		handle_led_timer[i]=xTimerCreate("led_timer", pdMS_TO_TICKS(500), pdTRUE, (void*)(i+1), led_effect_callback);
 800089c:	7ffb      	ldrb	r3, [r7, #31]
 800089e:	3301      	adds	r3, #1
 80008a0:	461a      	mov	r2, r3
 80008a2:	7ffc      	ldrb	r4, [r7, #31]
 80008a4:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <main+0x1bc>)
 80008a6:	9300      	str	r3, [sp, #0]
 80008a8:	4613      	mov	r3, r2
 80008aa:	2201      	movs	r2, #1
 80008ac:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008b0:	4819      	ldr	r0, [pc, #100]	; (8000918 <main+0x1c0>)
 80008b2:	f005 f9b7 	bl	8005c24 <xTimerCreate>
 80008b6:	4603      	mov	r3, r0
 80008b8:	4a18      	ldr	r2, [pc, #96]	; (800091c <main+0x1c4>)
 80008ba:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for (uint8_t i=0; i<4; i++)
 80008be:	7ffb      	ldrb	r3, [r7, #31]
 80008c0:	3301      	adds	r3, #1
 80008c2:	77fb      	strb	r3, [r7, #31]
 80008c4:	7ffb      	ldrb	r3, [r7, #31]
 80008c6:	2b03      	cmp	r3, #3
 80008c8:	d9e8      	bls.n	800089c <main+0x144>

	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 80008ca:	2201      	movs	r2, #1
 80008cc:	4914      	ldr	r1, [pc, #80]	; (8000920 <main+0x1c8>)
 80008ce:	4815      	ldr	r0, [pc, #84]	; (8000924 <main+0x1cc>)
 80008d0:	f002 fb73 	bl	8002fba <HAL_UART_Receive_IT>

	vTaskStartScheduler();
 80008d4:	f004 fa08 	bl	8004ce8 <vTaskStartScheduler>

	/* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <main+0x180>
 80008da:	bf00      	nop
 80008dc:	20012dcc 	.word	0x20012dcc
 80008e0:	08006c04 	.word	0x08006c04
 80008e4:	080010e1 	.word	0x080010e1
 80008e8:	20012dc4 	.word	0x20012dc4
 80008ec:	08006c10 	.word	0x08006c10
 80008f0:	080011c9 	.word	0x080011c9
 80008f4:	20012df4 	.word	0x20012df4
 80008f8:	08006c1c 	.word	0x08006c1c
 80008fc:	08001331 	.word	0x08001331
 8000900:	20012df8 	.word	0x20012df8
 8000904:	08006c28 	.word	0x08006c28
 8000908:	08001371 	.word	0x08001371
 800090c:	20012dc8 	.word	0x20012dc8
 8000910:	20012dd0 	.word	0x20012dd0
 8000914:	08000d5d 	.word	0x08000d5d
 8000918:	08006c34 	.word	0x08006c34
 800091c:	20012db0 	.word	0x20012db0
 8000920:	20012dfc 	.word	0x20012dfc
 8000924:	20012e00 	.word	0x20012e00

08000928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b094      	sub	sp, #80	; 0x50
 800092c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092e:	f107 0320 	add.w	r3, r7, #32
 8000932:	2230      	movs	r2, #48	; 0x30
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f006 f950 	bl	8006bdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800094c:	2300      	movs	r3, #0
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	4b29      	ldr	r3, [pc, #164]	; (80009f8 <SystemClock_Config+0xd0>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	4a28      	ldr	r2, [pc, #160]	; (80009f8 <SystemClock_Config+0xd0>)
 8000956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095a:	6413      	str	r3, [r2, #64]	; 0x40
 800095c:	4b26      	ldr	r3, [pc, #152]	; (80009f8 <SystemClock_Config+0xd0>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000968:	2300      	movs	r3, #0
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	4b23      	ldr	r3, [pc, #140]	; (80009fc <SystemClock_Config+0xd4>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a22      	ldr	r2, [pc, #136]	; (80009fc <SystemClock_Config+0xd4>)
 8000972:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000976:	6013      	str	r3, [r2, #0]
 8000978:	4b20      	ldr	r3, [pc, #128]	; (80009fc <SystemClock_Config+0xd4>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000984:	230a      	movs	r3, #10
 8000986:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000988:	2301      	movs	r3, #1
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800098c:	2310      	movs	r3, #16
 800098e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000990:	2301      	movs	r3, #1
 8000992:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000994:	2302      	movs	r3, #2
 8000996:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000998:	2300      	movs	r3, #0
 800099a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800099c:	2308      	movs	r3, #8
 800099e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009a0:	23a8      	movs	r3, #168	; 0xa8
 80009a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009a4:	2302      	movs	r3, #2
 80009a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009a8:	2307      	movs	r3, #7
 80009aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ac:	f107 0320 	add.w	r3, r7, #32
 80009b0:	4618      	mov	r0, r3
 80009b2:	f001 f909 	bl	8001bc8 <HAL_RCC_OscConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009bc:	f000 fa52 	bl	8000e64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c0:	230f      	movs	r3, #15
 80009c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c4:	2302      	movs	r3, #2
 80009c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	2105      	movs	r1, #5
 80009de:	4618      	mov	r0, r3
 80009e0:	f001 fb6a 	bl	80020b8 <HAL_RCC_ClockConfig>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80009ea:	f000 fa3b 	bl	8000e64 <Error_Handler>
  }
}
 80009ee:	bf00      	nop
 80009f0:	3750      	adds	r7, #80	; 0x50
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40007000 	.word	0x40007000

08000a00 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_RTC_Init+0x44>)
 8000a06:	4a10      	ldr	r2, [pc, #64]	; (8000a48 <MX_RTC_Init+0x48>)
 8000a08:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_RTC_Init+0x44>)
 8000a0c:	2240      	movs	r2, #64	; 0x40
 8000a0e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_RTC_Init+0x44>)
 8000a12:	227f      	movs	r2, #127	; 0x7f
 8000a14:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_RTC_Init+0x44>)
 8000a18:	22ff      	movs	r2, #255	; 0xff
 8000a1a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_RTC_Init+0x44>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <MX_RTC_Init+0x44>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_RTC_Init+0x44>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_RTC_Init+0x44>)
 8000a30:	f001 fe52 	bl	80026d8 <HAL_RTC_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000a3a:	f000 fa13 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20012dd4 	.word	0x20012dd4
 8000a48:	40002800 	.word	0x40002800

08000a4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a50:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a52:	4a12      	ldr	r2, [pc, #72]	; (8000a9c <MX_USART2_UART_Init+0x50>)
 8000a54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a72:	220c      	movs	r2, #12
 8000a74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a84:	f002 f9ba 	bl	8002dfc <HAL_UART_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a8e:	f000 f9e9 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20012e00 	.word	0x20012e00
 8000a9c:	40004400 	.word	0x40004400

08000aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08c      	sub	sp, #48	; 0x30
 8000aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61bb      	str	r3, [r7, #24]
 8000aba:	4ba2      	ldr	r3, [pc, #648]	; (8000d44 <MX_GPIO_Init+0x2a4>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4aa1      	ldr	r2, [pc, #644]	; (8000d44 <MX_GPIO_Init+0x2a4>)
 8000ac0:	f043 0310 	orr.w	r3, r3, #16
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b9f      	ldr	r3, [pc, #636]	; (8000d44 <MX_GPIO_Init+0x2a4>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0310 	and.w	r3, r3, #16
 8000ace:	61bb      	str	r3, [r7, #24]
 8000ad0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
 8000ad6:	4b9b      	ldr	r3, [pc, #620]	; (8000d44 <MX_GPIO_Init+0x2a4>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a9a      	ldr	r2, [pc, #616]	; (8000d44 <MX_GPIO_Init+0x2a4>)
 8000adc:	f043 0304 	orr.w	r3, r3, #4
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b98      	ldr	r3, [pc, #608]	; (8000d44 <MX_GPIO_Init+0x2a4>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0304 	and.w	r3, r3, #4
 8000aea:	617b      	str	r3, [r7, #20]
 8000aec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	4b94      	ldr	r3, [pc, #592]	; (8000d44 <MX_GPIO_Init+0x2a4>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a93      	ldr	r2, [pc, #588]	; (8000d44 <MX_GPIO_Init+0x2a4>)
 8000af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b91      	ldr	r3, [pc, #580]	; (8000d44 <MX_GPIO_Init+0x2a4>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	4b8d      	ldr	r3, [pc, #564]	; (8000d44 <MX_GPIO_Init+0x2a4>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a8c      	ldr	r2, [pc, #560]	; (8000d44 <MX_GPIO_Init+0x2a4>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b8a      	ldr	r3, [pc, #552]	; (8000d44 <MX_GPIO_Init+0x2a4>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	4b86      	ldr	r3, [pc, #536]	; (8000d44 <MX_GPIO_Init+0x2a4>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a85      	ldr	r2, [pc, #532]	; (8000d44 <MX_GPIO_Init+0x2a4>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b83      	ldr	r3, [pc, #524]	; (8000d44 <MX_GPIO_Init+0x2a4>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	4b7f      	ldr	r3, [pc, #508]	; (8000d44 <MX_GPIO_Init+0x2a4>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a7e      	ldr	r2, [pc, #504]	; (8000d44 <MX_GPIO_Init+0x2a4>)
 8000b4c:	f043 0308 	orr.w	r3, r3, #8
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b7c      	ldr	r3, [pc, #496]	; (8000d44 <MX_GPIO_Init+0x2a4>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0308 	and.w	r3, r3, #8
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2108      	movs	r1, #8
 8000b62:	4879      	ldr	r0, [pc, #484]	; (8000d48 <MX_GPIO_Init+0x2a8>)
 8000b64:	f001 f816 	bl	8001b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	4877      	ldr	r0, [pc, #476]	; (8000d4c <MX_GPIO_Init+0x2ac>)
 8000b6e:	f001 f811 	bl	8001b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b72:	2200      	movs	r2, #0
 8000b74:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000b78:	4875      	ldr	r0, [pc, #468]	; (8000d50 <MX_GPIO_Init+0x2b0>)
 8000b7a:	f001 f80b 	bl	8001b94 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000b7e:	2308      	movs	r3, #8
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	4619      	mov	r1, r3
 8000b94:	486c      	ldr	r0, [pc, #432]	; (8000d48 <MX_GPIO_Init+0x2a8>)
 8000b96:	f000 fe61 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4866      	ldr	r0, [pc, #408]	; (8000d4c <MX_GPIO_Init+0x2ac>)
 8000bb2:	f000 fe53 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000bb6:	2308      	movs	r3, #8
 8000bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bc6:	2305      	movs	r3, #5
 8000bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	4619      	mov	r1, r3
 8000bd0:	485e      	ldr	r0, [pc, #376]	; (8000d4c <MX_GPIO_Init+0x2ac>)
 8000bd2:	f000 fe43 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bda:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000be4:	f107 031c 	add.w	r3, r7, #28
 8000be8:	4619      	mov	r1, r3
 8000bea:	485a      	ldr	r0, [pc, #360]	; (8000d54 <MX_GPIO_Init+0x2b4>)
 8000bec:	f000 fe36 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bf0:	2310      	movs	r3, #16
 8000bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c00:	2306      	movs	r3, #6
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4852      	ldr	r0, [pc, #328]	; (8000d54 <MX_GPIO_Init+0x2b4>)
 8000c0c:	f000 fe26 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c10:	23e0      	movs	r3, #224	; 0xe0
 8000c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c20:	2305      	movs	r3, #5
 8000c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	4619      	mov	r1, r3
 8000c2a:	484a      	ldr	r0, [pc, #296]	; (8000d54 <MX_GPIO_Init+0x2b4>)
 8000c2c:	f000 fe16 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c30:	2304      	movs	r3, #4
 8000c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	f107 031c 	add.w	r3, r7, #28
 8000c40:	4619      	mov	r1, r3
 8000c42:	4845      	ldr	r0, [pc, #276]	; (8000d58 <MX_GPIO_Init+0x2b8>)
 8000c44:	f000 fe0a 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000c48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c5a:	2305      	movs	r3, #5
 8000c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000c5e:	f107 031c 	add.w	r3, r7, #28
 8000c62:	4619      	mov	r1, r3
 8000c64:	483c      	ldr	r0, [pc, #240]	; (8000d58 <MX_GPIO_Init+0x2b8>)
 8000c66:	f000 fdf9 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c6a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000c6e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c70:	2301      	movs	r3, #1
 8000c72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c7c:	f107 031c 	add.w	r3, r7, #28
 8000c80:	4619      	mov	r1, r3
 8000c82:	4833      	ldr	r0, [pc, #204]	; (8000d50 <MX_GPIO_Init+0x2b0>)
 8000c84:	f000 fdea 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c88:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c9a:	2306      	movs	r3, #6
 8000c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4829      	ldr	r0, [pc, #164]	; (8000d4c <MX_GPIO_Init+0x2ac>)
 8000ca6:	f000 fdd9 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000caa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000cb8:	f107 031c 	add.w	r3, r7, #28
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4825      	ldr	r0, [pc, #148]	; (8000d54 <MX_GPIO_Init+0x2b4>)
 8000cc0:	f000 fdcc 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000cc4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cd6:	230a      	movs	r3, #10
 8000cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cda:	f107 031c 	add.w	r3, r7, #28
 8000cde:	4619      	mov	r1, r3
 8000ce0:	481c      	ldr	r0, [pc, #112]	; (8000d54 <MX_GPIO_Init+0x2b4>)
 8000ce2:	f000 fdbb 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ce6:	2320      	movs	r3, #32
 8000ce8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cea:	2300      	movs	r3, #0
 8000cec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cf2:	f107 031c 	add.w	r3, r7, #28
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4815      	ldr	r0, [pc, #84]	; (8000d50 <MX_GPIO_Init+0x2b0>)
 8000cfa:	f000 fdaf 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000cfe:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d04:	2312      	movs	r3, #18
 8000d06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d10:	2304      	movs	r3, #4
 8000d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d14:	f107 031c 	add.w	r3, r7, #28
 8000d18:	4619      	mov	r1, r3
 8000d1a:	480f      	ldr	r0, [pc, #60]	; (8000d58 <MX_GPIO_Init+0x2b8>)
 8000d1c:	f000 fd9e 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000d20:	2302      	movs	r3, #2
 8000d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d24:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000d2e:	f107 031c 	add.w	r3, r7, #28
 8000d32:	4619      	mov	r1, r3
 8000d34:	4804      	ldr	r0, [pc, #16]	; (8000d48 <MX_GPIO_Init+0x2a8>)
 8000d36:	f000 fd91 	bl	800185c <HAL_GPIO_Init>

}
 8000d3a:	bf00      	nop
 8000d3c:	3730      	adds	r7, #48	; 0x30
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40020800 	.word	0x40020800
 8000d50:	40020c00 	.word	0x40020c00
 8000d54:	40020000 	.word	0x40020000
 8000d58:	40020400 	.word	0x40020400

08000d5c <led_effect_callback>:

/* USER CODE BEGIN 4 */

void led_effect_callback( TimerHandle_t xTimer)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	int id;
	id= (uint32_t)pvTimerGetTimerID(xTimer);
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f005 fa99 	bl	800629c <pvTimerGetTimerID>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	3b01      	subs	r3, #1
 8000d72:	2b03      	cmp	r3, #3
 8000d74:	d816      	bhi.n	8000da4 <led_effect_callback+0x48>
 8000d76:	a201      	add	r2, pc, #4	; (adr r2, 8000d7c <led_effect_callback+0x20>)
 8000d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d7c:	08000d8d 	.word	0x08000d8d
 8000d80:	08000d93 	.word	0x08000d93
 8000d84:	08000d99 	.word	0x08000d99
 8000d88:	08000d9f 	.word	0x08000d9f

	switch(id)
	{
	case 1:
      LED_effect1();
 8000d8c:	f7ff fbea 	bl	8000564 <LED_effect1>
      break;
 8000d90:	e008      	b.n	8000da4 <led_effect_callback+0x48>
	case 2:
	  LED_effect2();
 8000d92:	f7ff fbfd 	bl	8000590 <LED_effect2>
	  break;
 8000d96:	e005      	b.n	8000da4 <led_effect_callback+0x48>
	case 3:
	  LED_effect3();
 8000d98:	f7ff fc10 	bl	80005bc <LED_effect3>
      break;
 8000d9c:	e002      	b.n	8000da4 <led_effect_callback+0x48>
	case 4:
	  LED_effect4();
 8000d9e:	f7ff fc25 	bl	80005ec <LED_effect4>


	}
}
 8000da2:	e7ff      	b.n	8000da4 <led_effect_callback+0x48>
 8000da4:	bf00      	nop
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af02      	add	r7, sp, #8
 8000db2:	6078      	str	r0, [r7, #4]

	uint8_t dummy;

	if(!xQueueIsQueueFullFromISR(q_data))
 8000db4:	4b1e      	ldr	r3, [pc, #120]	; (8000e30 <HAL_UART_RxCpltCallback+0x84>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f003 fdca 	bl	8004952 <xQueueIsQueueFullFromISR>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d107      	bne.n	8000dd4 <HAL_UART_RxCpltCallback+0x28>
	{
		/*Queue is not full */

		/*TODO: Enqueue data byte */
		xQueueSendFromISR(q_data,(void*)&user_data,NULL);
 8000dc4:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <HAL_UART_RxCpltCallback+0x84>)
 8000dc6:	6818      	ldr	r0, [r3, #0]
 8000dc8:	2300      	movs	r3, #0
 8000dca:	2200      	movs	r2, #0
 8000dcc:	4919      	ldr	r1, [pc, #100]	; (8000e34 <HAL_UART_RxCpltCallback+0x88>)
 8000dce:	f003 fa79 	bl	80042c4 <xQueueGenericSendFromISR>
 8000dd2:	e013      	b.n	8000dfc <HAL_UART_RxCpltCallback+0x50>

	}else{
		/*Queue is full */

		if(user_data== '\n')
 8000dd4:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <HAL_UART_RxCpltCallback+0x88>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b0a      	cmp	r3, #10
 8000ddc:	d10e      	bne.n	8000dfc <HAL_UART_RxCpltCallback+0x50>
		{
			/*user_data = '\n' */

			/*TODO: make sure that last data byte of the queue is '\n' */
			xQueueReceiveFromISR(q_data, (void*)&dummy, NULL);
 8000dde:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <HAL_UART_RxCpltCallback+0x84>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f107 010f 	add.w	r1, r7, #15
 8000de6:	2200      	movs	r2, #0
 8000de8:	4618      	mov	r0, r3
 8000dea:	f003 fbf5 	bl	80045d8 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data,(void*)&user_data,NULL);
 8000dee:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <HAL_UART_RxCpltCallback+0x84>)
 8000df0:	6818      	ldr	r0, [r3, #0]
 8000df2:	2300      	movs	r3, #0
 8000df4:	2200      	movs	r2, #0
 8000df6:	490f      	ldr	r1, [pc, #60]	; (8000e34 <HAL_UART_RxCpltCallback+0x88>)
 8000df8:	f003 fa64 	bl	80042c4 <xQueueGenericSendFromISR>
		}
	}


	/*TODO: send notification to command handling task if user_data = '\n' */
	if(user_data== '\n')
 8000dfc:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <HAL_UART_RxCpltCallback+0x88>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b0a      	cmp	r3, #10
 8000e04:	d10a      	bne.n	8000e1c <HAL_UART_RxCpltCallback+0x70>
	{

		xTaskNotifyFromISR(handle_cmd_task,0,eNoAction,NULL);
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <HAL_UART_RxCpltCallback+0x8c>)
 8000e08:	6818      	ldr	r0, [r3, #0]
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	9301      	str	r3, [sp, #4]
 8000e0e:	2300      	movs	r3, #0
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	2300      	movs	r3, #0
 8000e14:	2200      	movs	r2, #0
 8000e16:	2100      	movs	r1, #0
 8000e18:	f004 fd6a 	bl	80058f0 <xTaskGenericNotifyFromISR>
	}


	/* TODO: Enable UART data byte reception again in IT mode */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	4905      	ldr	r1, [pc, #20]	; (8000e34 <HAL_UART_RxCpltCallback+0x88>)
 8000e20:	4806      	ldr	r0, [pc, #24]	; (8000e3c <HAL_UART_RxCpltCallback+0x90>)
 8000e22:	f002 f8ca 	bl	8002fba <HAL_UART_Receive_IT>
}
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20012dc8 	.word	0x20012dc8
 8000e34:	20012dfc 	.word	0x20012dfc
 8000e38:	20012dc4 	.word	0x20012dc4
 8000e3c:	20012e00 	.word	0x20012e00

08000e40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d101      	bne.n	8000e56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e52:	f000 fb6f 	bl	8001534 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40001000 	.word	0x40001000

08000e64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e68:	b672      	cpsid	i
}
 8000e6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <Error_Handler+0x8>
	...

08000e70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <HAL_MspInit+0x4c>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7e:	4a0f      	ldr	r2, [pc, #60]	; (8000ebc <HAL_MspInit+0x4c>)
 8000e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e84:	6453      	str	r3, [r2, #68]	; 0x44
 8000e86:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <HAL_MspInit+0x4c>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	603b      	str	r3, [r7, #0]
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <HAL_MspInit+0x4c>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	4a08      	ldr	r2, [pc, #32]	; (8000ebc <HAL_MspInit+0x4c>)
 8000e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_MspInit+0x4c>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	40023800 	.word	0x40023800

08000ec0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec8:	f107 0308 	add.w	r3, r7, #8
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a0c      	ldr	r2, [pc, #48]	; (8000f0c <HAL_RTC_MspInit+0x4c>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d111      	bne.n	8000f04 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ee4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ee8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eea:	f107 0308 	add.w	r3, r7, #8
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f001 fb10 	bl	8002514 <HAL_RCCEx_PeriphCLKConfig>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000efa:	f7ff ffb3 	bl	8000e64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000efe:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <HAL_RTC_MspInit+0x50>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f04:	bf00      	nop
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40002800 	.word	0x40002800
 8000f10:	42470e3c 	.word	0x42470e3c

08000f14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	; 0x28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a1d      	ldr	r2, [pc, #116]	; (8000fa8 <HAL_UART_MspInit+0x94>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d133      	bne.n	8000f9e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <HAL_UART_MspInit+0x98>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	4a1b      	ldr	r2, [pc, #108]	; (8000fac <HAL_UART_MspInit+0x98>)
 8000f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f44:	6413      	str	r3, [r2, #64]	; 0x40
 8000f46:	4b19      	ldr	r3, [pc, #100]	; (8000fac <HAL_UART_MspInit+0x98>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <HAL_UART_MspInit+0x98>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a14      	ldr	r2, [pc, #80]	; (8000fac <HAL_UART_MspInit+0x98>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b12      	ldr	r3, [pc, #72]	; (8000fac <HAL_UART_MspInit+0x98>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f6e:	230c      	movs	r3, #12
 8000f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	2302      	movs	r3, #2
 8000f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f7e:	2307      	movs	r3, #7
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	4619      	mov	r1, r3
 8000f88:	4809      	ldr	r0, [pc, #36]	; (8000fb0 <HAL_UART_MspInit+0x9c>)
 8000f8a:	f000 fc67 	bl	800185c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2106      	movs	r1, #6
 8000f92:	2026      	movs	r0, #38	; 0x26
 8000f94:	f000 fba6 	bl	80016e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f98:	2026      	movs	r0, #38	; 0x26
 8000f9a:	f000 fbbf 	bl	800171c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f9e:	bf00      	nop
 8000fa0:	3728      	adds	r7, #40	; 0x28
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40004400 	.word	0x40004400
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40020000 	.word	0x40020000

08000fb4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08c      	sub	sp, #48	; 0x30
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	2036      	movs	r0, #54	; 0x36
 8000fca:	f000 fb8b 	bl	80016e4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fce:	2036      	movs	r0, #54	; 0x36
 8000fd0:	f000 fba4 	bl	800171c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <HAL_InitTick+0xa4>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fdc:	4a1e      	ldr	r2, [pc, #120]	; (8001058 <HAL_InitTick+0xa4>)
 8000fde:	f043 0310 	orr.w	r3, r3, #16
 8000fe2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <HAL_InitTick+0xa4>)
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	f003 0310 	and.w	r3, r3, #16
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ff0:	f107 0210 	add.w	r2, r7, #16
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f001 fa58 	bl	80024b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001000:	f001 fa2e 	bl	8002460 <HAL_RCC_GetPCLK1Freq>
 8001004:	4603      	mov	r3, r0
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800100a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800100c:	4a13      	ldr	r2, [pc, #76]	; (800105c <HAL_InitTick+0xa8>)
 800100e:	fba2 2303 	umull	r2, r3, r2, r3
 8001012:	0c9b      	lsrs	r3, r3, #18
 8001014:	3b01      	subs	r3, #1
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <HAL_InitTick+0xac>)
 800101a:	4a12      	ldr	r2, [pc, #72]	; (8001064 <HAL_InitTick+0xb0>)
 800101c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <HAL_InitTick+0xac>)
 8001020:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001024:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001026:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <HAL_InitTick+0xac>)
 8001028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800102a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <HAL_InitTick+0xac>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <HAL_InitTick+0xac>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001038:	4809      	ldr	r0, [pc, #36]	; (8001060 <HAL_InitTick+0xac>)
 800103a:	f001 fc32 	bl	80028a2 <HAL_TIM_Base_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d104      	bne.n	800104e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001044:	4806      	ldr	r0, [pc, #24]	; (8001060 <HAL_InitTick+0xac>)
 8001046:	f001 fc85 	bl	8002954 <HAL_TIM_Base_Start_IT>
 800104a:	4603      	mov	r3, r0
 800104c:	e000      	b.n	8001050 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
}
 8001050:	4618      	mov	r0, r3
 8001052:	3730      	adds	r7, #48	; 0x30
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40023800 	.word	0x40023800
 800105c:	431bde83 	.word	0x431bde83
 8001060:	20012e44 	.word	0x20012e44
 8001064:	40001000 	.word	0x40001000

08001068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800106c:	e7fe      	b.n	800106c <NMI_Handler+0x4>

0800106e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <HardFault_Handler+0x4>

08001074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <MemManage_Handler+0x4>

0800107a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800107e:	e7fe      	b.n	800107e <BusFault_Handler+0x4>

08001080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <UsageFault_Handler+0x4>

08001086 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <USART2_IRQHandler+0x10>)
 800109a:	f001 ffbf 	bl	800301c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20012e00 	.word	0x20012e00

080010a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <TIM6_DAC_IRQHandler+0x10>)
 80010ae:	f001 fcc1 	bl	8002a34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20012e44 	.word	0x20012e44

080010bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <SystemInit+0x20>)
 80010c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010c6:	4a05      	ldr	r2, [pc, #20]	; (80010dc <SystemInit+0x20>)
 80010c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <menu_task>:


const char* msg_inv= "////Invalid option/////\n";

void menu_task(void *parameters)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af02      	add	r7, sp, #8
 80010e6:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	int option;
	const char* msg_menu = "===========================\n"
 80010e8:	4b31      	ldr	r3, [pc, #196]	; (80011b0 <menu_task+0xd0>)
 80010ea:	60bb      	str	r3, [r7, #8]
							    "Date and time  ----> 1\n"
								"Exit           ----> 2\n"
								"Enter your choice here : ";
	while(1)
	{
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 80010ec:	4b31      	ldr	r3, [pc, #196]	; (80011b4 <menu_task+0xd4>)
 80010ee:	6818      	ldr	r0, [r3, #0]
 80010f0:	f107 0108 	add.w	r1, r7, #8
 80010f4:	2300      	movs	r3, #0
 80010f6:	f04f 32ff 	mov.w	r2, #4294967295
 80010fa:	f002 ffe5 	bl	80040c8 <xQueueGenericSend>

		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 80010fe:	f107 030c 	add.w	r3, r7, #12
 8001102:	f04f 32ff 	mov.w	r2, #4294967295
 8001106:	9200      	str	r2, [sp, #0]
 8001108:	2200      	movs	r2, #0
 800110a:	2100      	movs	r1, #0
 800110c:	2000      	movs	r0, #0
 800110e:	f004 fa8f 	bl	8005630 <xTaskGenericNotifyWait>
		cmd= (command_t*)cmd_addr;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	617b      	str	r3, [r7, #20]

		if (cmd->Len ==1)
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d133      	bne.n	8001186 <menu_task+0xa6>
		{
			option= cmd->payload[0] - 48;
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	3b30      	subs	r3, #48	; 0x30
 8001124:	613b      	str	r3, [r7, #16]
			switch(option)
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	2b02      	cmp	r3, #2
 800112a:	d035      	beq.n	8001198 <menu_task+0xb8>
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	2b02      	cmp	r3, #2
 8001130:	dc20      	bgt.n	8001174 <menu_task+0x94>
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <menu_task+0x60>
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d00d      	beq.n	800115a <menu_task+0x7a>
 800113e:	e019      	b.n	8001174 <menu_task+0x94>
			{
			case 0:
				current_state=sLedEffect;
 8001140:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <menu_task+0xd8>)
 8001142:	2201      	movs	r2, #1
 8001144:	701a      	strb	r2, [r3, #0]
				xTaskNotify(handle_led_task,0,eNoAction);
 8001146:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <menu_task+0xdc>)
 8001148:	6818      	ldr	r0, [r3, #0]
 800114a:	2300      	movs	r3, #0
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2300      	movs	r3, #0
 8001150:	2200      	movs	r2, #0
 8001152:	2100      	movs	r1, #0
 8001154:	f004 faec 	bl	8005730 <xTaskGenericNotify>
				break;
 8001158:	e01f      	b.n	800119a <menu_task+0xba>
			case 1:
				current_state=sRtcMenu;
 800115a:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <menu_task+0xd8>)
 800115c:	2202      	movs	r2, #2
 800115e:	701a      	strb	r2, [r3, #0]
				xTaskNotify(handle_rtc_task,0,eNoAction);
 8001160:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <menu_task+0xe0>)
 8001162:	6818      	ldr	r0, [r3, #0]
 8001164:	2300      	movs	r3, #0
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	2300      	movs	r3, #0
 800116a:	2200      	movs	r2, #0
 800116c:	2100      	movs	r1, #0
 800116e:	f004 fadf 	bl	8005730 <xTaskGenericNotify>
				break;
 8001172:	e012      	b.n	800119a <menu_task+0xba>
			case 2:		//implement exit
				break;
			default:
				xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001174:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <menu_task+0xd4>)
 8001176:	6818      	ldr	r0, [r3, #0]
 8001178:	2300      	movs	r3, #0
 800117a:	f04f 32ff 	mov.w	r2, #4294967295
 800117e:	4911      	ldr	r1, [pc, #68]	; (80011c4 <menu_task+0xe4>)
 8001180:	f002 ffa2 	bl	80040c8 <xQueueGenericSend>
				continue;
 8001184:	e012      	b.n	80011ac <menu_task+0xcc>
			}
		}
		else
		{
			//invalid entry
			xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <menu_task+0xd4>)
 8001188:	6818      	ldr	r0, [r3, #0]
 800118a:	2300      	movs	r3, #0
 800118c:	f04f 32ff 	mov.w	r2, #4294967295
 8001190:	490c      	ldr	r1, [pc, #48]	; (80011c4 <menu_task+0xe4>)
 8001192:	f002 ff99 	bl	80040c8 <xQueueGenericSend>
			continue;
 8001196:	e009      	b.n	80011ac <menu_task+0xcc>
				break;
 8001198:	bf00      	nop

		}

		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	2300      	movs	r3, #0
 80011a2:	2200      	movs	r2, #0
 80011a4:	2100      	movs	r1, #0
 80011a6:	2000      	movs	r0, #0
 80011a8:	f004 fa42 	bl	8005630 <xTaskGenericNotifyWait>
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 80011ac:	e79e      	b.n	80010ec <menu_task+0xc>
 80011ae:	bf00      	nop
 80011b0:	08006c5c 	.word	0x08006c5c
 80011b4:	20012dd0 	.word	0x20012dd0
 80011b8:	20000044 	.word	0x20000044
 80011bc:	20012df8 	.word	0x20012df8
 80011c0:	20012dc0 	.word	0x20012dc0
 80011c4:	2000000c 	.word	0x2000000c

080011c8 <cmd_handler_task>:
	}

}
void cmd_handler_task(void *parameters)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	; 0x28
 80011cc:	af02      	add	r7, sp, #8
 80011ce:	6078      	str	r0, [r7, #4]

	BaseType_t ret;
	command_t cmd;
	while(1)
	{
		ret=xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80011d0:	f04f 33ff 	mov.w	r3, #4294967295
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2300      	movs	r3, #0
 80011d8:	2200      	movs	r2, #0
 80011da:	2100      	movs	r1, #0
 80011dc:	2000      	movs	r0, #0
 80011de:	f004 fa27 	bl	8005630 <xTaskGenericNotifyWait>
 80011e2:	61f8      	str	r0, [r7, #28]
		if (ret==pdTRUE)
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d1f2      	bne.n	80011d0 <cmd_handler_task+0x8>
		{
		process_command(&cmd);
 80011ea:	f107 030c 	add.w	r3, r7, #12
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 f802 	bl	80011f8 <process_command>
		ret=xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80011f4:	e7ec      	b.n	80011d0 <cmd_handler_task+0x8>
	...

080011f8 <process_command>:

}


void process_command(command_t *cmd)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af02      	add	r7, sp, #8
 80011fe:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f000 f85b 	bl	80012bc <extract_command>

	switch(current_state)
 8001206:	4b29      	ldr	r3, [pc, #164]	; (80012ac <process_command+0xb4>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b05      	cmp	r3, #5
 800120c:	d84a      	bhi.n	80012a4 <process_command+0xac>
 800120e:	a201      	add	r2, pc, #4	; (adr r2, 8001214 <process_command+0x1c>)
 8001210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001214:	0800122d 	.word	0x0800122d
 8001218:	08001241 	.word	0x08001241
 800121c:	08001255 	.word	0x08001255
 8001220:	08001269 	.word	0x08001269
 8001224:	0800127d 	.word	0x0800127d
 8001228:	08001291 	.word	0x08001291
	{
	case sMainmenu:
		xTaskNotify(handle_menu_task,(uint32_t)cmd,eSetValueWithOverwrite);
 800122c:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <process_command+0xb8>)
 800122e:	6818      	ldr	r0, [r3, #0]
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	2300      	movs	r3, #0
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	2303      	movs	r3, #3
 8001238:	2100      	movs	r1, #0
 800123a:	f004 fa79 	bl	8005730 <xTaskGenericNotify>
	    break;
 800123e:	e031      	b.n	80012a4 <process_command+0xac>
	case sLedEffect:
		xTaskNotify(handle_led_task,(uint32_t)cmd,eSetValueWithOverwrite);
 8001240:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <process_command+0xbc>)
 8001242:	6818      	ldr	r0, [r3, #0]
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	2300      	movs	r3, #0
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	2303      	movs	r3, #3
 800124c:	2100      	movs	r1, #0
 800124e:	f004 fa6f 	bl	8005730 <xTaskGenericNotify>
	    break;
 8001252:	e027      	b.n	80012a4 <process_command+0xac>
	case sRtcMenu:
		xTaskNotify(handle_rtc_task,(uint32_t)cmd,eSetValueWithOverwrite);
 8001254:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <process_command+0xc0>)
 8001256:	6818      	ldr	r0, [r3, #0]
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	2300      	movs	r3, #0
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2303      	movs	r3, #3
 8001260:	2100      	movs	r1, #0
 8001262:	f004 fa65 	bl	8005730 <xTaskGenericNotify>
	    break;
 8001266:	e01d      	b.n	80012a4 <process_command+0xac>

	case sRtcTimeConfig:
		xTaskNotify(handle_rtc_task,(uint32_t)cmd,eSetValueWithOverwrite);
 8001268:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <process_command+0xc0>)
 800126a:	6818      	ldr	r0, [r3, #0]
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	2300      	movs	r3, #0
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	2303      	movs	r3, #3
 8001274:	2100      	movs	r1, #0
 8001276:	f004 fa5b 	bl	8005730 <xTaskGenericNotify>
	    break;
 800127a:	e013      	b.n	80012a4 <process_command+0xac>
	case SRtcDataConfig:
		xTaskNotify(handle_rtc_task,(uint32_t)cmd,eSetValueWithOverwrite);
 800127c:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <process_command+0xc0>)
 800127e:	6818      	ldr	r0, [r3, #0]
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	2300      	movs	r3, #0
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	2303      	movs	r3, #3
 8001288:	2100      	movs	r1, #0
 800128a:	f004 fa51 	bl	8005730 <xTaskGenericNotify>
	    break;
 800128e:	e009      	b.n	80012a4 <process_command+0xac>
	case sRtcReport:
		xTaskNotify(handle_rtc_task,(uint32_t)cmd,eSetValueWithOverwrite);
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <process_command+0xc0>)
 8001292:	6818      	ldr	r0, [r3, #0]
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	2300      	movs	r3, #0
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	2303      	movs	r3, #3
 800129c:	2100      	movs	r1, #0
 800129e:	f004 fa47 	bl	8005730 <xTaskGenericNotify>
	    break;
 80012a2:	bf00      	nop
	}

}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000044 	.word	0x20000044
 80012b0:	20012dcc 	.word	0x20012dcc
 80012b4:	20012df8 	.word	0x20012df8
 80012b8:	20012dc0 	.word	0x20012dc0

080012bc <extract_command>:

int extract_command(command_t *cmd)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	uint8_t item;

	status= uxQueueMessagesWaiting(q_data);
 80012c4:	4b19      	ldr	r3, [pc, #100]	; (800132c <extract_command+0x70>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f003 fa14 	bl	80046f6 <uxQueueMessagesWaiting>
 80012ce:	4603      	mov	r3, r0
 80012d0:	613b      	str	r3, [r7, #16]
	if (!status)
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d102      	bne.n	80012de <extract_command+0x22>
		return -1;
 80012d8:	f04f 33ff 	mov.w	r3, #4294967295
 80012dc:	e022      	b.n	8001324 <extract_command+0x68>

	uint8_t i=0;
 80012de:	2300      	movs	r3, #0
 80012e0:	75fb      	strb	r3, [r7, #23]
	do{

	status= xQueueReceive(q_data, &item, 0);
 80012e2:	4b12      	ldr	r3, [pc, #72]	; (800132c <extract_command+0x70>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f107 010f 	add.w	r1, r7, #15
 80012ea:	2200      	movs	r2, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f003 f893 	bl	8004418 <xQueueReceive>
 80012f2:	6138      	str	r0, [r7, #16]
	if (status==pdTRUE)
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d106      	bne.n	8001308 <extract_command+0x4c>
		cmd->payload[i++]=item;
 80012fa:	7dfb      	ldrb	r3, [r7, #23]
 80012fc:	1c5a      	adds	r2, r3, #1
 80012fe:	75fa      	strb	r2, [r7, #23]
 8001300:	461a      	mov	r2, r3
 8001302:	7bf9      	ldrb	r1, [r7, #15]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	5499      	strb	r1, [r3, r2]
	}
	while(item != '\n');
 8001308:	7bfb      	ldrb	r3, [r7, #15]
 800130a:	2b0a      	cmp	r3, #10
 800130c:	d1e9      	bne.n	80012e2 <extract_command+0x26>

	cmd->payload[i-1]= '\0';
 800130e:	7dfb      	ldrb	r3, [r7, #23]
 8001310:	3b01      	subs	r3, #1
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	2100      	movs	r1, #0
 8001316:	54d1      	strb	r1, [r2, r3]
	cmd->Len=i-1;
 8001318:	7dfb      	ldrb	r3, [r7, #23]
 800131a:	3b01      	subs	r3, #1
 800131c:	461a      	mov	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	60da      	str	r2, [r3, #12]

	return 0;
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20012dc8 	.word	0x20012dc8

08001330 <print_task>:

void print_task(void *parameters)
{
 8001330:	b590      	push	{r4, r7, lr}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	uint32_t *msg;
	while(1)
	{
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001338:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <print_task+0x38>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f107 010c 	add.w	r1, r7, #12
 8001340:	f04f 32ff 	mov.w	r2, #4294967295
 8001344:	4618      	mov	r0, r3
 8001346:	f003 f867 	bl	8004418 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg), HAL_MAX_DELAY);
 800134a:	68fc      	ldr	r4, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4618      	mov	r0, r3
 8001350:	f7fe ff48 	bl	80001e4 <strlen>
 8001354:	4603      	mov	r3, r0
 8001356:	b29a      	uxth	r2, r3
 8001358:	f04f 33ff 	mov.w	r3, #4294967295
 800135c:	4621      	mov	r1, r4
 800135e:	4803      	ldr	r0, [pc, #12]	; (800136c <print_task+0x3c>)
 8001360:	f001 fd99 	bl	8002e96 <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001364:	e7e8      	b.n	8001338 <print_task+0x8>
 8001366:	bf00      	nop
 8001368:	20012dd0 	.word	0x20012dd0
 800136c:	20012e00 	.word	0x20012e00

08001370 <led_task>:

	}
}
void led_task(void *parameters)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af02      	add	r7, sp, #8
 8001376:	6078      	str	r0, [r7, #4]
	command_t *cmd;
	uint32_t cmd_addr;
	const char* msg_led= "=======================\n"
 8001378:	4b3e      	ldr	r3, [pc, #248]	; (8001474 <led_task+0x104>)
 800137a:	60fb      	str	r3, [r7, #12]
						" Led effect3 ---->3     \n"
						" Led effect4 ---->4     \n"
						"Enter your choice here : ";
	while(1)
	{
		xTaskNotifyWait(0,0,NULL, portMAX_DELAY);
 800137c:	f04f 33ff 	mov.w	r3, #4294967295
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2300      	movs	r3, #0
 8001384:	2200      	movs	r2, #0
 8001386:	2100      	movs	r1, #0
 8001388:	2000      	movs	r0, #0
 800138a:	f004 f951 	bl	8005630 <xTaskGenericNotifyWait>
		xQueueSend(q_print,&msg_led,portMAX_DELAY);
 800138e:	4b3a      	ldr	r3, [pc, #232]	; (8001478 <led_task+0x108>)
 8001390:	6818      	ldr	r0, [r3, #0]
 8001392:	f107 010c 	add.w	r1, r7, #12
 8001396:	2300      	movs	r3, #0
 8001398:	f04f 32ff 	mov.w	r2, #4294967295
 800139c:	f002 fe94 	bl	80040c8 <xQueueGenericSend>
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 80013a0:	f107 0310 	add.w	r3, r7, #16
 80013a4:	f04f 32ff 	mov.w	r2, #4294967295
 80013a8:	9200      	str	r2, [sp, #0]
 80013aa:	2200      	movs	r2, #0
 80013ac:	2100      	movs	r1, #0
 80013ae:	2000      	movs	r0, #0
 80013b0:	f004 f93e 	bl	8005630 <xTaskGenericNotifyWait>

		cmd=(command_t*)cmd_addr;
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	617b      	str	r3, [r7, #20]

		if(cmd->Len <=4)
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	2b04      	cmp	r3, #4
 80013be:	d843      	bhi.n	8001448 <led_task+0xd8>
		{
			if (! strcmp ((char*)cmd->payload, "none"))
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	492e      	ldr	r1, [pc, #184]	; (800147c <led_task+0x10c>)
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7fe ff03 	bl	80001d0 <strcmp>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d102      	bne.n	80013d6 <led_task+0x66>
				led_effect_stop();
 80013d0:	f7ff f88c 	bl	80004ec <led_effect_stop>
 80013d4:	e040      	b.n	8001458 <led_task+0xe8>
			else if (! strcmp ((char*)cmd->payload, "e1"))
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	4929      	ldr	r1, [pc, #164]	; (8001480 <led_task+0x110>)
 80013da:	4618      	mov	r0, r3
 80013dc:	f7fe fef8 	bl	80001d0 <strcmp>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d103      	bne.n	80013ee <led_task+0x7e>
				led_effect(1);
 80013e6:	2001      	movs	r0, #1
 80013e8:	f7ff f8a0 	bl	800052c <led_effect>
 80013ec:	e034      	b.n	8001458 <led_task+0xe8>
			else if (! strcmp ((char*)cmd->payload, "e2"))
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	4924      	ldr	r1, [pc, #144]	; (8001484 <led_task+0x114>)
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7fe feec 	bl	80001d0 <strcmp>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d103      	bne.n	8001406 <led_task+0x96>
				led_effect(2);
 80013fe:	2002      	movs	r0, #2
 8001400:	f7ff f894 	bl	800052c <led_effect>
 8001404:	e028      	b.n	8001458 <led_task+0xe8>
			else if (! strcmp ((char*)cmd->payload, "e3"))
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	491f      	ldr	r1, [pc, #124]	; (8001488 <led_task+0x118>)
 800140a:	4618      	mov	r0, r3
 800140c:	f7fe fee0 	bl	80001d0 <strcmp>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d103      	bne.n	800141e <led_task+0xae>
				led_effect(3);
 8001416:	2003      	movs	r0, #3
 8001418:	f7ff f888 	bl	800052c <led_effect>
 800141c:	e01c      	b.n	8001458 <led_task+0xe8>
			else if (! strcmp ((char*)cmd->payload, "e4"))
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	491a      	ldr	r1, [pc, #104]	; (800148c <led_task+0x11c>)
 8001422:	4618      	mov	r0, r3
 8001424:	f7fe fed4 	bl	80001d0 <strcmp>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d103      	bne.n	8001436 <led_task+0xc6>
				led_effect(4);
 800142e:	2004      	movs	r0, #4
 8001430:	f7ff f87c 	bl	800052c <led_effect>
 8001434:	e010      	b.n	8001458 <led_task+0xe8>
			else
				xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <led_task+0x108>)
 8001438:	6818      	ldr	r0, [r3, #0]
 800143a:	2300      	movs	r3, #0
 800143c:	f04f 32ff 	mov.w	r2, #4294967295
 8001440:	4913      	ldr	r1, [pc, #76]	; (8001490 <led_task+0x120>)
 8001442:	f002 fe41 	bl	80040c8 <xQueueGenericSend>
 8001446:	e007      	b.n	8001458 <led_task+0xe8>
		}
		else
			xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <led_task+0x108>)
 800144a:	6818      	ldr	r0, [r3, #0]
 800144c:	2300      	movs	r3, #0
 800144e:	f04f 32ff 	mov.w	r2, #4294967295
 8001452:	490f      	ldr	r1, [pc, #60]	; (8001490 <led_task+0x120>)
 8001454:	f002 fe38 	bl	80040c8 <xQueueGenericSend>

		current_state= sMainmenu;
 8001458:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <led_task+0x124>)
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]

		xTaskNotify(handle_menu_task,0,eNoAction);
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <led_task+0x128>)
 8001460:	6818      	ldr	r0, [r3, #0]
 8001462:	2300      	movs	r3, #0
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	2300      	movs	r3, #0
 8001468:	2200      	movs	r2, #0
 800146a:	2100      	movs	r1, #0
 800146c:	f004 f960 	bl	8005730 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL, portMAX_DELAY);
 8001470:	e784      	b.n	800137c <led_task+0xc>
 8001472:	bf00      	nop
 8001474:	08006d10 	.word	0x08006d10
 8001478:	20012dd0 	.word	0x20012dd0
 800147c:	08006df4 	.word	0x08006df4
 8001480:	08006dfc 	.word	0x08006dfc
 8001484:	08006e00 	.word	0x08006e00
 8001488:	08006e04 	.word	0x08006e04
 800148c:	08006e08 	.word	0x08006e08
 8001490:	2000000c 	.word	0x2000000c
 8001494:	20000044 	.word	0x20000044
 8001498:	20012dcc 	.word	0x20012dcc

0800149c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800149c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014a0:	480d      	ldr	r0, [pc, #52]	; (80014d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014a2:	490e      	ldr	r1, [pc, #56]	; (80014dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014a4:	4a0e      	ldr	r2, [pc, #56]	; (80014e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a8:	e002      	b.n	80014b0 <LoopCopyDataInit>

080014aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ae:	3304      	adds	r3, #4

080014b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b4:	d3f9      	bcc.n	80014aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014b6:	4a0b      	ldr	r2, [pc, #44]	; (80014e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014b8:	4c0b      	ldr	r4, [pc, #44]	; (80014e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014bc:	e001      	b.n	80014c2 <LoopFillZerobss>

080014be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c0:	3204      	adds	r2, #4

080014c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c4:	d3fb      	bcc.n	80014be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014c6:	f7ff fdf9 	bl	80010bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ca:	f005 fb55 	bl	8006b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ce:	f7ff f943 	bl	8000758 <main>
  bx  lr    
 80014d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014dc:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80014e0:	08006e4c 	.word	0x08006e4c
  ldr r2, =_sbss
 80014e4:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80014e8:	20012ed0 	.word	0x20012ed0

080014ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014ec:	e7fe      	b.n	80014ec <ADC_IRQHandler>
	...

080014f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014f4:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <HAL_Init+0x40>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a0d      	ldr	r2, [pc, #52]	; (8001530 <HAL_Init+0x40>)
 80014fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001500:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <HAL_Init+0x40>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <HAL_Init+0x40>)
 8001506:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800150a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <HAL_Init+0x40>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a07      	ldr	r2, [pc, #28]	; (8001530 <HAL_Init+0x40>)
 8001512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001516:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001518:	2003      	movs	r0, #3
 800151a:	f000 f8d8 	bl	80016ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800151e:	2000      	movs	r0, #0
 8001520:	f7ff fd48 	bl	8000fb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001524:	f7ff fca4 	bl	8000e70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40023c00 	.word	0x40023c00

08001534 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_IncTick+0x20>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	461a      	mov	r2, r3
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_IncTick+0x24>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4413      	add	r3, r2
 8001544:	4a04      	ldr	r2, [pc, #16]	; (8001558 <HAL_IncTick+0x24>)
 8001546:	6013      	str	r3, [r2, #0]
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	20000014 	.word	0x20000014
 8001558:	20012e8c 	.word	0x20012e8c

0800155c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return uwTick;
 8001560:	4b03      	ldr	r3, [pc, #12]	; (8001570 <HAL_GetTick+0x14>)
 8001562:	681b      	ldr	r3, [r3, #0]
}
 8001564:	4618      	mov	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	20012e8c 	.word	0x20012e8c

08001574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800158a:	68ba      	ldr	r2, [r7, #8]
 800158c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001590:	4013      	ands	r3, r2
 8001592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800159c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015a6:	4a04      	ldr	r2, [pc, #16]	; (80015b8 <__NVIC_SetPriorityGrouping+0x44>)
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	60d3      	str	r3, [r2, #12]
}
 80015ac:	bf00      	nop
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c0:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <__NVIC_GetPriorityGrouping+0x18>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	0a1b      	lsrs	r3, r3, #8
 80015c6:	f003 0307 	and.w	r3, r3, #7
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	db0b      	blt.n	8001602 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	f003 021f 	and.w	r2, r3, #31
 80015f0:	4907      	ldr	r1, [pc, #28]	; (8001610 <__NVIC_EnableIRQ+0x38>)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	095b      	lsrs	r3, r3, #5
 80015f8:	2001      	movs	r0, #1
 80015fa:	fa00 f202 	lsl.w	r2, r0, r2
 80015fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000e100 	.word	0xe000e100

08001614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	6039      	str	r1, [r7, #0]
 800161e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001624:	2b00      	cmp	r3, #0
 8001626:	db0a      	blt.n	800163e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	b2da      	uxtb	r2, r3
 800162c:	490c      	ldr	r1, [pc, #48]	; (8001660 <__NVIC_SetPriority+0x4c>)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	0112      	lsls	r2, r2, #4
 8001634:	b2d2      	uxtb	r2, r2
 8001636:	440b      	add	r3, r1
 8001638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800163c:	e00a      	b.n	8001654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	b2da      	uxtb	r2, r3
 8001642:	4908      	ldr	r1, [pc, #32]	; (8001664 <__NVIC_SetPriority+0x50>)
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	3b04      	subs	r3, #4
 800164c:	0112      	lsls	r2, r2, #4
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	440b      	add	r3, r1
 8001652:	761a      	strb	r2, [r3, #24]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	e000e100 	.word	0xe000e100
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001668:	b480      	push	{r7}
 800166a:	b089      	sub	sp, #36	; 0x24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	f1c3 0307 	rsb	r3, r3, #7
 8001682:	2b04      	cmp	r3, #4
 8001684:	bf28      	it	cs
 8001686:	2304      	movcs	r3, #4
 8001688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3304      	adds	r3, #4
 800168e:	2b06      	cmp	r3, #6
 8001690:	d902      	bls.n	8001698 <NVIC_EncodePriority+0x30>
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3b03      	subs	r3, #3
 8001696:	e000      	b.n	800169a <NVIC_EncodePriority+0x32>
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800169c:	f04f 32ff 	mov.w	r2, #4294967295
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43da      	mvns	r2, r3
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	401a      	ands	r2, r3
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b0:	f04f 31ff 	mov.w	r1, #4294967295
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ba:	43d9      	mvns	r1, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c0:	4313      	orrs	r3, r2
         );
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3724      	adds	r7, #36	; 0x24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff ff4c 	bl	8001574 <__NVIC_SetPriorityGrouping>
}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
 80016f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016f6:	f7ff ff61 	bl	80015bc <__NVIC_GetPriorityGrouping>
 80016fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	68b9      	ldr	r1, [r7, #8]
 8001700:	6978      	ldr	r0, [r7, #20]
 8001702:	f7ff ffb1 	bl	8001668 <NVIC_EncodePriority>
 8001706:	4602      	mov	r2, r0
 8001708:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800170c:	4611      	mov	r1, r2
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff ff80 	bl	8001614 <__NVIC_SetPriority>
}
 8001714:	bf00      	nop
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff ff54 	bl	80015d8 <__NVIC_EnableIRQ>
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001744:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001746:	f7ff ff09 	bl	800155c <HAL_GetTick>
 800174a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d008      	beq.n	800176a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2280      	movs	r2, #128	; 0x80
 800175c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e052      	b.n	8001810 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 0216 	bic.w	r2, r2, #22
 8001778:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	695a      	ldr	r2, [r3, #20]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001788:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	2b00      	cmp	r3, #0
 8001790:	d103      	bne.n	800179a <HAL_DMA_Abort+0x62>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001796:	2b00      	cmp	r3, #0
 8001798:	d007      	beq.n	80017aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 0208 	bic.w	r2, r2, #8
 80017a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 0201 	bic.w	r2, r2, #1
 80017b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017ba:	e013      	b.n	80017e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017bc:	f7ff fece 	bl	800155c <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b05      	cmp	r3, #5
 80017c8:	d90c      	bls.n	80017e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2220      	movs	r2, #32
 80017ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2203      	movs	r2, #3
 80017d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e015      	b.n	8001810 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1e4      	bne.n	80017bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f6:	223f      	movs	r2, #63	; 0x3f
 80017f8:	409a      	lsls	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d004      	beq.n	8001836 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2280      	movs	r2, #128	; 0x80
 8001830:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e00c      	b.n	8001850 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2205      	movs	r2, #5
 800183a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f022 0201 	bic.w	r2, r2, #1
 800184c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800185c:	b480      	push	{r7}
 800185e:	b089      	sub	sp, #36	; 0x24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800186e:	2300      	movs	r3, #0
 8001870:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
 8001876:	e16b      	b.n	8001b50 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001878:	2201      	movs	r2, #1
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	429a      	cmp	r2, r3
 8001892:	f040 815a 	bne.w	8001b4a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f003 0303 	and.w	r3, r3, #3
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d005      	beq.n	80018ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d130      	bne.n	8001910 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	2203      	movs	r2, #3
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43db      	mvns	r3, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4013      	ands	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	68da      	ldr	r2, [r3, #12]
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018e4:	2201      	movs	r2, #1
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	091b      	lsrs	r3, r3, #4
 80018fa:	f003 0201 	and.w	r2, r3, #1
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 0303 	and.w	r3, r3, #3
 8001918:	2b03      	cmp	r3, #3
 800191a:	d017      	beq.n	800194c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	2203      	movs	r2, #3
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 0303 	and.w	r3, r3, #3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d123      	bne.n	80019a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	08da      	lsrs	r2, r3, #3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3208      	adds	r2, #8
 8001960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001964:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	220f      	movs	r2, #15
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	691a      	ldr	r2, [r3, #16]
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	08da      	lsrs	r2, r3, #3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	3208      	adds	r2, #8
 800199a:	69b9      	ldr	r1, [r7, #24]
 800199c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	2203      	movs	r2, #3
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4013      	ands	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 0203 	and.w	r2, r3, #3
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f000 80b4 	beq.w	8001b4a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	4b60      	ldr	r3, [pc, #384]	; (8001b68 <HAL_GPIO_Init+0x30c>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	4a5f      	ldr	r2, [pc, #380]	; (8001b68 <HAL_GPIO_Init+0x30c>)
 80019ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f0:	6453      	str	r3, [r2, #68]	; 0x44
 80019f2:	4b5d      	ldr	r3, [pc, #372]	; (8001b68 <HAL_GPIO_Init+0x30c>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019fe:	4a5b      	ldr	r2, [pc, #364]	; (8001b6c <HAL_GPIO_Init+0x310>)
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	089b      	lsrs	r3, r3, #2
 8001a04:	3302      	adds	r3, #2
 8001a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	220f      	movs	r2, #15
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a52      	ldr	r2, [pc, #328]	; (8001b70 <HAL_GPIO_Init+0x314>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d02b      	beq.n	8001a82 <HAL_GPIO_Init+0x226>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a51      	ldr	r2, [pc, #324]	; (8001b74 <HAL_GPIO_Init+0x318>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d025      	beq.n	8001a7e <HAL_GPIO_Init+0x222>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a50      	ldr	r2, [pc, #320]	; (8001b78 <HAL_GPIO_Init+0x31c>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d01f      	beq.n	8001a7a <HAL_GPIO_Init+0x21e>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a4f      	ldr	r2, [pc, #316]	; (8001b7c <HAL_GPIO_Init+0x320>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d019      	beq.n	8001a76 <HAL_GPIO_Init+0x21a>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a4e      	ldr	r2, [pc, #312]	; (8001b80 <HAL_GPIO_Init+0x324>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d013      	beq.n	8001a72 <HAL_GPIO_Init+0x216>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a4d      	ldr	r2, [pc, #308]	; (8001b84 <HAL_GPIO_Init+0x328>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d00d      	beq.n	8001a6e <HAL_GPIO_Init+0x212>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a4c      	ldr	r2, [pc, #304]	; (8001b88 <HAL_GPIO_Init+0x32c>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d007      	beq.n	8001a6a <HAL_GPIO_Init+0x20e>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a4b      	ldr	r2, [pc, #300]	; (8001b8c <HAL_GPIO_Init+0x330>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d101      	bne.n	8001a66 <HAL_GPIO_Init+0x20a>
 8001a62:	2307      	movs	r3, #7
 8001a64:	e00e      	b.n	8001a84 <HAL_GPIO_Init+0x228>
 8001a66:	2308      	movs	r3, #8
 8001a68:	e00c      	b.n	8001a84 <HAL_GPIO_Init+0x228>
 8001a6a:	2306      	movs	r3, #6
 8001a6c:	e00a      	b.n	8001a84 <HAL_GPIO_Init+0x228>
 8001a6e:	2305      	movs	r3, #5
 8001a70:	e008      	b.n	8001a84 <HAL_GPIO_Init+0x228>
 8001a72:	2304      	movs	r3, #4
 8001a74:	e006      	b.n	8001a84 <HAL_GPIO_Init+0x228>
 8001a76:	2303      	movs	r3, #3
 8001a78:	e004      	b.n	8001a84 <HAL_GPIO_Init+0x228>
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	e002      	b.n	8001a84 <HAL_GPIO_Init+0x228>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e000      	b.n	8001a84 <HAL_GPIO_Init+0x228>
 8001a82:	2300      	movs	r3, #0
 8001a84:	69fa      	ldr	r2, [r7, #28]
 8001a86:	f002 0203 	and.w	r2, r2, #3
 8001a8a:	0092      	lsls	r2, r2, #2
 8001a8c:	4093      	lsls	r3, r2
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a94:	4935      	ldr	r1, [pc, #212]	; (8001b6c <HAL_GPIO_Init+0x310>)
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	089b      	lsrs	r3, r3, #2
 8001a9a:	3302      	adds	r3, #2
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aa2:	4b3b      	ldr	r3, [pc, #236]	; (8001b90 <HAL_GPIO_Init+0x334>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ac6:	4a32      	ldr	r2, [pc, #200]	; (8001b90 <HAL_GPIO_Init+0x334>)
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001acc:	4b30      	ldr	r3, [pc, #192]	; (8001b90 <HAL_GPIO_Init+0x334>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d003      	beq.n	8001af0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001af0:	4a27      	ldr	r2, [pc, #156]	; (8001b90 <HAL_GPIO_Init+0x334>)
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001af6:	4b26      	ldr	r3, [pc, #152]	; (8001b90 <HAL_GPIO_Init+0x334>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	43db      	mvns	r3, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4013      	ands	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b1a:	4a1d      	ldr	r2, [pc, #116]	; (8001b90 <HAL_GPIO_Init+0x334>)
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b20:	4b1b      	ldr	r3, [pc, #108]	; (8001b90 <HAL_GPIO_Init+0x334>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b44:	4a12      	ldr	r2, [pc, #72]	; (8001b90 <HAL_GPIO_Init+0x334>)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	61fb      	str	r3, [r7, #28]
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	2b0f      	cmp	r3, #15
 8001b54:	f67f ae90 	bls.w	8001878 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b58:	bf00      	nop
 8001b5a:	bf00      	nop
 8001b5c:	3724      	adds	r7, #36	; 0x24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40013800 	.word	0x40013800
 8001b70:	40020000 	.word	0x40020000
 8001b74:	40020400 	.word	0x40020400
 8001b78:	40020800 	.word	0x40020800
 8001b7c:	40020c00 	.word	0x40020c00
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40021400 	.word	0x40021400
 8001b88:	40021800 	.word	0x40021800
 8001b8c:	40021c00 	.word	0x40021c00
 8001b90:	40013c00 	.word	0x40013c00

08001b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	807b      	strh	r3, [r7, #2]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ba4:	787b      	ldrb	r3, [r7, #1]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001baa:	887a      	ldrh	r2, [r7, #2]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bb0:	e003      	b.n	8001bba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bb2:	887b      	ldrh	r3, [r7, #2]
 8001bb4:	041a      	lsls	r2, r3, #16
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	619a      	str	r2, [r3, #24]
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
	...

08001bc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e264      	b.n	80020a4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d075      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001be6:	4ba3      	ldr	r3, [pc, #652]	; (8001e74 <HAL_RCC_OscConfig+0x2ac>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 030c 	and.w	r3, r3, #12
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	d00c      	beq.n	8001c0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bf2:	4ba0      	ldr	r3, [pc, #640]	; (8001e74 <HAL_RCC_OscConfig+0x2ac>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bfa:	2b08      	cmp	r3, #8
 8001bfc:	d112      	bne.n	8001c24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bfe:	4b9d      	ldr	r3, [pc, #628]	; (8001e74 <HAL_RCC_OscConfig+0x2ac>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c0a:	d10b      	bne.n	8001c24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c0c:	4b99      	ldr	r3, [pc, #612]	; (8001e74 <HAL_RCC_OscConfig+0x2ac>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d05b      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x108>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d157      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e23f      	b.n	80020a4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c2c:	d106      	bne.n	8001c3c <HAL_RCC_OscConfig+0x74>
 8001c2e:	4b91      	ldr	r3, [pc, #580]	; (8001e74 <HAL_RCC_OscConfig+0x2ac>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a90      	ldr	r2, [pc, #576]	; (8001e74 <HAL_RCC_OscConfig+0x2ac>)
 8001c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	e01d      	b.n	8001c78 <HAL_RCC_OscConfig+0xb0>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c44:	d10c      	bne.n	8001c60 <HAL_RCC_OscConfig+0x98>
 8001c46:	4b8b      	ldr	r3, [pc, #556]	; (8001e74 <HAL_RCC_OscConfig+0x2ac>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a8a      	ldr	r2, [pc, #552]	; (8001e74 <HAL_RCC_OscConfig+0x2ac>)
 8001c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	4b88      	ldr	r3, [pc, #544]	; (8001e74 <HAL_RCC_OscConfig+0x2ac>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a87      	ldr	r2, [pc, #540]	; (8001e74 <HAL_RCC_OscConfig+0x2ac>)
 8001c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	e00b      	b.n	8001c78 <HAL_RCC_OscConfig+0xb0>
 8001c60:	4b84      	ldr	r3, [pc, #528]	; (8001e74 <HAL_RCC_OscConfig+0x2ac>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a83      	ldr	r2, [pc, #524]	; (8001e74 <HAL_RCC_OscConfig+0x2ac>)
 8001c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	4b81      	ldr	r3, [pc, #516]	; (8001e74 <HAL_RCC_OscConfig+0x2ac>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a80      	ldr	r2, [pc, #512]	; (8001e74 <HAL_RCC_OscConfig+0x2ac>)
 8001c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d013      	beq.n	8001ca8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c80:	f7ff fc6c 	bl	800155c <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c88:	f7ff fc68 	bl	800155c <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b64      	cmp	r3, #100	; 0x64
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e204      	b.n	80020a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9a:	4b76      	ldr	r3, [pc, #472]	; (8001e74 <HAL_RCC_OscConfig+0x2ac>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCC_OscConfig+0xc0>
 8001ca6:	e014      	b.n	8001cd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca8:	f7ff fc58 	bl	800155c <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb0:	f7ff fc54 	bl	800155c <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b64      	cmp	r3, #100	; 0x64
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e1f0      	b.n	80020a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc2:	4b6c      	ldr	r3, [pc, #432]	; (8001e74 <HAL_RCC_OscConfig+0x2ac>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f0      	bne.n	8001cb0 <HAL_RCC_OscConfig+0xe8>
 8001cce:	e000      	b.n	8001cd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d063      	beq.n	8001da6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cde:	4b65      	ldr	r3, [pc, #404]	; (8001e74 <HAL_RCC_OscConfig+0x2ac>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00b      	beq.n	8001d02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cea:	4b62      	ldr	r3, [pc, #392]	; (8001e74 <HAL_RCC_OscConfig+0x2ac>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cf2:	2b08      	cmp	r3, #8
 8001cf4:	d11c      	bne.n	8001d30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cf6:	4b5f      	ldr	r3, [pc, #380]	; (8001e74 <HAL_RCC_OscConfig+0x2ac>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d116      	bne.n	8001d30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d02:	4b5c      	ldr	r3, [pc, #368]	; (8001e74 <HAL_RCC_OscConfig+0x2ac>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d005      	beq.n	8001d1a <HAL_RCC_OscConfig+0x152>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d001      	beq.n	8001d1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e1c4      	b.n	80020a4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1a:	4b56      	ldr	r3, [pc, #344]	; (8001e74 <HAL_RCC_OscConfig+0x2ac>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	4952      	ldr	r1, [pc, #328]	; (8001e74 <HAL_RCC_OscConfig+0x2ac>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2e:	e03a      	b.n	8001da6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d020      	beq.n	8001d7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d38:	4b4f      	ldr	r3, [pc, #316]	; (8001e78 <HAL_RCC_OscConfig+0x2b0>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3e:	f7ff fc0d 	bl	800155c <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d46:	f7ff fc09 	bl	800155c <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e1a5      	b.n	80020a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d58:	4b46      	ldr	r3, [pc, #280]	; (8001e74 <HAL_RCC_OscConfig+0x2ac>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0f0      	beq.n	8001d46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d64:	4b43      	ldr	r3, [pc, #268]	; (8001e74 <HAL_RCC_OscConfig+0x2ac>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	4940      	ldr	r1, [pc, #256]	; (8001e74 <HAL_RCC_OscConfig+0x2ac>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	600b      	str	r3, [r1, #0]
 8001d78:	e015      	b.n	8001da6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d7a:	4b3f      	ldr	r3, [pc, #252]	; (8001e78 <HAL_RCC_OscConfig+0x2b0>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d80:	f7ff fbec 	bl	800155c <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d88:	f7ff fbe8 	bl	800155c <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e184      	b.n	80020a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9a:	4b36      	ldr	r3, [pc, #216]	; (8001e74 <HAL_RCC_OscConfig+0x2ac>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f0      	bne.n	8001d88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d030      	beq.n	8001e14 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d016      	beq.n	8001de8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dba:	4b30      	ldr	r3, [pc, #192]	; (8001e7c <HAL_RCC_OscConfig+0x2b4>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc0:	f7ff fbcc 	bl	800155c <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dc8:	f7ff fbc8 	bl	800155c <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e164      	b.n	80020a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dda:	4b26      	ldr	r3, [pc, #152]	; (8001e74 <HAL_RCC_OscConfig+0x2ac>)
 8001ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x200>
 8001de6:	e015      	b.n	8001e14 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de8:	4b24      	ldr	r3, [pc, #144]	; (8001e7c <HAL_RCC_OscConfig+0x2b4>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dee:	f7ff fbb5 	bl	800155c <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001df6:	f7ff fbb1 	bl	800155c <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e14d      	b.n	80020a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e08:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <HAL_RCC_OscConfig+0x2ac>)
 8001e0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1f0      	bne.n	8001df6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 80a0 	beq.w	8001f62 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e22:	2300      	movs	r3, #0
 8001e24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e26:	4b13      	ldr	r3, [pc, #76]	; (8001e74 <HAL_RCC_OscConfig+0x2ac>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10f      	bne.n	8001e52 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <HAL_RCC_OscConfig+0x2ac>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	4a0e      	ldr	r2, [pc, #56]	; (8001e74 <HAL_RCC_OscConfig+0x2ac>)
 8001e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e40:	6413      	str	r3, [r2, #64]	; 0x40
 8001e42:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <HAL_RCC_OscConfig+0x2ac>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4a:	60bb      	str	r3, [r7, #8]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e52:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <HAL_RCC_OscConfig+0x2b8>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d121      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e5e:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <HAL_RCC_OscConfig+0x2b8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a07      	ldr	r2, [pc, #28]	; (8001e80 <HAL_RCC_OscConfig+0x2b8>)
 8001e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e6a:	f7ff fb77 	bl	800155c <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e70:	e011      	b.n	8001e96 <HAL_RCC_OscConfig+0x2ce>
 8001e72:	bf00      	nop
 8001e74:	40023800 	.word	0x40023800
 8001e78:	42470000 	.word	0x42470000
 8001e7c:	42470e80 	.word	0x42470e80
 8001e80:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e84:	f7ff fb6a 	bl	800155c <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e106      	b.n	80020a4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e96:	4b85      	ldr	r3, [pc, #532]	; (80020ac <HAL_RCC_OscConfig+0x4e4>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0f0      	beq.n	8001e84 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d106      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x2f0>
 8001eaa:	4b81      	ldr	r3, [pc, #516]	; (80020b0 <HAL_RCC_OscConfig+0x4e8>)
 8001eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eae:	4a80      	ldr	r2, [pc, #512]	; (80020b0 <HAL_RCC_OscConfig+0x4e8>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8001eb6:	e01c      	b.n	8001ef2 <HAL_RCC_OscConfig+0x32a>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	2b05      	cmp	r3, #5
 8001ebe:	d10c      	bne.n	8001eda <HAL_RCC_OscConfig+0x312>
 8001ec0:	4b7b      	ldr	r3, [pc, #492]	; (80020b0 <HAL_RCC_OscConfig+0x4e8>)
 8001ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec4:	4a7a      	ldr	r2, [pc, #488]	; (80020b0 <HAL_RCC_OscConfig+0x4e8>)
 8001ec6:	f043 0304 	orr.w	r3, r3, #4
 8001eca:	6713      	str	r3, [r2, #112]	; 0x70
 8001ecc:	4b78      	ldr	r3, [pc, #480]	; (80020b0 <HAL_RCC_OscConfig+0x4e8>)
 8001ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed0:	4a77      	ldr	r2, [pc, #476]	; (80020b0 <HAL_RCC_OscConfig+0x4e8>)
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ed8:	e00b      	b.n	8001ef2 <HAL_RCC_OscConfig+0x32a>
 8001eda:	4b75      	ldr	r3, [pc, #468]	; (80020b0 <HAL_RCC_OscConfig+0x4e8>)
 8001edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ede:	4a74      	ldr	r2, [pc, #464]	; (80020b0 <HAL_RCC_OscConfig+0x4e8>)
 8001ee0:	f023 0301 	bic.w	r3, r3, #1
 8001ee4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ee6:	4b72      	ldr	r3, [pc, #456]	; (80020b0 <HAL_RCC_OscConfig+0x4e8>)
 8001ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eea:	4a71      	ldr	r2, [pc, #452]	; (80020b0 <HAL_RCC_OscConfig+0x4e8>)
 8001eec:	f023 0304 	bic.w	r3, r3, #4
 8001ef0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d015      	beq.n	8001f26 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001efa:	f7ff fb2f 	bl	800155c <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f00:	e00a      	b.n	8001f18 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f02:	f7ff fb2b 	bl	800155c <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e0c5      	b.n	80020a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f18:	4b65      	ldr	r3, [pc, #404]	; (80020b0 <HAL_RCC_OscConfig+0x4e8>)
 8001f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0ee      	beq.n	8001f02 <HAL_RCC_OscConfig+0x33a>
 8001f24:	e014      	b.n	8001f50 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f26:	f7ff fb19 	bl	800155c <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f2c:	e00a      	b.n	8001f44 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f2e:	f7ff fb15 	bl	800155c <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e0af      	b.n	80020a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f44:	4b5a      	ldr	r3, [pc, #360]	; (80020b0 <HAL_RCC_OscConfig+0x4e8>)
 8001f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1ee      	bne.n	8001f2e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f50:	7dfb      	ldrb	r3, [r7, #23]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d105      	bne.n	8001f62 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f56:	4b56      	ldr	r3, [pc, #344]	; (80020b0 <HAL_RCC_OscConfig+0x4e8>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	4a55      	ldr	r2, [pc, #340]	; (80020b0 <HAL_RCC_OscConfig+0x4e8>)
 8001f5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f60:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 809b 	beq.w	80020a2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f6c:	4b50      	ldr	r3, [pc, #320]	; (80020b0 <HAL_RCC_OscConfig+0x4e8>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 030c 	and.w	r3, r3, #12
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	d05c      	beq.n	8002032 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d141      	bne.n	8002004 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f80:	4b4c      	ldr	r3, [pc, #304]	; (80020b4 <HAL_RCC_OscConfig+0x4ec>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f86:	f7ff fae9 	bl	800155c <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f8e:	f7ff fae5 	bl	800155c <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e081      	b.n	80020a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa0:	4b43      	ldr	r3, [pc, #268]	; (80020b0 <HAL_RCC_OscConfig+0x4e8>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1f0      	bne.n	8001f8e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69da      	ldr	r2, [r3, #28]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fba:	019b      	lsls	r3, r3, #6
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc2:	085b      	lsrs	r3, r3, #1
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	041b      	lsls	r3, r3, #16
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fce:	061b      	lsls	r3, r3, #24
 8001fd0:	4937      	ldr	r1, [pc, #220]	; (80020b0 <HAL_RCC_OscConfig+0x4e8>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fd6:	4b37      	ldr	r3, [pc, #220]	; (80020b4 <HAL_RCC_OscConfig+0x4ec>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7ff fabe 	bl	800155c <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe4:	f7ff faba 	bl	800155c <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e056      	b.n	80020a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff6:	4b2e      	ldr	r3, [pc, #184]	; (80020b0 <HAL_RCC_OscConfig+0x4e8>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d0f0      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x41c>
 8002002:	e04e      	b.n	80020a2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002004:	4b2b      	ldr	r3, [pc, #172]	; (80020b4 <HAL_RCC_OscConfig+0x4ec>)
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200a:	f7ff faa7 	bl	800155c <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002012:	f7ff faa3 	bl	800155c <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e03f      	b.n	80020a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002024:	4b22      	ldr	r3, [pc, #136]	; (80020b0 <HAL_RCC_OscConfig+0x4e8>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1f0      	bne.n	8002012 <HAL_RCC_OscConfig+0x44a>
 8002030:	e037      	b.n	80020a2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d101      	bne.n	800203e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e032      	b.n	80020a4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800203e:	4b1c      	ldr	r3, [pc, #112]	; (80020b0 <HAL_RCC_OscConfig+0x4e8>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d028      	beq.n	800209e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002056:	429a      	cmp	r2, r3
 8002058:	d121      	bne.n	800209e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002064:	429a      	cmp	r2, r3
 8002066:	d11a      	bne.n	800209e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800206e:	4013      	ands	r3, r2
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002074:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002076:	4293      	cmp	r3, r2
 8002078:	d111      	bne.n	800209e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002084:	085b      	lsrs	r3, r3, #1
 8002086:	3b01      	subs	r3, #1
 8002088:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800208a:	429a      	cmp	r2, r3
 800208c:	d107      	bne.n	800209e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002098:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800209a:	429a      	cmp	r2, r3
 800209c:	d001      	beq.n	80020a2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3718      	adds	r7, #24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40007000 	.word	0x40007000
 80020b0:	40023800 	.word	0x40023800
 80020b4:	42470060 	.word	0x42470060

080020b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e0cc      	b.n	8002266 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020cc:	4b68      	ldr	r3, [pc, #416]	; (8002270 <HAL_RCC_ClockConfig+0x1b8>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d90c      	bls.n	80020f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020da:	4b65      	ldr	r3, [pc, #404]	; (8002270 <HAL_RCC_ClockConfig+0x1b8>)
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e2:	4b63      	ldr	r3, [pc, #396]	; (8002270 <HAL_RCC_ClockConfig+0x1b8>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d001      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e0b8      	b.n	8002266 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d020      	beq.n	8002142 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	d005      	beq.n	8002118 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800210c:	4b59      	ldr	r3, [pc, #356]	; (8002274 <HAL_RCC_ClockConfig+0x1bc>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	4a58      	ldr	r2, [pc, #352]	; (8002274 <HAL_RCC_ClockConfig+0x1bc>)
 8002112:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002116:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0308 	and.w	r3, r3, #8
 8002120:	2b00      	cmp	r3, #0
 8002122:	d005      	beq.n	8002130 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002124:	4b53      	ldr	r3, [pc, #332]	; (8002274 <HAL_RCC_ClockConfig+0x1bc>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	4a52      	ldr	r2, [pc, #328]	; (8002274 <HAL_RCC_ClockConfig+0x1bc>)
 800212a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800212e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002130:	4b50      	ldr	r3, [pc, #320]	; (8002274 <HAL_RCC_ClockConfig+0x1bc>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	494d      	ldr	r1, [pc, #308]	; (8002274 <HAL_RCC_ClockConfig+0x1bc>)
 800213e:	4313      	orrs	r3, r2
 8002140:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b00      	cmp	r3, #0
 800214c:	d044      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d107      	bne.n	8002166 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002156:	4b47      	ldr	r3, [pc, #284]	; (8002274 <HAL_RCC_ClockConfig+0x1bc>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d119      	bne.n	8002196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e07f      	b.n	8002266 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b02      	cmp	r3, #2
 800216c:	d003      	beq.n	8002176 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002172:	2b03      	cmp	r3, #3
 8002174:	d107      	bne.n	8002186 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002176:	4b3f      	ldr	r3, [pc, #252]	; (8002274 <HAL_RCC_ClockConfig+0x1bc>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d109      	bne.n	8002196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e06f      	b.n	8002266 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002186:	4b3b      	ldr	r3, [pc, #236]	; (8002274 <HAL_RCC_ClockConfig+0x1bc>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e067      	b.n	8002266 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002196:	4b37      	ldr	r3, [pc, #220]	; (8002274 <HAL_RCC_ClockConfig+0x1bc>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f023 0203 	bic.w	r2, r3, #3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	4934      	ldr	r1, [pc, #208]	; (8002274 <HAL_RCC_ClockConfig+0x1bc>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021a8:	f7ff f9d8 	bl	800155c <HAL_GetTick>
 80021ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ae:	e00a      	b.n	80021c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b0:	f7ff f9d4 	bl	800155c <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80021be:	4293      	cmp	r3, r2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e04f      	b.n	8002266 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c6:	4b2b      	ldr	r3, [pc, #172]	; (8002274 <HAL_RCC_ClockConfig+0x1bc>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 020c 	and.w	r2, r3, #12
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d1eb      	bne.n	80021b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021d8:	4b25      	ldr	r3, [pc, #148]	; (8002270 <HAL_RCC_ClockConfig+0x1b8>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d20c      	bcs.n	8002200 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e6:	4b22      	ldr	r3, [pc, #136]	; (8002270 <HAL_RCC_ClockConfig+0x1b8>)
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ee:	4b20      	ldr	r3, [pc, #128]	; (8002270 <HAL_RCC_ClockConfig+0x1b8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d001      	beq.n	8002200 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e032      	b.n	8002266 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	2b00      	cmp	r3, #0
 800220a:	d008      	beq.n	800221e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800220c:	4b19      	ldr	r3, [pc, #100]	; (8002274 <HAL_RCC_ClockConfig+0x1bc>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	4916      	ldr	r1, [pc, #88]	; (8002274 <HAL_RCC_ClockConfig+0x1bc>)
 800221a:	4313      	orrs	r3, r2
 800221c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	2b00      	cmp	r3, #0
 8002228:	d009      	beq.n	800223e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800222a:	4b12      	ldr	r3, [pc, #72]	; (8002274 <HAL_RCC_ClockConfig+0x1bc>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	490e      	ldr	r1, [pc, #56]	; (8002274 <HAL_RCC_ClockConfig+0x1bc>)
 800223a:	4313      	orrs	r3, r2
 800223c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800223e:	f000 f821 	bl	8002284 <HAL_RCC_GetSysClockFreq>
 8002242:	4602      	mov	r2, r0
 8002244:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	091b      	lsrs	r3, r3, #4
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	490a      	ldr	r1, [pc, #40]	; (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 8002250:	5ccb      	ldrb	r3, [r1, r3]
 8002252:	fa22 f303 	lsr.w	r3, r2, r3
 8002256:	4a09      	ldr	r2, [pc, #36]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002258:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800225a:	4b09      	ldr	r3, [pc, #36]	; (8002280 <HAL_RCC_ClockConfig+0x1c8>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe fea8 	bl	8000fb4 <HAL_InitTick>

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40023c00 	.word	0x40023c00
 8002274:	40023800 	.word	0x40023800
 8002278:	08006e24 	.word	0x08006e24
 800227c:	20000008 	.word	0x20000008
 8002280:	20000010 	.word	0x20000010

08002284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002284:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002288:	b084      	sub	sp, #16
 800228a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800228c:	2300      	movs	r3, #0
 800228e:	607b      	str	r3, [r7, #4]
 8002290:	2300      	movs	r3, #0
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	2300      	movs	r3, #0
 8002296:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800229c:	4b67      	ldr	r3, [pc, #412]	; (800243c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 030c 	and.w	r3, r3, #12
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	d00d      	beq.n	80022c4 <HAL_RCC_GetSysClockFreq+0x40>
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	f200 80bd 	bhi.w	8002428 <HAL_RCC_GetSysClockFreq+0x1a4>
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d002      	beq.n	80022b8 <HAL_RCC_GetSysClockFreq+0x34>
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d003      	beq.n	80022be <HAL_RCC_GetSysClockFreq+0x3a>
 80022b6:	e0b7      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022b8:	4b61      	ldr	r3, [pc, #388]	; (8002440 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80022ba:	60bb      	str	r3, [r7, #8]
       break;
 80022bc:	e0b7      	b.n	800242e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022be:	4b61      	ldr	r3, [pc, #388]	; (8002444 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80022c0:	60bb      	str	r3, [r7, #8]
      break;
 80022c2:	e0b4      	b.n	800242e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022c4:	4b5d      	ldr	r3, [pc, #372]	; (800243c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022ce:	4b5b      	ldr	r3, [pc, #364]	; (800243c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d04d      	beq.n	8002376 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022da:	4b58      	ldr	r3, [pc, #352]	; (800243c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	099b      	lsrs	r3, r3, #6
 80022e0:	461a      	mov	r2, r3
 80022e2:	f04f 0300 	mov.w	r3, #0
 80022e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80022ea:	f04f 0100 	mov.w	r1, #0
 80022ee:	ea02 0800 	and.w	r8, r2, r0
 80022f2:	ea03 0901 	and.w	r9, r3, r1
 80022f6:	4640      	mov	r0, r8
 80022f8:	4649      	mov	r1, r9
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	f04f 0300 	mov.w	r3, #0
 8002302:	014b      	lsls	r3, r1, #5
 8002304:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002308:	0142      	lsls	r2, r0, #5
 800230a:	4610      	mov	r0, r2
 800230c:	4619      	mov	r1, r3
 800230e:	ebb0 0008 	subs.w	r0, r0, r8
 8002312:	eb61 0109 	sbc.w	r1, r1, r9
 8002316:	f04f 0200 	mov.w	r2, #0
 800231a:	f04f 0300 	mov.w	r3, #0
 800231e:	018b      	lsls	r3, r1, #6
 8002320:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002324:	0182      	lsls	r2, r0, #6
 8002326:	1a12      	subs	r2, r2, r0
 8002328:	eb63 0301 	sbc.w	r3, r3, r1
 800232c:	f04f 0000 	mov.w	r0, #0
 8002330:	f04f 0100 	mov.w	r1, #0
 8002334:	00d9      	lsls	r1, r3, #3
 8002336:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800233a:	00d0      	lsls	r0, r2, #3
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	eb12 0208 	adds.w	r2, r2, r8
 8002344:	eb43 0309 	adc.w	r3, r3, r9
 8002348:	f04f 0000 	mov.w	r0, #0
 800234c:	f04f 0100 	mov.w	r1, #0
 8002350:	0259      	lsls	r1, r3, #9
 8002352:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002356:	0250      	lsls	r0, r2, #9
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	4610      	mov	r0, r2
 800235e:	4619      	mov	r1, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	461a      	mov	r2, r3
 8002364:	f04f 0300 	mov.w	r3, #0
 8002368:	f7fd ff44 	bl	80001f4 <__aeabi_uldivmod>
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	4613      	mov	r3, r2
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	e04a      	b.n	800240c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002376:	4b31      	ldr	r3, [pc, #196]	; (800243c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	099b      	lsrs	r3, r3, #6
 800237c:	461a      	mov	r2, r3
 800237e:	f04f 0300 	mov.w	r3, #0
 8002382:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002386:	f04f 0100 	mov.w	r1, #0
 800238a:	ea02 0400 	and.w	r4, r2, r0
 800238e:	ea03 0501 	and.w	r5, r3, r1
 8002392:	4620      	mov	r0, r4
 8002394:	4629      	mov	r1, r5
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	f04f 0300 	mov.w	r3, #0
 800239e:	014b      	lsls	r3, r1, #5
 80023a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80023a4:	0142      	lsls	r2, r0, #5
 80023a6:	4610      	mov	r0, r2
 80023a8:	4619      	mov	r1, r3
 80023aa:	1b00      	subs	r0, r0, r4
 80023ac:	eb61 0105 	sbc.w	r1, r1, r5
 80023b0:	f04f 0200 	mov.w	r2, #0
 80023b4:	f04f 0300 	mov.w	r3, #0
 80023b8:	018b      	lsls	r3, r1, #6
 80023ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80023be:	0182      	lsls	r2, r0, #6
 80023c0:	1a12      	subs	r2, r2, r0
 80023c2:	eb63 0301 	sbc.w	r3, r3, r1
 80023c6:	f04f 0000 	mov.w	r0, #0
 80023ca:	f04f 0100 	mov.w	r1, #0
 80023ce:	00d9      	lsls	r1, r3, #3
 80023d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80023d4:	00d0      	lsls	r0, r2, #3
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	1912      	adds	r2, r2, r4
 80023dc:	eb45 0303 	adc.w	r3, r5, r3
 80023e0:	f04f 0000 	mov.w	r0, #0
 80023e4:	f04f 0100 	mov.w	r1, #0
 80023e8:	0299      	lsls	r1, r3, #10
 80023ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80023ee:	0290      	lsls	r0, r2, #10
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4610      	mov	r0, r2
 80023f6:	4619      	mov	r1, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	461a      	mov	r2, r3
 80023fc:	f04f 0300 	mov.w	r3, #0
 8002400:	f7fd fef8 	bl	80001f4 <__aeabi_uldivmod>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	4613      	mov	r3, r2
 800240a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	0c1b      	lsrs	r3, r3, #16
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	3301      	adds	r3, #1
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	fbb2 f3f3 	udiv	r3, r2, r3
 8002424:	60bb      	str	r3, [r7, #8]
      break;
 8002426:	e002      	b.n	800242e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002428:	4b05      	ldr	r3, [pc, #20]	; (8002440 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800242a:	60bb      	str	r3, [r7, #8]
      break;
 800242c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800242e:	68bb      	ldr	r3, [r7, #8]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800243a:	bf00      	nop
 800243c:	40023800 	.word	0x40023800
 8002440:	00f42400 	.word	0x00f42400
 8002444:	007a1200 	.word	0x007a1200

08002448 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800244c:	4b03      	ldr	r3, [pc, #12]	; (800245c <HAL_RCC_GetHCLKFreq+0x14>)
 800244e:	681b      	ldr	r3, [r3, #0]
}
 8002450:	4618      	mov	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	20000008 	.word	0x20000008

08002460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002464:	f7ff fff0 	bl	8002448 <HAL_RCC_GetHCLKFreq>
 8002468:	4602      	mov	r2, r0
 800246a:	4b05      	ldr	r3, [pc, #20]	; (8002480 <HAL_RCC_GetPCLK1Freq+0x20>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	0a9b      	lsrs	r3, r3, #10
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	4903      	ldr	r1, [pc, #12]	; (8002484 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002476:	5ccb      	ldrb	r3, [r1, r3]
 8002478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800247c:	4618      	mov	r0, r3
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40023800 	.word	0x40023800
 8002484:	08006e34 	.word	0x08006e34

08002488 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800248c:	f7ff ffdc 	bl	8002448 <HAL_RCC_GetHCLKFreq>
 8002490:	4602      	mov	r2, r0
 8002492:	4b05      	ldr	r3, [pc, #20]	; (80024a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	0b5b      	lsrs	r3, r3, #13
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	4903      	ldr	r1, [pc, #12]	; (80024ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800249e:	5ccb      	ldrb	r3, [r1, r3]
 80024a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40023800 	.word	0x40023800
 80024ac:	08006e34 	.word	0x08006e34

080024b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	220f      	movs	r2, #15
 80024be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80024c0:	4b12      	ldr	r3, [pc, #72]	; (800250c <HAL_RCC_GetClockConfig+0x5c>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 0203 	and.w	r2, r3, #3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80024cc:	4b0f      	ldr	r3, [pc, #60]	; (800250c <HAL_RCC_GetClockConfig+0x5c>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80024d8:	4b0c      	ldr	r3, [pc, #48]	; (800250c <HAL_RCC_GetClockConfig+0x5c>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80024e4:	4b09      	ldr	r3, [pc, #36]	; (800250c <HAL_RCC_GetClockConfig+0x5c>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	08db      	lsrs	r3, r3, #3
 80024ea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80024f2:	4b07      	ldr	r3, [pc, #28]	; (8002510 <HAL_RCC_GetClockConfig+0x60>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0207 	and.w	r2, r3, #7
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	601a      	str	r2, [r3, #0]
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	40023800 	.word	0x40023800
 8002510:	40023c00 	.word	0x40023c00

08002514 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b00      	cmp	r3, #0
 800252e:	d105      	bne.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002538:	2b00      	cmp	r3, #0
 800253a:	d035      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800253c:	4b62      	ldr	r3, [pc, #392]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002542:	f7ff f80b 	bl	800155c <HAL_GetTick>
 8002546:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002548:	e008      	b.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800254a:	f7ff f807 	bl	800155c <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e0b0      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800255c:	4b5b      	ldr	r3, [pc, #364]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1f0      	bne.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	019a      	lsls	r2, r3, #6
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	071b      	lsls	r3, r3, #28
 8002574:	4955      	ldr	r1, [pc, #340]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002576:	4313      	orrs	r3, r2
 8002578:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800257c:	4b52      	ldr	r3, [pc, #328]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800257e:	2201      	movs	r2, #1
 8002580:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002582:	f7fe ffeb 	bl	800155c <HAL_GetTick>
 8002586:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002588:	e008      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800258a:	f7fe ffe7 	bl	800155c <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e090      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800259c:	4b4b      	ldr	r3, [pc, #300]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0f0      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 8083 	beq.w	80026bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	4b44      	ldr	r3, [pc, #272]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	4a43      	ldr	r2, [pc, #268]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80025c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c4:	6413      	str	r3, [r2, #64]	; 0x40
 80025c6:	4b41      	ldr	r3, [pc, #260]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80025d2:	4b3f      	ldr	r3, [pc, #252]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a3e      	ldr	r2, [pc, #248]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025dc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025de:	f7fe ffbd 	bl	800155c <HAL_GetTick>
 80025e2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80025e4:	e008      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80025e6:	f7fe ffb9 	bl	800155c <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e062      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80025f8:	4b35      	ldr	r3, [pc, #212]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0f0      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002604:	4b31      	ldr	r3, [pc, #196]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002608:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800260c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d02f      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	429a      	cmp	r2, r3
 8002620:	d028      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002622:	4b2a      	ldr	r3, [pc, #168]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002626:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800262a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800262c:	4b29      	ldr	r3, [pc, #164]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800262e:	2201      	movs	r2, #1
 8002630:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002632:	4b28      	ldr	r3, [pc, #160]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002638:	4a24      	ldr	r2, [pc, #144]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800263e:	4b23      	ldr	r3, [pc, #140]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b01      	cmp	r3, #1
 8002648:	d114      	bne.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800264a:	f7fe ff87 	bl	800155c <HAL_GetTick>
 800264e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002650:	e00a      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002652:	f7fe ff83 	bl	800155c <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002660:	4293      	cmp	r3, r2
 8002662:	d901      	bls.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e02a      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002668:	4b18      	ldr	r3, [pc, #96]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800266a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0ee      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800267c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002680:	d10d      	bne.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002682:	4b12      	ldr	r3, [pc, #72]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002696:	490d      	ldr	r1, [pc, #52]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002698:	4313      	orrs	r3, r2
 800269a:	608b      	str	r3, [r1, #8]
 800269c:	e005      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x196>
 800269e:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	4a0a      	ldr	r2, [pc, #40]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80026a4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80026a8:	6093      	str	r3, [r2, #8]
 80026aa:	4b08      	ldr	r3, [pc, #32]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80026ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026b6:	4905      	ldr	r1, [pc, #20]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	42470068 	.word	0x42470068
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40007000 	.word	0x40007000
 80026d4:	42470e40 	.word	0x42470e40

080026d8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e083      	b.n	80027f2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	7f5b      	ldrb	r3, [r3, #29]
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d105      	bne.n	8002700 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7fe fbe0 	bl	8000ec0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	22ca      	movs	r2, #202	; 0xca
 800270c:	625a      	str	r2, [r3, #36]	; 0x24
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2253      	movs	r2, #83	; 0x53
 8002714:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f897 	bl	800284a <RTC_EnterInitMode>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d008      	beq.n	8002734 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	22ff      	movs	r2, #255	; 0xff
 8002728:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2204      	movs	r2, #4
 800272e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e05e      	b.n	80027f2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6812      	ldr	r2, [r2, #0]
 800273e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002742:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002746:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6899      	ldr	r1, [r3, #8]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	431a      	orrs	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	68d2      	ldr	r2, [r2, #12]
 800276e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6919      	ldr	r1, [r3, #16]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	041a      	lsls	r2, r3, #16
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002792:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 0320 	and.w	r3, r3, #32
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10e      	bne.n	80027c0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f829 	bl	80027fa <HAL_RTC_WaitForSynchro>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d008      	beq.n	80027c0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	22ff      	movs	r2, #255	; 0xff
 80027b4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2204      	movs	r2, #4
 80027ba:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e018      	b.n	80027f2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027ce:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	699a      	ldr	r2, [r3, #24]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	22ff      	movs	r2, #255	; 0xff
 80027e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80027f0:	2300      	movs	r3, #0
  }
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b084      	sub	sp, #16
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002802:	2300      	movs	r3, #0
 8002804:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68da      	ldr	r2, [r3, #12]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002814:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002816:	f7fe fea1 	bl	800155c <HAL_GetTick>
 800281a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800281c:	e009      	b.n	8002832 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800281e:	f7fe fe9d 	bl	800155c <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800282c:	d901      	bls.n	8002832 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e007      	b.n	8002842 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f003 0320 	and.w	r3, r3, #32
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0ee      	beq.n	800281e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b084      	sub	sp, #16
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002860:	2b00      	cmp	r3, #0
 8002862:	d119      	bne.n	8002898 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f04f 32ff 	mov.w	r2, #4294967295
 800286c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800286e:	f7fe fe75 	bl	800155c <HAL_GetTick>
 8002872:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002874:	e009      	b.n	800288a <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002876:	f7fe fe71 	bl	800155c <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002884:	d901      	bls.n	800288a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e007      	b.n	800289a <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0ee      	beq.n	8002876 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b082      	sub	sp, #8
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e041      	b.n	8002938 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d106      	bne.n	80028ce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 f839 	bl	8002940 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2202      	movs	r2, #2
 80028d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3304      	adds	r3, #4
 80028de:	4619      	mov	r1, r3
 80028e0:	4610      	mov	r0, r2
 80028e2:	f000 f9d7 	bl	8002c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b01      	cmp	r3, #1
 8002966:	d001      	beq.n	800296c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e04e      	b.n	8002a0a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a23      	ldr	r2, [pc, #140]	; (8002a18 <HAL_TIM_Base_Start_IT+0xc4>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d022      	beq.n	80029d4 <HAL_TIM_Base_Start_IT+0x80>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002996:	d01d      	beq.n	80029d4 <HAL_TIM_Base_Start_IT+0x80>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a1f      	ldr	r2, [pc, #124]	; (8002a1c <HAL_TIM_Base_Start_IT+0xc8>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d018      	beq.n	80029d4 <HAL_TIM_Base_Start_IT+0x80>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a1e      	ldr	r2, [pc, #120]	; (8002a20 <HAL_TIM_Base_Start_IT+0xcc>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d013      	beq.n	80029d4 <HAL_TIM_Base_Start_IT+0x80>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a1c      	ldr	r2, [pc, #112]	; (8002a24 <HAL_TIM_Base_Start_IT+0xd0>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d00e      	beq.n	80029d4 <HAL_TIM_Base_Start_IT+0x80>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a1b      	ldr	r2, [pc, #108]	; (8002a28 <HAL_TIM_Base_Start_IT+0xd4>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d009      	beq.n	80029d4 <HAL_TIM_Base_Start_IT+0x80>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a19      	ldr	r2, [pc, #100]	; (8002a2c <HAL_TIM_Base_Start_IT+0xd8>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d004      	beq.n	80029d4 <HAL_TIM_Base_Start_IT+0x80>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a18      	ldr	r2, [pc, #96]	; (8002a30 <HAL_TIM_Base_Start_IT+0xdc>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d111      	bne.n	80029f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2b06      	cmp	r3, #6
 80029e4:	d010      	beq.n	8002a08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 0201 	orr.w	r2, r2, #1
 80029f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f6:	e007      	b.n	8002a08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0201 	orr.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	40010000 	.word	0x40010000
 8002a1c:	40000400 	.word	0x40000400
 8002a20:	40000800 	.word	0x40000800
 8002a24:	40000c00 	.word	0x40000c00
 8002a28:	40010400 	.word	0x40010400
 8002a2c:	40014000 	.word	0x40014000
 8002a30:	40001800 	.word	0x40001800

08002a34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d122      	bne.n	8002a90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d11b      	bne.n	8002a90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f06f 0202 	mvn.w	r2, #2
 8002a60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f8ee 	bl	8002c58 <HAL_TIM_IC_CaptureCallback>
 8002a7c:	e005      	b.n	8002a8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f8e0 	bl	8002c44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f8f1 	bl	8002c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	f003 0304 	and.w	r3, r3, #4
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d122      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d11b      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f06f 0204 	mvn.w	r2, #4
 8002ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2202      	movs	r2, #2
 8002aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f8c4 	bl	8002c58 <HAL_TIM_IC_CaptureCallback>
 8002ad0:	e005      	b.n	8002ade <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f8b6 	bl	8002c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f8c7 	bl	8002c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d122      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f003 0308 	and.w	r3, r3, #8
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d11b      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f06f 0208 	mvn.w	r2, #8
 8002b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2204      	movs	r2, #4
 8002b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f89a 	bl	8002c58 <HAL_TIM_IC_CaptureCallback>
 8002b24:	e005      	b.n	8002b32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f88c 	bl	8002c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 f89d 	bl	8002c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	f003 0310 	and.w	r3, r3, #16
 8002b42:	2b10      	cmp	r3, #16
 8002b44:	d122      	bne.n	8002b8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b10      	cmp	r3, #16
 8002b52:	d11b      	bne.n	8002b8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f06f 0210 	mvn.w	r2, #16
 8002b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2208      	movs	r2, #8
 8002b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f870 	bl	8002c58 <HAL_TIM_IC_CaptureCallback>
 8002b78:	e005      	b.n	8002b86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f862 	bl	8002c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f873 	bl	8002c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d10e      	bne.n	8002bb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d107      	bne.n	8002bb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f06f 0201 	mvn.w	r2, #1
 8002bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7fe f944 	bl	8000e40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc2:	2b80      	cmp	r3, #128	; 0x80
 8002bc4:	d10e      	bne.n	8002be4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd0:	2b80      	cmp	r3, #128	; 0x80
 8002bd2:	d107      	bne.n	8002be4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f902 	bl	8002de8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bee:	2b40      	cmp	r3, #64	; 0x40
 8002bf0:	d10e      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfc:	2b40      	cmp	r3, #64	; 0x40
 8002bfe:	d107      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f838 	bl	8002c80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	f003 0320 	and.w	r3, r3, #32
 8002c1a:	2b20      	cmp	r3, #32
 8002c1c:	d10e      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f003 0320 	and.w	r3, r3, #32
 8002c28:	2b20      	cmp	r3, #32
 8002c2a:	d107      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f06f 0220 	mvn.w	r2, #32
 8002c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f8cc 	bl	8002dd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c3c:	bf00      	nop
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a40      	ldr	r2, [pc, #256]	; (8002da8 <TIM_Base_SetConfig+0x114>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d013      	beq.n	8002cd4 <TIM_Base_SetConfig+0x40>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb2:	d00f      	beq.n	8002cd4 <TIM_Base_SetConfig+0x40>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a3d      	ldr	r2, [pc, #244]	; (8002dac <TIM_Base_SetConfig+0x118>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d00b      	beq.n	8002cd4 <TIM_Base_SetConfig+0x40>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a3c      	ldr	r2, [pc, #240]	; (8002db0 <TIM_Base_SetConfig+0x11c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d007      	beq.n	8002cd4 <TIM_Base_SetConfig+0x40>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a3b      	ldr	r2, [pc, #236]	; (8002db4 <TIM_Base_SetConfig+0x120>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d003      	beq.n	8002cd4 <TIM_Base_SetConfig+0x40>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a3a      	ldr	r2, [pc, #232]	; (8002db8 <TIM_Base_SetConfig+0x124>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d108      	bne.n	8002ce6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a2f      	ldr	r2, [pc, #188]	; (8002da8 <TIM_Base_SetConfig+0x114>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d02b      	beq.n	8002d46 <TIM_Base_SetConfig+0xb2>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf4:	d027      	beq.n	8002d46 <TIM_Base_SetConfig+0xb2>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a2c      	ldr	r2, [pc, #176]	; (8002dac <TIM_Base_SetConfig+0x118>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d023      	beq.n	8002d46 <TIM_Base_SetConfig+0xb2>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a2b      	ldr	r2, [pc, #172]	; (8002db0 <TIM_Base_SetConfig+0x11c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d01f      	beq.n	8002d46 <TIM_Base_SetConfig+0xb2>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a2a      	ldr	r2, [pc, #168]	; (8002db4 <TIM_Base_SetConfig+0x120>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d01b      	beq.n	8002d46 <TIM_Base_SetConfig+0xb2>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a29      	ldr	r2, [pc, #164]	; (8002db8 <TIM_Base_SetConfig+0x124>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d017      	beq.n	8002d46 <TIM_Base_SetConfig+0xb2>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a28      	ldr	r2, [pc, #160]	; (8002dbc <TIM_Base_SetConfig+0x128>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d013      	beq.n	8002d46 <TIM_Base_SetConfig+0xb2>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a27      	ldr	r2, [pc, #156]	; (8002dc0 <TIM_Base_SetConfig+0x12c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d00f      	beq.n	8002d46 <TIM_Base_SetConfig+0xb2>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a26      	ldr	r2, [pc, #152]	; (8002dc4 <TIM_Base_SetConfig+0x130>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d00b      	beq.n	8002d46 <TIM_Base_SetConfig+0xb2>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a25      	ldr	r2, [pc, #148]	; (8002dc8 <TIM_Base_SetConfig+0x134>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d007      	beq.n	8002d46 <TIM_Base_SetConfig+0xb2>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a24      	ldr	r2, [pc, #144]	; (8002dcc <TIM_Base_SetConfig+0x138>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d003      	beq.n	8002d46 <TIM_Base_SetConfig+0xb2>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a23      	ldr	r2, [pc, #140]	; (8002dd0 <TIM_Base_SetConfig+0x13c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d108      	bne.n	8002d58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a0a      	ldr	r2, [pc, #40]	; (8002da8 <TIM_Base_SetConfig+0x114>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d003      	beq.n	8002d8c <TIM_Base_SetConfig+0xf8>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a0c      	ldr	r2, [pc, #48]	; (8002db8 <TIM_Base_SetConfig+0x124>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d103      	bne.n	8002d94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	691a      	ldr	r2, [r3, #16]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	615a      	str	r2, [r3, #20]
}
 8002d9a:	bf00      	nop
 8002d9c:	3714      	adds	r7, #20
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40010000 	.word	0x40010000
 8002dac:	40000400 	.word	0x40000400
 8002db0:	40000800 	.word	0x40000800
 8002db4:	40000c00 	.word	0x40000c00
 8002db8:	40010400 	.word	0x40010400
 8002dbc:	40014000 	.word	0x40014000
 8002dc0:	40014400 	.word	0x40014400
 8002dc4:	40014800 	.word	0x40014800
 8002dc8:	40001800 	.word	0x40001800
 8002dcc:	40001c00 	.word	0x40001c00
 8002dd0:	40002000 	.word	0x40002000

08002dd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e03f      	b.n	8002e8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d106      	bne.n	8002e28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7fe f876 	bl	8000f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2224      	movs	r2, #36	; 0x24
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68da      	ldr	r2, [r3, #12]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 fddb 	bl	80039fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	691a      	ldr	r2, [r3, #16]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	695a      	ldr	r2, [r3, #20]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68da      	ldr	r2, [r3, #12]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2220      	movs	r2, #32
 8002e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b08a      	sub	sp, #40	; 0x28
 8002e9a:	af02      	add	r7, sp, #8
 8002e9c:	60f8      	str	r0, [r7, #12]
 8002e9e:	60b9      	str	r1, [r7, #8]
 8002ea0:	603b      	str	r3, [r7, #0]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b20      	cmp	r3, #32
 8002eb4:	d17c      	bne.n	8002fb0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d002      	beq.n	8002ec2 <HAL_UART_Transmit+0x2c>
 8002ebc:	88fb      	ldrh	r3, [r7, #6]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e075      	b.n	8002fb2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_UART_Transmit+0x3e>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	e06e      	b.n	8002fb2 <HAL_UART_Transmit+0x11c>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2221      	movs	r2, #33	; 0x21
 8002ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eea:	f7fe fb37 	bl	800155c <HAL_GetTick>
 8002eee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	88fa      	ldrh	r2, [r7, #6]
 8002ef4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	88fa      	ldrh	r2, [r7, #6]
 8002efa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f04:	d108      	bne.n	8002f18 <HAL_UART_Transmit+0x82>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d104      	bne.n	8002f18 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	61bb      	str	r3, [r7, #24]
 8002f16:	e003      	b.n	8002f20 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002f28:	e02a      	b.n	8002f80 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	2200      	movs	r2, #0
 8002f32:	2180      	movs	r1, #128	; 0x80
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 fb1f 	bl	8003578 <UART_WaitOnFlagUntilTimeout>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e036      	b.n	8002fb2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10b      	bne.n	8002f62 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	3302      	adds	r3, #2
 8002f5e:	61bb      	str	r3, [r7, #24]
 8002f60:	e007      	b.n	8002f72 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	781a      	ldrb	r2, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1cf      	bne.n	8002f2a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	2200      	movs	r2, #0
 8002f92:	2140      	movs	r1, #64	; 0x40
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f000 faef 	bl	8003578 <UART_WaitOnFlagUntilTimeout>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e006      	b.n	8002fb2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	e000      	b.n	8002fb2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002fb0:	2302      	movs	r3, #2
  }
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3720      	adds	r7, #32
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	60f8      	str	r0, [r7, #12]
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b20      	cmp	r3, #32
 8002fd2:	d11d      	bne.n	8003010 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d002      	beq.n	8002fe0 <HAL_UART_Receive_IT+0x26>
 8002fda:	88fb      	ldrh	r3, [r7, #6]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e016      	b.n	8003012 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <HAL_UART_Receive_IT+0x38>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e00f      	b.n	8003012 <HAL_UART_Receive_IT+0x58>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003000:	88fb      	ldrh	r3, [r7, #6]
 8003002:	461a      	mov	r2, r3
 8003004:	68b9      	ldr	r1, [r7, #8]
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 fb24 	bl	8003654 <UART_Start_Receive_IT>
 800300c:	4603      	mov	r3, r0
 800300e:	e000      	b.n	8003012 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003010:	2302      	movs	r3, #2
  }
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
	...

0800301c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b0ba      	sub	sp, #232	; 0xe8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003042:	2300      	movs	r3, #0
 8003044:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003048:	2300      	movs	r3, #0
 800304a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800304e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800305a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10f      	bne.n	8003082 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003066:	f003 0320 	and.w	r3, r3, #32
 800306a:	2b00      	cmp	r3, #0
 800306c:	d009      	beq.n	8003082 <HAL_UART_IRQHandler+0x66>
 800306e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003072:	f003 0320 	and.w	r3, r3, #32
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 fc03 	bl	8003886 <UART_Receive_IT>
      return;
 8003080:	e256      	b.n	8003530 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003082:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003086:	2b00      	cmp	r3, #0
 8003088:	f000 80de 	beq.w	8003248 <HAL_UART_IRQHandler+0x22c>
 800308c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b00      	cmp	r3, #0
 8003096:	d106      	bne.n	80030a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800309c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 80d1 	beq.w	8003248 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80030a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00b      	beq.n	80030ca <HAL_UART_IRQHandler+0xae>
 80030b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d005      	beq.n	80030ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f043 0201 	orr.w	r2, r3, #1
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ce:	f003 0304 	and.w	r3, r3, #4
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00b      	beq.n	80030ee <HAL_UART_IRQHandler+0xd2>
 80030d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d005      	beq.n	80030ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	f043 0202 	orr.w	r2, r3, #2
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00b      	beq.n	8003112 <HAL_UART_IRQHandler+0xf6>
 80030fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d005      	beq.n	8003112 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	f043 0204 	orr.w	r2, r3, #4
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003116:	f003 0308 	and.w	r3, r3, #8
 800311a:	2b00      	cmp	r3, #0
 800311c:	d011      	beq.n	8003142 <HAL_UART_IRQHandler+0x126>
 800311e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003122:	f003 0320 	and.w	r3, r3, #32
 8003126:	2b00      	cmp	r3, #0
 8003128:	d105      	bne.n	8003136 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800312a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d005      	beq.n	8003142 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	f043 0208 	orr.w	r2, r3, #8
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 81ed 	beq.w	8003526 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800314c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003150:	f003 0320 	and.w	r3, r3, #32
 8003154:	2b00      	cmp	r3, #0
 8003156:	d008      	beq.n	800316a <HAL_UART_IRQHandler+0x14e>
 8003158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800315c:	f003 0320 	and.w	r3, r3, #32
 8003160:	2b00      	cmp	r3, #0
 8003162:	d002      	beq.n	800316a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 fb8e 	bl	8003886 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003174:	2b40      	cmp	r3, #64	; 0x40
 8003176:	bf0c      	ite	eq
 8003178:	2301      	moveq	r3, #1
 800317a:	2300      	movne	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	f003 0308 	and.w	r3, r3, #8
 800318a:	2b00      	cmp	r3, #0
 800318c:	d103      	bne.n	8003196 <HAL_UART_IRQHandler+0x17a>
 800318e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003192:	2b00      	cmp	r3, #0
 8003194:	d04f      	beq.n	8003236 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 fa96 	bl	80036c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a6:	2b40      	cmp	r3, #64	; 0x40
 80031a8:	d141      	bne.n	800322e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	3314      	adds	r3, #20
 80031b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031b8:	e853 3f00 	ldrex	r3, [r3]
 80031bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80031c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	3314      	adds	r3, #20
 80031d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80031d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80031da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80031e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80031e6:	e841 2300 	strex	r3, r2, [r1]
 80031ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80031ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1d9      	bne.n	80031aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d013      	beq.n	8003226 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003202:	4a7d      	ldr	r2, [pc, #500]	; (80033f8 <HAL_UART_IRQHandler+0x3dc>)
 8003204:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320a:	4618      	mov	r0, r3
 800320c:	f7fe fb04 	bl	8001818 <HAL_DMA_Abort_IT>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d016      	beq.n	8003244 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003220:	4610      	mov	r0, r2
 8003222:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003224:	e00e      	b.n	8003244 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f990 	bl	800354c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800322c:	e00a      	b.n	8003244 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f98c 	bl	800354c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003234:	e006      	b.n	8003244 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f988 	bl	800354c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003242:	e170      	b.n	8003526 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003244:	bf00      	nop
    return;
 8003246:	e16e      	b.n	8003526 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324c:	2b01      	cmp	r3, #1
 800324e:	f040 814a 	bne.w	80034e6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003256:	f003 0310 	and.w	r3, r3, #16
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 8143 	beq.w	80034e6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003264:	f003 0310 	and.w	r3, r3, #16
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 813c 	beq.w	80034e6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800326e:	2300      	movs	r3, #0
 8003270:	60bb      	str	r3, [r7, #8]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	60bb      	str	r3, [r7, #8]
 8003282:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328e:	2b40      	cmp	r3, #64	; 0x40
 8003290:	f040 80b4 	bne.w	80033fc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 8140 	beq.w	800352a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032b2:	429a      	cmp	r2, r3
 80032b4:	f080 8139 	bcs.w	800352a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ca:	f000 8088 	beq.w	80033de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	330c      	adds	r3, #12
 80032d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032dc:	e853 3f00 	ldrex	r3, [r3]
 80032e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80032e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	330c      	adds	r3, #12
 80032f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80032fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003302:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003306:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800330a:	e841 2300 	strex	r3, r2, [r1]
 800330e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003312:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1d9      	bne.n	80032ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	3314      	adds	r3, #20
 8003320:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003322:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003324:	e853 3f00 	ldrex	r3, [r3]
 8003328:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800332a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800332c:	f023 0301 	bic.w	r3, r3, #1
 8003330:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	3314      	adds	r3, #20
 800333a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800333e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003342:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003344:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003346:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800334a:	e841 2300 	strex	r3, r2, [r1]
 800334e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003350:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1e1      	bne.n	800331a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	3314      	adds	r3, #20
 800335c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003360:	e853 3f00 	ldrex	r3, [r3]
 8003364:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003366:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003368:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800336c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	3314      	adds	r3, #20
 8003376:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800337a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800337c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003380:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003382:	e841 2300 	strex	r3, r2, [r1]
 8003386:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003388:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1e3      	bne.n	8003356 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2220      	movs	r2, #32
 8003392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	330c      	adds	r3, #12
 80033a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033a6:	e853 3f00 	ldrex	r3, [r3]
 80033aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80033ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ae:	f023 0310 	bic.w	r3, r3, #16
 80033b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	330c      	adds	r3, #12
 80033bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80033c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80033c2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033c8:	e841 2300 	strex	r3, r2, [r1]
 80033cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80033ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1e3      	bne.n	800339c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d8:	4618      	mov	r0, r3
 80033da:	f7fe f9ad 	bl	8001738 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	4619      	mov	r1, r3
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f8b6 	bl	8003560 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80033f4:	e099      	b.n	800352a <HAL_UART_IRQHandler+0x50e>
 80033f6:	bf00      	nop
 80033f8:	0800378f 	.word	0x0800378f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003404:	b29b      	uxth	r3, r3
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003410:	b29b      	uxth	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	f000 808b 	beq.w	800352e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003418:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 8086 	beq.w	800352e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	330c      	adds	r3, #12
 8003428:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342c:	e853 3f00 	ldrex	r3, [r3]
 8003430:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003434:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003438:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	330c      	adds	r3, #12
 8003442:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003446:	647a      	str	r2, [r7, #68]	; 0x44
 8003448:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800344c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800344e:	e841 2300 	strex	r3, r2, [r1]
 8003452:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1e3      	bne.n	8003422 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	3314      	adds	r3, #20
 8003460:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003464:	e853 3f00 	ldrex	r3, [r3]
 8003468:	623b      	str	r3, [r7, #32]
   return(result);
 800346a:	6a3b      	ldr	r3, [r7, #32]
 800346c:	f023 0301 	bic.w	r3, r3, #1
 8003470:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	3314      	adds	r3, #20
 800347a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800347e:	633a      	str	r2, [r7, #48]	; 0x30
 8003480:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003482:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003486:	e841 2300 	strex	r3, r2, [r1]
 800348a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800348c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1e3      	bne.n	800345a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2220      	movs	r2, #32
 8003496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	330c      	adds	r3, #12
 80034a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	e853 3f00 	ldrex	r3, [r3]
 80034ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f023 0310 	bic.w	r3, r3, #16
 80034b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	330c      	adds	r3, #12
 80034c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80034c4:	61fa      	str	r2, [r7, #28]
 80034c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c8:	69b9      	ldr	r1, [r7, #24]
 80034ca:	69fa      	ldr	r2, [r7, #28]
 80034cc:	e841 2300 	strex	r3, r2, [r1]
 80034d0:	617b      	str	r3, [r7, #20]
   return(result);
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1e3      	bne.n	80034a0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034dc:	4619      	mov	r1, r3
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f83e 	bl	8003560 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034e4:	e023      	b.n	800352e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80034e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d009      	beq.n	8003506 <HAL_UART_IRQHandler+0x4ea>
 80034f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f959 	bl	80037b6 <UART_Transmit_IT>
    return;
 8003504:	e014      	b.n	8003530 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800350a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00e      	beq.n	8003530 <HAL_UART_IRQHandler+0x514>
 8003512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351a:	2b00      	cmp	r3, #0
 800351c:	d008      	beq.n	8003530 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f999 	bl	8003856 <UART_EndTransmit_IT>
    return;
 8003524:	e004      	b.n	8003530 <HAL_UART_IRQHandler+0x514>
    return;
 8003526:	bf00      	nop
 8003528:	e002      	b.n	8003530 <HAL_UART_IRQHandler+0x514>
      return;
 800352a:	bf00      	nop
 800352c:	e000      	b.n	8003530 <HAL_UART_IRQHandler+0x514>
      return;
 800352e:	bf00      	nop
  }
}
 8003530:	37e8      	adds	r7, #232	; 0xe8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop

08003538 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	460b      	mov	r3, r1
 800356a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b090      	sub	sp, #64	; 0x40
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	603b      	str	r3, [r7, #0]
 8003584:	4613      	mov	r3, r2
 8003586:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003588:	e050      	b.n	800362c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800358a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800358c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003590:	d04c      	beq.n	800362c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003594:	2b00      	cmp	r3, #0
 8003596:	d007      	beq.n	80035a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003598:	f7fd ffe0 	bl	800155c <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d241      	bcs.n	800362c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	330c      	adds	r3, #12
 80035ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b2:	e853 3f00 	ldrex	r3, [r3]
 80035b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	330c      	adds	r3, #12
 80035c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035c8:	637a      	str	r2, [r7, #52]	; 0x34
 80035ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035d0:	e841 2300 	strex	r3, r2, [r1]
 80035d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80035d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1e5      	bne.n	80035a8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	3314      	adds	r3, #20
 80035e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	e853 3f00 	ldrex	r3, [r3]
 80035ea:	613b      	str	r3, [r7, #16]
   return(result);
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	f023 0301 	bic.w	r3, r3, #1
 80035f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	3314      	adds	r3, #20
 80035fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035fc:	623a      	str	r2, [r7, #32]
 80035fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003600:	69f9      	ldr	r1, [r7, #28]
 8003602:	6a3a      	ldr	r2, [r7, #32]
 8003604:	e841 2300 	strex	r3, r2, [r1]
 8003608:	61bb      	str	r3, [r7, #24]
   return(result);
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1e5      	bne.n	80035dc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2220      	movs	r2, #32
 800361c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e00f      	b.n	800364c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	4013      	ands	r3, r2
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	429a      	cmp	r2, r3
 800363a:	bf0c      	ite	eq
 800363c:	2301      	moveq	r3, #1
 800363e:	2300      	movne	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	461a      	mov	r2, r3
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	429a      	cmp	r2, r3
 8003648:	d09f      	beq.n	800358a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3740      	adds	r7, #64	; 0x40
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	4613      	mov	r3, r2
 8003660:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	88fa      	ldrh	r2, [r7, #6]
 800366c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	88fa      	ldrh	r2, [r7, #6]
 8003672:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2222      	movs	r2, #34	; 0x22
 800367e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003698:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695a      	ldr	r2, [r3, #20]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f042 0201 	orr.w	r2, r2, #1
 80036a8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f042 0220 	orr.w	r2, r2, #32
 80036b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b095      	sub	sp, #84	; 0x54
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	330c      	adds	r3, #12
 80036d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036da:	e853 3f00 	ldrex	r3, [r3]
 80036de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80036e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	330c      	adds	r3, #12
 80036ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036f0:	643a      	str	r2, [r7, #64]	; 0x40
 80036f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80036f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036f8:	e841 2300 	strex	r3, r2, [r1]
 80036fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1e5      	bne.n	80036d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	3314      	adds	r3, #20
 800370a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370c:	6a3b      	ldr	r3, [r7, #32]
 800370e:	e853 3f00 	ldrex	r3, [r3]
 8003712:	61fb      	str	r3, [r7, #28]
   return(result);
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f023 0301 	bic.w	r3, r3, #1
 800371a:	64bb      	str	r3, [r7, #72]	; 0x48
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	3314      	adds	r3, #20
 8003722:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003724:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003726:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003728:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800372a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800372c:	e841 2300 	strex	r3, r2, [r1]
 8003730:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1e5      	bne.n	8003704 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373c:	2b01      	cmp	r3, #1
 800373e:	d119      	bne.n	8003774 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	330c      	adds	r3, #12
 8003746:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	e853 3f00 	ldrex	r3, [r3]
 800374e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	f023 0310 	bic.w	r3, r3, #16
 8003756:	647b      	str	r3, [r7, #68]	; 0x44
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	330c      	adds	r3, #12
 800375e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003760:	61ba      	str	r2, [r7, #24]
 8003762:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003764:	6979      	ldr	r1, [r7, #20]
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	e841 2300 	strex	r3, r2, [r1]
 800376c:	613b      	str	r3, [r7, #16]
   return(result);
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1e5      	bne.n	8003740 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003782:	bf00      	nop
 8003784:	3754      	adds	r7, #84	; 0x54
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b084      	sub	sp, #16
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f7ff fecf 	bl	800354c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037ae:	bf00      	nop
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037b6:	b480      	push	{r7}
 80037b8:	b085      	sub	sp, #20
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b21      	cmp	r3, #33	; 0x21
 80037c8:	d13e      	bne.n	8003848 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d2:	d114      	bne.n	80037fe <UART_Transmit_IT+0x48>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d110      	bne.n	80037fe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	881b      	ldrh	r3, [r3, #0]
 80037e6:	461a      	mov	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	1c9a      	adds	r2, r3, #2
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	621a      	str	r2, [r3, #32]
 80037fc:	e008      	b.n	8003810 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	1c59      	adds	r1, r3, #1
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	6211      	str	r1, [r2, #32]
 8003808:	781a      	ldrb	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003814:	b29b      	uxth	r3, r3
 8003816:	3b01      	subs	r3, #1
 8003818:	b29b      	uxth	r3, r3
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	4619      	mov	r1, r3
 800381e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003820:	2b00      	cmp	r3, #0
 8003822:	d10f      	bne.n	8003844 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68da      	ldr	r2, [r3, #12]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003832:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003842:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003844:	2300      	movs	r3, #0
 8003846:	e000      	b.n	800384a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003848:	2302      	movs	r3, #2
  }
}
 800384a:	4618      	mov	r0, r3
 800384c:	3714      	adds	r7, #20
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr

08003856 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b082      	sub	sp, #8
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800386c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2220      	movs	r2, #32
 8003872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7ff fe5e 	bl	8003538 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b08c      	sub	sp, #48	; 0x30
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b22      	cmp	r3, #34	; 0x22
 8003898:	f040 80ab 	bne.w	80039f2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038a4:	d117      	bne.n	80038d6 <UART_Receive_IT+0x50>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d113      	bne.n	80038d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80038ae:	2300      	movs	r3, #0
 80038b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	b29b      	uxth	r3, r3
 80038c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ce:	1c9a      	adds	r2, r3, #2
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	629a      	str	r2, [r3, #40]	; 0x28
 80038d4:	e026      	b.n	8003924 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80038dc:	2300      	movs	r3, #0
 80038de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038e8:	d007      	beq.n	80038fa <UART_Receive_IT+0x74>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10a      	bne.n	8003908 <UART_Receive_IT+0x82>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d106      	bne.n	8003908 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	b2da      	uxtb	r2, r3
 8003902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003904:	701a      	strb	r2, [r3, #0]
 8003906:	e008      	b.n	800391a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	b2db      	uxtb	r3, r3
 8003910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003914:	b2da      	uxtb	r2, r3
 8003916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003918:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391e:	1c5a      	adds	r2, r3, #1
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003928:	b29b      	uxth	r3, r3
 800392a:	3b01      	subs	r3, #1
 800392c:	b29b      	uxth	r3, r3
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	4619      	mov	r1, r3
 8003932:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003934:	2b00      	cmp	r3, #0
 8003936:	d15a      	bne.n	80039ee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0220 	bic.w	r2, r2, #32
 8003946:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003956:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695a      	ldr	r2, [r3, #20]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0201 	bic.w	r2, r2, #1
 8003966:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003974:	2b01      	cmp	r3, #1
 8003976:	d135      	bne.n	80039e4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	330c      	adds	r3, #12
 8003984:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	e853 3f00 	ldrex	r3, [r3]
 800398c:	613b      	str	r3, [r7, #16]
   return(result);
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	f023 0310 	bic.w	r3, r3, #16
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	330c      	adds	r3, #12
 800399c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399e:	623a      	str	r2, [r7, #32]
 80039a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a2:	69f9      	ldr	r1, [r7, #28]
 80039a4:	6a3a      	ldr	r2, [r7, #32]
 80039a6:	e841 2300 	strex	r3, r2, [r1]
 80039aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1e5      	bne.n	800397e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0310 	and.w	r3, r3, #16
 80039bc:	2b10      	cmp	r3, #16
 80039be:	d10a      	bne.n	80039d6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039c0:	2300      	movs	r3, #0
 80039c2:	60fb      	str	r3, [r7, #12]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039da:	4619      	mov	r1, r3
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7ff fdbf 	bl	8003560 <HAL_UARTEx_RxEventCallback>
 80039e2:	e002      	b.n	80039ea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f7fd f9e1 	bl	8000dac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	e002      	b.n	80039f4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80039ee:	2300      	movs	r3, #0
 80039f0:	e000      	b.n	80039f4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80039f2:	2302      	movs	r3, #2
  }
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3730      	adds	r7, #48	; 0x30
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a00:	b09f      	sub	sp, #124	; 0x7c
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a12:	68d9      	ldr	r1, [r3, #12]
 8003a14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	ea40 0301 	orr.w	r3, r0, r1
 8003a1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a20:	689a      	ldr	r2, [r3, #8]
 8003a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	431a      	orrs	r2, r3
 8003a28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a40:	f021 010c 	bic.w	r1, r1, #12
 8003a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a4a:	430b      	orrs	r3, r1
 8003a4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a5a:	6999      	ldr	r1, [r3, #24]
 8003a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	ea40 0301 	orr.w	r3, r0, r1
 8003a64:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	4bc5      	ldr	r3, [pc, #788]	; (8003d80 <UART_SetConfig+0x384>)
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d004      	beq.n	8003a7a <UART_SetConfig+0x7e>
 8003a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	4bc3      	ldr	r3, [pc, #780]	; (8003d84 <UART_SetConfig+0x388>)
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d103      	bne.n	8003a82 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a7a:	f7fe fd05 	bl	8002488 <HAL_RCC_GetPCLK2Freq>
 8003a7e:	6778      	str	r0, [r7, #116]	; 0x74
 8003a80:	e002      	b.n	8003a88 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a82:	f7fe fced 	bl	8002460 <HAL_RCC_GetPCLK1Freq>
 8003a86:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a8a:	69db      	ldr	r3, [r3, #28]
 8003a8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a90:	f040 80b6 	bne.w	8003c00 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a96:	461c      	mov	r4, r3
 8003a98:	f04f 0500 	mov.w	r5, #0
 8003a9c:	4622      	mov	r2, r4
 8003a9e:	462b      	mov	r3, r5
 8003aa0:	1891      	adds	r1, r2, r2
 8003aa2:	6439      	str	r1, [r7, #64]	; 0x40
 8003aa4:	415b      	adcs	r3, r3
 8003aa6:	647b      	str	r3, [r7, #68]	; 0x44
 8003aa8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003aac:	1912      	adds	r2, r2, r4
 8003aae:	eb45 0303 	adc.w	r3, r5, r3
 8003ab2:	f04f 0000 	mov.w	r0, #0
 8003ab6:	f04f 0100 	mov.w	r1, #0
 8003aba:	00d9      	lsls	r1, r3, #3
 8003abc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ac0:	00d0      	lsls	r0, r2, #3
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	1911      	adds	r1, r2, r4
 8003ac8:	6639      	str	r1, [r7, #96]	; 0x60
 8003aca:	416b      	adcs	r3, r5
 8003acc:	667b      	str	r3, [r7, #100]	; 0x64
 8003ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	f04f 0300 	mov.w	r3, #0
 8003ad8:	1891      	adds	r1, r2, r2
 8003ada:	63b9      	str	r1, [r7, #56]	; 0x38
 8003adc:	415b      	adcs	r3, r3
 8003ade:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ae0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ae4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003ae8:	f7fc fb84 	bl	80001f4 <__aeabi_uldivmod>
 8003aec:	4602      	mov	r2, r0
 8003aee:	460b      	mov	r3, r1
 8003af0:	4ba5      	ldr	r3, [pc, #660]	; (8003d88 <UART_SetConfig+0x38c>)
 8003af2:	fba3 2302 	umull	r2, r3, r3, r2
 8003af6:	095b      	lsrs	r3, r3, #5
 8003af8:	011e      	lsls	r6, r3, #4
 8003afa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003afc:	461c      	mov	r4, r3
 8003afe:	f04f 0500 	mov.w	r5, #0
 8003b02:	4622      	mov	r2, r4
 8003b04:	462b      	mov	r3, r5
 8003b06:	1891      	adds	r1, r2, r2
 8003b08:	6339      	str	r1, [r7, #48]	; 0x30
 8003b0a:	415b      	adcs	r3, r3
 8003b0c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b0e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003b12:	1912      	adds	r2, r2, r4
 8003b14:	eb45 0303 	adc.w	r3, r5, r3
 8003b18:	f04f 0000 	mov.w	r0, #0
 8003b1c:	f04f 0100 	mov.w	r1, #0
 8003b20:	00d9      	lsls	r1, r3, #3
 8003b22:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b26:	00d0      	lsls	r0, r2, #3
 8003b28:	4602      	mov	r2, r0
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	1911      	adds	r1, r2, r4
 8003b2e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b30:	416b      	adcs	r3, r5
 8003b32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	461a      	mov	r2, r3
 8003b3a:	f04f 0300 	mov.w	r3, #0
 8003b3e:	1891      	adds	r1, r2, r2
 8003b40:	62b9      	str	r1, [r7, #40]	; 0x28
 8003b42:	415b      	adcs	r3, r3
 8003b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b4a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003b4e:	f7fc fb51 	bl	80001f4 <__aeabi_uldivmod>
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	4b8c      	ldr	r3, [pc, #560]	; (8003d88 <UART_SetConfig+0x38c>)
 8003b58:	fba3 1302 	umull	r1, r3, r3, r2
 8003b5c:	095b      	lsrs	r3, r3, #5
 8003b5e:	2164      	movs	r1, #100	; 0x64
 8003b60:	fb01 f303 	mul.w	r3, r1, r3
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	3332      	adds	r3, #50	; 0x32
 8003b6a:	4a87      	ldr	r2, [pc, #540]	; (8003d88 <UART_SetConfig+0x38c>)
 8003b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b70:	095b      	lsrs	r3, r3, #5
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b78:	441e      	add	r6, r3
 8003b7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f04f 0100 	mov.w	r1, #0
 8003b82:	4602      	mov	r2, r0
 8003b84:	460b      	mov	r3, r1
 8003b86:	1894      	adds	r4, r2, r2
 8003b88:	623c      	str	r4, [r7, #32]
 8003b8a:	415b      	adcs	r3, r3
 8003b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b92:	1812      	adds	r2, r2, r0
 8003b94:	eb41 0303 	adc.w	r3, r1, r3
 8003b98:	f04f 0400 	mov.w	r4, #0
 8003b9c:	f04f 0500 	mov.w	r5, #0
 8003ba0:	00dd      	lsls	r5, r3, #3
 8003ba2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ba6:	00d4      	lsls	r4, r2, #3
 8003ba8:	4622      	mov	r2, r4
 8003baa:	462b      	mov	r3, r5
 8003bac:	1814      	adds	r4, r2, r0
 8003bae:	653c      	str	r4, [r7, #80]	; 0x50
 8003bb0:	414b      	adcs	r3, r1
 8003bb2:	657b      	str	r3, [r7, #84]	; 0x54
 8003bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	f04f 0300 	mov.w	r3, #0
 8003bbe:	1891      	adds	r1, r2, r2
 8003bc0:	61b9      	str	r1, [r7, #24]
 8003bc2:	415b      	adcs	r3, r3
 8003bc4:	61fb      	str	r3, [r7, #28]
 8003bc6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003bce:	f7fc fb11 	bl	80001f4 <__aeabi_uldivmod>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4b6c      	ldr	r3, [pc, #432]	; (8003d88 <UART_SetConfig+0x38c>)
 8003bd8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bdc:	095b      	lsrs	r3, r3, #5
 8003bde:	2164      	movs	r1, #100	; 0x64
 8003be0:	fb01 f303 	mul.w	r3, r1, r3
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	3332      	adds	r3, #50	; 0x32
 8003bea:	4a67      	ldr	r2, [pc, #412]	; (8003d88 <UART_SetConfig+0x38c>)
 8003bec:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf0:	095b      	lsrs	r3, r3, #5
 8003bf2:	f003 0207 	and.w	r2, r3, #7
 8003bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4432      	add	r2, r6
 8003bfc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003bfe:	e0b9      	b.n	8003d74 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c02:	461c      	mov	r4, r3
 8003c04:	f04f 0500 	mov.w	r5, #0
 8003c08:	4622      	mov	r2, r4
 8003c0a:	462b      	mov	r3, r5
 8003c0c:	1891      	adds	r1, r2, r2
 8003c0e:	6139      	str	r1, [r7, #16]
 8003c10:	415b      	adcs	r3, r3
 8003c12:	617b      	str	r3, [r7, #20]
 8003c14:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003c18:	1912      	adds	r2, r2, r4
 8003c1a:	eb45 0303 	adc.w	r3, r5, r3
 8003c1e:	f04f 0000 	mov.w	r0, #0
 8003c22:	f04f 0100 	mov.w	r1, #0
 8003c26:	00d9      	lsls	r1, r3, #3
 8003c28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c2c:	00d0      	lsls	r0, r2, #3
 8003c2e:	4602      	mov	r2, r0
 8003c30:	460b      	mov	r3, r1
 8003c32:	eb12 0804 	adds.w	r8, r2, r4
 8003c36:	eb43 0905 	adc.w	r9, r3, r5
 8003c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f04f 0100 	mov.w	r1, #0
 8003c44:	f04f 0200 	mov.w	r2, #0
 8003c48:	f04f 0300 	mov.w	r3, #0
 8003c4c:	008b      	lsls	r3, r1, #2
 8003c4e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c52:	0082      	lsls	r2, r0, #2
 8003c54:	4640      	mov	r0, r8
 8003c56:	4649      	mov	r1, r9
 8003c58:	f7fc facc 	bl	80001f4 <__aeabi_uldivmod>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4b49      	ldr	r3, [pc, #292]	; (8003d88 <UART_SetConfig+0x38c>)
 8003c62:	fba3 2302 	umull	r2, r3, r3, r2
 8003c66:	095b      	lsrs	r3, r3, #5
 8003c68:	011e      	lsls	r6, r3, #4
 8003c6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f04f 0100 	mov.w	r1, #0
 8003c72:	4602      	mov	r2, r0
 8003c74:	460b      	mov	r3, r1
 8003c76:	1894      	adds	r4, r2, r2
 8003c78:	60bc      	str	r4, [r7, #8]
 8003c7a:	415b      	adcs	r3, r3
 8003c7c:	60fb      	str	r3, [r7, #12]
 8003c7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c82:	1812      	adds	r2, r2, r0
 8003c84:	eb41 0303 	adc.w	r3, r1, r3
 8003c88:	f04f 0400 	mov.w	r4, #0
 8003c8c:	f04f 0500 	mov.w	r5, #0
 8003c90:	00dd      	lsls	r5, r3, #3
 8003c92:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c96:	00d4      	lsls	r4, r2, #3
 8003c98:	4622      	mov	r2, r4
 8003c9a:	462b      	mov	r3, r5
 8003c9c:	1814      	adds	r4, r2, r0
 8003c9e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003ca0:	414b      	adcs	r3, r1
 8003ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f04f 0100 	mov.w	r1, #0
 8003cae:	f04f 0200 	mov.w	r2, #0
 8003cb2:	f04f 0300 	mov.w	r3, #0
 8003cb6:	008b      	lsls	r3, r1, #2
 8003cb8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003cbc:	0082      	lsls	r2, r0, #2
 8003cbe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003cc2:	f7fc fa97 	bl	80001f4 <__aeabi_uldivmod>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	460b      	mov	r3, r1
 8003cca:	4b2f      	ldr	r3, [pc, #188]	; (8003d88 <UART_SetConfig+0x38c>)
 8003ccc:	fba3 1302 	umull	r1, r3, r3, r2
 8003cd0:	095b      	lsrs	r3, r3, #5
 8003cd2:	2164      	movs	r1, #100	; 0x64
 8003cd4:	fb01 f303 	mul.w	r3, r1, r3
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	011b      	lsls	r3, r3, #4
 8003cdc:	3332      	adds	r3, #50	; 0x32
 8003cde:	4a2a      	ldr	r2, [pc, #168]	; (8003d88 <UART_SetConfig+0x38c>)
 8003ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce4:	095b      	lsrs	r3, r3, #5
 8003ce6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cea:	441e      	add	r6, r3
 8003cec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f04f 0100 	mov.w	r1, #0
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	1894      	adds	r4, r2, r2
 8003cfa:	603c      	str	r4, [r7, #0]
 8003cfc:	415b      	adcs	r3, r3
 8003cfe:	607b      	str	r3, [r7, #4]
 8003d00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d04:	1812      	adds	r2, r2, r0
 8003d06:	eb41 0303 	adc.w	r3, r1, r3
 8003d0a:	f04f 0400 	mov.w	r4, #0
 8003d0e:	f04f 0500 	mov.w	r5, #0
 8003d12:	00dd      	lsls	r5, r3, #3
 8003d14:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d18:	00d4      	lsls	r4, r2, #3
 8003d1a:	4622      	mov	r2, r4
 8003d1c:	462b      	mov	r3, r5
 8003d1e:	eb12 0a00 	adds.w	sl, r2, r0
 8003d22:	eb43 0b01 	adc.w	fp, r3, r1
 8003d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f04f 0100 	mov.w	r1, #0
 8003d30:	f04f 0200 	mov.w	r2, #0
 8003d34:	f04f 0300 	mov.w	r3, #0
 8003d38:	008b      	lsls	r3, r1, #2
 8003d3a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d3e:	0082      	lsls	r2, r0, #2
 8003d40:	4650      	mov	r0, sl
 8003d42:	4659      	mov	r1, fp
 8003d44:	f7fc fa56 	bl	80001f4 <__aeabi_uldivmod>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	4b0e      	ldr	r3, [pc, #56]	; (8003d88 <UART_SetConfig+0x38c>)
 8003d4e:	fba3 1302 	umull	r1, r3, r3, r2
 8003d52:	095b      	lsrs	r3, r3, #5
 8003d54:	2164      	movs	r1, #100	; 0x64
 8003d56:	fb01 f303 	mul.w	r3, r1, r3
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	011b      	lsls	r3, r3, #4
 8003d5e:	3332      	adds	r3, #50	; 0x32
 8003d60:	4a09      	ldr	r2, [pc, #36]	; (8003d88 <UART_SetConfig+0x38c>)
 8003d62:	fba2 2303 	umull	r2, r3, r2, r3
 8003d66:	095b      	lsrs	r3, r3, #5
 8003d68:	f003 020f 	and.w	r2, r3, #15
 8003d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4432      	add	r2, r6
 8003d72:	609a      	str	r2, [r3, #8]
}
 8003d74:	bf00      	nop
 8003d76:	377c      	adds	r7, #124	; 0x7c
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d7e:	bf00      	nop
 8003d80:	40011000 	.word	0x40011000
 8003d84:	40011400 	.word	0x40011400
 8003d88:	51eb851f 	.word	0x51eb851f

08003d8c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f103 0208 	add.w	r2, r3, #8
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f04f 32ff 	mov.w	r2, #4294967295
 8003da4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f103 0208 	add.w	r2, r3, #8
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f103 0208 	add.w	r2, r3, #8
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8003de6:	b480      	push	{r7}
 8003de8:	b085      	sub	sp, #20
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
 8003dee:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	601a      	str	r2, [r3, #0]
}
 8003e22:	bf00      	nop
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b085      	sub	sp, #20
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
 8003e36:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e44:	d103      	bne.n	8003e4e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	e00c      	b.n	8003e68 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	3308      	adds	r3, #8
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	e002      	b.n	8003e5c <vListInsert+0x2e>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	60fb      	str	r3, [r7, #12]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d2f6      	bcs.n	8003e56 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	1c5a      	adds	r2, r3, #1
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	601a      	str	r2, [r3, #0]
}
 8003e94:	bf00      	nop
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	6892      	ldr	r2, [r2, #8]
 8003eb6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6852      	ldr	r2, [r2, #4]
 8003ec0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d103      	bne.n	8003ed4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	1e5a      	subs	r2, r3, #1
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10a      	bne.n	8003f1e <xQueueGenericReset+0x2a>
        __asm volatile
 8003f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0c:	f383 8811 	msr	BASEPRI, r3
 8003f10:	f3bf 8f6f 	isb	sy
 8003f14:	f3bf 8f4f 	dsb	sy
 8003f18:	60bb      	str	r3, [r7, #8]
    }
 8003f1a:	bf00      	nop
 8003f1c:	e7fe      	b.n	8003f1c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8003f1e:	f002 fb0b 	bl	8006538 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2a:	68f9      	ldr	r1, [r7, #12]
 8003f2c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f2e:	fb01 f303 	mul.w	r3, r1, r3
 8003f32:	441a      	add	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	68f9      	ldr	r1, [r7, #12]
 8003f52:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f54:	fb01 f303 	mul.w	r3, r1, r3
 8003f58:	441a      	add	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	22ff      	movs	r2, #255	; 0xff
 8003f62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	22ff      	movs	r2, #255	; 0xff
 8003f6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d114      	bne.n	8003f9e <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d01a      	beq.n	8003fb2 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	3310      	adds	r3, #16
 8003f80:	4618      	mov	r0, r3
 8003f82:	f001 f921 	bl	80051c8 <xTaskRemoveFromEventList>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d012      	beq.n	8003fb2 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8003f8c:	4b0c      	ldr	r3, [pc, #48]	; (8003fc0 <xQueueGenericReset+0xcc>)
 8003f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	f3bf 8f6f 	isb	sy
 8003f9c:	e009      	b.n	8003fb2 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	3310      	adds	r3, #16
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7ff fef2 	bl	8003d8c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	3324      	adds	r3, #36	; 0x24
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7ff feed 	bl	8003d8c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8003fb2:	f002 faf1 	bl	8006598 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8003fb6:	2301      	movs	r3, #1
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	e000ed04 	.word	0xe000ed04

08003fc4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b08c      	sub	sp, #48	; 0x30
 8003fc8:	af02      	add	r7, sp, #8
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10a      	bne.n	8003fee <xQueueGenericCreate+0x2a>
        __asm volatile
 8003fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fdc:	f383 8811 	msr	BASEPRI, r3
 8003fe0:	f3bf 8f6f 	isb	sy
 8003fe4:	f3bf 8f4f 	dsb	sy
 8003fe8:	61bb      	str	r3, [r7, #24]
    }
 8003fea:	bf00      	nop
 8003fec:	e7fe      	b.n	8003fec <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	fb02 f303 	mul.w	r3, r2, r3
 8003ff6:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d006      	beq.n	800400c <xQueueGenericCreate+0x48>
 8003ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	fbb2 f3f3 	udiv	r3, r2, r3
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	429a      	cmp	r2, r3
 800400a:	d101      	bne.n	8004010 <xQueueGenericCreate+0x4c>
 800400c:	2301      	movs	r3, #1
 800400e:	e000      	b.n	8004012 <xQueueGenericCreate+0x4e>
 8004010:	2300      	movs	r3, #0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10a      	bne.n	800402c <xQueueGenericCreate+0x68>
        __asm volatile
 8004016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401a:	f383 8811 	msr	BASEPRI, r3
 800401e:	f3bf 8f6f 	isb	sy
 8004022:	f3bf 8f4f 	dsb	sy
 8004026:	617b      	str	r3, [r7, #20]
    }
 8004028:	bf00      	nop
 800402a:	e7fe      	b.n	800402a <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8004032:	d90a      	bls.n	800404a <xQueueGenericCreate+0x86>
        __asm volatile
 8004034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004038:	f383 8811 	msr	BASEPRI, r3
 800403c:	f3bf 8f6f 	isb	sy
 8004040:	f3bf 8f4f 	dsb	sy
 8004044:	613b      	str	r3, [r7, #16]
    }
 8004046:	bf00      	nop
 8004048:	e7fe      	b.n	8004048 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800404a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404c:	3350      	adds	r3, #80	; 0x50
 800404e:	4618      	mov	r0, r3
 8004050:	f002 fb94 	bl	800677c <pvPortMalloc>
 8004054:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00d      	beq.n	8004078 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	3350      	adds	r3, #80	; 0x50
 8004064:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004066:	79fa      	ldrb	r2, [r7, #7]
 8004068:	6a3b      	ldr	r3, [r7, #32]
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	4613      	mov	r3, r2
 800406e:	69fa      	ldr	r2, [r7, #28]
 8004070:	68b9      	ldr	r1, [r7, #8]
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f000 f805 	bl	8004082 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004078:	6a3b      	ldr	r3, [r7, #32]
    }
 800407a:	4618      	mov	r0, r3
 800407c:	3728      	adds	r7, #40	; 0x28
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b084      	sub	sp, #16
 8004086:	af00      	add	r7, sp, #0
 8004088:	60f8      	str	r0, [r7, #12]
 800408a:	60b9      	str	r1, [r7, #8]
 800408c:	607a      	str	r2, [r7, #4]
 800408e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d103      	bne.n	800409e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	601a      	str	r2, [r3, #0]
 800409c:	e002      	b.n	80040a4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80040b0:	2101      	movs	r1, #1
 80040b2:	69b8      	ldr	r0, [r7, #24]
 80040b4:	f7ff ff1e 	bl	8003ef4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	78fa      	ldrb	r2, [r7, #3]
 80040bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80040c0:	bf00      	nop
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b08e      	sub	sp, #56	; 0x38
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
 80040d4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80040d6:	2300      	movs	r3, #0
 80040d8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80040de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10a      	bne.n	80040fa <xQueueGenericSend+0x32>
        __asm volatile
 80040e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e8:	f383 8811 	msr	BASEPRI, r3
 80040ec:	f3bf 8f6f 	isb	sy
 80040f0:	f3bf 8f4f 	dsb	sy
 80040f4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80040f6:	bf00      	nop
 80040f8:	e7fe      	b.n	80040f8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d103      	bne.n	8004108 <xQueueGenericSend+0x40>
 8004100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004104:	2b00      	cmp	r3, #0
 8004106:	d101      	bne.n	800410c <xQueueGenericSend+0x44>
 8004108:	2301      	movs	r3, #1
 800410a:	e000      	b.n	800410e <xQueueGenericSend+0x46>
 800410c:	2300      	movs	r3, #0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10a      	bne.n	8004128 <xQueueGenericSend+0x60>
        __asm volatile
 8004112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004116:	f383 8811 	msr	BASEPRI, r3
 800411a:	f3bf 8f6f 	isb	sy
 800411e:	f3bf 8f4f 	dsb	sy
 8004122:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004124:	bf00      	nop
 8004126:	e7fe      	b.n	8004126 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	2b02      	cmp	r3, #2
 800412c:	d103      	bne.n	8004136 <xQueueGenericSend+0x6e>
 800412e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004132:	2b01      	cmp	r3, #1
 8004134:	d101      	bne.n	800413a <xQueueGenericSend+0x72>
 8004136:	2301      	movs	r3, #1
 8004138:	e000      	b.n	800413c <xQueueGenericSend+0x74>
 800413a:	2300      	movs	r3, #0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10a      	bne.n	8004156 <xQueueGenericSend+0x8e>
        __asm volatile
 8004140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004144:	f383 8811 	msr	BASEPRI, r3
 8004148:	f3bf 8f6f 	isb	sy
 800414c:	f3bf 8f4f 	dsb	sy
 8004150:	623b      	str	r3, [r7, #32]
    }
 8004152:	bf00      	nop
 8004154:	e7fe      	b.n	8004154 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004156:	f001 f9d3 	bl	8005500 <xTaskGetSchedulerState>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d102      	bne.n	8004166 <xQueueGenericSend+0x9e>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <xQueueGenericSend+0xa2>
 8004166:	2301      	movs	r3, #1
 8004168:	e000      	b.n	800416c <xQueueGenericSend+0xa4>
 800416a:	2300      	movs	r3, #0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10a      	bne.n	8004186 <xQueueGenericSend+0xbe>
        __asm volatile
 8004170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	61fb      	str	r3, [r7, #28]
    }
 8004182:	bf00      	nop
 8004184:	e7fe      	b.n	8004184 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004186:	f002 f9d7 	bl	8006538 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800418a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800418e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004192:	429a      	cmp	r2, r3
 8004194:	d302      	bcc.n	800419c <xQueueGenericSend+0xd4>
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	2b02      	cmp	r3, #2
 800419a:	d129      	bne.n	80041f0 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	68b9      	ldr	r1, [r7, #8]
 80041a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041a2:	f000 fac6 	bl	8004732 <prvCopyDataToQueue>
 80041a6:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d010      	beq.n	80041d2 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b2:	3324      	adds	r3, #36	; 0x24
 80041b4:	4618      	mov	r0, r3
 80041b6:	f001 f807 	bl	80051c8 <xTaskRemoveFromEventList>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d013      	beq.n	80041e8 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80041c0:	4b3f      	ldr	r3, [pc, #252]	; (80042c0 <xQueueGenericSend+0x1f8>)
 80041c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	f3bf 8f6f 	isb	sy
 80041d0:	e00a      	b.n	80041e8 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80041d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d007      	beq.n	80041e8 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80041d8:	4b39      	ldr	r3, [pc, #228]	; (80042c0 <xQueueGenericSend+0x1f8>)
 80041da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041de:	601a      	str	r2, [r3, #0]
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80041e8:	f002 f9d6 	bl	8006598 <vPortExitCritical>
                return pdPASS;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e063      	b.n	80042b8 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d103      	bne.n	80041fe <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80041f6:	f002 f9cf 	bl	8006598 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80041fa:	2300      	movs	r3, #0
 80041fc:	e05c      	b.n	80042b8 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80041fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004200:	2b00      	cmp	r3, #0
 8004202:	d106      	bne.n	8004212 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004204:	f107 0314 	add.w	r3, r7, #20
 8004208:	4618      	mov	r0, r3
 800420a:	f001 f83f 	bl	800528c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800420e:	2301      	movs	r3, #1
 8004210:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004212:	f002 f9c1 	bl	8006598 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004216:	f000 fdb9 	bl	8004d8c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800421a:	f002 f98d 	bl	8006538 <vPortEnterCritical>
 800421e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004220:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004224:	b25b      	sxtb	r3, r3
 8004226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422a:	d103      	bne.n	8004234 <xQueueGenericSend+0x16c>
 800422c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422e:	2200      	movs	r2, #0
 8004230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004236:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800423a:	b25b      	sxtb	r3, r3
 800423c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004240:	d103      	bne.n	800424a <xQueueGenericSend+0x182>
 8004242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800424a:	f002 f9a5 	bl	8006598 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800424e:	1d3a      	adds	r2, r7, #4
 8004250:	f107 0314 	add.w	r3, r7, #20
 8004254:	4611      	mov	r1, r2
 8004256:	4618      	mov	r0, r3
 8004258:	f001 f82e 	bl	80052b8 <xTaskCheckForTimeOut>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d124      	bne.n	80042ac <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004262:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004264:	f000 fb5d 	bl	8004922 <prvIsQueueFull>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d018      	beq.n	80042a0 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800426e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004270:	3310      	adds	r3, #16
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	4611      	mov	r1, r2
 8004276:	4618      	mov	r0, r3
 8004278:	f000 ff56 	bl	8005128 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800427c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800427e:	f000 fae8 	bl	8004852 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004282:	f000 fd91 	bl	8004da8 <xTaskResumeAll>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	f47f af7c 	bne.w	8004186 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800428e:	4b0c      	ldr	r3, [pc, #48]	; (80042c0 <xQueueGenericSend+0x1f8>)
 8004290:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	f3bf 8f4f 	dsb	sy
 800429a:	f3bf 8f6f 	isb	sy
 800429e:	e772      	b.n	8004186 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80042a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042a2:	f000 fad6 	bl	8004852 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80042a6:	f000 fd7f 	bl	8004da8 <xTaskResumeAll>
 80042aa:	e76c      	b.n	8004186 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80042ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042ae:	f000 fad0 	bl	8004852 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80042b2:	f000 fd79 	bl	8004da8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80042b6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3738      	adds	r7, #56	; 0x38
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	e000ed04 	.word	0xe000ed04

080042c4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b090      	sub	sp, #64	; 0x40
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
 80042d0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80042d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10a      	bne.n	80042f2 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80042dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e0:	f383 8811 	msr	BASEPRI, r3
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	f3bf 8f4f 	dsb	sy
 80042ec:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80042ee:	bf00      	nop
 80042f0:	e7fe      	b.n	80042f0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d103      	bne.n	8004300 <xQueueGenericSendFromISR+0x3c>
 80042f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <xQueueGenericSendFromISR+0x40>
 8004300:	2301      	movs	r3, #1
 8004302:	e000      	b.n	8004306 <xQueueGenericSendFromISR+0x42>
 8004304:	2300      	movs	r3, #0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10a      	bne.n	8004320 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800430a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430e:	f383 8811 	msr	BASEPRI, r3
 8004312:	f3bf 8f6f 	isb	sy
 8004316:	f3bf 8f4f 	dsb	sy
 800431a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800431c:	bf00      	nop
 800431e:	e7fe      	b.n	800431e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	2b02      	cmp	r3, #2
 8004324:	d103      	bne.n	800432e <xQueueGenericSendFromISR+0x6a>
 8004326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432a:	2b01      	cmp	r3, #1
 800432c:	d101      	bne.n	8004332 <xQueueGenericSendFromISR+0x6e>
 800432e:	2301      	movs	r3, #1
 8004330:	e000      	b.n	8004334 <xQueueGenericSendFromISR+0x70>
 8004332:	2300      	movs	r3, #0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10a      	bne.n	800434e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8004338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433c:	f383 8811 	msr	BASEPRI, r3
 8004340:	f3bf 8f6f 	isb	sy
 8004344:	f3bf 8f4f 	dsb	sy
 8004348:	623b      	str	r3, [r7, #32]
    }
 800434a:	bf00      	nop
 800434c:	e7fe      	b.n	800434c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800434e:	f002 f9d5 	bl	80066fc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8004352:	f3ef 8211 	mrs	r2, BASEPRI
 8004356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	61fa      	str	r2, [r7, #28]
 8004368:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800436a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800436c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800436e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004376:	429a      	cmp	r2, r3
 8004378:	d302      	bcc.n	8004380 <xQueueGenericSendFromISR+0xbc>
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b02      	cmp	r3, #2
 800437e:	d13e      	bne.n	80043fe <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004382:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800438a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800438c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	68b9      	ldr	r1, [r7, #8]
 8004394:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004396:	f000 f9cc 	bl	8004732 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800439a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800439e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a2:	d112      	bne.n	80043ca <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d025      	beq.n	80043f8 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ae:	3324      	adds	r3, #36	; 0x24
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 ff09 	bl	80051c8 <xTaskRemoveFromEventList>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d01d      	beq.n	80043f8 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d01a      	beq.n	80043f8 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2201      	movs	r2, #1
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	e016      	b.n	80043f8 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80043ca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80043ce:	2b7f      	cmp	r3, #127	; 0x7f
 80043d0:	d10a      	bne.n	80043e8 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 80043d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d6:	f383 8811 	msr	BASEPRI, r3
 80043da:	f3bf 8f6f 	isb	sy
 80043de:	f3bf 8f4f 	dsb	sy
 80043e2:	617b      	str	r3, [r7, #20]
    }
 80043e4:	bf00      	nop
 80043e6:	e7fe      	b.n	80043e6 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80043e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80043ec:	3301      	adds	r3, #1
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	b25a      	sxtb	r2, r3
 80043f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80043f8:	2301      	movs	r3, #1
 80043fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80043fc:	e001      	b.n	8004402 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80043fe:	2300      	movs	r3, #0
 8004400:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004404:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800440c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800440e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004410:	4618      	mov	r0, r3
 8004412:	3740      	adds	r7, #64	; 0x40
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b08c      	sub	sp, #48	; 0x30
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004424:	2300      	movs	r3, #0
 8004426:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800442c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10a      	bne.n	8004448 <xQueueReceive+0x30>
        __asm volatile
 8004432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004436:	f383 8811 	msr	BASEPRI, r3
 800443a:	f3bf 8f6f 	isb	sy
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	623b      	str	r3, [r7, #32]
    }
 8004444:	bf00      	nop
 8004446:	e7fe      	b.n	8004446 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d103      	bne.n	8004456 <xQueueReceive+0x3e>
 800444e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <xQueueReceive+0x42>
 8004456:	2301      	movs	r3, #1
 8004458:	e000      	b.n	800445c <xQueueReceive+0x44>
 800445a:	2300      	movs	r3, #0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10a      	bne.n	8004476 <xQueueReceive+0x5e>
        __asm volatile
 8004460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004464:	f383 8811 	msr	BASEPRI, r3
 8004468:	f3bf 8f6f 	isb	sy
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	61fb      	str	r3, [r7, #28]
    }
 8004472:	bf00      	nop
 8004474:	e7fe      	b.n	8004474 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004476:	f001 f843 	bl	8005500 <xTaskGetSchedulerState>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d102      	bne.n	8004486 <xQueueReceive+0x6e>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <xQueueReceive+0x72>
 8004486:	2301      	movs	r3, #1
 8004488:	e000      	b.n	800448c <xQueueReceive+0x74>
 800448a:	2300      	movs	r3, #0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10a      	bne.n	80044a6 <xQueueReceive+0x8e>
        __asm volatile
 8004490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004494:	f383 8811 	msr	BASEPRI, r3
 8004498:	f3bf 8f6f 	isb	sy
 800449c:	f3bf 8f4f 	dsb	sy
 80044a0:	61bb      	str	r3, [r7, #24]
    }
 80044a2:	bf00      	nop
 80044a4:	e7fe      	b.n	80044a4 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80044a6:	f002 f847 	bl	8006538 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ae:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d01f      	beq.n	80044f6 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80044b6:	68b9      	ldr	r1, [r7, #8]
 80044b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044ba:	f000 f9a4 	bl	8004806 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	1e5a      	subs	r2, r3, #1
 80044c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00f      	beq.n	80044ee <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d0:	3310      	adds	r3, #16
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 fe78 	bl	80051c8 <xTaskRemoveFromEventList>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d007      	beq.n	80044ee <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80044de:	4b3d      	ldr	r3, [pc, #244]	; (80045d4 <xQueueReceive+0x1bc>)
 80044e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	f3bf 8f4f 	dsb	sy
 80044ea:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80044ee:	f002 f853 	bl	8006598 <vPortExitCritical>
                return pdPASS;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e069      	b.n	80045ca <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d103      	bne.n	8004504 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80044fc:	f002 f84c 	bl	8006598 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004500:	2300      	movs	r3, #0
 8004502:	e062      	b.n	80045ca <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004506:	2b00      	cmp	r3, #0
 8004508:	d106      	bne.n	8004518 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800450a:	f107 0310 	add.w	r3, r7, #16
 800450e:	4618      	mov	r0, r3
 8004510:	f000 febc 	bl	800528c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004514:	2301      	movs	r3, #1
 8004516:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004518:	f002 f83e 	bl	8006598 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800451c:	f000 fc36 	bl	8004d8c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004520:	f002 f80a 	bl	8006538 <vPortEnterCritical>
 8004524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004526:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800452a:	b25b      	sxtb	r3, r3
 800452c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004530:	d103      	bne.n	800453a <xQueueReceive+0x122>
 8004532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800453a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004540:	b25b      	sxtb	r3, r3
 8004542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004546:	d103      	bne.n	8004550 <xQueueReceive+0x138>
 8004548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004550:	f002 f822 	bl	8006598 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004554:	1d3a      	adds	r2, r7, #4
 8004556:	f107 0310 	add.w	r3, r7, #16
 800455a:	4611      	mov	r1, r2
 800455c:	4618      	mov	r0, r3
 800455e:	f000 feab 	bl	80052b8 <xTaskCheckForTimeOut>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d123      	bne.n	80045b0 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004568:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800456a:	f000 f9c4 	bl	80048f6 <prvIsQueueEmpty>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d017      	beq.n	80045a4 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004576:	3324      	adds	r3, #36	; 0x24
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	4611      	mov	r1, r2
 800457c:	4618      	mov	r0, r3
 800457e:	f000 fdd3 	bl	8005128 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004582:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004584:	f000 f965 	bl	8004852 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004588:	f000 fc0e 	bl	8004da8 <xTaskResumeAll>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d189      	bne.n	80044a6 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8004592:	4b10      	ldr	r3, [pc, #64]	; (80045d4 <xQueueReceive+0x1bc>)
 8004594:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004598:	601a      	str	r2, [r3, #0]
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	f3bf 8f6f 	isb	sy
 80045a2:	e780      	b.n	80044a6 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80045a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045a6:	f000 f954 	bl	8004852 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80045aa:	f000 fbfd 	bl	8004da8 <xTaskResumeAll>
 80045ae:	e77a      	b.n	80044a6 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80045b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045b2:	f000 f94e 	bl	8004852 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80045b6:	f000 fbf7 	bl	8004da8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045bc:	f000 f99b 	bl	80048f6 <prvIsQueueEmpty>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f43f af6f 	beq.w	80044a6 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80045c8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3730      	adds	r7, #48	; 0x30
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	e000ed04 	.word	0xe000ed04

080045d8 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b090      	sub	sp, #64	; 0x40
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80045e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10a      	bne.n	8004604 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 80045ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004600:	bf00      	nop
 8004602:	e7fe      	b.n	8004602 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d103      	bne.n	8004612 <xQueueReceiveFromISR+0x3a>
 800460a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <xQueueReceiveFromISR+0x3e>
 8004612:	2301      	movs	r3, #1
 8004614:	e000      	b.n	8004618 <xQueueReceiveFromISR+0x40>
 8004616:	2300      	movs	r3, #0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10a      	bne.n	8004632 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 800461c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004620:	f383 8811 	msr	BASEPRI, r3
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800462e:	bf00      	nop
 8004630:	e7fe      	b.n	8004630 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004632:	f002 f863 	bl	80066fc <vPortValidateInterruptPriority>
        __asm volatile
 8004636:	f3ef 8211 	mrs	r2, BASEPRI
 800463a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463e:	f383 8811 	msr	BASEPRI, r3
 8004642:	f3bf 8f6f 	isb	sy
 8004646:	f3bf 8f4f 	dsb	sy
 800464a:	623a      	str	r2, [r7, #32]
 800464c:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 800464e:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004650:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004656:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465a:	2b00      	cmp	r3, #0
 800465c:	d03e      	beq.n	80046dc <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 800465e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004660:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004664:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004668:	68b9      	ldr	r1, [r7, #8]
 800466a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800466c:	f000 f8cb 	bl	8004806 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004672:	1e5a      	subs	r2, r3, #1
 8004674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004676:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8004678:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800467c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004680:	d112      	bne.n	80046a8 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d025      	beq.n	80046d6 <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800468a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800468c:	3310      	adds	r3, #16
 800468e:	4618      	mov	r0, r3
 8004690:	f000 fd9a 	bl	80051c8 <xTaskRemoveFromEventList>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d01d      	beq.n	80046d6 <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d01a      	beq.n	80046d6 <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	e016      	b.n	80046d6 <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 80046a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80046ac:	2b7f      	cmp	r3, #127	; 0x7f
 80046ae:	d10a      	bne.n	80046c6 <xQueueReceiveFromISR+0xee>
        __asm volatile
 80046b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	61bb      	str	r3, [r7, #24]
    }
 80046c2:	bf00      	nop
 80046c4:	e7fe      	b.n	80046c4 <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80046c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80046ca:	3301      	adds	r3, #1
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	b25a      	sxtb	r2, r3
 80046d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 80046d6:	2301      	movs	r3, #1
 80046d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046da:	e001      	b.n	80046e0 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 80046dc:	2300      	movs	r3, #0
 80046de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e2:	617b      	str	r3, [r7, #20]
        __asm volatile
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	f383 8811 	msr	BASEPRI, r3
    }
 80046ea:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80046ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3740      	adds	r7, #64	; 0x40
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b084      	sub	sp, #16
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10a      	bne.n	800471a <uxQueueMessagesWaiting+0x24>
        __asm volatile
 8004704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004708:	f383 8811 	msr	BASEPRI, r3
 800470c:	f3bf 8f6f 	isb	sy
 8004710:	f3bf 8f4f 	dsb	sy
 8004714:	60bb      	str	r3, [r7, #8]
    }
 8004716:	bf00      	nop
 8004718:	e7fe      	b.n	8004718 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 800471a:	f001 ff0d 	bl	8006538 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004722:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8004724:	f001 ff38 	bl	8006598 <vPortExitCritical>

    return uxReturn;
 8004728:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800472a:	4618      	mov	r0, r3
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b086      	sub	sp, #24
 8004736:	af00      	add	r7, sp, #0
 8004738:	60f8      	str	r0, [r7, #12]
 800473a:	60b9      	str	r1, [r7, #8]
 800473c:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800473e:	2300      	movs	r3, #0
 8004740:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004746:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10d      	bne.n	800476c <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d14d      	bne.n	80047f4 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	4618      	mov	r0, r3
 800475e:	f000 feed 	bl	800553c <xTaskPriorityDisinherit>
 8004762:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	609a      	str	r2, [r3, #8]
 800476a:	e043      	b.n	80047f4 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d119      	bne.n	80047a6 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6858      	ldr	r0, [r3, #4]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	461a      	mov	r2, r3
 800477c:	68b9      	ldr	r1, [r7, #8]
 800477e:	f002 fa1f 	bl	8006bc0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	441a      	add	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	429a      	cmp	r2, r3
 800479a:	d32b      	bcc.n	80047f4 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	605a      	str	r2, [r3, #4]
 80047a4:	e026      	b.n	80047f4 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	68d8      	ldr	r0, [r3, #12]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	461a      	mov	r2, r3
 80047b0:	68b9      	ldr	r1, [r7, #8]
 80047b2:	f002 fa05 	bl	8006bc0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047be:	425b      	negs	r3, r3
 80047c0:	441a      	add	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	68da      	ldr	r2, [r3, #12]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d207      	bcs.n	80047e2 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	689a      	ldr	r2, [r3, #8]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047da:	425b      	negs	r3, r3
 80047dc:	441a      	add	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d105      	bne.n	80047f4 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d002      	beq.n	80047f4 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	3b01      	subs	r3, #1
 80047f2:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1c5a      	adds	r2, r3, #1
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80047fc:	697b      	ldr	r3, [r7, #20]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3718      	adds	r7, #24
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b082      	sub	sp, #8
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
 800480e:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004814:	2b00      	cmp	r3, #0
 8004816:	d018      	beq.n	800484a <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68da      	ldr	r2, [r3, #12]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004820:	441a      	add	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68da      	ldr	r2, [r3, #12]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	429a      	cmp	r2, r3
 8004830:	d303      	bcc.n	800483a <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68d9      	ldr	r1, [r3, #12]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	461a      	mov	r2, r3
 8004844:	6838      	ldr	r0, [r7, #0]
 8004846:	f002 f9bb 	bl	8006bc0 <memcpy>
    }
}
 800484a:	bf00      	nop
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b084      	sub	sp, #16
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800485a:	f001 fe6d 	bl	8006538 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004864:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004866:	e011      	b.n	800488c <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	2b00      	cmp	r3, #0
 800486e:	d012      	beq.n	8004896 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	3324      	adds	r3, #36	; 0x24
 8004874:	4618      	mov	r0, r3
 8004876:	f000 fca7 	bl	80051c8 <xTaskRemoveFromEventList>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8004880:	f000 fd80 	bl	8005384 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004884:	7bfb      	ldrb	r3, [r7, #15]
 8004886:	3b01      	subs	r3, #1
 8004888:	b2db      	uxtb	r3, r3
 800488a:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800488c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004890:	2b00      	cmp	r3, #0
 8004892:	dce9      	bgt.n	8004868 <prvUnlockQueue+0x16>
 8004894:	e000      	b.n	8004898 <prvUnlockQueue+0x46>
                        break;
 8004896:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	22ff      	movs	r2, #255	; 0xff
 800489c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80048a0:	f001 fe7a 	bl	8006598 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80048a4:	f001 fe48 	bl	8006538 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048ae:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80048b0:	e011      	b.n	80048d6 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d012      	beq.n	80048e0 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	3310      	adds	r3, #16
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 fc82 	bl	80051c8 <xTaskRemoveFromEventList>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80048ca:	f000 fd5b 	bl	8005384 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80048ce:	7bbb      	ldrb	r3, [r7, #14]
 80048d0:	3b01      	subs	r3, #1
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80048d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	dce9      	bgt.n	80048b2 <prvUnlockQueue+0x60>
 80048de:	e000      	b.n	80048e2 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80048e0:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	22ff      	movs	r2, #255	; 0xff
 80048e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80048ea:	f001 fe55 	bl	8006598 <vPortExitCritical>
}
 80048ee:	bf00      	nop
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b084      	sub	sp, #16
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80048fe:	f001 fe1b 	bl	8006538 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004906:	2b00      	cmp	r3, #0
 8004908:	d102      	bne.n	8004910 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800490a:	2301      	movs	r3, #1
 800490c:	60fb      	str	r3, [r7, #12]
 800490e:	e001      	b.n	8004914 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004910:	2300      	movs	r3, #0
 8004912:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004914:	f001 fe40 	bl	8006598 <vPortExitCritical>

    return xReturn;
 8004918:	68fb      	ldr	r3, [r7, #12]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b084      	sub	sp, #16
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800492a:	f001 fe05 	bl	8006538 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004936:	429a      	cmp	r2, r3
 8004938:	d102      	bne.n	8004940 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800493a:	2301      	movs	r3, #1
 800493c:	60fb      	str	r3, [r7, #12]
 800493e:	e001      	b.n	8004944 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8004940:	2300      	movs	r3, #0
 8004942:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004944:	f001 fe28 	bl	8006598 <vPortExitCritical>

    return xReturn;
 8004948:	68fb      	ldr	r3, [r7, #12]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8004952:	b480      	push	{r7}
 8004954:	b087      	sub	sp, #28
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10a      	bne.n	800497a <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8004964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004968:	f383 8811 	msr	BASEPRI, r3
 800496c:	f3bf 8f6f 	isb	sy
 8004970:	f3bf 8f4f 	dsb	sy
 8004974:	60fb      	str	r3, [r7, #12]
    }
 8004976:	bf00      	nop
 8004978:	e7fe      	b.n	8004978 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004982:	429a      	cmp	r2, r3
 8004984:	d102      	bne.n	800498c <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8004986:	2301      	movs	r3, #1
 8004988:	617b      	str	r3, [r7, #20]
 800498a:	e001      	b.n	8004990 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 800498c:	2300      	movs	r3, #0
 800498e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004990:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004992:	4618      	mov	r0, r3
 8004994:	371c      	adds	r7, #28
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
	...

080049a0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80049aa:	2300      	movs	r3, #0
 80049ac:	60fb      	str	r3, [r7, #12]
 80049ae:	e014      	b.n	80049da <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80049b0:	4a0f      	ldr	r2, [pc, #60]	; (80049f0 <vQueueAddToRegistry+0x50>)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10b      	bne.n	80049d4 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80049bc:	490c      	ldr	r1, [pc, #48]	; (80049f0 <vQueueAddToRegistry+0x50>)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80049c6:	4a0a      	ldr	r2, [pc, #40]	; (80049f0 <vQueueAddToRegistry+0x50>)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	4413      	add	r3, r2
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80049d2:	e006      	b.n	80049e2 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	3301      	adds	r3, #1
 80049d8:	60fb      	str	r3, [r7, #12]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2b07      	cmp	r3, #7
 80049de:	d9e7      	bls.n	80049b0 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80049e0:	bf00      	nop
 80049e2:	bf00      	nop
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	20012e90 	.word	0x20012e90

080049f4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004a04:	f001 fd98 	bl	8006538 <vPortEnterCritical>
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a0e:	b25b      	sxtb	r3, r3
 8004a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a14:	d103      	bne.n	8004a1e <vQueueWaitForMessageRestricted+0x2a>
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a24:	b25b      	sxtb	r3, r3
 8004a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a2a:	d103      	bne.n	8004a34 <vQueueWaitForMessageRestricted+0x40>
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a34:	f001 fdb0 	bl	8006598 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d106      	bne.n	8004a4e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	3324      	adds	r3, #36	; 0x24
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	68b9      	ldr	r1, [r7, #8]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f000 fb91 	bl	8005170 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8004a4e:	6978      	ldr	r0, [r7, #20]
 8004a50:	f7ff feff 	bl	8004852 <prvUnlockQueue>
    }
 8004a54:	bf00      	nop
 8004a56:	3718      	adds	r7, #24
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b08c      	sub	sp, #48	; 0x30
 8004a60:	af04      	add	r7, sp, #16
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	603b      	str	r3, [r7, #0]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004a6c:	88fb      	ldrh	r3, [r7, #6]
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4618      	mov	r0, r3
 8004a72:	f001 fe83 	bl	800677c <pvPortMalloc>
 8004a76:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00e      	beq.n	8004a9c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004a7e:	2058      	movs	r0, #88	; 0x58
 8004a80:	f001 fe7c 	bl	800677c <pvPortMalloc>
 8004a84:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d003      	beq.n	8004a94 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	631a      	str	r2, [r3, #48]	; 0x30
 8004a92:	e005      	b.n	8004aa0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8004a94:	6978      	ldr	r0, [r7, #20]
 8004a96:	f001 ff51 	bl	800693c <vPortFree>
 8004a9a:	e001      	b.n	8004aa0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d013      	beq.n	8004ace <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004aa6:	88fa      	ldrh	r2, [r7, #6]
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	9303      	str	r3, [sp, #12]
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	9302      	str	r3, [sp, #8]
 8004ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab2:	9301      	str	r3, [sp, #4]
 8004ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab6:	9300      	str	r3, [sp, #0]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	68b9      	ldr	r1, [r7, #8]
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f000 f80e 	bl	8004ade <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8004ac2:	69f8      	ldr	r0, [r7, #28]
 8004ac4:	f000 f8a2 	bl	8004c0c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	61bb      	str	r3, [r7, #24]
 8004acc:	e002      	b.n	8004ad4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004ace:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8004ad4:	69bb      	ldr	r3, [r7, #24]
    }
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3720      	adds	r7, #32
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b088      	sub	sp, #32
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	60f8      	str	r0, [r7, #12]
 8004ae6:	60b9      	str	r1, [r7, #8]
 8004ae8:	607a      	str	r2, [r7, #4]
 8004aea:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aee:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	461a      	mov	r2, r3
 8004af6:	21a5      	movs	r1, #165	; 0xa5
 8004af8:	f002 f870 	bl	8006bdc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004b06:	3b01      	subs	r3, #1
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	4413      	add	r3, r2
 8004b0c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	f023 0307 	bic.w	r3, r3, #7
 8004b14:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00a      	beq.n	8004b36 <prvInitialiseNewTask+0x58>
        __asm volatile
 8004b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b24:	f383 8811 	msr	BASEPRI, r3
 8004b28:	f3bf 8f6f 	isb	sy
 8004b2c:	f3bf 8f4f 	dsb	sy
 8004b30:	617b      	str	r3, [r7, #20]
    }
 8004b32:	bf00      	nop
 8004b34:	e7fe      	b.n	8004b34 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d01f      	beq.n	8004b7c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	61fb      	str	r3, [r7, #28]
 8004b40:	e012      	b.n	8004b68 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	4413      	add	r3, r2
 8004b48:	7819      	ldrb	r1, [r3, #0]
 8004b4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	4413      	add	r3, r2
 8004b50:	3334      	adds	r3, #52	; 0x34
 8004b52:	460a      	mov	r2, r1
 8004b54:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d006      	beq.n	8004b70 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	3301      	adds	r3, #1
 8004b66:	61fb      	str	r3, [r7, #28]
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	2b09      	cmp	r3, #9
 8004b6c:	d9e9      	bls.n	8004b42 <prvInitialiseNewTask+0x64>
 8004b6e:	e000      	b.n	8004b72 <prvInitialiseNewTask+0x94>
            {
                break;
 8004b70:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004b7a:	e003      	b.n	8004b84 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	d901      	bls.n	8004b8e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004b8a:	2304      	movs	r3, #4
 8004b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b92:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8004b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b98:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8004b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba2:	3304      	adds	r3, #4
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7ff f911 	bl	8003dcc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bac:	3318      	adds	r3, #24
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7ff f90c 	bl	8003dcc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bb8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bbc:	f1c3 0205 	rsb	r2, r3, #5
 8004bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bc8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8004bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bcc:	3350      	adds	r3, #80	; 0x50
 8004bce:	2204      	movs	r2, #4
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f002 f802 	bl	8006bdc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8004bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bda:	3354      	adds	r3, #84	; 0x54
 8004bdc:	2201      	movs	r2, #1
 8004bde:	2100      	movs	r1, #0
 8004be0:	4618      	mov	r0, r3
 8004be2:	f001 fffb 	bl	8006bdc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	68f9      	ldr	r1, [r7, #12]
 8004bea:	69b8      	ldr	r0, [r7, #24]
 8004bec:	f001 fb76 	bl	80062dc <pxPortInitialiseStack>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d002      	beq.n	8004c02 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c00:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004c02:	bf00      	nop
 8004c04:	3720      	adds	r7, #32
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
	...

08004c0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004c14:	f001 fc90 	bl	8006538 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004c18:	4b2c      	ldr	r3, [pc, #176]	; (8004ccc <prvAddNewTaskToReadyList+0xc0>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	4a2b      	ldr	r2, [pc, #172]	; (8004ccc <prvAddNewTaskToReadyList+0xc0>)
 8004c20:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8004c22:	4b2b      	ldr	r3, [pc, #172]	; (8004cd0 <prvAddNewTaskToReadyList+0xc4>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d109      	bne.n	8004c3e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004c2a:	4a29      	ldr	r2, [pc, #164]	; (8004cd0 <prvAddNewTaskToReadyList+0xc4>)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c30:	4b26      	ldr	r3, [pc, #152]	; (8004ccc <prvAddNewTaskToReadyList+0xc0>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d110      	bne.n	8004c5a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004c38:	f000 fbc8 	bl	80053cc <prvInitialiseTaskLists>
 8004c3c:	e00d      	b.n	8004c5a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004c3e:	4b25      	ldr	r3, [pc, #148]	; (8004cd4 <prvAddNewTaskToReadyList+0xc8>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d109      	bne.n	8004c5a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c46:	4b22      	ldr	r3, [pc, #136]	; (8004cd0 <prvAddNewTaskToReadyList+0xc4>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d802      	bhi.n	8004c5a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004c54:	4a1e      	ldr	r2, [pc, #120]	; (8004cd0 <prvAddNewTaskToReadyList+0xc4>)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004c5a:	4b1f      	ldr	r3, [pc, #124]	; (8004cd8 <prvAddNewTaskToReadyList+0xcc>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	4a1d      	ldr	r2, [pc, #116]	; (8004cd8 <prvAddNewTaskToReadyList+0xcc>)
 8004c62:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004c64:	4b1c      	ldr	r3, [pc, #112]	; (8004cd8 <prvAddNewTaskToReadyList+0xcc>)
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c70:	2201      	movs	r2, #1
 8004c72:	409a      	lsls	r2, r3
 8004c74:	4b19      	ldr	r3, [pc, #100]	; (8004cdc <prvAddNewTaskToReadyList+0xd0>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	4a18      	ldr	r2, [pc, #96]	; (8004cdc <prvAddNewTaskToReadyList+0xd0>)
 8004c7c:	6013      	str	r3, [r2, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c82:	4613      	mov	r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	4413      	add	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4a15      	ldr	r2, [pc, #84]	; (8004ce0 <prvAddNewTaskToReadyList+0xd4>)
 8004c8c:	441a      	add	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	3304      	adds	r3, #4
 8004c92:	4619      	mov	r1, r3
 8004c94:	4610      	mov	r0, r2
 8004c96:	f7ff f8a6 	bl	8003de6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004c9a:	f001 fc7d 	bl	8006598 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004c9e:	4b0d      	ldr	r3, [pc, #52]	; (8004cd4 <prvAddNewTaskToReadyList+0xc8>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00e      	beq.n	8004cc4 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ca6:	4b0a      	ldr	r3, [pc, #40]	; (8004cd0 <prvAddNewTaskToReadyList+0xc4>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d207      	bcs.n	8004cc4 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004cb4:	4b0b      	ldr	r3, [pc, #44]	; (8004ce4 <prvAddNewTaskToReadyList+0xd8>)
 8004cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004cc4:	bf00      	nop
 8004cc6:	3708      	adds	r7, #8
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	20000120 	.word	0x20000120
 8004cd0:	20000048 	.word	0x20000048
 8004cd4:	2000012c 	.word	0x2000012c
 8004cd8:	2000013c 	.word	0x2000013c
 8004cdc:	20000128 	.word	0x20000128
 8004ce0:	2000004c 	.word	0x2000004c
 8004ce4:	e000ed04 	.word	0xe000ed04

08004ce8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8004cee:	4b20      	ldr	r3, [pc, #128]	; (8004d70 <vTaskStartScheduler+0x88>)
 8004cf0:	9301      	str	r3, [sp, #4]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	2282      	movs	r2, #130	; 0x82
 8004cfa:	491e      	ldr	r1, [pc, #120]	; (8004d74 <vTaskStartScheduler+0x8c>)
 8004cfc:	481e      	ldr	r0, [pc, #120]	; (8004d78 <vTaskStartScheduler+0x90>)
 8004cfe:	f7ff fead 	bl	8004a5c <xTaskCreate>
 8004d02:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d102      	bne.n	8004d10 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8004d0a:	f000 ff59 	bl	8005bc0 <xTimerCreateTimerTask>
 8004d0e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d116      	bne.n	8004d44 <vTaskStartScheduler+0x5c>
        __asm volatile
 8004d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1a:	f383 8811 	msr	BASEPRI, r3
 8004d1e:	f3bf 8f6f 	isb	sy
 8004d22:	f3bf 8f4f 	dsb	sy
 8004d26:	60bb      	str	r3, [r7, #8]
    }
 8004d28:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8004d2a:	4b14      	ldr	r3, [pc, #80]	; (8004d7c <vTaskStartScheduler+0x94>)
 8004d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d30:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004d32:	4b13      	ldr	r3, [pc, #76]	; (8004d80 <vTaskStartScheduler+0x98>)
 8004d34:	2201      	movs	r2, #1
 8004d36:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004d38:	4b12      	ldr	r3, [pc, #72]	; (8004d84 <vTaskStartScheduler+0x9c>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8004d3e:	f001 fb59 	bl	80063f4 <xPortStartScheduler>
 8004d42:	e00e      	b.n	8004d62 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4a:	d10a      	bne.n	8004d62 <vTaskStartScheduler+0x7a>
        __asm volatile
 8004d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d50:	f383 8811 	msr	BASEPRI, r3
 8004d54:	f3bf 8f6f 	isb	sy
 8004d58:	f3bf 8f4f 	dsb	sy
 8004d5c:	607b      	str	r3, [r7, #4]
    }
 8004d5e:	bf00      	nop
 8004d60:	e7fe      	b.n	8004d60 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004d62:	4b09      	ldr	r3, [pc, #36]	; (8004d88 <vTaskStartScheduler+0xa0>)
 8004d64:	681b      	ldr	r3, [r3, #0]
}
 8004d66:	bf00      	nop
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	20000144 	.word	0x20000144
 8004d74:	08006e0c 	.word	0x08006e0c
 8004d78:	0800539d 	.word	0x0800539d
 8004d7c:	20000140 	.word	0x20000140
 8004d80:	2000012c 	.word	0x2000012c
 8004d84:	20000124 	.word	0x20000124
 8004d88:	20000018 	.word	0x20000018

08004d8c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004d90:	4b04      	ldr	r3, [pc, #16]	; (8004da4 <vTaskSuspendAll+0x18>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	3301      	adds	r3, #1
 8004d96:	4a03      	ldr	r2, [pc, #12]	; (8004da4 <vTaskSuspendAll+0x18>)
 8004d98:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004d9a:	bf00      	nop
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	20000148 	.word	0x20000148

08004da8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004dae:	2300      	movs	r3, #0
 8004db0:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004db2:	2300      	movs	r3, #0
 8004db4:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8004db6:	4b41      	ldr	r3, [pc, #260]	; (8004ebc <xTaskResumeAll+0x114>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10a      	bne.n	8004dd4 <xTaskResumeAll+0x2c>
        __asm volatile
 8004dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc2:	f383 8811 	msr	BASEPRI, r3
 8004dc6:	f3bf 8f6f 	isb	sy
 8004dca:	f3bf 8f4f 	dsb	sy
 8004dce:	603b      	str	r3, [r7, #0]
    }
 8004dd0:	bf00      	nop
 8004dd2:	e7fe      	b.n	8004dd2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004dd4:	f001 fbb0 	bl	8006538 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004dd8:	4b38      	ldr	r3, [pc, #224]	; (8004ebc <xTaskResumeAll+0x114>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	4a37      	ldr	r2, [pc, #220]	; (8004ebc <xTaskResumeAll+0x114>)
 8004de0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004de2:	4b36      	ldr	r3, [pc, #216]	; (8004ebc <xTaskResumeAll+0x114>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d161      	bne.n	8004eae <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004dea:	4b35      	ldr	r3, [pc, #212]	; (8004ec0 <xTaskResumeAll+0x118>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d05d      	beq.n	8004eae <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004df2:	e02e      	b.n	8004e52 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004df4:	4b33      	ldr	r3, [pc, #204]	; (8004ec4 <xTaskResumeAll+0x11c>)
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	3318      	adds	r3, #24
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7ff f84d 	bl	8003ea0 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	3304      	adds	r3, #4
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7ff f848 	bl	8003ea0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e14:	2201      	movs	r2, #1
 8004e16:	409a      	lsls	r2, r3
 8004e18:	4b2b      	ldr	r3, [pc, #172]	; (8004ec8 <xTaskResumeAll+0x120>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	4a2a      	ldr	r2, [pc, #168]	; (8004ec8 <xTaskResumeAll+0x120>)
 8004e20:	6013      	str	r3, [r2, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e26:	4613      	mov	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4413      	add	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4a27      	ldr	r2, [pc, #156]	; (8004ecc <xTaskResumeAll+0x124>)
 8004e30:	441a      	add	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	3304      	adds	r3, #4
 8004e36:	4619      	mov	r1, r3
 8004e38:	4610      	mov	r0, r2
 8004e3a:	f7fe ffd4 	bl	8003de6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e42:	4b23      	ldr	r3, [pc, #140]	; (8004ed0 <xTaskResumeAll+0x128>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d302      	bcc.n	8004e52 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8004e4c:	4b21      	ldr	r3, [pc, #132]	; (8004ed4 <xTaskResumeAll+0x12c>)
 8004e4e:	2201      	movs	r2, #1
 8004e50:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e52:	4b1c      	ldr	r3, [pc, #112]	; (8004ec4 <xTaskResumeAll+0x11c>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1cc      	bne.n	8004df4 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004e60:	f000 fb32 	bl	80054c8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004e64:	4b1c      	ldr	r3, [pc, #112]	; (8004ed8 <xTaskResumeAll+0x130>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d010      	beq.n	8004e92 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004e70:	f000 f846 	bl	8004f00 <xTaskIncrementTick>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d002      	beq.n	8004e80 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8004e7a:	4b16      	ldr	r3, [pc, #88]	; (8004ed4 <xTaskResumeAll+0x12c>)
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	3b01      	subs	r3, #1
 8004e84:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1f1      	bne.n	8004e70 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8004e8c:	4b12      	ldr	r3, [pc, #72]	; (8004ed8 <xTaskResumeAll+0x130>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004e92:	4b10      	ldr	r3, [pc, #64]	; (8004ed4 <xTaskResumeAll+0x12c>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d009      	beq.n	8004eae <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004e9e:	4b0f      	ldr	r3, [pc, #60]	; (8004edc <xTaskResumeAll+0x134>)
 8004ea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	f3bf 8f4f 	dsb	sy
 8004eaa:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004eae:	f001 fb73 	bl	8006598 <vPortExitCritical>

    return xAlreadyYielded;
 8004eb2:	68bb      	ldr	r3, [r7, #8]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	20000148 	.word	0x20000148
 8004ec0:	20000120 	.word	0x20000120
 8004ec4:	200000e0 	.word	0x200000e0
 8004ec8:	20000128 	.word	0x20000128
 8004ecc:	2000004c 	.word	0x2000004c
 8004ed0:	20000048 	.word	0x20000048
 8004ed4:	20000134 	.word	0x20000134
 8004ed8:	20000130 	.word	0x20000130
 8004edc:	e000ed04 	.word	0xe000ed04

08004ee0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004ee6:	4b05      	ldr	r3, [pc, #20]	; (8004efc <xTaskGetTickCount+0x1c>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004eec:	687b      	ldr	r3, [r7, #4]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	20000124 	.word	0x20000124

08004f00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004f06:	2300      	movs	r3, #0
 8004f08:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f0a:	4b4e      	ldr	r3, [pc, #312]	; (8005044 <xTaskIncrementTick+0x144>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f040 808e 	bne.w	8005030 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004f14:	4b4c      	ldr	r3, [pc, #304]	; (8005048 <xTaskIncrementTick+0x148>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004f1c:	4a4a      	ldr	r2, [pc, #296]	; (8005048 <xTaskIncrementTick+0x148>)
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d120      	bne.n	8004f6a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8004f28:	4b48      	ldr	r3, [pc, #288]	; (800504c <xTaskIncrementTick+0x14c>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00a      	beq.n	8004f48 <xTaskIncrementTick+0x48>
        __asm volatile
 8004f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	603b      	str	r3, [r7, #0]
    }
 8004f44:	bf00      	nop
 8004f46:	e7fe      	b.n	8004f46 <xTaskIncrementTick+0x46>
 8004f48:	4b40      	ldr	r3, [pc, #256]	; (800504c <xTaskIncrementTick+0x14c>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	60fb      	str	r3, [r7, #12]
 8004f4e:	4b40      	ldr	r3, [pc, #256]	; (8005050 <xTaskIncrementTick+0x150>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a3e      	ldr	r2, [pc, #248]	; (800504c <xTaskIncrementTick+0x14c>)
 8004f54:	6013      	str	r3, [r2, #0]
 8004f56:	4a3e      	ldr	r2, [pc, #248]	; (8005050 <xTaskIncrementTick+0x150>)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6013      	str	r3, [r2, #0]
 8004f5c:	4b3d      	ldr	r3, [pc, #244]	; (8005054 <xTaskIncrementTick+0x154>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	3301      	adds	r3, #1
 8004f62:	4a3c      	ldr	r2, [pc, #240]	; (8005054 <xTaskIncrementTick+0x154>)
 8004f64:	6013      	str	r3, [r2, #0]
 8004f66:	f000 faaf 	bl	80054c8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004f6a:	4b3b      	ldr	r3, [pc, #236]	; (8005058 <xTaskIncrementTick+0x158>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d348      	bcc.n	8005006 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f74:	4b35      	ldr	r3, [pc, #212]	; (800504c <xTaskIncrementTick+0x14c>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d104      	bne.n	8004f88 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f7e:	4b36      	ldr	r3, [pc, #216]	; (8005058 <xTaskIncrementTick+0x158>)
 8004f80:	f04f 32ff 	mov.w	r2, #4294967295
 8004f84:	601a      	str	r2, [r3, #0]
                    break;
 8004f86:	e03e      	b.n	8005006 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f88:	4b30      	ldr	r3, [pc, #192]	; (800504c <xTaskIncrementTick+0x14c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d203      	bcs.n	8004fa8 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004fa0:	4a2d      	ldr	r2, [pc, #180]	; (8005058 <xTaskIncrementTick+0x158>)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004fa6:	e02e      	b.n	8005006 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	3304      	adds	r3, #4
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7fe ff77 	bl	8003ea0 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d004      	beq.n	8004fc4 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	3318      	adds	r3, #24
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7fe ff6e 	bl	8003ea0 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc8:	2201      	movs	r2, #1
 8004fca:	409a      	lsls	r2, r3
 8004fcc:	4b23      	ldr	r3, [pc, #140]	; (800505c <xTaskIncrementTick+0x15c>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	4a22      	ldr	r2, [pc, #136]	; (800505c <xTaskIncrementTick+0x15c>)
 8004fd4:	6013      	str	r3, [r2, #0]
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fda:	4613      	mov	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4413      	add	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4a1f      	ldr	r2, [pc, #124]	; (8005060 <xTaskIncrementTick+0x160>)
 8004fe4:	441a      	add	r2, r3
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	3304      	adds	r3, #4
 8004fea:	4619      	mov	r1, r3
 8004fec:	4610      	mov	r0, r2
 8004fee:	f7fe fefa 	bl	8003de6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ff6:	4b1b      	ldr	r3, [pc, #108]	; (8005064 <xTaskIncrementTick+0x164>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d3b9      	bcc.n	8004f74 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8005000:	2301      	movs	r3, #1
 8005002:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005004:	e7b6      	b.n	8004f74 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005006:	4b17      	ldr	r3, [pc, #92]	; (8005064 <xTaskIncrementTick+0x164>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800500c:	4914      	ldr	r1, [pc, #80]	; (8005060 <xTaskIncrementTick+0x160>)
 800500e:	4613      	mov	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	440b      	add	r3, r1
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d901      	bls.n	8005022 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 800501e:	2301      	movs	r3, #1
 8005020:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8005022:	4b11      	ldr	r3, [pc, #68]	; (8005068 <xTaskIncrementTick+0x168>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d007      	beq.n	800503a <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 800502a:	2301      	movs	r3, #1
 800502c:	617b      	str	r3, [r7, #20]
 800502e:	e004      	b.n	800503a <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005030:	4b0e      	ldr	r3, [pc, #56]	; (800506c <xTaskIncrementTick+0x16c>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	3301      	adds	r3, #1
 8005036:	4a0d      	ldr	r2, [pc, #52]	; (800506c <xTaskIncrementTick+0x16c>)
 8005038:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800503a:	697b      	ldr	r3, [r7, #20]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3718      	adds	r7, #24
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	20000148 	.word	0x20000148
 8005048:	20000124 	.word	0x20000124
 800504c:	200000d8 	.word	0x200000d8
 8005050:	200000dc 	.word	0x200000dc
 8005054:	20000138 	.word	0x20000138
 8005058:	20000140 	.word	0x20000140
 800505c:	20000128 	.word	0x20000128
 8005060:	2000004c 	.word	0x2000004c
 8005064:	20000048 	.word	0x20000048
 8005068:	20000134 	.word	0x20000134
 800506c:	20000130 	.word	0x20000130

08005070 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005070:	b480      	push	{r7}
 8005072:	b087      	sub	sp, #28
 8005074:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005076:	4b27      	ldr	r3, [pc, #156]	; (8005114 <vTaskSwitchContext+0xa4>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800507e:	4b26      	ldr	r3, [pc, #152]	; (8005118 <vTaskSwitchContext+0xa8>)
 8005080:	2201      	movs	r2, #1
 8005082:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8005084:	e03f      	b.n	8005106 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8005086:	4b24      	ldr	r3, [pc, #144]	; (8005118 <vTaskSwitchContext+0xa8>)
 8005088:	2200      	movs	r2, #0
 800508a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800508c:	4b23      	ldr	r3, [pc, #140]	; (800511c <vTaskSwitchContext+0xac>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	fab3 f383 	clz	r3, r3
 8005098:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800509a:	7afb      	ldrb	r3, [r7, #11]
 800509c:	f1c3 031f 	rsb	r3, r3, #31
 80050a0:	617b      	str	r3, [r7, #20]
 80050a2:	491f      	ldr	r1, [pc, #124]	; (8005120 <vTaskSwitchContext+0xb0>)
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	4613      	mov	r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	4413      	add	r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	440b      	add	r3, r1
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10a      	bne.n	80050cc <vTaskSwitchContext+0x5c>
        __asm volatile
 80050b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ba:	f383 8811 	msr	BASEPRI, r3
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	f3bf 8f4f 	dsb	sy
 80050c6:	607b      	str	r3, [r7, #4]
    }
 80050c8:	bf00      	nop
 80050ca:	e7fe      	b.n	80050ca <vTaskSwitchContext+0x5a>
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	4613      	mov	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4413      	add	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4a12      	ldr	r2, [pc, #72]	; (8005120 <vTaskSwitchContext+0xb0>)
 80050d8:	4413      	add	r3, r2
 80050da:	613b      	str	r3, [r7, #16]
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	605a      	str	r2, [r3, #4]
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	3308      	adds	r3, #8
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d104      	bne.n	80050fc <vTaskSwitchContext+0x8c>
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	605a      	str	r2, [r3, #4]
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	4a08      	ldr	r2, [pc, #32]	; (8005124 <vTaskSwitchContext+0xb4>)
 8005104:	6013      	str	r3, [r2, #0]
}
 8005106:	bf00      	nop
 8005108:	371c      	adds	r7, #28
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	20000148 	.word	0x20000148
 8005118:	20000134 	.word	0x20000134
 800511c:	20000128 	.word	0x20000128
 8005120:	2000004c 	.word	0x2000004c
 8005124:	20000048 	.word	0x20000048

08005128 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10a      	bne.n	800514e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8005138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513c:	f383 8811 	msr	BASEPRI, r3
 8005140:	f3bf 8f6f 	isb	sy
 8005144:	f3bf 8f4f 	dsb	sy
 8005148:	60fb      	str	r3, [r7, #12]
    }
 800514a:	bf00      	nop
 800514c:	e7fe      	b.n	800514c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800514e:	4b07      	ldr	r3, [pc, #28]	; (800516c <vTaskPlaceOnEventList+0x44>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	3318      	adds	r3, #24
 8005154:	4619      	mov	r1, r3
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7fe fe69 	bl	8003e2e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800515c:	2101      	movs	r1, #1
 800515e:	6838      	ldr	r0, [r7, #0]
 8005160:	f000 fcc8 	bl	8005af4 <prvAddCurrentTaskToDelayedList>
}
 8005164:	bf00      	nop
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	20000048 	.word	0x20000048

08005170 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10a      	bne.n	8005198 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8005182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005186:	f383 8811 	msr	BASEPRI, r3
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	617b      	str	r3, [r7, #20]
    }
 8005194:	bf00      	nop
 8005196:	e7fe      	b.n	8005196 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005198:	4b0a      	ldr	r3, [pc, #40]	; (80051c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3318      	adds	r3, #24
 800519e:	4619      	mov	r1, r3
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f7fe fe20 	bl	8003de6 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d002      	beq.n	80051b2 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80051ac:	f04f 33ff 	mov.w	r3, #4294967295
 80051b0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80051b2:	6879      	ldr	r1, [r7, #4]
 80051b4:	68b8      	ldr	r0, [r7, #8]
 80051b6:	f000 fc9d 	bl	8005af4 <prvAddCurrentTaskToDelayedList>
    }
 80051ba:	bf00      	nop
 80051bc:	3718      	adds	r7, #24
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	20000048 	.word	0x20000048

080051c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b086      	sub	sp, #24
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10a      	bne.n	80051f4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80051de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	60fb      	str	r3, [r7, #12]
    }
 80051f0:	bf00      	nop
 80051f2:	e7fe      	b.n	80051f2 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	3318      	adds	r3, #24
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7fe fe51 	bl	8003ea0 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051fe:	4b1d      	ldr	r3, [pc, #116]	; (8005274 <xTaskRemoveFromEventList+0xac>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d11c      	bne.n	8005240 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	3304      	adds	r3, #4
 800520a:	4618      	mov	r0, r3
 800520c:	f7fe fe48 	bl	8003ea0 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005214:	2201      	movs	r2, #1
 8005216:	409a      	lsls	r2, r3
 8005218:	4b17      	ldr	r3, [pc, #92]	; (8005278 <xTaskRemoveFromEventList+0xb0>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4313      	orrs	r3, r2
 800521e:	4a16      	ldr	r2, [pc, #88]	; (8005278 <xTaskRemoveFromEventList+0xb0>)
 8005220:	6013      	str	r3, [r2, #0]
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005226:	4613      	mov	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4a13      	ldr	r2, [pc, #76]	; (800527c <xTaskRemoveFromEventList+0xb4>)
 8005230:	441a      	add	r2, r3
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	3304      	adds	r3, #4
 8005236:	4619      	mov	r1, r3
 8005238:	4610      	mov	r0, r2
 800523a:	f7fe fdd4 	bl	8003de6 <vListInsertEnd>
 800523e:	e005      	b.n	800524c <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	3318      	adds	r3, #24
 8005244:	4619      	mov	r1, r3
 8005246:	480e      	ldr	r0, [pc, #56]	; (8005280 <xTaskRemoveFromEventList+0xb8>)
 8005248:	f7fe fdcd 	bl	8003de6 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005250:	4b0c      	ldr	r3, [pc, #48]	; (8005284 <xTaskRemoveFromEventList+0xbc>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005256:	429a      	cmp	r2, r3
 8005258:	d905      	bls.n	8005266 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800525a:	2301      	movs	r3, #1
 800525c:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800525e:	4b0a      	ldr	r3, [pc, #40]	; (8005288 <xTaskRemoveFromEventList+0xc0>)
 8005260:	2201      	movs	r2, #1
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	e001      	b.n	800526a <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8005266:	2300      	movs	r3, #0
 8005268:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800526a:	697b      	ldr	r3, [r7, #20]
}
 800526c:	4618      	mov	r0, r3
 800526e:	3718      	adds	r7, #24
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	20000148 	.word	0x20000148
 8005278:	20000128 	.word	0x20000128
 800527c:	2000004c 	.word	0x2000004c
 8005280:	200000e0 	.word	0x200000e0
 8005284:	20000048 	.word	0x20000048
 8005288:	20000134 	.word	0x20000134

0800528c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005294:	4b06      	ldr	r3, [pc, #24]	; (80052b0 <vTaskInternalSetTimeOutState+0x24>)
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800529c:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <vTaskInternalSetTimeOutState+0x28>)
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	605a      	str	r2, [r3, #4]
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr
 80052b0:	20000138 	.word	0x20000138
 80052b4:	20000124 	.word	0x20000124

080052b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b088      	sub	sp, #32
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10a      	bne.n	80052de <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80052c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052cc:	f383 8811 	msr	BASEPRI, r3
 80052d0:	f3bf 8f6f 	isb	sy
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	613b      	str	r3, [r7, #16]
    }
 80052da:	bf00      	nop
 80052dc:	e7fe      	b.n	80052dc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10a      	bne.n	80052fa <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80052e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e8:	f383 8811 	msr	BASEPRI, r3
 80052ec:	f3bf 8f6f 	isb	sy
 80052f0:	f3bf 8f4f 	dsb	sy
 80052f4:	60fb      	str	r3, [r7, #12]
    }
 80052f6:	bf00      	nop
 80052f8:	e7fe      	b.n	80052f8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80052fa:	f001 f91d 	bl	8006538 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80052fe:	4b1f      	ldr	r3, [pc, #124]	; (800537c <xTaskCheckForTimeOut+0xc4>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	69ba      	ldr	r2, [r7, #24]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005316:	d102      	bne.n	800531e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005318:	2300      	movs	r3, #0
 800531a:	61fb      	str	r3, [r7, #28]
 800531c:	e026      	b.n	800536c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	4b17      	ldr	r3, [pc, #92]	; (8005380 <xTaskCheckForTimeOut+0xc8>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	429a      	cmp	r2, r3
 8005328:	d00a      	beq.n	8005340 <xTaskCheckForTimeOut+0x88>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	69ba      	ldr	r2, [r7, #24]
 8005330:	429a      	cmp	r2, r3
 8005332:	d305      	bcc.n	8005340 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005334:	2301      	movs	r3, #1
 8005336:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	2200      	movs	r2, #0
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	e015      	b.n	800536c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	429a      	cmp	r2, r3
 8005348:	d20b      	bcs.n	8005362 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	1ad2      	subs	r2, r2, r3
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7ff ff98 	bl	800528c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800535c:	2300      	movs	r3, #0
 800535e:	61fb      	str	r3, [r7, #28]
 8005360:	e004      	b.n	800536c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2200      	movs	r2, #0
 8005366:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005368:	2301      	movs	r3, #1
 800536a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800536c:	f001 f914 	bl	8006598 <vPortExitCritical>

    return xReturn;
 8005370:	69fb      	ldr	r3, [r7, #28]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3720      	adds	r7, #32
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	20000124 	.word	0x20000124
 8005380:	20000138 	.word	0x20000138

08005384 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005384:	b480      	push	{r7}
 8005386:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005388:	4b03      	ldr	r3, [pc, #12]	; (8005398 <vTaskMissedYield+0x14>)
 800538a:	2201      	movs	r2, #1
 800538c:	601a      	str	r2, [r3, #0]
}
 800538e:	bf00      	nop
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	20000134 	.word	0x20000134

0800539c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80053a4:	f000 f852 	bl	800544c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80053a8:	4b06      	ldr	r3, [pc, #24]	; (80053c4 <prvIdleTask+0x28>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d9f9      	bls.n	80053a4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80053b0:	4b05      	ldr	r3, [pc, #20]	; (80053c8 <prvIdleTask+0x2c>)
 80053b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053b6:	601a      	str	r2, [r3, #0]
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80053c0:	e7f0      	b.n	80053a4 <prvIdleTask+0x8>
 80053c2:	bf00      	nop
 80053c4:	2000004c 	.word	0x2000004c
 80053c8:	e000ed04 	.word	0xe000ed04

080053cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053d2:	2300      	movs	r3, #0
 80053d4:	607b      	str	r3, [r7, #4]
 80053d6:	e00c      	b.n	80053f2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	4613      	mov	r3, r2
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4413      	add	r3, r2
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4a12      	ldr	r2, [pc, #72]	; (800542c <prvInitialiseTaskLists+0x60>)
 80053e4:	4413      	add	r3, r2
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7fe fcd0 	bl	8003d8c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	3301      	adds	r3, #1
 80053f0:	607b      	str	r3, [r7, #4]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b04      	cmp	r3, #4
 80053f6:	d9ef      	bls.n	80053d8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80053f8:	480d      	ldr	r0, [pc, #52]	; (8005430 <prvInitialiseTaskLists+0x64>)
 80053fa:	f7fe fcc7 	bl	8003d8c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80053fe:	480d      	ldr	r0, [pc, #52]	; (8005434 <prvInitialiseTaskLists+0x68>)
 8005400:	f7fe fcc4 	bl	8003d8c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005404:	480c      	ldr	r0, [pc, #48]	; (8005438 <prvInitialiseTaskLists+0x6c>)
 8005406:	f7fe fcc1 	bl	8003d8c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800540a:	480c      	ldr	r0, [pc, #48]	; (800543c <prvInitialiseTaskLists+0x70>)
 800540c:	f7fe fcbe 	bl	8003d8c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8005410:	480b      	ldr	r0, [pc, #44]	; (8005440 <prvInitialiseTaskLists+0x74>)
 8005412:	f7fe fcbb 	bl	8003d8c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005416:	4b0b      	ldr	r3, [pc, #44]	; (8005444 <prvInitialiseTaskLists+0x78>)
 8005418:	4a05      	ldr	r2, [pc, #20]	; (8005430 <prvInitialiseTaskLists+0x64>)
 800541a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800541c:	4b0a      	ldr	r3, [pc, #40]	; (8005448 <prvInitialiseTaskLists+0x7c>)
 800541e:	4a05      	ldr	r2, [pc, #20]	; (8005434 <prvInitialiseTaskLists+0x68>)
 8005420:	601a      	str	r2, [r3, #0]
}
 8005422:	bf00      	nop
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	2000004c 	.word	0x2000004c
 8005430:	200000b0 	.word	0x200000b0
 8005434:	200000c4 	.word	0x200000c4
 8005438:	200000e0 	.word	0x200000e0
 800543c:	200000f4 	.word	0x200000f4
 8005440:	2000010c 	.word	0x2000010c
 8005444:	200000d8 	.word	0x200000d8
 8005448:	200000dc 	.word	0x200000dc

0800544c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005452:	e019      	b.n	8005488 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8005454:	f001 f870 	bl	8006538 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005458:	4b10      	ldr	r3, [pc, #64]	; (800549c <prvCheckTasksWaitingTermination+0x50>)
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	3304      	adds	r3, #4
 8005464:	4618      	mov	r0, r3
 8005466:	f7fe fd1b 	bl	8003ea0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800546a:	4b0d      	ldr	r3, [pc, #52]	; (80054a0 <prvCheckTasksWaitingTermination+0x54>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	3b01      	subs	r3, #1
 8005470:	4a0b      	ldr	r2, [pc, #44]	; (80054a0 <prvCheckTasksWaitingTermination+0x54>)
 8005472:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8005474:	4b0b      	ldr	r3, [pc, #44]	; (80054a4 <prvCheckTasksWaitingTermination+0x58>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	3b01      	subs	r3, #1
 800547a:	4a0a      	ldr	r2, [pc, #40]	; (80054a4 <prvCheckTasksWaitingTermination+0x58>)
 800547c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800547e:	f001 f88b 	bl	8006598 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f810 	bl	80054a8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005488:	4b06      	ldr	r3, [pc, #24]	; (80054a4 <prvCheckTasksWaitingTermination+0x58>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1e1      	bne.n	8005454 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8005490:	bf00      	nop
 8005492:	bf00      	nop
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	200000f4 	.word	0x200000f4
 80054a0:	20000120 	.word	0x20000120
 80054a4:	20000108 	.word	0x20000108

080054a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b4:	4618      	mov	r0, r3
 80054b6:	f001 fa41 	bl	800693c <vPortFree>
                vPortFree( pxTCB );
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f001 fa3e 	bl	800693c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80054c0:	bf00      	nop
 80054c2:	3708      	adds	r7, #8
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80054c8:	b480      	push	{r7}
 80054ca:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054cc:	4b0a      	ldr	r3, [pc, #40]	; (80054f8 <prvResetNextTaskUnblockTime+0x30>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d104      	bne.n	80054e0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80054d6:	4b09      	ldr	r3, [pc, #36]	; (80054fc <prvResetNextTaskUnblockTime+0x34>)
 80054d8:	f04f 32ff 	mov.w	r2, #4294967295
 80054dc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80054de:	e005      	b.n	80054ec <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80054e0:	4b05      	ldr	r3, [pc, #20]	; (80054f8 <prvResetNextTaskUnblockTime+0x30>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a04      	ldr	r2, [pc, #16]	; (80054fc <prvResetNextTaskUnblockTime+0x34>)
 80054ea:	6013      	str	r3, [r2, #0]
}
 80054ec:	bf00      	nop
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	200000d8 	.word	0x200000d8
 80054fc:	20000140 	.word	0x20000140

08005500 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005506:	4b0b      	ldr	r3, [pc, #44]	; (8005534 <xTaskGetSchedulerState+0x34>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d102      	bne.n	8005514 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800550e:	2301      	movs	r3, #1
 8005510:	607b      	str	r3, [r7, #4]
 8005512:	e008      	b.n	8005526 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005514:	4b08      	ldr	r3, [pc, #32]	; (8005538 <xTaskGetSchedulerState+0x38>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d102      	bne.n	8005522 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800551c:	2302      	movs	r3, #2
 800551e:	607b      	str	r3, [r7, #4]
 8005520:	e001      	b.n	8005526 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005522:	2300      	movs	r3, #0
 8005524:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005526:	687b      	ldr	r3, [r7, #4]
    }
 8005528:	4618      	mov	r0, r3
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr
 8005534:	2000012c 	.word	0x2000012c
 8005538:	20000148 	.word	0x20000148

0800553c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005548:	2300      	movs	r3, #0
 800554a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d063      	beq.n	800561a <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005552:	4b34      	ldr	r3, [pc, #208]	; (8005624 <xTaskPriorityDisinherit+0xe8>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	429a      	cmp	r2, r3
 800555a:	d00a      	beq.n	8005572 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 800555c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005560:	f383 8811 	msr	BASEPRI, r3
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	60fb      	str	r3, [r7, #12]
    }
 800556e:	bf00      	nop
 8005570:	e7fe      	b.n	8005570 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10a      	bne.n	8005590 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800557a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557e:	f383 8811 	msr	BASEPRI, r3
 8005582:	f3bf 8f6f 	isb	sy
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	60bb      	str	r3, [r7, #8]
    }
 800558c:	bf00      	nop
 800558e:	e7fe      	b.n	800558e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005594:	1e5a      	subs	r2, r3, #1
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d039      	beq.n	800561a <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d135      	bne.n	800561a <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	3304      	adds	r3, #4
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fe fc74 	bl	8003ea0 <uxListRemove>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10a      	bne.n	80055d4 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c2:	2201      	movs	r2, #1
 80055c4:	fa02 f303 	lsl.w	r3, r2, r3
 80055c8:	43da      	mvns	r2, r3
 80055ca:	4b17      	ldr	r3, [pc, #92]	; (8005628 <xTaskPriorityDisinherit+0xec>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4013      	ands	r3, r2
 80055d0:	4a15      	ldr	r2, [pc, #84]	; (8005628 <xTaskPriorityDisinherit+0xec>)
 80055d2:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e0:	f1c3 0205 	rsb	r2, r3, #5
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ec:	2201      	movs	r2, #1
 80055ee:	409a      	lsls	r2, r3
 80055f0:	4b0d      	ldr	r3, [pc, #52]	; (8005628 <xTaskPriorityDisinherit+0xec>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	4a0c      	ldr	r2, [pc, #48]	; (8005628 <xTaskPriorityDisinherit+0xec>)
 80055f8:	6013      	str	r3, [r2, #0]
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055fe:	4613      	mov	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	4413      	add	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4a09      	ldr	r2, [pc, #36]	; (800562c <xTaskPriorityDisinherit+0xf0>)
 8005608:	441a      	add	r2, r3
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	3304      	adds	r3, #4
 800560e:	4619      	mov	r1, r3
 8005610:	4610      	mov	r0, r2
 8005612:	f7fe fbe8 	bl	8003de6 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005616:	2301      	movs	r3, #1
 8005618:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800561a:	697b      	ldr	r3, [r7, #20]
    }
 800561c:	4618      	mov	r0, r3
 800561e:	3718      	adds	r7, #24
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	20000048 	.word	0x20000048
 8005628:	20000128 	.word	0x20000128
 800562c:	2000004c 	.word	0x2000004c

08005630 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
 800563c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00a      	beq.n	800565a <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8005644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005648:	f383 8811 	msr	BASEPRI, r3
 800564c:	f3bf 8f6f 	isb	sy
 8005650:	f3bf 8f4f 	dsb	sy
 8005654:	613b      	str	r3, [r7, #16]
    }
 8005656:	bf00      	nop
 8005658:	e7fe      	b.n	8005658 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800565a:	f000 ff6d 	bl	8006538 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800565e:	4b32      	ldr	r3, [pc, #200]	; (8005728 <xTaskGenericNotifyWait+0xf8>)
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	4413      	add	r3, r2
 8005666:	3354      	adds	r3, #84	; 0x54
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b02      	cmp	r3, #2
 800566e:	d022      	beq.n	80056b6 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8005670:	4b2d      	ldr	r3, [pc, #180]	; (8005728 <xTaskGenericNotifyWait+0xf8>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	3214      	adds	r2, #20
 8005678:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	43d2      	mvns	r2, r2
 8005680:	4011      	ands	r1, r2
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	3214      	adds	r2, #20
 8005686:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800568a:	4b27      	ldr	r3, [pc, #156]	; (8005728 <xTaskGenericNotifyWait+0xf8>)
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	4413      	add	r3, r2
 8005692:	3354      	adds	r3, #84	; 0x54
 8005694:	2201      	movs	r2, #1
 8005696:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8005698:	6a3b      	ldr	r3, [r7, #32]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00b      	beq.n	80056b6 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800569e:	2101      	movs	r1, #1
 80056a0:	6a38      	ldr	r0, [r7, #32]
 80056a2:	f000 fa27 	bl	8005af4 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80056a6:	4b21      	ldr	r3, [pc, #132]	; (800572c <xTaskGenericNotifyWait+0xfc>)
 80056a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ac:	601a      	str	r2, [r3, #0]
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80056b6:	f000 ff6f 	bl	8006598 <vPortExitCritical>

        taskENTER_CRITICAL();
 80056ba:	f000 ff3d 	bl	8006538 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d007      	beq.n	80056d4 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80056c4:	4b18      	ldr	r3, [pc, #96]	; (8005728 <xTaskGenericNotifyWait+0xf8>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	3214      	adds	r2, #20
 80056cc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80056d4:	4b14      	ldr	r3, [pc, #80]	; (8005728 <xTaskGenericNotifyWait+0xf8>)
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4413      	add	r3, r2
 80056dc:	3354      	adds	r3, #84	; 0x54
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d002      	beq.n	80056ec <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80056e6:	2300      	movs	r3, #0
 80056e8:	617b      	str	r3, [r7, #20]
 80056ea:	e00e      	b.n	800570a <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80056ec:	4b0e      	ldr	r3, [pc, #56]	; (8005728 <xTaskGenericNotifyWait+0xf8>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	3214      	adds	r2, #20
 80056f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	43d2      	mvns	r2, r2
 80056fc:	4011      	ands	r1, r2
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	3214      	adds	r2, #20
 8005702:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8005706:	2301      	movs	r3, #1
 8005708:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800570a:	4b07      	ldr	r3, [pc, #28]	; (8005728 <xTaskGenericNotifyWait+0xf8>)
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	4413      	add	r3, r2
 8005712:	3354      	adds	r3, #84	; 0x54
 8005714:	2200      	movs	r2, #0
 8005716:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8005718:	f000 ff3e 	bl	8006598 <vPortExitCritical>

        return xReturn;
 800571c:	697b      	ldr	r3, [r7, #20]
    }
 800571e:	4618      	mov	r0, r3
 8005720:	3718      	adds	r7, #24
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	20000048 	.word	0x20000048
 800572c:	e000ed04 	.word	0xe000ed04

08005730 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8005730:	b580      	push	{r7, lr}
 8005732:	b08c      	sub	sp, #48	; 0x30
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
 800573c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800573e:	2301      	movs	r3, #1
 8005740:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00a      	beq.n	800575e <xTaskGenericNotify+0x2e>
        __asm volatile
 8005748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574c:	f383 8811 	msr	BASEPRI, r3
 8005750:	f3bf 8f6f 	isb	sy
 8005754:	f3bf 8f4f 	dsb	sy
 8005758:	623b      	str	r3, [r7, #32]
    }
 800575a:	bf00      	nop
 800575c:	e7fe      	b.n	800575c <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10a      	bne.n	800577a <xTaskGenericNotify+0x4a>
        __asm volatile
 8005764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005768:	f383 8811 	msr	BASEPRI, r3
 800576c:	f3bf 8f6f 	isb	sy
 8005770:	f3bf 8f4f 	dsb	sy
 8005774:	61fb      	str	r3, [r7, #28]
    }
 8005776:	bf00      	nop
 8005778:	e7fe      	b.n	8005778 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 800577e:	f000 fedb 	bl	8006538 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8005782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005784:	2b00      	cmp	r3, #0
 8005786:	d006      	beq.n	8005796 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	3214      	adds	r2, #20
 800578e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005794:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005796:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	4413      	add	r3, r2
 800579c:	3354      	adds	r3, #84	; 0x54
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80057a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	4413      	add	r3, r2
 80057aa:	3354      	adds	r3, #84	; 0x54
 80057ac:	2202      	movs	r2, #2
 80057ae:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80057b0:	78fb      	ldrb	r3, [r7, #3]
 80057b2:	2b04      	cmp	r3, #4
 80057b4:	d83b      	bhi.n	800582e <xTaskGenericNotify+0xfe>
 80057b6:	a201      	add	r2, pc, #4	; (adr r2, 80057bc <xTaskGenericNotify+0x8c>)
 80057b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057bc:	0800584d 	.word	0x0800584d
 80057c0:	080057d1 	.word	0x080057d1
 80057c4:	080057ed 	.word	0x080057ed
 80057c8:	08005805 	.word	0x08005805
 80057cc:	08005813 	.word	0x08005813
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80057d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	3214      	adds	r2, #20
 80057d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	ea42 0103 	orr.w	r1, r2, r3
 80057e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	3214      	adds	r2, #20
 80057e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80057ea:	e032      	b.n	8005852 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80057ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	3214      	adds	r2, #20
 80057f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057f6:	1c59      	adds	r1, r3, #1
 80057f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	3214      	adds	r2, #20
 80057fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005802:	e026      	b.n	8005852 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	3214      	adds	r2, #20
 800580a:	6879      	ldr	r1, [r7, #4]
 800580c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005810:	e01f      	b.n	8005852 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005812:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005816:	2b02      	cmp	r3, #2
 8005818:	d006      	beq.n	8005828 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800581a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	3214      	adds	r2, #20
 8005820:	6879      	ldr	r1, [r7, #4]
 8005822:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8005826:	e014      	b.n	8005852 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8005828:	2300      	movs	r3, #0
 800582a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 800582c:	e011      	b.n	8005852 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800582e:	4b2b      	ldr	r3, [pc, #172]	; (80058dc <xTaskGenericNotify+0x1ac>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00c      	beq.n	8005850 <xTaskGenericNotify+0x120>
        __asm volatile
 8005836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583a:	f383 8811 	msr	BASEPRI, r3
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	61bb      	str	r3, [r7, #24]
    }
 8005848:	bf00      	nop
 800584a:	e7fe      	b.n	800584a <xTaskGenericNotify+0x11a>
                    break;
 800584c:	bf00      	nop
 800584e:	e000      	b.n	8005852 <xTaskGenericNotify+0x122>

                    break;
 8005850:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005852:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005856:	2b01      	cmp	r3, #1
 8005858:	d139      	bne.n	80058ce <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800585a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585c:	3304      	adds	r3, #4
 800585e:	4618      	mov	r0, r3
 8005860:	f7fe fb1e 	bl	8003ea0 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8005864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005868:	2201      	movs	r2, #1
 800586a:	409a      	lsls	r2, r3
 800586c:	4b1c      	ldr	r3, [pc, #112]	; (80058e0 <xTaskGenericNotify+0x1b0>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4313      	orrs	r3, r2
 8005872:	4a1b      	ldr	r2, [pc, #108]	; (80058e0 <xTaskGenericNotify+0x1b0>)
 8005874:	6013      	str	r3, [r2, #0]
 8005876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800587a:	4613      	mov	r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4413      	add	r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	4a18      	ldr	r2, [pc, #96]	; (80058e4 <xTaskGenericNotify+0x1b4>)
 8005884:	441a      	add	r2, r3
 8005886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005888:	3304      	adds	r3, #4
 800588a:	4619      	mov	r1, r3
 800588c:	4610      	mov	r0, r2
 800588e:	f7fe faaa 	bl	8003de6 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00a      	beq.n	80058b0 <xTaskGenericNotify+0x180>
        __asm volatile
 800589a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589e:	f383 8811 	msr	BASEPRI, r3
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	617b      	str	r3, [r7, #20]
    }
 80058ac:	bf00      	nop
 80058ae:	e7fe      	b.n	80058ae <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80058b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b4:	4b0c      	ldr	r3, [pc, #48]	; (80058e8 <xTaskGenericNotify+0x1b8>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d907      	bls.n	80058ce <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80058be:	4b0b      	ldr	r3, [pc, #44]	; (80058ec <xTaskGenericNotify+0x1bc>)
 80058c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058c4:	601a      	str	r2, [r3, #0]
 80058c6:	f3bf 8f4f 	dsb	sy
 80058ca:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80058ce:	f000 fe63 	bl	8006598 <vPortExitCritical>

        return xReturn;
 80058d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80058d4:	4618      	mov	r0, r3
 80058d6:	3730      	adds	r7, #48	; 0x30
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	20000124 	.word	0x20000124
 80058e0:	20000128 	.word	0x20000128
 80058e4:	2000004c 	.word	0x2000004c
 80058e8:	20000048 	.word	0x20000048
 80058ec:	e000ed04 	.word	0xe000ed04

080058f0 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b090      	sub	sp, #64	; 0x40
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
 80058fc:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80058fe:	2301      	movs	r3, #1
 8005900:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10a      	bne.n	800591e <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8005908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590c:	f383 8811 	msr	BASEPRI, r3
 8005910:	f3bf 8f6f 	isb	sy
 8005914:	f3bf 8f4f 	dsb	sy
 8005918:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 800591a:	bf00      	nop
 800591c:	e7fe      	b.n	800591c <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00a      	beq.n	800593a <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8005924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005928:	f383 8811 	msr	BASEPRI, r3
 800592c:	f3bf 8f6f 	isb	sy
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005936:	bf00      	nop
 8005938:	e7fe      	b.n	8005938 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800593a:	f000 fedf 	bl	80066fc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8005942:	f3ef 8211 	mrs	r2, BASEPRI
 8005946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594a:	f383 8811 	msr	BASEPRI, r3
 800594e:	f3bf 8f6f 	isb	sy
 8005952:	f3bf 8f4f 	dsb	sy
 8005956:	627a      	str	r2, [r7, #36]	; 0x24
 8005958:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 800595a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800595c:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 800595e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005960:	2b00      	cmp	r3, #0
 8005962:	d006      	beq.n	8005972 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	3214      	adds	r2, #20
 800596a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800596e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005970:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005972:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	4413      	add	r3, r2
 8005978:	3354      	adds	r3, #84	; 0x54
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8005980:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	4413      	add	r3, r2
 8005986:	3354      	adds	r3, #84	; 0x54
 8005988:	2202      	movs	r2, #2
 800598a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800598c:	78fb      	ldrb	r3, [r7, #3]
 800598e:	2b04      	cmp	r3, #4
 8005990:	d83b      	bhi.n	8005a0a <xTaskGenericNotifyFromISR+0x11a>
 8005992:	a201      	add	r2, pc, #4	; (adr r2, 8005998 <xTaskGenericNotifyFromISR+0xa8>)
 8005994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005998:	08005a29 	.word	0x08005a29
 800599c:	080059ad 	.word	0x080059ad
 80059a0:	080059c9 	.word	0x080059c9
 80059a4:	080059e1 	.word	0x080059e1
 80059a8:	080059ef 	.word	0x080059ef
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80059ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	3214      	adds	r2, #20
 80059b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	ea42 0103 	orr.w	r1, r2, r3
 80059bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	3214      	adds	r2, #20
 80059c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80059c6:	e032      	b.n	8005a2e <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80059c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	3214      	adds	r2, #20
 80059ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059d2:	1c59      	adds	r1, r3, #1
 80059d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	3214      	adds	r2, #20
 80059da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80059de:	e026      	b.n	8005a2e <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80059e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	3214      	adds	r2, #20
 80059e6:	6879      	ldr	r1, [r7, #4]
 80059e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80059ec:	e01f      	b.n	8005a2e <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80059ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d006      	beq.n	8005a04 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80059f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	3214      	adds	r2, #20
 80059fc:	6879      	ldr	r1, [r7, #4]
 80059fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8005a02:	e014      	b.n	8005a2e <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8005a04:	2300      	movs	r3, #0
 8005a06:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8005a08:	e011      	b.n	8005a2e <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8005a0a:	4b33      	ldr	r3, [pc, #204]	; (8005ad8 <xTaskGenericNotifyFromISR+0x1e8>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00c      	beq.n	8005a2c <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8005a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a16:	f383 8811 	msr	BASEPRI, r3
 8005a1a:	f3bf 8f6f 	isb	sy
 8005a1e:	f3bf 8f4f 	dsb	sy
 8005a22:	61fb      	str	r3, [r7, #28]
    }
 8005a24:	bf00      	nop
 8005a26:	e7fe      	b.n	8005a26 <xTaskGenericNotifyFromISR+0x136>
                    break;
 8005a28:	bf00      	nop
 8005a2a:	e000      	b.n	8005a2e <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8005a2c:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005a2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d145      	bne.n	8005ac2 <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00a      	beq.n	8005a54 <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 8005a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a42:	f383 8811 	msr	BASEPRI, r3
 8005a46:	f3bf 8f6f 	isb	sy
 8005a4a:	f3bf 8f4f 	dsb	sy
 8005a4e:	61bb      	str	r3, [r7, #24]
    }
 8005a50:	bf00      	nop
 8005a52:	e7fe      	b.n	8005a52 <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a54:	4b21      	ldr	r3, [pc, #132]	; (8005adc <xTaskGenericNotifyFromISR+0x1ec>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d11c      	bne.n	8005a96 <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5e:	3304      	adds	r3, #4
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7fe fa1d 	bl	8003ea0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	409a      	lsls	r2, r3
 8005a6e:	4b1c      	ldr	r3, [pc, #112]	; (8005ae0 <xTaskGenericNotifyFromISR+0x1f0>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	4a1a      	ldr	r2, [pc, #104]	; (8005ae0 <xTaskGenericNotifyFromISR+0x1f0>)
 8005a76:	6013      	str	r3, [r2, #0]
 8005a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4413      	add	r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	4a17      	ldr	r2, [pc, #92]	; (8005ae4 <xTaskGenericNotifyFromISR+0x1f4>)
 8005a86:	441a      	add	r2, r3
 8005a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8a:	3304      	adds	r3, #4
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	4610      	mov	r0, r2
 8005a90:	f7fe f9a9 	bl	8003de6 <vListInsertEnd>
 8005a94:	e005      	b.n	8005aa2 <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a98:	3318      	adds	r3, #24
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	4812      	ldr	r0, [pc, #72]	; (8005ae8 <xTaskGenericNotifyFromISR+0x1f8>)
 8005a9e:	f7fe f9a2 	bl	8003de6 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa6:	4b11      	ldr	r3, [pc, #68]	; (8005aec <xTaskGenericNotifyFromISR+0x1fc>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d908      	bls.n	8005ac2 <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8005ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d002      	beq.n	8005abc <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8005ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ab8:	2201      	movs	r2, #1
 8005aba:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8005abc:	4b0c      	ldr	r3, [pc, #48]	; (8005af0 <xTaskGenericNotifyFromISR+0x200>)
 8005abe:	2201      	movs	r2, #1
 8005ac0:	601a      	str	r2, [r3, #0]
 8005ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac4:	617b      	str	r3, [r7, #20]
        __asm volatile
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f383 8811 	msr	BASEPRI, r3
    }
 8005acc:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8005ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3740      	adds	r7, #64	; 0x40
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	20000124 	.word	0x20000124
 8005adc:	20000148 	.word	0x20000148
 8005ae0:	20000128 	.word	0x20000128
 8005ae4:	2000004c 	.word	0x2000004c
 8005ae8:	200000e0 	.word	0x200000e0
 8005aec:	20000048 	.word	0x20000048
 8005af0:	20000134 	.word	0x20000134

08005af4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8005afe:	4b29      	ldr	r3, [pc, #164]	; (8005ba4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b04:	4b28      	ldr	r3, [pc, #160]	; (8005ba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	3304      	adds	r3, #4
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7fe f9c8 	bl	8003ea0 <uxListRemove>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d10b      	bne.n	8005b2e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005b16:	4b24      	ldr	r3, [pc, #144]	; (8005ba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b22:	43da      	mvns	r2, r3
 8005b24:	4b21      	ldr	r3, [pc, #132]	; (8005bac <prvAddCurrentTaskToDelayedList+0xb8>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4013      	ands	r3, r2
 8005b2a:	4a20      	ldr	r2, [pc, #128]	; (8005bac <prvAddCurrentTaskToDelayedList+0xb8>)
 8005b2c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b34:	d10a      	bne.n	8005b4c <prvAddCurrentTaskToDelayedList+0x58>
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d007      	beq.n	8005b4c <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b3c:	4b1a      	ldr	r3, [pc, #104]	; (8005ba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	3304      	adds	r3, #4
 8005b42:	4619      	mov	r1, r3
 8005b44:	481a      	ldr	r0, [pc, #104]	; (8005bb0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005b46:	f7fe f94e 	bl	8003de6 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005b4a:	e026      	b.n	8005b9a <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4413      	add	r3, r2
 8005b52:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b54:	4b14      	ldr	r3, [pc, #80]	; (8005ba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d209      	bcs.n	8005b78 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b64:	4b13      	ldr	r3, [pc, #76]	; (8005bb4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	4b0f      	ldr	r3, [pc, #60]	; (8005ba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	3304      	adds	r3, #4
 8005b6e:	4619      	mov	r1, r3
 8005b70:	4610      	mov	r0, r2
 8005b72:	f7fe f95c 	bl	8003e2e <vListInsert>
}
 8005b76:	e010      	b.n	8005b9a <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b78:	4b0f      	ldr	r3, [pc, #60]	; (8005bb8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	4b0a      	ldr	r3, [pc, #40]	; (8005ba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	3304      	adds	r3, #4
 8005b82:	4619      	mov	r1, r3
 8005b84:	4610      	mov	r0, r2
 8005b86:	f7fe f952 	bl	8003e2e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8005b8a:	4b0c      	ldr	r3, [pc, #48]	; (8005bbc <prvAddCurrentTaskToDelayedList+0xc8>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d202      	bcs.n	8005b9a <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8005b94:	4a09      	ldr	r2, [pc, #36]	; (8005bbc <prvAddCurrentTaskToDelayedList+0xc8>)
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	6013      	str	r3, [r2, #0]
}
 8005b9a:	bf00      	nop
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	20000124 	.word	0x20000124
 8005ba8:	20000048 	.word	0x20000048
 8005bac:	20000128 	.word	0x20000128
 8005bb0:	2000010c 	.word	0x2000010c
 8005bb4:	200000dc 	.word	0x200000dc
 8005bb8:	200000d8 	.word	0x200000d8
 8005bbc:	20000140 	.word	0x20000140

08005bc0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8005bca:	f000 fb31 	bl	8006230 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8005bce:	4b11      	ldr	r3, [pc, #68]	; (8005c14 <xTimerCreateTimerTask+0x54>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00b      	beq.n	8005bee <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8005bd6:	4b10      	ldr	r3, [pc, #64]	; (8005c18 <xTimerCreateTimerTask+0x58>)
 8005bd8:	9301      	str	r3, [sp, #4]
 8005bda:	2302      	movs	r3, #2
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	2300      	movs	r3, #0
 8005be0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005be4:	490d      	ldr	r1, [pc, #52]	; (8005c1c <xTimerCreateTimerTask+0x5c>)
 8005be6:	480e      	ldr	r0, [pc, #56]	; (8005c20 <xTimerCreateTimerTask+0x60>)
 8005be8:	f7fe ff38 	bl	8004a5c <xTaskCreate>
 8005bec:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10a      	bne.n	8005c0a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8005bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf8:	f383 8811 	msr	BASEPRI, r3
 8005bfc:	f3bf 8f6f 	isb	sy
 8005c00:	f3bf 8f4f 	dsb	sy
 8005c04:	603b      	str	r3, [r7, #0]
    }
 8005c06:	bf00      	nop
 8005c08:	e7fe      	b.n	8005c08 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8005c0a:	687b      	ldr	r3, [r7, #4]
    }
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3708      	adds	r7, #8
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	2000017c 	.word	0x2000017c
 8005c18:	20000180 	.word	0x20000180
 8005c1c:	08006e14 	.word	0x08006e14
 8005c20:	08005e11 	.word	0x08005e11

08005c24 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b088      	sub	sp, #32
 8005c28:	af02      	add	r7, sp, #8
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
 8005c30:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8005c32:	202c      	movs	r0, #44	; 0x2c
 8005c34:	f000 fda2 	bl	800677c <pvPortMalloc>
 8005c38:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00d      	beq.n	8005c5c <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	9301      	str	r3, [sp, #4]
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	9300      	str	r3, [sp, #0]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	68b9      	ldr	r1, [r7, #8]
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f000 f805 	bl	8005c66 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8005c5c:	697b      	ldr	r3, [r7, #20]
        }
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3718      	adds	r7, #24
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b086      	sub	sp, #24
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	60f8      	str	r0, [r7, #12]
 8005c6e:	60b9      	str	r1, [r7, #8]
 8005c70:	607a      	str	r2, [r7, #4]
 8005c72:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10a      	bne.n	8005c90 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8005c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7e:	f383 8811 	msr	BASEPRI, r3
 8005c82:	f3bf 8f6f 	isb	sy
 8005c86:	f3bf 8f4f 	dsb	sy
 8005c8a:	617b      	str	r3, [r7, #20]
    }
 8005c8c:	bf00      	nop
 8005c8e:	e7fe      	b.n	8005c8e <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d01e      	beq.n	8005cd4 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8005c96:	f000 facb 	bl	8006230 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cae:	6a3a      	ldr	r2, [r7, #32]
 8005cb0:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7fe f888 	bl	8003dcc <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d008      	beq.n	8005cd4 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cc8:	f043 0304 	orr.w	r3, r3, #4
 8005ccc:	b2da      	uxtb	r2, r3
 8005cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8005cd4:	bf00      	nop
 8005cd6:	3718      	adds	r7, #24
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b08a      	sub	sp, #40	; 0x28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
 8005ce8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8005cea:	2300      	movs	r3, #0
 8005cec:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10a      	bne.n	8005d0a <xTimerGenericCommand+0x2e>
        __asm volatile
 8005cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf8:	f383 8811 	msr	BASEPRI, r3
 8005cfc:	f3bf 8f6f 	isb	sy
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	623b      	str	r3, [r7, #32]
    }
 8005d06:	bf00      	nop
 8005d08:	e7fe      	b.n	8005d08 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8005d0a:	4b1a      	ldr	r3, [pc, #104]	; (8005d74 <xTimerGenericCommand+0x98>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d02a      	beq.n	8005d68 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	2b05      	cmp	r3, #5
 8005d22:	dc18      	bgt.n	8005d56 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005d24:	f7ff fbec 	bl	8005500 <xTaskGetSchedulerState>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d109      	bne.n	8005d42 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005d2e:	4b11      	ldr	r3, [pc, #68]	; (8005d74 <xTimerGenericCommand+0x98>)
 8005d30:	6818      	ldr	r0, [r3, #0]
 8005d32:	f107 0114 	add.w	r1, r7, #20
 8005d36:	2300      	movs	r3, #0
 8005d38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d3a:	f7fe f9c5 	bl	80040c8 <xQueueGenericSend>
 8005d3e:	6278      	str	r0, [r7, #36]	; 0x24
 8005d40:	e012      	b.n	8005d68 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005d42:	4b0c      	ldr	r3, [pc, #48]	; (8005d74 <xTimerGenericCommand+0x98>)
 8005d44:	6818      	ldr	r0, [r3, #0]
 8005d46:	f107 0114 	add.w	r1, r7, #20
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f7fe f9bb 	bl	80040c8 <xQueueGenericSend>
 8005d52:	6278      	str	r0, [r7, #36]	; 0x24
 8005d54:	e008      	b.n	8005d68 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005d56:	4b07      	ldr	r3, [pc, #28]	; (8005d74 <xTimerGenericCommand+0x98>)
 8005d58:	6818      	ldr	r0, [r3, #0]
 8005d5a:	f107 0114 	add.w	r1, r7, #20
 8005d5e:	2300      	movs	r3, #0
 8005d60:	683a      	ldr	r2, [r7, #0]
 8005d62:	f7fe faaf 	bl	80042c4 <xQueueGenericSendFromISR>
 8005d66:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3728      	adds	r7, #40	; 0x28
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	2000017c 	.word	0x2000017c

08005d78 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b088      	sub	sp, #32
 8005d7c:	af02      	add	r7, sp, #8
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d82:	4b22      	ldr	r3, [pc, #136]	; (8005e0c <prvProcessExpiredTimer+0x94>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	3304      	adds	r3, #4
 8005d90:	4618      	mov	r0, r3
 8005d92:	f7fe f885 	bl	8003ea0 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d9c:	f003 0304 	and.w	r3, r3, #4
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d022      	beq.n	8005dea <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	699a      	ldr	r2, [r3, #24]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	18d1      	adds	r1, r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	683a      	ldr	r2, [r7, #0]
 8005db0:	6978      	ldr	r0, [r7, #20]
 8005db2:	f000 f8d1 	bl	8005f58 <prvInsertTimerInActiveList>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d01f      	beq.n	8005dfc <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	2100      	movs	r1, #0
 8005dc6:	6978      	ldr	r0, [r7, #20]
 8005dc8:	f7ff ff88 	bl	8005cdc <xTimerGenericCommand>
 8005dcc:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d113      	bne.n	8005dfc <prvProcessExpiredTimer+0x84>
        __asm volatile
 8005dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd8:	f383 8811 	msr	BASEPRI, r3
 8005ddc:	f3bf 8f6f 	isb	sy
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	60fb      	str	r3, [r7, #12]
    }
 8005de6:	bf00      	nop
 8005de8:	e7fe      	b.n	8005de8 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005df0:	f023 0301 	bic.w	r3, r3, #1
 8005df4:	b2da      	uxtb	r2, r3
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	6a1b      	ldr	r3, [r3, #32]
 8005e00:	6978      	ldr	r0, [r7, #20]
 8005e02:	4798      	blx	r3
    }
 8005e04:	bf00      	nop
 8005e06:	3718      	adds	r7, #24
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	20000174 	.word	0x20000174

08005e10 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e18:	f107 0308 	add.w	r3, r7, #8
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f000 f857 	bl	8005ed0 <prvGetNextExpireTime>
 8005e22:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	4619      	mov	r1, r3
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f000 f803 	bl	8005e34 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8005e2e:	f000 f8d5 	bl	8005fdc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e32:	e7f1      	b.n	8005e18 <prvTimerTask+0x8>

08005e34 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8005e3e:	f7fe ffa5 	bl	8004d8c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e42:	f107 0308 	add.w	r3, r7, #8
 8005e46:	4618      	mov	r0, r3
 8005e48:	f000 f866 	bl	8005f18 <prvSampleTimeNow>
 8005e4c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d130      	bne.n	8005eb6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10a      	bne.n	8005e70 <prvProcessTimerOrBlockTask+0x3c>
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d806      	bhi.n	8005e70 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8005e62:	f7fe ffa1 	bl	8004da8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005e66:	68f9      	ldr	r1, [r7, #12]
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f7ff ff85 	bl	8005d78 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8005e6e:	e024      	b.n	8005eba <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d008      	beq.n	8005e88 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005e76:	4b13      	ldr	r3, [pc, #76]	; (8005ec4 <prvProcessTimerOrBlockTask+0x90>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d101      	bne.n	8005e84 <prvProcessTimerOrBlockTask+0x50>
 8005e80:	2301      	movs	r3, #1
 8005e82:	e000      	b.n	8005e86 <prvProcessTimerOrBlockTask+0x52>
 8005e84:	2300      	movs	r3, #0
 8005e86:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005e88:	4b0f      	ldr	r3, [pc, #60]	; (8005ec8 <prvProcessTimerOrBlockTask+0x94>)
 8005e8a:	6818      	ldr	r0, [r3, #0]
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	683a      	ldr	r2, [r7, #0]
 8005e94:	4619      	mov	r1, r3
 8005e96:	f7fe fdad 	bl	80049f4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8005e9a:	f7fe ff85 	bl	8004da8 <xTaskResumeAll>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10a      	bne.n	8005eba <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8005ea4:	4b09      	ldr	r3, [pc, #36]	; (8005ecc <prvProcessTimerOrBlockTask+0x98>)
 8005ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eaa:	601a      	str	r2, [r3, #0]
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	f3bf 8f6f 	isb	sy
    }
 8005eb4:	e001      	b.n	8005eba <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8005eb6:	f7fe ff77 	bl	8004da8 <xTaskResumeAll>
    }
 8005eba:	bf00      	nop
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	20000178 	.word	0x20000178
 8005ec8:	2000017c 	.word	0x2000017c
 8005ecc:	e000ed04 	.word	0xe000ed04

08005ed0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005ed8:	4b0e      	ldr	r3, [pc, #56]	; (8005f14 <prvGetNextExpireTime+0x44>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <prvGetNextExpireTime+0x16>
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	e000      	b.n	8005ee8 <prvGetNextExpireTime+0x18>
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d105      	bne.n	8005f00 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ef4:	4b07      	ldr	r3, [pc, #28]	; (8005f14 <prvGetNextExpireTime+0x44>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	60fb      	str	r3, [r7, #12]
 8005efe:	e001      	b.n	8005f04 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005f00:	2300      	movs	r3, #0
 8005f02:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005f04:	68fb      	ldr	r3, [r7, #12]
    }
 8005f06:	4618      	mov	r0, r3
 8005f08:	3714      	adds	r7, #20
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	20000174 	.word	0x20000174

08005f18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005f20:	f7fe ffde 	bl	8004ee0 <xTaskGetTickCount>
 8005f24:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8005f26:	4b0b      	ldr	r3, [pc, #44]	; (8005f54 <prvSampleTimeNow+0x3c>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d205      	bcs.n	8005f3c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005f30:	f000 f91a 	bl	8006168 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	601a      	str	r2, [r3, #0]
 8005f3a:	e002      	b.n	8005f42 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005f42:	4a04      	ldr	r2, [pc, #16]	; (8005f54 <prvSampleTimeNow+0x3c>)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005f48:	68fb      	ldr	r3, [r7, #12]
    }
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	20000184 	.word	0x20000184

08005f58 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
 8005f64:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8005f66:	2300      	movs	r3, #0
 8005f68:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d812      	bhi.n	8005fa4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	1ad2      	subs	r2, r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d302      	bcc.n	8005f92 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	617b      	str	r3, [r7, #20]
 8005f90:	e01b      	b.n	8005fca <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005f92:	4b10      	ldr	r3, [pc, #64]	; (8005fd4 <prvInsertTimerInActiveList+0x7c>)
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	3304      	adds	r3, #4
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	4610      	mov	r0, r2
 8005f9e:	f7fd ff46 	bl	8003e2e <vListInsert>
 8005fa2:	e012      	b.n	8005fca <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d206      	bcs.n	8005fba <prvInsertTimerInActiveList+0x62>
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d302      	bcc.n	8005fba <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	617b      	str	r3, [r7, #20]
 8005fb8:	e007      	b.n	8005fca <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005fba:	4b07      	ldr	r3, [pc, #28]	; (8005fd8 <prvInsertTimerInActiveList+0x80>)
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	3304      	adds	r3, #4
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	4610      	mov	r0, r2
 8005fc6:	f7fd ff32 	bl	8003e2e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8005fca:	697b      	ldr	r3, [r7, #20]
    }
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3718      	adds	r7, #24
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	20000178 	.word	0x20000178
 8005fd8:	20000174 	.word	0x20000174

08005fdc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b08c      	sub	sp, #48	; 0x30
 8005fe0:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005fe2:	e0ae      	b.n	8006142 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f2c0 80aa 	blt.w	8006140 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d004      	beq.n	8006002 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffa:	3304      	adds	r3, #4
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7fd ff4f 	bl	8003ea0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006002:	1d3b      	adds	r3, r7, #4
 8006004:	4618      	mov	r0, r3
 8006006:	f7ff ff87 	bl	8005f18 <prvSampleTimeNow>
 800600a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	2b09      	cmp	r3, #9
 8006010:	f200 8097 	bhi.w	8006142 <prvProcessReceivedCommands+0x166>
 8006014:	a201      	add	r2, pc, #4	; (adr r2, 800601c <prvProcessReceivedCommands+0x40>)
 8006016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601a:	bf00      	nop
 800601c:	08006045 	.word	0x08006045
 8006020:	08006045 	.word	0x08006045
 8006024:	08006045 	.word	0x08006045
 8006028:	080060b9 	.word	0x080060b9
 800602c:	080060cd 	.word	0x080060cd
 8006030:	08006117 	.word	0x08006117
 8006034:	08006045 	.word	0x08006045
 8006038:	08006045 	.word	0x08006045
 800603c:	080060b9 	.word	0x080060b9
 8006040:	080060cd 	.word	0x080060cd
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006046:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800604a:	f043 0301 	orr.w	r3, r3, #1
 800604e:	b2da      	uxtb	r2, r3
 8006050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006052:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	18d1      	adds	r1, r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6a3a      	ldr	r2, [r7, #32]
 8006062:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006064:	f7ff ff78 	bl	8005f58 <prvInsertTimerInActiveList>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d069      	beq.n	8006142 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006074:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006078:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800607c:	f003 0304 	and.w	r3, r3, #4
 8006080:	2b00      	cmp	r3, #0
 8006082:	d05e      	beq.n	8006142 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	441a      	add	r2, r3
 800608c:	2300      	movs	r3, #0
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	2300      	movs	r3, #0
 8006092:	2100      	movs	r1, #0
 8006094:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006096:	f7ff fe21 	bl	8005cdc <xTimerGenericCommand>
 800609a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d14f      	bne.n	8006142 <prvProcessReceivedCommands+0x166>
        __asm volatile
 80060a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a6:	f383 8811 	msr	BASEPRI, r3
 80060aa:	f3bf 8f6f 	isb	sy
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	61bb      	str	r3, [r7, #24]
    }
 80060b4:	bf00      	nop
 80060b6:	e7fe      	b.n	80060b6 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80060b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060be:	f023 0301 	bic.w	r3, r3, #1
 80060c2:	b2da      	uxtb	r2, r3
 80060c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80060ca:	e03a      	b.n	8006142 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80060cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060d2:	f043 0301 	orr.w	r3, r3, #1
 80060d6:	b2da      	uxtb	r2, r3
 80060d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80060e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10a      	bne.n	8006102 <prvProcessReceivedCommands+0x126>
        __asm volatile
 80060ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f0:	f383 8811 	msr	BASEPRI, r3
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	617b      	str	r3, [r7, #20]
    }
 80060fe:	bf00      	nop
 8006100:	e7fe      	b.n	8006100 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006104:	699a      	ldr	r2, [r3, #24]
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	18d1      	adds	r1, r2, r3
 800610a:	6a3b      	ldr	r3, [r7, #32]
 800610c:	6a3a      	ldr	r2, [r7, #32]
 800610e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006110:	f7ff ff22 	bl	8005f58 <prvInsertTimerInActiveList>
                        break;
 8006114:	e015      	b.n	8006142 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006118:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800611c:	f003 0302 	and.w	r3, r3, #2
 8006120:	2b00      	cmp	r3, #0
 8006122:	d103      	bne.n	800612c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8006124:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006126:	f000 fc09 	bl	800693c <vPortFree>
 800612a:	e00a      	b.n	8006142 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006132:	f023 0301 	bic.w	r3, r3, #1
 8006136:	b2da      	uxtb	r2, r3
 8006138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800613e:	e000      	b.n	8006142 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8006140:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006142:	4b08      	ldr	r3, [pc, #32]	; (8006164 <prvProcessReceivedCommands+0x188>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f107 0108 	add.w	r1, r7, #8
 800614a:	2200      	movs	r2, #0
 800614c:	4618      	mov	r0, r3
 800614e:	f7fe f963 	bl	8004418 <xQueueReceive>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	f47f af45 	bne.w	8005fe4 <prvProcessReceivedCommands+0x8>
        }
    }
 800615a:	bf00      	nop
 800615c:	bf00      	nop
 800615e:	3728      	adds	r7, #40	; 0x28
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	2000017c 	.word	0x2000017c

08006168 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006168:	b580      	push	{r7, lr}
 800616a:	b088      	sub	sp, #32
 800616c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800616e:	e048      	b.n	8006202 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006170:	4b2d      	ldr	r3, [pc, #180]	; (8006228 <prvSwitchTimerLists+0xc0>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800617a:	4b2b      	ldr	r3, [pc, #172]	; (8006228 <prvSwitchTimerLists+0xc0>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	3304      	adds	r3, #4
 8006188:	4618      	mov	r0, r3
 800618a:	f7fd fe89 	bl	8003ea0 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800619c:	f003 0304 	and.w	r3, r3, #4
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d02e      	beq.n	8006202 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	699b      	ldr	r3, [r3, #24]
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	4413      	add	r3, r2
 80061ac:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d90e      	bls.n	80061d4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	68ba      	ldr	r2, [r7, #8]
 80061ba:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80061c2:	4b19      	ldr	r3, [pc, #100]	; (8006228 <prvSwitchTimerLists+0xc0>)
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	3304      	adds	r3, #4
 80061ca:	4619      	mov	r1, r3
 80061cc:	4610      	mov	r0, r2
 80061ce:	f7fd fe2e 	bl	8003e2e <vListInsert>
 80061d2:	e016      	b.n	8006202 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80061d4:	2300      	movs	r3, #0
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	2300      	movs	r3, #0
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	2100      	movs	r1, #0
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f7ff fd7c 	bl	8005cdc <xTimerGenericCommand>
 80061e4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10a      	bne.n	8006202 <prvSwitchTimerLists+0x9a>
        __asm volatile
 80061ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f0:	f383 8811 	msr	BASEPRI, r3
 80061f4:	f3bf 8f6f 	isb	sy
 80061f8:	f3bf 8f4f 	dsb	sy
 80061fc:	603b      	str	r3, [r7, #0]
    }
 80061fe:	bf00      	nop
 8006200:	e7fe      	b.n	8006200 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006202:	4b09      	ldr	r3, [pc, #36]	; (8006228 <prvSwitchTimerLists+0xc0>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1b1      	bne.n	8006170 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800620c:	4b06      	ldr	r3, [pc, #24]	; (8006228 <prvSwitchTimerLists+0xc0>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8006212:	4b06      	ldr	r3, [pc, #24]	; (800622c <prvSwitchTimerLists+0xc4>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a04      	ldr	r2, [pc, #16]	; (8006228 <prvSwitchTimerLists+0xc0>)
 8006218:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800621a:	4a04      	ldr	r2, [pc, #16]	; (800622c <prvSwitchTimerLists+0xc4>)
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	6013      	str	r3, [r2, #0]
    }
 8006220:	bf00      	nop
 8006222:	3718      	adds	r7, #24
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	20000174 	.word	0x20000174
 800622c:	20000178 	.word	0x20000178

08006230 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006230:	b580      	push	{r7, lr}
 8006232:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006234:	f000 f980 	bl	8006538 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006238:	4b12      	ldr	r3, [pc, #72]	; (8006284 <prvCheckForValidListAndQueue+0x54>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d11d      	bne.n	800627c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006240:	4811      	ldr	r0, [pc, #68]	; (8006288 <prvCheckForValidListAndQueue+0x58>)
 8006242:	f7fd fda3 	bl	8003d8c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8006246:	4811      	ldr	r0, [pc, #68]	; (800628c <prvCheckForValidListAndQueue+0x5c>)
 8006248:	f7fd fda0 	bl	8003d8c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800624c:	4b10      	ldr	r3, [pc, #64]	; (8006290 <prvCheckForValidListAndQueue+0x60>)
 800624e:	4a0e      	ldr	r2, [pc, #56]	; (8006288 <prvCheckForValidListAndQueue+0x58>)
 8006250:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006252:	4b10      	ldr	r3, [pc, #64]	; (8006294 <prvCheckForValidListAndQueue+0x64>)
 8006254:	4a0d      	ldr	r2, [pc, #52]	; (800628c <prvCheckForValidListAndQueue+0x5c>)
 8006256:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006258:	2200      	movs	r2, #0
 800625a:	210c      	movs	r1, #12
 800625c:	200a      	movs	r0, #10
 800625e:	f7fd feb1 	bl	8003fc4 <xQueueGenericCreate>
 8006262:	4603      	mov	r3, r0
 8006264:	4a07      	ldr	r2, [pc, #28]	; (8006284 <prvCheckForValidListAndQueue+0x54>)
 8006266:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8006268:	4b06      	ldr	r3, [pc, #24]	; (8006284 <prvCheckForValidListAndQueue+0x54>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d005      	beq.n	800627c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006270:	4b04      	ldr	r3, [pc, #16]	; (8006284 <prvCheckForValidListAndQueue+0x54>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4908      	ldr	r1, [pc, #32]	; (8006298 <prvCheckForValidListAndQueue+0x68>)
 8006276:	4618      	mov	r0, r3
 8006278:	f7fe fb92 	bl	80049a0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800627c:	f000 f98c 	bl	8006598 <vPortExitCritical>
    }
 8006280:	bf00      	nop
 8006282:	bd80      	pop	{r7, pc}
 8006284:	2000017c 	.word	0x2000017c
 8006288:	2000014c 	.word	0x2000014c
 800628c:	20000160 	.word	0x20000160
 8006290:	20000174 	.word	0x20000174
 8006294:	20000178 	.word	0x20000178
 8006298:	08006e1c 	.word	0x08006e1c

0800629c <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 800629c:	b580      	push	{r7, lr}
 800629e:	b086      	sub	sp, #24
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10a      	bne.n	80062c4 <pvTimerGetTimerID+0x28>
        __asm volatile
 80062ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b2:	f383 8811 	msr	BASEPRI, r3
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	60fb      	str	r3, [r7, #12]
    }
 80062c0:	bf00      	nop
 80062c2:	e7fe      	b.n	80062c2 <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 80062c4:	f000 f938 	bl	8006538 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	69db      	ldr	r3, [r3, #28]
 80062cc:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 80062ce:	f000 f963 	bl	8006598 <vPortExitCritical>

        return pvReturn;
 80062d2:	693b      	ldr	r3, [r7, #16]
    }
 80062d4:	4618      	mov	r0, r3
 80062d6:	3718      	adds	r7, #24
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	3b04      	subs	r3, #4
 80062ec:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80062f4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	3b04      	subs	r3, #4
 80062fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f023 0201 	bic.w	r2, r3, #1
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	3b04      	subs	r3, #4
 800630a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800630c:	4a0c      	ldr	r2, [pc, #48]	; (8006340 <pxPortInitialiseStack+0x64>)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	3b14      	subs	r3, #20
 8006316:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	3b04      	subs	r3, #4
 8006322:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f06f 0202 	mvn.w	r2, #2
 800632a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	3b20      	subs	r3, #32
 8006330:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006332:	68fb      	ldr	r3, [r7, #12]
}
 8006334:	4618      	mov	r0, r3
 8006336:	3714      	adds	r7, #20
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr
 8006340:	08006345 	.word	0x08006345

08006344 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006344:	b480      	push	{r7}
 8006346:	b085      	sub	sp, #20
 8006348:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800634a:	2300      	movs	r3, #0
 800634c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800634e:	4b12      	ldr	r3, [pc, #72]	; (8006398 <prvTaskExitError+0x54>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006356:	d00a      	beq.n	800636e <prvTaskExitError+0x2a>
        __asm volatile
 8006358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635c:	f383 8811 	msr	BASEPRI, r3
 8006360:	f3bf 8f6f 	isb	sy
 8006364:	f3bf 8f4f 	dsb	sy
 8006368:	60fb      	str	r3, [r7, #12]
    }
 800636a:	bf00      	nop
 800636c:	e7fe      	b.n	800636c <prvTaskExitError+0x28>
        __asm volatile
 800636e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006372:	f383 8811 	msr	BASEPRI, r3
 8006376:	f3bf 8f6f 	isb	sy
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	60bb      	str	r3, [r7, #8]
    }
 8006380:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006382:	bf00      	nop
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d0fc      	beq.n	8006384 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800638a:	bf00      	nop
 800638c:	bf00      	nop
 800638e:	3714      	adds	r7, #20
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr
 8006398:	2000001c 	.word	0x2000001c
 800639c:	00000000 	.word	0x00000000

080063a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80063a0:	4b07      	ldr	r3, [pc, #28]	; (80063c0 <pxCurrentTCBConst2>)
 80063a2:	6819      	ldr	r1, [r3, #0]
 80063a4:	6808      	ldr	r0, [r1, #0]
 80063a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063aa:	f380 8809 	msr	PSP, r0
 80063ae:	f3bf 8f6f 	isb	sy
 80063b2:	f04f 0000 	mov.w	r0, #0
 80063b6:	f380 8811 	msr	BASEPRI, r0
 80063ba:	4770      	bx	lr
 80063bc:	f3af 8000 	nop.w

080063c0 <pxCurrentTCBConst2>:
 80063c0:	20000048 	.word	0x20000048
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80063c4:	bf00      	nop
 80063c6:	bf00      	nop

080063c8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80063c8:	4808      	ldr	r0, [pc, #32]	; (80063ec <prvPortStartFirstTask+0x24>)
 80063ca:	6800      	ldr	r0, [r0, #0]
 80063cc:	6800      	ldr	r0, [r0, #0]
 80063ce:	f380 8808 	msr	MSP, r0
 80063d2:	f04f 0000 	mov.w	r0, #0
 80063d6:	f380 8814 	msr	CONTROL, r0
 80063da:	b662      	cpsie	i
 80063dc:	b661      	cpsie	f
 80063de:	f3bf 8f4f 	dsb	sy
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	df00      	svc	0
 80063e8:	bf00      	nop
 80063ea:	0000      	.short	0x0000
 80063ec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80063f0:	bf00      	nop
 80063f2:	bf00      	nop

080063f4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b086      	sub	sp, #24
 80063f8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80063fa:	4b46      	ldr	r3, [pc, #280]	; (8006514 <xPortStartScheduler+0x120>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a46      	ldr	r2, [pc, #280]	; (8006518 <xPortStartScheduler+0x124>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d10a      	bne.n	800641a <xPortStartScheduler+0x26>
        __asm volatile
 8006404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006408:	f383 8811 	msr	BASEPRI, r3
 800640c:	f3bf 8f6f 	isb	sy
 8006410:	f3bf 8f4f 	dsb	sy
 8006414:	613b      	str	r3, [r7, #16]
    }
 8006416:	bf00      	nop
 8006418:	e7fe      	b.n	8006418 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800641a:	4b3e      	ldr	r3, [pc, #248]	; (8006514 <xPortStartScheduler+0x120>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a3f      	ldr	r2, [pc, #252]	; (800651c <xPortStartScheduler+0x128>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d10a      	bne.n	800643a <xPortStartScheduler+0x46>
        __asm volatile
 8006424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006428:	f383 8811 	msr	BASEPRI, r3
 800642c:	f3bf 8f6f 	isb	sy
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	60fb      	str	r3, [r7, #12]
    }
 8006436:	bf00      	nop
 8006438:	e7fe      	b.n	8006438 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800643a:	4b39      	ldr	r3, [pc, #228]	; (8006520 <xPortStartScheduler+0x12c>)
 800643c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	b2db      	uxtb	r3, r3
 8006444:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	22ff      	movs	r2, #255	; 0xff
 800644a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	b2db      	uxtb	r3, r3
 8006452:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006454:	78fb      	ldrb	r3, [r7, #3]
 8006456:	b2db      	uxtb	r3, r3
 8006458:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800645c:	b2da      	uxtb	r2, r3
 800645e:	4b31      	ldr	r3, [pc, #196]	; (8006524 <xPortStartScheduler+0x130>)
 8006460:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006462:	4b31      	ldr	r3, [pc, #196]	; (8006528 <xPortStartScheduler+0x134>)
 8006464:	2207      	movs	r2, #7
 8006466:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006468:	e009      	b.n	800647e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800646a:	4b2f      	ldr	r3, [pc, #188]	; (8006528 <xPortStartScheduler+0x134>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	3b01      	subs	r3, #1
 8006470:	4a2d      	ldr	r2, [pc, #180]	; (8006528 <xPortStartScheduler+0x134>)
 8006472:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006474:	78fb      	ldrb	r3, [r7, #3]
 8006476:	b2db      	uxtb	r3, r3
 8006478:	005b      	lsls	r3, r3, #1
 800647a:	b2db      	uxtb	r3, r3
 800647c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800647e:	78fb      	ldrb	r3, [r7, #3]
 8006480:	b2db      	uxtb	r3, r3
 8006482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006486:	2b80      	cmp	r3, #128	; 0x80
 8006488:	d0ef      	beq.n	800646a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800648a:	4b27      	ldr	r3, [pc, #156]	; (8006528 <xPortStartScheduler+0x134>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f1c3 0307 	rsb	r3, r3, #7
 8006492:	2b04      	cmp	r3, #4
 8006494:	d00a      	beq.n	80064ac <xPortStartScheduler+0xb8>
        __asm volatile
 8006496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649a:	f383 8811 	msr	BASEPRI, r3
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f3bf 8f4f 	dsb	sy
 80064a6:	60bb      	str	r3, [r7, #8]
    }
 80064a8:	bf00      	nop
 80064aa:	e7fe      	b.n	80064aa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80064ac:	4b1e      	ldr	r3, [pc, #120]	; (8006528 <xPortStartScheduler+0x134>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	021b      	lsls	r3, r3, #8
 80064b2:	4a1d      	ldr	r2, [pc, #116]	; (8006528 <xPortStartScheduler+0x134>)
 80064b4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80064b6:	4b1c      	ldr	r3, [pc, #112]	; (8006528 <xPortStartScheduler+0x134>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064be:	4a1a      	ldr	r2, [pc, #104]	; (8006528 <xPortStartScheduler+0x134>)
 80064c0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	b2da      	uxtb	r2, r3
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80064ca:	4b18      	ldr	r3, [pc, #96]	; (800652c <xPortStartScheduler+0x138>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a17      	ldr	r2, [pc, #92]	; (800652c <xPortStartScheduler+0x138>)
 80064d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80064d4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80064d6:	4b15      	ldr	r3, [pc, #84]	; (800652c <xPortStartScheduler+0x138>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a14      	ldr	r2, [pc, #80]	; (800652c <xPortStartScheduler+0x138>)
 80064dc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80064e0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80064e2:	f000 f8db 	bl	800669c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80064e6:	4b12      	ldr	r3, [pc, #72]	; (8006530 <xPortStartScheduler+0x13c>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80064ec:	f000 f8fa 	bl	80066e4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80064f0:	4b10      	ldr	r3, [pc, #64]	; (8006534 <xPortStartScheduler+0x140>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a0f      	ldr	r2, [pc, #60]	; (8006534 <xPortStartScheduler+0x140>)
 80064f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80064fa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80064fc:	f7ff ff64 	bl	80063c8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006500:	f7fe fdb6 	bl	8005070 <vTaskSwitchContext>
    prvTaskExitError();
 8006504:	f7ff ff1e 	bl	8006344 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3718      	adds	r7, #24
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	e000ed00 	.word	0xe000ed00
 8006518:	410fc271 	.word	0x410fc271
 800651c:	410fc270 	.word	0x410fc270
 8006520:	e000e400 	.word	0xe000e400
 8006524:	20000188 	.word	0x20000188
 8006528:	2000018c 	.word	0x2000018c
 800652c:	e000ed20 	.word	0xe000ed20
 8006530:	2000001c 	.word	0x2000001c
 8006534:	e000ef34 	.word	0xe000ef34

08006538 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
        __asm volatile
 800653e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006542:	f383 8811 	msr	BASEPRI, r3
 8006546:	f3bf 8f6f 	isb	sy
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	607b      	str	r3, [r7, #4]
    }
 8006550:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006552:	4b0f      	ldr	r3, [pc, #60]	; (8006590 <vPortEnterCritical+0x58>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	3301      	adds	r3, #1
 8006558:	4a0d      	ldr	r2, [pc, #52]	; (8006590 <vPortEnterCritical+0x58>)
 800655a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800655c:	4b0c      	ldr	r3, [pc, #48]	; (8006590 <vPortEnterCritical+0x58>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d10f      	bne.n	8006584 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006564:	4b0b      	ldr	r3, [pc, #44]	; (8006594 <vPortEnterCritical+0x5c>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00a      	beq.n	8006584 <vPortEnterCritical+0x4c>
        __asm volatile
 800656e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	603b      	str	r3, [r7, #0]
    }
 8006580:	bf00      	nop
 8006582:	e7fe      	b.n	8006582 <vPortEnterCritical+0x4a>
    }
}
 8006584:	bf00      	nop
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr
 8006590:	2000001c 	.word	0x2000001c
 8006594:	e000ed04 	.word	0xe000ed04

08006598 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800659e:	4b12      	ldr	r3, [pc, #72]	; (80065e8 <vPortExitCritical+0x50>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d10a      	bne.n	80065bc <vPortExitCritical+0x24>
        __asm volatile
 80065a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065aa:	f383 8811 	msr	BASEPRI, r3
 80065ae:	f3bf 8f6f 	isb	sy
 80065b2:	f3bf 8f4f 	dsb	sy
 80065b6:	607b      	str	r3, [r7, #4]
    }
 80065b8:	bf00      	nop
 80065ba:	e7fe      	b.n	80065ba <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80065bc:	4b0a      	ldr	r3, [pc, #40]	; (80065e8 <vPortExitCritical+0x50>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	3b01      	subs	r3, #1
 80065c2:	4a09      	ldr	r2, [pc, #36]	; (80065e8 <vPortExitCritical+0x50>)
 80065c4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80065c6:	4b08      	ldr	r3, [pc, #32]	; (80065e8 <vPortExitCritical+0x50>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d105      	bne.n	80065da <vPortExitCritical+0x42>
 80065ce:	2300      	movs	r3, #0
 80065d0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	f383 8811 	msr	BASEPRI, r3
    }
 80065d8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80065da:	bf00      	nop
 80065dc:	370c      	adds	r7, #12
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	2000001c 	.word	0x2000001c
 80065ec:	00000000 	.word	0x00000000

080065f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80065f0:	f3ef 8009 	mrs	r0, PSP
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	4b15      	ldr	r3, [pc, #84]	; (8006650 <pxCurrentTCBConst>)
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	f01e 0f10 	tst.w	lr, #16
 8006600:	bf08      	it	eq
 8006602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800660a:	6010      	str	r0, [r2, #0]
 800660c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006614:	f380 8811 	msr	BASEPRI, r0
 8006618:	f3bf 8f4f 	dsb	sy
 800661c:	f3bf 8f6f 	isb	sy
 8006620:	f7fe fd26 	bl	8005070 <vTaskSwitchContext>
 8006624:	f04f 0000 	mov.w	r0, #0
 8006628:	f380 8811 	msr	BASEPRI, r0
 800662c:	bc09      	pop	{r0, r3}
 800662e:	6819      	ldr	r1, [r3, #0]
 8006630:	6808      	ldr	r0, [r1, #0]
 8006632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006636:	f01e 0f10 	tst.w	lr, #16
 800663a:	bf08      	it	eq
 800663c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006640:	f380 8809 	msr	PSP, r0
 8006644:	f3bf 8f6f 	isb	sy
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	f3af 8000 	nop.w

08006650 <pxCurrentTCBConst>:
 8006650:	20000048 	.word	0x20000048
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006654:	bf00      	nop
 8006656:	bf00      	nop

08006658 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
        __asm volatile
 800665e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006662:	f383 8811 	msr	BASEPRI, r3
 8006666:	f3bf 8f6f 	isb	sy
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	607b      	str	r3, [r7, #4]
    }
 8006670:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006672:	f7fe fc45 	bl	8004f00 <xTaskIncrementTick>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d003      	beq.n	8006684 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800667c:	4b06      	ldr	r3, [pc, #24]	; (8006698 <SysTick_Handler+0x40>)
 800667e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006682:	601a      	str	r2, [r3, #0]
 8006684:	2300      	movs	r3, #0
 8006686:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	f383 8811 	msr	BASEPRI, r3
    }
 800668e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8006690:	bf00      	nop
 8006692:	3708      	adds	r7, #8
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	e000ed04 	.word	0xe000ed04

0800669c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800669c:	b480      	push	{r7}
 800669e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80066a0:	4b0b      	ldr	r3, [pc, #44]	; (80066d0 <vPortSetupTimerInterrupt+0x34>)
 80066a2:	2200      	movs	r2, #0
 80066a4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80066a6:	4b0b      	ldr	r3, [pc, #44]	; (80066d4 <vPortSetupTimerInterrupt+0x38>)
 80066a8:	2200      	movs	r2, #0
 80066aa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80066ac:	4b0a      	ldr	r3, [pc, #40]	; (80066d8 <vPortSetupTimerInterrupt+0x3c>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a0a      	ldr	r2, [pc, #40]	; (80066dc <vPortSetupTimerInterrupt+0x40>)
 80066b2:	fba2 2303 	umull	r2, r3, r2, r3
 80066b6:	099b      	lsrs	r3, r3, #6
 80066b8:	4a09      	ldr	r2, [pc, #36]	; (80066e0 <vPortSetupTimerInterrupt+0x44>)
 80066ba:	3b01      	subs	r3, #1
 80066bc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80066be:	4b04      	ldr	r3, [pc, #16]	; (80066d0 <vPortSetupTimerInterrupt+0x34>)
 80066c0:	2207      	movs	r2, #7
 80066c2:	601a      	str	r2, [r3, #0]
}
 80066c4:	bf00      	nop
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	e000e010 	.word	0xe000e010
 80066d4:	e000e018 	.word	0xe000e018
 80066d8:	20000008 	.word	0x20000008
 80066dc:	10624dd3 	.word	0x10624dd3
 80066e0:	e000e014 	.word	0xe000e014

080066e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80066e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80066f4 <vPortEnableVFP+0x10>
 80066e8:	6801      	ldr	r1, [r0, #0]
 80066ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80066ee:	6001      	str	r1, [r0, #0]
 80066f0:	4770      	bx	lr
 80066f2:	0000      	.short	0x0000
 80066f4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80066f8:	bf00      	nop
 80066fa:	bf00      	nop

080066fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006702:	f3ef 8305 	mrs	r3, IPSR
 8006706:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2b0f      	cmp	r3, #15
 800670c:	d914      	bls.n	8006738 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800670e:	4a17      	ldr	r2, [pc, #92]	; (800676c <vPortValidateInterruptPriority+0x70>)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	4413      	add	r3, r2
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006718:	4b15      	ldr	r3, [pc, #84]	; (8006770 <vPortValidateInterruptPriority+0x74>)
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	7afa      	ldrb	r2, [r7, #11]
 800671e:	429a      	cmp	r2, r3
 8006720:	d20a      	bcs.n	8006738 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8006722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006726:	f383 8811 	msr	BASEPRI, r3
 800672a:	f3bf 8f6f 	isb	sy
 800672e:	f3bf 8f4f 	dsb	sy
 8006732:	607b      	str	r3, [r7, #4]
    }
 8006734:	bf00      	nop
 8006736:	e7fe      	b.n	8006736 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006738:	4b0e      	ldr	r3, [pc, #56]	; (8006774 <vPortValidateInterruptPriority+0x78>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006740:	4b0d      	ldr	r3, [pc, #52]	; (8006778 <vPortValidateInterruptPriority+0x7c>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	429a      	cmp	r2, r3
 8006746:	d90a      	bls.n	800675e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8006748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674c:	f383 8811 	msr	BASEPRI, r3
 8006750:	f3bf 8f6f 	isb	sy
 8006754:	f3bf 8f4f 	dsb	sy
 8006758:	603b      	str	r3, [r7, #0]
    }
 800675a:	bf00      	nop
 800675c:	e7fe      	b.n	800675c <vPortValidateInterruptPriority+0x60>
    }
 800675e:	bf00      	nop
 8006760:	3714      	adds	r7, #20
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	e000e3f0 	.word	0xe000e3f0
 8006770:	20000188 	.word	0x20000188
 8006774:	e000ed0c 	.word	0xe000ed0c
 8006778:	2000018c 	.word	0x2000018c

0800677c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b08a      	sub	sp, #40	; 0x28
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8006784:	2300      	movs	r3, #0
 8006786:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8006788:	f7fe fb00 	bl	8004d8c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800678c:	4b65      	ldr	r3, [pc, #404]	; (8006924 <pvPortMalloc+0x1a8>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d101      	bne.n	8006798 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006794:	f000 f934 	bl	8006a00 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006798:	4b63      	ldr	r3, [pc, #396]	; (8006928 <pvPortMalloc+0x1ac>)
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4013      	ands	r3, r2
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f040 80a7 	bne.w	80068f4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d02d      	beq.n	8006808 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80067ac:	2208      	movs	r2, #8
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d227      	bcs.n	8006808 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80067b8:	2208      	movs	r2, #8
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4413      	add	r3, r2
 80067be:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f003 0307 	and.w	r3, r3, #7
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d021      	beq.n	800680e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f023 0307 	bic.w	r3, r3, #7
 80067d0:	3308      	adds	r3, #8
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d214      	bcs.n	8006802 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f023 0307 	bic.w	r3, r3, #7
 80067de:	3308      	adds	r3, #8
 80067e0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f003 0307 	and.w	r3, r3, #7
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d010      	beq.n	800680e <pvPortMalloc+0x92>
        __asm volatile
 80067ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f0:	f383 8811 	msr	BASEPRI, r3
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	617b      	str	r3, [r7, #20]
    }
 80067fe:	bf00      	nop
 8006800:	e7fe      	b.n	8006800 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8006802:	2300      	movs	r3, #0
 8006804:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006806:	e002      	b.n	800680e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8006808:	2300      	movs	r3, #0
 800680a:	607b      	str	r3, [r7, #4]
 800680c:	e000      	b.n	8006810 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800680e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d06e      	beq.n	80068f4 <pvPortMalloc+0x178>
 8006816:	4b45      	ldr	r3, [pc, #276]	; (800692c <pvPortMalloc+0x1b0>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	429a      	cmp	r2, r3
 800681e:	d869      	bhi.n	80068f4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006820:	4b43      	ldr	r3, [pc, #268]	; (8006930 <pvPortMalloc+0x1b4>)
 8006822:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8006824:	4b42      	ldr	r3, [pc, #264]	; (8006930 <pvPortMalloc+0x1b4>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800682a:	e004      	b.n	8006836 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800682c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8006830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	429a      	cmp	r2, r3
 800683e:	d903      	bls.n	8006848 <pvPortMalloc+0xcc>
 8006840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1f1      	bne.n	800682c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006848:	4b36      	ldr	r3, [pc, #216]	; (8006924 <pvPortMalloc+0x1a8>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800684e:	429a      	cmp	r2, r3
 8006850:	d050      	beq.n	80068f4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006852:	6a3b      	ldr	r3, [r7, #32]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2208      	movs	r2, #8
 8006858:	4413      	add	r3, r2
 800685a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800685c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	6a3b      	ldr	r3, [r7, #32]
 8006862:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	685a      	ldr	r2, [r3, #4]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	1ad2      	subs	r2, r2, r3
 800686c:	2308      	movs	r3, #8
 800686e:	005b      	lsls	r3, r3, #1
 8006870:	429a      	cmp	r2, r3
 8006872:	d91f      	bls.n	80068b4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4413      	add	r3, r2
 800687a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	f003 0307 	and.w	r3, r3, #7
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00a      	beq.n	800689c <pvPortMalloc+0x120>
        __asm volatile
 8006886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688a:	f383 8811 	msr	BASEPRI, r3
 800688e:	f3bf 8f6f 	isb	sy
 8006892:	f3bf 8f4f 	dsb	sy
 8006896:	613b      	str	r3, [r7, #16]
    }
 8006898:	bf00      	nop
 800689a:	e7fe      	b.n	800689a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800689c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	1ad2      	subs	r2, r2, r3
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80068a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80068ae:	69b8      	ldr	r0, [r7, #24]
 80068b0:	f000 f908 	bl	8006ac4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80068b4:	4b1d      	ldr	r3, [pc, #116]	; (800692c <pvPortMalloc+0x1b0>)
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	4a1b      	ldr	r2, [pc, #108]	; (800692c <pvPortMalloc+0x1b0>)
 80068c0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80068c2:	4b1a      	ldr	r3, [pc, #104]	; (800692c <pvPortMalloc+0x1b0>)
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	4b1b      	ldr	r3, [pc, #108]	; (8006934 <pvPortMalloc+0x1b8>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d203      	bcs.n	80068d6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80068ce:	4b17      	ldr	r3, [pc, #92]	; (800692c <pvPortMalloc+0x1b0>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a18      	ldr	r2, [pc, #96]	; (8006934 <pvPortMalloc+0x1b8>)
 80068d4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80068d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d8:	685a      	ldr	r2, [r3, #4]
 80068da:	4b13      	ldr	r3, [pc, #76]	; (8006928 <pvPortMalloc+0x1ac>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	431a      	orrs	r2, r3
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80068e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e6:	2200      	movs	r2, #0
 80068e8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80068ea:	4b13      	ldr	r3, [pc, #76]	; (8006938 <pvPortMalloc+0x1bc>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	3301      	adds	r3, #1
 80068f0:	4a11      	ldr	r2, [pc, #68]	; (8006938 <pvPortMalloc+0x1bc>)
 80068f2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80068f4:	f7fe fa58 	bl	8004da8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	f003 0307 	and.w	r3, r3, #7
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00a      	beq.n	8006918 <pvPortMalloc+0x19c>
        __asm volatile
 8006902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006906:	f383 8811 	msr	BASEPRI, r3
 800690a:	f3bf 8f6f 	isb	sy
 800690e:	f3bf 8f4f 	dsb	sy
 8006912:	60fb      	str	r3, [r7, #12]
    }
 8006914:	bf00      	nop
 8006916:	e7fe      	b.n	8006916 <pvPortMalloc+0x19a>
    return pvReturn;
 8006918:	69fb      	ldr	r3, [r7, #28]
}
 800691a:	4618      	mov	r0, r3
 800691c:	3728      	adds	r7, #40	; 0x28
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	20012d98 	.word	0x20012d98
 8006928:	20012dac 	.word	0x20012dac
 800692c:	20012d9c 	.word	0x20012d9c
 8006930:	20012d90 	.word	0x20012d90
 8006934:	20012da0 	.word	0x20012da0
 8006938:	20012da4 	.word	0x20012da4

0800693c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d04d      	beq.n	80069ea <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800694e:	2308      	movs	r3, #8
 8006950:	425b      	negs	r3, r3
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	4413      	add	r3, r2
 8006956:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	685a      	ldr	r2, [r3, #4]
 8006960:	4b24      	ldr	r3, [pc, #144]	; (80069f4 <vPortFree+0xb8>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4013      	ands	r3, r2
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10a      	bne.n	8006980 <vPortFree+0x44>
        __asm volatile
 800696a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696e:	f383 8811 	msr	BASEPRI, r3
 8006972:	f3bf 8f6f 	isb	sy
 8006976:	f3bf 8f4f 	dsb	sy
 800697a:	60fb      	str	r3, [r7, #12]
    }
 800697c:	bf00      	nop
 800697e:	e7fe      	b.n	800697e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00a      	beq.n	800699e <vPortFree+0x62>
        __asm volatile
 8006988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698c:	f383 8811 	msr	BASEPRI, r3
 8006990:	f3bf 8f6f 	isb	sy
 8006994:	f3bf 8f4f 	dsb	sy
 8006998:	60bb      	str	r3, [r7, #8]
    }
 800699a:	bf00      	nop
 800699c:	e7fe      	b.n	800699c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	685a      	ldr	r2, [r3, #4]
 80069a2:	4b14      	ldr	r3, [pc, #80]	; (80069f4 <vPortFree+0xb8>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4013      	ands	r3, r2
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d01e      	beq.n	80069ea <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d11a      	bne.n	80069ea <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	685a      	ldr	r2, [r3, #4]
 80069b8:	4b0e      	ldr	r3, [pc, #56]	; (80069f4 <vPortFree+0xb8>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	43db      	mvns	r3, r3
 80069be:	401a      	ands	r2, r3
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80069c4:	f7fe f9e2 	bl	8004d8c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	4b0a      	ldr	r3, [pc, #40]	; (80069f8 <vPortFree+0xbc>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4413      	add	r3, r2
 80069d2:	4a09      	ldr	r2, [pc, #36]	; (80069f8 <vPortFree+0xbc>)
 80069d4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80069d6:	6938      	ldr	r0, [r7, #16]
 80069d8:	f000 f874 	bl	8006ac4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80069dc:	4b07      	ldr	r3, [pc, #28]	; (80069fc <vPortFree+0xc0>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	3301      	adds	r3, #1
 80069e2:	4a06      	ldr	r2, [pc, #24]	; (80069fc <vPortFree+0xc0>)
 80069e4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80069e6:	f7fe f9df 	bl	8004da8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80069ea:	bf00      	nop
 80069ec:	3718      	adds	r7, #24
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	20012dac 	.word	0x20012dac
 80069f8:	20012d9c 	.word	0x20012d9c
 80069fc:	20012da8 	.word	0x20012da8

08006a00 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a06:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8006a0a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8006a0c:	4b27      	ldr	r3, [pc, #156]	; (8006aac <prvHeapInit+0xac>)
 8006a0e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f003 0307 	and.w	r3, r3, #7
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00c      	beq.n	8006a34 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	3307      	adds	r3, #7
 8006a1e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f023 0307 	bic.w	r3, r3, #7
 8006a26:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	4a1f      	ldr	r2, [pc, #124]	; (8006aac <prvHeapInit+0xac>)
 8006a30:	4413      	add	r3, r2
 8006a32:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a38:	4a1d      	ldr	r2, [pc, #116]	; (8006ab0 <prvHeapInit+0xb0>)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8006a3e:	4b1c      	ldr	r3, [pc, #112]	; (8006ab0 <prvHeapInit+0xb0>)
 8006a40:	2200      	movs	r2, #0
 8006a42:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	68ba      	ldr	r2, [r7, #8]
 8006a48:	4413      	add	r3, r2
 8006a4a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8006a4c:	2208      	movs	r2, #8
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	1a9b      	subs	r3, r3, r2
 8006a52:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f023 0307 	bic.w	r3, r3, #7
 8006a5a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	4a15      	ldr	r2, [pc, #84]	; (8006ab4 <prvHeapInit+0xb4>)
 8006a60:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8006a62:	4b14      	ldr	r3, [pc, #80]	; (8006ab4 <prvHeapInit+0xb4>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2200      	movs	r2, #0
 8006a68:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8006a6a:	4b12      	ldr	r3, [pc, #72]	; (8006ab4 <prvHeapInit+0xb4>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	1ad2      	subs	r2, r2, r3
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a80:	4b0c      	ldr	r3, [pc, #48]	; (8006ab4 <prvHeapInit+0xb4>)
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	4a0a      	ldr	r2, [pc, #40]	; (8006ab8 <prvHeapInit+0xb8>)
 8006a8e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	4a09      	ldr	r2, [pc, #36]	; (8006abc <prvHeapInit+0xbc>)
 8006a96:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a98:	4b09      	ldr	r3, [pc, #36]	; (8006ac0 <prvHeapInit+0xc0>)
 8006a9a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006a9e:	601a      	str	r2, [r3, #0]
}
 8006aa0:	bf00      	nop
 8006aa2:	3714      	adds	r7, #20
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr
 8006aac:	20000190 	.word	0x20000190
 8006ab0:	20012d90 	.word	0x20012d90
 8006ab4:	20012d98 	.word	0x20012d98
 8006ab8:	20012da0 	.word	0x20012da0
 8006abc:	20012d9c 	.word	0x20012d9c
 8006ac0:	20012dac 	.word	0x20012dac

08006ac4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006acc:	4b28      	ldr	r3, [pc, #160]	; (8006b70 <prvInsertBlockIntoFreeList+0xac>)
 8006ace:	60fb      	str	r3, [r7, #12]
 8006ad0:	e002      	b.n	8006ad8 <prvInsertBlockIntoFreeList+0x14>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	60fb      	str	r3, [r7, #12]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d8f7      	bhi.n	8006ad2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	4413      	add	r3, r2
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d108      	bne.n	8006b06 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	441a      	add	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	441a      	add	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d118      	bne.n	8006b4c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	4b15      	ldr	r3, [pc, #84]	; (8006b74 <prvInsertBlockIntoFreeList+0xb0>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d00d      	beq.n	8006b42 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	441a      	add	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	601a      	str	r2, [r3, #0]
 8006b40:	e008      	b.n	8006b54 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b42:	4b0c      	ldr	r3, [pc, #48]	; (8006b74 <prvInsertBlockIntoFreeList+0xb0>)
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	601a      	str	r2, [r3, #0]
 8006b4a:	e003      	b.n	8006b54 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d002      	beq.n	8006b62 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006b62:	bf00      	nop
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	20012d90 	.word	0x20012d90
 8006b74:	20012d98 	.word	0x20012d98

08006b78 <__libc_init_array>:
 8006b78:	b570      	push	{r4, r5, r6, lr}
 8006b7a:	4d0d      	ldr	r5, [pc, #52]	; (8006bb0 <__libc_init_array+0x38>)
 8006b7c:	4c0d      	ldr	r4, [pc, #52]	; (8006bb4 <__libc_init_array+0x3c>)
 8006b7e:	1b64      	subs	r4, r4, r5
 8006b80:	10a4      	asrs	r4, r4, #2
 8006b82:	2600      	movs	r6, #0
 8006b84:	42a6      	cmp	r6, r4
 8006b86:	d109      	bne.n	8006b9c <__libc_init_array+0x24>
 8006b88:	4d0b      	ldr	r5, [pc, #44]	; (8006bb8 <__libc_init_array+0x40>)
 8006b8a:	4c0c      	ldr	r4, [pc, #48]	; (8006bbc <__libc_init_array+0x44>)
 8006b8c:	f000 f82e 	bl	8006bec <_init>
 8006b90:	1b64      	subs	r4, r4, r5
 8006b92:	10a4      	asrs	r4, r4, #2
 8006b94:	2600      	movs	r6, #0
 8006b96:	42a6      	cmp	r6, r4
 8006b98:	d105      	bne.n	8006ba6 <__libc_init_array+0x2e>
 8006b9a:	bd70      	pop	{r4, r5, r6, pc}
 8006b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ba0:	4798      	blx	r3
 8006ba2:	3601      	adds	r6, #1
 8006ba4:	e7ee      	b.n	8006b84 <__libc_init_array+0xc>
 8006ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006baa:	4798      	blx	r3
 8006bac:	3601      	adds	r6, #1
 8006bae:	e7f2      	b.n	8006b96 <__libc_init_array+0x1e>
 8006bb0:	08006e44 	.word	0x08006e44
 8006bb4:	08006e44 	.word	0x08006e44
 8006bb8:	08006e44 	.word	0x08006e44
 8006bbc:	08006e48 	.word	0x08006e48

08006bc0 <memcpy>:
 8006bc0:	440a      	add	r2, r1
 8006bc2:	4291      	cmp	r1, r2
 8006bc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bc8:	d100      	bne.n	8006bcc <memcpy+0xc>
 8006bca:	4770      	bx	lr
 8006bcc:	b510      	push	{r4, lr}
 8006bce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bd6:	4291      	cmp	r1, r2
 8006bd8:	d1f9      	bne.n	8006bce <memcpy+0xe>
 8006bda:	bd10      	pop	{r4, pc}

08006bdc <memset>:
 8006bdc:	4402      	add	r2, r0
 8006bde:	4603      	mov	r3, r0
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d100      	bne.n	8006be6 <memset+0xa>
 8006be4:	4770      	bx	lr
 8006be6:	f803 1b01 	strb.w	r1, [r3], #1
 8006bea:	e7f9      	b.n	8006be0 <memset+0x4>

08006bec <_init>:
 8006bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bee:	bf00      	nop
 8006bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bf2:	bc08      	pop	{r3}
 8006bf4:	469e      	mov	lr, r3
 8006bf6:	4770      	bx	lr

08006bf8 <_fini>:
 8006bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bfa:	bf00      	nop
 8006bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bfe:	bc08      	pop	{r3}
 8006c00:	469e      	mov	lr, r3
 8006c02:	4770      	bx	lr
