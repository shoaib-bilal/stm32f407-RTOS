
STM32_FreeRTOS_Mutex_using_Bin_Sema.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08005bec  08005bec  00015bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cdc  08005cdc  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005cdc  08005cdc  00015cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ce4  08005ce4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ce4  08005ce4  00015ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ce8  08005ce8  00015ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005cec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00012e7c  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012ef4  20012ef4  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018639  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003080  00000000  00000000  000386e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001190  00000000  00000000  0003b768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001078  00000000  00000000  0003c8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023c1e  00000000  00000000  0003d970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000140b1  00000000  00000000  0006158e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5ca9  00000000  00000000  0007563f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014b2e8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004fd4  00000000  00000000  0014b33c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005bd4 	.word	0x08005bd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08005bd4 	.word	0x08005bd4

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 fc83 	bl	8000dd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f845 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 f8d7 	bl	8000688 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004da:	f000 f8ab 	bl	8000634 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  vSemaphoreCreateBinary(bin_sema);
 80004de:	2203      	movs	r2, #3
 80004e0:	2100      	movs	r1, #0
 80004e2:	2001      	movs	r0, #1
 80004e4:	f002 f9d8 	bl	8002898 <xQueueGenericCreate>
 80004e8:	4603      	mov	r3, r0
 80004ea:	4a17      	ldr	r2, [pc, #92]	; (8000548 <main+0x80>)
 80004ec:	6013      	str	r3, [r2, #0]
 80004ee:	4b16      	ldr	r3, [pc, #88]	; (8000548 <main+0x80>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d006      	beq.n	8000504 <main+0x3c>
 80004f6:	4b14      	ldr	r3, [pc, #80]	; (8000548 <main+0x80>)
 80004f8:	6818      	ldr	r0, [r3, #0]
 80004fa:	2300      	movs	r3, #0
 80004fc:	2200      	movs	r2, #0
 80004fe:	2100      	movs	r1, #0
 8000500:	f002 fa4c 	bl	800299c <xQueueGenericSend>

  if (bin_sema!=NULL)
 8000504:	4b10      	ldr	r3, [pc, #64]	; (8000548 <main+0x80>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d018      	beq.n	800053e <main+0x76>
  {
  xTaskCreate(Task1_handler, "Task-1", 500, NULL, 2, NULL);
 800050c:	2300      	movs	r3, #0
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	2302      	movs	r3, #2
 8000512:	9300      	str	r3, [sp, #0]
 8000514:	2300      	movs	r3, #0
 8000516:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800051a:	490c      	ldr	r1, [pc, #48]	; (800054c <main+0x84>)
 800051c:	480c      	ldr	r0, [pc, #48]	; (8000550 <main+0x88>)
 800051e:	f002 ff57 	bl	80033d0 <xTaskCreate>
  xTaskCreate(Task2_handler, "Task-2", 500, NULL, 2, NULL);
 8000522:	2300      	movs	r3, #0
 8000524:	9301      	str	r3, [sp, #4]
 8000526:	2302      	movs	r3, #2
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	2300      	movs	r3, #0
 800052c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000530:	4908      	ldr	r1, [pc, #32]	; (8000554 <main+0x8c>)
 8000532:	4809      	ldr	r0, [pc, #36]	; (8000558 <main+0x90>)
 8000534:	f002 ff4c 	bl	80033d0 <xTaskCreate>

  //xSemaphoreGive(bin_sema);
  vTaskStartScheduler();
 8000538:	f003 f8c4 	bl	80036c4 <vTaskStartScheduler>
 800053c:	e002      	b.n	8000544 <main+0x7c>

  }
  else
  {
	  printf("Binary semaphore creation failed\n");
 800053e:	4807      	ldr	r0, [pc, #28]	; (800055c <main+0x94>)
 8000540:	f004 fef0 	bl	8005324 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000544:	e7fe      	b.n	8000544 <main+0x7c>
 8000546:	bf00      	nop
 8000548:	20012e08 	.word	0x20012e08
 800054c:	08005bec 	.word	0x08005bec
 8000550:	08000945 	.word	0x08000945
 8000554:	08005bf4 	.word	0x08005bf4
 8000558:	08000985 	.word	0x08000985
 800055c:	08005bfc 	.word	0x08005bfc

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	; 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0320 	add.w	r3, r7, #32
 800056a:	2230      	movs	r2, #48	; 0x30
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f004 fe62 	bl	8005238 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	4b28      	ldr	r3, [pc, #160]	; (800062c <SystemClock_Config+0xcc>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	4a27      	ldr	r2, [pc, #156]	; (800062c <SystemClock_Config+0xcc>)
 800058e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000592:	6413      	str	r3, [r2, #64]	; 0x40
 8000594:	4b25      	ldr	r3, [pc, #148]	; (800062c <SystemClock_Config+0xcc>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	4b22      	ldr	r3, [pc, #136]	; (8000630 <SystemClock_Config+0xd0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a21      	ldr	r2, [pc, #132]	; (8000630 <SystemClock_Config+0xd0>)
 80005aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ae:	6013      	str	r3, [r2, #0]
 80005b0:	4b1f      	ldr	r3, [pc, #124]	; (8000630 <SystemClock_Config+0xd0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005bc:	2302      	movs	r3, #2
 80005be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c0:	2301      	movs	r3, #1
 80005c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c4:	2310      	movs	r3, #16
 80005c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c8:	2302      	movs	r3, #2
 80005ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005cc:	2300      	movs	r3, #0
 80005ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d0:	2308      	movs	r3, #8
 80005d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80005d4:	2332      	movs	r3, #50	; 0x32
 80005d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005d8:	2304      	movs	r3, #4
 80005da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005dc:	2307      	movs	r3, #7
 80005de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 0320 	add.w	r3, r7, #32
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 fed1 	bl	800138c <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005f0:	f000 f9fa 	bl	80009e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f8:	2302      	movs	r3, #2
 80005fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000600:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000604:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f001 f932 	bl	800187c <HAL_RCC_ClockConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800061e:	f000 f9e3 	bl	80009e8 <Error_Handler>
  }
}
 8000622:	bf00      	nop
 8000624:	3750      	adds	r7, #80	; 0x50
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000

08000634 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 800063a:	4a12      	ldr	r2, [pc, #72]	; (8000684 <MX_USART2_UART_Init+0x50>)
 800063c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 8000640:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000644:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 800065a:	220c      	movs	r2, #12
 800065c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 800066c:	f001 fde2 	bl	8002234 <HAL_UART_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000676:	f000 f9b7 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20012e14 	.word	0x20012e14
 8000684:	40004400 	.word	0x40004400

08000688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08c      	sub	sp, #48	; 0x30
 800068c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 031c 	add.w	r3, r7, #28
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	61bb      	str	r3, [r7, #24]
 80006a2:	4ba2      	ldr	r3, [pc, #648]	; (800092c <MX_GPIO_Init+0x2a4>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4aa1      	ldr	r2, [pc, #644]	; (800092c <MX_GPIO_Init+0x2a4>)
 80006a8:	f043 0310 	orr.w	r3, r3, #16
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b9f      	ldr	r3, [pc, #636]	; (800092c <MX_GPIO_Init+0x2a4>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0310 	and.w	r3, r3, #16
 80006b6:	61bb      	str	r3, [r7, #24]
 80006b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
 80006be:	4b9b      	ldr	r3, [pc, #620]	; (800092c <MX_GPIO_Init+0x2a4>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a9a      	ldr	r2, [pc, #616]	; (800092c <MX_GPIO_Init+0x2a4>)
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b98      	ldr	r3, [pc, #608]	; (800092c <MX_GPIO_Init+0x2a4>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0304 	and.w	r3, r3, #4
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]
 80006da:	4b94      	ldr	r3, [pc, #592]	; (800092c <MX_GPIO_Init+0x2a4>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a93      	ldr	r2, [pc, #588]	; (800092c <MX_GPIO_Init+0x2a4>)
 80006e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b91      	ldr	r3, [pc, #580]	; (800092c <MX_GPIO_Init+0x2a4>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ee:	613b      	str	r3, [r7, #16]
 80006f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	4b8d      	ldr	r3, [pc, #564]	; (800092c <MX_GPIO_Init+0x2a4>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a8c      	ldr	r2, [pc, #560]	; (800092c <MX_GPIO_Init+0x2a4>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b8a      	ldr	r3, [pc, #552]	; (800092c <MX_GPIO_Init+0x2a4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	4b86      	ldr	r3, [pc, #536]	; (800092c <MX_GPIO_Init+0x2a4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a85      	ldr	r2, [pc, #532]	; (800092c <MX_GPIO_Init+0x2a4>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b83      	ldr	r3, [pc, #524]	; (800092c <MX_GPIO_Init+0x2a4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0302 	and.w	r3, r3, #2
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	4b7f      	ldr	r3, [pc, #508]	; (800092c <MX_GPIO_Init+0x2a4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a7e      	ldr	r2, [pc, #504]	; (800092c <MX_GPIO_Init+0x2a4>)
 8000734:	f043 0308 	orr.w	r3, r3, #8
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b7c      	ldr	r3, [pc, #496]	; (800092c <MX_GPIO_Init+0x2a4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0308 	and.w	r3, r3, #8
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	2108      	movs	r1, #8
 800074a:	4879      	ldr	r0, [pc, #484]	; (8000930 <MX_GPIO_Init+0x2a8>)
 800074c:	f000 fe04 	bl	8001358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000750:	2201      	movs	r2, #1
 8000752:	2101      	movs	r1, #1
 8000754:	4877      	ldr	r0, [pc, #476]	; (8000934 <MX_GPIO_Init+0x2ac>)
 8000756:	f000 fdff 	bl	8001358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800075a:	2200      	movs	r2, #0
 800075c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000760:	4875      	ldr	r0, [pc, #468]	; (8000938 <MX_GPIO_Init+0x2b0>)
 8000762:	f000 fdf9 	bl	8001358 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000766:	2308      	movs	r3, #8
 8000768:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076a:	2301      	movs	r3, #1
 800076c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	2300      	movs	r3, #0
 8000774:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000776:	f107 031c 	add.w	r3, r7, #28
 800077a:	4619      	mov	r1, r3
 800077c:	486c      	ldr	r0, [pc, #432]	; (8000930 <MX_GPIO_Init+0x2a8>)
 800077e:	f000 fc4f 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000782:	2301      	movs	r3, #1
 8000784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	4619      	mov	r1, r3
 8000798:	4866      	ldr	r0, [pc, #408]	; (8000934 <MX_GPIO_Init+0x2ac>)
 800079a:	f000 fc41 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800079e:	2308      	movs	r3, #8
 80007a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a2:	2302      	movs	r3, #2
 80007a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007aa:	2300      	movs	r3, #0
 80007ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007ae:	2305      	movs	r3, #5
 80007b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	4619      	mov	r1, r3
 80007b8:	485e      	ldr	r0, [pc, #376]	; (8000934 <MX_GPIO_Init+0x2ac>)
 80007ba:	f000 fc31 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007be:	2301      	movs	r3, #1
 80007c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 031c 	add.w	r3, r7, #28
 80007d0:	4619      	mov	r1, r3
 80007d2:	485a      	ldr	r0, [pc, #360]	; (800093c <MX_GPIO_Init+0x2b4>)
 80007d4:	f000 fc24 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80007d8:	2310      	movs	r3, #16
 80007da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007dc:	2302      	movs	r3, #2
 80007de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007e8:	2306      	movs	r3, #6
 80007ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80007ec:	f107 031c 	add.w	r3, r7, #28
 80007f0:	4619      	mov	r1, r3
 80007f2:	4852      	ldr	r0, [pc, #328]	; (800093c <MX_GPIO_Init+0x2b4>)
 80007f4:	f000 fc14 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80007f8:	23e0      	movs	r3, #224	; 0xe0
 80007fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fc:	2302      	movs	r3, #2
 80007fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	2300      	movs	r3, #0
 8000806:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000808:	2305      	movs	r3, #5
 800080a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4619      	mov	r1, r3
 8000812:	484a      	ldr	r0, [pc, #296]	; (800093c <MX_GPIO_Init+0x2b4>)
 8000814:	f000 fc04 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000818:	2304      	movs	r3, #4
 800081a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081c:	2300      	movs	r3, #0
 800081e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	4845      	ldr	r0, [pc, #276]	; (8000940 <MX_GPIO_Init+0x2b8>)
 800082c:	f000 fbf8 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000836:	2302      	movs	r3, #2
 8000838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000842:	2305      	movs	r3, #5
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	483c      	ldr	r0, [pc, #240]	; (8000940 <MX_GPIO_Init+0x2b8>)
 800084e:	f000 fbe7 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000852:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000856:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	4833      	ldr	r0, [pc, #204]	; (8000938 <MX_GPIO_Init+0x2b0>)
 800086c:	f000 fbd8 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000870:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	2302      	movs	r3, #2
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000882:	2306      	movs	r3, #6
 8000884:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	4829      	ldr	r0, [pc, #164]	; (8000934 <MX_GPIO_Init+0x2ac>)
 800088e:	f000 fbc7 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000892:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000898:	2300      	movs	r3, #0
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	4825      	ldr	r0, [pc, #148]	; (800093c <MX_GPIO_Init+0x2b4>)
 80008a8:	f000 fbba 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80008ac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	2302      	movs	r3, #2
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008be:	230a      	movs	r3, #10
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	481c      	ldr	r0, [pc, #112]	; (800093c <MX_GPIO_Init+0x2b4>)
 80008ca:	f000 fba9 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008ce:	2320      	movs	r3, #32
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	4815      	ldr	r0, [pc, #84]	; (8000938 <MX_GPIO_Init+0x2b0>)
 80008e2:	f000 fb9d 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80008e6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ec:	2312      	movs	r3, #18
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008f8:	2304      	movs	r3, #4
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	480f      	ldr	r0, [pc, #60]	; (8000940 <MX_GPIO_Init+0x2b8>)
 8000904:	f000 fb8c 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000908:	2302      	movs	r3, #2
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800090c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4804      	ldr	r0, [pc, #16]	; (8000930 <MX_GPIO_Init+0x2a8>)
 800091e:	f000 fb7f 	bl	8001020 <HAL_GPIO_Init>

}
 8000922:	bf00      	nop
 8000924:	3730      	adds	r7, #48	; 0x30
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40023800 	.word	0x40023800
 8000930:	40021000 	.word	0x40021000
 8000934:	40020800 	.word	0x40020800
 8000938:	40020c00 	.word	0x40020c00
 800093c:	40020000 	.word	0x40020000
 8000940:	40020400 	.word	0x40020400

08000944 <Task1_handler>:

/* USER CODE BEGIN 4 */


void Task1_handler(void *pvparameters)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	const char *msg="Task 1 is running\r\n";
 800094c:	4b0b      	ldr	r3, [pc, #44]	; (800097c <Task1_handler+0x38>)
 800094e:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		xSemaphoreTake(bin_sema,portMAX_DELAY);
 8000950:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <Task1_handler+0x3c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f04f 31ff 	mov.w	r1, #4294967295
 8000958:	4618      	mov	r0, r3
 800095a:	f002 faa7 	bl	8002eac <xQueueSemaphoreTake>
		//sprintf(usr_msg,"%s", msg);
		//print_msg(usr_msg);
		printf("%s\n",msg);
 800095e:	68f8      	ldr	r0, [r7, #12]
 8000960:	f004 fce0 	bl	8005324 <puts>
		//vTaskDelay(pdMS_TO_TICKS(500));
		xSemaphoreGive(bin_sema);
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <Task1_handler+0x3c>)
 8000966:	6818      	ldr	r0, [r3, #0]
 8000968:	2300      	movs	r3, #0
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	f002 f815 	bl	800299c <xQueueGenericSend>
		vTaskDelay(pdMS_TO_TICKS(500));
 8000972:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000976:	f002 fe71 	bl	800365c <vTaskDelay>
		xSemaphoreTake(bin_sema,portMAX_DELAY);
 800097a:	e7e9      	b.n	8000950 <Task1_handler+0xc>
 800097c:	08005c20 	.word	0x08005c20
 8000980:	20012e08 	.word	0x20012e08

08000984 <Task2_handler>:
	}
}

void Task2_handler(void *pvparameters)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	const char *msg="Task 2 is running\r\n";
 800098c:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <Task2_handler+0x38>)
 800098e:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		xSemaphoreTake(bin_sema,portMAX_DELAY);
 8000990:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <Task2_handler+0x3c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f04f 31ff 	mov.w	r1, #4294967295
 8000998:	4618      	mov	r0, r3
 800099a:	f002 fa87 	bl	8002eac <xQueueSemaphoreTake>
		//sprintf(usr_msg,"%s", msg);
		//print_msg(usr_msg);
		printf("%s\n",msg);
 800099e:	68f8      	ldr	r0, [r7, #12]
 80009a0:	f004 fcc0 	bl	8005324 <puts>
		//vTaskDelay(pdMS_TO_TICKS(500));
		xSemaphoreGive(bin_sema);
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <Task2_handler+0x3c>)
 80009a6:	6818      	ldr	r0, [r3, #0]
 80009a8:	2300      	movs	r3, #0
 80009aa:	2200      	movs	r2, #0
 80009ac:	2100      	movs	r1, #0
 80009ae:	f001 fff5 	bl	800299c <xQueueGenericSend>
		vTaskDelay(pdMS_TO_TICKS(500));
 80009b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009b6:	f002 fe51 	bl	800365c <vTaskDelay>
		xSemaphoreTake(bin_sema,portMAX_DELAY);
 80009ba:	e7e9      	b.n	8000990 <Task2_handler+0xc>
 80009bc:	08005c34 	.word	0x08005c34
 80009c0:	20012e08 	.word	0x20012e08

080009c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a04      	ldr	r2, [pc, #16]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d101      	bne.n	80009da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009d6:	f000 fa21 	bl	8000e1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40001000 	.word	0x40001000

080009e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ec:	b672      	cpsid	i
}
 80009ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <Error_Handler+0x8>
	...

080009f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	4a0f      	ldr	r2, [pc, #60]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a08:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0a:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	603b      	str	r3, [r7, #0]
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	4a08      	ldr	r2, [pc, #32]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a24:	6413      	str	r3, [r2, #64]	; 0x40
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800

08000a44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	; 0x28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a19      	ldr	r2, [pc, #100]	; (8000ac8 <HAL_UART_MspInit+0x84>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d12b      	bne.n	8000abe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	4b18      	ldr	r3, [pc, #96]	; (8000acc <HAL_UART_MspInit+0x88>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	4a17      	ldr	r2, [pc, #92]	; (8000acc <HAL_UART_MspInit+0x88>)
 8000a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a74:	6413      	str	r3, [r2, #64]	; 0x40
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <HAL_UART_MspInit+0x88>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	4b11      	ldr	r3, [pc, #68]	; (8000acc <HAL_UART_MspInit+0x88>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a10      	ldr	r2, [pc, #64]	; (8000acc <HAL_UART_MspInit+0x88>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <HAL_UART_MspInit+0x88>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a9e:	230c      	movs	r3, #12
 8000aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aae:	2307      	movs	r3, #7
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <HAL_UART_MspInit+0x8c>)
 8000aba:	f000 fab1 	bl	8001020 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000abe:	bf00      	nop
 8000ac0:	3728      	adds	r7, #40	; 0x28
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40004400 	.word	0x40004400
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020000 	.word	0x40020000

08000ad4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08c      	sub	sp, #48	; 0x30
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	2036      	movs	r0, #54	; 0x36
 8000aea:	f000 fa6f 	bl	8000fcc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000aee:	2036      	movs	r0, #54	; 0x36
 8000af0:	f000 fa88 	bl	8001004 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <HAL_InitTick+0xa4>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afc:	4a1e      	ldr	r2, [pc, #120]	; (8000b78 <HAL_InitTick+0xa4>)
 8000afe:	f043 0310 	orr.w	r3, r3, #16
 8000b02:	6413      	str	r3, [r2, #64]	; 0x40
 8000b04:	4b1c      	ldr	r3, [pc, #112]	; (8000b78 <HAL_InitTick+0xa4>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b08:	f003 0310 	and.w	r3, r3, #16
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b10:	f107 0210 	add.w	r2, r7, #16
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4611      	mov	r1, r2
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f001 f8aa 	bl	8001c74 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b20:	f001 f880 	bl	8001c24 <HAL_RCC_GetPCLK1Freq>
 8000b24:	4603      	mov	r3, r0
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b2c:	4a13      	ldr	r2, [pc, #76]	; (8000b7c <HAL_InitTick+0xa8>)
 8000b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b32:	0c9b      	lsrs	r3, r3, #18
 8000b34:	3b01      	subs	r3, #1
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <HAL_InitTick+0xac>)
 8000b3a:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <HAL_InitTick+0xb0>)
 8000b3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <HAL_InitTick+0xac>)
 8000b40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b44:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b46:	4a0e      	ldr	r2, [pc, #56]	; (8000b80 <HAL_InitTick+0xac>)
 8000b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b4a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <HAL_InitTick+0xac>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <HAL_InitTick+0xac>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000b58:	4809      	ldr	r0, [pc, #36]	; (8000b80 <HAL_InitTick+0xac>)
 8000b5a:	f001 f8bd 	bl	8001cd8 <HAL_TIM_Base_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d104      	bne.n	8000b6e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000b64:	4806      	ldr	r0, [pc, #24]	; (8000b80 <HAL_InitTick+0xac>)
 8000b66:	f001 f911 	bl	8001d8c <HAL_TIM_Base_Start_IT>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	e000      	b.n	8000b70 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3730      	adds	r7, #48	; 0x30
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	431bde83 	.word	0x431bde83
 8000b80:	20012e58 	.word	0x20012e58
 8000b84:	40001000 	.word	0x40001000

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <NMI_Handler+0x4>

08000b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <HardFault_Handler+0x4>

08000b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <MemManage_Handler+0x4>

08000b9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <BusFault_Handler+0x4>

08000ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <UsageFault_Handler+0x4>

08000ba6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bb8:	4802      	ldr	r0, [pc, #8]	; (8000bc4 <TIM6_DAC_IRQHandler+0x10>)
 8000bba:	f001 f957 	bl	8001e6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20012e58 	.word	0x20012e58

08000bc8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <ITM_SendChar+0x48>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a0e      	ldr	r2, [pc, #56]	; (8000c10 <ITM_SendChar+0x48>)
 8000bd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bdc:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000bde:	4b0d      	ldr	r3, [pc, #52]	; (8000c14 <ITM_SendChar+0x4c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a0c      	ldr	r2, [pc, #48]	; (8000c14 <ITM_SendChar+0x4c>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000bea:	bf00      	nop
 8000bec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d0f8      	beq.n	8000bec <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000bfa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	6013      	str	r3, [r2, #0]
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000edfc 	.word	0xe000edfc
 8000c14:	e0000e00 	.word	0xe0000e00

08000c18 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	e00a      	b.n	8000c40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c2a:	f3af 8000 	nop.w
 8000c2e:	4601      	mov	r1, r0
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	1c5a      	adds	r2, r3, #1
 8000c34:	60ba      	str	r2, [r7, #8]
 8000c36:	b2ca      	uxtb	r2, r1
 8000c38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	697a      	ldr	r2, [r7, #20]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	dbf0      	blt.n	8000c2a <_read+0x12>
	}

return len;
 8000c48:	687b      	ldr	r3, [r7, #4]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b086      	sub	sp, #24
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	60f8      	str	r0, [r7, #12]
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	e009      	b.n	8000c78 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	1c5a      	adds	r2, r3, #1
 8000c68:	60ba      	str	r2, [r7, #8]
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ffab 	bl	8000bc8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	3301      	adds	r3, #1
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	697a      	ldr	r2, [r7, #20]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	dbf1      	blt.n	8000c64 <_write+0x12>
	}
	return len;
 8000c80:	687b      	ldr	r3, [r7, #4]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <_close>:

int _close(int file)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
	return -1;
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cb2:	605a      	str	r2, [r3, #4]
	return 0;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <_isatty>:

int _isatty(int file)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
	return 1;
 8000cca:	2301      	movs	r3, #1
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
	return 0;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
	...

08000cf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cfc:	4a14      	ldr	r2, [pc, #80]	; (8000d50 <_sbrk+0x5c>)
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <_sbrk+0x60>)
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d08:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <_sbrk+0x64>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d102      	bne.n	8000d16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <_sbrk+0x64>)
 8000d12:	4a12      	ldr	r2, [pc, #72]	; (8000d5c <_sbrk+0x68>)
 8000d14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <_sbrk+0x64>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d207      	bcs.n	8000d34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d24:	f004 fa50 	bl	80051c8 <__errno>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	220c      	movs	r2, #12
 8000d2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d32:	e009      	b.n	8000d48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <_sbrk+0x64>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d3a:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <_sbrk+0x64>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	4a05      	ldr	r2, [pc, #20]	; (8000d58 <_sbrk+0x64>)
 8000d44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d46:	68fb      	ldr	r3, [r7, #12]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3718      	adds	r7, #24
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20020000 	.word	0x20020000
 8000d54:	00000400 	.word	0x00000400
 8000d58:	20000094 	.word	0x20000094
 8000d5c:	20012ef8 	.word	0x20012ef8

08000d60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <SystemInit+0x20>)
 8000d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d6a:	4a05      	ldr	r2, [pc, #20]	; (8000d80 <SystemInit+0x20>)
 8000d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dbc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d88:	480d      	ldr	r0, [pc, #52]	; (8000dc0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d8a:	490e      	ldr	r1, [pc, #56]	; (8000dc4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d8c:	4a0e      	ldr	r2, [pc, #56]	; (8000dc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d90:	e002      	b.n	8000d98 <LoopCopyDataInit>

08000d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d96:	3304      	adds	r3, #4

08000d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d9c:	d3f9      	bcc.n	8000d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9e:	4a0b      	ldr	r2, [pc, #44]	; (8000dcc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000da0:	4c0b      	ldr	r4, [pc, #44]	; (8000dd0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da4:	e001      	b.n	8000daa <LoopFillZerobss>

08000da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da8:	3204      	adds	r2, #4

08000daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dac:	d3fb      	bcc.n	8000da6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dae:	f7ff ffd7 	bl	8000d60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000db2:	f004 fa0f 	bl	80051d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000db6:	f7ff fb87 	bl	80004c8 <main>
  bx  lr    
 8000dba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000dc8:	08005cec 	.word	0x08005cec
  ldr r2, =_sbss
 8000dcc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000dd0:	20012ef4 	.word	0x20012ef4

08000dd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd4:	e7fe      	b.n	8000dd4 <ADC_IRQHandler>
	...

08000dd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <HAL_Init+0x40>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0d      	ldr	r2, [pc, #52]	; (8000e18 <HAL_Init+0x40>)
 8000de2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000de8:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <HAL_Init+0x40>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <HAL_Init+0x40>)
 8000dee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000df2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <HAL_Init+0x40>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a07      	ldr	r2, [pc, #28]	; (8000e18 <HAL_Init+0x40>)
 8000dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e00:	2003      	movs	r0, #3
 8000e02:	f000 f8d8 	bl	8000fb6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e06:	2000      	movs	r0, #0
 8000e08:	f7ff fe64 	bl	8000ad4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e0c:	f7ff fdf2 	bl	80009f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40023c00 	.word	0x40023c00

08000e1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_IncTick+0x20>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_IncTick+0x24>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <HAL_IncTick+0x24>)
 8000e2e:	6013      	str	r3, [r2, #0]
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20000008 	.word	0x20000008
 8000e40:	20012ea0 	.word	0x20012ea0

08000e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return uwTick;
 8000e48:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <HAL_GetTick+0x14>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20012ea0 	.word	0x20012ea0

08000e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8e:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	60d3      	str	r3, [r2, #12]
}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <__NVIC_GetPriorityGrouping+0x18>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	0a1b      	lsrs	r3, r3, #8
 8000eae:	f003 0307 	and.w	r3, r3, #7
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	db0b      	blt.n	8000eea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	f003 021f 	and.w	r2, r3, #31
 8000ed8:	4907      	ldr	r1, [pc, #28]	; (8000ef8 <__NVIC_EnableIRQ+0x38>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	095b      	lsrs	r3, r3, #5
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000e100 	.word	0xe000e100

08000efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	6039      	str	r1, [r7, #0]
 8000f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	db0a      	blt.n	8000f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	490c      	ldr	r1, [pc, #48]	; (8000f48 <__NVIC_SetPriority+0x4c>)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	0112      	lsls	r2, r2, #4
 8000f1c:	b2d2      	uxtb	r2, r2
 8000f1e:	440b      	add	r3, r1
 8000f20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f24:	e00a      	b.n	8000f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4908      	ldr	r1, [pc, #32]	; (8000f4c <__NVIC_SetPriority+0x50>)
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	f003 030f 	and.w	r3, r3, #15
 8000f32:	3b04      	subs	r3, #4
 8000f34:	0112      	lsls	r2, r2, #4
 8000f36:	b2d2      	uxtb	r2, r2
 8000f38:	440b      	add	r3, r1
 8000f3a:	761a      	strb	r2, [r3, #24]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000e100 	.word	0xe000e100
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b089      	sub	sp, #36	; 0x24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	f1c3 0307 	rsb	r3, r3, #7
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	bf28      	it	cs
 8000f6e:	2304      	movcs	r3, #4
 8000f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3304      	adds	r3, #4
 8000f76:	2b06      	cmp	r3, #6
 8000f78:	d902      	bls.n	8000f80 <NVIC_EncodePriority+0x30>
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3b03      	subs	r3, #3
 8000f7e:	e000      	b.n	8000f82 <NVIC_EncodePriority+0x32>
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	f04f 32ff 	mov.w	r2, #4294967295
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43da      	mvns	r2, r3
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	401a      	ands	r2, r3
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f98:	f04f 31ff 	mov.w	r1, #4294967295
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa2:	43d9      	mvns	r1, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	4313      	orrs	r3, r2
         );
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3724      	adds	r7, #36	; 0x24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff ff4c 	bl	8000e5c <__NVIC_SetPriorityGrouping>
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
 8000fd8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fde:	f7ff ff61 	bl	8000ea4 <__NVIC_GetPriorityGrouping>
 8000fe2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	68b9      	ldr	r1, [r7, #8]
 8000fe8:	6978      	ldr	r0, [r7, #20]
 8000fea:	f7ff ffb1 	bl	8000f50 <NVIC_EncodePriority>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff ff80 	bl	8000efc <__NVIC_SetPriority>
}
 8000ffc:	bf00      	nop
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff ff54 	bl	8000ec0 <__NVIC_EnableIRQ>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001020:	b480      	push	{r7}
 8001022:	b089      	sub	sp, #36	; 0x24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001032:	2300      	movs	r3, #0
 8001034:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
 800103a:	e16b      	b.n	8001314 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800103c:	2201      	movs	r2, #1
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	697a      	ldr	r2, [r7, #20]
 800104c:	4013      	ands	r3, r2
 800104e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	429a      	cmp	r2, r3
 8001056:	f040 815a 	bne.w	800130e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f003 0303 	and.w	r3, r3, #3
 8001062:	2b01      	cmp	r3, #1
 8001064:	d005      	beq.n	8001072 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800106e:	2b02      	cmp	r3, #2
 8001070:	d130      	bne.n	80010d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	2203      	movs	r2, #3
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4013      	ands	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	68da      	ldr	r2, [r3, #12]
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4313      	orrs	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010a8:	2201      	movs	r2, #1
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	091b      	lsrs	r3, r3, #4
 80010be:	f003 0201 	and.w	r2, r3, #1
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	2b03      	cmp	r3, #3
 80010de:	d017      	beq.n	8001110 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	2203      	movs	r2, #3
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	689a      	ldr	r2, [r3, #8]
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f003 0303 	and.w	r3, r3, #3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d123      	bne.n	8001164 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	08da      	lsrs	r2, r3, #3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3208      	adds	r2, #8
 8001124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001128:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	f003 0307 	and.w	r3, r3, #7
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	220f      	movs	r2, #15
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	691a      	ldr	r2, [r3, #16]
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	08da      	lsrs	r2, r3, #3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3208      	adds	r2, #8
 800115e:	69b9      	ldr	r1, [r7, #24]
 8001160:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	2203      	movs	r2, #3
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 0203 	and.w	r2, r3, #3
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f000 80b4 	beq.w	800130e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	4b60      	ldr	r3, [pc, #384]	; (800132c <HAL_GPIO_Init+0x30c>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	4a5f      	ldr	r2, [pc, #380]	; (800132c <HAL_GPIO_Init+0x30c>)
 80011b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b4:	6453      	str	r3, [r2, #68]	; 0x44
 80011b6:	4b5d      	ldr	r3, [pc, #372]	; (800132c <HAL_GPIO_Init+0x30c>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011c2:	4a5b      	ldr	r2, [pc, #364]	; (8001330 <HAL_GPIO_Init+0x310>)
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	089b      	lsrs	r3, r3, #2
 80011c8:	3302      	adds	r3, #2
 80011ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f003 0303 	and.w	r3, r3, #3
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	220f      	movs	r2, #15
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43db      	mvns	r3, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4013      	ands	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a52      	ldr	r2, [pc, #328]	; (8001334 <HAL_GPIO_Init+0x314>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d02b      	beq.n	8001246 <HAL_GPIO_Init+0x226>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a51      	ldr	r2, [pc, #324]	; (8001338 <HAL_GPIO_Init+0x318>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d025      	beq.n	8001242 <HAL_GPIO_Init+0x222>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a50      	ldr	r2, [pc, #320]	; (800133c <HAL_GPIO_Init+0x31c>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d01f      	beq.n	800123e <HAL_GPIO_Init+0x21e>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a4f      	ldr	r2, [pc, #316]	; (8001340 <HAL_GPIO_Init+0x320>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d019      	beq.n	800123a <HAL_GPIO_Init+0x21a>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a4e      	ldr	r2, [pc, #312]	; (8001344 <HAL_GPIO_Init+0x324>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d013      	beq.n	8001236 <HAL_GPIO_Init+0x216>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a4d      	ldr	r2, [pc, #308]	; (8001348 <HAL_GPIO_Init+0x328>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d00d      	beq.n	8001232 <HAL_GPIO_Init+0x212>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a4c      	ldr	r2, [pc, #304]	; (800134c <HAL_GPIO_Init+0x32c>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d007      	beq.n	800122e <HAL_GPIO_Init+0x20e>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4b      	ldr	r2, [pc, #300]	; (8001350 <HAL_GPIO_Init+0x330>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d101      	bne.n	800122a <HAL_GPIO_Init+0x20a>
 8001226:	2307      	movs	r3, #7
 8001228:	e00e      	b.n	8001248 <HAL_GPIO_Init+0x228>
 800122a:	2308      	movs	r3, #8
 800122c:	e00c      	b.n	8001248 <HAL_GPIO_Init+0x228>
 800122e:	2306      	movs	r3, #6
 8001230:	e00a      	b.n	8001248 <HAL_GPIO_Init+0x228>
 8001232:	2305      	movs	r3, #5
 8001234:	e008      	b.n	8001248 <HAL_GPIO_Init+0x228>
 8001236:	2304      	movs	r3, #4
 8001238:	e006      	b.n	8001248 <HAL_GPIO_Init+0x228>
 800123a:	2303      	movs	r3, #3
 800123c:	e004      	b.n	8001248 <HAL_GPIO_Init+0x228>
 800123e:	2302      	movs	r3, #2
 8001240:	e002      	b.n	8001248 <HAL_GPIO_Init+0x228>
 8001242:	2301      	movs	r3, #1
 8001244:	e000      	b.n	8001248 <HAL_GPIO_Init+0x228>
 8001246:	2300      	movs	r3, #0
 8001248:	69fa      	ldr	r2, [r7, #28]
 800124a:	f002 0203 	and.w	r2, r2, #3
 800124e:	0092      	lsls	r2, r2, #2
 8001250:	4093      	lsls	r3, r2
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001258:	4935      	ldr	r1, [pc, #212]	; (8001330 <HAL_GPIO_Init+0x310>)
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	089b      	lsrs	r3, r3, #2
 800125e:	3302      	adds	r3, #2
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001266:	4b3b      	ldr	r3, [pc, #236]	; (8001354 <HAL_GPIO_Init+0x334>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800128a:	4a32      	ldr	r2, [pc, #200]	; (8001354 <HAL_GPIO_Init+0x334>)
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001290:	4b30      	ldr	r3, [pc, #192]	; (8001354 <HAL_GPIO_Init+0x334>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012b4:	4a27      	ldr	r2, [pc, #156]	; (8001354 <HAL_GPIO_Init+0x334>)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ba:	4b26      	ldr	r3, [pc, #152]	; (8001354 <HAL_GPIO_Init+0x334>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	43db      	mvns	r3, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012de:	4a1d      	ldr	r2, [pc, #116]	; (8001354 <HAL_GPIO_Init+0x334>)
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012e4:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <HAL_GPIO_Init+0x334>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	43db      	mvns	r3, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d003      	beq.n	8001308 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001308:	4a12      	ldr	r2, [pc, #72]	; (8001354 <HAL_GPIO_Init+0x334>)
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3301      	adds	r3, #1
 8001312:	61fb      	str	r3, [r7, #28]
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	2b0f      	cmp	r3, #15
 8001318:	f67f ae90 	bls.w	800103c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	3724      	adds	r7, #36	; 0x24
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800
 8001330:	40013800 	.word	0x40013800
 8001334:	40020000 	.word	0x40020000
 8001338:	40020400 	.word	0x40020400
 800133c:	40020800 	.word	0x40020800
 8001340:	40020c00 	.word	0x40020c00
 8001344:	40021000 	.word	0x40021000
 8001348:	40021400 	.word	0x40021400
 800134c:	40021800 	.word	0x40021800
 8001350:	40021c00 	.word	0x40021c00
 8001354:	40013c00 	.word	0x40013c00

08001358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	460b      	mov	r3, r1
 8001362:	807b      	strh	r3, [r7, #2]
 8001364:	4613      	mov	r3, r2
 8001366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001368:	787b      	ldrb	r3, [r7, #1]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800136e:	887a      	ldrh	r2, [r7, #2]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001374:	e003      	b.n	800137e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001376:	887b      	ldrh	r3, [r7, #2]
 8001378:	041a      	lsls	r2, r3, #16
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	619a      	str	r2, [r3, #24]
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
	...

0800138c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e264      	b.n	8001868 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d075      	beq.n	8001496 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013aa:	4ba3      	ldr	r3, [pc, #652]	; (8001638 <HAL_RCC_OscConfig+0x2ac>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f003 030c 	and.w	r3, r3, #12
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	d00c      	beq.n	80013d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013b6:	4ba0      	ldr	r3, [pc, #640]	; (8001638 <HAL_RCC_OscConfig+0x2ac>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013be:	2b08      	cmp	r3, #8
 80013c0:	d112      	bne.n	80013e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013c2:	4b9d      	ldr	r3, [pc, #628]	; (8001638 <HAL_RCC_OscConfig+0x2ac>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013ce:	d10b      	bne.n	80013e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d0:	4b99      	ldr	r3, [pc, #612]	; (8001638 <HAL_RCC_OscConfig+0x2ac>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d05b      	beq.n	8001494 <HAL_RCC_OscConfig+0x108>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d157      	bne.n	8001494 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e23f      	b.n	8001868 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f0:	d106      	bne.n	8001400 <HAL_RCC_OscConfig+0x74>
 80013f2:	4b91      	ldr	r3, [pc, #580]	; (8001638 <HAL_RCC_OscConfig+0x2ac>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a90      	ldr	r2, [pc, #576]	; (8001638 <HAL_RCC_OscConfig+0x2ac>)
 80013f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	e01d      	b.n	800143c <HAL_RCC_OscConfig+0xb0>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001408:	d10c      	bne.n	8001424 <HAL_RCC_OscConfig+0x98>
 800140a:	4b8b      	ldr	r3, [pc, #556]	; (8001638 <HAL_RCC_OscConfig+0x2ac>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a8a      	ldr	r2, [pc, #552]	; (8001638 <HAL_RCC_OscConfig+0x2ac>)
 8001410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	4b88      	ldr	r3, [pc, #544]	; (8001638 <HAL_RCC_OscConfig+0x2ac>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a87      	ldr	r2, [pc, #540]	; (8001638 <HAL_RCC_OscConfig+0x2ac>)
 800141c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	e00b      	b.n	800143c <HAL_RCC_OscConfig+0xb0>
 8001424:	4b84      	ldr	r3, [pc, #528]	; (8001638 <HAL_RCC_OscConfig+0x2ac>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a83      	ldr	r2, [pc, #524]	; (8001638 <HAL_RCC_OscConfig+0x2ac>)
 800142a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800142e:	6013      	str	r3, [r2, #0]
 8001430:	4b81      	ldr	r3, [pc, #516]	; (8001638 <HAL_RCC_OscConfig+0x2ac>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a80      	ldr	r2, [pc, #512]	; (8001638 <HAL_RCC_OscConfig+0x2ac>)
 8001436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800143a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d013      	beq.n	800146c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001444:	f7ff fcfe 	bl	8000e44 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800144c:	f7ff fcfa 	bl	8000e44 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b64      	cmp	r3, #100	; 0x64
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e204      	b.n	8001868 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800145e:	4b76      	ldr	r3, [pc, #472]	; (8001638 <HAL_RCC_OscConfig+0x2ac>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f0      	beq.n	800144c <HAL_RCC_OscConfig+0xc0>
 800146a:	e014      	b.n	8001496 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146c:	f7ff fcea 	bl	8000e44 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001474:	f7ff fce6 	bl	8000e44 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b64      	cmp	r3, #100	; 0x64
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e1f0      	b.n	8001868 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001486:	4b6c      	ldr	r3, [pc, #432]	; (8001638 <HAL_RCC_OscConfig+0x2ac>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f0      	bne.n	8001474 <HAL_RCC_OscConfig+0xe8>
 8001492:	e000      	b.n	8001496 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d063      	beq.n	800156a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014a2:	4b65      	ldr	r3, [pc, #404]	; (8001638 <HAL_RCC_OscConfig+0x2ac>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 030c 	and.w	r3, r3, #12
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d00b      	beq.n	80014c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ae:	4b62      	ldr	r3, [pc, #392]	; (8001638 <HAL_RCC_OscConfig+0x2ac>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014b6:	2b08      	cmp	r3, #8
 80014b8:	d11c      	bne.n	80014f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ba:	4b5f      	ldr	r3, [pc, #380]	; (8001638 <HAL_RCC_OscConfig+0x2ac>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d116      	bne.n	80014f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c6:	4b5c      	ldr	r3, [pc, #368]	; (8001638 <HAL_RCC_OscConfig+0x2ac>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d005      	beq.n	80014de <HAL_RCC_OscConfig+0x152>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d001      	beq.n	80014de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e1c4      	b.n	8001868 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014de:	4b56      	ldr	r3, [pc, #344]	; (8001638 <HAL_RCC_OscConfig+0x2ac>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	4952      	ldr	r1, [pc, #328]	; (8001638 <HAL_RCC_OscConfig+0x2ac>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014f2:	e03a      	b.n	800156a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d020      	beq.n	800153e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014fc:	4b4f      	ldr	r3, [pc, #316]	; (800163c <HAL_RCC_OscConfig+0x2b0>)
 80014fe:	2201      	movs	r2, #1
 8001500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001502:	f7ff fc9f 	bl	8000e44 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800150a:	f7ff fc9b 	bl	8000e44 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e1a5      	b.n	8001868 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800151c:	4b46      	ldr	r3, [pc, #280]	; (8001638 <HAL_RCC_OscConfig+0x2ac>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0f0      	beq.n	800150a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001528:	4b43      	ldr	r3, [pc, #268]	; (8001638 <HAL_RCC_OscConfig+0x2ac>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	4940      	ldr	r1, [pc, #256]	; (8001638 <HAL_RCC_OscConfig+0x2ac>)
 8001538:	4313      	orrs	r3, r2
 800153a:	600b      	str	r3, [r1, #0]
 800153c:	e015      	b.n	800156a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800153e:	4b3f      	ldr	r3, [pc, #252]	; (800163c <HAL_RCC_OscConfig+0x2b0>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001544:	f7ff fc7e 	bl	8000e44 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800154c:	f7ff fc7a 	bl	8000e44 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e184      	b.n	8001868 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800155e:	4b36      	ldr	r3, [pc, #216]	; (8001638 <HAL_RCC_OscConfig+0x2ac>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	2b00      	cmp	r3, #0
 8001574:	d030      	beq.n	80015d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d016      	beq.n	80015ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800157e:	4b30      	ldr	r3, [pc, #192]	; (8001640 <HAL_RCC_OscConfig+0x2b4>)
 8001580:	2201      	movs	r2, #1
 8001582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001584:	f7ff fc5e 	bl	8000e44 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800158c:	f7ff fc5a 	bl	8000e44 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e164      	b.n	8001868 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159e:	4b26      	ldr	r3, [pc, #152]	; (8001638 <HAL_RCC_OscConfig+0x2ac>)
 80015a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f0      	beq.n	800158c <HAL_RCC_OscConfig+0x200>
 80015aa:	e015      	b.n	80015d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ac:	4b24      	ldr	r3, [pc, #144]	; (8001640 <HAL_RCC_OscConfig+0x2b4>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b2:	f7ff fc47 	bl	8000e44 <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ba:	f7ff fc43 	bl	8000e44 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e14d      	b.n	8001868 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015cc:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <HAL_RCC_OscConfig+0x2ac>)
 80015ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1f0      	bne.n	80015ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f000 80a0 	beq.w	8001726 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e6:	2300      	movs	r3, #0
 80015e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ea:	4b13      	ldr	r3, [pc, #76]	; (8001638 <HAL_RCC_OscConfig+0x2ac>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10f      	bne.n	8001616 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <HAL_RCC_OscConfig+0x2ac>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	4a0e      	ldr	r2, [pc, #56]	; (8001638 <HAL_RCC_OscConfig+0x2ac>)
 8001600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001604:	6413      	str	r3, [r2, #64]	; 0x40
 8001606:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <HAL_RCC_OscConfig+0x2ac>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001612:	2301      	movs	r3, #1
 8001614:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001616:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <HAL_RCC_OscConfig+0x2b8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161e:	2b00      	cmp	r3, #0
 8001620:	d121      	bne.n	8001666 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001622:	4b08      	ldr	r3, [pc, #32]	; (8001644 <HAL_RCC_OscConfig+0x2b8>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a07      	ldr	r2, [pc, #28]	; (8001644 <HAL_RCC_OscConfig+0x2b8>)
 8001628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800162e:	f7ff fc09 	bl	8000e44 <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001634:	e011      	b.n	800165a <HAL_RCC_OscConfig+0x2ce>
 8001636:	bf00      	nop
 8001638:	40023800 	.word	0x40023800
 800163c:	42470000 	.word	0x42470000
 8001640:	42470e80 	.word	0x42470e80
 8001644:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001648:	f7ff fbfc 	bl	8000e44 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e106      	b.n	8001868 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800165a:	4b85      	ldr	r3, [pc, #532]	; (8001870 <HAL_RCC_OscConfig+0x4e4>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f0      	beq.n	8001648 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d106      	bne.n	800167c <HAL_RCC_OscConfig+0x2f0>
 800166e:	4b81      	ldr	r3, [pc, #516]	; (8001874 <HAL_RCC_OscConfig+0x4e8>)
 8001670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001672:	4a80      	ldr	r2, [pc, #512]	; (8001874 <HAL_RCC_OscConfig+0x4e8>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6713      	str	r3, [r2, #112]	; 0x70
 800167a:	e01c      	b.n	80016b6 <HAL_RCC_OscConfig+0x32a>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	2b05      	cmp	r3, #5
 8001682:	d10c      	bne.n	800169e <HAL_RCC_OscConfig+0x312>
 8001684:	4b7b      	ldr	r3, [pc, #492]	; (8001874 <HAL_RCC_OscConfig+0x4e8>)
 8001686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001688:	4a7a      	ldr	r2, [pc, #488]	; (8001874 <HAL_RCC_OscConfig+0x4e8>)
 800168a:	f043 0304 	orr.w	r3, r3, #4
 800168e:	6713      	str	r3, [r2, #112]	; 0x70
 8001690:	4b78      	ldr	r3, [pc, #480]	; (8001874 <HAL_RCC_OscConfig+0x4e8>)
 8001692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001694:	4a77      	ldr	r2, [pc, #476]	; (8001874 <HAL_RCC_OscConfig+0x4e8>)
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	6713      	str	r3, [r2, #112]	; 0x70
 800169c:	e00b      	b.n	80016b6 <HAL_RCC_OscConfig+0x32a>
 800169e:	4b75      	ldr	r3, [pc, #468]	; (8001874 <HAL_RCC_OscConfig+0x4e8>)
 80016a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a2:	4a74      	ldr	r2, [pc, #464]	; (8001874 <HAL_RCC_OscConfig+0x4e8>)
 80016a4:	f023 0301 	bic.w	r3, r3, #1
 80016a8:	6713      	str	r3, [r2, #112]	; 0x70
 80016aa:	4b72      	ldr	r3, [pc, #456]	; (8001874 <HAL_RCC_OscConfig+0x4e8>)
 80016ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ae:	4a71      	ldr	r2, [pc, #452]	; (8001874 <HAL_RCC_OscConfig+0x4e8>)
 80016b0:	f023 0304 	bic.w	r3, r3, #4
 80016b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d015      	beq.n	80016ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016be:	f7ff fbc1 	bl	8000e44 <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c4:	e00a      	b.n	80016dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016c6:	f7ff fbbd 	bl	8000e44 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e0c5      	b.n	8001868 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016dc:	4b65      	ldr	r3, [pc, #404]	; (8001874 <HAL_RCC_OscConfig+0x4e8>)
 80016de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0ee      	beq.n	80016c6 <HAL_RCC_OscConfig+0x33a>
 80016e8:	e014      	b.n	8001714 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ea:	f7ff fbab 	bl	8000e44 <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f0:	e00a      	b.n	8001708 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016f2:	f7ff fba7 	bl	8000e44 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001700:	4293      	cmp	r3, r2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e0af      	b.n	8001868 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001708:	4b5a      	ldr	r3, [pc, #360]	; (8001874 <HAL_RCC_OscConfig+0x4e8>)
 800170a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1ee      	bne.n	80016f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001714:	7dfb      	ldrb	r3, [r7, #23]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d105      	bne.n	8001726 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800171a:	4b56      	ldr	r3, [pc, #344]	; (8001874 <HAL_RCC_OscConfig+0x4e8>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	4a55      	ldr	r2, [pc, #340]	; (8001874 <HAL_RCC_OscConfig+0x4e8>)
 8001720:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001724:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	2b00      	cmp	r3, #0
 800172c:	f000 809b 	beq.w	8001866 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001730:	4b50      	ldr	r3, [pc, #320]	; (8001874 <HAL_RCC_OscConfig+0x4e8>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f003 030c 	and.w	r3, r3, #12
 8001738:	2b08      	cmp	r3, #8
 800173a:	d05c      	beq.n	80017f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	2b02      	cmp	r3, #2
 8001742:	d141      	bne.n	80017c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001744:	4b4c      	ldr	r3, [pc, #304]	; (8001878 <HAL_RCC_OscConfig+0x4ec>)
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174a:	f7ff fb7b 	bl	8000e44 <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001752:	f7ff fb77 	bl	8000e44 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e081      	b.n	8001868 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001764:	4b43      	ldr	r3, [pc, #268]	; (8001874 <HAL_RCC_OscConfig+0x4e8>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1f0      	bne.n	8001752 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	69da      	ldr	r2, [r3, #28]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	431a      	orrs	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177e:	019b      	lsls	r3, r3, #6
 8001780:	431a      	orrs	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001786:	085b      	lsrs	r3, r3, #1
 8001788:	3b01      	subs	r3, #1
 800178a:	041b      	lsls	r3, r3, #16
 800178c:	431a      	orrs	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001792:	061b      	lsls	r3, r3, #24
 8001794:	4937      	ldr	r1, [pc, #220]	; (8001874 <HAL_RCC_OscConfig+0x4e8>)
 8001796:	4313      	orrs	r3, r2
 8001798:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800179a:	4b37      	ldr	r3, [pc, #220]	; (8001878 <HAL_RCC_OscConfig+0x4ec>)
 800179c:	2201      	movs	r2, #1
 800179e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a0:	f7ff fb50 	bl	8000e44 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017a8:	f7ff fb4c 	bl	8000e44 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e056      	b.n	8001868 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ba:	4b2e      	ldr	r3, [pc, #184]	; (8001874 <HAL_RCC_OscConfig+0x4e8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0f0      	beq.n	80017a8 <HAL_RCC_OscConfig+0x41c>
 80017c6:	e04e      	b.n	8001866 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c8:	4b2b      	ldr	r3, [pc, #172]	; (8001878 <HAL_RCC_OscConfig+0x4ec>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ce:	f7ff fb39 	bl	8000e44 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017d6:	f7ff fb35 	bl	8000e44 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e03f      	b.n	8001868 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e8:	4b22      	ldr	r3, [pc, #136]	; (8001874 <HAL_RCC_OscConfig+0x4e8>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1f0      	bne.n	80017d6 <HAL_RCC_OscConfig+0x44a>
 80017f4:	e037      	b.n	8001866 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d101      	bne.n	8001802 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e032      	b.n	8001868 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001802:	4b1c      	ldr	r3, [pc, #112]	; (8001874 <HAL_RCC_OscConfig+0x4e8>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d028      	beq.n	8001862 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800181a:	429a      	cmp	r2, r3
 800181c:	d121      	bne.n	8001862 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001828:	429a      	cmp	r2, r3
 800182a:	d11a      	bne.n	8001862 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001832:	4013      	ands	r3, r2
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001838:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800183a:	4293      	cmp	r3, r2
 800183c:	d111      	bne.n	8001862 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001848:	085b      	lsrs	r3, r3, #1
 800184a:	3b01      	subs	r3, #1
 800184c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800184e:	429a      	cmp	r2, r3
 8001850:	d107      	bne.n	8001862 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800185e:	429a      	cmp	r2, r3
 8001860:	d001      	beq.n	8001866 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e000      	b.n	8001868 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001866:	2300      	movs	r3, #0
}
 8001868:	4618      	mov	r0, r3
 800186a:	3718      	adds	r7, #24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40007000 	.word	0x40007000
 8001874:	40023800 	.word	0x40023800
 8001878:	42470060 	.word	0x42470060

0800187c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e0cc      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001890:	4b68      	ldr	r3, [pc, #416]	; (8001a34 <HAL_RCC_ClockConfig+0x1b8>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	429a      	cmp	r2, r3
 800189c:	d90c      	bls.n	80018b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189e:	4b65      	ldr	r3, [pc, #404]	; (8001a34 <HAL_RCC_ClockConfig+0x1b8>)
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a6:	4b63      	ldr	r3, [pc, #396]	; (8001a34 <HAL_RCC_ClockConfig+0x1b8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d001      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e0b8      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d020      	beq.n	8001906 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d005      	beq.n	80018dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018d0:	4b59      	ldr	r3, [pc, #356]	; (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	4a58      	ldr	r2, [pc, #352]	; (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0308 	and.w	r3, r3, #8
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d005      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018e8:	4b53      	ldr	r3, [pc, #332]	; (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	4a52      	ldr	r2, [pc, #328]	; (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018f4:	4b50      	ldr	r3, [pc, #320]	; (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	494d      	ldr	r1, [pc, #308]	; (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	4313      	orrs	r3, r2
 8001904:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	2b00      	cmp	r3, #0
 8001910:	d044      	beq.n	800199c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d107      	bne.n	800192a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191a:	4b47      	ldr	r3, [pc, #284]	; (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d119      	bne.n	800195a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e07f      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b02      	cmp	r3, #2
 8001930:	d003      	beq.n	800193a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001936:	2b03      	cmp	r3, #3
 8001938:	d107      	bne.n	800194a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800193a:	4b3f      	ldr	r3, [pc, #252]	; (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d109      	bne.n	800195a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e06f      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800194a:	4b3b      	ldr	r3, [pc, #236]	; (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e067      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800195a:	4b37      	ldr	r3, [pc, #220]	; (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f023 0203 	bic.w	r2, r3, #3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	4934      	ldr	r1, [pc, #208]	; (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 8001968:	4313      	orrs	r3, r2
 800196a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800196c:	f7ff fa6a 	bl	8000e44 <HAL_GetTick>
 8001970:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001972:	e00a      	b.n	800198a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001974:	f7ff fa66 	bl	8000e44 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001982:	4293      	cmp	r3, r2
 8001984:	d901      	bls.n	800198a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e04f      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800198a:	4b2b      	ldr	r3, [pc, #172]	; (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 020c 	and.w	r2, r3, #12
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	429a      	cmp	r2, r3
 800199a:	d1eb      	bne.n	8001974 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800199c:	4b25      	ldr	r3, [pc, #148]	; (8001a34 <HAL_RCC_ClockConfig+0x1b8>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d20c      	bcs.n	80019c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019aa:	4b22      	ldr	r3, [pc, #136]	; (8001a34 <HAL_RCC_ClockConfig+0x1b8>)
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b2:	4b20      	ldr	r3, [pc, #128]	; (8001a34 <HAL_RCC_ClockConfig+0x1b8>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d001      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e032      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d008      	beq.n	80019e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019d0:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	4916      	ldr	r1, [pc, #88]	; (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d009      	beq.n	8001a02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019ee:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	490e      	ldr	r1, [pc, #56]	; (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a02:	f000 f821 	bl	8001a48 <HAL_RCC_GetSysClockFreq>
 8001a06:	4602      	mov	r2, r0
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	091b      	lsrs	r3, r3, #4
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	490a      	ldr	r1, [pc, #40]	; (8001a3c <HAL_RCC_ClockConfig+0x1c0>)
 8001a14:	5ccb      	ldrb	r3, [r1, r3]
 8001a16:	fa22 f303 	lsr.w	r3, r2, r3
 8001a1a:	4a09      	ldr	r2, [pc, #36]	; (8001a40 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <HAL_RCC_ClockConfig+0x1c8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff f856 	bl	8000ad4 <HAL_InitTick>

  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40023c00 	.word	0x40023c00
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	08005c60 	.word	0x08005c60
 8001a40:	20000000 	.word	0x20000000
 8001a44:	20000004 	.word	0x20000004

08001a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a4c:	b084      	sub	sp, #16
 8001a4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	2300      	movs	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	2300      	movs	r3, #0
 8001a5a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a60:	4b67      	ldr	r3, [pc, #412]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 030c 	and.w	r3, r3, #12
 8001a68:	2b08      	cmp	r3, #8
 8001a6a:	d00d      	beq.n	8001a88 <HAL_RCC_GetSysClockFreq+0x40>
 8001a6c:	2b08      	cmp	r3, #8
 8001a6e:	f200 80bd 	bhi.w	8001bec <HAL_RCC_GetSysClockFreq+0x1a4>
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d002      	beq.n	8001a7c <HAL_RCC_GetSysClockFreq+0x34>
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	d003      	beq.n	8001a82 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a7a:	e0b7      	b.n	8001bec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a7c:	4b61      	ldr	r3, [pc, #388]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a7e:	60bb      	str	r3, [r7, #8]
       break;
 8001a80:	e0b7      	b.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a82:	4b61      	ldr	r3, [pc, #388]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001a84:	60bb      	str	r3, [r7, #8]
      break;
 8001a86:	e0b4      	b.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a88:	4b5d      	ldr	r3, [pc, #372]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a90:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a92:	4b5b      	ldr	r3, [pc, #364]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d04d      	beq.n	8001b3a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a9e:	4b58      	ldr	r3, [pc, #352]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	099b      	lsrs	r3, r3, #6
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	f04f 0300 	mov.w	r3, #0
 8001aaa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001aae:	f04f 0100 	mov.w	r1, #0
 8001ab2:	ea02 0800 	and.w	r8, r2, r0
 8001ab6:	ea03 0901 	and.w	r9, r3, r1
 8001aba:	4640      	mov	r0, r8
 8001abc:	4649      	mov	r1, r9
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	f04f 0300 	mov.w	r3, #0
 8001ac6:	014b      	lsls	r3, r1, #5
 8001ac8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001acc:	0142      	lsls	r2, r0, #5
 8001ace:	4610      	mov	r0, r2
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	ebb0 0008 	subs.w	r0, r0, r8
 8001ad6:	eb61 0109 	sbc.w	r1, r1, r9
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	f04f 0300 	mov.w	r3, #0
 8001ae2:	018b      	lsls	r3, r1, #6
 8001ae4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ae8:	0182      	lsls	r2, r0, #6
 8001aea:	1a12      	subs	r2, r2, r0
 8001aec:	eb63 0301 	sbc.w	r3, r3, r1
 8001af0:	f04f 0000 	mov.w	r0, #0
 8001af4:	f04f 0100 	mov.w	r1, #0
 8001af8:	00d9      	lsls	r1, r3, #3
 8001afa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001afe:	00d0      	lsls	r0, r2, #3
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	eb12 0208 	adds.w	r2, r2, r8
 8001b08:	eb43 0309 	adc.w	r3, r3, r9
 8001b0c:	f04f 0000 	mov.w	r0, #0
 8001b10:	f04f 0100 	mov.w	r1, #0
 8001b14:	0259      	lsls	r1, r3, #9
 8001b16:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001b1a:	0250      	lsls	r0, r2, #9
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4610      	mov	r0, r2
 8001b22:	4619      	mov	r1, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	461a      	mov	r2, r3
 8001b28:	f04f 0300 	mov.w	r3, #0
 8001b2c:	f7fe fb50 	bl	80001d0 <__aeabi_uldivmod>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4613      	mov	r3, r2
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	e04a      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b3a:	4b31      	ldr	r3, [pc, #196]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	099b      	lsrs	r3, r3, #6
 8001b40:	461a      	mov	r2, r3
 8001b42:	f04f 0300 	mov.w	r3, #0
 8001b46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b4a:	f04f 0100 	mov.w	r1, #0
 8001b4e:	ea02 0400 	and.w	r4, r2, r0
 8001b52:	ea03 0501 	and.w	r5, r3, r1
 8001b56:	4620      	mov	r0, r4
 8001b58:	4629      	mov	r1, r5
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	f04f 0300 	mov.w	r3, #0
 8001b62:	014b      	lsls	r3, r1, #5
 8001b64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b68:	0142      	lsls	r2, r0, #5
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	1b00      	subs	r0, r0, r4
 8001b70:	eb61 0105 	sbc.w	r1, r1, r5
 8001b74:	f04f 0200 	mov.w	r2, #0
 8001b78:	f04f 0300 	mov.w	r3, #0
 8001b7c:	018b      	lsls	r3, r1, #6
 8001b7e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b82:	0182      	lsls	r2, r0, #6
 8001b84:	1a12      	subs	r2, r2, r0
 8001b86:	eb63 0301 	sbc.w	r3, r3, r1
 8001b8a:	f04f 0000 	mov.w	r0, #0
 8001b8e:	f04f 0100 	mov.w	r1, #0
 8001b92:	00d9      	lsls	r1, r3, #3
 8001b94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b98:	00d0      	lsls	r0, r2, #3
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	1912      	adds	r2, r2, r4
 8001ba0:	eb45 0303 	adc.w	r3, r5, r3
 8001ba4:	f04f 0000 	mov.w	r0, #0
 8001ba8:	f04f 0100 	mov.w	r1, #0
 8001bac:	0299      	lsls	r1, r3, #10
 8001bae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001bb2:	0290      	lsls	r0, r2, #10
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4610      	mov	r0, r2
 8001bba:	4619      	mov	r1, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	f04f 0300 	mov.w	r3, #0
 8001bc4:	f7fe fb04 	bl	80001d0 <__aeabi_uldivmod>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4613      	mov	r3, r2
 8001bce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	0c1b      	lsrs	r3, r3, #16
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	3301      	adds	r3, #1
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be8:	60bb      	str	r3, [r7, #8]
      break;
 8001bea:	e002      	b.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bec:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001bee:	60bb      	str	r3, [r7, #8]
      break;
 8001bf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bf2:	68bb      	ldr	r3, [r7, #8]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001bfe:	bf00      	nop
 8001c00:	40023800 	.word	0x40023800
 8001c04:	00f42400 	.word	0x00f42400
 8001c08:	007a1200 	.word	0x007a1200

08001c0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c10:	4b03      	ldr	r3, [pc, #12]	; (8001c20 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c12:	681b      	ldr	r3, [r3, #0]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	20000000 	.word	0x20000000

08001c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c28:	f7ff fff0 	bl	8001c0c <HAL_RCC_GetHCLKFreq>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	0a9b      	lsrs	r3, r3, #10
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	4903      	ldr	r1, [pc, #12]	; (8001c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c3a:	5ccb      	ldrb	r3, [r1, r3]
 8001c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40023800 	.word	0x40023800
 8001c48:	08005c70 	.word	0x08005c70

08001c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c50:	f7ff ffdc 	bl	8001c0c <HAL_RCC_GetHCLKFreq>
 8001c54:	4602      	mov	r2, r0
 8001c56:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	0b5b      	lsrs	r3, r3, #13
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	4903      	ldr	r1, [pc, #12]	; (8001c70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c62:	5ccb      	ldrb	r3, [r1, r3]
 8001c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	08005c70 	.word	0x08005c70

08001c74 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	220f      	movs	r2, #15
 8001c82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c84:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 0203 	and.w	r2, r3, #3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c90:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ca8:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <HAL_RCC_GetClockConfig+0x5c>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	08db      	lsrs	r3, r3, #3
 8001cae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cb6:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <HAL_RCC_GetClockConfig+0x60>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0207 	and.w	r2, r3, #7
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	601a      	str	r2, [r3, #0]
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40023c00 	.word	0x40023c00

08001cd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e041      	b.n	8001d6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d106      	bne.n	8001d04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f839 	bl	8001d76 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2202      	movs	r2, #2
 8001d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3304      	adds	r3, #4
 8001d14:	4619      	mov	r1, r3
 8001d16:	4610      	mov	r0, r2
 8001d18:	f000 f9d8 	bl	80020cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
	...

08001d8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d001      	beq.n	8001da4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e04e      	b.n	8001e42 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2202      	movs	r2, #2
 8001da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0201 	orr.w	r2, r2, #1
 8001dba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a23      	ldr	r2, [pc, #140]	; (8001e50 <HAL_TIM_Base_Start_IT+0xc4>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d022      	beq.n	8001e0c <HAL_TIM_Base_Start_IT+0x80>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dce:	d01d      	beq.n	8001e0c <HAL_TIM_Base_Start_IT+0x80>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a1f      	ldr	r2, [pc, #124]	; (8001e54 <HAL_TIM_Base_Start_IT+0xc8>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d018      	beq.n	8001e0c <HAL_TIM_Base_Start_IT+0x80>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a1e      	ldr	r2, [pc, #120]	; (8001e58 <HAL_TIM_Base_Start_IT+0xcc>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d013      	beq.n	8001e0c <HAL_TIM_Base_Start_IT+0x80>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a1c      	ldr	r2, [pc, #112]	; (8001e5c <HAL_TIM_Base_Start_IT+0xd0>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d00e      	beq.n	8001e0c <HAL_TIM_Base_Start_IT+0x80>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a1b      	ldr	r2, [pc, #108]	; (8001e60 <HAL_TIM_Base_Start_IT+0xd4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d009      	beq.n	8001e0c <HAL_TIM_Base_Start_IT+0x80>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a19      	ldr	r2, [pc, #100]	; (8001e64 <HAL_TIM_Base_Start_IT+0xd8>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d004      	beq.n	8001e0c <HAL_TIM_Base_Start_IT+0x80>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a18      	ldr	r2, [pc, #96]	; (8001e68 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d111      	bne.n	8001e30 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2b06      	cmp	r3, #6
 8001e1c:	d010      	beq.n	8001e40 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f042 0201 	orr.w	r2, r2, #1
 8001e2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e2e:	e007      	b.n	8001e40 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0201 	orr.w	r2, r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	40010000 	.word	0x40010000
 8001e54:	40000400 	.word	0x40000400
 8001e58:	40000800 	.word	0x40000800
 8001e5c:	40000c00 	.word	0x40000c00
 8001e60:	40010400 	.word	0x40010400
 8001e64:	40014000 	.word	0x40014000
 8001e68:	40001800 	.word	0x40001800

08001e6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d122      	bne.n	8001ec8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d11b      	bne.n	8001ec8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f06f 0202 	mvn.w	r2, #2
 8001e98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f8ee 	bl	8002090 <HAL_TIM_IC_CaptureCallback>
 8001eb4:	e005      	b.n	8001ec2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f8e0 	bl	800207c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f8f1 	bl	80020a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	f003 0304 	and.w	r3, r3, #4
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	d122      	bne.n	8001f1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	d11b      	bne.n	8001f1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f06f 0204 	mvn.w	r2, #4
 8001eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f8c4 	bl	8002090 <HAL_TIM_IC_CaptureCallback>
 8001f08:	e005      	b.n	8001f16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f8b6 	bl	800207c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 f8c7 	bl	80020a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d122      	bne.n	8001f70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	f003 0308 	and.w	r3, r3, #8
 8001f34:	2b08      	cmp	r3, #8
 8001f36:	d11b      	bne.n	8001f70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f06f 0208 	mvn.w	r2, #8
 8001f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2204      	movs	r2, #4
 8001f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f89a 	bl	8002090 <HAL_TIM_IC_CaptureCallback>
 8001f5c:	e005      	b.n	8001f6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f88c 	bl	800207c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f89d 	bl	80020a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	f003 0310 	and.w	r3, r3, #16
 8001f7a:	2b10      	cmp	r3, #16
 8001f7c:	d122      	bne.n	8001fc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	f003 0310 	and.w	r3, r3, #16
 8001f88:	2b10      	cmp	r3, #16
 8001f8a:	d11b      	bne.n	8001fc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f06f 0210 	mvn.w	r2, #16
 8001f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2208      	movs	r2, #8
 8001f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f870 	bl	8002090 <HAL_TIM_IC_CaptureCallback>
 8001fb0:	e005      	b.n	8001fbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f862 	bl	800207c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 f873 	bl	80020a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d10e      	bne.n	8001ff0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d107      	bne.n	8001ff0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 0201 	mvn.w	r2, #1
 8001fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7fe fcea 	bl	80009c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffa:	2b80      	cmp	r3, #128	; 0x80
 8001ffc:	d10e      	bne.n	800201c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002008:	2b80      	cmp	r3, #128	; 0x80
 800200a:	d107      	bne.n	800201c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f902 	bl	8002220 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002026:	2b40      	cmp	r3, #64	; 0x40
 8002028:	d10e      	bne.n	8002048 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002034:	2b40      	cmp	r3, #64	; 0x40
 8002036:	d107      	bne.n	8002048 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f838 	bl	80020b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	f003 0320 	and.w	r3, r3, #32
 8002052:	2b20      	cmp	r3, #32
 8002054:	d10e      	bne.n	8002074 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f003 0320 	and.w	r3, r3, #32
 8002060:	2b20      	cmp	r3, #32
 8002062:	d107      	bne.n	8002074 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f06f 0220 	mvn.w	r2, #32
 800206c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f8cc 	bl	800220c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002074:	bf00      	nop
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a40      	ldr	r2, [pc, #256]	; (80021e0 <TIM_Base_SetConfig+0x114>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d013      	beq.n	800210c <TIM_Base_SetConfig+0x40>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ea:	d00f      	beq.n	800210c <TIM_Base_SetConfig+0x40>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a3d      	ldr	r2, [pc, #244]	; (80021e4 <TIM_Base_SetConfig+0x118>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d00b      	beq.n	800210c <TIM_Base_SetConfig+0x40>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a3c      	ldr	r2, [pc, #240]	; (80021e8 <TIM_Base_SetConfig+0x11c>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d007      	beq.n	800210c <TIM_Base_SetConfig+0x40>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a3b      	ldr	r2, [pc, #236]	; (80021ec <TIM_Base_SetConfig+0x120>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d003      	beq.n	800210c <TIM_Base_SetConfig+0x40>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a3a      	ldr	r2, [pc, #232]	; (80021f0 <TIM_Base_SetConfig+0x124>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d108      	bne.n	800211e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002112:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	4313      	orrs	r3, r2
 800211c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a2f      	ldr	r2, [pc, #188]	; (80021e0 <TIM_Base_SetConfig+0x114>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d02b      	beq.n	800217e <TIM_Base_SetConfig+0xb2>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800212c:	d027      	beq.n	800217e <TIM_Base_SetConfig+0xb2>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a2c      	ldr	r2, [pc, #176]	; (80021e4 <TIM_Base_SetConfig+0x118>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d023      	beq.n	800217e <TIM_Base_SetConfig+0xb2>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a2b      	ldr	r2, [pc, #172]	; (80021e8 <TIM_Base_SetConfig+0x11c>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d01f      	beq.n	800217e <TIM_Base_SetConfig+0xb2>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a2a      	ldr	r2, [pc, #168]	; (80021ec <TIM_Base_SetConfig+0x120>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d01b      	beq.n	800217e <TIM_Base_SetConfig+0xb2>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a29      	ldr	r2, [pc, #164]	; (80021f0 <TIM_Base_SetConfig+0x124>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d017      	beq.n	800217e <TIM_Base_SetConfig+0xb2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a28      	ldr	r2, [pc, #160]	; (80021f4 <TIM_Base_SetConfig+0x128>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d013      	beq.n	800217e <TIM_Base_SetConfig+0xb2>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a27      	ldr	r2, [pc, #156]	; (80021f8 <TIM_Base_SetConfig+0x12c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d00f      	beq.n	800217e <TIM_Base_SetConfig+0xb2>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a26      	ldr	r2, [pc, #152]	; (80021fc <TIM_Base_SetConfig+0x130>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d00b      	beq.n	800217e <TIM_Base_SetConfig+0xb2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a25      	ldr	r2, [pc, #148]	; (8002200 <TIM_Base_SetConfig+0x134>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d007      	beq.n	800217e <TIM_Base_SetConfig+0xb2>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a24      	ldr	r2, [pc, #144]	; (8002204 <TIM_Base_SetConfig+0x138>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d003      	beq.n	800217e <TIM_Base_SetConfig+0xb2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a23      	ldr	r2, [pc, #140]	; (8002208 <TIM_Base_SetConfig+0x13c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d108      	bne.n	8002190 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002184:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	4313      	orrs	r3, r2
 800218e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	4313      	orrs	r3, r2
 800219c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a0a      	ldr	r2, [pc, #40]	; (80021e0 <TIM_Base_SetConfig+0x114>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d003      	beq.n	80021c4 <TIM_Base_SetConfig+0xf8>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a0c      	ldr	r2, [pc, #48]	; (80021f0 <TIM_Base_SetConfig+0x124>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d103      	bne.n	80021cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	691a      	ldr	r2, [r3, #16]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	615a      	str	r2, [r3, #20]
}
 80021d2:	bf00      	nop
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40010000 	.word	0x40010000
 80021e4:	40000400 	.word	0x40000400
 80021e8:	40000800 	.word	0x40000800
 80021ec:	40000c00 	.word	0x40000c00
 80021f0:	40010400 	.word	0x40010400
 80021f4:	40014000 	.word	0x40014000
 80021f8:	40014400 	.word	0x40014400
 80021fc:	40014800 	.word	0x40014800
 8002200:	40001800 	.word	0x40001800
 8002204:	40001c00 	.word	0x40001c00
 8002208:	40002000 	.word	0x40002000

0800220c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e03f      	b.n	80022c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d106      	bne.n	8002260 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7fe fbf2 	bl	8000a44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2224      	movs	r2, #36	; 0x24
 8002264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002276:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 f829 	bl	80022d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	691a      	ldr	r2, [r3, #16]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800228c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	695a      	ldr	r2, [r3, #20]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800229c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68da      	ldr	r2, [r3, #12]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2220      	movs	r2, #32
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2220      	movs	r2, #32
 80022c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022d4:	b09f      	sub	sp, #124	; 0x7c
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80022e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022e6:	68d9      	ldr	r1, [r3, #12]
 80022e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	ea40 0301 	orr.w	r3, r0, r1
 80022f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	431a      	orrs	r2, r3
 80022fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	431a      	orrs	r2, r3
 8002302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	4313      	orrs	r3, r2
 8002308:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800230a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002314:	f021 010c 	bic.w	r1, r1, #12
 8002318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800231e:	430b      	orrs	r3, r1
 8002320:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800232c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800232e:	6999      	ldr	r1, [r3, #24]
 8002330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	ea40 0301 	orr.w	r3, r0, r1
 8002338:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800233a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	4bc5      	ldr	r3, [pc, #788]	; (8002654 <UART_SetConfig+0x384>)
 8002340:	429a      	cmp	r2, r3
 8002342:	d004      	beq.n	800234e <UART_SetConfig+0x7e>
 8002344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	4bc3      	ldr	r3, [pc, #780]	; (8002658 <UART_SetConfig+0x388>)
 800234a:	429a      	cmp	r2, r3
 800234c:	d103      	bne.n	8002356 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800234e:	f7ff fc7d 	bl	8001c4c <HAL_RCC_GetPCLK2Freq>
 8002352:	6778      	str	r0, [r7, #116]	; 0x74
 8002354:	e002      	b.n	800235c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002356:	f7ff fc65 	bl	8001c24 <HAL_RCC_GetPCLK1Freq>
 800235a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800235c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002364:	f040 80b6 	bne.w	80024d4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002368:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800236a:	461c      	mov	r4, r3
 800236c:	f04f 0500 	mov.w	r5, #0
 8002370:	4622      	mov	r2, r4
 8002372:	462b      	mov	r3, r5
 8002374:	1891      	adds	r1, r2, r2
 8002376:	6439      	str	r1, [r7, #64]	; 0x40
 8002378:	415b      	adcs	r3, r3
 800237a:	647b      	str	r3, [r7, #68]	; 0x44
 800237c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002380:	1912      	adds	r2, r2, r4
 8002382:	eb45 0303 	adc.w	r3, r5, r3
 8002386:	f04f 0000 	mov.w	r0, #0
 800238a:	f04f 0100 	mov.w	r1, #0
 800238e:	00d9      	lsls	r1, r3, #3
 8002390:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002394:	00d0      	lsls	r0, r2, #3
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	1911      	adds	r1, r2, r4
 800239c:	6639      	str	r1, [r7, #96]	; 0x60
 800239e:	416b      	adcs	r3, r5
 80023a0:	667b      	str	r3, [r7, #100]	; 0x64
 80023a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	461a      	mov	r2, r3
 80023a8:	f04f 0300 	mov.w	r3, #0
 80023ac:	1891      	adds	r1, r2, r2
 80023ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80023b0:	415b      	adcs	r3, r3
 80023b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80023b8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80023bc:	f7fd ff08 	bl	80001d0 <__aeabi_uldivmod>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4ba5      	ldr	r3, [pc, #660]	; (800265c <UART_SetConfig+0x38c>)
 80023c6:	fba3 2302 	umull	r2, r3, r3, r2
 80023ca:	095b      	lsrs	r3, r3, #5
 80023cc:	011e      	lsls	r6, r3, #4
 80023ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023d0:	461c      	mov	r4, r3
 80023d2:	f04f 0500 	mov.w	r5, #0
 80023d6:	4622      	mov	r2, r4
 80023d8:	462b      	mov	r3, r5
 80023da:	1891      	adds	r1, r2, r2
 80023dc:	6339      	str	r1, [r7, #48]	; 0x30
 80023de:	415b      	adcs	r3, r3
 80023e0:	637b      	str	r3, [r7, #52]	; 0x34
 80023e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80023e6:	1912      	adds	r2, r2, r4
 80023e8:	eb45 0303 	adc.w	r3, r5, r3
 80023ec:	f04f 0000 	mov.w	r0, #0
 80023f0:	f04f 0100 	mov.w	r1, #0
 80023f4:	00d9      	lsls	r1, r3, #3
 80023f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80023fa:	00d0      	lsls	r0, r2, #3
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	1911      	adds	r1, r2, r4
 8002402:	65b9      	str	r1, [r7, #88]	; 0x58
 8002404:	416b      	adcs	r3, r5
 8002406:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	461a      	mov	r2, r3
 800240e:	f04f 0300 	mov.w	r3, #0
 8002412:	1891      	adds	r1, r2, r2
 8002414:	62b9      	str	r1, [r7, #40]	; 0x28
 8002416:	415b      	adcs	r3, r3
 8002418:	62fb      	str	r3, [r7, #44]	; 0x2c
 800241a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800241e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002422:	f7fd fed5 	bl	80001d0 <__aeabi_uldivmod>
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	4b8c      	ldr	r3, [pc, #560]	; (800265c <UART_SetConfig+0x38c>)
 800242c:	fba3 1302 	umull	r1, r3, r3, r2
 8002430:	095b      	lsrs	r3, r3, #5
 8002432:	2164      	movs	r1, #100	; 0x64
 8002434:	fb01 f303 	mul.w	r3, r1, r3
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	3332      	adds	r3, #50	; 0x32
 800243e:	4a87      	ldr	r2, [pc, #540]	; (800265c <UART_SetConfig+0x38c>)
 8002440:	fba2 2303 	umull	r2, r3, r2, r3
 8002444:	095b      	lsrs	r3, r3, #5
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800244c:	441e      	add	r6, r3
 800244e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002450:	4618      	mov	r0, r3
 8002452:	f04f 0100 	mov.w	r1, #0
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	1894      	adds	r4, r2, r2
 800245c:	623c      	str	r4, [r7, #32]
 800245e:	415b      	adcs	r3, r3
 8002460:	627b      	str	r3, [r7, #36]	; 0x24
 8002462:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002466:	1812      	adds	r2, r2, r0
 8002468:	eb41 0303 	adc.w	r3, r1, r3
 800246c:	f04f 0400 	mov.w	r4, #0
 8002470:	f04f 0500 	mov.w	r5, #0
 8002474:	00dd      	lsls	r5, r3, #3
 8002476:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800247a:	00d4      	lsls	r4, r2, #3
 800247c:	4622      	mov	r2, r4
 800247e:	462b      	mov	r3, r5
 8002480:	1814      	adds	r4, r2, r0
 8002482:	653c      	str	r4, [r7, #80]	; 0x50
 8002484:	414b      	adcs	r3, r1
 8002486:	657b      	str	r3, [r7, #84]	; 0x54
 8002488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	461a      	mov	r2, r3
 800248e:	f04f 0300 	mov.w	r3, #0
 8002492:	1891      	adds	r1, r2, r2
 8002494:	61b9      	str	r1, [r7, #24]
 8002496:	415b      	adcs	r3, r3
 8002498:	61fb      	str	r3, [r7, #28]
 800249a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800249e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80024a2:	f7fd fe95 	bl	80001d0 <__aeabi_uldivmod>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4b6c      	ldr	r3, [pc, #432]	; (800265c <UART_SetConfig+0x38c>)
 80024ac:	fba3 1302 	umull	r1, r3, r3, r2
 80024b0:	095b      	lsrs	r3, r3, #5
 80024b2:	2164      	movs	r1, #100	; 0x64
 80024b4:	fb01 f303 	mul.w	r3, r1, r3
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	3332      	adds	r3, #50	; 0x32
 80024be:	4a67      	ldr	r2, [pc, #412]	; (800265c <UART_SetConfig+0x38c>)
 80024c0:	fba2 2303 	umull	r2, r3, r2, r3
 80024c4:	095b      	lsrs	r3, r3, #5
 80024c6:	f003 0207 	and.w	r2, r3, #7
 80024ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4432      	add	r2, r6
 80024d0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80024d2:	e0b9      	b.n	8002648 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024d6:	461c      	mov	r4, r3
 80024d8:	f04f 0500 	mov.w	r5, #0
 80024dc:	4622      	mov	r2, r4
 80024de:	462b      	mov	r3, r5
 80024e0:	1891      	adds	r1, r2, r2
 80024e2:	6139      	str	r1, [r7, #16]
 80024e4:	415b      	adcs	r3, r3
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80024ec:	1912      	adds	r2, r2, r4
 80024ee:	eb45 0303 	adc.w	r3, r5, r3
 80024f2:	f04f 0000 	mov.w	r0, #0
 80024f6:	f04f 0100 	mov.w	r1, #0
 80024fa:	00d9      	lsls	r1, r3, #3
 80024fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002500:	00d0      	lsls	r0, r2, #3
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	eb12 0804 	adds.w	r8, r2, r4
 800250a:	eb43 0905 	adc.w	r9, r3, r5
 800250e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	4618      	mov	r0, r3
 8002514:	f04f 0100 	mov.w	r1, #0
 8002518:	f04f 0200 	mov.w	r2, #0
 800251c:	f04f 0300 	mov.w	r3, #0
 8002520:	008b      	lsls	r3, r1, #2
 8002522:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002526:	0082      	lsls	r2, r0, #2
 8002528:	4640      	mov	r0, r8
 800252a:	4649      	mov	r1, r9
 800252c:	f7fd fe50 	bl	80001d0 <__aeabi_uldivmod>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4b49      	ldr	r3, [pc, #292]	; (800265c <UART_SetConfig+0x38c>)
 8002536:	fba3 2302 	umull	r2, r3, r3, r2
 800253a:	095b      	lsrs	r3, r3, #5
 800253c:	011e      	lsls	r6, r3, #4
 800253e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002540:	4618      	mov	r0, r3
 8002542:	f04f 0100 	mov.w	r1, #0
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	1894      	adds	r4, r2, r2
 800254c:	60bc      	str	r4, [r7, #8]
 800254e:	415b      	adcs	r3, r3
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002556:	1812      	adds	r2, r2, r0
 8002558:	eb41 0303 	adc.w	r3, r1, r3
 800255c:	f04f 0400 	mov.w	r4, #0
 8002560:	f04f 0500 	mov.w	r5, #0
 8002564:	00dd      	lsls	r5, r3, #3
 8002566:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800256a:	00d4      	lsls	r4, r2, #3
 800256c:	4622      	mov	r2, r4
 800256e:	462b      	mov	r3, r5
 8002570:	1814      	adds	r4, r2, r0
 8002572:	64bc      	str	r4, [r7, #72]	; 0x48
 8002574:	414b      	adcs	r3, r1
 8002576:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	4618      	mov	r0, r3
 800257e:	f04f 0100 	mov.w	r1, #0
 8002582:	f04f 0200 	mov.w	r2, #0
 8002586:	f04f 0300 	mov.w	r3, #0
 800258a:	008b      	lsls	r3, r1, #2
 800258c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002590:	0082      	lsls	r2, r0, #2
 8002592:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002596:	f7fd fe1b 	bl	80001d0 <__aeabi_uldivmod>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4b2f      	ldr	r3, [pc, #188]	; (800265c <UART_SetConfig+0x38c>)
 80025a0:	fba3 1302 	umull	r1, r3, r3, r2
 80025a4:	095b      	lsrs	r3, r3, #5
 80025a6:	2164      	movs	r1, #100	; 0x64
 80025a8:	fb01 f303 	mul.w	r3, r1, r3
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	3332      	adds	r3, #50	; 0x32
 80025b2:	4a2a      	ldr	r2, [pc, #168]	; (800265c <UART_SetConfig+0x38c>)
 80025b4:	fba2 2303 	umull	r2, r3, r2, r3
 80025b8:	095b      	lsrs	r3, r3, #5
 80025ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025be:	441e      	add	r6, r3
 80025c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025c2:	4618      	mov	r0, r3
 80025c4:	f04f 0100 	mov.w	r1, #0
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	1894      	adds	r4, r2, r2
 80025ce:	603c      	str	r4, [r7, #0]
 80025d0:	415b      	adcs	r3, r3
 80025d2:	607b      	str	r3, [r7, #4]
 80025d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025d8:	1812      	adds	r2, r2, r0
 80025da:	eb41 0303 	adc.w	r3, r1, r3
 80025de:	f04f 0400 	mov.w	r4, #0
 80025e2:	f04f 0500 	mov.w	r5, #0
 80025e6:	00dd      	lsls	r5, r3, #3
 80025e8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80025ec:	00d4      	lsls	r4, r2, #3
 80025ee:	4622      	mov	r2, r4
 80025f0:	462b      	mov	r3, r5
 80025f2:	eb12 0a00 	adds.w	sl, r2, r0
 80025f6:	eb43 0b01 	adc.w	fp, r3, r1
 80025fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	4618      	mov	r0, r3
 8002600:	f04f 0100 	mov.w	r1, #0
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	f04f 0300 	mov.w	r3, #0
 800260c:	008b      	lsls	r3, r1, #2
 800260e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002612:	0082      	lsls	r2, r0, #2
 8002614:	4650      	mov	r0, sl
 8002616:	4659      	mov	r1, fp
 8002618:	f7fd fdda 	bl	80001d0 <__aeabi_uldivmod>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	4b0e      	ldr	r3, [pc, #56]	; (800265c <UART_SetConfig+0x38c>)
 8002622:	fba3 1302 	umull	r1, r3, r3, r2
 8002626:	095b      	lsrs	r3, r3, #5
 8002628:	2164      	movs	r1, #100	; 0x64
 800262a:	fb01 f303 	mul.w	r3, r1, r3
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	3332      	adds	r3, #50	; 0x32
 8002634:	4a09      	ldr	r2, [pc, #36]	; (800265c <UART_SetConfig+0x38c>)
 8002636:	fba2 2303 	umull	r2, r3, r2, r3
 800263a:	095b      	lsrs	r3, r3, #5
 800263c:	f003 020f 	and.w	r2, r3, #15
 8002640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4432      	add	r2, r6
 8002646:	609a      	str	r2, [r3, #8]
}
 8002648:	bf00      	nop
 800264a:	377c      	adds	r7, #124	; 0x7c
 800264c:	46bd      	mov	sp, r7
 800264e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002652:	bf00      	nop
 8002654:	40011000 	.word	0x40011000
 8002658:	40011400 	.word	0x40011400
 800265c:	51eb851f 	.word	0x51eb851f

08002660 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f103 0208 	add.w	r2, r3, #8
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f04f 32ff 	mov.w	r2, #4294967295
 8002678:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f103 0208 	add.w	r2, r3, #8
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f103 0208 	add.w	r2, r3, #8
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80026ba:	b480      	push	{r7}
 80026bc:	b085      	sub	sp, #20
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
 80026c2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	601a      	str	r2, [r3, #0]
}
 80026f6:	bf00      	nop
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002702:	b480      	push	{r7}
 8002704:	b085      	sub	sp, #20
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002718:	d103      	bne.n	8002722 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	e00c      	b.n	800273c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3308      	adds	r3, #8
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	e002      	b.n	8002730 <vListInsert+0x2e>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	429a      	cmp	r2, r3
 800273a:	d2f6      	bcs.n	800272a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	1c5a      	adds	r2, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	601a      	str	r2, [r3, #0]
}
 8002768:	bf00      	nop
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6892      	ldr	r2, [r2, #8]
 800278a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6852      	ldr	r2, [r2, #4]
 8002794:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	429a      	cmp	r2, r3
 800279e:	d103      	bne.n	80027a8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	1e5a      	subs	r2, r3, #1
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10a      	bne.n	80027f2 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80027dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e0:	f383 8811 	msr	BASEPRI, r3
 80027e4:	f3bf 8f6f 	isb	sy
 80027e8:	f3bf 8f4f 	dsb	sy
 80027ec:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80027ee:	bf00      	nop
 80027f0:	e7fe      	b.n	80027f0 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80027f2:	f002 f9c9 	bl	8004b88 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fe:	68f9      	ldr	r1, [r7, #12]
 8002800:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002802:	fb01 f303 	mul.w	r3, r1, r3
 8002806:	441a      	add	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002822:	3b01      	subs	r3, #1
 8002824:	68f9      	ldr	r1, [r7, #12]
 8002826:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002828:	fb01 f303 	mul.w	r3, r1, r3
 800282c:	441a      	add	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	22ff      	movs	r2, #255	; 0xff
 8002836:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	22ff      	movs	r2, #255	; 0xff
 800283e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d114      	bne.n	8002872 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d01a      	beq.n	8002886 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	3310      	adds	r3, #16
 8002854:	4618      	mov	r0, r3
 8002856:	f001 f9a5 	bl	8003ba4 <xTaskRemoveFromEventList>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d012      	beq.n	8002886 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002860:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <xQueueGenericReset+0xcc>)
 8002862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	f3bf 8f4f 	dsb	sy
 800286c:	f3bf 8f6f 	isb	sy
 8002870:	e009      	b.n	8002886 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	3310      	adds	r3, #16
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff fef2 	bl	8002660 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	3324      	adds	r3, #36	; 0x24
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff feed 	bl	8002660 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002886:	f002 f9af 	bl	8004be8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800288a:	2301      	movs	r3, #1
}
 800288c:	4618      	mov	r0, r3
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	e000ed04 	.word	0xe000ed04

08002898 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002898:	b580      	push	{r7, lr}
 800289a:	b08c      	sub	sp, #48	; 0x30
 800289c:	af02      	add	r7, sp, #8
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	4613      	mov	r3, r2
 80028a4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10a      	bne.n	80028c2 <xQueueGenericCreate+0x2a>
        __asm volatile
 80028ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b0:	f383 8811 	msr	BASEPRI, r3
 80028b4:	f3bf 8f6f 	isb	sy
 80028b8:	f3bf 8f4f 	dsb	sy
 80028bc:	61bb      	str	r3, [r7, #24]
    }
 80028be:	bf00      	nop
 80028c0:	e7fe      	b.n	80028c0 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	fb02 f303 	mul.w	r3, r2, r3
 80028ca:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d006      	beq.n	80028e0 <xQueueGenericCreate+0x48>
 80028d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d101      	bne.n	80028e4 <xQueueGenericCreate+0x4c>
 80028e0:	2301      	movs	r3, #1
 80028e2:	e000      	b.n	80028e6 <xQueueGenericCreate+0x4e>
 80028e4:	2300      	movs	r3, #0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10a      	bne.n	8002900 <xQueueGenericCreate+0x68>
        __asm volatile
 80028ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ee:	f383 8811 	msr	BASEPRI, r3
 80028f2:	f3bf 8f6f 	isb	sy
 80028f6:	f3bf 8f4f 	dsb	sy
 80028fa:	617b      	str	r3, [r7, #20]
    }
 80028fc:	bf00      	nop
 80028fe:	e7fe      	b.n	80028fe <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002906:	d90a      	bls.n	800291e <xQueueGenericCreate+0x86>
        __asm volatile
 8002908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800290c:	f383 8811 	msr	BASEPRI, r3
 8002910:	f3bf 8f6f 	isb	sy
 8002914:	f3bf 8f4f 	dsb	sy
 8002918:	613b      	str	r3, [r7, #16]
    }
 800291a:	bf00      	nop
 800291c:	e7fe      	b.n	800291c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	3350      	adds	r3, #80	; 0x50
 8002922:	4618      	mov	r0, r3
 8002924:	f002 fa52 	bl	8004dcc <pvPortMalloc>
 8002928:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00d      	beq.n	800294c <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002930:	6a3b      	ldr	r3, [r7, #32]
 8002932:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	3350      	adds	r3, #80	; 0x50
 8002938:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800293a:	79fa      	ldrb	r2, [r7, #7]
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	4613      	mov	r3, r2
 8002942:	69fa      	ldr	r2, [r7, #28]
 8002944:	68b9      	ldr	r1, [r7, #8]
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 f805 	bl	8002956 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800294c:	6a3b      	ldr	r3, [r7, #32]
    }
 800294e:	4618      	mov	r0, r3
 8002950:	3728      	adds	r7, #40	; 0x28
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b084      	sub	sp, #16
 800295a:	af00      	add	r7, sp, #0
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	607a      	str	r2, [r7, #4]
 8002962:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d103      	bne.n	8002972 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	e002      	b.n	8002978 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002984:	2101      	movs	r1, #1
 8002986:	69b8      	ldr	r0, [r7, #24]
 8002988:	f7ff ff1e 	bl	80027c8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	78fa      	ldrb	r2, [r7, #3]
 8002990:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002994:	bf00      	nop
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08e      	sub	sp, #56	; 0x38
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
 80029a8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80029aa:	2300      	movs	r3, #0
 80029ac:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80029b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10a      	bne.n	80029ce <xQueueGenericSend+0x32>
        __asm volatile
 80029b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029bc:	f383 8811 	msr	BASEPRI, r3
 80029c0:	f3bf 8f6f 	isb	sy
 80029c4:	f3bf 8f4f 	dsb	sy
 80029c8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80029ca:	bf00      	nop
 80029cc:	e7fe      	b.n	80029cc <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d103      	bne.n	80029dc <xQueueGenericSend+0x40>
 80029d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <xQueueGenericSend+0x44>
 80029dc:	2301      	movs	r3, #1
 80029de:	e000      	b.n	80029e2 <xQueueGenericSend+0x46>
 80029e0:	2300      	movs	r3, #0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10a      	bne.n	80029fc <xQueueGenericSend+0x60>
        __asm volatile
 80029e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ea:	f383 8811 	msr	BASEPRI, r3
 80029ee:	f3bf 8f6f 	isb	sy
 80029f2:	f3bf 8f4f 	dsb	sy
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80029f8:	bf00      	nop
 80029fa:	e7fe      	b.n	80029fa <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d103      	bne.n	8002a0a <xQueueGenericSend+0x6e>
 8002a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d101      	bne.n	8002a0e <xQueueGenericSend+0x72>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <xQueueGenericSend+0x74>
 8002a0e:	2300      	movs	r3, #0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10a      	bne.n	8002a2a <xQueueGenericSend+0x8e>
        __asm volatile
 8002a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a18:	f383 8811 	msr	BASEPRI, r3
 8002a1c:	f3bf 8f6f 	isb	sy
 8002a20:	f3bf 8f4f 	dsb	sy
 8002a24:	623b      	str	r3, [r7, #32]
    }
 8002a26:	bf00      	nop
 8002a28:	e7fe      	b.n	8002a28 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a2a:	f001 fa57 	bl	8003edc <xTaskGetSchedulerState>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d102      	bne.n	8002a3a <xQueueGenericSend+0x9e>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <xQueueGenericSend+0xa2>
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <xQueueGenericSend+0xa4>
 8002a3e:	2300      	movs	r3, #0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10a      	bne.n	8002a5a <xQueueGenericSend+0xbe>
        __asm volatile
 8002a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a48:	f383 8811 	msr	BASEPRI, r3
 8002a4c:	f3bf 8f6f 	isb	sy
 8002a50:	f3bf 8f4f 	dsb	sy
 8002a54:	61fb      	str	r3, [r7, #28]
    }
 8002a56:	bf00      	nop
 8002a58:	e7fe      	b.n	8002a58 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002a5a:	f002 f895 	bl	8004b88 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d302      	bcc.n	8002a70 <xQueueGenericSend+0xd4>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d129      	bne.n	8002ac4 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	68b9      	ldr	r1, [r7, #8]
 8002a74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a76:	f000 fb3d 	bl	80030f4 <prvCopyDataToQueue>
 8002a7a:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d010      	beq.n	8002aa6 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a86:	3324      	adds	r3, #36	; 0x24
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f001 f88b 	bl	8003ba4 <xTaskRemoveFromEventList>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d013      	beq.n	8002abc <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002a94:	4b3f      	ldr	r3, [pc, #252]	; (8002b94 <xQueueGenericSend+0x1f8>)
 8002a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	f3bf 8f4f 	dsb	sy
 8002aa0:	f3bf 8f6f 	isb	sy
 8002aa4:	e00a      	b.n	8002abc <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d007      	beq.n	8002abc <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002aac:	4b39      	ldr	r3, [pc, #228]	; (8002b94 <xQueueGenericSend+0x1f8>)
 8002aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	f3bf 8f4f 	dsb	sy
 8002ab8:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002abc:	f002 f894 	bl	8004be8 <vPortExitCritical>
                return pdPASS;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e063      	b.n	8002b8c <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d103      	bne.n	8002ad2 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002aca:	f002 f88d 	bl	8004be8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	e05c      	b.n	8002b8c <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d106      	bne.n	8002ae6 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002ad8:	f107 0314 	add.w	r3, r7, #20
 8002adc:	4618      	mov	r0, r3
 8002ade:	f001 f8c3 	bl	8003c68 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002ae6:	f002 f87f 	bl	8004be8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002aea:	f000 fe3d 	bl	8003768 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002aee:	f002 f84b 	bl	8004b88 <vPortEnterCritical>
 8002af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002af8:	b25b      	sxtb	r3, r3
 8002afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afe:	d103      	bne.n	8002b08 <xQueueGenericSend+0x16c>
 8002b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b0e:	b25b      	sxtb	r3, r3
 8002b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b14:	d103      	bne.n	8002b1e <xQueueGenericSend+0x182>
 8002b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b1e:	f002 f863 	bl	8004be8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b22:	1d3a      	adds	r2, r7, #4
 8002b24:	f107 0314 	add.w	r3, r7, #20
 8002b28:	4611      	mov	r1, r2
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f001 f8b2 	bl	8003c94 <xTaskCheckForTimeOut>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d124      	bne.n	8002b80 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002b36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b38:	f000 fbd4 	bl	80032e4 <prvIsQueueFull>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d018      	beq.n	8002b74 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b44:	3310      	adds	r3, #16
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	4611      	mov	r1, r2
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 ffda 	bl	8003b04 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002b50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b52:	f000 fb5f 	bl	8003214 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002b56:	f000 fe15 	bl	8003784 <xTaskResumeAll>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f47f af7c 	bne.w	8002a5a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002b62:	4b0c      	ldr	r3, [pc, #48]	; (8002b94 <xQueueGenericSend+0x1f8>)
 8002b64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	f3bf 8f4f 	dsb	sy
 8002b6e:	f3bf 8f6f 	isb	sy
 8002b72:	e772      	b.n	8002a5a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002b74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b76:	f000 fb4d 	bl	8003214 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002b7a:	f000 fe03 	bl	8003784 <xTaskResumeAll>
 8002b7e:	e76c      	b.n	8002a5a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002b80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b82:	f000 fb47 	bl	8003214 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002b86:	f000 fdfd 	bl	8003784 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8002b8a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3738      	adds	r7, #56	; 0x38
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	e000ed04 	.word	0xe000ed04

08002b98 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b090      	sub	sp, #64	; 0x40
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
 8002ba4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10a      	bne.n	8002bc6 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb4:	f383 8811 	msr	BASEPRI, r3
 8002bb8:	f3bf 8f6f 	isb	sy
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002bc2:	bf00      	nop
 8002bc4:	e7fe      	b.n	8002bc4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d103      	bne.n	8002bd4 <xQueueGenericSendFromISR+0x3c>
 8002bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <xQueueGenericSendFromISR+0x40>
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e000      	b.n	8002bda <xQueueGenericSendFromISR+0x42>
 8002bd8:	2300      	movs	r3, #0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10a      	bne.n	8002bf4 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be2:	f383 8811 	msr	BASEPRI, r3
 8002be6:	f3bf 8f6f 	isb	sy
 8002bea:	f3bf 8f4f 	dsb	sy
 8002bee:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002bf0:	bf00      	nop
 8002bf2:	e7fe      	b.n	8002bf2 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d103      	bne.n	8002c02 <xQueueGenericSendFromISR+0x6a>
 8002bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <xQueueGenericSendFromISR+0x6e>
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <xQueueGenericSendFromISR+0x70>
 8002c06:	2300      	movs	r3, #0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10a      	bne.n	8002c22 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c10:	f383 8811 	msr	BASEPRI, r3
 8002c14:	f3bf 8f6f 	isb	sy
 8002c18:	f3bf 8f4f 	dsb	sy
 8002c1c:	623b      	str	r3, [r7, #32]
    }
 8002c1e:	bf00      	nop
 8002c20:	e7fe      	b.n	8002c20 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c22:	f002 f893 	bl	8004d4c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002c26:	f3ef 8211 	mrs	r2, BASEPRI
 8002c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2e:	f383 8811 	msr	BASEPRI, r3
 8002c32:	f3bf 8f6f 	isb	sy
 8002c36:	f3bf 8f4f 	dsb	sy
 8002c3a:	61fa      	str	r2, [r7, #28]
 8002c3c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002c3e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c40:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d302      	bcc.n	8002c54 <xQueueGenericSendFromISR+0xbc>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d13e      	bne.n	8002cd2 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c62:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	68b9      	ldr	r1, [r7, #8]
 8002c68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002c6a:	f000 fa43 	bl	80030f4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002c6e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c76:	d112      	bne.n	8002c9e <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d025      	beq.n	8002ccc <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c82:	3324      	adds	r3, #36	; 0x24
 8002c84:	4618      	mov	r0, r3
 8002c86:	f000 ff8d 	bl	8003ba4 <xTaskRemoveFromEventList>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d01d      	beq.n	8002ccc <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d01a      	beq.n	8002ccc <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	e016      	b.n	8002ccc <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002c9e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002ca2:	2b7f      	cmp	r3, #127	; 0x7f
 8002ca4:	d10a      	bne.n	8002cbc <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8002ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002caa:	f383 8811 	msr	BASEPRI, r3
 8002cae:	f3bf 8f6f 	isb	sy
 8002cb2:	f3bf 8f4f 	dsb	sy
 8002cb6:	617b      	str	r3, [r7, #20]
    }
 8002cb8:	bf00      	nop
 8002cba:	e7fe      	b.n	8002cba <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002cbc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	b25a      	sxtb	r2, r3
 8002cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002cd0:	e001      	b.n	8002cd6 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd8:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002ce0:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3740      	adds	r7, #64	; 0x40
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08c      	sub	sp, #48	; 0x30
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10a      	bne.n	8002d1c <xQueueReceive+0x30>
        __asm volatile
 8002d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0a:	f383 8811 	msr	BASEPRI, r3
 8002d0e:	f3bf 8f6f 	isb	sy
 8002d12:	f3bf 8f4f 	dsb	sy
 8002d16:	623b      	str	r3, [r7, #32]
    }
 8002d18:	bf00      	nop
 8002d1a:	e7fe      	b.n	8002d1a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d103      	bne.n	8002d2a <xQueueReceive+0x3e>
 8002d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <xQueueReceive+0x42>
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e000      	b.n	8002d30 <xQueueReceive+0x44>
 8002d2e:	2300      	movs	r3, #0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10a      	bne.n	8002d4a <xQueueReceive+0x5e>
        __asm volatile
 8002d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d38:	f383 8811 	msr	BASEPRI, r3
 8002d3c:	f3bf 8f6f 	isb	sy
 8002d40:	f3bf 8f4f 	dsb	sy
 8002d44:	61fb      	str	r3, [r7, #28]
    }
 8002d46:	bf00      	nop
 8002d48:	e7fe      	b.n	8002d48 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d4a:	f001 f8c7 	bl	8003edc <xTaskGetSchedulerState>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d102      	bne.n	8002d5a <xQueueReceive+0x6e>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <xQueueReceive+0x72>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <xQueueReceive+0x74>
 8002d5e:	2300      	movs	r3, #0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10a      	bne.n	8002d7a <xQueueReceive+0x8e>
        __asm volatile
 8002d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d68:	f383 8811 	msr	BASEPRI, r3
 8002d6c:	f3bf 8f6f 	isb	sy
 8002d70:	f3bf 8f4f 	dsb	sy
 8002d74:	61bb      	str	r3, [r7, #24]
    }
 8002d76:	bf00      	nop
 8002d78:	e7fe      	b.n	8002d78 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002d7a:	f001 ff05 	bl	8004b88 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d01f      	beq.n	8002dca <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d8a:	68b9      	ldr	r1, [r7, #8]
 8002d8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d8e:	f000 fa1b 	bl	80031c8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	1e5a      	subs	r2, r3, #1
 8002d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d98:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00f      	beq.n	8002dc2 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da4:	3310      	adds	r3, #16
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 fefc 	bl	8003ba4 <xTaskRemoveFromEventList>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d007      	beq.n	8002dc2 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002db2:	4b3d      	ldr	r3, [pc, #244]	; (8002ea8 <xQueueReceive+0x1bc>)
 8002db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	f3bf 8f4f 	dsb	sy
 8002dbe:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002dc2:	f001 ff11 	bl	8004be8 <vPortExitCritical>
                return pdPASS;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e069      	b.n	8002e9e <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d103      	bne.n	8002dd8 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002dd0:	f001 ff0a 	bl	8004be8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	e062      	b.n	8002e9e <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d106      	bne.n	8002dec <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002dde:	f107 0310 	add.w	r3, r7, #16
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 ff40 	bl	8003c68 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002de8:	2301      	movs	r3, #1
 8002dea:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002dec:	f001 fefc 	bl	8004be8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002df0:	f000 fcba 	bl	8003768 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002df4:	f001 fec8 	bl	8004b88 <vPortEnterCritical>
 8002df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dfe:	b25b      	sxtb	r3, r3
 8002e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e04:	d103      	bne.n	8002e0e <xQueueReceive+0x122>
 8002e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e14:	b25b      	sxtb	r3, r3
 8002e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1a:	d103      	bne.n	8002e24 <xQueueReceive+0x138>
 8002e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e24:	f001 fee0 	bl	8004be8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e28:	1d3a      	adds	r2, r7, #4
 8002e2a:	f107 0310 	add.w	r3, r7, #16
 8002e2e:	4611      	mov	r1, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 ff2f 	bl	8003c94 <xTaskCheckForTimeOut>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d123      	bne.n	8002e84 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e3e:	f000 fa3b 	bl	80032b8 <prvIsQueueEmpty>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d017      	beq.n	8002e78 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4a:	3324      	adds	r3, #36	; 0x24
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	4611      	mov	r1, r2
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 fe57 	bl	8003b04 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002e56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e58:	f000 f9dc 	bl	8003214 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002e5c:	f000 fc92 	bl	8003784 <xTaskResumeAll>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d189      	bne.n	8002d7a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002e66:	4b10      	ldr	r3, [pc, #64]	; (8002ea8 <xQueueReceive+0x1bc>)
 8002e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	f3bf 8f4f 	dsb	sy
 8002e72:	f3bf 8f6f 	isb	sy
 8002e76:	e780      	b.n	8002d7a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002e78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e7a:	f000 f9cb 	bl	8003214 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002e7e:	f000 fc81 	bl	8003784 <xTaskResumeAll>
 8002e82:	e77a      	b.n	8002d7a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e86:	f000 f9c5 	bl	8003214 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002e8a:	f000 fc7b 	bl	8003784 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e90:	f000 fa12 	bl	80032b8 <prvIsQueueEmpty>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f43f af6f 	beq.w	8002d7a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002e9c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3730      	adds	r7, #48	; 0x30
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	e000ed04 	.word	0xe000ed04

08002eac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b08e      	sub	sp, #56	; 0x38
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10a      	bne.n	8002ede <xQueueSemaphoreTake+0x32>
        __asm volatile
 8002ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ecc:	f383 8811 	msr	BASEPRI, r3
 8002ed0:	f3bf 8f6f 	isb	sy
 8002ed4:	f3bf 8f4f 	dsb	sy
 8002ed8:	623b      	str	r3, [r7, #32]
    }
 8002eda:	bf00      	nop
 8002edc:	e7fe      	b.n	8002edc <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8002ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00a      	beq.n	8002efc <xQueueSemaphoreTake+0x50>
        __asm volatile
 8002ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eea:	f383 8811 	msr	BASEPRI, r3
 8002eee:	f3bf 8f6f 	isb	sy
 8002ef2:	f3bf 8f4f 	dsb	sy
 8002ef6:	61fb      	str	r3, [r7, #28]
    }
 8002ef8:	bf00      	nop
 8002efa:	e7fe      	b.n	8002efa <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002efc:	f000 ffee 	bl	8003edc <xTaskGetSchedulerState>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d102      	bne.n	8002f0c <xQueueSemaphoreTake+0x60>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <xQueueSemaphoreTake+0x64>
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e000      	b.n	8002f12 <xQueueSemaphoreTake+0x66>
 8002f10:	2300      	movs	r3, #0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10a      	bne.n	8002f2c <xQueueSemaphoreTake+0x80>
        __asm volatile
 8002f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1a:	f383 8811 	msr	BASEPRI, r3
 8002f1e:	f3bf 8f6f 	isb	sy
 8002f22:	f3bf 8f4f 	dsb	sy
 8002f26:	61bb      	str	r3, [r7, #24]
    }
 8002f28:	bf00      	nop
 8002f2a:	e7fe      	b.n	8002f2a <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002f2c:	f001 fe2c 	bl	8004b88 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f34:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d024      	beq.n	8002f86 <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3e:	1e5a      	subs	r2, r3, #1
 8002f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f42:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d104      	bne.n	8002f56 <xQueueSemaphoreTake+0xaa>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002f4c:	f001 f962 	bl	8004214 <pvTaskIncrementMutexHeldCount>
 8002f50:	4602      	mov	r2, r0
 8002f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f54:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00f      	beq.n	8002f7e <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f60:	3310      	adds	r3, #16
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 fe1e 	bl	8003ba4 <xTaskRemoveFromEventList>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d007      	beq.n	8002f7e <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002f6e:	4b54      	ldr	r3, [pc, #336]	; (80030c0 <xQueueSemaphoreTake+0x214>)
 8002f70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	f3bf 8f4f 	dsb	sy
 8002f7a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002f7e:	f001 fe33 	bl	8004be8 <vPortExitCritical>
                return pdPASS;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e097      	b.n	80030b6 <xQueueSemaphoreTake+0x20a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d111      	bne.n	8002fb0 <xQueueSemaphoreTake+0x104>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8002f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00a      	beq.n	8002fa8 <xQueueSemaphoreTake+0xfc>
        __asm volatile
 8002f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f96:	f383 8811 	msr	BASEPRI, r3
 8002f9a:	f3bf 8f6f 	isb	sy
 8002f9e:	f3bf 8f4f 	dsb	sy
 8002fa2:	617b      	str	r3, [r7, #20]
    }
 8002fa4:	bf00      	nop
 8002fa6:	e7fe      	b.n	8002fa6 <xQueueSemaphoreTake+0xfa>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8002fa8:	f001 fe1e 	bl	8004be8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002fac:	2300      	movs	r3, #0
 8002fae:	e082      	b.n	80030b6 <xQueueSemaphoreTake+0x20a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d106      	bne.n	8002fc4 <xQueueSemaphoreTake+0x118>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002fb6:	f107 030c 	add.w	r3, r7, #12
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 fe54 	bl	8003c68 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002fc4:	f001 fe10 	bl	8004be8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002fc8:	f000 fbce 	bl	8003768 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002fcc:	f001 fddc 	bl	8004b88 <vPortEnterCritical>
 8002fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fd6:	b25b      	sxtb	r3, r3
 8002fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fdc:	d103      	bne.n	8002fe6 <xQueueSemaphoreTake+0x13a>
 8002fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fec:	b25b      	sxtb	r3, r3
 8002fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff2:	d103      	bne.n	8002ffc <xQueueSemaphoreTake+0x150>
 8002ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ffc:	f001 fdf4 	bl	8004be8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003000:	463a      	mov	r2, r7
 8003002:	f107 030c 	add.w	r3, r7, #12
 8003006:	4611      	mov	r1, r2
 8003008:	4618      	mov	r0, r3
 800300a:	f000 fe43 	bl	8003c94 <xTaskCheckForTimeOut>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d132      	bne.n	800307a <xQueueSemaphoreTake+0x1ce>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003014:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003016:	f000 f94f 	bl	80032b8 <prvIsQueueEmpty>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d026      	beq.n	800306e <xQueueSemaphoreTake+0x1c2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d109      	bne.n	800303c <xQueueSemaphoreTake+0x190>
                        {
                            taskENTER_CRITICAL();
 8003028:	f001 fdae 	bl	8004b88 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800302c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	4618      	mov	r0, r3
 8003032:	f000 ff71 	bl	8003f18 <xTaskPriorityInherit>
 8003036:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8003038:	f001 fdd6 	bl	8004be8 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800303c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303e:	3324      	adds	r3, #36	; 0x24
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	4611      	mov	r1, r2
 8003044:	4618      	mov	r0, r3
 8003046:	f000 fd5d 	bl	8003b04 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800304a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800304c:	f000 f8e2 	bl	8003214 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003050:	f000 fb98 	bl	8003784 <xTaskResumeAll>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	f47f af68 	bne.w	8002f2c <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 800305c:	4b18      	ldr	r3, [pc, #96]	; (80030c0 <xQueueSemaphoreTake+0x214>)
 800305e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	f3bf 8f4f 	dsb	sy
 8003068:	f3bf 8f6f 	isb	sy
 800306c:	e75e      	b.n	8002f2c <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800306e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003070:	f000 f8d0 	bl	8003214 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003074:	f000 fb86 	bl	8003784 <xTaskResumeAll>
 8003078:	e758      	b.n	8002f2c <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800307a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800307c:	f000 f8ca 	bl	8003214 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003080:	f000 fb80 	bl	8003784 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003084:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003086:	f000 f917 	bl	80032b8 <prvIsQueueEmpty>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	f43f af4d 	beq.w	8002f2c <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8003092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00d      	beq.n	80030b4 <xQueueSemaphoreTake+0x208>
                        {
                            taskENTER_CRITICAL();
 8003098:	f001 fd76 	bl	8004b88 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800309c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800309e:	f000 f811 	bl	80030c4 <prvGetDisinheritPriorityAfterTimeout>
 80030a2:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80030a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030aa:	4618      	mov	r0, r3
 80030ac:	f001 f824 	bl	80040f8 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 80030b0:	f001 fd9a 	bl	8004be8 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80030b4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3738      	adds	r7, #56	; 0x38
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	e000ed04 	.word	0xe000ed04

080030c4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d006      	beq.n	80030e2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f1c3 0305 	rsb	r3, r3, #5
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	e001      	b.n	80030e6 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80030e2:	2300      	movs	r3, #0
 80030e4:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80030e6:	68fb      	ldr	r3, [r7, #12]
    }
 80030e8:	4618      	mov	r0, r3
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003100:	2300      	movs	r3, #0
 8003102:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003108:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10d      	bne.n	800312e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d14d      	bne.n	80031b6 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	4618      	mov	r0, r3
 8003120:	f000 ff70 	bl	8004004 <xTaskPriorityDisinherit>
 8003124:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	609a      	str	r2, [r3, #8]
 800312c:	e043      	b.n	80031b6 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d119      	bne.n	8003168 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6858      	ldr	r0, [r3, #4]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313c:	461a      	mov	r2, r3
 800313e:	68b9      	ldr	r1, [r7, #8]
 8003140:	f002 f86c 	bl	800521c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	441a      	add	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	429a      	cmp	r2, r3
 800315c:	d32b      	bcc.n	80031b6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	605a      	str	r2, [r3, #4]
 8003166:	e026      	b.n	80031b6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	68d8      	ldr	r0, [r3, #12]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003170:	461a      	mov	r2, r3
 8003172:	68b9      	ldr	r1, [r7, #8]
 8003174:	f002 f852 	bl	800521c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	68da      	ldr	r2, [r3, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003180:	425b      	negs	r3, r3
 8003182:	441a      	add	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	68da      	ldr	r2, [r3, #12]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	429a      	cmp	r2, r3
 8003192:	d207      	bcs.n	80031a4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	425b      	negs	r3, r3
 800319e:	441a      	add	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d105      	bne.n	80031b6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d002      	beq.n	80031b6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1c5a      	adds	r2, r3, #1
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80031be:	697b      	ldr	r3, [r7, #20]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3718      	adds	r7, #24
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d018      	beq.n	800320c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	441a      	add	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68da      	ldr	r2, [r3, #12]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d303      	bcc.n	80031fc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68d9      	ldr	r1, [r3, #12]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003204:	461a      	mov	r2, r3
 8003206:	6838      	ldr	r0, [r7, #0]
 8003208:	f002 f808 	bl	800521c <memcpy>
    }
}
 800320c:	bf00      	nop
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800321c:	f001 fcb4 	bl	8004b88 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003226:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003228:	e011      	b.n	800324e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	2b00      	cmp	r3, #0
 8003230:	d012      	beq.n	8003258 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	3324      	adds	r3, #36	; 0x24
 8003236:	4618      	mov	r0, r3
 8003238:	f000 fcb4 	bl	8003ba4 <xTaskRemoveFromEventList>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8003242:	f000 fd8d 	bl	8003d60 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003246:	7bfb      	ldrb	r3, [r7, #15]
 8003248:	3b01      	subs	r3, #1
 800324a:	b2db      	uxtb	r3, r3
 800324c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800324e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003252:	2b00      	cmp	r3, #0
 8003254:	dce9      	bgt.n	800322a <prvUnlockQueue+0x16>
 8003256:	e000      	b.n	800325a <prvUnlockQueue+0x46>
                        break;
 8003258:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	22ff      	movs	r2, #255	; 0xff
 800325e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003262:	f001 fcc1 	bl	8004be8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003266:	f001 fc8f 	bl	8004b88 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003270:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003272:	e011      	b.n	8003298 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d012      	beq.n	80032a2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3310      	adds	r3, #16
 8003280:	4618      	mov	r0, r3
 8003282:	f000 fc8f 	bl	8003ba4 <xTaskRemoveFromEventList>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800328c:	f000 fd68 	bl	8003d60 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003290:	7bbb      	ldrb	r3, [r7, #14]
 8003292:	3b01      	subs	r3, #1
 8003294:	b2db      	uxtb	r3, r3
 8003296:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003298:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800329c:	2b00      	cmp	r3, #0
 800329e:	dce9      	bgt.n	8003274 <prvUnlockQueue+0x60>
 80032a0:	e000      	b.n	80032a4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80032a2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	22ff      	movs	r2, #255	; 0xff
 80032a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80032ac:	f001 fc9c 	bl	8004be8 <vPortExitCritical>
}
 80032b0:	bf00      	nop
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80032c0:	f001 fc62 	bl	8004b88 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d102      	bne.n	80032d2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80032cc:	2301      	movs	r3, #1
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	e001      	b.n	80032d6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80032d2:	2300      	movs	r3, #0
 80032d4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80032d6:	f001 fc87 	bl	8004be8 <vPortExitCritical>

    return xReturn;
 80032da:	68fb      	ldr	r3, [r7, #12]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80032ec:	f001 fc4c 	bl	8004b88 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d102      	bne.n	8003302 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80032fc:	2301      	movs	r3, #1
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	e001      	b.n	8003306 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003302:	2300      	movs	r3, #0
 8003304:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003306:	f001 fc6f 	bl	8004be8 <vPortExitCritical>

    return xReturn;
 800330a:	68fb      	ldr	r3, [r7, #12]
}
 800330c:	4618      	mov	r0, r3
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800331e:	2300      	movs	r3, #0
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	e014      	b.n	800334e <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003324:	4a0f      	ldr	r2, [pc, #60]	; (8003364 <vQueueAddToRegistry+0x50>)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10b      	bne.n	8003348 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003330:	490c      	ldr	r1, [pc, #48]	; (8003364 <vQueueAddToRegistry+0x50>)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800333a:	4a0a      	ldr	r2, [pc, #40]	; (8003364 <vQueueAddToRegistry+0x50>)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	4413      	add	r3, r2
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8003346:	e006      	b.n	8003356 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	3301      	adds	r3, #1
 800334c:	60fb      	str	r3, [r7, #12]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2b07      	cmp	r3, #7
 8003352:	d9e7      	bls.n	8003324 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003354:	bf00      	nop
 8003356:	bf00      	nop
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	20012ea4 	.word	0x20012ea4

08003368 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003378:	f001 fc06 	bl	8004b88 <vPortEnterCritical>
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003382:	b25b      	sxtb	r3, r3
 8003384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003388:	d103      	bne.n	8003392 <vQueueWaitForMessageRestricted+0x2a>
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003398:	b25b      	sxtb	r3, r3
 800339a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339e:	d103      	bne.n	80033a8 <vQueueWaitForMessageRestricted+0x40>
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033a8:	f001 fc1e 	bl	8004be8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d106      	bne.n	80033c2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	3324      	adds	r3, #36	; 0x24
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	68b9      	ldr	r1, [r7, #8]
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 fbc5 	bl	8003b4c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80033c2:	6978      	ldr	r0, [r7, #20]
 80033c4:	f7ff ff26 	bl	8003214 <prvUnlockQueue>
    }
 80033c8:	bf00      	nop
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08c      	sub	sp, #48	; 0x30
 80033d4:	af04      	add	r7, sp, #16
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	603b      	str	r3, [r7, #0]
 80033dc:	4613      	mov	r3, r2
 80033de:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80033e0:	88fb      	ldrh	r3, [r7, #6]
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4618      	mov	r0, r3
 80033e6:	f001 fcf1 	bl	8004dcc <pvPortMalloc>
 80033ea:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00e      	beq.n	8003410 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80033f2:	2058      	movs	r0, #88	; 0x58
 80033f4:	f001 fcea 	bl	8004dcc <pvPortMalloc>
 80033f8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	631a      	str	r2, [r3, #48]	; 0x30
 8003406:	e005      	b.n	8003414 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003408:	6978      	ldr	r0, [r7, #20]
 800340a:	f001 fdbf 	bl	8004f8c <vPortFree>
 800340e:	e001      	b.n	8003414 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003410:	2300      	movs	r3, #0
 8003412:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d013      	beq.n	8003442 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800341a:	88fa      	ldrh	r2, [r7, #6]
 800341c:	2300      	movs	r3, #0
 800341e:	9303      	str	r3, [sp, #12]
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	9302      	str	r3, [sp, #8]
 8003424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003426:	9301      	str	r3, [sp, #4]
 8003428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	68b9      	ldr	r1, [r7, #8]
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f000 f80e 	bl	8003452 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003436:	69f8      	ldr	r0, [r7, #28]
 8003438:	f000 f8a2 	bl	8003580 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800343c:	2301      	movs	r3, #1
 800343e:	61bb      	str	r3, [r7, #24]
 8003440:	e002      	b.n	8003448 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003442:	f04f 33ff 	mov.w	r3, #4294967295
 8003446:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003448:	69bb      	ldr	r3, [r7, #24]
    }
 800344a:	4618      	mov	r0, r3
 800344c:	3720      	adds	r7, #32
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b088      	sub	sp, #32
 8003456:	af00      	add	r7, sp, #0
 8003458:	60f8      	str	r0, [r7, #12]
 800345a:	60b9      	str	r1, [r7, #8]
 800345c:	607a      	str	r2, [r7, #4]
 800345e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003462:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	461a      	mov	r2, r3
 800346a:	21a5      	movs	r1, #165	; 0xa5
 800346c:	f001 fee4 	bl	8005238 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800347a:	3b01      	subs	r3, #1
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4413      	add	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	f023 0307 	bic.w	r3, r3, #7
 8003488:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00a      	beq.n	80034aa <prvInitialiseNewTask+0x58>
        __asm volatile
 8003494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003498:	f383 8811 	msr	BASEPRI, r3
 800349c:	f3bf 8f6f 	isb	sy
 80034a0:	f3bf 8f4f 	dsb	sy
 80034a4:	617b      	str	r3, [r7, #20]
    }
 80034a6:	bf00      	nop
 80034a8:	e7fe      	b.n	80034a8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d01f      	beq.n	80034f0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034b0:	2300      	movs	r3, #0
 80034b2:	61fb      	str	r3, [r7, #28]
 80034b4:	e012      	b.n	80034dc <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	4413      	add	r3, r2
 80034bc:	7819      	ldrb	r1, [r3, #0]
 80034be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	4413      	add	r3, r2
 80034c4:	3334      	adds	r3, #52	; 0x34
 80034c6:	460a      	mov	r2, r1
 80034c8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	4413      	add	r3, r2
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d006      	beq.n	80034e4 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	3301      	adds	r3, #1
 80034da:	61fb      	str	r3, [r7, #28]
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	2b09      	cmp	r3, #9
 80034e0:	d9e9      	bls.n	80034b6 <prvInitialiseNewTask+0x64>
 80034e2:	e000      	b.n	80034e6 <prvInitialiseNewTask+0x94>
            {
                break;
 80034e4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80034e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80034ee:	e003      	b.n	80034f8 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80034f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80034f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d901      	bls.n	8003502 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80034fe:	2304      	movs	r3, #4
 8003500:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003504:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003506:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800350c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800350e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003510:	2200      	movs	r2, #0
 8003512:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003516:	3304      	adds	r3, #4
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff f8c1 	bl	80026a0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800351e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003520:	3318      	adds	r3, #24
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff f8bc 	bl	80026a0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800352c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800352e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003530:	f1c3 0205 	rsb	r2, r3, #5
 8003534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003536:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800353c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800353e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003540:	3350      	adds	r3, #80	; 0x50
 8003542:	2204      	movs	r2, #4
 8003544:	2100      	movs	r1, #0
 8003546:	4618      	mov	r0, r3
 8003548:	f001 fe76 	bl	8005238 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800354c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354e:	3354      	adds	r3, #84	; 0x54
 8003550:	2201      	movs	r2, #1
 8003552:	2100      	movs	r1, #0
 8003554:	4618      	mov	r0, r3
 8003556:	f001 fe6f 	bl	8005238 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	68f9      	ldr	r1, [r7, #12]
 800355e:	69b8      	ldr	r0, [r7, #24]
 8003560:	f001 f9e4 	bl	800492c <pxPortInitialiseStack>
 8003564:	4602      	mov	r2, r0
 8003566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003568:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800356a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003574:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003576:	bf00      	nop
 8003578:	3720      	adds	r7, #32
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
	...

08003580 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003588:	f001 fafe 	bl	8004b88 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800358c:	4b2c      	ldr	r3, [pc, #176]	; (8003640 <prvAddNewTaskToReadyList+0xc0>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	3301      	adds	r3, #1
 8003592:	4a2b      	ldr	r2, [pc, #172]	; (8003640 <prvAddNewTaskToReadyList+0xc0>)
 8003594:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003596:	4b2b      	ldr	r3, [pc, #172]	; (8003644 <prvAddNewTaskToReadyList+0xc4>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d109      	bne.n	80035b2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800359e:	4a29      	ldr	r2, [pc, #164]	; (8003644 <prvAddNewTaskToReadyList+0xc4>)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80035a4:	4b26      	ldr	r3, [pc, #152]	; (8003640 <prvAddNewTaskToReadyList+0xc0>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d110      	bne.n	80035ce <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80035ac:	f000 fbfc 	bl	8003da8 <prvInitialiseTaskLists>
 80035b0:	e00d      	b.n	80035ce <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80035b2:	4b25      	ldr	r3, [pc, #148]	; (8003648 <prvAddNewTaskToReadyList+0xc8>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d109      	bne.n	80035ce <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80035ba:	4b22      	ldr	r3, [pc, #136]	; (8003644 <prvAddNewTaskToReadyList+0xc4>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d802      	bhi.n	80035ce <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80035c8:	4a1e      	ldr	r2, [pc, #120]	; (8003644 <prvAddNewTaskToReadyList+0xc4>)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80035ce:	4b1f      	ldr	r3, [pc, #124]	; (800364c <prvAddNewTaskToReadyList+0xcc>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	3301      	adds	r3, #1
 80035d4:	4a1d      	ldr	r2, [pc, #116]	; (800364c <prvAddNewTaskToReadyList+0xcc>)
 80035d6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80035d8:	4b1c      	ldr	r3, [pc, #112]	; (800364c <prvAddNewTaskToReadyList+0xcc>)
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e4:	2201      	movs	r2, #1
 80035e6:	409a      	lsls	r2, r3
 80035e8:	4b19      	ldr	r3, [pc, #100]	; (8003650 <prvAddNewTaskToReadyList+0xd0>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	4a18      	ldr	r2, [pc, #96]	; (8003650 <prvAddNewTaskToReadyList+0xd0>)
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f6:	4613      	mov	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4a15      	ldr	r2, [pc, #84]	; (8003654 <prvAddNewTaskToReadyList+0xd4>)
 8003600:	441a      	add	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	3304      	adds	r3, #4
 8003606:	4619      	mov	r1, r3
 8003608:	4610      	mov	r0, r2
 800360a:	f7ff f856 	bl	80026ba <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800360e:	f001 faeb 	bl	8004be8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003612:	4b0d      	ldr	r3, [pc, #52]	; (8003648 <prvAddNewTaskToReadyList+0xc8>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00e      	beq.n	8003638 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800361a:	4b0a      	ldr	r3, [pc, #40]	; (8003644 <prvAddNewTaskToReadyList+0xc4>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003624:	429a      	cmp	r2, r3
 8003626:	d207      	bcs.n	8003638 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003628:	4b0b      	ldr	r3, [pc, #44]	; (8003658 <prvAddNewTaskToReadyList+0xd8>)
 800362a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	f3bf 8f4f 	dsb	sy
 8003634:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003638:	bf00      	nop
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	20000170 	.word	0x20000170
 8003644:	20000098 	.word	0x20000098
 8003648:	2000017c 	.word	0x2000017c
 800364c:	2000018c 	.word	0x2000018c
 8003650:	20000178 	.word	0x20000178
 8003654:	2000009c 	.word	0x2000009c
 8003658:	e000ed04 	.word	0xe000ed04

0800365c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003664:	2300      	movs	r3, #0
 8003666:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d017      	beq.n	800369e <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800366e:	4b13      	ldr	r3, [pc, #76]	; (80036bc <vTaskDelay+0x60>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00a      	beq.n	800368c <vTaskDelay+0x30>
        __asm volatile
 8003676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367a:	f383 8811 	msr	BASEPRI, r3
 800367e:	f3bf 8f6f 	isb	sy
 8003682:	f3bf 8f4f 	dsb	sy
 8003686:	60bb      	str	r3, [r7, #8]
    }
 8003688:	bf00      	nop
 800368a:	e7fe      	b.n	800368a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800368c:	f000 f86c 	bl	8003768 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003690:	2100      	movs	r1, #0
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 fdd2 	bl	800423c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003698:	f000 f874 	bl	8003784 <xTaskResumeAll>
 800369c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d107      	bne.n	80036b4 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 80036a4:	4b06      	ldr	r3, [pc, #24]	; (80036c0 <vTaskDelay+0x64>)
 80036a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	f3bf 8f4f 	dsb	sy
 80036b0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80036b4:	bf00      	nop
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	20000198 	.word	0x20000198
 80036c0:	e000ed04 	.word	0xe000ed04

080036c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80036ca:	4b20      	ldr	r3, [pc, #128]	; (800374c <vTaskStartScheduler+0x88>)
 80036cc:	9301      	str	r3, [sp, #4]
 80036ce:	2300      	movs	r3, #0
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	2300      	movs	r3, #0
 80036d4:	2282      	movs	r2, #130	; 0x82
 80036d6:	491e      	ldr	r1, [pc, #120]	; (8003750 <vTaskStartScheduler+0x8c>)
 80036d8:	481e      	ldr	r0, [pc, #120]	; (8003754 <vTaskStartScheduler+0x90>)
 80036da:	f7ff fe79 	bl	80033d0 <xTaskCreate>
 80036de:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d102      	bne.n	80036ec <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80036e6:	f000 fe0f 	bl	8004308 <xTimerCreateTimerTask>
 80036ea:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d116      	bne.n	8003720 <vTaskStartScheduler+0x5c>
        __asm volatile
 80036f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f6:	f383 8811 	msr	BASEPRI, r3
 80036fa:	f3bf 8f6f 	isb	sy
 80036fe:	f3bf 8f4f 	dsb	sy
 8003702:	60bb      	str	r3, [r7, #8]
    }
 8003704:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003706:	4b14      	ldr	r3, [pc, #80]	; (8003758 <vTaskStartScheduler+0x94>)
 8003708:	f04f 32ff 	mov.w	r2, #4294967295
 800370c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800370e:	4b13      	ldr	r3, [pc, #76]	; (800375c <vTaskStartScheduler+0x98>)
 8003710:	2201      	movs	r2, #1
 8003712:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003714:	4b12      	ldr	r3, [pc, #72]	; (8003760 <vTaskStartScheduler+0x9c>)
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800371a:	f001 f993 	bl	8004a44 <xPortStartScheduler>
 800371e:	e00e      	b.n	800373e <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003726:	d10a      	bne.n	800373e <vTaskStartScheduler+0x7a>
        __asm volatile
 8003728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372c:	f383 8811 	msr	BASEPRI, r3
 8003730:	f3bf 8f6f 	isb	sy
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	607b      	str	r3, [r7, #4]
    }
 800373a:	bf00      	nop
 800373c:	e7fe      	b.n	800373c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800373e:	4b09      	ldr	r3, [pc, #36]	; (8003764 <vTaskStartScheduler+0xa0>)
 8003740:	681b      	ldr	r3, [r3, #0]
}
 8003742:	bf00      	nop
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	20000194 	.word	0x20000194
 8003750:	08005c48 	.word	0x08005c48
 8003754:	08003d79 	.word	0x08003d79
 8003758:	20000190 	.word	0x20000190
 800375c:	2000017c 	.word	0x2000017c
 8003760:	20000174 	.word	0x20000174
 8003764:	2000000c 	.word	0x2000000c

08003768 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800376c:	4b04      	ldr	r3, [pc, #16]	; (8003780 <vTaskSuspendAll+0x18>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	3301      	adds	r3, #1
 8003772:	4a03      	ldr	r2, [pc, #12]	; (8003780 <vTaskSuspendAll+0x18>)
 8003774:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003776:	bf00      	nop
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	20000198 	.word	0x20000198

08003784 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800378a:	2300      	movs	r3, #0
 800378c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800378e:	2300      	movs	r3, #0
 8003790:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003792:	4b41      	ldr	r3, [pc, #260]	; (8003898 <xTaskResumeAll+0x114>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10a      	bne.n	80037b0 <xTaskResumeAll+0x2c>
        __asm volatile
 800379a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379e:	f383 8811 	msr	BASEPRI, r3
 80037a2:	f3bf 8f6f 	isb	sy
 80037a6:	f3bf 8f4f 	dsb	sy
 80037aa:	603b      	str	r3, [r7, #0]
    }
 80037ac:	bf00      	nop
 80037ae:	e7fe      	b.n	80037ae <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80037b0:	f001 f9ea 	bl	8004b88 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80037b4:	4b38      	ldr	r3, [pc, #224]	; (8003898 <xTaskResumeAll+0x114>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	3b01      	subs	r3, #1
 80037ba:	4a37      	ldr	r2, [pc, #220]	; (8003898 <xTaskResumeAll+0x114>)
 80037bc:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037be:	4b36      	ldr	r3, [pc, #216]	; (8003898 <xTaskResumeAll+0x114>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d161      	bne.n	800388a <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80037c6:	4b35      	ldr	r3, [pc, #212]	; (800389c <xTaskResumeAll+0x118>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d05d      	beq.n	800388a <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037ce:	e02e      	b.n	800382e <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037d0:	4b33      	ldr	r3, [pc, #204]	; (80038a0 <xTaskResumeAll+0x11c>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	3318      	adds	r3, #24
 80037dc:	4618      	mov	r0, r3
 80037de:	f7fe ffc9 	bl	8002774 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	3304      	adds	r3, #4
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fe ffc4 	bl	8002774 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f0:	2201      	movs	r2, #1
 80037f2:	409a      	lsls	r2, r3
 80037f4:	4b2b      	ldr	r3, [pc, #172]	; (80038a4 <xTaskResumeAll+0x120>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	4a2a      	ldr	r2, [pc, #168]	; (80038a4 <xTaskResumeAll+0x120>)
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003802:	4613      	mov	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4413      	add	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4a27      	ldr	r2, [pc, #156]	; (80038a8 <xTaskResumeAll+0x124>)
 800380c:	441a      	add	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	3304      	adds	r3, #4
 8003812:	4619      	mov	r1, r3
 8003814:	4610      	mov	r0, r2
 8003816:	f7fe ff50 	bl	80026ba <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800381e:	4b23      	ldr	r3, [pc, #140]	; (80038ac <xTaskResumeAll+0x128>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003824:	429a      	cmp	r2, r3
 8003826:	d302      	bcc.n	800382e <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8003828:	4b21      	ldr	r3, [pc, #132]	; (80038b0 <xTaskResumeAll+0x12c>)
 800382a:	2201      	movs	r2, #1
 800382c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800382e:	4b1c      	ldr	r3, [pc, #112]	; (80038a0 <xTaskResumeAll+0x11c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1cc      	bne.n	80037d0 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800383c:	f000 fb32 	bl	8003ea4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003840:	4b1c      	ldr	r3, [pc, #112]	; (80038b4 <xTaskResumeAll+0x130>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d010      	beq.n	800386e <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800384c:	f000 f846 	bl	80038dc <xTaskIncrementTick>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d002      	beq.n	800385c <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8003856:	4b16      	ldr	r3, [pc, #88]	; (80038b0 <xTaskResumeAll+0x12c>)
 8003858:	2201      	movs	r2, #1
 800385a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3b01      	subs	r3, #1
 8003860:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1f1      	bne.n	800384c <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8003868:	4b12      	ldr	r3, [pc, #72]	; (80038b4 <xTaskResumeAll+0x130>)
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800386e:	4b10      	ldr	r3, [pc, #64]	; (80038b0 <xTaskResumeAll+0x12c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d009      	beq.n	800388a <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003876:	2301      	movs	r3, #1
 8003878:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800387a:	4b0f      	ldr	r3, [pc, #60]	; (80038b8 <xTaskResumeAll+0x134>)
 800387c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	f3bf 8f4f 	dsb	sy
 8003886:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800388a:	f001 f9ad 	bl	8004be8 <vPortExitCritical>

    return xAlreadyYielded;
 800388e:	68bb      	ldr	r3, [r7, #8]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	20000198 	.word	0x20000198
 800389c:	20000170 	.word	0x20000170
 80038a0:	20000130 	.word	0x20000130
 80038a4:	20000178 	.word	0x20000178
 80038a8:	2000009c 	.word	0x2000009c
 80038ac:	20000098 	.word	0x20000098
 80038b0:	20000184 	.word	0x20000184
 80038b4:	20000180 	.word	0x20000180
 80038b8:	e000ed04 	.word	0xe000ed04

080038bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80038c2:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <xTaskGetTickCount+0x1c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80038c8:	687b      	ldr	r3, [r7, #4]
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	20000174 	.word	0x20000174

080038dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80038e2:	2300      	movs	r3, #0
 80038e4:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038e6:	4b4e      	ldr	r3, [pc, #312]	; (8003a20 <xTaskIncrementTick+0x144>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f040 808e 	bne.w	8003a0c <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80038f0:	4b4c      	ldr	r3, [pc, #304]	; (8003a24 <xTaskIncrementTick+0x148>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3301      	adds	r3, #1
 80038f6:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80038f8:	4a4a      	ldr	r2, [pc, #296]	; (8003a24 <xTaskIncrementTick+0x148>)
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d120      	bne.n	8003946 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003904:	4b48      	ldr	r3, [pc, #288]	; (8003a28 <xTaskIncrementTick+0x14c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <xTaskIncrementTick+0x48>
        __asm volatile
 800390e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003912:	f383 8811 	msr	BASEPRI, r3
 8003916:	f3bf 8f6f 	isb	sy
 800391a:	f3bf 8f4f 	dsb	sy
 800391e:	603b      	str	r3, [r7, #0]
    }
 8003920:	bf00      	nop
 8003922:	e7fe      	b.n	8003922 <xTaskIncrementTick+0x46>
 8003924:	4b40      	ldr	r3, [pc, #256]	; (8003a28 <xTaskIncrementTick+0x14c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	4b40      	ldr	r3, [pc, #256]	; (8003a2c <xTaskIncrementTick+0x150>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a3e      	ldr	r2, [pc, #248]	; (8003a28 <xTaskIncrementTick+0x14c>)
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	4a3e      	ldr	r2, [pc, #248]	; (8003a2c <xTaskIncrementTick+0x150>)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6013      	str	r3, [r2, #0]
 8003938:	4b3d      	ldr	r3, [pc, #244]	; (8003a30 <xTaskIncrementTick+0x154>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	3301      	adds	r3, #1
 800393e:	4a3c      	ldr	r2, [pc, #240]	; (8003a30 <xTaskIncrementTick+0x154>)
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	f000 faaf 	bl	8003ea4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003946:	4b3b      	ldr	r3, [pc, #236]	; (8003a34 <xTaskIncrementTick+0x158>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	429a      	cmp	r2, r3
 800394e:	d348      	bcc.n	80039e2 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003950:	4b35      	ldr	r3, [pc, #212]	; (8003a28 <xTaskIncrementTick+0x14c>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d104      	bne.n	8003964 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800395a:	4b36      	ldr	r3, [pc, #216]	; (8003a34 <xTaskIncrementTick+0x158>)
 800395c:	f04f 32ff 	mov.w	r2, #4294967295
 8003960:	601a      	str	r2, [r3, #0]
                    break;
 8003962:	e03e      	b.n	80039e2 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003964:	4b30      	ldr	r3, [pc, #192]	; (8003a28 <xTaskIncrementTick+0x14c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	429a      	cmp	r2, r3
 800397a:	d203      	bcs.n	8003984 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800397c:	4a2d      	ldr	r2, [pc, #180]	; (8003a34 <xTaskIncrementTick+0x158>)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003982:	e02e      	b.n	80039e2 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	3304      	adds	r3, #4
 8003988:	4618      	mov	r0, r3
 800398a:	f7fe fef3 	bl	8002774 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003992:	2b00      	cmp	r3, #0
 8003994:	d004      	beq.n	80039a0 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	3318      	adds	r3, #24
 800399a:	4618      	mov	r0, r3
 800399c:	f7fe feea 	bl	8002774 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a4:	2201      	movs	r2, #1
 80039a6:	409a      	lsls	r2, r3
 80039a8:	4b23      	ldr	r3, [pc, #140]	; (8003a38 <xTaskIncrementTick+0x15c>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	4a22      	ldr	r2, [pc, #136]	; (8003a38 <xTaskIncrementTick+0x15c>)
 80039b0:	6013      	str	r3, [r2, #0]
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b6:	4613      	mov	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4a1f      	ldr	r2, [pc, #124]	; (8003a3c <xTaskIncrementTick+0x160>)
 80039c0:	441a      	add	r2, r3
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	3304      	adds	r3, #4
 80039c6:	4619      	mov	r1, r3
 80039c8:	4610      	mov	r0, r2
 80039ca:	f7fe fe76 	bl	80026ba <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d2:	4b1b      	ldr	r3, [pc, #108]	; (8003a40 <xTaskIncrementTick+0x164>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d8:	429a      	cmp	r2, r3
 80039da:	d3b9      	bcc.n	8003950 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80039dc:	2301      	movs	r3, #1
 80039de:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039e0:	e7b6      	b.n	8003950 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80039e2:	4b17      	ldr	r3, [pc, #92]	; (8003a40 <xTaskIncrementTick+0x164>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e8:	4914      	ldr	r1, [pc, #80]	; (8003a3c <xTaskIncrementTick+0x160>)
 80039ea:	4613      	mov	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	440b      	add	r3, r1
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d901      	bls.n	80039fe <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 80039fa:	2301      	movs	r3, #1
 80039fc:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80039fe:	4b11      	ldr	r3, [pc, #68]	; (8003a44 <xTaskIncrementTick+0x168>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d007      	beq.n	8003a16 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8003a06:	2301      	movs	r3, #1
 8003a08:	617b      	str	r3, [r7, #20]
 8003a0a:	e004      	b.n	8003a16 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003a0c:	4b0e      	ldr	r3, [pc, #56]	; (8003a48 <xTaskIncrementTick+0x16c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3301      	adds	r3, #1
 8003a12:	4a0d      	ldr	r2, [pc, #52]	; (8003a48 <xTaskIncrementTick+0x16c>)
 8003a14:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003a16:	697b      	ldr	r3, [r7, #20]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	20000198 	.word	0x20000198
 8003a24:	20000174 	.word	0x20000174
 8003a28:	20000128 	.word	0x20000128
 8003a2c:	2000012c 	.word	0x2000012c
 8003a30:	20000188 	.word	0x20000188
 8003a34:	20000190 	.word	0x20000190
 8003a38:	20000178 	.word	0x20000178
 8003a3c:	2000009c 	.word	0x2000009c
 8003a40:	20000098 	.word	0x20000098
 8003a44:	20000184 	.word	0x20000184
 8003a48:	20000180 	.word	0x20000180

08003a4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b087      	sub	sp, #28
 8003a50:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a52:	4b27      	ldr	r3, [pc, #156]	; (8003af0 <vTaskSwitchContext+0xa4>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003a5a:	4b26      	ldr	r3, [pc, #152]	; (8003af4 <vTaskSwitchContext+0xa8>)
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003a60:	e03f      	b.n	8003ae2 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8003a62:	4b24      	ldr	r3, [pc, #144]	; (8003af4 <vTaskSwitchContext+0xa8>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a68:	4b23      	ldr	r3, [pc, #140]	; (8003af8 <vTaskSwitchContext+0xac>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	fab3 f383 	clz	r3, r3
 8003a74:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003a76:	7afb      	ldrb	r3, [r7, #11]
 8003a78:	f1c3 031f 	rsb	r3, r3, #31
 8003a7c:	617b      	str	r3, [r7, #20]
 8003a7e:	491f      	ldr	r1, [pc, #124]	; (8003afc <vTaskSwitchContext+0xb0>)
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	4613      	mov	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4413      	add	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10a      	bne.n	8003aa8 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a96:	f383 8811 	msr	BASEPRI, r3
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	607b      	str	r3, [r7, #4]
    }
 8003aa4:	bf00      	nop
 8003aa6:	e7fe      	b.n	8003aa6 <vTaskSwitchContext+0x5a>
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4a12      	ldr	r2, [pc, #72]	; (8003afc <vTaskSwitchContext+0xb0>)
 8003ab4:	4413      	add	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	605a      	str	r2, [r3, #4]
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	3308      	adds	r3, #8
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d104      	bne.n	8003ad8 <vTaskSwitchContext+0x8c>
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	605a      	str	r2, [r3, #4]
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	4a08      	ldr	r2, [pc, #32]	; (8003b00 <vTaskSwitchContext+0xb4>)
 8003ae0:	6013      	str	r3, [r2, #0]
}
 8003ae2:	bf00      	nop
 8003ae4:	371c      	adds	r7, #28
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	20000198 	.word	0x20000198
 8003af4:	20000184 	.word	0x20000184
 8003af8:	20000178 	.word	0x20000178
 8003afc:	2000009c 	.word	0x2000009c
 8003b00:	20000098 	.word	0x20000098

08003b04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10a      	bne.n	8003b2a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b18:	f383 8811 	msr	BASEPRI, r3
 8003b1c:	f3bf 8f6f 	isb	sy
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	60fb      	str	r3, [r7, #12]
    }
 8003b26:	bf00      	nop
 8003b28:	e7fe      	b.n	8003b28 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b2a:	4b07      	ldr	r3, [pc, #28]	; (8003b48 <vTaskPlaceOnEventList+0x44>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	3318      	adds	r3, #24
 8003b30:	4619      	mov	r1, r3
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7fe fde5 	bl	8002702 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b38:	2101      	movs	r1, #1
 8003b3a:	6838      	ldr	r0, [r7, #0]
 8003b3c:	f000 fb7e 	bl	800423c <prvAddCurrentTaskToDelayedList>
}
 8003b40:	bf00      	nop
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	20000098 	.word	0x20000098

08003b4c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10a      	bne.n	8003b74 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b62:	f383 8811 	msr	BASEPRI, r3
 8003b66:	f3bf 8f6f 	isb	sy
 8003b6a:	f3bf 8f4f 	dsb	sy
 8003b6e:	617b      	str	r3, [r7, #20]
    }
 8003b70:	bf00      	nop
 8003b72:	e7fe      	b.n	8003b72 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b74:	4b0a      	ldr	r3, [pc, #40]	; (8003ba0 <vTaskPlaceOnEventListRestricted+0x54>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	3318      	adds	r3, #24
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f7fe fd9c 	bl	80026ba <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d002      	beq.n	8003b8e <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003b88:	f04f 33ff 	mov.w	r3, #4294967295
 8003b8c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	68b8      	ldr	r0, [r7, #8]
 8003b92:	f000 fb53 	bl	800423c <prvAddCurrentTaskToDelayedList>
    }
 8003b96:	bf00      	nop
 8003b98:	3718      	adds	r7, #24
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	20000098 	.word	0x20000098

08003ba4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10a      	bne.n	8003bd0 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbe:	f383 8811 	msr	BASEPRI, r3
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	60fb      	str	r3, [r7, #12]
    }
 8003bcc:	bf00      	nop
 8003bce:	e7fe      	b.n	8003bce <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	3318      	adds	r3, #24
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7fe fdcd 	bl	8002774 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bda:	4b1d      	ldr	r3, [pc, #116]	; (8003c50 <xTaskRemoveFromEventList+0xac>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d11c      	bne.n	8003c1c <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	3304      	adds	r3, #4
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fe fdc4 	bl	8002774 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	409a      	lsls	r2, r3
 8003bf4:	4b17      	ldr	r3, [pc, #92]	; (8003c54 <xTaskRemoveFromEventList+0xb0>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	4a16      	ldr	r2, [pc, #88]	; (8003c54 <xTaskRemoveFromEventList+0xb0>)
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c02:	4613      	mov	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4413      	add	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4a13      	ldr	r2, [pc, #76]	; (8003c58 <xTaskRemoveFromEventList+0xb4>)
 8003c0c:	441a      	add	r2, r3
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	3304      	adds	r3, #4
 8003c12:	4619      	mov	r1, r3
 8003c14:	4610      	mov	r0, r2
 8003c16:	f7fe fd50 	bl	80026ba <vListInsertEnd>
 8003c1a:	e005      	b.n	8003c28 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	3318      	adds	r3, #24
 8003c20:	4619      	mov	r1, r3
 8003c22:	480e      	ldr	r0, [pc, #56]	; (8003c5c <xTaskRemoveFromEventList+0xb8>)
 8003c24:	f7fe fd49 	bl	80026ba <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2c:	4b0c      	ldr	r3, [pc, #48]	; (8003c60 <xTaskRemoveFromEventList+0xbc>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d905      	bls.n	8003c42 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003c36:	2301      	movs	r3, #1
 8003c38:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003c3a:	4b0a      	ldr	r3, [pc, #40]	; (8003c64 <xTaskRemoveFromEventList+0xc0>)
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	e001      	b.n	8003c46 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8003c42:	2300      	movs	r3, #0
 8003c44:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003c46:	697b      	ldr	r3, [r7, #20]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3718      	adds	r7, #24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	20000198 	.word	0x20000198
 8003c54:	20000178 	.word	0x20000178
 8003c58:	2000009c 	.word	0x2000009c
 8003c5c:	20000130 	.word	0x20000130
 8003c60:	20000098 	.word	0x20000098
 8003c64:	20000184 	.word	0x20000184

08003c68 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003c70:	4b06      	ldr	r3, [pc, #24]	; (8003c8c <vTaskInternalSetTimeOutState+0x24>)
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003c78:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <vTaskInternalSetTimeOutState+0x28>)
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	605a      	str	r2, [r3, #4]
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	20000188 	.word	0x20000188
 8003c90:	20000174 	.word	0x20000174

08003c94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b088      	sub	sp, #32
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10a      	bne.n	8003cba <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca8:	f383 8811 	msr	BASEPRI, r3
 8003cac:	f3bf 8f6f 	isb	sy
 8003cb0:	f3bf 8f4f 	dsb	sy
 8003cb4:	613b      	str	r3, [r7, #16]
    }
 8003cb6:	bf00      	nop
 8003cb8:	e7fe      	b.n	8003cb8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10a      	bne.n	8003cd6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc4:	f383 8811 	msr	BASEPRI, r3
 8003cc8:	f3bf 8f6f 	isb	sy
 8003ccc:	f3bf 8f4f 	dsb	sy
 8003cd0:	60fb      	str	r3, [r7, #12]
    }
 8003cd2:	bf00      	nop
 8003cd4:	e7fe      	b.n	8003cd4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003cd6:	f000 ff57 	bl	8004b88 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003cda:	4b1f      	ldr	r3, [pc, #124]	; (8003d58 <xTaskCheckForTimeOut+0xc4>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf2:	d102      	bne.n	8003cfa <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	61fb      	str	r3, [r7, #28]
 8003cf8:	e026      	b.n	8003d48 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	4b17      	ldr	r3, [pc, #92]	; (8003d5c <xTaskCheckForTimeOut+0xc8>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d00a      	beq.n	8003d1c <xTaskCheckForTimeOut+0x88>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d305      	bcc.n	8003d1c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003d10:	2301      	movs	r3, #1
 8003d12:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]
 8003d1a:	e015      	b.n	8003d48 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d20b      	bcs.n	8003d3e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	1ad2      	subs	r2, r2, r3
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7ff ff98 	bl	8003c68 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	61fb      	str	r3, [r7, #28]
 8003d3c:	e004      	b.n	8003d48 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003d44:	2301      	movs	r3, #1
 8003d46:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003d48:	f000 ff4e 	bl	8004be8 <vPortExitCritical>

    return xReturn;
 8003d4c:	69fb      	ldr	r3, [r7, #28]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3720      	adds	r7, #32
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	20000174 	.word	0x20000174
 8003d5c:	20000188 	.word	0x20000188

08003d60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003d64:	4b03      	ldr	r3, [pc, #12]	; (8003d74 <vTaskMissedYield+0x14>)
 8003d66:	2201      	movs	r2, #1
 8003d68:	601a      	str	r2, [r3, #0]
}
 8003d6a:	bf00      	nop
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	20000184 	.word	0x20000184

08003d78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003d80:	f000 f852 	bl	8003e28 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d84:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <prvIdleTask+0x28>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d9f9      	bls.n	8003d80 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003d8c:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <prvIdleTask+0x2c>)
 8003d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	f3bf 8f4f 	dsb	sy
 8003d98:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003d9c:	e7f0      	b.n	8003d80 <prvIdleTask+0x8>
 8003d9e:	bf00      	nop
 8003da0:	2000009c 	.word	0x2000009c
 8003da4:	e000ed04 	.word	0xe000ed04

08003da8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003dae:	2300      	movs	r3, #0
 8003db0:	607b      	str	r3, [r7, #4]
 8003db2:	e00c      	b.n	8003dce <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	4613      	mov	r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	4413      	add	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4a12      	ldr	r2, [pc, #72]	; (8003e08 <prvInitialiseTaskLists+0x60>)
 8003dc0:	4413      	add	r3, r2
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fe fc4c 	bl	8002660 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	607b      	str	r3, [r7, #4]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b04      	cmp	r3, #4
 8003dd2:	d9ef      	bls.n	8003db4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003dd4:	480d      	ldr	r0, [pc, #52]	; (8003e0c <prvInitialiseTaskLists+0x64>)
 8003dd6:	f7fe fc43 	bl	8002660 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003dda:	480d      	ldr	r0, [pc, #52]	; (8003e10 <prvInitialiseTaskLists+0x68>)
 8003ddc:	f7fe fc40 	bl	8002660 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003de0:	480c      	ldr	r0, [pc, #48]	; (8003e14 <prvInitialiseTaskLists+0x6c>)
 8003de2:	f7fe fc3d 	bl	8002660 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003de6:	480c      	ldr	r0, [pc, #48]	; (8003e18 <prvInitialiseTaskLists+0x70>)
 8003de8:	f7fe fc3a 	bl	8002660 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003dec:	480b      	ldr	r0, [pc, #44]	; (8003e1c <prvInitialiseTaskLists+0x74>)
 8003dee:	f7fe fc37 	bl	8002660 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003df2:	4b0b      	ldr	r3, [pc, #44]	; (8003e20 <prvInitialiseTaskLists+0x78>)
 8003df4:	4a05      	ldr	r2, [pc, #20]	; (8003e0c <prvInitialiseTaskLists+0x64>)
 8003df6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003df8:	4b0a      	ldr	r3, [pc, #40]	; (8003e24 <prvInitialiseTaskLists+0x7c>)
 8003dfa:	4a05      	ldr	r2, [pc, #20]	; (8003e10 <prvInitialiseTaskLists+0x68>)
 8003dfc:	601a      	str	r2, [r3, #0]
}
 8003dfe:	bf00      	nop
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	2000009c 	.word	0x2000009c
 8003e0c:	20000100 	.word	0x20000100
 8003e10:	20000114 	.word	0x20000114
 8003e14:	20000130 	.word	0x20000130
 8003e18:	20000144 	.word	0x20000144
 8003e1c:	2000015c 	.word	0x2000015c
 8003e20:	20000128 	.word	0x20000128
 8003e24:	2000012c 	.word	0x2000012c

08003e28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e2e:	e019      	b.n	8003e64 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003e30:	f000 feaa 	bl	8004b88 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e34:	4b10      	ldr	r3, [pc, #64]	; (8003e78 <prvCheckTasksWaitingTermination+0x50>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3304      	adds	r3, #4
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7fe fc97 	bl	8002774 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003e46:	4b0d      	ldr	r3, [pc, #52]	; (8003e7c <prvCheckTasksWaitingTermination+0x54>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	4a0b      	ldr	r2, [pc, #44]	; (8003e7c <prvCheckTasksWaitingTermination+0x54>)
 8003e4e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003e50:	4b0b      	ldr	r3, [pc, #44]	; (8003e80 <prvCheckTasksWaitingTermination+0x58>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	3b01      	subs	r3, #1
 8003e56:	4a0a      	ldr	r2, [pc, #40]	; (8003e80 <prvCheckTasksWaitingTermination+0x58>)
 8003e58:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003e5a:	f000 fec5 	bl	8004be8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f810 	bl	8003e84 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e64:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <prvCheckTasksWaitingTermination+0x58>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1e1      	bne.n	8003e30 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003e6c:	bf00      	nop
 8003e6e:	bf00      	nop
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	20000144 	.word	0x20000144
 8003e7c:	20000170 	.word	0x20000170
 8003e80:	20000158 	.word	0x20000158

08003e84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e90:	4618      	mov	r0, r3
 8003e92:	f001 f87b 	bl	8004f8c <vPortFree>
                vPortFree( pxTCB );
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f001 f878 	bl	8004f8c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003e9c:	bf00      	nop
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ea8:	4b0a      	ldr	r3, [pc, #40]	; (8003ed4 <prvResetNextTaskUnblockTime+0x30>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d104      	bne.n	8003ebc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003eb2:	4b09      	ldr	r3, [pc, #36]	; (8003ed8 <prvResetNextTaskUnblockTime+0x34>)
 8003eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003eb8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003eba:	e005      	b.n	8003ec8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003ebc:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <prvResetNextTaskUnblockTime+0x30>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a04      	ldr	r2, [pc, #16]	; (8003ed8 <prvResetNextTaskUnblockTime+0x34>)
 8003ec6:	6013      	str	r3, [r2, #0]
}
 8003ec8:	bf00      	nop
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	20000128 	.word	0x20000128
 8003ed8:	20000190 	.word	0x20000190

08003edc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003ee2:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <xTaskGetSchedulerState+0x34>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d102      	bne.n	8003ef0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003eea:	2301      	movs	r3, #1
 8003eec:	607b      	str	r3, [r7, #4]
 8003eee:	e008      	b.n	8003f02 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ef0:	4b08      	ldr	r3, [pc, #32]	; (8003f14 <xTaskGetSchedulerState+0x38>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d102      	bne.n	8003efe <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003ef8:	2302      	movs	r3, #2
 8003efa:	607b      	str	r3, [r7, #4]
 8003efc:	e001      	b.n	8003f02 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003efe:	2300      	movs	r3, #0
 8003f00:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003f02:	687b      	ldr	r3, [r7, #4]
    }
 8003f04:	4618      	mov	r0, r3
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	2000017c 	.word	0x2000017c
 8003f14:	20000198 	.word	0x20000198

08003f18 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8003f24:	2300      	movs	r3, #0
 8003f26:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d05e      	beq.n	8003fec <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f32:	4b31      	ldr	r3, [pc, #196]	; (8003ff8 <xTaskPriorityInherit+0xe0>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d24e      	bcs.n	8003fda <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	db06      	blt.n	8003f52 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f44:	4b2c      	ldr	r3, [pc, #176]	; (8003ff8 <xTaskPriorityInherit+0xe0>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4a:	f1c3 0205 	rsb	r2, r3, #5
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	6959      	ldr	r1, [r3, #20]
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4413      	add	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4a26      	ldr	r2, [pc, #152]	; (8003ffc <xTaskPriorityInherit+0xe4>)
 8003f64:	4413      	add	r3, r2
 8003f66:	4299      	cmp	r1, r3
 8003f68:	d12f      	bne.n	8003fca <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	3304      	adds	r3, #4
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7fe fc00 	bl	8002774 <uxListRemove>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10a      	bne.n	8003f90 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7e:	2201      	movs	r2, #1
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	43da      	mvns	r2, r3
 8003f86:	4b1e      	ldr	r3, [pc, #120]	; (8004000 <xTaskPriorityInherit+0xe8>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	4a1c      	ldr	r2, [pc, #112]	; (8004000 <xTaskPriorityInherit+0xe8>)
 8003f8e:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003f90:	4b19      	ldr	r3, [pc, #100]	; (8003ff8 <xTaskPriorityInherit+0xe0>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	409a      	lsls	r2, r3
 8003fa2:	4b17      	ldr	r3, [pc, #92]	; (8004000 <xTaskPriorityInherit+0xe8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	4a15      	ldr	r2, [pc, #84]	; (8004000 <xTaskPriorityInherit+0xe8>)
 8003faa:	6013      	str	r3, [r2, #0]
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4413      	add	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4a10      	ldr	r2, [pc, #64]	; (8003ffc <xTaskPriorityInherit+0xe4>)
 8003fba:	441a      	add	r2, r3
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	4610      	mov	r0, r2
 8003fc4:	f7fe fb79 	bl	80026ba <vListInsertEnd>
 8003fc8:	e004      	b.n	8003fd4 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003fca:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <xTaskPriorityInherit+0xe0>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	e008      	b.n	8003fec <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fde:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <xTaskPriorityInherit+0xe0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d201      	bcs.n	8003fec <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003fec:	68fb      	ldr	r3, [r7, #12]
    }
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	20000098 	.word	0x20000098
 8003ffc:	2000009c 	.word	0x2000009c
 8004000:	20000178 	.word	0x20000178

08004004 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004010:	2300      	movs	r3, #0
 8004012:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d063      	beq.n	80040e2 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800401a:	4b34      	ldr	r3, [pc, #208]	; (80040ec <xTaskPriorityDisinherit+0xe8>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	429a      	cmp	r2, r3
 8004022:	d00a      	beq.n	800403a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8004024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004028:	f383 8811 	msr	BASEPRI, r3
 800402c:	f3bf 8f6f 	isb	sy
 8004030:	f3bf 8f4f 	dsb	sy
 8004034:	60fb      	str	r3, [r7, #12]
    }
 8004036:	bf00      	nop
 8004038:	e7fe      	b.n	8004038 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10a      	bne.n	8004058 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8004042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004046:	f383 8811 	msr	BASEPRI, r3
 800404a:	f3bf 8f6f 	isb	sy
 800404e:	f3bf 8f4f 	dsb	sy
 8004052:	60bb      	str	r3, [r7, #8]
    }
 8004054:	bf00      	nop
 8004056:	e7fe      	b.n	8004056 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800405c:	1e5a      	subs	r2, r3, #1
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800406a:	429a      	cmp	r2, r3
 800406c:	d039      	beq.n	80040e2 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004072:	2b00      	cmp	r3, #0
 8004074:	d135      	bne.n	80040e2 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	3304      	adds	r3, #4
 800407a:	4618      	mov	r0, r3
 800407c:	f7fe fb7a 	bl	8002774 <uxListRemove>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10a      	bne.n	800409c <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408a:	2201      	movs	r2, #1
 800408c:	fa02 f303 	lsl.w	r3, r2, r3
 8004090:	43da      	mvns	r2, r3
 8004092:	4b17      	ldr	r3, [pc, #92]	; (80040f0 <xTaskPriorityDisinherit+0xec>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4013      	ands	r3, r2
 8004098:	4a15      	ldr	r2, [pc, #84]	; (80040f0 <xTaskPriorityDisinherit+0xec>)
 800409a:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a8:	f1c3 0205 	rsb	r2, r3, #5
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b4:	2201      	movs	r2, #1
 80040b6:	409a      	lsls	r2, r3
 80040b8:	4b0d      	ldr	r3, [pc, #52]	; (80040f0 <xTaskPriorityDisinherit+0xec>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4313      	orrs	r3, r2
 80040be:	4a0c      	ldr	r2, [pc, #48]	; (80040f0 <xTaskPriorityDisinherit+0xec>)
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c6:	4613      	mov	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4413      	add	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4a09      	ldr	r2, [pc, #36]	; (80040f4 <xTaskPriorityDisinherit+0xf0>)
 80040d0:	441a      	add	r2, r3
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	3304      	adds	r3, #4
 80040d6:	4619      	mov	r1, r3
 80040d8:	4610      	mov	r0, r2
 80040da:	f7fe faee 	bl	80026ba <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80040de:	2301      	movs	r3, #1
 80040e0:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80040e2:	697b      	ldr	r3, [r7, #20]
    }
 80040e4:	4618      	mov	r0, r3
 80040e6:	3718      	adds	r7, #24
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	20000098 	.word	0x20000098
 80040f0:	20000178 	.word	0x20000178
 80040f4:	2000009c 	.word	0x2000009c

080040f8 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b088      	sub	sp, #32
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004106:	2301      	movs	r3, #1
 8004108:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d077      	beq.n	8004200 <vTaskPriorityDisinheritAfterTimeout+0x108>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10a      	bne.n	800412e <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 8004118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411c:	f383 8811 	msr	BASEPRI, r3
 8004120:	f3bf 8f6f 	isb	sy
 8004124:	f3bf 8f4f 	dsb	sy
 8004128:	60fb      	str	r3, [r7, #12]
    }
 800412a:	bf00      	nop
 800412c:	e7fe      	b.n	800412c <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d902      	bls.n	800413e <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	61fb      	str	r3, [r7, #28]
 800413c:	e002      	b.n	8004144 <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004142:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004148:	69fa      	ldr	r2, [r7, #28]
 800414a:	429a      	cmp	r2, r3
 800414c:	d058      	beq.n	8004200 <vTaskPriorityDisinheritAfterTimeout+0x108>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	429a      	cmp	r2, r3
 8004156:	d153      	bne.n	8004200 <vTaskPriorityDisinheritAfterTimeout+0x108>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8004158:	4b2b      	ldr	r3, [pc, #172]	; (8004208 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	429a      	cmp	r2, r3
 8004160:	d10a      	bne.n	8004178 <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 8004162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004166:	f383 8811 	msr	BASEPRI, r3
 800416a:	f3bf 8f6f 	isb	sy
 800416e:	f3bf 8f4f 	dsb	sy
 8004172:	60bb      	str	r3, [r7, #8]
    }
 8004174:	bf00      	nop
 8004176:	e7fe      	b.n	8004176 <vTaskPriorityDisinheritAfterTimeout+0x7e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417c:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	69fa      	ldr	r2, [r7, #28]
 8004182:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	2b00      	cmp	r3, #0
 800418a:	db04      	blt.n	8004196 <vTaskPriorityDisinheritAfterTimeout+0x9e>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	f1c3 0205 	rsb	r2, r3, #5
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	6959      	ldr	r1, [r3, #20]
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	4613      	mov	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4a19      	ldr	r2, [pc, #100]	; (800420c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80041a6:	4413      	add	r3, r2
 80041a8:	4299      	cmp	r1, r3
 80041aa:	d129      	bne.n	8004200 <vTaskPriorityDisinheritAfterTimeout+0x108>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	3304      	adds	r3, #4
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7fe fadf 	bl	8002774 <uxListRemove>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10a      	bne.n	80041d2 <vTaskPriorityDisinheritAfterTimeout+0xda>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c0:	2201      	movs	r2, #1
 80041c2:	fa02 f303 	lsl.w	r3, r2, r3
 80041c6:	43da      	mvns	r2, r3
 80041c8:	4b11      	ldr	r3, [pc, #68]	; (8004210 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4013      	ands	r3, r2
 80041ce:	4a10      	ldr	r2, [pc, #64]	; (8004210 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80041d0:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d6:	2201      	movs	r2, #1
 80041d8:	409a      	lsls	r2, r3
 80041da:	4b0d      	ldr	r3, [pc, #52]	; (8004210 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4313      	orrs	r3, r2
 80041e0:	4a0b      	ldr	r2, [pc, #44]	; (8004210 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80041e2:	6013      	str	r3, [r2, #0]
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e8:	4613      	mov	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	4a06      	ldr	r2, [pc, #24]	; (800420c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80041f2:	441a      	add	r2, r3
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	3304      	adds	r3, #4
 80041f8:	4619      	mov	r1, r3
 80041fa:	4610      	mov	r0, r2
 80041fc:	f7fe fa5d 	bl	80026ba <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004200:	bf00      	nop
 8004202:	3720      	adds	r7, #32
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	20000098 	.word	0x20000098
 800420c:	2000009c 	.word	0x2000009c
 8004210:	20000178 	.word	0x20000178

08004214 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8004218:	4b07      	ldr	r3, [pc, #28]	; (8004238 <pvTaskIncrementMutexHeldCount+0x24>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d004      	beq.n	800422a <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8004220:	4b05      	ldr	r3, [pc, #20]	; (8004238 <pvTaskIncrementMutexHeldCount+0x24>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004226:	3201      	adds	r2, #1
 8004228:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 800422a:	4b03      	ldr	r3, [pc, #12]	; (8004238 <pvTaskIncrementMutexHeldCount+0x24>)
 800422c:	681b      	ldr	r3, [r3, #0]
    }
 800422e:	4618      	mov	r0, r3
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	20000098 	.word	0x20000098

0800423c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004246:	4b29      	ldr	r3, [pc, #164]	; (80042ec <prvAddCurrentTaskToDelayedList+0xb0>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800424c:	4b28      	ldr	r3, [pc, #160]	; (80042f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	3304      	adds	r3, #4
 8004252:	4618      	mov	r0, r3
 8004254:	f7fe fa8e 	bl	8002774 <uxListRemove>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10b      	bne.n	8004276 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800425e:	4b24      	ldr	r3, [pc, #144]	; (80042f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004264:	2201      	movs	r2, #1
 8004266:	fa02 f303 	lsl.w	r3, r2, r3
 800426a:	43da      	mvns	r2, r3
 800426c:	4b21      	ldr	r3, [pc, #132]	; (80042f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4013      	ands	r3, r2
 8004272:	4a20      	ldr	r2, [pc, #128]	; (80042f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004274:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800427c:	d10a      	bne.n	8004294 <prvAddCurrentTaskToDelayedList+0x58>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d007      	beq.n	8004294 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004284:	4b1a      	ldr	r3, [pc, #104]	; (80042f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	3304      	adds	r3, #4
 800428a:	4619      	mov	r1, r3
 800428c:	481a      	ldr	r0, [pc, #104]	; (80042f8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800428e:	f7fe fa14 	bl	80026ba <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004292:	e026      	b.n	80042e2 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4413      	add	r3, r2
 800429a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800429c:	4b14      	ldr	r3, [pc, #80]	; (80042f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d209      	bcs.n	80042c0 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042ac:	4b13      	ldr	r3, [pc, #76]	; (80042fc <prvAddCurrentTaskToDelayedList+0xc0>)
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	4b0f      	ldr	r3, [pc, #60]	; (80042f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3304      	adds	r3, #4
 80042b6:	4619      	mov	r1, r3
 80042b8:	4610      	mov	r0, r2
 80042ba:	f7fe fa22 	bl	8002702 <vListInsert>
}
 80042be:	e010      	b.n	80042e2 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042c0:	4b0f      	ldr	r3, [pc, #60]	; (8004300 <prvAddCurrentTaskToDelayedList+0xc4>)
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	4b0a      	ldr	r3, [pc, #40]	; (80042f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3304      	adds	r3, #4
 80042ca:	4619      	mov	r1, r3
 80042cc:	4610      	mov	r0, r2
 80042ce:	f7fe fa18 	bl	8002702 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80042d2:	4b0c      	ldr	r3, [pc, #48]	; (8004304 <prvAddCurrentTaskToDelayedList+0xc8>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d202      	bcs.n	80042e2 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 80042dc:	4a09      	ldr	r2, [pc, #36]	; (8004304 <prvAddCurrentTaskToDelayedList+0xc8>)
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	6013      	str	r3, [r2, #0]
}
 80042e2:	bf00      	nop
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	20000174 	.word	0x20000174
 80042f0:	20000098 	.word	0x20000098
 80042f4:	20000178 	.word	0x20000178
 80042f8:	2000015c 	.word	0x2000015c
 80042fc:	2000012c 	.word	0x2000012c
 8004300:	20000128 	.word	0x20000128
 8004304:	20000190 	.word	0x20000190

08004308 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800430e:	2300      	movs	r3, #0
 8004310:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004312:	f000 fad5 	bl	80048c0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004316:	4b11      	ldr	r3, [pc, #68]	; (800435c <xTimerCreateTimerTask+0x54>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00b      	beq.n	8004336 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800431e:	4b10      	ldr	r3, [pc, #64]	; (8004360 <xTimerCreateTimerTask+0x58>)
 8004320:	9301      	str	r3, [sp, #4]
 8004322:	2302      	movs	r3, #2
 8004324:	9300      	str	r3, [sp, #0]
 8004326:	2300      	movs	r3, #0
 8004328:	f44f 7282 	mov.w	r2, #260	; 0x104
 800432c:	490d      	ldr	r1, [pc, #52]	; (8004364 <xTimerCreateTimerTask+0x5c>)
 800432e:	480e      	ldr	r0, [pc, #56]	; (8004368 <xTimerCreateTimerTask+0x60>)
 8004330:	f7ff f84e 	bl	80033d0 <xTaskCreate>
 8004334:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10a      	bne.n	8004352 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800433c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004340:	f383 8811 	msr	BASEPRI, r3
 8004344:	f3bf 8f6f 	isb	sy
 8004348:	f3bf 8f4f 	dsb	sy
 800434c:	603b      	str	r3, [r7, #0]
    }
 800434e:	bf00      	nop
 8004350:	e7fe      	b.n	8004350 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004352:	687b      	ldr	r3, [r7, #4]
    }
 8004354:	4618      	mov	r0, r3
 8004356:	3708      	adds	r7, #8
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	200001cc 	.word	0x200001cc
 8004360:	200001d0 	.word	0x200001d0
 8004364:	08005c50 	.word	0x08005c50
 8004368:	080044a1 	.word	0x080044a1

0800436c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800436c:	b580      	push	{r7, lr}
 800436e:	b08a      	sub	sp, #40	; 0x28
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
 8004378:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800437a:	2300      	movs	r3, #0
 800437c:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10a      	bne.n	800439a <xTimerGenericCommand+0x2e>
        __asm volatile
 8004384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004388:	f383 8811 	msr	BASEPRI, r3
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	623b      	str	r3, [r7, #32]
    }
 8004396:	bf00      	nop
 8004398:	e7fe      	b.n	8004398 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800439a:	4b1a      	ldr	r3, [pc, #104]	; (8004404 <xTimerGenericCommand+0x98>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d02a      	beq.n	80043f8 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	2b05      	cmp	r3, #5
 80043b2:	dc18      	bgt.n	80043e6 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80043b4:	f7ff fd92 	bl	8003edc <xTaskGetSchedulerState>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d109      	bne.n	80043d2 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80043be:	4b11      	ldr	r3, [pc, #68]	; (8004404 <xTimerGenericCommand+0x98>)
 80043c0:	6818      	ldr	r0, [r3, #0]
 80043c2:	f107 0114 	add.w	r1, r7, #20
 80043c6:	2300      	movs	r3, #0
 80043c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043ca:	f7fe fae7 	bl	800299c <xQueueGenericSend>
 80043ce:	6278      	str	r0, [r7, #36]	; 0x24
 80043d0:	e012      	b.n	80043f8 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80043d2:	4b0c      	ldr	r3, [pc, #48]	; (8004404 <xTimerGenericCommand+0x98>)
 80043d4:	6818      	ldr	r0, [r3, #0]
 80043d6:	f107 0114 	add.w	r1, r7, #20
 80043da:	2300      	movs	r3, #0
 80043dc:	2200      	movs	r2, #0
 80043de:	f7fe fadd 	bl	800299c <xQueueGenericSend>
 80043e2:	6278      	str	r0, [r7, #36]	; 0x24
 80043e4:	e008      	b.n	80043f8 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80043e6:	4b07      	ldr	r3, [pc, #28]	; (8004404 <xTimerGenericCommand+0x98>)
 80043e8:	6818      	ldr	r0, [r3, #0]
 80043ea:	f107 0114 	add.w	r1, r7, #20
 80043ee:	2300      	movs	r3, #0
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	f7fe fbd1 	bl	8002b98 <xQueueGenericSendFromISR>
 80043f6:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80043fa:	4618      	mov	r0, r3
 80043fc:	3728      	adds	r7, #40	; 0x28
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	200001cc 	.word	0x200001cc

08004408 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004408:	b580      	push	{r7, lr}
 800440a:	b088      	sub	sp, #32
 800440c:	af02      	add	r7, sp, #8
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004412:	4b22      	ldr	r3, [pc, #136]	; (800449c <prvProcessExpiredTimer+0x94>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	3304      	adds	r3, #4
 8004420:	4618      	mov	r0, r3
 8004422:	f7fe f9a7 	bl	8002774 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	2b00      	cmp	r3, #0
 8004432:	d022      	beq.n	800447a <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	699a      	ldr	r2, [r3, #24]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	18d1      	adds	r1, r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	6978      	ldr	r0, [r7, #20]
 8004442:	f000 f8d1 	bl	80045e8 <prvInsertTimerInActiveList>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d01f      	beq.n	800448c <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800444c:	2300      	movs	r3, #0
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	2300      	movs	r3, #0
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	2100      	movs	r1, #0
 8004456:	6978      	ldr	r0, [r7, #20]
 8004458:	f7ff ff88 	bl	800436c <xTimerGenericCommand>
 800445c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d113      	bne.n	800448c <prvProcessExpiredTimer+0x84>
        __asm volatile
 8004464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004468:	f383 8811 	msr	BASEPRI, r3
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	60fb      	str	r3, [r7, #12]
    }
 8004476:	bf00      	nop
 8004478:	e7fe      	b.n	8004478 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004480:	f023 0301 	bic.w	r3, r3, #1
 8004484:	b2da      	uxtb	r2, r3
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	6978      	ldr	r0, [r7, #20]
 8004492:	4798      	blx	r3
    }
 8004494:	bf00      	nop
 8004496:	3718      	adds	r7, #24
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	200001c4 	.word	0x200001c4

080044a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80044a8:	f107 0308 	add.w	r3, r7, #8
 80044ac:	4618      	mov	r0, r3
 80044ae:	f000 f857 	bl	8004560 <prvGetNextExpireTime>
 80044b2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	4619      	mov	r1, r3
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f000 f803 	bl	80044c4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80044be:	f000 f8d5 	bl	800466c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80044c2:	e7f1      	b.n	80044a8 <prvTimerTask+0x8>

080044c4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80044ce:	f7ff f94b 	bl	8003768 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80044d2:	f107 0308 	add.w	r3, r7, #8
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 f866 	bl	80045a8 <prvSampleTimeNow>
 80044dc:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d130      	bne.n	8004546 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10a      	bne.n	8004500 <prvProcessTimerOrBlockTask+0x3c>
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d806      	bhi.n	8004500 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80044f2:	f7ff f947 	bl	8003784 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80044f6:	68f9      	ldr	r1, [r7, #12]
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f7ff ff85 	bl	8004408 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80044fe:	e024      	b.n	800454a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d008      	beq.n	8004518 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004506:	4b13      	ldr	r3, [pc, #76]	; (8004554 <prvProcessTimerOrBlockTask+0x90>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <prvProcessTimerOrBlockTask+0x50>
 8004510:	2301      	movs	r3, #1
 8004512:	e000      	b.n	8004516 <prvProcessTimerOrBlockTask+0x52>
 8004514:	2300      	movs	r3, #0
 8004516:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004518:	4b0f      	ldr	r3, [pc, #60]	; (8004558 <prvProcessTimerOrBlockTask+0x94>)
 800451a:	6818      	ldr	r0, [r3, #0]
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	4619      	mov	r1, r3
 8004526:	f7fe ff1f 	bl	8003368 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800452a:	f7ff f92b 	bl	8003784 <xTaskResumeAll>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10a      	bne.n	800454a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004534:	4b09      	ldr	r3, [pc, #36]	; (800455c <prvProcessTimerOrBlockTask+0x98>)
 8004536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	f3bf 8f6f 	isb	sy
    }
 8004544:	e001      	b.n	800454a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004546:	f7ff f91d 	bl	8003784 <xTaskResumeAll>
    }
 800454a:	bf00      	nop
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	200001c8 	.word	0x200001c8
 8004558:	200001cc 	.word	0x200001cc
 800455c:	e000ed04 	.word	0xe000ed04

08004560 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004568:	4b0e      	ldr	r3, [pc, #56]	; (80045a4 <prvGetNextExpireTime+0x44>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <prvGetNextExpireTime+0x16>
 8004572:	2201      	movs	r2, #1
 8004574:	e000      	b.n	8004578 <prvGetNextExpireTime+0x18>
 8004576:	2200      	movs	r2, #0
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d105      	bne.n	8004590 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004584:	4b07      	ldr	r3, [pc, #28]	; (80045a4 <prvGetNextExpireTime+0x44>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	60fb      	str	r3, [r7, #12]
 800458e:	e001      	b.n	8004594 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004590:	2300      	movs	r3, #0
 8004592:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004594:	68fb      	ldr	r3, [r7, #12]
    }
 8004596:	4618      	mov	r0, r3
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	200001c4 	.word	0x200001c4

080045a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80045b0:	f7ff f984 	bl	80038bc <xTaskGetTickCount>
 80045b4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80045b6:	4b0b      	ldr	r3, [pc, #44]	; (80045e4 <prvSampleTimeNow+0x3c>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d205      	bcs.n	80045cc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80045c0:	f000 f91a 	bl	80047f8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	e002      	b.n	80045d2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80045d2:	4a04      	ldr	r2, [pc, #16]	; (80045e4 <prvSampleTimeNow+0x3c>)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80045d8:	68fb      	ldr	r3, [r7, #12]
    }
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	200001d4 	.word	0x200001d4

080045e8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
 80045f4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80045f6:	2300      	movs	r3, #0
 80045f8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	429a      	cmp	r2, r3
 800460c:	d812      	bhi.n	8004634 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	1ad2      	subs	r2, r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	429a      	cmp	r2, r3
 800461a:	d302      	bcc.n	8004622 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800461c:	2301      	movs	r3, #1
 800461e:	617b      	str	r3, [r7, #20]
 8004620:	e01b      	b.n	800465a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004622:	4b10      	ldr	r3, [pc, #64]	; (8004664 <prvInsertTimerInActiveList+0x7c>)
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	3304      	adds	r3, #4
 800462a:	4619      	mov	r1, r3
 800462c:	4610      	mov	r0, r2
 800462e:	f7fe f868 	bl	8002702 <vListInsert>
 8004632:	e012      	b.n	800465a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	429a      	cmp	r2, r3
 800463a:	d206      	bcs.n	800464a <prvInsertTimerInActiveList+0x62>
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	429a      	cmp	r2, r3
 8004642:	d302      	bcc.n	800464a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004644:	2301      	movs	r3, #1
 8004646:	617b      	str	r3, [r7, #20]
 8004648:	e007      	b.n	800465a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800464a:	4b07      	ldr	r3, [pc, #28]	; (8004668 <prvInsertTimerInActiveList+0x80>)
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	3304      	adds	r3, #4
 8004652:	4619      	mov	r1, r3
 8004654:	4610      	mov	r0, r2
 8004656:	f7fe f854 	bl	8002702 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800465a:	697b      	ldr	r3, [r7, #20]
    }
 800465c:	4618      	mov	r0, r3
 800465e:	3718      	adds	r7, #24
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	200001c8 	.word	0x200001c8
 8004668:	200001c4 	.word	0x200001c4

0800466c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800466c:	b580      	push	{r7, lr}
 800466e:	b08c      	sub	sp, #48	; 0x30
 8004670:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004672:	e0ae      	b.n	80047d2 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	f2c0 80aa 	blt.w	80047d0 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d004      	beq.n	8004692 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	3304      	adds	r3, #4
 800468c:	4618      	mov	r0, r3
 800468e:	f7fe f871 	bl	8002774 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004692:	1d3b      	adds	r3, r7, #4
 8004694:	4618      	mov	r0, r3
 8004696:	f7ff ff87 	bl	80045a8 <prvSampleTimeNow>
 800469a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	2b09      	cmp	r3, #9
 80046a0:	f200 8097 	bhi.w	80047d2 <prvProcessReceivedCommands+0x166>
 80046a4:	a201      	add	r2, pc, #4	; (adr r2, 80046ac <prvProcessReceivedCommands+0x40>)
 80046a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046aa:	bf00      	nop
 80046ac:	080046d5 	.word	0x080046d5
 80046b0:	080046d5 	.word	0x080046d5
 80046b4:	080046d5 	.word	0x080046d5
 80046b8:	08004749 	.word	0x08004749
 80046bc:	0800475d 	.word	0x0800475d
 80046c0:	080047a7 	.word	0x080047a7
 80046c4:	080046d5 	.word	0x080046d5
 80046c8:	080046d5 	.word	0x080046d5
 80046cc:	08004749 	.word	0x08004749
 80046d0:	0800475d 	.word	0x0800475d
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046da:	f043 0301 	orr.w	r3, r3, #1
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	18d1      	adds	r1, r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6a3a      	ldr	r2, [r7, #32]
 80046f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046f4:	f7ff ff78 	bl	80045e8 <prvInsertTimerInActiveList>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d069      	beq.n	80047d2 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004704:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b00      	cmp	r3, #0
 8004712:	d05e      	beq.n	80047d2 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	441a      	add	r2, r3
 800471c:	2300      	movs	r3, #0
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	2300      	movs	r3, #0
 8004722:	2100      	movs	r1, #0
 8004724:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004726:	f7ff fe21 	bl	800436c <xTimerGenericCommand>
 800472a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d14f      	bne.n	80047d2 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8004732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	61bb      	str	r3, [r7, #24]
    }
 8004744:	bf00      	nop
 8004746:	e7fe      	b.n	8004746 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800474e:	f023 0301 	bic.w	r3, r3, #1
 8004752:	b2da      	uxtb	r2, r3
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800475a:	e03a      	b.n	80047d2 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004762:	f043 0301 	orr.w	r3, r3, #1
 8004766:	b2da      	uxtb	r2, r3
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004772:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10a      	bne.n	8004792 <prvProcessReceivedCommands+0x126>
        __asm volatile
 800477c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004780:	f383 8811 	msr	BASEPRI, r3
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	617b      	str	r3, [r7, #20]
    }
 800478e:	bf00      	nop
 8004790:	e7fe      	b.n	8004790 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004794:	699a      	ldr	r2, [r3, #24]
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	18d1      	adds	r1, r2, r3
 800479a:	6a3b      	ldr	r3, [r7, #32]
 800479c:	6a3a      	ldr	r2, [r7, #32]
 800479e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047a0:	f7ff ff22 	bl	80045e8 <prvInsertTimerInActiveList>
                        break;
 80047a4:	e015      	b.n	80047d2 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d103      	bne.n	80047bc <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80047b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047b6:	f000 fbe9 	bl	8004f8c <vPortFree>
 80047ba:	e00a      	b.n	80047d2 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047c2:	f023 0301 	bic.w	r3, r3, #1
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80047ce:	e000      	b.n	80047d2 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80047d0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047d2:	4b08      	ldr	r3, [pc, #32]	; (80047f4 <prvProcessReceivedCommands+0x188>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f107 0108 	add.w	r1, r7, #8
 80047da:	2200      	movs	r2, #0
 80047dc:	4618      	mov	r0, r3
 80047de:	f7fe fa85 	bl	8002cec <xQueueReceive>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f47f af45 	bne.w	8004674 <prvProcessReceivedCommands+0x8>
        }
    }
 80047ea:	bf00      	nop
 80047ec:	bf00      	nop
 80047ee:	3728      	adds	r7, #40	; 0x28
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	200001cc 	.word	0x200001cc

080047f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b088      	sub	sp, #32
 80047fc:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80047fe:	e048      	b.n	8004892 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004800:	4b2d      	ldr	r3, [pc, #180]	; (80048b8 <prvSwitchTimerLists+0xc0>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800480a:	4b2b      	ldr	r3, [pc, #172]	; (80048b8 <prvSwitchTimerLists+0xc0>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	3304      	adds	r3, #4
 8004818:	4618      	mov	r0, r3
 800481a:	f7fd ffab 	bl	8002774 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800482c:	f003 0304 	and.w	r3, r3, #4
 8004830:	2b00      	cmp	r3, #0
 8004832:	d02e      	beq.n	8004892 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	4413      	add	r3, r2
 800483c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	429a      	cmp	r2, r3
 8004844:	d90e      	bls.n	8004864 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004852:	4b19      	ldr	r3, [pc, #100]	; (80048b8 <prvSwitchTimerLists+0xc0>)
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	3304      	adds	r3, #4
 800485a:	4619      	mov	r1, r3
 800485c:	4610      	mov	r0, r2
 800485e:	f7fd ff50 	bl	8002702 <vListInsert>
 8004862:	e016      	b.n	8004892 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004864:	2300      	movs	r3, #0
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	2300      	movs	r3, #0
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	2100      	movs	r1, #0
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f7ff fd7c 	bl	800436c <xTimerGenericCommand>
 8004874:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10a      	bne.n	8004892 <prvSwitchTimerLists+0x9a>
        __asm volatile
 800487c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004880:	f383 8811 	msr	BASEPRI, r3
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	603b      	str	r3, [r7, #0]
    }
 800488e:	bf00      	nop
 8004890:	e7fe      	b.n	8004890 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004892:	4b09      	ldr	r3, [pc, #36]	; (80048b8 <prvSwitchTimerLists+0xc0>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1b1      	bne.n	8004800 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800489c:	4b06      	ldr	r3, [pc, #24]	; (80048b8 <prvSwitchTimerLists+0xc0>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80048a2:	4b06      	ldr	r3, [pc, #24]	; (80048bc <prvSwitchTimerLists+0xc4>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a04      	ldr	r2, [pc, #16]	; (80048b8 <prvSwitchTimerLists+0xc0>)
 80048a8:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80048aa:	4a04      	ldr	r2, [pc, #16]	; (80048bc <prvSwitchTimerLists+0xc4>)
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	6013      	str	r3, [r2, #0]
    }
 80048b0:	bf00      	nop
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	200001c4 	.word	0x200001c4
 80048bc:	200001c8 	.word	0x200001c8

080048c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80048c4:	f000 f960 	bl	8004b88 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80048c8:	4b12      	ldr	r3, [pc, #72]	; (8004914 <prvCheckForValidListAndQueue+0x54>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d11d      	bne.n	800490c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80048d0:	4811      	ldr	r0, [pc, #68]	; (8004918 <prvCheckForValidListAndQueue+0x58>)
 80048d2:	f7fd fec5 	bl	8002660 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80048d6:	4811      	ldr	r0, [pc, #68]	; (800491c <prvCheckForValidListAndQueue+0x5c>)
 80048d8:	f7fd fec2 	bl	8002660 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80048dc:	4b10      	ldr	r3, [pc, #64]	; (8004920 <prvCheckForValidListAndQueue+0x60>)
 80048de:	4a0e      	ldr	r2, [pc, #56]	; (8004918 <prvCheckForValidListAndQueue+0x58>)
 80048e0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80048e2:	4b10      	ldr	r3, [pc, #64]	; (8004924 <prvCheckForValidListAndQueue+0x64>)
 80048e4:	4a0d      	ldr	r2, [pc, #52]	; (800491c <prvCheckForValidListAndQueue+0x5c>)
 80048e6:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80048e8:	2200      	movs	r2, #0
 80048ea:	210c      	movs	r1, #12
 80048ec:	200a      	movs	r0, #10
 80048ee:	f7fd ffd3 	bl	8002898 <xQueueGenericCreate>
 80048f2:	4603      	mov	r3, r0
 80048f4:	4a07      	ldr	r2, [pc, #28]	; (8004914 <prvCheckForValidListAndQueue+0x54>)
 80048f6:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80048f8:	4b06      	ldr	r3, [pc, #24]	; (8004914 <prvCheckForValidListAndQueue+0x54>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d005      	beq.n	800490c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004900:	4b04      	ldr	r3, [pc, #16]	; (8004914 <prvCheckForValidListAndQueue+0x54>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4908      	ldr	r1, [pc, #32]	; (8004928 <prvCheckForValidListAndQueue+0x68>)
 8004906:	4618      	mov	r0, r3
 8004908:	f7fe fd04 	bl	8003314 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800490c:	f000 f96c 	bl	8004be8 <vPortExitCritical>
    }
 8004910:	bf00      	nop
 8004912:	bd80      	pop	{r7, pc}
 8004914:	200001cc 	.word	0x200001cc
 8004918:	2000019c 	.word	0x2000019c
 800491c:	200001b0 	.word	0x200001b0
 8004920:	200001c4 	.word	0x200001c4
 8004924:	200001c8 	.word	0x200001c8
 8004928:	08005c58 	.word	0x08005c58

0800492c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	3b04      	subs	r3, #4
 800493c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004944:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	3b04      	subs	r3, #4
 800494a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	f023 0201 	bic.w	r2, r3, #1
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	3b04      	subs	r3, #4
 800495a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800495c:	4a0c      	ldr	r2, [pc, #48]	; (8004990 <pxPortInitialiseStack+0x64>)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	3b14      	subs	r3, #20
 8004966:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	3b04      	subs	r3, #4
 8004972:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f06f 0202 	mvn.w	r2, #2
 800497a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	3b20      	subs	r3, #32
 8004980:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004982:	68fb      	ldr	r3, [r7, #12]
}
 8004984:	4618      	mov	r0, r3
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	08004995 	.word	0x08004995

08004994 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800499a:	2300      	movs	r3, #0
 800499c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800499e:	4b12      	ldr	r3, [pc, #72]	; (80049e8 <prvTaskExitError+0x54>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a6:	d00a      	beq.n	80049be <prvTaskExitError+0x2a>
        __asm volatile
 80049a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ac:	f383 8811 	msr	BASEPRI, r3
 80049b0:	f3bf 8f6f 	isb	sy
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	60fb      	str	r3, [r7, #12]
    }
 80049ba:	bf00      	nop
 80049bc:	e7fe      	b.n	80049bc <prvTaskExitError+0x28>
        __asm volatile
 80049be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c2:	f383 8811 	msr	BASEPRI, r3
 80049c6:	f3bf 8f6f 	isb	sy
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	60bb      	str	r3, [r7, #8]
    }
 80049d0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80049d2:	bf00      	nop
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0fc      	beq.n	80049d4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80049da:	bf00      	nop
 80049dc:	bf00      	nop
 80049de:	3714      	adds	r7, #20
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	20000010 	.word	0x20000010
 80049ec:	00000000 	.word	0x00000000

080049f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80049f0:	4b07      	ldr	r3, [pc, #28]	; (8004a10 <pxCurrentTCBConst2>)
 80049f2:	6819      	ldr	r1, [r3, #0]
 80049f4:	6808      	ldr	r0, [r1, #0]
 80049f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049fa:	f380 8809 	msr	PSP, r0
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	f04f 0000 	mov.w	r0, #0
 8004a06:	f380 8811 	msr	BASEPRI, r0
 8004a0a:	4770      	bx	lr
 8004a0c:	f3af 8000 	nop.w

08004a10 <pxCurrentTCBConst2>:
 8004a10:	20000098 	.word	0x20000098
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004a14:	bf00      	nop
 8004a16:	bf00      	nop

08004a18 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004a18:	4808      	ldr	r0, [pc, #32]	; (8004a3c <prvPortStartFirstTask+0x24>)
 8004a1a:	6800      	ldr	r0, [r0, #0]
 8004a1c:	6800      	ldr	r0, [r0, #0]
 8004a1e:	f380 8808 	msr	MSP, r0
 8004a22:	f04f 0000 	mov.w	r0, #0
 8004a26:	f380 8814 	msr	CONTROL, r0
 8004a2a:	b662      	cpsie	i
 8004a2c:	b661      	cpsie	f
 8004a2e:	f3bf 8f4f 	dsb	sy
 8004a32:	f3bf 8f6f 	isb	sy
 8004a36:	df00      	svc	0
 8004a38:	bf00      	nop
 8004a3a:	0000      	.short	0x0000
 8004a3c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004a40:	bf00      	nop
 8004a42:	bf00      	nop

08004a44 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004a4a:	4b46      	ldr	r3, [pc, #280]	; (8004b64 <xPortStartScheduler+0x120>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a46      	ldr	r2, [pc, #280]	; (8004b68 <xPortStartScheduler+0x124>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d10a      	bne.n	8004a6a <xPortStartScheduler+0x26>
        __asm volatile
 8004a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a58:	f383 8811 	msr	BASEPRI, r3
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	f3bf 8f4f 	dsb	sy
 8004a64:	613b      	str	r3, [r7, #16]
    }
 8004a66:	bf00      	nop
 8004a68:	e7fe      	b.n	8004a68 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a6a:	4b3e      	ldr	r3, [pc, #248]	; (8004b64 <xPortStartScheduler+0x120>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a3f      	ldr	r2, [pc, #252]	; (8004b6c <xPortStartScheduler+0x128>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d10a      	bne.n	8004a8a <xPortStartScheduler+0x46>
        __asm volatile
 8004a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a78:	f383 8811 	msr	BASEPRI, r3
 8004a7c:	f3bf 8f6f 	isb	sy
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	60fb      	str	r3, [r7, #12]
    }
 8004a86:	bf00      	nop
 8004a88:	e7fe      	b.n	8004a88 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a8a:	4b39      	ldr	r3, [pc, #228]	; (8004b70 <xPortStartScheduler+0x12c>)
 8004a8c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	22ff      	movs	r2, #255	; 0xff
 8004a9a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004aa4:	78fb      	ldrb	r3, [r7, #3]
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	4b31      	ldr	r3, [pc, #196]	; (8004b74 <xPortStartScheduler+0x130>)
 8004ab0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ab2:	4b31      	ldr	r3, [pc, #196]	; (8004b78 <xPortStartScheduler+0x134>)
 8004ab4:	2207      	movs	r2, #7
 8004ab6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ab8:	e009      	b.n	8004ace <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004aba:	4b2f      	ldr	r3, [pc, #188]	; (8004b78 <xPortStartScheduler+0x134>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	4a2d      	ldr	r2, [pc, #180]	; (8004b78 <xPortStartScheduler+0x134>)
 8004ac2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ac4:	78fb      	ldrb	r3, [r7, #3]
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ace:	78fb      	ldrb	r3, [r7, #3]
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad6:	2b80      	cmp	r3, #128	; 0x80
 8004ad8:	d0ef      	beq.n	8004aba <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ada:	4b27      	ldr	r3, [pc, #156]	; (8004b78 <xPortStartScheduler+0x134>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f1c3 0307 	rsb	r3, r3, #7
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d00a      	beq.n	8004afc <xPortStartScheduler+0xb8>
        __asm volatile
 8004ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aea:	f383 8811 	msr	BASEPRI, r3
 8004aee:	f3bf 8f6f 	isb	sy
 8004af2:	f3bf 8f4f 	dsb	sy
 8004af6:	60bb      	str	r3, [r7, #8]
    }
 8004af8:	bf00      	nop
 8004afa:	e7fe      	b.n	8004afa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004afc:	4b1e      	ldr	r3, [pc, #120]	; (8004b78 <xPortStartScheduler+0x134>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	021b      	lsls	r3, r3, #8
 8004b02:	4a1d      	ldr	r2, [pc, #116]	; (8004b78 <xPortStartScheduler+0x134>)
 8004b04:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b06:	4b1c      	ldr	r3, [pc, #112]	; (8004b78 <xPortStartScheduler+0x134>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b0e:	4a1a      	ldr	r2, [pc, #104]	; (8004b78 <xPortStartScheduler+0x134>)
 8004b10:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	b2da      	uxtb	r2, r3
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004b1a:	4b18      	ldr	r3, [pc, #96]	; (8004b7c <xPortStartScheduler+0x138>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a17      	ldr	r2, [pc, #92]	; (8004b7c <xPortStartScheduler+0x138>)
 8004b20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b24:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004b26:	4b15      	ldr	r3, [pc, #84]	; (8004b7c <xPortStartScheduler+0x138>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a14      	ldr	r2, [pc, #80]	; (8004b7c <xPortStartScheduler+0x138>)
 8004b2c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004b30:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004b32:	f000 f8db 	bl	8004cec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004b36:	4b12      	ldr	r3, [pc, #72]	; (8004b80 <xPortStartScheduler+0x13c>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004b3c:	f000 f8fa 	bl	8004d34 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004b40:	4b10      	ldr	r3, [pc, #64]	; (8004b84 <xPortStartScheduler+0x140>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a0f      	ldr	r2, [pc, #60]	; (8004b84 <xPortStartScheduler+0x140>)
 8004b46:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004b4a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004b4c:	f7ff ff64 	bl	8004a18 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004b50:	f7fe ff7c 	bl	8003a4c <vTaskSwitchContext>
    prvTaskExitError();
 8004b54:	f7ff ff1e 	bl	8004994 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3718      	adds	r7, #24
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	e000ed00 	.word	0xe000ed00
 8004b68:	410fc271 	.word	0x410fc271
 8004b6c:	410fc270 	.word	0x410fc270
 8004b70:	e000e400 	.word	0xe000e400
 8004b74:	200001d8 	.word	0x200001d8
 8004b78:	200001dc 	.word	0x200001dc
 8004b7c:	e000ed20 	.word	0xe000ed20
 8004b80:	20000010 	.word	0x20000010
 8004b84:	e000ef34 	.word	0xe000ef34

08004b88 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
        __asm volatile
 8004b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b92:	f383 8811 	msr	BASEPRI, r3
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	f3bf 8f4f 	dsb	sy
 8004b9e:	607b      	str	r3, [r7, #4]
    }
 8004ba0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004ba2:	4b0f      	ldr	r3, [pc, #60]	; (8004be0 <vPortEnterCritical+0x58>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	4a0d      	ldr	r2, [pc, #52]	; (8004be0 <vPortEnterCritical+0x58>)
 8004baa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004bac:	4b0c      	ldr	r3, [pc, #48]	; (8004be0 <vPortEnterCritical+0x58>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d10f      	bne.n	8004bd4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004bb4:	4b0b      	ldr	r3, [pc, #44]	; (8004be4 <vPortEnterCritical+0x5c>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00a      	beq.n	8004bd4 <vPortEnterCritical+0x4c>
        __asm volatile
 8004bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc2:	f383 8811 	msr	BASEPRI, r3
 8004bc6:	f3bf 8f6f 	isb	sy
 8004bca:	f3bf 8f4f 	dsb	sy
 8004bce:	603b      	str	r3, [r7, #0]
    }
 8004bd0:	bf00      	nop
 8004bd2:	e7fe      	b.n	8004bd2 <vPortEnterCritical+0x4a>
    }
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	20000010 	.word	0x20000010
 8004be4:	e000ed04 	.word	0xe000ed04

08004be8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004bee:	4b12      	ldr	r3, [pc, #72]	; (8004c38 <vPortExitCritical+0x50>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10a      	bne.n	8004c0c <vPortExitCritical+0x24>
        __asm volatile
 8004bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfa:	f383 8811 	msr	BASEPRI, r3
 8004bfe:	f3bf 8f6f 	isb	sy
 8004c02:	f3bf 8f4f 	dsb	sy
 8004c06:	607b      	str	r3, [r7, #4]
    }
 8004c08:	bf00      	nop
 8004c0a:	e7fe      	b.n	8004c0a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004c0c:	4b0a      	ldr	r3, [pc, #40]	; (8004c38 <vPortExitCritical+0x50>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	3b01      	subs	r3, #1
 8004c12:	4a09      	ldr	r2, [pc, #36]	; (8004c38 <vPortExitCritical+0x50>)
 8004c14:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004c16:	4b08      	ldr	r3, [pc, #32]	; (8004c38 <vPortExitCritical+0x50>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d105      	bne.n	8004c2a <vPortExitCritical+0x42>
 8004c1e:	2300      	movs	r3, #0
 8004c20:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	f383 8811 	msr	BASEPRI, r3
    }
 8004c28:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004c2a:	bf00      	nop
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	20000010 	.word	0x20000010
 8004c3c:	00000000 	.word	0x00000000

08004c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004c40:	f3ef 8009 	mrs	r0, PSP
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	4b15      	ldr	r3, [pc, #84]	; (8004ca0 <pxCurrentTCBConst>)
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	f01e 0f10 	tst.w	lr, #16
 8004c50:	bf08      	it	eq
 8004c52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c5a:	6010      	str	r0, [r2, #0]
 8004c5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004c60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004c64:	f380 8811 	msr	BASEPRI, r0
 8004c68:	f3bf 8f4f 	dsb	sy
 8004c6c:	f3bf 8f6f 	isb	sy
 8004c70:	f7fe feec 	bl	8003a4c <vTaskSwitchContext>
 8004c74:	f04f 0000 	mov.w	r0, #0
 8004c78:	f380 8811 	msr	BASEPRI, r0
 8004c7c:	bc09      	pop	{r0, r3}
 8004c7e:	6819      	ldr	r1, [r3, #0]
 8004c80:	6808      	ldr	r0, [r1, #0]
 8004c82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c86:	f01e 0f10 	tst.w	lr, #16
 8004c8a:	bf08      	it	eq
 8004c8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004c90:	f380 8809 	msr	PSP, r0
 8004c94:	f3bf 8f6f 	isb	sy
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	f3af 8000 	nop.w

08004ca0 <pxCurrentTCBConst>:
 8004ca0:	20000098 	.word	0x20000098
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004ca4:	bf00      	nop
 8004ca6:	bf00      	nop

08004ca8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
        __asm volatile
 8004cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb2:	f383 8811 	msr	BASEPRI, r3
 8004cb6:	f3bf 8f6f 	isb	sy
 8004cba:	f3bf 8f4f 	dsb	sy
 8004cbe:	607b      	str	r3, [r7, #4]
    }
 8004cc0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004cc2:	f7fe fe0b 	bl	80038dc <xTaskIncrementTick>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004ccc:	4b06      	ldr	r3, [pc, #24]	; (8004ce8 <SysTick_Handler+0x40>)
 8004cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	f383 8811 	msr	BASEPRI, r3
    }
 8004cde:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8004ce0:	bf00      	nop
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	e000ed04 	.word	0xe000ed04

08004cec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004cf0:	4b0b      	ldr	r3, [pc, #44]	; (8004d20 <vPortSetupTimerInterrupt+0x34>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004cf6:	4b0b      	ldr	r3, [pc, #44]	; (8004d24 <vPortSetupTimerInterrupt+0x38>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004cfc:	4b0a      	ldr	r3, [pc, #40]	; (8004d28 <vPortSetupTimerInterrupt+0x3c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a0a      	ldr	r2, [pc, #40]	; (8004d2c <vPortSetupTimerInterrupt+0x40>)
 8004d02:	fba2 2303 	umull	r2, r3, r2, r3
 8004d06:	099b      	lsrs	r3, r3, #6
 8004d08:	4a09      	ldr	r2, [pc, #36]	; (8004d30 <vPortSetupTimerInterrupt+0x44>)
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d0e:	4b04      	ldr	r3, [pc, #16]	; (8004d20 <vPortSetupTimerInterrupt+0x34>)
 8004d10:	2207      	movs	r2, #7
 8004d12:	601a      	str	r2, [r3, #0]
}
 8004d14:	bf00      	nop
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	e000e010 	.word	0xe000e010
 8004d24:	e000e018 	.word	0xe000e018
 8004d28:	20000000 	.word	0x20000000
 8004d2c:	10624dd3 	.word	0x10624dd3
 8004d30:	e000e014 	.word	0xe000e014

08004d34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004d34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004d44 <vPortEnableVFP+0x10>
 8004d38:	6801      	ldr	r1, [r0, #0]
 8004d3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004d3e:	6001      	str	r1, [r0, #0]
 8004d40:	4770      	bx	lr
 8004d42:	0000      	.short	0x0000
 8004d44:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004d48:	bf00      	nop
 8004d4a:	bf00      	nop

08004d4c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004d52:	f3ef 8305 	mrs	r3, IPSR
 8004d56:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2b0f      	cmp	r3, #15
 8004d5c:	d914      	bls.n	8004d88 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004d5e:	4a17      	ldr	r2, [pc, #92]	; (8004dbc <vPortValidateInterruptPriority+0x70>)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4413      	add	r3, r2
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004d68:	4b15      	ldr	r3, [pc, #84]	; (8004dc0 <vPortValidateInterruptPriority+0x74>)
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	7afa      	ldrb	r2, [r7, #11]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d20a      	bcs.n	8004d88 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	607b      	str	r3, [r7, #4]
    }
 8004d84:	bf00      	nop
 8004d86:	e7fe      	b.n	8004d86 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004d88:	4b0e      	ldr	r3, [pc, #56]	; (8004dc4 <vPortValidateInterruptPriority+0x78>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004d90:	4b0d      	ldr	r3, [pc, #52]	; (8004dc8 <vPortValidateInterruptPriority+0x7c>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d90a      	bls.n	8004dae <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9c:	f383 8811 	msr	BASEPRI, r3
 8004da0:	f3bf 8f6f 	isb	sy
 8004da4:	f3bf 8f4f 	dsb	sy
 8004da8:	603b      	str	r3, [r7, #0]
    }
 8004daa:	bf00      	nop
 8004dac:	e7fe      	b.n	8004dac <vPortValidateInterruptPriority+0x60>
    }
 8004dae:	bf00      	nop
 8004db0:	3714      	adds	r7, #20
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	e000e3f0 	.word	0xe000e3f0
 8004dc0:	200001d8 	.word	0x200001d8
 8004dc4:	e000ed0c 	.word	0xe000ed0c
 8004dc8:	200001dc 	.word	0x200001dc

08004dcc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b08a      	sub	sp, #40	; 0x28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004dd8:	f7fe fcc6 	bl	8003768 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004ddc:	4b65      	ldr	r3, [pc, #404]	; (8004f74 <pvPortMalloc+0x1a8>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004de4:	f000 f934 	bl	8005050 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004de8:	4b63      	ldr	r3, [pc, #396]	; (8004f78 <pvPortMalloc+0x1ac>)
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4013      	ands	r3, r2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f040 80a7 	bne.w	8004f44 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d02d      	beq.n	8004e58 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004dfc:	2208      	movs	r2, #8
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d227      	bcs.n	8004e58 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004e08:	2208      	movs	r2, #8
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d021      	beq.n	8004e5e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f023 0307 	bic.w	r3, r3, #7
 8004e20:	3308      	adds	r3, #8
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d214      	bcs.n	8004e52 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f023 0307 	bic.w	r3, r3, #7
 8004e2e:	3308      	adds	r3, #8
 8004e30:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f003 0307 	and.w	r3, r3, #7
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d010      	beq.n	8004e5e <pvPortMalloc+0x92>
        __asm volatile
 8004e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e40:	f383 8811 	msr	BASEPRI, r3
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	617b      	str	r3, [r7, #20]
    }
 8004e4e:	bf00      	nop
 8004e50:	e7fe      	b.n	8004e50 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004e52:	2300      	movs	r3, #0
 8004e54:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e56:	e002      	b.n	8004e5e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	607b      	str	r3, [r7, #4]
 8004e5c:	e000      	b.n	8004e60 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e5e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d06e      	beq.n	8004f44 <pvPortMalloc+0x178>
 8004e66:	4b45      	ldr	r3, [pc, #276]	; (8004f7c <pvPortMalloc+0x1b0>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d869      	bhi.n	8004f44 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004e70:	4b43      	ldr	r3, [pc, #268]	; (8004f80 <pvPortMalloc+0x1b4>)
 8004e72:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004e74:	4b42      	ldr	r3, [pc, #264]	; (8004f80 <pvPortMalloc+0x1b4>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e7a:	e004      	b.n	8004e86 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d903      	bls.n	8004e98 <pvPortMalloc+0xcc>
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1f1      	bne.n	8004e7c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004e98:	4b36      	ldr	r3, [pc, #216]	; (8004f74 <pvPortMalloc+0x1a8>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d050      	beq.n	8004f44 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ea2:	6a3b      	ldr	r3, [r7, #32]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2208      	movs	r2, #8
 8004ea8:	4413      	add	r3, r2
 8004eaa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	6a3b      	ldr	r3, [r7, #32]
 8004eb2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	1ad2      	subs	r2, r2, r3
 8004ebc:	2308      	movs	r3, #8
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d91f      	bls.n	8004f04 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4413      	add	r3, r2
 8004eca:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	f003 0307 	and.w	r3, r3, #7
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00a      	beq.n	8004eec <pvPortMalloc+0x120>
        __asm volatile
 8004ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eda:	f383 8811 	msr	BASEPRI, r3
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	f3bf 8f4f 	dsb	sy
 8004ee6:	613b      	str	r3, [r7, #16]
    }
 8004ee8:	bf00      	nop
 8004eea:	e7fe      	b.n	8004eea <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	1ad2      	subs	r2, r2, r3
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004efe:	69b8      	ldr	r0, [r7, #24]
 8004f00:	f000 f908 	bl	8005114 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f04:	4b1d      	ldr	r3, [pc, #116]	; (8004f7c <pvPortMalloc+0x1b0>)
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	4a1b      	ldr	r2, [pc, #108]	; (8004f7c <pvPortMalloc+0x1b0>)
 8004f10:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f12:	4b1a      	ldr	r3, [pc, #104]	; (8004f7c <pvPortMalloc+0x1b0>)
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	4b1b      	ldr	r3, [pc, #108]	; (8004f84 <pvPortMalloc+0x1b8>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d203      	bcs.n	8004f26 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f1e:	4b17      	ldr	r3, [pc, #92]	; (8004f7c <pvPortMalloc+0x1b0>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a18      	ldr	r2, [pc, #96]	; (8004f84 <pvPortMalloc+0x1b8>)
 8004f24:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f28:	685a      	ldr	r2, [r3, #4]
 8004f2a:	4b13      	ldr	r3, [pc, #76]	; (8004f78 <pvPortMalloc+0x1ac>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	2200      	movs	r2, #0
 8004f38:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004f3a:	4b13      	ldr	r3, [pc, #76]	; (8004f88 <pvPortMalloc+0x1bc>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	4a11      	ldr	r2, [pc, #68]	; (8004f88 <pvPortMalloc+0x1bc>)
 8004f42:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004f44:	f7fe fc1e 	bl	8003784 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	f003 0307 	and.w	r3, r3, #7
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00a      	beq.n	8004f68 <pvPortMalloc+0x19c>
        __asm volatile
 8004f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f56:	f383 8811 	msr	BASEPRI, r3
 8004f5a:	f3bf 8f6f 	isb	sy
 8004f5e:	f3bf 8f4f 	dsb	sy
 8004f62:	60fb      	str	r3, [r7, #12]
    }
 8004f64:	bf00      	nop
 8004f66:	e7fe      	b.n	8004f66 <pvPortMalloc+0x19a>
    return pvReturn;
 8004f68:	69fb      	ldr	r3, [r7, #28]
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3728      	adds	r7, #40	; 0x28
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	20012de8 	.word	0x20012de8
 8004f78:	20012dfc 	.word	0x20012dfc
 8004f7c:	20012dec 	.word	0x20012dec
 8004f80:	20012de0 	.word	0x20012de0
 8004f84:	20012df0 	.word	0x20012df0
 8004f88:	20012df4 	.word	0x20012df4

08004f8c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d04d      	beq.n	800503a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004f9e:	2308      	movs	r3, #8
 8004fa0:	425b      	negs	r3, r3
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	4b24      	ldr	r3, [pc, #144]	; (8005044 <vPortFree+0xb8>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10a      	bne.n	8004fd0 <vPortFree+0x44>
        __asm volatile
 8004fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbe:	f383 8811 	msr	BASEPRI, r3
 8004fc2:	f3bf 8f6f 	isb	sy
 8004fc6:	f3bf 8f4f 	dsb	sy
 8004fca:	60fb      	str	r3, [r7, #12]
    }
 8004fcc:	bf00      	nop
 8004fce:	e7fe      	b.n	8004fce <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00a      	beq.n	8004fee <vPortFree+0x62>
        __asm volatile
 8004fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fdc:	f383 8811 	msr	BASEPRI, r3
 8004fe0:	f3bf 8f6f 	isb	sy
 8004fe4:	f3bf 8f4f 	dsb	sy
 8004fe8:	60bb      	str	r3, [r7, #8]
    }
 8004fea:	bf00      	nop
 8004fec:	e7fe      	b.n	8004fec <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	685a      	ldr	r2, [r3, #4]
 8004ff2:	4b14      	ldr	r3, [pc, #80]	; (8005044 <vPortFree+0xb8>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d01e      	beq.n	800503a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d11a      	bne.n	800503a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	685a      	ldr	r2, [r3, #4]
 8005008:	4b0e      	ldr	r3, [pc, #56]	; (8005044 <vPortFree+0xb8>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	43db      	mvns	r3, r3
 800500e:	401a      	ands	r2, r3
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005014:	f7fe fba8 	bl	8003768 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	4b0a      	ldr	r3, [pc, #40]	; (8005048 <vPortFree+0xbc>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4413      	add	r3, r2
 8005022:	4a09      	ldr	r2, [pc, #36]	; (8005048 <vPortFree+0xbc>)
 8005024:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005026:	6938      	ldr	r0, [r7, #16]
 8005028:	f000 f874 	bl	8005114 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800502c:	4b07      	ldr	r3, [pc, #28]	; (800504c <vPortFree+0xc0>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	3301      	adds	r3, #1
 8005032:	4a06      	ldr	r2, [pc, #24]	; (800504c <vPortFree+0xc0>)
 8005034:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005036:	f7fe fba5 	bl	8003784 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800503a:	bf00      	nop
 800503c:	3718      	adds	r7, #24
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	20012dfc 	.word	0x20012dfc
 8005048:	20012dec 	.word	0x20012dec
 800504c:	20012df8 	.word	0x20012df8

08005050 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005056:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800505a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800505c:	4b27      	ldr	r3, [pc, #156]	; (80050fc <prvHeapInit+0xac>)
 800505e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f003 0307 	and.w	r3, r3, #7
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00c      	beq.n	8005084 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	3307      	adds	r3, #7
 800506e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f023 0307 	bic.w	r3, r3, #7
 8005076:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	4a1f      	ldr	r2, [pc, #124]	; (80050fc <prvHeapInit+0xac>)
 8005080:	4413      	add	r3, r2
 8005082:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005088:	4a1d      	ldr	r2, [pc, #116]	; (8005100 <prvHeapInit+0xb0>)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800508e:	4b1c      	ldr	r3, [pc, #112]	; (8005100 <prvHeapInit+0xb0>)
 8005090:	2200      	movs	r2, #0
 8005092:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	4413      	add	r3, r2
 800509a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800509c:	2208      	movs	r2, #8
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	1a9b      	subs	r3, r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f023 0307 	bic.w	r3, r3, #7
 80050aa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4a15      	ldr	r2, [pc, #84]	; (8005104 <prvHeapInit+0xb4>)
 80050b0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80050b2:	4b14      	ldr	r3, [pc, #80]	; (8005104 <prvHeapInit+0xb4>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2200      	movs	r2, #0
 80050b8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80050ba:	4b12      	ldr	r3, [pc, #72]	; (8005104 <prvHeapInit+0xb4>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2200      	movs	r2, #0
 80050c0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	1ad2      	subs	r2, r2, r3
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80050d0:	4b0c      	ldr	r3, [pc, #48]	; (8005104 <prvHeapInit+0xb4>)
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	4a0a      	ldr	r2, [pc, #40]	; (8005108 <prvHeapInit+0xb8>)
 80050de:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	4a09      	ldr	r2, [pc, #36]	; (800510c <prvHeapInit+0xbc>)
 80050e6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80050e8:	4b09      	ldr	r3, [pc, #36]	; (8005110 <prvHeapInit+0xc0>)
 80050ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80050ee:	601a      	str	r2, [r3, #0]
}
 80050f0:	bf00      	nop
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	200001e0 	.word	0x200001e0
 8005100:	20012de0 	.word	0x20012de0
 8005104:	20012de8 	.word	0x20012de8
 8005108:	20012df0 	.word	0x20012df0
 800510c:	20012dec 	.word	0x20012dec
 8005110:	20012dfc 	.word	0x20012dfc

08005114 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800511c:	4b28      	ldr	r3, [pc, #160]	; (80051c0 <prvInsertBlockIntoFreeList+0xac>)
 800511e:	60fb      	str	r3, [r7, #12]
 8005120:	e002      	b.n	8005128 <prvInsertBlockIntoFreeList+0x14>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	60fb      	str	r3, [r7, #12]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	429a      	cmp	r2, r3
 8005130:	d8f7      	bhi.n	8005122 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	4413      	add	r3, r2
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	429a      	cmp	r2, r3
 8005142:	d108      	bne.n	8005156 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	441a      	add	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	441a      	add	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	429a      	cmp	r2, r3
 8005168:	d118      	bne.n	800519c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	4b15      	ldr	r3, [pc, #84]	; (80051c4 <prvInsertBlockIntoFreeList+0xb0>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d00d      	beq.n	8005192 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	441a      	add	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	601a      	str	r2, [r3, #0]
 8005190:	e008      	b.n	80051a4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005192:	4b0c      	ldr	r3, [pc, #48]	; (80051c4 <prvInsertBlockIntoFreeList+0xb0>)
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	601a      	str	r2, [r3, #0]
 800519a:	e003      	b.n	80051a4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d002      	beq.n	80051b2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80051b2:	bf00      	nop
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	20012de0 	.word	0x20012de0
 80051c4:	20012de8 	.word	0x20012de8

080051c8 <__errno>:
 80051c8:	4b01      	ldr	r3, [pc, #4]	; (80051d0 <__errno+0x8>)
 80051ca:	6818      	ldr	r0, [r3, #0]
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	20000014 	.word	0x20000014

080051d4 <__libc_init_array>:
 80051d4:	b570      	push	{r4, r5, r6, lr}
 80051d6:	4d0d      	ldr	r5, [pc, #52]	; (800520c <__libc_init_array+0x38>)
 80051d8:	4c0d      	ldr	r4, [pc, #52]	; (8005210 <__libc_init_array+0x3c>)
 80051da:	1b64      	subs	r4, r4, r5
 80051dc:	10a4      	asrs	r4, r4, #2
 80051de:	2600      	movs	r6, #0
 80051e0:	42a6      	cmp	r6, r4
 80051e2:	d109      	bne.n	80051f8 <__libc_init_array+0x24>
 80051e4:	4d0b      	ldr	r5, [pc, #44]	; (8005214 <__libc_init_array+0x40>)
 80051e6:	4c0c      	ldr	r4, [pc, #48]	; (8005218 <__libc_init_array+0x44>)
 80051e8:	f000 fcf4 	bl	8005bd4 <_init>
 80051ec:	1b64      	subs	r4, r4, r5
 80051ee:	10a4      	asrs	r4, r4, #2
 80051f0:	2600      	movs	r6, #0
 80051f2:	42a6      	cmp	r6, r4
 80051f4:	d105      	bne.n	8005202 <__libc_init_array+0x2e>
 80051f6:	bd70      	pop	{r4, r5, r6, pc}
 80051f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80051fc:	4798      	blx	r3
 80051fe:	3601      	adds	r6, #1
 8005200:	e7ee      	b.n	80051e0 <__libc_init_array+0xc>
 8005202:	f855 3b04 	ldr.w	r3, [r5], #4
 8005206:	4798      	blx	r3
 8005208:	3601      	adds	r6, #1
 800520a:	e7f2      	b.n	80051f2 <__libc_init_array+0x1e>
 800520c:	08005ce4 	.word	0x08005ce4
 8005210:	08005ce4 	.word	0x08005ce4
 8005214:	08005ce4 	.word	0x08005ce4
 8005218:	08005ce8 	.word	0x08005ce8

0800521c <memcpy>:
 800521c:	440a      	add	r2, r1
 800521e:	4291      	cmp	r1, r2
 8005220:	f100 33ff 	add.w	r3, r0, #4294967295
 8005224:	d100      	bne.n	8005228 <memcpy+0xc>
 8005226:	4770      	bx	lr
 8005228:	b510      	push	{r4, lr}
 800522a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800522e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005232:	4291      	cmp	r1, r2
 8005234:	d1f9      	bne.n	800522a <memcpy+0xe>
 8005236:	bd10      	pop	{r4, pc}

08005238 <memset>:
 8005238:	4402      	add	r2, r0
 800523a:	4603      	mov	r3, r0
 800523c:	4293      	cmp	r3, r2
 800523e:	d100      	bne.n	8005242 <memset+0xa>
 8005240:	4770      	bx	lr
 8005242:	f803 1b01 	strb.w	r1, [r3], #1
 8005246:	e7f9      	b.n	800523c <memset+0x4>

08005248 <_puts_r>:
 8005248:	b570      	push	{r4, r5, r6, lr}
 800524a:	460e      	mov	r6, r1
 800524c:	4605      	mov	r5, r0
 800524e:	b118      	cbz	r0, 8005258 <_puts_r+0x10>
 8005250:	6983      	ldr	r3, [r0, #24]
 8005252:	b90b      	cbnz	r3, 8005258 <_puts_r+0x10>
 8005254:	f000 fa48 	bl	80056e8 <__sinit>
 8005258:	69ab      	ldr	r3, [r5, #24]
 800525a:	68ac      	ldr	r4, [r5, #8]
 800525c:	b913      	cbnz	r3, 8005264 <_puts_r+0x1c>
 800525e:	4628      	mov	r0, r5
 8005260:	f000 fa42 	bl	80056e8 <__sinit>
 8005264:	4b2c      	ldr	r3, [pc, #176]	; (8005318 <_puts_r+0xd0>)
 8005266:	429c      	cmp	r4, r3
 8005268:	d120      	bne.n	80052ac <_puts_r+0x64>
 800526a:	686c      	ldr	r4, [r5, #4]
 800526c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800526e:	07db      	lsls	r3, r3, #31
 8005270:	d405      	bmi.n	800527e <_puts_r+0x36>
 8005272:	89a3      	ldrh	r3, [r4, #12]
 8005274:	0598      	lsls	r0, r3, #22
 8005276:	d402      	bmi.n	800527e <_puts_r+0x36>
 8005278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800527a:	f000 fad3 	bl	8005824 <__retarget_lock_acquire_recursive>
 800527e:	89a3      	ldrh	r3, [r4, #12]
 8005280:	0719      	lsls	r1, r3, #28
 8005282:	d51d      	bpl.n	80052c0 <_puts_r+0x78>
 8005284:	6923      	ldr	r3, [r4, #16]
 8005286:	b1db      	cbz	r3, 80052c0 <_puts_r+0x78>
 8005288:	3e01      	subs	r6, #1
 800528a:	68a3      	ldr	r3, [r4, #8]
 800528c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005290:	3b01      	subs	r3, #1
 8005292:	60a3      	str	r3, [r4, #8]
 8005294:	bb39      	cbnz	r1, 80052e6 <_puts_r+0x9e>
 8005296:	2b00      	cmp	r3, #0
 8005298:	da38      	bge.n	800530c <_puts_r+0xc4>
 800529a:	4622      	mov	r2, r4
 800529c:	210a      	movs	r1, #10
 800529e:	4628      	mov	r0, r5
 80052a0:	f000 f848 	bl	8005334 <__swbuf_r>
 80052a4:	3001      	adds	r0, #1
 80052a6:	d011      	beq.n	80052cc <_puts_r+0x84>
 80052a8:	250a      	movs	r5, #10
 80052aa:	e011      	b.n	80052d0 <_puts_r+0x88>
 80052ac:	4b1b      	ldr	r3, [pc, #108]	; (800531c <_puts_r+0xd4>)
 80052ae:	429c      	cmp	r4, r3
 80052b0:	d101      	bne.n	80052b6 <_puts_r+0x6e>
 80052b2:	68ac      	ldr	r4, [r5, #8]
 80052b4:	e7da      	b.n	800526c <_puts_r+0x24>
 80052b6:	4b1a      	ldr	r3, [pc, #104]	; (8005320 <_puts_r+0xd8>)
 80052b8:	429c      	cmp	r4, r3
 80052ba:	bf08      	it	eq
 80052bc:	68ec      	ldreq	r4, [r5, #12]
 80052be:	e7d5      	b.n	800526c <_puts_r+0x24>
 80052c0:	4621      	mov	r1, r4
 80052c2:	4628      	mov	r0, r5
 80052c4:	f000 f888 	bl	80053d8 <__swsetup_r>
 80052c8:	2800      	cmp	r0, #0
 80052ca:	d0dd      	beq.n	8005288 <_puts_r+0x40>
 80052cc:	f04f 35ff 	mov.w	r5, #4294967295
 80052d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052d2:	07da      	lsls	r2, r3, #31
 80052d4:	d405      	bmi.n	80052e2 <_puts_r+0x9a>
 80052d6:	89a3      	ldrh	r3, [r4, #12]
 80052d8:	059b      	lsls	r3, r3, #22
 80052da:	d402      	bmi.n	80052e2 <_puts_r+0x9a>
 80052dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052de:	f000 faa2 	bl	8005826 <__retarget_lock_release_recursive>
 80052e2:	4628      	mov	r0, r5
 80052e4:	bd70      	pop	{r4, r5, r6, pc}
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	da04      	bge.n	80052f4 <_puts_r+0xac>
 80052ea:	69a2      	ldr	r2, [r4, #24]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	dc06      	bgt.n	80052fe <_puts_r+0xb6>
 80052f0:	290a      	cmp	r1, #10
 80052f2:	d004      	beq.n	80052fe <_puts_r+0xb6>
 80052f4:	6823      	ldr	r3, [r4, #0]
 80052f6:	1c5a      	adds	r2, r3, #1
 80052f8:	6022      	str	r2, [r4, #0]
 80052fa:	7019      	strb	r1, [r3, #0]
 80052fc:	e7c5      	b.n	800528a <_puts_r+0x42>
 80052fe:	4622      	mov	r2, r4
 8005300:	4628      	mov	r0, r5
 8005302:	f000 f817 	bl	8005334 <__swbuf_r>
 8005306:	3001      	adds	r0, #1
 8005308:	d1bf      	bne.n	800528a <_puts_r+0x42>
 800530a:	e7df      	b.n	80052cc <_puts_r+0x84>
 800530c:	6823      	ldr	r3, [r4, #0]
 800530e:	250a      	movs	r5, #10
 8005310:	1c5a      	adds	r2, r3, #1
 8005312:	6022      	str	r2, [r4, #0]
 8005314:	701d      	strb	r5, [r3, #0]
 8005316:	e7db      	b.n	80052d0 <_puts_r+0x88>
 8005318:	08005c9c 	.word	0x08005c9c
 800531c:	08005cbc 	.word	0x08005cbc
 8005320:	08005c7c 	.word	0x08005c7c

08005324 <puts>:
 8005324:	4b02      	ldr	r3, [pc, #8]	; (8005330 <puts+0xc>)
 8005326:	4601      	mov	r1, r0
 8005328:	6818      	ldr	r0, [r3, #0]
 800532a:	f7ff bf8d 	b.w	8005248 <_puts_r>
 800532e:	bf00      	nop
 8005330:	20000014 	.word	0x20000014

08005334 <__swbuf_r>:
 8005334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005336:	460e      	mov	r6, r1
 8005338:	4614      	mov	r4, r2
 800533a:	4605      	mov	r5, r0
 800533c:	b118      	cbz	r0, 8005346 <__swbuf_r+0x12>
 800533e:	6983      	ldr	r3, [r0, #24]
 8005340:	b90b      	cbnz	r3, 8005346 <__swbuf_r+0x12>
 8005342:	f000 f9d1 	bl	80056e8 <__sinit>
 8005346:	4b21      	ldr	r3, [pc, #132]	; (80053cc <__swbuf_r+0x98>)
 8005348:	429c      	cmp	r4, r3
 800534a:	d12b      	bne.n	80053a4 <__swbuf_r+0x70>
 800534c:	686c      	ldr	r4, [r5, #4]
 800534e:	69a3      	ldr	r3, [r4, #24]
 8005350:	60a3      	str	r3, [r4, #8]
 8005352:	89a3      	ldrh	r3, [r4, #12]
 8005354:	071a      	lsls	r2, r3, #28
 8005356:	d52f      	bpl.n	80053b8 <__swbuf_r+0x84>
 8005358:	6923      	ldr	r3, [r4, #16]
 800535a:	b36b      	cbz	r3, 80053b8 <__swbuf_r+0x84>
 800535c:	6923      	ldr	r3, [r4, #16]
 800535e:	6820      	ldr	r0, [r4, #0]
 8005360:	1ac0      	subs	r0, r0, r3
 8005362:	6963      	ldr	r3, [r4, #20]
 8005364:	b2f6      	uxtb	r6, r6
 8005366:	4283      	cmp	r3, r0
 8005368:	4637      	mov	r7, r6
 800536a:	dc04      	bgt.n	8005376 <__swbuf_r+0x42>
 800536c:	4621      	mov	r1, r4
 800536e:	4628      	mov	r0, r5
 8005370:	f000 f926 	bl	80055c0 <_fflush_r>
 8005374:	bb30      	cbnz	r0, 80053c4 <__swbuf_r+0x90>
 8005376:	68a3      	ldr	r3, [r4, #8]
 8005378:	3b01      	subs	r3, #1
 800537a:	60a3      	str	r3, [r4, #8]
 800537c:	6823      	ldr	r3, [r4, #0]
 800537e:	1c5a      	adds	r2, r3, #1
 8005380:	6022      	str	r2, [r4, #0]
 8005382:	701e      	strb	r6, [r3, #0]
 8005384:	6963      	ldr	r3, [r4, #20]
 8005386:	3001      	adds	r0, #1
 8005388:	4283      	cmp	r3, r0
 800538a:	d004      	beq.n	8005396 <__swbuf_r+0x62>
 800538c:	89a3      	ldrh	r3, [r4, #12]
 800538e:	07db      	lsls	r3, r3, #31
 8005390:	d506      	bpl.n	80053a0 <__swbuf_r+0x6c>
 8005392:	2e0a      	cmp	r6, #10
 8005394:	d104      	bne.n	80053a0 <__swbuf_r+0x6c>
 8005396:	4621      	mov	r1, r4
 8005398:	4628      	mov	r0, r5
 800539a:	f000 f911 	bl	80055c0 <_fflush_r>
 800539e:	b988      	cbnz	r0, 80053c4 <__swbuf_r+0x90>
 80053a0:	4638      	mov	r0, r7
 80053a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053a4:	4b0a      	ldr	r3, [pc, #40]	; (80053d0 <__swbuf_r+0x9c>)
 80053a6:	429c      	cmp	r4, r3
 80053a8:	d101      	bne.n	80053ae <__swbuf_r+0x7a>
 80053aa:	68ac      	ldr	r4, [r5, #8]
 80053ac:	e7cf      	b.n	800534e <__swbuf_r+0x1a>
 80053ae:	4b09      	ldr	r3, [pc, #36]	; (80053d4 <__swbuf_r+0xa0>)
 80053b0:	429c      	cmp	r4, r3
 80053b2:	bf08      	it	eq
 80053b4:	68ec      	ldreq	r4, [r5, #12]
 80053b6:	e7ca      	b.n	800534e <__swbuf_r+0x1a>
 80053b8:	4621      	mov	r1, r4
 80053ba:	4628      	mov	r0, r5
 80053bc:	f000 f80c 	bl	80053d8 <__swsetup_r>
 80053c0:	2800      	cmp	r0, #0
 80053c2:	d0cb      	beq.n	800535c <__swbuf_r+0x28>
 80053c4:	f04f 37ff 	mov.w	r7, #4294967295
 80053c8:	e7ea      	b.n	80053a0 <__swbuf_r+0x6c>
 80053ca:	bf00      	nop
 80053cc:	08005c9c 	.word	0x08005c9c
 80053d0:	08005cbc 	.word	0x08005cbc
 80053d4:	08005c7c 	.word	0x08005c7c

080053d8 <__swsetup_r>:
 80053d8:	4b32      	ldr	r3, [pc, #200]	; (80054a4 <__swsetup_r+0xcc>)
 80053da:	b570      	push	{r4, r5, r6, lr}
 80053dc:	681d      	ldr	r5, [r3, #0]
 80053de:	4606      	mov	r6, r0
 80053e0:	460c      	mov	r4, r1
 80053e2:	b125      	cbz	r5, 80053ee <__swsetup_r+0x16>
 80053e4:	69ab      	ldr	r3, [r5, #24]
 80053e6:	b913      	cbnz	r3, 80053ee <__swsetup_r+0x16>
 80053e8:	4628      	mov	r0, r5
 80053ea:	f000 f97d 	bl	80056e8 <__sinit>
 80053ee:	4b2e      	ldr	r3, [pc, #184]	; (80054a8 <__swsetup_r+0xd0>)
 80053f0:	429c      	cmp	r4, r3
 80053f2:	d10f      	bne.n	8005414 <__swsetup_r+0x3c>
 80053f4:	686c      	ldr	r4, [r5, #4]
 80053f6:	89a3      	ldrh	r3, [r4, #12]
 80053f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053fc:	0719      	lsls	r1, r3, #28
 80053fe:	d42c      	bmi.n	800545a <__swsetup_r+0x82>
 8005400:	06dd      	lsls	r5, r3, #27
 8005402:	d411      	bmi.n	8005428 <__swsetup_r+0x50>
 8005404:	2309      	movs	r3, #9
 8005406:	6033      	str	r3, [r6, #0]
 8005408:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800540c:	81a3      	strh	r3, [r4, #12]
 800540e:	f04f 30ff 	mov.w	r0, #4294967295
 8005412:	e03e      	b.n	8005492 <__swsetup_r+0xba>
 8005414:	4b25      	ldr	r3, [pc, #148]	; (80054ac <__swsetup_r+0xd4>)
 8005416:	429c      	cmp	r4, r3
 8005418:	d101      	bne.n	800541e <__swsetup_r+0x46>
 800541a:	68ac      	ldr	r4, [r5, #8]
 800541c:	e7eb      	b.n	80053f6 <__swsetup_r+0x1e>
 800541e:	4b24      	ldr	r3, [pc, #144]	; (80054b0 <__swsetup_r+0xd8>)
 8005420:	429c      	cmp	r4, r3
 8005422:	bf08      	it	eq
 8005424:	68ec      	ldreq	r4, [r5, #12]
 8005426:	e7e6      	b.n	80053f6 <__swsetup_r+0x1e>
 8005428:	0758      	lsls	r0, r3, #29
 800542a:	d512      	bpl.n	8005452 <__swsetup_r+0x7a>
 800542c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800542e:	b141      	cbz	r1, 8005442 <__swsetup_r+0x6a>
 8005430:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005434:	4299      	cmp	r1, r3
 8005436:	d002      	beq.n	800543e <__swsetup_r+0x66>
 8005438:	4630      	mov	r0, r6
 800543a:	f000 fa59 	bl	80058f0 <_free_r>
 800543e:	2300      	movs	r3, #0
 8005440:	6363      	str	r3, [r4, #52]	; 0x34
 8005442:	89a3      	ldrh	r3, [r4, #12]
 8005444:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005448:	81a3      	strh	r3, [r4, #12]
 800544a:	2300      	movs	r3, #0
 800544c:	6063      	str	r3, [r4, #4]
 800544e:	6923      	ldr	r3, [r4, #16]
 8005450:	6023      	str	r3, [r4, #0]
 8005452:	89a3      	ldrh	r3, [r4, #12]
 8005454:	f043 0308 	orr.w	r3, r3, #8
 8005458:	81a3      	strh	r3, [r4, #12]
 800545a:	6923      	ldr	r3, [r4, #16]
 800545c:	b94b      	cbnz	r3, 8005472 <__swsetup_r+0x9a>
 800545e:	89a3      	ldrh	r3, [r4, #12]
 8005460:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005468:	d003      	beq.n	8005472 <__swsetup_r+0x9a>
 800546a:	4621      	mov	r1, r4
 800546c:	4630      	mov	r0, r6
 800546e:	f000 f9ff 	bl	8005870 <__smakebuf_r>
 8005472:	89a0      	ldrh	r0, [r4, #12]
 8005474:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005478:	f010 0301 	ands.w	r3, r0, #1
 800547c:	d00a      	beq.n	8005494 <__swsetup_r+0xbc>
 800547e:	2300      	movs	r3, #0
 8005480:	60a3      	str	r3, [r4, #8]
 8005482:	6963      	ldr	r3, [r4, #20]
 8005484:	425b      	negs	r3, r3
 8005486:	61a3      	str	r3, [r4, #24]
 8005488:	6923      	ldr	r3, [r4, #16]
 800548a:	b943      	cbnz	r3, 800549e <__swsetup_r+0xc6>
 800548c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005490:	d1ba      	bne.n	8005408 <__swsetup_r+0x30>
 8005492:	bd70      	pop	{r4, r5, r6, pc}
 8005494:	0781      	lsls	r1, r0, #30
 8005496:	bf58      	it	pl
 8005498:	6963      	ldrpl	r3, [r4, #20]
 800549a:	60a3      	str	r3, [r4, #8]
 800549c:	e7f4      	b.n	8005488 <__swsetup_r+0xb0>
 800549e:	2000      	movs	r0, #0
 80054a0:	e7f7      	b.n	8005492 <__swsetup_r+0xba>
 80054a2:	bf00      	nop
 80054a4:	20000014 	.word	0x20000014
 80054a8:	08005c9c 	.word	0x08005c9c
 80054ac:	08005cbc 	.word	0x08005cbc
 80054b0:	08005c7c 	.word	0x08005c7c

080054b4 <__sflush_r>:
 80054b4:	898a      	ldrh	r2, [r1, #12]
 80054b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054ba:	4605      	mov	r5, r0
 80054bc:	0710      	lsls	r0, r2, #28
 80054be:	460c      	mov	r4, r1
 80054c0:	d458      	bmi.n	8005574 <__sflush_r+0xc0>
 80054c2:	684b      	ldr	r3, [r1, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	dc05      	bgt.n	80054d4 <__sflush_r+0x20>
 80054c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	dc02      	bgt.n	80054d4 <__sflush_r+0x20>
 80054ce:	2000      	movs	r0, #0
 80054d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054d6:	2e00      	cmp	r6, #0
 80054d8:	d0f9      	beq.n	80054ce <__sflush_r+0x1a>
 80054da:	2300      	movs	r3, #0
 80054dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80054e0:	682f      	ldr	r7, [r5, #0]
 80054e2:	602b      	str	r3, [r5, #0]
 80054e4:	d032      	beq.n	800554c <__sflush_r+0x98>
 80054e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80054e8:	89a3      	ldrh	r3, [r4, #12]
 80054ea:	075a      	lsls	r2, r3, #29
 80054ec:	d505      	bpl.n	80054fa <__sflush_r+0x46>
 80054ee:	6863      	ldr	r3, [r4, #4]
 80054f0:	1ac0      	subs	r0, r0, r3
 80054f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80054f4:	b10b      	cbz	r3, 80054fa <__sflush_r+0x46>
 80054f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054f8:	1ac0      	subs	r0, r0, r3
 80054fa:	2300      	movs	r3, #0
 80054fc:	4602      	mov	r2, r0
 80054fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005500:	6a21      	ldr	r1, [r4, #32]
 8005502:	4628      	mov	r0, r5
 8005504:	47b0      	blx	r6
 8005506:	1c43      	adds	r3, r0, #1
 8005508:	89a3      	ldrh	r3, [r4, #12]
 800550a:	d106      	bne.n	800551a <__sflush_r+0x66>
 800550c:	6829      	ldr	r1, [r5, #0]
 800550e:	291d      	cmp	r1, #29
 8005510:	d82c      	bhi.n	800556c <__sflush_r+0xb8>
 8005512:	4a2a      	ldr	r2, [pc, #168]	; (80055bc <__sflush_r+0x108>)
 8005514:	40ca      	lsrs	r2, r1
 8005516:	07d6      	lsls	r6, r2, #31
 8005518:	d528      	bpl.n	800556c <__sflush_r+0xb8>
 800551a:	2200      	movs	r2, #0
 800551c:	6062      	str	r2, [r4, #4]
 800551e:	04d9      	lsls	r1, r3, #19
 8005520:	6922      	ldr	r2, [r4, #16]
 8005522:	6022      	str	r2, [r4, #0]
 8005524:	d504      	bpl.n	8005530 <__sflush_r+0x7c>
 8005526:	1c42      	adds	r2, r0, #1
 8005528:	d101      	bne.n	800552e <__sflush_r+0x7a>
 800552a:	682b      	ldr	r3, [r5, #0]
 800552c:	b903      	cbnz	r3, 8005530 <__sflush_r+0x7c>
 800552e:	6560      	str	r0, [r4, #84]	; 0x54
 8005530:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005532:	602f      	str	r7, [r5, #0]
 8005534:	2900      	cmp	r1, #0
 8005536:	d0ca      	beq.n	80054ce <__sflush_r+0x1a>
 8005538:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800553c:	4299      	cmp	r1, r3
 800553e:	d002      	beq.n	8005546 <__sflush_r+0x92>
 8005540:	4628      	mov	r0, r5
 8005542:	f000 f9d5 	bl	80058f0 <_free_r>
 8005546:	2000      	movs	r0, #0
 8005548:	6360      	str	r0, [r4, #52]	; 0x34
 800554a:	e7c1      	b.n	80054d0 <__sflush_r+0x1c>
 800554c:	6a21      	ldr	r1, [r4, #32]
 800554e:	2301      	movs	r3, #1
 8005550:	4628      	mov	r0, r5
 8005552:	47b0      	blx	r6
 8005554:	1c41      	adds	r1, r0, #1
 8005556:	d1c7      	bne.n	80054e8 <__sflush_r+0x34>
 8005558:	682b      	ldr	r3, [r5, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d0c4      	beq.n	80054e8 <__sflush_r+0x34>
 800555e:	2b1d      	cmp	r3, #29
 8005560:	d001      	beq.n	8005566 <__sflush_r+0xb2>
 8005562:	2b16      	cmp	r3, #22
 8005564:	d101      	bne.n	800556a <__sflush_r+0xb6>
 8005566:	602f      	str	r7, [r5, #0]
 8005568:	e7b1      	b.n	80054ce <__sflush_r+0x1a>
 800556a:	89a3      	ldrh	r3, [r4, #12]
 800556c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005570:	81a3      	strh	r3, [r4, #12]
 8005572:	e7ad      	b.n	80054d0 <__sflush_r+0x1c>
 8005574:	690f      	ldr	r7, [r1, #16]
 8005576:	2f00      	cmp	r7, #0
 8005578:	d0a9      	beq.n	80054ce <__sflush_r+0x1a>
 800557a:	0793      	lsls	r3, r2, #30
 800557c:	680e      	ldr	r6, [r1, #0]
 800557e:	bf08      	it	eq
 8005580:	694b      	ldreq	r3, [r1, #20]
 8005582:	600f      	str	r7, [r1, #0]
 8005584:	bf18      	it	ne
 8005586:	2300      	movne	r3, #0
 8005588:	eba6 0807 	sub.w	r8, r6, r7
 800558c:	608b      	str	r3, [r1, #8]
 800558e:	f1b8 0f00 	cmp.w	r8, #0
 8005592:	dd9c      	ble.n	80054ce <__sflush_r+0x1a>
 8005594:	6a21      	ldr	r1, [r4, #32]
 8005596:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005598:	4643      	mov	r3, r8
 800559a:	463a      	mov	r2, r7
 800559c:	4628      	mov	r0, r5
 800559e:	47b0      	blx	r6
 80055a0:	2800      	cmp	r0, #0
 80055a2:	dc06      	bgt.n	80055b2 <__sflush_r+0xfe>
 80055a4:	89a3      	ldrh	r3, [r4, #12]
 80055a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055aa:	81a3      	strh	r3, [r4, #12]
 80055ac:	f04f 30ff 	mov.w	r0, #4294967295
 80055b0:	e78e      	b.n	80054d0 <__sflush_r+0x1c>
 80055b2:	4407      	add	r7, r0
 80055b4:	eba8 0800 	sub.w	r8, r8, r0
 80055b8:	e7e9      	b.n	800558e <__sflush_r+0xda>
 80055ba:	bf00      	nop
 80055bc:	20400001 	.word	0x20400001

080055c0 <_fflush_r>:
 80055c0:	b538      	push	{r3, r4, r5, lr}
 80055c2:	690b      	ldr	r3, [r1, #16]
 80055c4:	4605      	mov	r5, r0
 80055c6:	460c      	mov	r4, r1
 80055c8:	b913      	cbnz	r3, 80055d0 <_fflush_r+0x10>
 80055ca:	2500      	movs	r5, #0
 80055cc:	4628      	mov	r0, r5
 80055ce:	bd38      	pop	{r3, r4, r5, pc}
 80055d0:	b118      	cbz	r0, 80055da <_fflush_r+0x1a>
 80055d2:	6983      	ldr	r3, [r0, #24]
 80055d4:	b90b      	cbnz	r3, 80055da <_fflush_r+0x1a>
 80055d6:	f000 f887 	bl	80056e8 <__sinit>
 80055da:	4b14      	ldr	r3, [pc, #80]	; (800562c <_fflush_r+0x6c>)
 80055dc:	429c      	cmp	r4, r3
 80055de:	d11b      	bne.n	8005618 <_fflush_r+0x58>
 80055e0:	686c      	ldr	r4, [r5, #4]
 80055e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d0ef      	beq.n	80055ca <_fflush_r+0xa>
 80055ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80055ec:	07d0      	lsls	r0, r2, #31
 80055ee:	d404      	bmi.n	80055fa <_fflush_r+0x3a>
 80055f0:	0599      	lsls	r1, r3, #22
 80055f2:	d402      	bmi.n	80055fa <_fflush_r+0x3a>
 80055f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055f6:	f000 f915 	bl	8005824 <__retarget_lock_acquire_recursive>
 80055fa:	4628      	mov	r0, r5
 80055fc:	4621      	mov	r1, r4
 80055fe:	f7ff ff59 	bl	80054b4 <__sflush_r>
 8005602:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005604:	07da      	lsls	r2, r3, #31
 8005606:	4605      	mov	r5, r0
 8005608:	d4e0      	bmi.n	80055cc <_fflush_r+0xc>
 800560a:	89a3      	ldrh	r3, [r4, #12]
 800560c:	059b      	lsls	r3, r3, #22
 800560e:	d4dd      	bmi.n	80055cc <_fflush_r+0xc>
 8005610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005612:	f000 f908 	bl	8005826 <__retarget_lock_release_recursive>
 8005616:	e7d9      	b.n	80055cc <_fflush_r+0xc>
 8005618:	4b05      	ldr	r3, [pc, #20]	; (8005630 <_fflush_r+0x70>)
 800561a:	429c      	cmp	r4, r3
 800561c:	d101      	bne.n	8005622 <_fflush_r+0x62>
 800561e:	68ac      	ldr	r4, [r5, #8]
 8005620:	e7df      	b.n	80055e2 <_fflush_r+0x22>
 8005622:	4b04      	ldr	r3, [pc, #16]	; (8005634 <_fflush_r+0x74>)
 8005624:	429c      	cmp	r4, r3
 8005626:	bf08      	it	eq
 8005628:	68ec      	ldreq	r4, [r5, #12]
 800562a:	e7da      	b.n	80055e2 <_fflush_r+0x22>
 800562c:	08005c9c 	.word	0x08005c9c
 8005630:	08005cbc 	.word	0x08005cbc
 8005634:	08005c7c 	.word	0x08005c7c

08005638 <std>:
 8005638:	2300      	movs	r3, #0
 800563a:	b510      	push	{r4, lr}
 800563c:	4604      	mov	r4, r0
 800563e:	e9c0 3300 	strd	r3, r3, [r0]
 8005642:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005646:	6083      	str	r3, [r0, #8]
 8005648:	8181      	strh	r1, [r0, #12]
 800564a:	6643      	str	r3, [r0, #100]	; 0x64
 800564c:	81c2      	strh	r2, [r0, #14]
 800564e:	6183      	str	r3, [r0, #24]
 8005650:	4619      	mov	r1, r3
 8005652:	2208      	movs	r2, #8
 8005654:	305c      	adds	r0, #92	; 0x5c
 8005656:	f7ff fdef 	bl	8005238 <memset>
 800565a:	4b05      	ldr	r3, [pc, #20]	; (8005670 <std+0x38>)
 800565c:	6263      	str	r3, [r4, #36]	; 0x24
 800565e:	4b05      	ldr	r3, [pc, #20]	; (8005674 <std+0x3c>)
 8005660:	62a3      	str	r3, [r4, #40]	; 0x28
 8005662:	4b05      	ldr	r3, [pc, #20]	; (8005678 <std+0x40>)
 8005664:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005666:	4b05      	ldr	r3, [pc, #20]	; (800567c <std+0x44>)
 8005668:	6224      	str	r4, [r4, #32]
 800566a:	6323      	str	r3, [r4, #48]	; 0x30
 800566c:	bd10      	pop	{r4, pc}
 800566e:	bf00      	nop
 8005670:	08005a65 	.word	0x08005a65
 8005674:	08005a87 	.word	0x08005a87
 8005678:	08005abf 	.word	0x08005abf
 800567c:	08005ae3 	.word	0x08005ae3

08005680 <_cleanup_r>:
 8005680:	4901      	ldr	r1, [pc, #4]	; (8005688 <_cleanup_r+0x8>)
 8005682:	f000 b8af 	b.w	80057e4 <_fwalk_reent>
 8005686:	bf00      	nop
 8005688:	080055c1 	.word	0x080055c1

0800568c <__sfmoreglue>:
 800568c:	b570      	push	{r4, r5, r6, lr}
 800568e:	1e4a      	subs	r2, r1, #1
 8005690:	2568      	movs	r5, #104	; 0x68
 8005692:	4355      	muls	r5, r2
 8005694:	460e      	mov	r6, r1
 8005696:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800569a:	f000 f979 	bl	8005990 <_malloc_r>
 800569e:	4604      	mov	r4, r0
 80056a0:	b140      	cbz	r0, 80056b4 <__sfmoreglue+0x28>
 80056a2:	2100      	movs	r1, #0
 80056a4:	e9c0 1600 	strd	r1, r6, [r0]
 80056a8:	300c      	adds	r0, #12
 80056aa:	60a0      	str	r0, [r4, #8]
 80056ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80056b0:	f7ff fdc2 	bl	8005238 <memset>
 80056b4:	4620      	mov	r0, r4
 80056b6:	bd70      	pop	{r4, r5, r6, pc}

080056b8 <__sfp_lock_acquire>:
 80056b8:	4801      	ldr	r0, [pc, #4]	; (80056c0 <__sfp_lock_acquire+0x8>)
 80056ba:	f000 b8b3 	b.w	8005824 <__retarget_lock_acquire_recursive>
 80056be:	bf00      	nop
 80056c0:	20012eec 	.word	0x20012eec

080056c4 <__sfp_lock_release>:
 80056c4:	4801      	ldr	r0, [pc, #4]	; (80056cc <__sfp_lock_release+0x8>)
 80056c6:	f000 b8ae 	b.w	8005826 <__retarget_lock_release_recursive>
 80056ca:	bf00      	nop
 80056cc:	20012eec 	.word	0x20012eec

080056d0 <__sinit_lock_acquire>:
 80056d0:	4801      	ldr	r0, [pc, #4]	; (80056d8 <__sinit_lock_acquire+0x8>)
 80056d2:	f000 b8a7 	b.w	8005824 <__retarget_lock_acquire_recursive>
 80056d6:	bf00      	nop
 80056d8:	20012ee7 	.word	0x20012ee7

080056dc <__sinit_lock_release>:
 80056dc:	4801      	ldr	r0, [pc, #4]	; (80056e4 <__sinit_lock_release+0x8>)
 80056de:	f000 b8a2 	b.w	8005826 <__retarget_lock_release_recursive>
 80056e2:	bf00      	nop
 80056e4:	20012ee7 	.word	0x20012ee7

080056e8 <__sinit>:
 80056e8:	b510      	push	{r4, lr}
 80056ea:	4604      	mov	r4, r0
 80056ec:	f7ff fff0 	bl	80056d0 <__sinit_lock_acquire>
 80056f0:	69a3      	ldr	r3, [r4, #24]
 80056f2:	b11b      	cbz	r3, 80056fc <__sinit+0x14>
 80056f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056f8:	f7ff bff0 	b.w	80056dc <__sinit_lock_release>
 80056fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005700:	6523      	str	r3, [r4, #80]	; 0x50
 8005702:	4b13      	ldr	r3, [pc, #76]	; (8005750 <__sinit+0x68>)
 8005704:	4a13      	ldr	r2, [pc, #76]	; (8005754 <__sinit+0x6c>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	62a2      	str	r2, [r4, #40]	; 0x28
 800570a:	42a3      	cmp	r3, r4
 800570c:	bf04      	itt	eq
 800570e:	2301      	moveq	r3, #1
 8005710:	61a3      	streq	r3, [r4, #24]
 8005712:	4620      	mov	r0, r4
 8005714:	f000 f820 	bl	8005758 <__sfp>
 8005718:	6060      	str	r0, [r4, #4]
 800571a:	4620      	mov	r0, r4
 800571c:	f000 f81c 	bl	8005758 <__sfp>
 8005720:	60a0      	str	r0, [r4, #8]
 8005722:	4620      	mov	r0, r4
 8005724:	f000 f818 	bl	8005758 <__sfp>
 8005728:	2200      	movs	r2, #0
 800572a:	60e0      	str	r0, [r4, #12]
 800572c:	2104      	movs	r1, #4
 800572e:	6860      	ldr	r0, [r4, #4]
 8005730:	f7ff ff82 	bl	8005638 <std>
 8005734:	68a0      	ldr	r0, [r4, #8]
 8005736:	2201      	movs	r2, #1
 8005738:	2109      	movs	r1, #9
 800573a:	f7ff ff7d 	bl	8005638 <std>
 800573e:	68e0      	ldr	r0, [r4, #12]
 8005740:	2202      	movs	r2, #2
 8005742:	2112      	movs	r1, #18
 8005744:	f7ff ff78 	bl	8005638 <std>
 8005748:	2301      	movs	r3, #1
 800574a:	61a3      	str	r3, [r4, #24]
 800574c:	e7d2      	b.n	80056f4 <__sinit+0xc>
 800574e:	bf00      	nop
 8005750:	08005c78 	.word	0x08005c78
 8005754:	08005681 	.word	0x08005681

08005758 <__sfp>:
 8005758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800575a:	4607      	mov	r7, r0
 800575c:	f7ff ffac 	bl	80056b8 <__sfp_lock_acquire>
 8005760:	4b1e      	ldr	r3, [pc, #120]	; (80057dc <__sfp+0x84>)
 8005762:	681e      	ldr	r6, [r3, #0]
 8005764:	69b3      	ldr	r3, [r6, #24]
 8005766:	b913      	cbnz	r3, 800576e <__sfp+0x16>
 8005768:	4630      	mov	r0, r6
 800576a:	f7ff ffbd 	bl	80056e8 <__sinit>
 800576e:	3648      	adds	r6, #72	; 0x48
 8005770:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005774:	3b01      	subs	r3, #1
 8005776:	d503      	bpl.n	8005780 <__sfp+0x28>
 8005778:	6833      	ldr	r3, [r6, #0]
 800577a:	b30b      	cbz	r3, 80057c0 <__sfp+0x68>
 800577c:	6836      	ldr	r6, [r6, #0]
 800577e:	e7f7      	b.n	8005770 <__sfp+0x18>
 8005780:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005784:	b9d5      	cbnz	r5, 80057bc <__sfp+0x64>
 8005786:	4b16      	ldr	r3, [pc, #88]	; (80057e0 <__sfp+0x88>)
 8005788:	60e3      	str	r3, [r4, #12]
 800578a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800578e:	6665      	str	r5, [r4, #100]	; 0x64
 8005790:	f000 f847 	bl	8005822 <__retarget_lock_init_recursive>
 8005794:	f7ff ff96 	bl	80056c4 <__sfp_lock_release>
 8005798:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800579c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80057a0:	6025      	str	r5, [r4, #0]
 80057a2:	61a5      	str	r5, [r4, #24]
 80057a4:	2208      	movs	r2, #8
 80057a6:	4629      	mov	r1, r5
 80057a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80057ac:	f7ff fd44 	bl	8005238 <memset>
 80057b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80057b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80057b8:	4620      	mov	r0, r4
 80057ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057bc:	3468      	adds	r4, #104	; 0x68
 80057be:	e7d9      	b.n	8005774 <__sfp+0x1c>
 80057c0:	2104      	movs	r1, #4
 80057c2:	4638      	mov	r0, r7
 80057c4:	f7ff ff62 	bl	800568c <__sfmoreglue>
 80057c8:	4604      	mov	r4, r0
 80057ca:	6030      	str	r0, [r6, #0]
 80057cc:	2800      	cmp	r0, #0
 80057ce:	d1d5      	bne.n	800577c <__sfp+0x24>
 80057d0:	f7ff ff78 	bl	80056c4 <__sfp_lock_release>
 80057d4:	230c      	movs	r3, #12
 80057d6:	603b      	str	r3, [r7, #0]
 80057d8:	e7ee      	b.n	80057b8 <__sfp+0x60>
 80057da:	bf00      	nop
 80057dc:	08005c78 	.word	0x08005c78
 80057e0:	ffff0001 	.word	0xffff0001

080057e4 <_fwalk_reent>:
 80057e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057e8:	4606      	mov	r6, r0
 80057ea:	4688      	mov	r8, r1
 80057ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80057f0:	2700      	movs	r7, #0
 80057f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057f6:	f1b9 0901 	subs.w	r9, r9, #1
 80057fa:	d505      	bpl.n	8005808 <_fwalk_reent+0x24>
 80057fc:	6824      	ldr	r4, [r4, #0]
 80057fe:	2c00      	cmp	r4, #0
 8005800:	d1f7      	bne.n	80057f2 <_fwalk_reent+0xe>
 8005802:	4638      	mov	r0, r7
 8005804:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005808:	89ab      	ldrh	r3, [r5, #12]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d907      	bls.n	800581e <_fwalk_reent+0x3a>
 800580e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005812:	3301      	adds	r3, #1
 8005814:	d003      	beq.n	800581e <_fwalk_reent+0x3a>
 8005816:	4629      	mov	r1, r5
 8005818:	4630      	mov	r0, r6
 800581a:	47c0      	blx	r8
 800581c:	4307      	orrs	r7, r0
 800581e:	3568      	adds	r5, #104	; 0x68
 8005820:	e7e9      	b.n	80057f6 <_fwalk_reent+0x12>

08005822 <__retarget_lock_init_recursive>:
 8005822:	4770      	bx	lr

08005824 <__retarget_lock_acquire_recursive>:
 8005824:	4770      	bx	lr

08005826 <__retarget_lock_release_recursive>:
 8005826:	4770      	bx	lr

08005828 <__swhatbuf_r>:
 8005828:	b570      	push	{r4, r5, r6, lr}
 800582a:	460e      	mov	r6, r1
 800582c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005830:	2900      	cmp	r1, #0
 8005832:	b096      	sub	sp, #88	; 0x58
 8005834:	4614      	mov	r4, r2
 8005836:	461d      	mov	r5, r3
 8005838:	da07      	bge.n	800584a <__swhatbuf_r+0x22>
 800583a:	2300      	movs	r3, #0
 800583c:	602b      	str	r3, [r5, #0]
 800583e:	89b3      	ldrh	r3, [r6, #12]
 8005840:	061a      	lsls	r2, r3, #24
 8005842:	d410      	bmi.n	8005866 <__swhatbuf_r+0x3e>
 8005844:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005848:	e00e      	b.n	8005868 <__swhatbuf_r+0x40>
 800584a:	466a      	mov	r2, sp
 800584c:	f000 f970 	bl	8005b30 <_fstat_r>
 8005850:	2800      	cmp	r0, #0
 8005852:	dbf2      	blt.n	800583a <__swhatbuf_r+0x12>
 8005854:	9a01      	ldr	r2, [sp, #4]
 8005856:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800585a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800585e:	425a      	negs	r2, r3
 8005860:	415a      	adcs	r2, r3
 8005862:	602a      	str	r2, [r5, #0]
 8005864:	e7ee      	b.n	8005844 <__swhatbuf_r+0x1c>
 8005866:	2340      	movs	r3, #64	; 0x40
 8005868:	2000      	movs	r0, #0
 800586a:	6023      	str	r3, [r4, #0]
 800586c:	b016      	add	sp, #88	; 0x58
 800586e:	bd70      	pop	{r4, r5, r6, pc}

08005870 <__smakebuf_r>:
 8005870:	898b      	ldrh	r3, [r1, #12]
 8005872:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005874:	079d      	lsls	r5, r3, #30
 8005876:	4606      	mov	r6, r0
 8005878:	460c      	mov	r4, r1
 800587a:	d507      	bpl.n	800588c <__smakebuf_r+0x1c>
 800587c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005880:	6023      	str	r3, [r4, #0]
 8005882:	6123      	str	r3, [r4, #16]
 8005884:	2301      	movs	r3, #1
 8005886:	6163      	str	r3, [r4, #20]
 8005888:	b002      	add	sp, #8
 800588a:	bd70      	pop	{r4, r5, r6, pc}
 800588c:	ab01      	add	r3, sp, #4
 800588e:	466a      	mov	r2, sp
 8005890:	f7ff ffca 	bl	8005828 <__swhatbuf_r>
 8005894:	9900      	ldr	r1, [sp, #0]
 8005896:	4605      	mov	r5, r0
 8005898:	4630      	mov	r0, r6
 800589a:	f000 f879 	bl	8005990 <_malloc_r>
 800589e:	b948      	cbnz	r0, 80058b4 <__smakebuf_r+0x44>
 80058a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058a4:	059a      	lsls	r2, r3, #22
 80058a6:	d4ef      	bmi.n	8005888 <__smakebuf_r+0x18>
 80058a8:	f023 0303 	bic.w	r3, r3, #3
 80058ac:	f043 0302 	orr.w	r3, r3, #2
 80058b0:	81a3      	strh	r3, [r4, #12]
 80058b2:	e7e3      	b.n	800587c <__smakebuf_r+0xc>
 80058b4:	4b0d      	ldr	r3, [pc, #52]	; (80058ec <__smakebuf_r+0x7c>)
 80058b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80058b8:	89a3      	ldrh	r3, [r4, #12]
 80058ba:	6020      	str	r0, [r4, #0]
 80058bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058c0:	81a3      	strh	r3, [r4, #12]
 80058c2:	9b00      	ldr	r3, [sp, #0]
 80058c4:	6163      	str	r3, [r4, #20]
 80058c6:	9b01      	ldr	r3, [sp, #4]
 80058c8:	6120      	str	r0, [r4, #16]
 80058ca:	b15b      	cbz	r3, 80058e4 <__smakebuf_r+0x74>
 80058cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058d0:	4630      	mov	r0, r6
 80058d2:	f000 f93f 	bl	8005b54 <_isatty_r>
 80058d6:	b128      	cbz	r0, 80058e4 <__smakebuf_r+0x74>
 80058d8:	89a3      	ldrh	r3, [r4, #12]
 80058da:	f023 0303 	bic.w	r3, r3, #3
 80058de:	f043 0301 	orr.w	r3, r3, #1
 80058e2:	81a3      	strh	r3, [r4, #12]
 80058e4:	89a0      	ldrh	r0, [r4, #12]
 80058e6:	4305      	orrs	r5, r0
 80058e8:	81a5      	strh	r5, [r4, #12]
 80058ea:	e7cd      	b.n	8005888 <__smakebuf_r+0x18>
 80058ec:	08005681 	.word	0x08005681

080058f0 <_free_r>:
 80058f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058f2:	2900      	cmp	r1, #0
 80058f4:	d048      	beq.n	8005988 <_free_r+0x98>
 80058f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058fa:	9001      	str	r0, [sp, #4]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f1a1 0404 	sub.w	r4, r1, #4
 8005902:	bfb8      	it	lt
 8005904:	18e4      	addlt	r4, r4, r3
 8005906:	f000 f947 	bl	8005b98 <__malloc_lock>
 800590a:	4a20      	ldr	r2, [pc, #128]	; (800598c <_free_r+0x9c>)
 800590c:	9801      	ldr	r0, [sp, #4]
 800590e:	6813      	ldr	r3, [r2, #0]
 8005910:	4615      	mov	r5, r2
 8005912:	b933      	cbnz	r3, 8005922 <_free_r+0x32>
 8005914:	6063      	str	r3, [r4, #4]
 8005916:	6014      	str	r4, [r2, #0]
 8005918:	b003      	add	sp, #12
 800591a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800591e:	f000 b941 	b.w	8005ba4 <__malloc_unlock>
 8005922:	42a3      	cmp	r3, r4
 8005924:	d90b      	bls.n	800593e <_free_r+0x4e>
 8005926:	6821      	ldr	r1, [r4, #0]
 8005928:	1862      	adds	r2, r4, r1
 800592a:	4293      	cmp	r3, r2
 800592c:	bf04      	itt	eq
 800592e:	681a      	ldreq	r2, [r3, #0]
 8005930:	685b      	ldreq	r3, [r3, #4]
 8005932:	6063      	str	r3, [r4, #4]
 8005934:	bf04      	itt	eq
 8005936:	1852      	addeq	r2, r2, r1
 8005938:	6022      	streq	r2, [r4, #0]
 800593a:	602c      	str	r4, [r5, #0]
 800593c:	e7ec      	b.n	8005918 <_free_r+0x28>
 800593e:	461a      	mov	r2, r3
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	b10b      	cbz	r3, 8005948 <_free_r+0x58>
 8005944:	42a3      	cmp	r3, r4
 8005946:	d9fa      	bls.n	800593e <_free_r+0x4e>
 8005948:	6811      	ldr	r1, [r2, #0]
 800594a:	1855      	adds	r5, r2, r1
 800594c:	42a5      	cmp	r5, r4
 800594e:	d10b      	bne.n	8005968 <_free_r+0x78>
 8005950:	6824      	ldr	r4, [r4, #0]
 8005952:	4421      	add	r1, r4
 8005954:	1854      	adds	r4, r2, r1
 8005956:	42a3      	cmp	r3, r4
 8005958:	6011      	str	r1, [r2, #0]
 800595a:	d1dd      	bne.n	8005918 <_free_r+0x28>
 800595c:	681c      	ldr	r4, [r3, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	6053      	str	r3, [r2, #4]
 8005962:	4421      	add	r1, r4
 8005964:	6011      	str	r1, [r2, #0]
 8005966:	e7d7      	b.n	8005918 <_free_r+0x28>
 8005968:	d902      	bls.n	8005970 <_free_r+0x80>
 800596a:	230c      	movs	r3, #12
 800596c:	6003      	str	r3, [r0, #0]
 800596e:	e7d3      	b.n	8005918 <_free_r+0x28>
 8005970:	6825      	ldr	r5, [r4, #0]
 8005972:	1961      	adds	r1, r4, r5
 8005974:	428b      	cmp	r3, r1
 8005976:	bf04      	itt	eq
 8005978:	6819      	ldreq	r1, [r3, #0]
 800597a:	685b      	ldreq	r3, [r3, #4]
 800597c:	6063      	str	r3, [r4, #4]
 800597e:	bf04      	itt	eq
 8005980:	1949      	addeq	r1, r1, r5
 8005982:	6021      	streq	r1, [r4, #0]
 8005984:	6054      	str	r4, [r2, #4]
 8005986:	e7c7      	b.n	8005918 <_free_r+0x28>
 8005988:	b003      	add	sp, #12
 800598a:	bd30      	pop	{r4, r5, pc}
 800598c:	20012e00 	.word	0x20012e00

08005990 <_malloc_r>:
 8005990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005992:	1ccd      	adds	r5, r1, #3
 8005994:	f025 0503 	bic.w	r5, r5, #3
 8005998:	3508      	adds	r5, #8
 800599a:	2d0c      	cmp	r5, #12
 800599c:	bf38      	it	cc
 800599e:	250c      	movcc	r5, #12
 80059a0:	2d00      	cmp	r5, #0
 80059a2:	4606      	mov	r6, r0
 80059a4:	db01      	blt.n	80059aa <_malloc_r+0x1a>
 80059a6:	42a9      	cmp	r1, r5
 80059a8:	d903      	bls.n	80059b2 <_malloc_r+0x22>
 80059aa:	230c      	movs	r3, #12
 80059ac:	6033      	str	r3, [r6, #0]
 80059ae:	2000      	movs	r0, #0
 80059b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059b2:	f000 f8f1 	bl	8005b98 <__malloc_lock>
 80059b6:	4921      	ldr	r1, [pc, #132]	; (8005a3c <_malloc_r+0xac>)
 80059b8:	680a      	ldr	r2, [r1, #0]
 80059ba:	4614      	mov	r4, r2
 80059bc:	b99c      	cbnz	r4, 80059e6 <_malloc_r+0x56>
 80059be:	4f20      	ldr	r7, [pc, #128]	; (8005a40 <_malloc_r+0xb0>)
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	b923      	cbnz	r3, 80059ce <_malloc_r+0x3e>
 80059c4:	4621      	mov	r1, r4
 80059c6:	4630      	mov	r0, r6
 80059c8:	f000 f83c 	bl	8005a44 <_sbrk_r>
 80059cc:	6038      	str	r0, [r7, #0]
 80059ce:	4629      	mov	r1, r5
 80059d0:	4630      	mov	r0, r6
 80059d2:	f000 f837 	bl	8005a44 <_sbrk_r>
 80059d6:	1c43      	adds	r3, r0, #1
 80059d8:	d123      	bne.n	8005a22 <_malloc_r+0x92>
 80059da:	230c      	movs	r3, #12
 80059dc:	6033      	str	r3, [r6, #0]
 80059de:	4630      	mov	r0, r6
 80059e0:	f000 f8e0 	bl	8005ba4 <__malloc_unlock>
 80059e4:	e7e3      	b.n	80059ae <_malloc_r+0x1e>
 80059e6:	6823      	ldr	r3, [r4, #0]
 80059e8:	1b5b      	subs	r3, r3, r5
 80059ea:	d417      	bmi.n	8005a1c <_malloc_r+0x8c>
 80059ec:	2b0b      	cmp	r3, #11
 80059ee:	d903      	bls.n	80059f8 <_malloc_r+0x68>
 80059f0:	6023      	str	r3, [r4, #0]
 80059f2:	441c      	add	r4, r3
 80059f4:	6025      	str	r5, [r4, #0]
 80059f6:	e004      	b.n	8005a02 <_malloc_r+0x72>
 80059f8:	6863      	ldr	r3, [r4, #4]
 80059fa:	42a2      	cmp	r2, r4
 80059fc:	bf0c      	ite	eq
 80059fe:	600b      	streq	r3, [r1, #0]
 8005a00:	6053      	strne	r3, [r2, #4]
 8005a02:	4630      	mov	r0, r6
 8005a04:	f000 f8ce 	bl	8005ba4 <__malloc_unlock>
 8005a08:	f104 000b 	add.w	r0, r4, #11
 8005a0c:	1d23      	adds	r3, r4, #4
 8005a0e:	f020 0007 	bic.w	r0, r0, #7
 8005a12:	1ac2      	subs	r2, r0, r3
 8005a14:	d0cc      	beq.n	80059b0 <_malloc_r+0x20>
 8005a16:	1a1b      	subs	r3, r3, r0
 8005a18:	50a3      	str	r3, [r4, r2]
 8005a1a:	e7c9      	b.n	80059b0 <_malloc_r+0x20>
 8005a1c:	4622      	mov	r2, r4
 8005a1e:	6864      	ldr	r4, [r4, #4]
 8005a20:	e7cc      	b.n	80059bc <_malloc_r+0x2c>
 8005a22:	1cc4      	adds	r4, r0, #3
 8005a24:	f024 0403 	bic.w	r4, r4, #3
 8005a28:	42a0      	cmp	r0, r4
 8005a2a:	d0e3      	beq.n	80059f4 <_malloc_r+0x64>
 8005a2c:	1a21      	subs	r1, r4, r0
 8005a2e:	4630      	mov	r0, r6
 8005a30:	f000 f808 	bl	8005a44 <_sbrk_r>
 8005a34:	3001      	adds	r0, #1
 8005a36:	d1dd      	bne.n	80059f4 <_malloc_r+0x64>
 8005a38:	e7cf      	b.n	80059da <_malloc_r+0x4a>
 8005a3a:	bf00      	nop
 8005a3c:	20012e00 	.word	0x20012e00
 8005a40:	20012e04 	.word	0x20012e04

08005a44 <_sbrk_r>:
 8005a44:	b538      	push	{r3, r4, r5, lr}
 8005a46:	4d06      	ldr	r5, [pc, #24]	; (8005a60 <_sbrk_r+0x1c>)
 8005a48:	2300      	movs	r3, #0
 8005a4a:	4604      	mov	r4, r0
 8005a4c:	4608      	mov	r0, r1
 8005a4e:	602b      	str	r3, [r5, #0]
 8005a50:	f7fb f950 	bl	8000cf4 <_sbrk>
 8005a54:	1c43      	adds	r3, r0, #1
 8005a56:	d102      	bne.n	8005a5e <_sbrk_r+0x1a>
 8005a58:	682b      	ldr	r3, [r5, #0]
 8005a5a:	b103      	cbz	r3, 8005a5e <_sbrk_r+0x1a>
 8005a5c:	6023      	str	r3, [r4, #0]
 8005a5e:	bd38      	pop	{r3, r4, r5, pc}
 8005a60:	20012ef0 	.word	0x20012ef0

08005a64 <__sread>:
 8005a64:	b510      	push	{r4, lr}
 8005a66:	460c      	mov	r4, r1
 8005a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a6c:	f000 f8a0 	bl	8005bb0 <_read_r>
 8005a70:	2800      	cmp	r0, #0
 8005a72:	bfab      	itete	ge
 8005a74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a76:	89a3      	ldrhlt	r3, [r4, #12]
 8005a78:	181b      	addge	r3, r3, r0
 8005a7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a7e:	bfac      	ite	ge
 8005a80:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a82:	81a3      	strhlt	r3, [r4, #12]
 8005a84:	bd10      	pop	{r4, pc}

08005a86 <__swrite>:
 8005a86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a8a:	461f      	mov	r7, r3
 8005a8c:	898b      	ldrh	r3, [r1, #12]
 8005a8e:	05db      	lsls	r3, r3, #23
 8005a90:	4605      	mov	r5, r0
 8005a92:	460c      	mov	r4, r1
 8005a94:	4616      	mov	r6, r2
 8005a96:	d505      	bpl.n	8005aa4 <__swrite+0x1e>
 8005a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f000 f868 	bl	8005b74 <_lseek_r>
 8005aa4:	89a3      	ldrh	r3, [r4, #12]
 8005aa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005aaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005aae:	81a3      	strh	r3, [r4, #12]
 8005ab0:	4632      	mov	r2, r6
 8005ab2:	463b      	mov	r3, r7
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005aba:	f000 b817 	b.w	8005aec <_write_r>

08005abe <__sseek>:
 8005abe:	b510      	push	{r4, lr}
 8005ac0:	460c      	mov	r4, r1
 8005ac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ac6:	f000 f855 	bl	8005b74 <_lseek_r>
 8005aca:	1c43      	adds	r3, r0, #1
 8005acc:	89a3      	ldrh	r3, [r4, #12]
 8005ace:	bf15      	itete	ne
 8005ad0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ad2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ad6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005ada:	81a3      	strheq	r3, [r4, #12]
 8005adc:	bf18      	it	ne
 8005ade:	81a3      	strhne	r3, [r4, #12]
 8005ae0:	bd10      	pop	{r4, pc}

08005ae2 <__sclose>:
 8005ae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ae6:	f000 b813 	b.w	8005b10 <_close_r>
	...

08005aec <_write_r>:
 8005aec:	b538      	push	{r3, r4, r5, lr}
 8005aee:	4d07      	ldr	r5, [pc, #28]	; (8005b0c <_write_r+0x20>)
 8005af0:	4604      	mov	r4, r0
 8005af2:	4608      	mov	r0, r1
 8005af4:	4611      	mov	r1, r2
 8005af6:	2200      	movs	r2, #0
 8005af8:	602a      	str	r2, [r5, #0]
 8005afa:	461a      	mov	r2, r3
 8005afc:	f7fb f8a9 	bl	8000c52 <_write>
 8005b00:	1c43      	adds	r3, r0, #1
 8005b02:	d102      	bne.n	8005b0a <_write_r+0x1e>
 8005b04:	682b      	ldr	r3, [r5, #0]
 8005b06:	b103      	cbz	r3, 8005b0a <_write_r+0x1e>
 8005b08:	6023      	str	r3, [r4, #0]
 8005b0a:	bd38      	pop	{r3, r4, r5, pc}
 8005b0c:	20012ef0 	.word	0x20012ef0

08005b10 <_close_r>:
 8005b10:	b538      	push	{r3, r4, r5, lr}
 8005b12:	4d06      	ldr	r5, [pc, #24]	; (8005b2c <_close_r+0x1c>)
 8005b14:	2300      	movs	r3, #0
 8005b16:	4604      	mov	r4, r0
 8005b18:	4608      	mov	r0, r1
 8005b1a:	602b      	str	r3, [r5, #0]
 8005b1c:	f7fb f8b5 	bl	8000c8a <_close>
 8005b20:	1c43      	adds	r3, r0, #1
 8005b22:	d102      	bne.n	8005b2a <_close_r+0x1a>
 8005b24:	682b      	ldr	r3, [r5, #0]
 8005b26:	b103      	cbz	r3, 8005b2a <_close_r+0x1a>
 8005b28:	6023      	str	r3, [r4, #0]
 8005b2a:	bd38      	pop	{r3, r4, r5, pc}
 8005b2c:	20012ef0 	.word	0x20012ef0

08005b30 <_fstat_r>:
 8005b30:	b538      	push	{r3, r4, r5, lr}
 8005b32:	4d07      	ldr	r5, [pc, #28]	; (8005b50 <_fstat_r+0x20>)
 8005b34:	2300      	movs	r3, #0
 8005b36:	4604      	mov	r4, r0
 8005b38:	4608      	mov	r0, r1
 8005b3a:	4611      	mov	r1, r2
 8005b3c:	602b      	str	r3, [r5, #0]
 8005b3e:	f7fb f8b0 	bl	8000ca2 <_fstat>
 8005b42:	1c43      	adds	r3, r0, #1
 8005b44:	d102      	bne.n	8005b4c <_fstat_r+0x1c>
 8005b46:	682b      	ldr	r3, [r5, #0]
 8005b48:	b103      	cbz	r3, 8005b4c <_fstat_r+0x1c>
 8005b4a:	6023      	str	r3, [r4, #0]
 8005b4c:	bd38      	pop	{r3, r4, r5, pc}
 8005b4e:	bf00      	nop
 8005b50:	20012ef0 	.word	0x20012ef0

08005b54 <_isatty_r>:
 8005b54:	b538      	push	{r3, r4, r5, lr}
 8005b56:	4d06      	ldr	r5, [pc, #24]	; (8005b70 <_isatty_r+0x1c>)
 8005b58:	2300      	movs	r3, #0
 8005b5a:	4604      	mov	r4, r0
 8005b5c:	4608      	mov	r0, r1
 8005b5e:	602b      	str	r3, [r5, #0]
 8005b60:	f7fb f8af 	bl	8000cc2 <_isatty>
 8005b64:	1c43      	adds	r3, r0, #1
 8005b66:	d102      	bne.n	8005b6e <_isatty_r+0x1a>
 8005b68:	682b      	ldr	r3, [r5, #0]
 8005b6a:	b103      	cbz	r3, 8005b6e <_isatty_r+0x1a>
 8005b6c:	6023      	str	r3, [r4, #0]
 8005b6e:	bd38      	pop	{r3, r4, r5, pc}
 8005b70:	20012ef0 	.word	0x20012ef0

08005b74 <_lseek_r>:
 8005b74:	b538      	push	{r3, r4, r5, lr}
 8005b76:	4d07      	ldr	r5, [pc, #28]	; (8005b94 <_lseek_r+0x20>)
 8005b78:	4604      	mov	r4, r0
 8005b7a:	4608      	mov	r0, r1
 8005b7c:	4611      	mov	r1, r2
 8005b7e:	2200      	movs	r2, #0
 8005b80:	602a      	str	r2, [r5, #0]
 8005b82:	461a      	mov	r2, r3
 8005b84:	f7fb f8a8 	bl	8000cd8 <_lseek>
 8005b88:	1c43      	adds	r3, r0, #1
 8005b8a:	d102      	bne.n	8005b92 <_lseek_r+0x1e>
 8005b8c:	682b      	ldr	r3, [r5, #0]
 8005b8e:	b103      	cbz	r3, 8005b92 <_lseek_r+0x1e>
 8005b90:	6023      	str	r3, [r4, #0]
 8005b92:	bd38      	pop	{r3, r4, r5, pc}
 8005b94:	20012ef0 	.word	0x20012ef0

08005b98 <__malloc_lock>:
 8005b98:	4801      	ldr	r0, [pc, #4]	; (8005ba0 <__malloc_lock+0x8>)
 8005b9a:	f7ff be43 	b.w	8005824 <__retarget_lock_acquire_recursive>
 8005b9e:	bf00      	nop
 8005ba0:	20012ee8 	.word	0x20012ee8

08005ba4 <__malloc_unlock>:
 8005ba4:	4801      	ldr	r0, [pc, #4]	; (8005bac <__malloc_unlock+0x8>)
 8005ba6:	f7ff be3e 	b.w	8005826 <__retarget_lock_release_recursive>
 8005baa:	bf00      	nop
 8005bac:	20012ee8 	.word	0x20012ee8

08005bb0 <_read_r>:
 8005bb0:	b538      	push	{r3, r4, r5, lr}
 8005bb2:	4d07      	ldr	r5, [pc, #28]	; (8005bd0 <_read_r+0x20>)
 8005bb4:	4604      	mov	r4, r0
 8005bb6:	4608      	mov	r0, r1
 8005bb8:	4611      	mov	r1, r2
 8005bba:	2200      	movs	r2, #0
 8005bbc:	602a      	str	r2, [r5, #0]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	f7fb f82a 	bl	8000c18 <_read>
 8005bc4:	1c43      	adds	r3, r0, #1
 8005bc6:	d102      	bne.n	8005bce <_read_r+0x1e>
 8005bc8:	682b      	ldr	r3, [r5, #0]
 8005bca:	b103      	cbz	r3, 8005bce <_read_r+0x1e>
 8005bcc:	6023      	str	r3, [r4, #0]
 8005bce:	bd38      	pop	{r3, r4, r5, pc}
 8005bd0:	20012ef0 	.word	0x20012ef0

08005bd4 <_init>:
 8005bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bd6:	bf00      	nop
 8005bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bda:	bc08      	pop	{r3}
 8005bdc:	469e      	mov	lr, r3
 8005bde:	4770      	bx	lr

08005be0 <_fini>:
 8005be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005be2:	bf00      	nop
 8005be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005be6:	bc08      	pop	{r3}
 8005be8:	469e      	mov	lr, r3
 8005bea:	4770      	bx	lr
