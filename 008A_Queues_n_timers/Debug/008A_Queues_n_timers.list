
008A_Queues_n_timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08007fe0  08007fe0  00017fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800842c  0800842c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800842c  0800842c  0001842c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008434  08008434  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008434  08008434  00018434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008438  08008438  00018438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800843c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          00012f20  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012fac  20012fac  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ea18  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bb1  00000000  00000000  0003ead4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b0  00000000  00000000  00042688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001248  00000000  00000000  00043a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024991  00000000  00000000  00044c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018afb  00000000  00000000  00069611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da4ae  00000000  00000000  0008210c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015c5ba  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000551c  00000000  00000000  0015c610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007fc8 	.word	0x08007fc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	08007fc8 	.word	0x08007fc8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <led_effect_stop>:
 */
#include"main.h"


void led_effect_stop()
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af02      	add	r7, sp, #8
	for(int i=0;i<4;i++)
 800059e:	2300      	movs	r3, #0
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	e00e      	b.n	80005c2 <led_effect_stop+0x2a>
		xTimerStop(led_timer_handle[i],portMAX_DELAY);
 80005a4:	4a0b      	ldr	r2, [pc, #44]	; (80005d4 <led_effect_stop+0x3c>)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005ac:	f04f 33ff 	mov.w	r3, #4294967295
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	2300      	movs	r3, #0
 80005b4:	2200      	movs	r2, #0
 80005b6:	2103      	movs	r1, #3
 80005b8:	f006 f95a 	bl	8006870 <xTimerGenericCommand>
	for(int i=0;i<4;i++)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	3301      	adds	r3, #1
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2b03      	cmp	r3, #3
 80005c6:	dded      	ble.n	80005a4 <led_effect_stop+0xc>
}
 80005c8:	bf00      	nop
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20012f00 	.word	0x20012f00

080005d8 <led_effect>:

void led_effect(int n)
{
 80005d8:	b590      	push	{r4, r7, lr}
 80005da:	b085      	sub	sp, #20
 80005dc:	af02      	add	r7, sp, #8
 80005de:	6078      	str	r0, [r7, #4]
	led_effect_stop();
 80005e0:	f7ff ffda 	bl	8000598 <led_effect_stop>
	xTimerStart(led_timer_handle[n-1],portMAX_DELAY);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	3b01      	subs	r3, #1
 80005e8:	4a08      	ldr	r2, [pc, #32]	; (800060c <led_effect+0x34>)
 80005ea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80005ee:	f005 fa41 	bl	8005a74 <xTaskGetTickCount>
 80005f2:	4602      	mov	r2, r0
 80005f4:	f04f 33ff 	mov.w	r3, #4294967295
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	2300      	movs	r3, #0
 80005fc:	2101      	movs	r1, #1
 80005fe:	4620      	mov	r0, r4
 8000600:	f006 f936 	bl	8006870 <xTimerGenericCommand>
}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	bd90      	pop	{r4, r7, pc}
 800060c:	20012f00 	.word	0x20012f00

08000610 <LED_effect1>:

void LED_effect1(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	static int flag=1;

	(flag^=1) ? turn_off_all_leds() : turn_on_all_leds();
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <LED_effect1+0x28>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f083 0301 	eor.w	r3, r3, #1
 800061c:	4a06      	ldr	r2, [pc, #24]	; (8000638 <LED_effect1+0x28>)
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <LED_effect1+0x28>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d002      	beq.n	800062e <LED_effect1+0x1e>
 8000628:	f000 f86c 	bl	8000704 <turn_off_all_leds>

}
 800062c:	e001      	b.n	8000632 <LED_effect1+0x22>
	(flag^=1) ? turn_off_all_leds() : turn_on_all_leds();
 800062e:	f000 f84b 	bl	80006c8 <turn_on_all_leds>
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000000 	.word	0x20000000

0800063c <LED_effect2>:

void LED_effect2(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	static int flag=1;
	(flag^=1) ? turn_on_even_leds() : turn_on_odd_leds();
 8000640:	4b08      	ldr	r3, [pc, #32]	; (8000664 <LED_effect2+0x28>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f083 0301 	eor.w	r3, r3, #1
 8000648:	4a06      	ldr	r2, [pc, #24]	; (8000664 <LED_effect2+0x28>)
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b05      	ldr	r3, [pc, #20]	; (8000664 <LED_effect2+0x28>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d002      	beq.n	800065a <LED_effect2+0x1e>
 8000654:	f000 f892 	bl	800077c <turn_on_even_leds>

}
 8000658:	e001      	b.n	800065e <LED_effect2+0x22>
	(flag^=1) ? turn_on_even_leds() : turn_on_odd_leds();
 800065a:	f000 f871 	bl	8000740 <turn_on_odd_leds>
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000004 	.word	0x20000004

08000668 <LED_effect3>:

void LED_effect3(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control( 0x1 << (i++ % 4) );
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <LED_effect3+0x2c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	1c5a      	adds	r2, r3, #1
 8000672:	4908      	ldr	r1, [pc, #32]	; (8000694 <LED_effect3+0x2c>)
 8000674:	600a      	str	r2, [r1, #0]
 8000676:	425a      	negs	r2, r3
 8000678:	f003 0303 	and.w	r3, r3, #3
 800067c:	f002 0203 	and.w	r2, r2, #3
 8000680:	bf58      	it	pl
 8000682:	4253      	negpl	r3, r2
 8000684:	2201      	movs	r2, #1
 8000686:	fa02 f303 	lsl.w	r3, r2, r3
 800068a:	4618      	mov	r0, r3
 800068c:	f000 f894 	bl	80007b8 <LED_control>
}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	200000a8 	.word	0x200000a8

08000698 <LED_effect4>:

void LED_effect4(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control( 0x08 >> (i++ % 4) );
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <LED_effect4+0x2c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	1c5a      	adds	r2, r3, #1
 80006a2:	4908      	ldr	r1, [pc, #32]	; (80006c4 <LED_effect4+0x2c>)
 80006a4:	600a      	str	r2, [r1, #0]
 80006a6:	425a      	negs	r2, r3
 80006a8:	f003 0303 	and.w	r3, r3, #3
 80006ac:	f002 0203 	and.w	r2, r2, #3
 80006b0:	bf58      	it	pl
 80006b2:	4253      	negpl	r3, r2
 80006b4:	2208      	movs	r2, #8
 80006b6:	fa42 f303 	asr.w	r3, r2, r3
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 f87c 	bl	80007b8 <LED_control>
}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	200000ac 	.word	0x200000ac

080006c8 <turn_on_all_leds>:

void turn_on_all_leds(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, LED1, GPIO_PIN_SET);
 80006cc:	2201      	movs	r2, #1
 80006ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d2:	480b      	ldr	r0, [pc, #44]	; (8000700 <turn_on_all_leds+0x38>)
 80006d4:	f001 fdda 	bl	800228c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED2, GPIO_PIN_SET);
 80006d8:	2201      	movs	r2, #1
 80006da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006de:	4808      	ldr	r0, [pc, #32]	; (8000700 <turn_on_all_leds+0x38>)
 80006e0:	f001 fdd4 	bl	800228c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED3, GPIO_PIN_SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <turn_on_all_leds+0x38>)
 80006ec:	f001 fdce 	bl	800228c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_SET);
 80006f0:	2201      	movs	r2, #1
 80006f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006f6:	4802      	ldr	r0, [pc, #8]	; (8000700 <turn_on_all_leds+0x38>)
 80006f8:	f001 fdc8 	bl	800228c <HAL_GPIO_WritePin>
}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40020c00 	.word	0x40020c00

08000704 <turn_off_all_leds>:

void turn_off_all_leds(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, LED1, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800070e:	480b      	ldr	r0, [pc, #44]	; (800073c <turn_off_all_leds+0x38>)
 8000710:	f001 fdbc 	bl	800228c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED2, GPIO_PIN_RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800071a:	4808      	ldr	r0, [pc, #32]	; (800073c <turn_off_all_leds+0x38>)
 800071c:	f001 fdb6 	bl	800228c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED3, GPIO_PIN_RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <turn_off_all_leds+0x38>)
 8000728:	f001 fdb0 	bl	800228c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000732:	4802      	ldr	r0, [pc, #8]	; (800073c <turn_off_all_leds+0x38>)
 8000734:	f001 fdaa 	bl	800228c <HAL_GPIO_WritePin>
}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40020c00 	.word	0x40020c00

08000740 <turn_on_odd_leds>:


void turn_on_odd_leds(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, LED1, GPIO_PIN_SET);
 8000744:	2201      	movs	r2, #1
 8000746:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800074a:	480b      	ldr	r0, [pc, #44]	; (8000778 <turn_on_odd_leds+0x38>)
 800074c:	f001 fd9e 	bl	800228c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED2, GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000756:	4808      	ldr	r0, [pc, #32]	; (8000778 <turn_on_odd_leds+0x38>)
 8000758:	f001 fd98 	bl	800228c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED3, GPIO_PIN_SET);
 800075c:	2201      	movs	r2, #1
 800075e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000762:	4805      	ldr	r0, [pc, #20]	; (8000778 <turn_on_odd_leds+0x38>)
 8000764:	f001 fd92 	bl	800228c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800076e:	4802      	ldr	r0, [pc, #8]	; (8000778 <turn_on_odd_leds+0x38>)
 8000770:	f001 fd8c 	bl	800228c <HAL_GPIO_WritePin>
}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40020c00 	.word	0x40020c00

0800077c <turn_on_even_leds>:

void turn_on_even_leds(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, LED1, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000786:	480b      	ldr	r0, [pc, #44]	; (80007b4 <turn_on_even_leds+0x38>)
 8000788:	f001 fd80 	bl	800228c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED2, GPIO_PIN_SET);
 800078c:	2201      	movs	r2, #1
 800078e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000792:	4808      	ldr	r0, [pc, #32]	; (80007b4 <turn_on_even_leds+0x38>)
 8000794:	f001 fd7a 	bl	800228c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED3, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <turn_on_even_leds+0x38>)
 80007a0:	f001 fd74 	bl	800228c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007aa:	4802      	ldr	r0, [pc, #8]	; (80007b4 <turn_on_even_leds+0x38>)
 80007ac:	f001 fd6e 	bl	800228c <HAL_GPIO_WritePin>
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40020c00 	.word	0x40020c00

080007b8 <LED_control>:

void LED_control( int value )
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  for(int i = 0 ; i < 4 ; i++)
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	e014      	b.n	80007f0 <LED_control+0x38>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, (LED1 << i), ((value >> i)& 0x1));
 80007c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	fa02 f303 	lsl.w	r3, r2, r3
 80007d0:	b299      	uxth	r1, r3
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	fa42 f303 	asr.w	r3, r2, r3
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	f003 0301 	and.w	r3, r3, #1
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	461a      	mov	r2, r3
 80007e4:	4806      	ldr	r0, [pc, #24]	; (8000800 <LED_control+0x48>)
 80007e6:	f001 fd51 	bl	800228c <HAL_GPIO_WritePin>
  for(int i = 0 ; i < 4 ; i++)
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	3301      	adds	r3, #1
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	2b03      	cmp	r3, #3
 80007f4:	dde7      	ble.n	80007c6 <LED_control+0xe>
}
 80007f6:	bf00      	nop
 80007f8:	bf00      	nop
 80007fa:	3710      	adds	r7, #16
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40020c00 	.word	0x40020c00

08000804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08c      	sub	sp, #48	; 0x30
 8000808:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080a:	f001 f9ed 	bl	8001be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080e:	f000 f8ff 	bl	8000a10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000812:	f000 f9b9 	bl	8000b88 <MX_GPIO_Init>
  MX_RTC_Init();
 8000816:	f000 f967 	bl	8000ae8 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800081a:	f000 f98b 	bl	8000b34 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  status= xTaskCreate(menu_handler, "menue-task", 250, NULL, 2, &menue_handle);
 800081e:	4b66      	ldr	r3, [pc, #408]	; (80009b8 <main+0x1b4>)
 8000820:	9301      	str	r3, [sp, #4]
 8000822:	2302      	movs	r3, #2
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	2300      	movs	r3, #0
 8000828:	22fa      	movs	r2, #250	; 0xfa
 800082a:	4964      	ldr	r1, [pc, #400]	; (80009bc <main+0x1b8>)
 800082c:	4864      	ldr	r0, [pc, #400]	; (80009c0 <main+0x1bc>)
 800082e:	f004 fedf 	bl	80055f0 <xTaskCreate>
 8000832:	6238      	str	r0, [r7, #32]

  configASSERT(status==pdPASS);
 8000834:	6a3b      	ldr	r3, [r7, #32]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d00a      	beq.n	8000850 <main+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800083a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800083e:	f383 8811 	msr	BASEPRI, r3
 8000842:	f3bf 8f6f 	isb	sy
 8000846:	f3bf 8f4f 	dsb	sy
 800084a:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800084c:	bf00      	nop
 800084e:	e7fe      	b.n	800084e <main+0x4a>

  status= xTaskCreate(cmd_handler, "cmd-task", 250, NULL, 2, &cmd_handle);
 8000850:	4b5c      	ldr	r3, [pc, #368]	; (80009c4 <main+0x1c0>)
 8000852:	9301      	str	r3, [sp, #4]
 8000854:	2302      	movs	r3, #2
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	2300      	movs	r3, #0
 800085a:	22fa      	movs	r2, #250	; 0xfa
 800085c:	495a      	ldr	r1, [pc, #360]	; (80009c8 <main+0x1c4>)
 800085e:	485b      	ldr	r0, [pc, #364]	; (80009cc <main+0x1c8>)
 8000860:	f004 fec6 	bl	80055f0 <xTaskCreate>
 8000864:	6238      	str	r0, [r7, #32]

  configASSERT(status==pdPASS);
 8000866:	6a3b      	ldr	r3, [r7, #32]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d00a      	beq.n	8000882 <main+0x7e>
        __asm volatile
 800086c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000870:	f383 8811 	msr	BASEPRI, r3
 8000874:	f3bf 8f6f 	isb	sy
 8000878:	f3bf 8f4f 	dsb	sy
 800087c:	61bb      	str	r3, [r7, #24]
    }
 800087e:	bf00      	nop
 8000880:	e7fe      	b.n	8000880 <main+0x7c>

  status= xTaskCreate(led_handler, "led-task", 250, NULL, 2, &led_handle);
 8000882:	4b53      	ldr	r3, [pc, #332]	; (80009d0 <main+0x1cc>)
 8000884:	9301      	str	r3, [sp, #4]
 8000886:	2302      	movs	r3, #2
 8000888:	9300      	str	r3, [sp, #0]
 800088a:	2300      	movs	r3, #0
 800088c:	22fa      	movs	r2, #250	; 0xfa
 800088e:	4951      	ldr	r1, [pc, #324]	; (80009d4 <main+0x1d0>)
 8000890:	4851      	ldr	r0, [pc, #324]	; (80009d8 <main+0x1d4>)
 8000892:	f004 fead 	bl	80055f0 <xTaskCreate>
 8000896:	6238      	str	r0, [r7, #32]

  configASSERT(status==pdPASS);
 8000898:	6a3b      	ldr	r3, [r7, #32]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d00a      	beq.n	80008b4 <main+0xb0>
        __asm volatile
 800089e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008a2:	f383 8811 	msr	BASEPRI, r3
 80008a6:	f3bf 8f6f 	isb	sy
 80008aa:	f3bf 8f4f 	dsb	sy
 80008ae:	617b      	str	r3, [r7, #20]
    }
 80008b0:	bf00      	nop
 80008b2:	e7fe      	b.n	80008b2 <main+0xae>

  status= xTaskCreate(rtc_handler, "rtc-task", 250, NULL, 2, &rtc_handle);
 80008b4:	4b49      	ldr	r3, [pc, #292]	; (80009dc <main+0x1d8>)
 80008b6:	9301      	str	r3, [sp, #4]
 80008b8:	2302      	movs	r3, #2
 80008ba:	9300      	str	r3, [sp, #0]
 80008bc:	2300      	movs	r3, #0
 80008be:	22fa      	movs	r2, #250	; 0xfa
 80008c0:	4947      	ldr	r1, [pc, #284]	; (80009e0 <main+0x1dc>)
 80008c2:	4848      	ldr	r0, [pc, #288]	; (80009e4 <main+0x1e0>)
 80008c4:	f004 fe94 	bl	80055f0 <xTaskCreate>
 80008c8:	6238      	str	r0, [r7, #32]

  configASSERT(status==pdPASS);
 80008ca:	6a3b      	ldr	r3, [r7, #32]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d00a      	beq.n	80008e6 <main+0xe2>
        __asm volatile
 80008d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008d4:	f383 8811 	msr	BASEPRI, r3
 80008d8:	f3bf 8f6f 	isb	sy
 80008dc:	f3bf 8f4f 	dsb	sy
 80008e0:	613b      	str	r3, [r7, #16]
    }
 80008e2:	bf00      	nop
 80008e4:	e7fe      	b.n	80008e4 <main+0xe0>

  status= xTaskCreate(print_handler, "print-task", 250, NULL, 2, &print_handle);
 80008e6:	4b40      	ldr	r3, [pc, #256]	; (80009e8 <main+0x1e4>)
 80008e8:	9301      	str	r3, [sp, #4]
 80008ea:	2302      	movs	r3, #2
 80008ec:	9300      	str	r3, [sp, #0]
 80008ee:	2300      	movs	r3, #0
 80008f0:	22fa      	movs	r2, #250	; 0xfa
 80008f2:	493e      	ldr	r1, [pc, #248]	; (80009ec <main+0x1e8>)
 80008f4:	483e      	ldr	r0, [pc, #248]	; (80009f0 <main+0x1ec>)
 80008f6:	f004 fe7b 	bl	80055f0 <xTaskCreate>
 80008fa:	6238      	str	r0, [r7, #32]

  configASSERT(status==pdPASS);
 80008fc:	6a3b      	ldr	r3, [r7, #32]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d00a      	beq.n	8000918 <main+0x114>
        __asm volatile
 8000902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000906:	f383 8811 	msr	BASEPRI, r3
 800090a:	f3bf 8f6f 	isb	sy
 800090e:	f3bf 8f4f 	dsb	sy
 8000912:	60fb      	str	r3, [r7, #12]
    }
 8000914:	bf00      	nop
 8000916:	e7fe      	b.n	8000916 <main+0x112>

  q_data= xQueueCreate(10, sizeof(char));
 8000918:	2200      	movs	r2, #0
 800091a:	2101      	movs	r1, #1
 800091c:	200a      	movs	r0, #10
 800091e:	f004 f91b 	bl	8004b58 <xQueueGenericCreate>
 8000922:	4603      	mov	r3, r0
 8000924:	4a33      	ldr	r2, [pc, #204]	; (80009f4 <main+0x1f0>)
 8000926:	6013      	str	r3, [r2, #0]

  configASSERT(q_data != NULL);
 8000928:	4b32      	ldr	r3, [pc, #200]	; (80009f4 <main+0x1f0>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d10a      	bne.n	8000946 <main+0x142>
        __asm volatile
 8000930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000934:	f383 8811 	msr	BASEPRI, r3
 8000938:	f3bf 8f6f 	isb	sy
 800093c:	f3bf 8f4f 	dsb	sy
 8000940:	60bb      	str	r3, [r7, #8]
    }
 8000942:	bf00      	nop
 8000944:	e7fe      	b.n	8000944 <main+0x140>

  q_print= xQueueCreate(10, sizeof(size_t ));
 8000946:	2200      	movs	r2, #0
 8000948:	2104      	movs	r1, #4
 800094a:	200a      	movs	r0, #10
 800094c:	f004 f904 	bl	8004b58 <xQueueGenericCreate>
 8000950:	4603      	mov	r3, r0
 8000952:	4a29      	ldr	r2, [pc, #164]	; (80009f8 <main+0x1f4>)
 8000954:	6013      	str	r3, [r2, #0]

  configASSERT(q_print != NULL);
 8000956:	4b28      	ldr	r3, [pc, #160]	; (80009f8 <main+0x1f4>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d10a      	bne.n	8000974 <main+0x170>
        __asm volatile
 800095e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000962:	f383 8811 	msr	BASEPRI, r3
 8000966:	f3bf 8f6f 	isb	sy
 800096a:	f3bf 8f4f 	dsb	sy
 800096e:	607b      	str	r3, [r7, #4]
    }
 8000970:	bf00      	nop
 8000972:	e7fe      	b.n	8000972 <main+0x16e>


  for(int i=0; i<4; i++)
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
 8000978:	e013      	b.n	80009a2 <main+0x19e>
	  led_timer_handle[i]=xTimerCreate("led_timer", pdMS_TO_TICKS(500), pdTRUE, (void*)(i+1), led_effect_callback);
 800097a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097c:	3301      	adds	r3, #1
 800097e:	461a      	mov	r2, r3
 8000980:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <main+0x1f8>)
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	4613      	mov	r3, r2
 8000986:	2201      	movs	r2, #1
 8000988:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800098c:	481c      	ldr	r0, [pc, #112]	; (8000a00 <main+0x1fc>)
 800098e:	f005 ff13 	bl	80067b8 <xTimerCreate>
 8000992:	4602      	mov	r2, r0
 8000994:	491b      	ldr	r1, [pc, #108]	; (8000a04 <main+0x200>)
 8000996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<4; i++)
 800099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099e:	3301      	adds	r3, #1
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	2b03      	cmp	r3, #3
 80009a6:	dde8      	ble.n	800097a <main+0x176>


  HAL_UART_Receive_IT(&huart2,(uint8_t*)&user_data, 1);
 80009a8:	2201      	movs	r2, #1
 80009aa:	4917      	ldr	r1, [pc, #92]	; (8000a08 <main+0x204>)
 80009ac:	4817      	ldr	r0, [pc, #92]	; (8000a0c <main+0x208>)
 80009ae:	f003 f8ce 	bl	8003b4e <HAL_UART_Receive_IT>

  vTaskStartScheduler();
 80009b2:	f004 ff63 	bl	800587c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <main+0x1b2>
 80009b8:	20012eb8 	.word	0x20012eb8
 80009bc:	08007fe0 	.word	0x08007fe0
 80009c0:	080013d5 	.word	0x080013d5
 80009c4:	20012e7c 	.word	0x20012e7c
 80009c8:	08007fec 	.word	0x08007fec
 80009cc:	080014bd 	.word	0x080014bd
 80009d0:	20012e8c 	.word	0x20012e8c
 80009d4:	08007ff8 	.word	0x08007ff8
 80009d8:	08001629 	.word	0x08001629
 80009dc:	20012e88 	.word	0x20012e88
 80009e0:	08008004 	.word	0x08008004
 80009e4:	080017a1 	.word	0x080017a1
 80009e8:	20012e80 	.word	0x20012e80
 80009ec:	08008010 	.word	0x08008010
 80009f0:	08001b55 	.word	0x08001b55
 80009f4:	20012e84 	.word	0x20012e84
 80009f8:	20012e90 	.word	0x20012e90
 80009fc:	08000eed 	.word	0x08000eed
 8000a00:	0800801c 	.word	0x0800801c
 8000a04:	20012f00 	.word	0x20012f00
 8000a08:	20012eb4 	.word	0x20012eb4
 8000a0c:	20012ebc 	.word	0x20012ebc

08000a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b094      	sub	sp, #80	; 0x50
 8000a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a16:	f107 0320 	add.w	r3, r7, #32
 8000a1a:	2230      	movs	r2, #48	; 0x30
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f006 feaa 	bl	8007778 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a24:	f107 030c 	add.w	r3, r7, #12
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a34:	2300      	movs	r3, #0
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	4b29      	ldr	r3, [pc, #164]	; (8000ae0 <SystemClock_Config+0xd0>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	4a28      	ldr	r2, [pc, #160]	; (8000ae0 <SystemClock_Config+0xd0>)
 8000a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a42:	6413      	str	r3, [r2, #64]	; 0x40
 8000a44:	4b26      	ldr	r3, [pc, #152]	; (8000ae0 <SystemClock_Config+0xd0>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a50:	2300      	movs	r3, #0
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	4b23      	ldr	r3, [pc, #140]	; (8000ae4 <SystemClock_Config+0xd4>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a22      	ldr	r2, [pc, #136]	; (8000ae4 <SystemClock_Config+0xd4>)
 8000a5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a5e:	6013      	str	r3, [r2, #0]
 8000a60:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <SystemClock_Config+0xd4>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a6c:	230a      	movs	r3, #10
 8000a6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a70:	2301      	movs	r3, #1
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a74:	2310      	movs	r3, #16
 8000a76:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a80:	2300      	movs	r3, #0
 8000a82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a84:	2308      	movs	r3, #8
 8000a86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a88:	23a8      	movs	r3, #168	; 0xa8
 8000a8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a90:	2307      	movs	r3, #7
 8000a92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a94:	f107 0320 	add.w	r3, r7, #32
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f001 fc11 	bl	80022c0 <HAL_RCC_OscConfig>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000aa4:	f000 fa5c 	bl	8000f60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa8:	230f      	movs	r3, #15
 8000aaa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aac:	2302      	movs	r3, #2
 8000aae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ab4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ab8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000aba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000abe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ac0:	f107 030c 	add.w	r3, r7, #12
 8000ac4:	2105      	movs	r1, #5
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f001 fe72 	bl	80027b0 <HAL_RCC_ClockConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000ad2:	f000 fa45 	bl	8000f60 <Error_Handler>
  }
}
 8000ad6:	bf00      	nop
 8000ad8:	3750      	adds	r7, #80	; 0x50
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40007000 	.word	0x40007000

08000ae8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <MX_RTC_Init+0x44>)
 8000aee:	4a10      	ldr	r2, [pc, #64]	; (8000b30 <MX_RTC_Init+0x48>)
 8000af0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <MX_RTC_Init+0x44>)
 8000af4:	2240      	movs	r2, #64	; 0x40
 8000af6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <MX_RTC_Init+0x44>)
 8000afa:	227f      	movs	r2, #127	; 0x7f
 8000afc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <MX_RTC_Init+0x44>)
 8000b00:	22ff      	movs	r2, #255	; 0xff
 8000b02:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b04:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MX_RTC_Init+0x44>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b0a:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <MX_RTC_Init+0x44>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_RTC_Init+0x44>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b16:	4805      	ldr	r0, [pc, #20]	; (8000b2c <MX_RTC_Init+0x44>)
 8000b18:	f002 f95a 	bl	8002dd0 <HAL_RTC_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000b22:	f000 fa1d 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20012e94 	.word	0x20012e94
 8000b30:	40002800 	.word	0x40002800

08000b34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b3a:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <MX_USART2_UART_Init+0x50>)
 8000b3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b58:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b6a:	4805      	ldr	r0, [pc, #20]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b6c:	f002 ff10 	bl	8003990 <HAL_UART_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b76:	f000 f9f3 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20012ebc 	.word	0x20012ebc
 8000b84:	40004400 	.word	0x40004400

08000b88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08c      	sub	sp, #48	; 0x30
 8000b8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
 8000b9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61bb      	str	r3, [r7, #24]
 8000ba2:	4ba2      	ldr	r3, [pc, #648]	; (8000e2c <MX_GPIO_Init+0x2a4>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4aa1      	ldr	r2, [pc, #644]	; (8000e2c <MX_GPIO_Init+0x2a4>)
 8000ba8:	f043 0310 	orr.w	r3, r3, #16
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b9f      	ldr	r3, [pc, #636]	; (8000e2c <MX_GPIO_Init+0x2a4>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0310 	and.w	r3, r3, #16
 8000bb6:	61bb      	str	r3, [r7, #24]
 8000bb8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]
 8000bbe:	4b9b      	ldr	r3, [pc, #620]	; (8000e2c <MX_GPIO_Init+0x2a4>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a9a      	ldr	r2, [pc, #616]	; (8000e2c <MX_GPIO_Init+0x2a4>)
 8000bc4:	f043 0304 	orr.w	r3, r3, #4
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b98      	ldr	r3, [pc, #608]	; (8000e2c <MX_GPIO_Init+0x2a4>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0304 	and.w	r3, r3, #4
 8000bd2:	617b      	str	r3, [r7, #20]
 8000bd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]
 8000bda:	4b94      	ldr	r3, [pc, #592]	; (8000e2c <MX_GPIO_Init+0x2a4>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a93      	ldr	r2, [pc, #588]	; (8000e2c <MX_GPIO_Init+0x2a4>)
 8000be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b91      	ldr	r3, [pc, #580]	; (8000e2c <MX_GPIO_Init+0x2a4>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	4b8d      	ldr	r3, [pc, #564]	; (8000e2c <MX_GPIO_Init+0x2a4>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a8c      	ldr	r2, [pc, #560]	; (8000e2c <MX_GPIO_Init+0x2a4>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b8a      	ldr	r3, [pc, #552]	; (8000e2c <MX_GPIO_Init+0x2a4>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	4b86      	ldr	r3, [pc, #536]	; (8000e2c <MX_GPIO_Init+0x2a4>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a85      	ldr	r2, [pc, #532]	; (8000e2c <MX_GPIO_Init+0x2a4>)
 8000c18:	f043 0302 	orr.w	r3, r3, #2
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b83      	ldr	r3, [pc, #524]	; (8000e2c <MX_GPIO_Init+0x2a4>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	4b7f      	ldr	r3, [pc, #508]	; (8000e2c <MX_GPIO_Init+0x2a4>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a7e      	ldr	r2, [pc, #504]	; (8000e2c <MX_GPIO_Init+0x2a4>)
 8000c34:	f043 0308 	orr.w	r3, r3, #8
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b7c      	ldr	r3, [pc, #496]	; (8000e2c <MX_GPIO_Init+0x2a4>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0308 	and.w	r3, r3, #8
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2108      	movs	r1, #8
 8000c4a:	4879      	ldr	r0, [pc, #484]	; (8000e30 <MX_GPIO_Init+0x2a8>)
 8000c4c:	f001 fb1e 	bl	800228c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c50:	2201      	movs	r2, #1
 8000c52:	2101      	movs	r1, #1
 8000c54:	4877      	ldr	r0, [pc, #476]	; (8000e34 <MX_GPIO_Init+0x2ac>)
 8000c56:	f001 fb19 	bl	800228c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000c60:	4875      	ldr	r0, [pc, #468]	; (8000e38 <MX_GPIO_Init+0x2b0>)
 8000c62:	f001 fb13 	bl	800228c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000c66:	2308      	movs	r3, #8
 8000c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000c76:	f107 031c 	add.w	r3, r7, #28
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	486c      	ldr	r0, [pc, #432]	; (8000e30 <MX_GPIO_Init+0x2a8>)
 8000c7e:	f001 f969 	bl	8001f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000c82:	2301      	movs	r3, #1
 8000c84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	4619      	mov	r1, r3
 8000c98:	4866      	ldr	r0, [pc, #408]	; (8000e34 <MX_GPIO_Init+0x2ac>)
 8000c9a:	f001 f95b 	bl	8001f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c9e:	2308      	movs	r3, #8
 8000ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cae:	2305      	movs	r3, #5
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	485e      	ldr	r0, [pc, #376]	; (8000e34 <MX_GPIO_Init+0x2ac>)
 8000cba:	f001 f94b 	bl	8001f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cc2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	485a      	ldr	r0, [pc, #360]	; (8000e3c <MX_GPIO_Init+0x2b4>)
 8000cd4:	f001 f93e 	bl	8001f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000cd8:	2310      	movs	r3, #16
 8000cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ce8:	2306      	movs	r3, #6
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 031c 	add.w	r3, r7, #28
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4852      	ldr	r0, [pc, #328]	; (8000e3c <MX_GPIO_Init+0x2b4>)
 8000cf4:	f001 f92e 	bl	8001f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000cf8:	23e0      	movs	r3, #224	; 0xe0
 8000cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d08:	2305      	movs	r3, #5
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0c:	f107 031c 	add.w	r3, r7, #28
 8000d10:	4619      	mov	r1, r3
 8000d12:	484a      	ldr	r0, [pc, #296]	; (8000e3c <MX_GPIO_Init+0x2b4>)
 8000d14:	f001 f91e 	bl	8001f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d18:	2304      	movs	r3, #4
 8000d1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 031c 	add.w	r3, r7, #28
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4845      	ldr	r0, [pc, #276]	; (8000e40 <MX_GPIO_Init+0x2b8>)
 8000d2c:	f001 f912 	bl	8001f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000d30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d42:	2305      	movs	r3, #5
 8000d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	483c      	ldr	r0, [pc, #240]	; (8000e40 <MX_GPIO_Init+0x2b8>)
 8000d4e:	f001 f901 	bl	8001f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d52:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000d56:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d64:	f107 031c 	add.w	r3, r7, #28
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4833      	ldr	r0, [pc, #204]	; (8000e38 <MX_GPIO_Init+0x2b0>)
 8000d6c:	f001 f8f2 	bl	8001f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d70:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d82:	2306      	movs	r3, #6
 8000d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d86:	f107 031c 	add.w	r3, r7, #28
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4829      	ldr	r0, [pc, #164]	; (8000e34 <MX_GPIO_Init+0x2ac>)
 8000d8e:	f001 f8e1 	bl	8001f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000d92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000da0:	f107 031c 	add.w	r3, r7, #28
 8000da4:	4619      	mov	r1, r3
 8000da6:	4825      	ldr	r0, [pc, #148]	; (8000e3c <MX_GPIO_Init+0x2b4>)
 8000da8:	f001 f8d4 	bl	8001f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000dac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000db0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000dbe:	230a      	movs	r3, #10
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	f107 031c 	add.w	r3, r7, #28
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	481c      	ldr	r0, [pc, #112]	; (8000e3c <MX_GPIO_Init+0x2b4>)
 8000dca:	f001 f8c3 	bl	8001f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000dce:	2320      	movs	r3, #32
 8000dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 031c 	add.w	r3, r7, #28
 8000dde:	4619      	mov	r1, r3
 8000de0:	4815      	ldr	r0, [pc, #84]	; (8000e38 <MX_GPIO_Init+0x2b0>)
 8000de2:	f001 f8b7 	bl	8001f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000de6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000dea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dec:	2312      	movs	r3, #18
 8000dee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000df8:	2304      	movs	r3, #4
 8000dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	4619      	mov	r1, r3
 8000e02:	480f      	ldr	r0, [pc, #60]	; (8000e40 <MX_GPIO_Init+0x2b8>)
 8000e04:	f001 f8a6 	bl	8001f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e0c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e16:	f107 031c 	add.w	r3, r7, #28
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4804      	ldr	r0, [pc, #16]	; (8000e30 <MX_GPIO_Init+0x2a8>)
 8000e1e:	f001 f899 	bl	8001f54 <HAL_GPIO_Init>

}
 8000e22:	bf00      	nop
 8000e24:	3730      	adds	r7, #48	; 0x30
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40021000 	.word	0x40021000
 8000e34:	40020800 	.word	0x40020800
 8000e38:	40020c00 	.word	0x40020c00
 8000e3c:	40020000 	.word	0x40020000
 8000e40:	40020400 	.word	0x40020400

08000e44 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af02      	add	r7, sp, #8
 8000e4a:	6078      	str	r0, [r7, #4]

	uint8_t dummy;
	for(uint32_t i=0;i<4000;i++);
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	e002      	b.n	8000e58 <HAL_UART_RxCpltCallback+0x14>
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	3301      	adds	r3, #1
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000e5e:	d3f8      	bcc.n	8000e52 <HAL_UART_RxCpltCallback+0xe>

	if (!xQueueIsQueueFullFromISR(q_data))
 8000e60:	4b1e      	ldr	r3, [pc, #120]	; (8000edc <HAL_UART_RxCpltCallback+0x98>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f004 fb3e 	bl	80054e6 <xQueueIsQueueFullFromISR>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d107      	bne.n	8000e80 <HAL_UART_RxCpltCallback+0x3c>
	{
		xQueueSendFromISR(q_data,(void*)&user_data,NULL);
 8000e70:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <HAL_UART_RxCpltCallback+0x98>)
 8000e72:	6818      	ldr	r0, [r3, #0]
 8000e74:	2300      	movs	r3, #0
 8000e76:	2200      	movs	r2, #0
 8000e78:	4919      	ldr	r1, [pc, #100]	; (8000ee0 <HAL_UART_RxCpltCallback+0x9c>)
 8000e7a:	f003 ffed 	bl	8004e58 <xQueueGenericSendFromISR>
 8000e7e:	e013      	b.n	8000ea8 <HAL_UART_RxCpltCallback+0x64>

	}
	else
	{
		if(user_data=='\n')
 8000e80:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <HAL_UART_RxCpltCallback+0x9c>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b0a      	cmp	r3, #10
 8000e88:	d10e      	bne.n	8000ea8 <HAL_UART_RxCpltCallback+0x64>
		{
			xQueueReceiveFromISR(q_data,(void*)&dummy, NULL);
 8000e8a:	4b14      	ldr	r3, [pc, #80]	; (8000edc <HAL_UART_RxCpltCallback+0x98>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f107 010b 	add.w	r1, r7, #11
 8000e92:	2200      	movs	r2, #0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f004 f969 	bl	800516c <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data, (void*)&user_data, NULL);
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <HAL_UART_RxCpltCallback+0x98>)
 8000e9c:	6818      	ldr	r0, [r3, #0]
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	490f      	ldr	r1, [pc, #60]	; (8000ee0 <HAL_UART_RxCpltCallback+0x9c>)
 8000ea4:	f003 ffd8 	bl	8004e58 <xQueueGenericSendFromISR>
		}
	}
	if (user_data == '\n')
 8000ea8:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <HAL_UART_RxCpltCallback+0x9c>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	2b0a      	cmp	r3, #10
 8000eb0:	d10a      	bne.n	8000ec8 <HAL_UART_RxCpltCallback+0x84>
	{
		xTaskNotifyFromISR(cmd_handle,0,eNoAction,NULL);
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <HAL_UART_RxCpltCallback+0xa0>)
 8000eb4:	6818      	ldr	r0, [r3, #0]
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	9301      	str	r3, [sp, #4]
 8000eba:	2300      	movs	r3, #0
 8000ebc:	9300      	str	r3, [sp, #0]
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	f005 fade 	bl	8006484 <xTaskGenericNotifyFromISR>
	}

	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	4905      	ldr	r1, [pc, #20]	; (8000ee0 <HAL_UART_RxCpltCallback+0x9c>)
 8000ecc:	4806      	ldr	r0, [pc, #24]	; (8000ee8 <HAL_UART_RxCpltCallback+0xa4>)
 8000ece:	f002 fe3e 	bl	8003b4e <HAL_UART_Receive_IT>


}
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20012e84 	.word	0x20012e84
 8000ee0:	20012eb4 	.word	0x20012eb4
 8000ee4:	20012e7c 	.word	0x20012e7c
 8000ee8:	20012ebc 	.word	0x20012ebc

08000eec <led_effect_callback>:

void led_effect_callback(TimerHandle_t xTimer)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	int id;
	id=(uint32_t)pvTimerGetTimerID(xTimer);
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f005 ff9b 	bl	8006e30 <pvTimerGetTimerID>
 8000efa:	4603      	mov	r3, r0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	3b01      	subs	r3, #1
 8000f02:	2b03      	cmp	r3, #3
 8000f04:	d816      	bhi.n	8000f34 <led_effect_callback+0x48>
 8000f06:	a201      	add	r2, pc, #4	; (adr r2, 8000f0c <led_effect_callback+0x20>)
 8000f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f0c:	08000f1d 	.word	0x08000f1d
 8000f10:	08000f23 	.word	0x08000f23
 8000f14:	08000f29 	.word	0x08000f29
 8000f18:	08000f2f 	.word	0x08000f2f

	switch(id)
	{
	case 1:
		LED_effect1();
 8000f1c:	f7ff fb78 	bl	8000610 <LED_effect1>
		break;
 8000f20:	e008      	b.n	8000f34 <led_effect_callback+0x48>
	case 2:
		LED_effect2();
 8000f22:	f7ff fb8b 	bl	800063c <LED_effect2>
		break;
 8000f26:	e005      	b.n	8000f34 <led_effect_callback+0x48>
	case 3:
		LED_effect3();
 8000f28:	f7ff fb9e 	bl	8000668 <LED_effect3>
		break;
 8000f2c:	e002      	b.n	8000f34 <led_effect_callback+0x48>
	case 4:
		LED_effect4();
 8000f2e:	f7ff fbb3 	bl	8000698 <LED_effect4>
		//break;

	}


}
 8000f32:	e7ff      	b.n	8000f34 <led_effect_callback+0x48>
 8000f34:	bf00      	nop
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d101      	bne.n	8000f52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f4e:	f000 fe6d 	bl	8001c2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40001000 	.word	0x40001000

08000f60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f64:	b672      	cpsid	i
}
 8000f66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <Error_Handler+0x8>
	...

08000f6c <show_time_date>:

#include"main.h"


void show_time_date(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08c      	sub	sp, #48	; 0x30
 8000f70:	af04      	add	r7, sp, #16
	static char *date=showdate;

	RTC_TimeTypeDef rtc_time;
	RTC_DateTypeDef rtc_date;

	memset(&rtc_time,0,sizeof(rtc_time));
 8000f72:	f107 0308 	add.w	r3, r7, #8
 8000f76:	2214      	movs	r2, #20
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f006 fbfc 	bl	8007778 <memset>
	memset(&rtc_date,0,sizeof(rtc_date));
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	2204      	movs	r2, #4
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f006 fbf6 	bl	8007778 <memset>

	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000f8c:	f107 0308 	add.w	r3, r7, #8
 8000f90:	2200      	movs	r2, #0
 8000f92:	4619      	mov	r1, r3
 8000f94:	4820      	ldr	r0, [pc, #128]	; (8001018 <show_time_date+0xac>)
 8000f96:	f002 f869 	bl	800306c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	481d      	ldr	r0, [pc, #116]	; (8001018 <show_time_date+0xac>)
 8000fa2:	f002 f968 	bl	8003276 <HAL_RTC_GetDate>

	char *format;

	format= (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM ) ? "AM" : "PM";
 8000fa6:	7afb      	ldrb	r3, [r7, #11]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d101      	bne.n	8000fb0 <show_time_date+0x44>
 8000fac:	4b1b      	ldr	r3, [pc, #108]	; (800101c <show_time_date+0xb0>)
 8000fae:	e000      	b.n	8000fb2 <show_time_date+0x46>
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <show_time_date+0xb4>)
 8000fb2:	61fb      	str	r3, [r7, #28]

	/*Display time format : hh:mm:ss [AM/PM] */
	sprintf((char*)showtime,"%s:\t%02d:%02d:%02d [%s]","\nCurrent Time&Date",rtc_time.Hours,rtc_time.Minutes,rtc_time.Seconds,format);
 8000fb4:	7a3b      	ldrb	r3, [r7, #8]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	7a7b      	ldrb	r3, [r7, #9]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	7abb      	ldrb	r3, [r7, #10]
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	9302      	str	r3, [sp, #8]
 8000fc4:	9101      	str	r1, [sp, #4]
 8000fc6:	9200      	str	r2, [sp, #0]
 8000fc8:	4603      	mov	r3, r0
 8000fca:	4a16      	ldr	r2, [pc, #88]	; (8001024 <show_time_date+0xb8>)
 8000fcc:	4916      	ldr	r1, [pc, #88]	; (8001028 <show_time_date+0xbc>)
 8000fce:	4817      	ldr	r0, [pc, #92]	; (800102c <show_time_date+0xc0>)
 8000fd0:	f006 fbda 	bl	8007788 <siprintf>

	xQueueSend(q_print,&time,portMAX_DELAY);
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <show_time_date+0xc4>)
 8000fd6:	6818      	ldr	r0, [r3, #0]
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f04f 32ff 	mov.w	r2, #4294967295
 8000fde:	4915      	ldr	r1, [pc, #84]	; (8001034 <show_time_date+0xc8>)
 8000fe0:	f003 fe3c 	bl	8004c5c <xQueueGenericSend>

	/*Display date format : Month-Day-Year */

	sprintf((char*)showdate,"\t%02d:%02d:%02d \n",rtc_date.Month,rtc_date.Date,2000+rtc_date.Year);
 8000fe4:	797b      	ldrb	r3, [r7, #5]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	79bb      	ldrb	r3, [r7, #6]
 8000fea:	4619      	mov	r1, r3
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4910      	ldr	r1, [pc, #64]	; (8001038 <show_time_date+0xcc>)
 8000ff8:	4810      	ldr	r0, [pc, #64]	; (800103c <show_time_date+0xd0>)
 8000ffa:	f006 fbc5 	bl	8007788 <siprintf>

	xQueueSend(q_print,&date,portMAX_DELAY);
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <show_time_date+0xc4>)
 8001000:	6818      	ldr	r0, [r3, #0]
 8001002:	2300      	movs	r3, #0
 8001004:	f04f 32ff 	mov.w	r2, #4294967295
 8001008:	490d      	ldr	r1, [pc, #52]	; (8001040 <show_time_date+0xd4>)
 800100a:	f003 fe27 	bl	8004c5c <xQueueGenericSend>
}
 800100e:	bf00      	nop
 8001010:	3720      	adds	r7, #32
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20012e94 	.word	0x20012e94
 800101c:	08008028 	.word	0x08008028
 8001020:	0800802c 	.word	0x0800802c
 8001024:	08008030 	.word	0x08008030
 8001028:	08008044 	.word	0x08008044
 800102c:	200000b4 	.word	0x200000b4
 8001030:	20012e90 	.word	0x20012e90
 8001034:	20000008 	.word	0x20000008
 8001038:	0800805c 	.word	0x0800805c
 800103c:	200000dc 	.word	0x200000dc
 8001040:	2000000c 	.word	0x2000000c

08001044 <rtc_configure_time>:




void rtc_configure_time(RTC_TimeTypeDef *time)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	time->TimeFormat=RTC_HOURFORMAT12_AM;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	70da      	strb	r2, [r3, #3]
	time->DayLightSaving=RTC_DAYLIGHTSAVING_NONE;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	60da      	str	r2, [r3, #12]
	time->StoreOperation=RTC_STOREOPERATION_RESET;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	611a      	str	r2, [r3, #16]
	HAL_RTC_SetTime(&hrtc, time, RTC_FORMAT_BIN);
 800105e:	2200      	movs	r2, #0
 8001060:	6879      	ldr	r1, [r7, #4]
 8001062:	4803      	ldr	r0, [pc, #12]	; (8001070 <rtc_configure_time+0x2c>)
 8001064:	f001 ff45 	bl	8002ef2 <HAL_RTC_SetTime>


}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20012e94 	.word	0x20012e94

08001074 <rtc_configure_date>:

void rtc_configure_date(RTC_DateTypeDef *date)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
 800107c:	2200      	movs	r2, #0
 800107e:	6879      	ldr	r1, [r7, #4]
 8001080:	4803      	ldr	r0, [pc, #12]	; (8001090 <rtc_configure_date+0x1c>)
 8001082:	f002 f851 	bl	8003128 <HAL_RTC_SetDate>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20012e94 	.word	0x20012e94

08001094 <validate_rtc_information>:


int validate_rtc_information(RTC_TimeTypeDef *time,RTC_DateTypeDef *date)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
	if(time)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d00d      	beq.n	80010c0 <validate_rtc_information+0x2c>
	{
		if( (time->Hours >12) || (time->Minutes >59) || (time->Seconds >59) )
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b0c      	cmp	r3, #12
 80010aa:	d807      	bhi.n	80010bc <validate_rtc_information+0x28>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	785b      	ldrb	r3, [r3, #1]
 80010b0:	2b3b      	cmp	r3, #59	; 0x3b
 80010b2:	d803      	bhi.n	80010bc <validate_rtc_information+0x28>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	789b      	ldrb	r3, [r3, #2]
 80010b8:	2b3b      	cmp	r3, #59	; 0x3b
 80010ba:	d901      	bls.n	80010c0 <validate_rtc_information+0x2c>
			return 1;
 80010bc:	2301      	movs	r3, #1
 80010be:	e015      	b.n	80010ec <validate_rtc_information+0x58>
	}
	if(date)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d011      	beq.n	80010ea <validate_rtc_information+0x56>
		{
		if( (date->Date>31) || (date->Month>12) || (date->Year > 99) || (date->WeekDay > 7) )
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	789b      	ldrb	r3, [r3, #2]
 80010ca:	2b1f      	cmp	r3, #31
 80010cc:	d80b      	bhi.n	80010e6 <validate_rtc_information+0x52>
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	785b      	ldrb	r3, [r3, #1]
 80010d2:	2b0c      	cmp	r3, #12
 80010d4:	d807      	bhi.n	80010e6 <validate_rtc_information+0x52>
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	78db      	ldrb	r3, [r3, #3]
 80010da:	2b63      	cmp	r3, #99	; 0x63
 80010dc:	d803      	bhi.n	80010e6 <validate_rtc_information+0x52>
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b07      	cmp	r3, #7
 80010e4:	d901      	bls.n	80010ea <validate_rtc_information+0x56>
			return 1;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e000      	b.n	80010ec <validate_rtc_information+0x58>
		}
	return 0;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	4b10      	ldr	r3, [pc, #64]	; (8001144 <HAL_MspInit+0x4c>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	4a0f      	ldr	r2, [pc, #60]	; (8001144 <HAL_MspInit+0x4c>)
 8001108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800110c:	6453      	str	r3, [r2, #68]	; 0x44
 800110e:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <HAL_MspInit+0x4c>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	603b      	str	r3, [r7, #0]
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <HAL_MspInit+0x4c>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	4a08      	ldr	r2, [pc, #32]	; (8001144 <HAL_MspInit+0x4c>)
 8001124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001128:	6413      	str	r3, [r2, #64]	; 0x40
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_MspInit+0x4c>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800

08001148 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001150:	f107 0308 	add.w	r3, r7, #8
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a0c      	ldr	r2, [pc, #48]	; (8001194 <HAL_RTC_MspInit+0x4c>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d111      	bne.n	800118c <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001168:	2302      	movs	r3, #2
 800116a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800116c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001170:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001172:	f107 0308 	add.w	r3, r7, #8
 8001176:	4618      	mov	r0, r3
 8001178:	f001 fd48 	bl	8002c0c <HAL_RCCEx_PeriphCLKConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001182:	f7ff feed 	bl	8000f60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001186:	4b04      	ldr	r3, [pc, #16]	; (8001198 <HAL_RTC_MspInit+0x50>)
 8001188:	2201      	movs	r2, #1
 800118a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800118c:	bf00      	nop
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40002800 	.word	0x40002800
 8001198:	42470e3c 	.word	0x42470e3c

0800119c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	; 0x28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a1d      	ldr	r2, [pc, #116]	; (8001230 <HAL_UART_MspInit+0x94>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d133      	bne.n	8001226 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <HAL_UART_MspInit+0x98>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	4a1b      	ldr	r2, [pc, #108]	; (8001234 <HAL_UART_MspInit+0x98>)
 80011c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011cc:	6413      	str	r3, [r2, #64]	; 0x40
 80011ce:	4b19      	ldr	r3, [pc, #100]	; (8001234 <HAL_UART_MspInit+0x98>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	4b15      	ldr	r3, [pc, #84]	; (8001234 <HAL_UART_MspInit+0x98>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a14      	ldr	r2, [pc, #80]	; (8001234 <HAL_UART_MspInit+0x98>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b12      	ldr	r3, [pc, #72]	; (8001234 <HAL_UART_MspInit+0x98>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011f6:	230c      	movs	r3, #12
 80011f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001202:	2303      	movs	r3, #3
 8001204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001206:	2307      	movs	r3, #7
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	4809      	ldr	r0, [pc, #36]	; (8001238 <HAL_UART_MspInit+0x9c>)
 8001212:	f000 fe9f 	bl	8001f54 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2106      	movs	r1, #6
 800121a:	2026      	movs	r0, #38	; 0x26
 800121c:	f000 fdde 	bl	8001ddc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001220:	2026      	movs	r0, #38	; 0x26
 8001222:	f000 fdf7 	bl	8001e14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001226:	bf00      	nop
 8001228:	3728      	adds	r7, #40	; 0x28
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40004400 	.word	0x40004400
 8001234:	40023800 	.word	0x40023800
 8001238:	40020000 	.word	0x40020000

0800123c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08c      	sub	sp, #48	; 0x30
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800124c:	2200      	movs	r2, #0
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	2036      	movs	r0, #54	; 0x36
 8001252:	f000 fdc3 	bl	8001ddc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001256:	2036      	movs	r0, #54	; 0x36
 8001258:	f000 fddc 	bl	8001e14 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <HAL_InitTick+0xa4>)
 8001262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001264:	4a1e      	ldr	r2, [pc, #120]	; (80012e0 <HAL_InitTick+0xa4>)
 8001266:	f043 0310 	orr.w	r3, r3, #16
 800126a:	6413      	str	r3, [r2, #64]	; 0x40
 800126c:	4b1c      	ldr	r3, [pc, #112]	; (80012e0 <HAL_InitTick+0xa4>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	f003 0310 	and.w	r3, r3, #16
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001278:	f107 0210 	add.w	r2, r7, #16
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	4611      	mov	r1, r2
 8001282:	4618      	mov	r0, r3
 8001284:	f001 fc90 	bl	8002ba8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001288:	f001 fc66 	bl	8002b58 <HAL_RCC_GetPCLK1Freq>
 800128c:	4603      	mov	r3, r0
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001294:	4a13      	ldr	r2, [pc, #76]	; (80012e4 <HAL_InitTick+0xa8>)
 8001296:	fba2 2303 	umull	r2, r3, r2, r3
 800129a:	0c9b      	lsrs	r3, r3, #18
 800129c:	3b01      	subs	r3, #1
 800129e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <HAL_InitTick+0xac>)
 80012a2:	4a12      	ldr	r2, [pc, #72]	; (80012ec <HAL_InitTick+0xb0>)
 80012a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <HAL_InitTick+0xac>)
 80012a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012ac:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80012ae:	4a0e      	ldr	r2, [pc, #56]	; (80012e8 <HAL_InitTick+0xac>)
 80012b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <HAL_InitTick+0xac>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ba:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <HAL_InitTick+0xac>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80012c0:	4809      	ldr	r0, [pc, #36]	; (80012e8 <HAL_InitTick+0xac>)
 80012c2:	f002 f8b7 	bl	8003434 <HAL_TIM_Base_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d104      	bne.n	80012d6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80012cc:	4806      	ldr	r0, [pc, #24]	; (80012e8 <HAL_InitTick+0xac>)
 80012ce:	f002 f90b 	bl	80034e8 <HAL_TIM_Base_Start_IT>
 80012d2:	4603      	mov	r3, r0
 80012d4:	e000      	b.n	80012d8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3730      	adds	r7, #48	; 0x30
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40023800 	.word	0x40023800
 80012e4:	431bde83 	.word	0x431bde83
 80012e8:	20012f10 	.word	0x20012f10
 80012ec:	40001000 	.word	0x40001000

080012f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <NMI_Handler+0x4>

080012f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012fa:	e7fe      	b.n	80012fa <HardFault_Handler+0x4>

080012fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001300:	e7fe      	b.n	8001300 <MemManage_Handler+0x4>

08001302 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001306:	e7fe      	b.n	8001306 <BusFault_Handler+0x4>

08001308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800130c:	e7fe      	b.n	800130c <UsageFault_Handler+0x4>

0800130e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001320:	4802      	ldr	r0, [pc, #8]	; (800132c <USART2_IRQHandler+0x10>)
 8001322:	f002 fc45 	bl	8003bb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20012ebc 	.word	0x20012ebc

08001330 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <TIM6_DAC_IRQHandler+0x10>)
 8001336:	f002 f947 	bl	80035c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20012f10 	.word	0x20012f10

08001344 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800134c:	4a14      	ldr	r2, [pc, #80]	; (80013a0 <_sbrk+0x5c>)
 800134e:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <_sbrk+0x60>)
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001358:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <_sbrk+0x64>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d102      	bne.n	8001366 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001360:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <_sbrk+0x64>)
 8001362:	4a12      	ldr	r2, [pc, #72]	; (80013ac <_sbrk+0x68>)
 8001364:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001366:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <_sbrk+0x64>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4413      	add	r3, r2
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	429a      	cmp	r2, r3
 8001372:	d207      	bcs.n	8001384 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001374:	f006 f9c8 	bl	8007708 <__errno>
 8001378:	4603      	mov	r3, r0
 800137a:	220c      	movs	r2, #12
 800137c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800137e:	f04f 33ff 	mov.w	r3, #4294967295
 8001382:	e009      	b.n	8001398 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <_sbrk+0x64>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800138a:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <_sbrk+0x64>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4413      	add	r3, r2
 8001392:	4a05      	ldr	r2, [pc, #20]	; (80013a8 <_sbrk+0x64>)
 8001394:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001396:	68fb      	ldr	r3, [r7, #12]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20020000 	.word	0x20020000
 80013a4:	00000400 	.word	0x00000400
 80013a8:	20000104 	.word	0x20000104
 80013ac:	20012fb0 	.word	0x20012fb0

080013b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <SystemInit+0x20>)
 80013b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ba:	4a05      	ldr	r2, [pc, #20]	; (80013d0 <SystemInit+0x20>)
 80013bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <menu_handler>:

uint8_t get_number(uint8_t *p,int *len);

const char* msg_inv= "////Invalid option/////\n";
void menu_handler(void *parameters)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af02      	add	r7, sp, #8
 80013da:	6078      	str	r0, [r7, #4]

	uint32_t cmd_addr;
	command_t *cmd;
	int option;
	const char* msg_menu= "========================|\n"
 80013dc:	4b31      	ldr	r3, [pc, #196]	; (80014a4 <menu_handler+0xd0>)
 80013de:	60bb      	str	r3, [r7, #8]



	while(1)
	{
		xQueueSend(q_print, &msg_menu, portMAX_DELAY);
 80013e0:	4b31      	ldr	r3, [pc, #196]	; (80014a8 <menu_handler+0xd4>)
 80013e2:	6818      	ldr	r0, [r3, #0]
 80013e4:	f107 0108 	add.w	r1, r7, #8
 80013e8:	2300      	movs	r3, #0
 80013ea:	f04f 32ff 	mov.w	r2, #4294967295
 80013ee:	f003 fc35 	bl	8004c5c <xQueueGenericSend>
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 80013f2:	f107 030c 	add.w	r3, r7, #12
 80013f6:	f04f 32ff 	mov.w	r2, #4294967295
 80013fa:	9200      	str	r2, [sp, #0]
 80013fc:	2200      	movs	r2, #0
 80013fe:	2100      	movs	r1, #0
 8001400:	2000      	movs	r0, #0
 8001402:	f004 fedf 	bl	80061c4 <xTaskGenericNotifyWait>

		cmd=(command_t*)cmd_addr;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	617b      	str	r3, [r7, #20]

		if(cmd->len ==1)
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d133      	bne.n	800147a <menu_handler+0xa6>
		{
			option=cmd->payload[0]-48;
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	3b30      	subs	r3, #48	; 0x30
 8001418:	613b      	str	r3, [r7, #16]
			switch(option)
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	2b02      	cmp	r3, #2
 800141e:	d03f      	beq.n	80014a0 <menu_handler+0xcc>
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	2b02      	cmp	r3, #2
 8001424:	dc20      	bgt.n	8001468 <menu_handler+0x94>
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d003      	beq.n	8001434 <menu_handler+0x60>
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d00d      	beq.n	800144e <menu_handler+0x7a>
 8001432:	e019      	b.n	8001468 <menu_handler+0x94>
			{
			case 0:
				current_state=sLedEffect;
 8001434:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <menu_handler+0xd8>)
 8001436:	2201      	movs	r2, #1
 8001438:	701a      	strb	r2, [r3, #0]
				xTaskNotify(led_handle,0,eNoAction);
 800143a:	4b1d      	ldr	r3, [pc, #116]	; (80014b0 <menu_handler+0xdc>)
 800143c:	6818      	ldr	r0, [r3, #0]
 800143e:	2300      	movs	r3, #0
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	2300      	movs	r3, #0
 8001444:	2200      	movs	r2, #0
 8001446:	2100      	movs	r1, #0
 8001448:	f004 ff3c 	bl	80062c4 <xTaskGenericNotify>
				break;
 800144c:	e01e      	b.n	800148c <menu_handler+0xb8>
			case 1:
				current_state=sRtcMenu;
 800144e:	4b17      	ldr	r3, [pc, #92]	; (80014ac <menu_handler+0xd8>)
 8001450:	2202      	movs	r2, #2
 8001452:	701a      	strb	r2, [r3, #0]
				xTaskNotify(rtc_handle,0,eNoAction);
 8001454:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <menu_handler+0xe0>)
 8001456:	6818      	ldr	r0, [r3, #0]
 8001458:	2300      	movs	r3, #0
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	2300      	movs	r3, #0
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	f004 ff2f 	bl	80062c4 <xTaskGenericNotify>
				break;
 8001466:	e011      	b.n	800148c <menu_handler+0xb8>

			case 2:
				continue;
			default:
				xQueueSend(q_print,&msg_inv, portMAX_DELAY);
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <menu_handler+0xd4>)
 800146a:	6818      	ldr	r0, [r3, #0]
 800146c:	2300      	movs	r3, #0
 800146e:	f04f 32ff 	mov.w	r2, #4294967295
 8001472:	4911      	ldr	r1, [pc, #68]	; (80014b8 <menu_handler+0xe4>)
 8001474:	f003 fbf2 	bl	8004c5c <xQueueGenericSend>
				continue;
 8001478:	e013      	b.n	80014a2 <menu_handler+0xce>
			}

		}
		else
		{
			xQueueSend(q_print,&msg_inv, portMAX_DELAY);
 800147a:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <menu_handler+0xd4>)
 800147c:	6818      	ldr	r0, [r3, #0]
 800147e:	2300      	movs	r3, #0
 8001480:	f04f 32ff 	mov.w	r2, #4294967295
 8001484:	490c      	ldr	r1, [pc, #48]	; (80014b8 <menu_handler+0xe4>)
 8001486:	f003 fbe9 	bl	8004c5c <xQueueGenericSend>
			continue;
 800148a:	e00a      	b.n	80014a2 <menu_handler+0xce>
		}
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 800148c:	f04f 33ff 	mov.w	r3, #4294967295
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	2300      	movs	r3, #0
 8001494:	2200      	movs	r2, #0
 8001496:	2100      	movs	r1, #0
 8001498:	2000      	movs	r0, #0
 800149a:	f004 fe93 	bl	80061c4 <xTaskGenericNotifyWait>
 800149e:	e79f      	b.n	80013e0 <menu_handler+0xc>
				continue;
 80014a0:	bf00      	nop
		xQueueSend(q_print, &msg_menu, portMAX_DELAY);
 80014a2:	e79d      	b.n	80013e0 <menu_handler+0xc>
 80014a4:	0800808c 	.word	0x0800808c
 80014a8:	20012e90 	.word	0x20012e90
 80014ac:	200000b0 	.word	0x200000b0
 80014b0:	20012e8c 	.word	0x20012e8c
 80014b4:	20012e88 	.word	0x20012e88
 80014b8:	20000014 	.word	0x20000014

080014bc <cmd_handler>:
	}
}
void cmd_handler(void *parameters)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	; 0x28
 80014c0:	af02      	add	r7, sp, #8
 80014c2:	6078      	str	r0, [r7, #4]

BaseType_t ret;

	while(1)
	{
		ret= xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80014c4:	f04f 33ff 	mov.w	r3, #4294967295
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	2300      	movs	r3, #0
 80014cc:	2200      	movs	r2, #0
 80014ce:	2100      	movs	r1, #0
 80014d0:	2000      	movs	r0, #0
 80014d2:	f004 fe77 	bl	80061c4 <xTaskGenericNotifyWait>
 80014d6:	61f8      	str	r0, [r7, #28]

		if (ret == pdTRUE )
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d1f2      	bne.n	80014c4 <cmd_handler+0x8>
		{
		process_command(&cmd);
 80014de:	f107 030c 	add.w	r3, r7, #12
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 f802 	bl	80014ec <process_command>
		ret= xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80014e8:	e7ec      	b.n	80014c4 <cmd_handler+0x8>
	...

080014ec <process_command>:
		}
	}
}

void process_command(command_t *cmd)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af02      	add	r7, sp, #8
 80014f2:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 f85b 	bl	80015b0 <extract_command>

	switch(current_state)
 80014fa:	4b29      	ldr	r3, [pc, #164]	; (80015a0 <process_command+0xb4>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b05      	cmp	r3, #5
 8001500:	d84a      	bhi.n	8001598 <process_command+0xac>
 8001502:	a201      	add	r2, pc, #4	; (adr r2, 8001508 <process_command+0x1c>)
 8001504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001508:	08001521 	.word	0x08001521
 800150c:	08001535 	.word	0x08001535
 8001510:	08001549 	.word	0x08001549
 8001514:	0800155d 	.word	0x0800155d
 8001518:	08001571 	.word	0x08001571
 800151c:	08001585 	.word	0x08001585
	{
	case sMainmenu:
		xTaskNotify(menue_handle,(uint32_t)cmd,eSetValueWithOverwrite);
 8001520:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <process_command+0xb8>)
 8001522:	6818      	ldr	r0, [r3, #0]
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	2300      	movs	r3, #0
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	2303      	movs	r3, #3
 800152c:	2100      	movs	r1, #0
 800152e:	f004 fec9 	bl	80062c4 <xTaskGenericNotify>
		break;
 8001532:	e031      	b.n	8001598 <process_command+0xac>

	case sLedEffect:
		xTaskNotify(led_handle,(uint32_t)cmd,eSetValueWithOverwrite);
 8001534:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <process_command+0xbc>)
 8001536:	6818      	ldr	r0, [r3, #0]
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	2300      	movs	r3, #0
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	2303      	movs	r3, #3
 8001540:	2100      	movs	r1, #0
 8001542:	f004 febf 	bl	80062c4 <xTaskGenericNotify>
		break;
 8001546:	e027      	b.n	8001598 <process_command+0xac>

	case sRtcMenu:
		xTaskNotify(rtc_handle,(uint32_t)cmd,eSetValueWithOverwrite);
 8001548:	4b18      	ldr	r3, [pc, #96]	; (80015ac <process_command+0xc0>)
 800154a:	6818      	ldr	r0, [r3, #0]
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	2300      	movs	r3, #0
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	2303      	movs	r3, #3
 8001554:	2100      	movs	r1, #0
 8001556:	f004 feb5 	bl	80062c4 <xTaskGenericNotify>
		break;
 800155a:	e01d      	b.n	8001598 <process_command+0xac>

	case sRtcTimeConfig:
		xTaskNotify(rtc_handle,(uint32_t)cmd,eSetValueWithOverwrite);
 800155c:	4b13      	ldr	r3, [pc, #76]	; (80015ac <process_command+0xc0>)
 800155e:	6818      	ldr	r0, [r3, #0]
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	2300      	movs	r3, #0
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	2303      	movs	r3, #3
 8001568:	2100      	movs	r1, #0
 800156a:	f004 feab 	bl	80062c4 <xTaskGenericNotify>
		break;
 800156e:	e013      	b.n	8001598 <process_command+0xac>
	case SRtcDateConfig:
		xTaskNotify(rtc_handle,(uint32_t)cmd,eSetValueWithOverwrite);
 8001570:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <process_command+0xc0>)
 8001572:	6818      	ldr	r0, [r3, #0]
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	2300      	movs	r3, #0
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	2303      	movs	r3, #3
 800157c:	2100      	movs	r1, #0
 800157e:	f004 fea1 	bl	80062c4 <xTaskGenericNotify>
		break;
 8001582:	e009      	b.n	8001598 <process_command+0xac>
	case sRtcReport:
		xTaskNotify(rtc_handle,(uint32_t)cmd,eSetValueWithOverwrite);
 8001584:	4b09      	ldr	r3, [pc, #36]	; (80015ac <process_command+0xc0>)
 8001586:	6818      	ldr	r0, [r3, #0]
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	2300      	movs	r3, #0
 800158c:	9300      	str	r3, [sp, #0]
 800158e:	2303      	movs	r3, #3
 8001590:	2100      	movs	r1, #0
 8001592:	f004 fe97 	bl	80062c4 <xTaskGenericNotify>
		break;
 8001596:	bf00      	nop
	}

}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	200000b0 	.word	0x200000b0
 80015a4:	20012eb8 	.word	0x20012eb8
 80015a8:	20012e8c 	.word	0x20012e8c
 80015ac:	20012e88 	.word	0x20012e88

080015b0 <extract_command>:

int extract_command(command_t *cmd)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

	BaseType_t status;
	uint8_t item;

	status= uxQueueMessagesWaiting(q_data);
 80015b8:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <extract_command+0x74>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f003 fe64 	bl	800528a <uxQueueMessagesWaiting>
 80015c2:	4603      	mov	r3, r0
 80015c4:	613b      	str	r3, [r7, #16]

	if(!status)
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d102      	bne.n	80015d2 <extract_command+0x22>
		return -1;
 80015cc:	f04f 33ff 	mov.w	r3, #4294967295
 80015d0:	e023      	b.n	800161a <extract_command+0x6a>


	uint8_t i=0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	75fb      	strb	r3, [r7, #23]

	do{
		status=xQueueReceive(q_data, &item, portMAX_DELAY);
 80015d6:	4b13      	ldr	r3, [pc, #76]	; (8001624 <extract_command+0x74>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f107 010f 	add.w	r1, r7, #15
 80015de:	f04f 32ff 	mov.w	r2, #4294967295
 80015e2:	4618      	mov	r0, r3
 80015e4:	f003 fce2 	bl	8004fac <xQueueReceive>
 80015e8:	6138      	str	r0, [r7, #16]
		if (status==pdTRUE)
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d106      	bne.n	80015fe <extract_command+0x4e>
		{
			cmd->payload[i++]= item;
 80015f0:	7dfb      	ldrb	r3, [r7, #23]
 80015f2:	1c5a      	adds	r2, r3, #1
 80015f4:	75fa      	strb	r2, [r7, #23]
 80015f6:	461a      	mov	r2, r3
 80015f8:	7bf9      	ldrb	r1, [r7, #15]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	5499      	strb	r1, [r3, r2]
		}


	}while(item !='\n');
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
 8001600:	2b0a      	cmp	r3, #10
 8001602:	d1e8      	bne.n	80015d6 <extract_command+0x26>

	cmd->payload[i-1]= '\0';
 8001604:	7dfb      	ldrb	r3, [r7, #23]
 8001606:	3b01      	subs	r3, #1
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	2100      	movs	r1, #0
 800160c:	54d1      	strb	r1, [r2, r3]

	cmd->len= i-1;
 800160e:	7dfb      	ldrb	r3, [r7, #23]
 8001610:	3b01      	subs	r3, #1
 8001612:	461a      	mov	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	60da      	str	r2, [r3, #12]

	return 0;
 8001618:	2300      	movs	r3, #0

}
 800161a:	4618      	mov	r0, r3
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20012e84 	.word	0x20012e84

08001628 <led_handler>:

void led_handler(void *parameters)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af02      	add	r7, sp, #8
 800162e:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;

	const char* led_msg= "======================\n"
 8001630:	4b3e      	ldr	r3, [pc, #248]	; (800172c <led_handler+0x104>)
 8001632:	60fb      	str	r3, [r7, #12]
			             "   Led effect4 --->e4 \n"
						 " Enter your choice here:";

	while(1)
	{
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001634:	f04f 33ff 	mov.w	r3, #4294967295
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	2300      	movs	r3, #0
 800163c:	2200      	movs	r2, #0
 800163e:	2100      	movs	r1, #0
 8001640:	2000      	movs	r0, #0
 8001642:	f004 fdbf 	bl	80061c4 <xTaskGenericNotifyWait>
		xQueueSend(q_print,&led_msg,portMAX_DELAY);
 8001646:	4b3a      	ldr	r3, [pc, #232]	; (8001730 <led_handler+0x108>)
 8001648:	6818      	ldr	r0, [r3, #0]
 800164a:	f107 010c 	add.w	r1, r7, #12
 800164e:	2300      	movs	r3, #0
 8001650:	f04f 32ff 	mov.w	r2, #4294967295
 8001654:	f003 fb02 	bl	8004c5c <xQueueGenericSend>
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8001658:	f107 0310 	add.w	r3, r7, #16
 800165c:	f04f 32ff 	mov.w	r2, #4294967295
 8001660:	9200      	str	r2, [sp, #0]
 8001662:	2200      	movs	r2, #0
 8001664:	2100      	movs	r1, #0
 8001666:	2000      	movs	r0, #0
 8001668:	f004 fdac 	bl	80061c4 <xTaskGenericNotifyWait>

		cmd=(command_t*)cmd_addr;
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	617b      	str	r3, [r7, #20]

		if(cmd->len <=4)
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	2b04      	cmp	r3, #4
 8001676:	d843      	bhi.n	8001700 <led_handler+0xd8>
		{
			if(! strcmp( (char*)cmd->payload,"none"))
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	492e      	ldr	r1, [pc, #184]	; (8001734 <led_handler+0x10c>)
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe fda7 	bl	80001d0 <strcmp>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d102      	bne.n	800168e <led_handler+0x66>
				led_effect_stop();
 8001688:	f7fe ff86 	bl	8000598 <led_effect_stop>
 800168c:	e040      	b.n	8001710 <led_handler+0xe8>
			else if(! strcmp( (char*)cmd->payload,"e1"))
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	4929      	ldr	r1, [pc, #164]	; (8001738 <led_handler+0x110>)
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe fd9c 	bl	80001d0 <strcmp>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d103      	bne.n	80016a6 <led_handler+0x7e>
				led_effect(1);
 800169e:	2001      	movs	r0, #1
 80016a0:	f7fe ff9a 	bl	80005d8 <led_effect>
 80016a4:	e034      	b.n	8001710 <led_handler+0xe8>
			else if (! strcmp( (char*)cmd->payload,"e2"))
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	4924      	ldr	r1, [pc, #144]	; (800173c <led_handler+0x114>)
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe fd90 	bl	80001d0 <strcmp>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d103      	bne.n	80016be <led_handler+0x96>
				led_effect(2);
 80016b6:	2002      	movs	r0, #2
 80016b8:	f7fe ff8e 	bl	80005d8 <led_effect>
 80016bc:	e028      	b.n	8001710 <led_handler+0xe8>
			else if(! strcmp( (char*)cmd->payload,"e3"))
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	491f      	ldr	r1, [pc, #124]	; (8001740 <led_handler+0x118>)
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe fd84 	bl	80001d0 <strcmp>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d103      	bne.n	80016d6 <led_handler+0xae>
				led_effect(3);
 80016ce:	2003      	movs	r0, #3
 80016d0:	f7fe ff82 	bl	80005d8 <led_effect>
 80016d4:	e01c      	b.n	8001710 <led_handler+0xe8>
			else if (! strcmp( (char*)cmd->payload,"e4"))
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	491a      	ldr	r1, [pc, #104]	; (8001744 <led_handler+0x11c>)
 80016da:	4618      	mov	r0, r3
 80016dc:	f7fe fd78 	bl	80001d0 <strcmp>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d103      	bne.n	80016ee <led_handler+0xc6>
				led_effect(4);
 80016e6:	2004      	movs	r0, #4
 80016e8:	f7fe ff76 	bl	80005d8 <led_effect>
 80016ec:	e010      	b.n	8001710 <led_handler+0xe8>
			else
				xQueueSend(q_print,&msg_inv, portMAX_DELAY);
 80016ee:	4b10      	ldr	r3, [pc, #64]	; (8001730 <led_handler+0x108>)
 80016f0:	6818      	ldr	r0, [r3, #0]
 80016f2:	2300      	movs	r3, #0
 80016f4:	f04f 32ff 	mov.w	r2, #4294967295
 80016f8:	4913      	ldr	r1, [pc, #76]	; (8001748 <led_handler+0x120>)
 80016fa:	f003 faaf 	bl	8004c5c <xQueueGenericSend>
 80016fe:	e007      	b.n	8001710 <led_handler+0xe8>
		}
		else
		{
			xQueueSend(q_print,&msg_inv, portMAX_DELAY);
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <led_handler+0x108>)
 8001702:	6818      	ldr	r0, [r3, #0]
 8001704:	2300      	movs	r3, #0
 8001706:	f04f 32ff 	mov.w	r2, #4294967295
 800170a:	490f      	ldr	r1, [pc, #60]	; (8001748 <led_handler+0x120>)
 800170c:	f003 faa6 	bl	8004c5c <xQueueGenericSend>
		}
		current_state=sMainmenu;
 8001710:	4b0e      	ldr	r3, [pc, #56]	; (800174c <led_handler+0x124>)
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]

		xTaskNotify(menue_handle,0,eNoAction);
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <led_handler+0x128>)
 8001718:	6818      	ldr	r0, [r3, #0]
 800171a:	2300      	movs	r3, #0
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	2300      	movs	r3, #0
 8001720:	2200      	movs	r2, #0
 8001722:	2100      	movs	r1, #0
 8001724:	f004 fdce 	bl	80062c4 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001728:	e784      	b.n	8001634 <led_handler+0xc>
 800172a:	bf00      	nop
 800172c:	0800813c 	.word	0x0800813c
 8001730:	20012e90 	.word	0x20012e90
 8001734:	0800820c 	.word	0x0800820c
 8001738:	08008214 	.word	0x08008214
 800173c:	08008218 	.word	0x08008218
 8001740:	0800821c 	.word	0x0800821c
 8001744:	08008220 	.word	0x08008220
 8001748:	20000014 	.word	0x20000014
 800174c:	200000b0 	.word	0x200000b0
 8001750:	20012eb8 	.word	0x20012eb8

08001754 <get_number>:
	}

}

uint8_t get_number(uint8_t *p,int *len)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
	int value;
	if (*len>1)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2b01      	cmp	r3, #1
 8001764:	dd0f      	ble.n	8001786 <get_number+0x32>
	{
		value=(((p[0]-48)*10)+(p[1]-48));
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	461a      	mov	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3301      	adds	r3, #1
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	3b30      	subs	r3, #48	; 0x30
 8001780:	4413      	add	r3, r2
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	e003      	b.n	800178e <get_number+0x3a>
	}
	else
	{
		value=p[0]-48;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	3b30      	subs	r3, #48	; 0x30
 800178c:	60fb      	str	r3, [r7, #12]
	}

	return value;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	b2db      	uxtb	r3, r3
}
 8001792:	4618      	mov	r0, r3
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <rtc_handler>:

void rtc_handler(void *parameters)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b098      	sub	sp, #96	; 0x60
 80017a4:	af02      	add	r7, sp, #8
 80017a6:	6078      	str	r0, [r7, #4]

	const char* msg_rtc1="============================\n"
 80017a8:	4bb4      	ldr	r3, [pc, #720]	; (8001a7c <rtc_handler+0x2dc>)
 80017aa:	64fb      	str	r3, [r7, #76]	; 0x4c
						 "|      RTC 	 	          \n"
						 "============================\n";


	const char* msg_rtc2="  configure Time  ---->0\n"
 80017ac:	4bb4      	ldr	r3, [pc, #720]	; (8001a80 <rtc_handler+0x2e0>)
 80017ae:	64bb      	str	r3, [r7, #72]	; 0x48
						  "  configure Date  ---->1\n"
						  "  Enable reporting---->2\n"
						  "  Exit           ----->3\n"
						  "  Enter your choice :";

	const char *msg_rtc_hh="Enter hour(1-12):";
 80017b0:	4bb4      	ldr	r3, [pc, #720]	; (8001a84 <rtc_handler+0x2e4>)
 80017b2:	647b      	str	r3, [r7, #68]	; 0x44
	const char *msg_rtc_mm="Enter mins(0-59):";
 80017b4:	4bb4      	ldr	r3, [pc, #720]	; (8001a88 <rtc_handler+0x2e8>)
 80017b6:	643b      	str	r3, [r7, #64]	; 0x40
	const char *msg_rtc_ss="Enter seconds(0-59):";
 80017b8:	4bb4      	ldr	r3, [pc, #720]	; (8001a8c <rtc_handler+0x2ec>)
 80017ba:	63fb      	str	r3, [r7, #60]	; 0x3c

	const char *msg_rtc_dd="Enter date(1-31):";
 80017bc:	4bb4      	ldr	r3, [pc, #720]	; (8001a90 <rtc_handler+0x2f0>)
 80017be:	63bb      	str	r3, [r7, #56]	; 0x38
	const char *msg_rtc_mo="Enter month(1-12):";
 80017c0:	4bb4      	ldr	r3, [pc, #720]	; (8001a94 <rtc_handler+0x2f4>)
 80017c2:	637b      	str	r3, [r7, #52]	; 0x34
	const char *msg_rtc_dow="Enter day(1-7 sun=1):";
 80017c4:	4bb4      	ldr	r3, [pc, #720]	; (8001a98 <rtc_handler+0x2f8>)
 80017c6:	633b      	str	r3, [r7, #48]	; 0x30
	const char *msg_rtc_yr="Enter year(0-99)";
 80017c8:	4bb4      	ldr	r3, [pc, #720]	; (8001a9c <rtc_handler+0x2fc>)
 80017ca:	62fb      	str	r3, [r7, #44]	; 0x2c

	const char *msg_conf="Configuration successful\n";
 80017cc:	4bb4      	ldr	r3, [pc, #720]	; (8001aa0 <rtc_handler+0x300>)
 80017ce:	62bb      	str	r3, [r7, #40]	; 0x28
	const char *msg_rtc_report="Enable time&Date reporting(y/n)?: ";
 80017d0:	4bb4      	ldr	r3, [pc, #720]	; (8001aa4 <rtc_handler+0x304>)
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
#define YEAR_CONFIG		2
#define DAY_CONFIG		3

	while(1)
	{
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80017d4:	f04f 33ff 	mov.w	r3, #4294967295
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	2300      	movs	r3, #0
 80017dc:	2200      	movs	r2, #0
 80017de:	2100      	movs	r1, #0
 80017e0:	2000      	movs	r0, #0
 80017e2:	f004 fcef 	bl	80061c4 <xTaskGenericNotifyWait>

		xQueueSend(q_print,&msg_rtc1,portMAX_DELAY);
 80017e6:	4bb0      	ldr	r3, [pc, #704]	; (8001aa8 <rtc_handler+0x308>)
 80017e8:	6818      	ldr	r0, [r3, #0]
 80017ea:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80017ee:	2300      	movs	r3, #0
 80017f0:	f04f 32ff 	mov.w	r2, #4294967295
 80017f4:	f003 fa32 	bl	8004c5c <xQueueGenericSend>
		show_time_date();
 80017f8:	f7ff fbb8 	bl	8000f6c <show_time_date>
		xQueueSend(q_print,&msg_rtc2,portMAX_DELAY);
 80017fc:	4baa      	ldr	r3, [pc, #680]	; (8001aa8 <rtc_handler+0x308>)
 80017fe:	6818      	ldr	r0, [r3, #0]
 8001800:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001804:	2300      	movs	r3, #0
 8001806:	f04f 32ff 	mov.w	r2, #4294967295
 800180a:	f003 fa27 	bl	8004c5c <xQueueGenericSend>

		while(current_state !=sMainmenu)
 800180e:	bf00      	nop
 8001810:	e186      	b.n	8001b20 <rtc_handler+0x380>
		{
			xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8001812:	f107 0320 	add.w	r3, r7, #32
 8001816:	f04f 32ff 	mov.w	r2, #4294967295
 800181a:	9200      	str	r2, [sp, #0]
 800181c:	2200      	movs	r2, #0
 800181e:	2100      	movs	r1, #0
 8001820:	2000      	movs	r0, #0
 8001822:	f004 fccf 	bl	80061c4 <xTaskGenericNotifyWait>

			cmd=(command_t*)cmd_addr;
 8001826:	6a3b      	ldr	r3, [r7, #32]
 8001828:	657b      	str	r3, [r7, #84]	; 0x54

			switch(current_state)
 800182a:	4ba0      	ldr	r3, [pc, #640]	; (8001aac <rtc_handler+0x30c>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	3b02      	subs	r3, #2
 8001830:	2b03      	cmp	r3, #3
 8001832:	f200 8175 	bhi.w	8001b20 <rtc_handler+0x380>
 8001836:	a201      	add	r2, pc, #4	; (adr r2, 800183c <rtc_handler+0x9c>)
 8001838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183c:	0800184d 	.word	0x0800184d
 8001840:	08001903 	.word	0x08001903
 8001844:	080019d9 	.word	0x080019d9
 8001848:	08001b1f 	.word	0x08001b1f
			{
			case sRtcMenu:
			{
				if (cmd->len==1)
 800184c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d14a      	bne.n	80018ea <rtc_handler+0x14a>
				{
					menu_code=cmd->payload[0]-48;
 8001854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	3b30      	subs	r3, #48	; 0x30
 800185a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
					switch(menu_code)
 800185e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001862:	2b03      	cmp	r3, #3
 8001864:	d835      	bhi.n	80018d2 <rtc_handler+0x132>
 8001866:	a201      	add	r2, pc, #4	; (adr r2, 800186c <rtc_handler+0xcc>)
 8001868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800186c:	0800187d 	.word	0x0800187d
 8001870:	08001897 	.word	0x08001897
 8001874:	080018b1 	.word	0x080018b1
 8001878:	080018cb 	.word	0x080018cb
					{
						case 0:
						{
							current_state= sRtcTimeConfig;
 800187c:	4b8b      	ldr	r3, [pc, #556]	; (8001aac <rtc_handler+0x30c>)
 800187e:	2203      	movs	r2, #3
 8001880:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_hh,portMAX_DELAY );
 8001882:	4b89      	ldr	r3, [pc, #548]	; (8001aa8 <rtc_handler+0x308>)
 8001884:	6818      	ldr	r0, [r3, #0]
 8001886:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800188a:	2300      	movs	r3, #0
 800188c:	f04f 32ff 	mov.w	r2, #4294967295
 8001890:	f003 f9e4 	bl	8004c5c <xQueueGenericSend>
							break;
 8001894:	e034      	b.n	8001900 <rtc_handler+0x160>
						}

						case 1:
						{
							current_state= SRtcDateConfig;
 8001896:	4b85      	ldr	r3, [pc, #532]	; (8001aac <rtc_handler+0x30c>)
 8001898:	2204      	movs	r2, #4
 800189a:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_dd,portMAX_DELAY );
 800189c:	4b82      	ldr	r3, [pc, #520]	; (8001aa8 <rtc_handler+0x308>)
 800189e:	6818      	ldr	r0, [r3, #0]
 80018a0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80018a4:	2300      	movs	r3, #0
 80018a6:	f04f 32ff 	mov.w	r2, #4294967295
 80018aa:	f003 f9d7 	bl	8004c5c <xQueueGenericSend>
							break;
 80018ae:	e027      	b.n	8001900 <rtc_handler+0x160>
						}


						case 2:
						{
							current_state=sRtcReport;
 80018b0:	4b7e      	ldr	r3, [pc, #504]	; (8001aac <rtc_handler+0x30c>)
 80018b2:	2205      	movs	r2, #5
 80018b4:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_report, portMAX_DELAY);
 80018b6:	4b7c      	ldr	r3, [pc, #496]	; (8001aa8 <rtc_handler+0x308>)
 80018b8:	6818      	ldr	r0, [r3, #0]
 80018ba:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80018be:	2300      	movs	r3, #0
 80018c0:	f04f 32ff 	mov.w	r2, #4294967295
 80018c4:	f003 f9ca 	bl	8004c5c <xQueueGenericSend>
							break;
 80018c8:	e01a      	b.n	8001900 <rtc_handler+0x160>
						}

						case 3:
						{
							current_state= sMainmenu;
 80018ca:	4b78      	ldr	r3, [pc, #480]	; (8001aac <rtc_handler+0x30c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
							break;
 80018d0:	e016      	b.n	8001900 <rtc_handler+0x160>
						}
						default:
						{
							current_state= sMainmenu;
 80018d2:	4b76      	ldr	r3, [pc, #472]	; (8001aac <rtc_handler+0x30c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80018d8:	4b73      	ldr	r3, [pc, #460]	; (8001aa8 <rtc_handler+0x308>)
 80018da:	6818      	ldr	r0, [r3, #0]
 80018dc:	2300      	movs	r3, #0
 80018de:	f04f 32ff 	mov.w	r2, #4294967295
 80018e2:	4973      	ldr	r1, [pc, #460]	; (8001ab0 <rtc_handler+0x310>)
 80018e4:	f003 f9ba 	bl	8004c5c <xQueueGenericSend>
 80018e8:	e11a      	b.n	8001b20 <rtc_handler+0x380>

					}
				}
				else
					{
					current_state= sMainmenu;
 80018ea:	4b70      	ldr	r3, [pc, #448]	; (8001aac <rtc_handler+0x30c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
					xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80018f0:	4b6d      	ldr	r3, [pc, #436]	; (8001aa8 <rtc_handler+0x308>)
 80018f2:	6818      	ldr	r0, [r3, #0]
 80018f4:	2300      	movs	r3, #0
 80018f6:	f04f 32ff 	mov.w	r2, #4294967295
 80018fa:	496d      	ldr	r1, [pc, #436]	; (8001ab0 <rtc_handler+0x310>)
 80018fc:	f003 f9ae 	bl	8004c5c <xQueueGenericSend>
					}

			break;
 8001900:	e10e      	b.n	8001b20 <rtc_handler+0x380>
			}

			case sRtcTimeConfig:
			{
				switch(rtc_state)
 8001902:	4b6c      	ldr	r3, [pc, #432]	; (8001ab4 <rtc_handler+0x314>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2b02      	cmp	r3, #2
 8001908:	d033      	beq.n	8001972 <rtc_handler+0x1d2>
 800190a:	2b02      	cmp	r3, #2
 800190c:	f300 8108 	bgt.w	8001b20 <rtc_handler+0x380>
 8001910:	2b00      	cmp	r3, #0
 8001912:	d002      	beq.n	800191a <rtc_handler+0x17a>
 8001914:	2b01      	cmp	r3, #1
 8001916:	d016      	beq.n	8001946 <rtc_handler+0x1a6>
 8001918:	e102      	b.n	8001b20 <rtc_handler+0x380>
				{
				case HH_CONFIG:{
					time.Hours= get_number(cmd->payload,(int*)cmd->len );
 800191a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800191c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	4619      	mov	r1, r3
 8001922:	4610      	mov	r0, r2
 8001924:	f7ff ff16 	bl	8001754 <get_number>
 8001928:	4603      	mov	r3, r0
 800192a:	733b      	strb	r3, [r7, #12]
					rtc_state=MM_CONFIG;
 800192c:	4b61      	ldr	r3, [pc, #388]	; (8001ab4 <rtc_handler+0x314>)
 800192e:	2201      	movs	r2, #1
 8001930:	601a      	str	r2, [r3, #0]
					xQueueSend(q_print, &msg_rtc_mm,portMAX_DELAY);
 8001932:	4b5d      	ldr	r3, [pc, #372]	; (8001aa8 <rtc_handler+0x308>)
 8001934:	6818      	ldr	r0, [r3, #0]
 8001936:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800193a:	2300      	movs	r3, #0
 800193c:	f04f 32ff 	mov.w	r2, #4294967295
 8001940:	f003 f98c 	bl	8004c5c <xQueueGenericSend>
					break;}
 8001944:	e047      	b.n	80019d6 <rtc_handler+0x236>
				case MM_CONFIG:{
					time.Minutes= get_number(cmd->payload,(int*)cmd->len);
 8001946:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	4619      	mov	r1, r3
 800194e:	4610      	mov	r0, r2
 8001950:	f7ff ff00 	bl	8001754 <get_number>
 8001954:	4603      	mov	r3, r0
 8001956:	737b      	strb	r3, [r7, #13]
					rtc_state= SS_CONFIG;
 8001958:	4b56      	ldr	r3, [pc, #344]	; (8001ab4 <rtc_handler+0x314>)
 800195a:	2202      	movs	r2, #2
 800195c:	601a      	str	r2, [r3, #0]
					xQueueSend(q_print,&msg_rtc_ss,portMAX_DELAY);
 800195e:	4b52      	ldr	r3, [pc, #328]	; (8001aa8 <rtc_handler+0x308>)
 8001960:	6818      	ldr	r0, [r3, #0]
 8001962:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001966:	2300      	movs	r3, #0
 8001968:	f04f 32ff 	mov.w	r2, #4294967295
 800196c:	f003 f976 	bl	8004c5c <xQueueGenericSend>
					break;}
 8001970:	e031      	b.n	80019d6 <rtc_handler+0x236>
				case SS_CONFIG:{
					time.Seconds= get_number(cmd->payload,(int*)cmd->len);
 8001972:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	4619      	mov	r1, r3
 800197a:	4610      	mov	r0, r2
 800197c:	f7ff feea 	bl	8001754 <get_number>
 8001980:	4603      	mov	r3, r0
 8001982:	73bb      	strb	r3, [r7, #14]
					if(! validate_rtc_information(&time, NULL))
 8001984:	f107 030c 	add.w	r3, r7, #12
 8001988:	2100      	movs	r1, #0
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff fb82 	bl	8001094 <validate_rtc_information>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d110      	bne.n	80019b8 <rtc_handler+0x218>
					{
						rtc_configure_time(&time);
 8001996:	f107 030c 	add.w	r3, r7, #12
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fb52 	bl	8001044 <rtc_configure_time>
						xQueueSend(q_print,&msg_conf,portMAX_DELAY);
 80019a0:	4b41      	ldr	r3, [pc, #260]	; (8001aa8 <rtc_handler+0x308>)
 80019a2:	6818      	ldr	r0, [r3, #0]
 80019a4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80019a8:	2300      	movs	r3, #0
 80019aa:	f04f 32ff 	mov.w	r2, #4294967295
 80019ae:	f003 f955 	bl	8004c5c <xQueueGenericSend>
						show_time_date();
 80019b2:	f7ff fadb 	bl	8000f6c <show_time_date>
 80019b6:	e007      	b.n	80019c8 <rtc_handler+0x228>
					}
					else
						xQueueSend(q_print,&msg_inv ,portMAX_DELAY);
 80019b8:	4b3b      	ldr	r3, [pc, #236]	; (8001aa8 <rtc_handler+0x308>)
 80019ba:	6818      	ldr	r0, [r3, #0]
 80019bc:	2300      	movs	r3, #0
 80019be:	f04f 32ff 	mov.w	r2, #4294967295
 80019c2:	493b      	ldr	r1, [pc, #236]	; (8001ab0 <rtc_handler+0x310>)
 80019c4:	f003 f94a 	bl	8004c5c <xQueueGenericSend>

					current_state= sMainmenu;
 80019c8:	4b38      	ldr	r3, [pc, #224]	; (8001aac <rtc_handler+0x30c>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]
					rtc_state=0;
 80019ce:	4b39      	ldr	r3, [pc, #228]	; (8001ab4 <rtc_handler+0x314>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
					break;}
 80019d4:	bf00      	nop


				}

			break;}
 80019d6:	e0a3      	b.n	8001b20 <rtc_handler+0x380>

			case SRtcDateConfig:
			{
				switch(rtc_state)
 80019d8:	4b36      	ldr	r3, [pc, #216]	; (8001ab4 <rtc_handler+0x314>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b03      	cmp	r3, #3
 80019de:	f200 809f 	bhi.w	8001b20 <rtc_handler+0x380>
 80019e2:	a201      	add	r2, pc, #4	; (adr r2, 80019e8 <rtc_handler+0x248>)
 80019e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e8:	080019f9 	.word	0x080019f9
 80019ec:	08001a25 	.word	0x08001a25
 80019f0:	08001ab9 	.word	0x08001ab9
 80019f4:	08001a51 	.word	0x08001a51
				{
				case DATE_CONFIG:{
					date.Date= get_number(cmd->payload, (int*)cmd->len);
 80019f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80019fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	4619      	mov	r1, r3
 8001a00:	4610      	mov	r0, r2
 8001a02:	f7ff fea7 	bl	8001754 <get_number>
 8001a06:	4603      	mov	r3, r0
 8001a08:	72bb      	strb	r3, [r7, #10]
					rtc_state=MONTH_CONFIG;
 8001a0a:	4b2a      	ldr	r3, [pc, #168]	; (8001ab4 <rtc_handler+0x314>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]
					xQueueSend(q_print,&msg_rtc_mo,portMAX_DELAY);
 8001a10:	4b25      	ldr	r3, [pc, #148]	; (8001aa8 <rtc_handler+0x308>)
 8001a12:	6818      	ldr	r0, [r3, #0]
 8001a14:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a1e:	f003 f91d 	bl	8004c5c <xQueueGenericSend>
					break;}
 8001a22:	e07b      	b.n	8001b1c <rtc_handler+0x37c>

				case MONTH_CONFIG:{
					date.Month= get_number(cmd->payload,(int*) cmd->len);
 8001a24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	f7ff fe91 	bl	8001754 <get_number>
 8001a32:	4603      	mov	r3, r0
 8001a34:	727b      	strb	r3, [r7, #9]
					rtc_state= DAY_CONFIG;
 8001a36:	4b1f      	ldr	r3, [pc, #124]	; (8001ab4 <rtc_handler+0x314>)
 8001a38:	2203      	movs	r2, #3
 8001a3a:	601a      	str	r2, [r3, #0]
					xQueueSend(q_print,&msg_rtc_dow,portMAX_DELAY);
 8001a3c:	4b1a      	ldr	r3, [pc, #104]	; (8001aa8 <rtc_handler+0x308>)
 8001a3e:	6818      	ldr	r0, [r3, #0]
 8001a40:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001a44:	2300      	movs	r3, #0
 8001a46:	f04f 32ff 	mov.w	r2, #4294967295
 8001a4a:	f003 f907 	bl	8004c5c <xQueueGenericSend>
					break;}
 8001a4e:	e065      	b.n	8001b1c <rtc_handler+0x37c>
				case DAY_CONFIG:{
					date.WeekDay= get_number(cmd->payload, (int*)cmd->len);
 8001a50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001a52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	4619      	mov	r1, r3
 8001a58:	4610      	mov	r0, r2
 8001a5a:	f7ff fe7b 	bl	8001754 <get_number>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	723b      	strb	r3, [r7, #8]
					rtc_state= YEAR_CONFIG;
 8001a62:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <rtc_handler+0x314>)
 8001a64:	2202      	movs	r2, #2
 8001a66:	601a      	str	r2, [r3, #0]
					xQueueSend(q_print,&msg_rtc_yr,portMAX_DELAY);
 8001a68:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <rtc_handler+0x308>)
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001a70:	2300      	movs	r3, #0
 8001a72:	f04f 32ff 	mov.w	r2, #4294967295
 8001a76:	f003 f8f1 	bl	8004c5c <xQueueGenericSend>
					break;}
 8001a7a:	e04f      	b.n	8001b1c <rtc_handler+0x37c>
 8001a7c:	08008224 	.word	0x08008224
 8001a80:	08008278 	.word	0x08008278
 8001a84:	080082f4 	.word	0x080082f4
 8001a88:	08008308 	.word	0x08008308
 8001a8c:	0800831c 	.word	0x0800831c
 8001a90:	08008334 	.word	0x08008334
 8001a94:	08008348 	.word	0x08008348
 8001a98:	0800835c 	.word	0x0800835c
 8001a9c:	08008374 	.word	0x08008374
 8001aa0:	08008388 	.word	0x08008388
 8001aa4:	080083a4 	.word	0x080083a4
 8001aa8:	20012e90 	.word	0x20012e90
 8001aac:	200000b0 	.word	0x200000b0
 8001ab0:	20000014 	.word	0x20000014
 8001ab4:	20000108 	.word	0x20000108

				case YEAR_CONFIG:{
					date.Year= get_number(cmd->payload,(int*) cmd->len);
 8001ab8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001aba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	f7ff fe47 	bl	8001754 <get_number>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	72fb      	strb	r3, [r7, #11]
					if(!validate_rtc_information(NULL, &date))
 8001aca:	f107 0308 	add.w	r3, r7, #8
 8001ace:	4619      	mov	r1, r3
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	f7ff fadf 	bl	8001094 <validate_rtc_information>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d110      	bne.n	8001afe <rtc_handler+0x35e>
					{
						rtc_configure_date(&date);
 8001adc:	f107 0308 	add.w	r3, r7, #8
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fac7 	bl	8001074 <rtc_configure_date>
						xQueueSend(q_print,&msg_conf,portMAX_DELAY);
 8001ae6:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <rtc_handler+0x3a0>)
 8001ae8:	6818      	ldr	r0, [r3, #0]
 8001aea:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001aee:	2300      	movs	r3, #0
 8001af0:	f04f 32ff 	mov.w	r2, #4294967295
 8001af4:	f003 f8b2 	bl	8004c5c <xQueueGenericSend>
						show_time_date();
 8001af8:	f7ff fa38 	bl	8000f6c <show_time_date>
 8001afc:	e007      	b.n	8001b0e <rtc_handler+0x36e>
					}
					else
						xQueueSend(q_print,&msg_inv ,portMAX_DELAY);
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <rtc_handler+0x3a0>)
 8001b00:	6818      	ldr	r0, [r3, #0]
 8001b02:	2300      	movs	r3, #0
 8001b04:	f04f 32ff 	mov.w	r2, #4294967295
 8001b08:	490e      	ldr	r1, [pc, #56]	; (8001b44 <rtc_handler+0x3a4>)
 8001b0a:	f003 f8a7 	bl	8004c5c <xQueueGenericSend>

					current_state= sMainmenu;
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <rtc_handler+0x3a8>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]
					rtc_state=0;
 8001b14:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <rtc_handler+0x3ac>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
					break;}
 8001b1a:	bf00      	nop
				}

			break;}
 8001b1c:	e000      	b.n	8001b20 <rtc_handler+0x380>

			case sRtcReport:
			{

			break;
 8001b1e:	bf00      	nop
		while(current_state !=sMainmenu)
 8001b20:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <rtc_handler+0x3a8>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f47f ae74 	bne.w	8001812 <rtc_handler+0x72>
			}


		//while(current_state !=sMainmenu) end here
		}
		xTaskNotify(menue_handle,0,eNoAction);
 8001b2a:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <rtc_handler+0x3b0>)
 8001b2c:	6818      	ldr	r0, [r3, #0]
 8001b2e:	2300      	movs	r3, #0
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	2300      	movs	r3, #0
 8001b34:	2200      	movs	r2, #0
 8001b36:	2100      	movs	r1, #0
 8001b38:	f004 fbc4 	bl	80062c4 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001b3c:	e64a      	b.n	80017d4 <rtc_handler+0x34>
 8001b3e:	bf00      	nop
 8001b40:	20012e90 	.word	0x20012e90
 8001b44:	20000014 	.word	0x20000014
 8001b48:	200000b0 	.word	0x200000b0
 8001b4c:	20000108 	.word	0x20000108
 8001b50:	20012eb8 	.word	0x20012eb8

08001b54 <print_handler>:
//While super loop end here
}
}

void print_handler(void *parameters)
{
 8001b54:	b590      	push	{r4, r7, lr}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]

	uint32_t *msg;
	while(1)
	{
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <print_handler+0x38>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f107 010c 	add.w	r1, r7, #12
 8001b64:	f04f 32ff 	mov.w	r2, #4294967295
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f003 fa1f 	bl	8004fac <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg), HAL_MAX_DELAY);
 8001b6e:	68fc      	ldr	r4, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fb36 	bl	80001e4 <strlen>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b80:	4621      	mov	r1, r4
 8001b82:	4803      	ldr	r0, [pc, #12]	; (8001b90 <print_handler+0x3c>)
 8001b84:	f001 ff51 	bl	8003a2a <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001b88:	e7e8      	b.n	8001b5c <print_handler+0x8>
 8001b8a:	bf00      	nop
 8001b8c:	20012e90 	.word	0x20012e90
 8001b90:	20012ebc 	.word	0x20012ebc

08001b94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b98:	480d      	ldr	r0, [pc, #52]	; (8001bd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b9a:	490e      	ldr	r1, [pc, #56]	; (8001bd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b9c:	4a0e      	ldr	r2, [pc, #56]	; (8001bd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba0:	e002      	b.n	8001ba8 <LoopCopyDataInit>

08001ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ba6:	3304      	adds	r3, #4

08001ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bac:	d3f9      	bcc.n	8001ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bae:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bb0:	4c0b      	ldr	r4, [pc, #44]	; (8001be0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb4:	e001      	b.n	8001bba <LoopFillZerobss>

08001bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb8:	3204      	adds	r2, #4

08001bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bbc:	d3fb      	bcc.n	8001bb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bbe:	f7ff fbf7 	bl	80013b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bc2:	f005 fda7 	bl	8007714 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bc6:	f7fe fe1d 	bl	8000804 <main>
  bx  lr    
 8001bca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001bd8:	0800843c 	.word	0x0800843c
  ldr r2, =_sbss
 8001bdc:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001be0:	20012fac 	.word	0x20012fac

08001be4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001be4:	e7fe      	b.n	8001be4 <ADC_IRQHandler>
	...

08001be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bec:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <HAL_Init+0x40>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0d      	ldr	r2, [pc, #52]	; (8001c28 <HAL_Init+0x40>)
 8001bf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <HAL_Init+0x40>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a0a      	ldr	r2, [pc, #40]	; (8001c28 <HAL_Init+0x40>)
 8001bfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c04:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <HAL_Init+0x40>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a07      	ldr	r2, [pc, #28]	; (8001c28 <HAL_Init+0x40>)
 8001c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c10:	2003      	movs	r0, #3
 8001c12:	f000 f8d8 	bl	8001dc6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c16:	2000      	movs	r0, #0
 8001c18:	f7ff fb10 	bl	800123c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c1c:	f7ff fa6c 	bl	80010f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40023c00 	.word	0x40023c00

08001c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_IncTick+0x20>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	461a      	mov	r2, r3
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_IncTick+0x24>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	4a04      	ldr	r2, [pc, #16]	; (8001c50 <HAL_IncTick+0x24>)
 8001c3e:	6013      	str	r3, [r2, #0]
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	2000001c 	.word	0x2000001c
 8001c50:	20012f58 	.word	0x20012f58

08001c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return uwTick;
 8001c58:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <HAL_GetTick+0x14>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	20012f58 	.word	0x20012f58

08001c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c88:	4013      	ands	r3, r2
 8001c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c9e:	4a04      	ldr	r2, [pc, #16]	; (8001cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	60d3      	str	r3, [r2, #12]
}
 8001ca4:	bf00      	nop
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb8:	4b04      	ldr	r3, [pc, #16]	; (8001ccc <__NVIC_GetPriorityGrouping+0x18>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	0a1b      	lsrs	r3, r3, #8
 8001cbe:	f003 0307 	and.w	r3, r3, #7
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	db0b      	blt.n	8001cfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	f003 021f 	and.w	r2, r3, #31
 8001ce8:	4907      	ldr	r1, [pc, #28]	; (8001d08 <__NVIC_EnableIRQ+0x38>)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	095b      	lsrs	r3, r3, #5
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	e000e100 	.word	0xe000e100

08001d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	6039      	str	r1, [r7, #0]
 8001d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	db0a      	blt.n	8001d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	490c      	ldr	r1, [pc, #48]	; (8001d58 <__NVIC_SetPriority+0x4c>)
 8001d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2a:	0112      	lsls	r2, r2, #4
 8001d2c:	b2d2      	uxtb	r2, r2
 8001d2e:	440b      	add	r3, r1
 8001d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d34:	e00a      	b.n	8001d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	4908      	ldr	r1, [pc, #32]	; (8001d5c <__NVIC_SetPriority+0x50>)
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	3b04      	subs	r3, #4
 8001d44:	0112      	lsls	r2, r2, #4
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	440b      	add	r3, r1
 8001d4a:	761a      	strb	r2, [r3, #24]
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	e000e100 	.word	0xe000e100
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b089      	sub	sp, #36	; 0x24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	f1c3 0307 	rsb	r3, r3, #7
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	bf28      	it	cs
 8001d7e:	2304      	movcs	r3, #4
 8001d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	3304      	adds	r3, #4
 8001d86:	2b06      	cmp	r3, #6
 8001d88:	d902      	bls.n	8001d90 <NVIC_EncodePriority+0x30>
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	3b03      	subs	r3, #3
 8001d8e:	e000      	b.n	8001d92 <NVIC_EncodePriority+0x32>
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d94:	f04f 32ff 	mov.w	r2, #4294967295
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43da      	mvns	r2, r3
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	401a      	ands	r2, r3
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	fa01 f303 	lsl.w	r3, r1, r3
 8001db2:	43d9      	mvns	r1, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db8:	4313      	orrs	r3, r2
         );
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3724      	adds	r7, #36	; 0x24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff ff4c 	bl	8001c6c <__NVIC_SetPriorityGrouping>
}
 8001dd4:	bf00      	nop
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
 8001de8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dee:	f7ff ff61 	bl	8001cb4 <__NVIC_GetPriorityGrouping>
 8001df2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	68b9      	ldr	r1, [r7, #8]
 8001df8:	6978      	ldr	r0, [r7, #20]
 8001dfa:	f7ff ffb1 	bl	8001d60 <NVIC_EncodePriority>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e04:	4611      	mov	r1, r2
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff ff80 	bl	8001d0c <__NVIC_SetPriority>
}
 8001e0c:	bf00      	nop
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff ff54 	bl	8001cd0 <__NVIC_EnableIRQ>
}
 8001e28:	bf00      	nop
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e3e:	f7ff ff09 	bl	8001c54 <HAL_GetTick>
 8001e42:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d008      	beq.n	8001e62 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2280      	movs	r2, #128	; 0x80
 8001e54:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e052      	b.n	8001f08 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 0216 	bic.w	r2, r2, #22
 8001e70:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	695a      	ldr	r2, [r3, #20]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e80:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d103      	bne.n	8001e92 <HAL_DMA_Abort+0x62>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d007      	beq.n	8001ea2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0208 	bic.w	r2, r2, #8
 8001ea0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 0201 	bic.w	r2, r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eb2:	e013      	b.n	8001edc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eb4:	f7ff fece 	bl	8001c54 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b05      	cmp	r3, #5
 8001ec0:	d90c      	bls.n	8001edc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2220      	movs	r2, #32
 8001ec6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2203      	movs	r2, #3
 8001ecc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e015      	b.n	8001f08 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1e4      	bne.n	8001eb4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eee:	223f      	movs	r2, #63	; 0x3f
 8001ef0:	409a      	lsls	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d004      	beq.n	8001f2e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2280      	movs	r2, #128	; 0x80
 8001f28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e00c      	b.n	8001f48 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2205      	movs	r2, #5
 8001f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 0201 	bic.w	r2, r2, #1
 8001f44:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b089      	sub	sp, #36	; 0x24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f66:	2300      	movs	r3, #0
 8001f68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61fb      	str	r3, [r7, #28]
 8001f6e:	e16b      	b.n	8002248 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f70:	2201      	movs	r2, #1
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	4013      	ands	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	f040 815a 	bne.w	8002242 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d005      	beq.n	8001fa6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d130      	bne.n	8002008 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	2203      	movs	r2, #3
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	68da      	ldr	r2, [r3, #12]
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fdc:	2201      	movs	r2, #1
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	091b      	lsrs	r3, r3, #4
 8001ff2:	f003 0201 	and.w	r2, r3, #1
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 0303 	and.w	r3, r3, #3
 8002010:	2b03      	cmp	r3, #3
 8002012:	d017      	beq.n	8002044 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	2203      	movs	r2, #3
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d123      	bne.n	8002098 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	08da      	lsrs	r2, r3, #3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3208      	adds	r2, #8
 8002058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800205c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	220f      	movs	r2, #15
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	691a      	ldr	r2, [r3, #16]
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	08da      	lsrs	r2, r3, #3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3208      	adds	r2, #8
 8002092:	69b9      	ldr	r1, [r7, #24]
 8002094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	2203      	movs	r2, #3
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 0203 	and.w	r2, r3, #3
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 80b4 	beq.w	8002242 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	4b60      	ldr	r3, [pc, #384]	; (8002260 <HAL_GPIO_Init+0x30c>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e2:	4a5f      	ldr	r2, [pc, #380]	; (8002260 <HAL_GPIO_Init+0x30c>)
 80020e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020e8:	6453      	str	r3, [r2, #68]	; 0x44
 80020ea:	4b5d      	ldr	r3, [pc, #372]	; (8002260 <HAL_GPIO_Init+0x30c>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020f6:	4a5b      	ldr	r2, [pc, #364]	; (8002264 <HAL_GPIO_Init+0x310>)
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	089b      	lsrs	r3, r3, #2
 80020fc:	3302      	adds	r3, #2
 80020fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002102:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	220f      	movs	r2, #15
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43db      	mvns	r3, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4013      	ands	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a52      	ldr	r2, [pc, #328]	; (8002268 <HAL_GPIO_Init+0x314>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d02b      	beq.n	800217a <HAL_GPIO_Init+0x226>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a51      	ldr	r2, [pc, #324]	; (800226c <HAL_GPIO_Init+0x318>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d025      	beq.n	8002176 <HAL_GPIO_Init+0x222>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a50      	ldr	r2, [pc, #320]	; (8002270 <HAL_GPIO_Init+0x31c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d01f      	beq.n	8002172 <HAL_GPIO_Init+0x21e>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a4f      	ldr	r2, [pc, #316]	; (8002274 <HAL_GPIO_Init+0x320>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d019      	beq.n	800216e <HAL_GPIO_Init+0x21a>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a4e      	ldr	r2, [pc, #312]	; (8002278 <HAL_GPIO_Init+0x324>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d013      	beq.n	800216a <HAL_GPIO_Init+0x216>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a4d      	ldr	r2, [pc, #308]	; (800227c <HAL_GPIO_Init+0x328>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d00d      	beq.n	8002166 <HAL_GPIO_Init+0x212>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a4c      	ldr	r2, [pc, #304]	; (8002280 <HAL_GPIO_Init+0x32c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d007      	beq.n	8002162 <HAL_GPIO_Init+0x20e>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a4b      	ldr	r2, [pc, #300]	; (8002284 <HAL_GPIO_Init+0x330>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d101      	bne.n	800215e <HAL_GPIO_Init+0x20a>
 800215a:	2307      	movs	r3, #7
 800215c:	e00e      	b.n	800217c <HAL_GPIO_Init+0x228>
 800215e:	2308      	movs	r3, #8
 8002160:	e00c      	b.n	800217c <HAL_GPIO_Init+0x228>
 8002162:	2306      	movs	r3, #6
 8002164:	e00a      	b.n	800217c <HAL_GPIO_Init+0x228>
 8002166:	2305      	movs	r3, #5
 8002168:	e008      	b.n	800217c <HAL_GPIO_Init+0x228>
 800216a:	2304      	movs	r3, #4
 800216c:	e006      	b.n	800217c <HAL_GPIO_Init+0x228>
 800216e:	2303      	movs	r3, #3
 8002170:	e004      	b.n	800217c <HAL_GPIO_Init+0x228>
 8002172:	2302      	movs	r3, #2
 8002174:	e002      	b.n	800217c <HAL_GPIO_Init+0x228>
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <HAL_GPIO_Init+0x228>
 800217a:	2300      	movs	r3, #0
 800217c:	69fa      	ldr	r2, [r7, #28]
 800217e:	f002 0203 	and.w	r2, r2, #3
 8002182:	0092      	lsls	r2, r2, #2
 8002184:	4093      	lsls	r3, r2
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4313      	orrs	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800218c:	4935      	ldr	r1, [pc, #212]	; (8002264 <HAL_GPIO_Init+0x310>)
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	089b      	lsrs	r3, r3, #2
 8002192:	3302      	adds	r3, #2
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800219a:	4b3b      	ldr	r3, [pc, #236]	; (8002288 <HAL_GPIO_Init+0x334>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	43db      	mvns	r3, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4013      	ands	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021be:	4a32      	ldr	r2, [pc, #200]	; (8002288 <HAL_GPIO_Init+0x334>)
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021c4:	4b30      	ldr	r3, [pc, #192]	; (8002288 <HAL_GPIO_Init+0x334>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	43db      	mvns	r3, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4013      	ands	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021e8:	4a27      	ldr	r2, [pc, #156]	; (8002288 <HAL_GPIO_Init+0x334>)
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ee:	4b26      	ldr	r3, [pc, #152]	; (8002288 <HAL_GPIO_Init+0x334>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	43db      	mvns	r3, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4013      	ands	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002212:	4a1d      	ldr	r2, [pc, #116]	; (8002288 <HAL_GPIO_Init+0x334>)
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002218:	4b1b      	ldr	r3, [pc, #108]	; (8002288 <HAL_GPIO_Init+0x334>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	4313      	orrs	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800223c:	4a12      	ldr	r2, [pc, #72]	; (8002288 <HAL_GPIO_Init+0x334>)
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	3301      	adds	r3, #1
 8002246:	61fb      	str	r3, [r7, #28]
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	2b0f      	cmp	r3, #15
 800224c:	f67f ae90 	bls.w	8001f70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002250:	bf00      	nop
 8002252:	bf00      	nop
 8002254:	3724      	adds	r7, #36	; 0x24
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	40023800 	.word	0x40023800
 8002264:	40013800 	.word	0x40013800
 8002268:	40020000 	.word	0x40020000
 800226c:	40020400 	.word	0x40020400
 8002270:	40020800 	.word	0x40020800
 8002274:	40020c00 	.word	0x40020c00
 8002278:	40021000 	.word	0x40021000
 800227c:	40021400 	.word	0x40021400
 8002280:	40021800 	.word	0x40021800
 8002284:	40021c00 	.word	0x40021c00
 8002288:	40013c00 	.word	0x40013c00

0800228c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	807b      	strh	r3, [r7, #2]
 8002298:	4613      	mov	r3, r2
 800229a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800229c:	787b      	ldrb	r3, [r7, #1]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022a2:	887a      	ldrh	r2, [r7, #2]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022a8:	e003      	b.n	80022b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022aa:	887b      	ldrh	r3, [r7, #2]
 80022ac:	041a      	lsls	r2, r3, #16
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	619a      	str	r2, [r3, #24]
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
	...

080022c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e264      	b.n	800279c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d075      	beq.n	80023ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022de:	4ba3      	ldr	r3, [pc, #652]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 030c 	and.w	r3, r3, #12
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	d00c      	beq.n	8002304 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ea:	4ba0      	ldr	r3, [pc, #640]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022f2:	2b08      	cmp	r3, #8
 80022f4:	d112      	bne.n	800231c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022f6:	4b9d      	ldr	r3, [pc, #628]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002302:	d10b      	bne.n	800231c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002304:	4b99      	ldr	r3, [pc, #612]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d05b      	beq.n	80023c8 <HAL_RCC_OscConfig+0x108>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d157      	bne.n	80023c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e23f      	b.n	800279c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002324:	d106      	bne.n	8002334 <HAL_RCC_OscConfig+0x74>
 8002326:	4b91      	ldr	r3, [pc, #580]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a90      	ldr	r2, [pc, #576]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 800232c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	e01d      	b.n	8002370 <HAL_RCC_OscConfig+0xb0>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800233c:	d10c      	bne.n	8002358 <HAL_RCC_OscConfig+0x98>
 800233e:	4b8b      	ldr	r3, [pc, #556]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a8a      	ldr	r2, [pc, #552]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 8002344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	4b88      	ldr	r3, [pc, #544]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a87      	ldr	r2, [pc, #540]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 8002350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	e00b      	b.n	8002370 <HAL_RCC_OscConfig+0xb0>
 8002358:	4b84      	ldr	r3, [pc, #528]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a83      	ldr	r2, [pc, #524]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 800235e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002362:	6013      	str	r3, [r2, #0]
 8002364:	4b81      	ldr	r3, [pc, #516]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a80      	ldr	r2, [pc, #512]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 800236a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800236e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d013      	beq.n	80023a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002378:	f7ff fc6c 	bl	8001c54 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002380:	f7ff fc68 	bl	8001c54 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b64      	cmp	r3, #100	; 0x64
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e204      	b.n	800279c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002392:	4b76      	ldr	r3, [pc, #472]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f0      	beq.n	8002380 <HAL_RCC_OscConfig+0xc0>
 800239e:	e014      	b.n	80023ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a0:	f7ff fc58 	bl	8001c54 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a8:	f7ff fc54 	bl	8001c54 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b64      	cmp	r3, #100	; 0x64
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e1f0      	b.n	800279c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ba:	4b6c      	ldr	r3, [pc, #432]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f0      	bne.n	80023a8 <HAL_RCC_OscConfig+0xe8>
 80023c6:	e000      	b.n	80023ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d063      	beq.n	800249e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023d6:	4b65      	ldr	r3, [pc, #404]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 030c 	and.w	r3, r3, #12
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00b      	beq.n	80023fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023e2:	4b62      	ldr	r3, [pc, #392]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023ea:	2b08      	cmp	r3, #8
 80023ec:	d11c      	bne.n	8002428 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ee:	4b5f      	ldr	r3, [pc, #380]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d116      	bne.n	8002428 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023fa:	4b5c      	ldr	r3, [pc, #368]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d005      	beq.n	8002412 <HAL_RCC_OscConfig+0x152>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d001      	beq.n	8002412 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e1c4      	b.n	800279c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002412:	4b56      	ldr	r3, [pc, #344]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	4952      	ldr	r1, [pc, #328]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 8002422:	4313      	orrs	r3, r2
 8002424:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002426:	e03a      	b.n	800249e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d020      	beq.n	8002472 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002430:	4b4f      	ldr	r3, [pc, #316]	; (8002570 <HAL_RCC_OscConfig+0x2b0>)
 8002432:	2201      	movs	r2, #1
 8002434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002436:	f7ff fc0d 	bl	8001c54 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800243e:	f7ff fc09 	bl	8001c54 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e1a5      	b.n	800279c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002450:	4b46      	ldr	r3, [pc, #280]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0f0      	beq.n	800243e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800245c:	4b43      	ldr	r3, [pc, #268]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	4940      	ldr	r1, [pc, #256]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 800246c:	4313      	orrs	r3, r2
 800246e:	600b      	str	r3, [r1, #0]
 8002470:	e015      	b.n	800249e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002472:	4b3f      	ldr	r3, [pc, #252]	; (8002570 <HAL_RCC_OscConfig+0x2b0>)
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002478:	f7ff fbec 	bl	8001c54 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002480:	f7ff fbe8 	bl	8001c54 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e184      	b.n	800279c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002492:	4b36      	ldr	r3, [pc, #216]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f0      	bne.n	8002480 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d030      	beq.n	800250c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d016      	beq.n	80024e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024b2:	4b30      	ldr	r3, [pc, #192]	; (8002574 <HAL_RCC_OscConfig+0x2b4>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b8:	f7ff fbcc 	bl	8001c54 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024c0:	f7ff fbc8 	bl	8001c54 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e164      	b.n	800279c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024d2:	4b26      	ldr	r3, [pc, #152]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 80024d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d0f0      	beq.n	80024c0 <HAL_RCC_OscConfig+0x200>
 80024de:	e015      	b.n	800250c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024e0:	4b24      	ldr	r3, [pc, #144]	; (8002574 <HAL_RCC_OscConfig+0x2b4>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e6:	f7ff fbb5 	bl	8001c54 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ec:	e008      	b.n	8002500 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ee:	f7ff fbb1 	bl	8001c54 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e14d      	b.n	800279c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002500:	4b1a      	ldr	r3, [pc, #104]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 8002502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1f0      	bne.n	80024ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 80a0 	beq.w	800265a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800251a:	2300      	movs	r3, #0
 800251c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800251e:	4b13      	ldr	r3, [pc, #76]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10f      	bne.n	800254a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	4b0f      	ldr	r3, [pc, #60]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	4a0e      	ldr	r2, [pc, #56]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 8002534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002538:	6413      	str	r3, [r2, #64]	; 0x40
 800253a:	4b0c      	ldr	r3, [pc, #48]	; (800256c <HAL_RCC_OscConfig+0x2ac>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002542:	60bb      	str	r3, [r7, #8]
 8002544:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002546:	2301      	movs	r3, #1
 8002548:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254a:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <HAL_RCC_OscConfig+0x2b8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002552:	2b00      	cmp	r3, #0
 8002554:	d121      	bne.n	800259a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002556:	4b08      	ldr	r3, [pc, #32]	; (8002578 <HAL_RCC_OscConfig+0x2b8>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a07      	ldr	r2, [pc, #28]	; (8002578 <HAL_RCC_OscConfig+0x2b8>)
 800255c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002560:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002562:	f7ff fb77 	bl	8001c54 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002568:	e011      	b.n	800258e <HAL_RCC_OscConfig+0x2ce>
 800256a:	bf00      	nop
 800256c:	40023800 	.word	0x40023800
 8002570:	42470000 	.word	0x42470000
 8002574:	42470e80 	.word	0x42470e80
 8002578:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800257c:	f7ff fb6a 	bl	8001c54 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e106      	b.n	800279c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258e:	4b85      	ldr	r3, [pc, #532]	; (80027a4 <HAL_RCC_OscConfig+0x4e4>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0f0      	beq.n	800257c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d106      	bne.n	80025b0 <HAL_RCC_OscConfig+0x2f0>
 80025a2:	4b81      	ldr	r3, [pc, #516]	; (80027a8 <HAL_RCC_OscConfig+0x4e8>)
 80025a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a6:	4a80      	ldr	r2, [pc, #512]	; (80027a8 <HAL_RCC_OscConfig+0x4e8>)
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	6713      	str	r3, [r2, #112]	; 0x70
 80025ae:	e01c      	b.n	80025ea <HAL_RCC_OscConfig+0x32a>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	2b05      	cmp	r3, #5
 80025b6:	d10c      	bne.n	80025d2 <HAL_RCC_OscConfig+0x312>
 80025b8:	4b7b      	ldr	r3, [pc, #492]	; (80027a8 <HAL_RCC_OscConfig+0x4e8>)
 80025ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025bc:	4a7a      	ldr	r2, [pc, #488]	; (80027a8 <HAL_RCC_OscConfig+0x4e8>)
 80025be:	f043 0304 	orr.w	r3, r3, #4
 80025c2:	6713      	str	r3, [r2, #112]	; 0x70
 80025c4:	4b78      	ldr	r3, [pc, #480]	; (80027a8 <HAL_RCC_OscConfig+0x4e8>)
 80025c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c8:	4a77      	ldr	r2, [pc, #476]	; (80027a8 <HAL_RCC_OscConfig+0x4e8>)
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	6713      	str	r3, [r2, #112]	; 0x70
 80025d0:	e00b      	b.n	80025ea <HAL_RCC_OscConfig+0x32a>
 80025d2:	4b75      	ldr	r3, [pc, #468]	; (80027a8 <HAL_RCC_OscConfig+0x4e8>)
 80025d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d6:	4a74      	ldr	r2, [pc, #464]	; (80027a8 <HAL_RCC_OscConfig+0x4e8>)
 80025d8:	f023 0301 	bic.w	r3, r3, #1
 80025dc:	6713      	str	r3, [r2, #112]	; 0x70
 80025de:	4b72      	ldr	r3, [pc, #456]	; (80027a8 <HAL_RCC_OscConfig+0x4e8>)
 80025e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e2:	4a71      	ldr	r2, [pc, #452]	; (80027a8 <HAL_RCC_OscConfig+0x4e8>)
 80025e4:	f023 0304 	bic.w	r3, r3, #4
 80025e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d015      	beq.n	800261e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f2:	f7ff fb2f 	bl	8001c54 <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f8:	e00a      	b.n	8002610 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025fa:	f7ff fb2b 	bl	8001c54 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	f241 3288 	movw	r2, #5000	; 0x1388
 8002608:	4293      	cmp	r3, r2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e0c5      	b.n	800279c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002610:	4b65      	ldr	r3, [pc, #404]	; (80027a8 <HAL_RCC_OscConfig+0x4e8>)
 8002612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0ee      	beq.n	80025fa <HAL_RCC_OscConfig+0x33a>
 800261c:	e014      	b.n	8002648 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800261e:	f7ff fb19 	bl	8001c54 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002624:	e00a      	b.n	800263c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002626:	f7ff fb15 	bl	8001c54 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	f241 3288 	movw	r2, #5000	; 0x1388
 8002634:	4293      	cmp	r3, r2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e0af      	b.n	800279c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800263c:	4b5a      	ldr	r3, [pc, #360]	; (80027a8 <HAL_RCC_OscConfig+0x4e8>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1ee      	bne.n	8002626 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002648:	7dfb      	ldrb	r3, [r7, #23]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d105      	bne.n	800265a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800264e:	4b56      	ldr	r3, [pc, #344]	; (80027a8 <HAL_RCC_OscConfig+0x4e8>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	4a55      	ldr	r2, [pc, #340]	; (80027a8 <HAL_RCC_OscConfig+0x4e8>)
 8002654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002658:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 809b 	beq.w	800279a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002664:	4b50      	ldr	r3, [pc, #320]	; (80027a8 <HAL_RCC_OscConfig+0x4e8>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f003 030c 	and.w	r3, r3, #12
 800266c:	2b08      	cmp	r3, #8
 800266e:	d05c      	beq.n	800272a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	2b02      	cmp	r3, #2
 8002676:	d141      	bne.n	80026fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002678:	4b4c      	ldr	r3, [pc, #304]	; (80027ac <HAL_RCC_OscConfig+0x4ec>)
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267e:	f7ff fae9 	bl	8001c54 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002686:	f7ff fae5 	bl	8001c54 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e081      	b.n	800279c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002698:	4b43      	ldr	r3, [pc, #268]	; (80027a8 <HAL_RCC_OscConfig+0x4e8>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1f0      	bne.n	8002686 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	69da      	ldr	r2, [r3, #28]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	431a      	orrs	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	019b      	lsls	r3, r3, #6
 80026b4:	431a      	orrs	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ba:	085b      	lsrs	r3, r3, #1
 80026bc:	3b01      	subs	r3, #1
 80026be:	041b      	lsls	r3, r3, #16
 80026c0:	431a      	orrs	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c6:	061b      	lsls	r3, r3, #24
 80026c8:	4937      	ldr	r1, [pc, #220]	; (80027a8 <HAL_RCC_OscConfig+0x4e8>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026ce:	4b37      	ldr	r3, [pc, #220]	; (80027ac <HAL_RCC_OscConfig+0x4ec>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d4:	f7ff fabe 	bl	8001c54 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026dc:	f7ff faba 	bl	8001c54 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e056      	b.n	800279c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ee:	4b2e      	ldr	r3, [pc, #184]	; (80027a8 <HAL_RCC_OscConfig+0x4e8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f0      	beq.n	80026dc <HAL_RCC_OscConfig+0x41c>
 80026fa:	e04e      	b.n	800279a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fc:	4b2b      	ldr	r3, [pc, #172]	; (80027ac <HAL_RCC_OscConfig+0x4ec>)
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002702:	f7ff faa7 	bl	8001c54 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800270a:	f7ff faa3 	bl	8001c54 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e03f      	b.n	800279c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800271c:	4b22      	ldr	r3, [pc, #136]	; (80027a8 <HAL_RCC_OscConfig+0x4e8>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1f0      	bne.n	800270a <HAL_RCC_OscConfig+0x44a>
 8002728:	e037      	b.n	800279a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d101      	bne.n	8002736 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e032      	b.n	800279c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002736:	4b1c      	ldr	r3, [pc, #112]	; (80027a8 <HAL_RCC_OscConfig+0x4e8>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d028      	beq.n	8002796 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800274e:	429a      	cmp	r2, r3
 8002750:	d121      	bne.n	8002796 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275c:	429a      	cmp	r2, r3
 800275e:	d11a      	bne.n	8002796 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002766:	4013      	ands	r3, r2
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800276c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800276e:	4293      	cmp	r3, r2
 8002770:	d111      	bne.n	8002796 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277c:	085b      	lsrs	r3, r3, #1
 800277e:	3b01      	subs	r3, #1
 8002780:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002782:	429a      	cmp	r2, r3
 8002784:	d107      	bne.n	8002796 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002790:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002792:	429a      	cmp	r2, r3
 8002794:	d001      	beq.n	800279a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e000      	b.n	800279c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40007000 	.word	0x40007000
 80027a8:	40023800 	.word	0x40023800
 80027ac:	42470060 	.word	0x42470060

080027b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e0cc      	b.n	800295e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027c4:	4b68      	ldr	r3, [pc, #416]	; (8002968 <HAL_RCC_ClockConfig+0x1b8>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d90c      	bls.n	80027ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d2:	4b65      	ldr	r3, [pc, #404]	; (8002968 <HAL_RCC_ClockConfig+0x1b8>)
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027da:	4b63      	ldr	r3, [pc, #396]	; (8002968 <HAL_RCC_ClockConfig+0x1b8>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d001      	beq.n	80027ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e0b8      	b.n	800295e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d020      	beq.n	800283a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	d005      	beq.n	8002810 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002804:	4b59      	ldr	r3, [pc, #356]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	4a58      	ldr	r2, [pc, #352]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 800280a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800280e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0308 	and.w	r3, r3, #8
 8002818:	2b00      	cmp	r3, #0
 800281a:	d005      	beq.n	8002828 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800281c:	4b53      	ldr	r3, [pc, #332]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	4a52      	ldr	r2, [pc, #328]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002822:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002826:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002828:	4b50      	ldr	r3, [pc, #320]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	494d      	ldr	r1, [pc, #308]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	4313      	orrs	r3, r2
 8002838:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d044      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d107      	bne.n	800285e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284e:	4b47      	ldr	r3, [pc, #284]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d119      	bne.n	800288e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e07f      	b.n	800295e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b02      	cmp	r3, #2
 8002864:	d003      	beq.n	800286e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800286a:	2b03      	cmp	r3, #3
 800286c:	d107      	bne.n	800287e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800286e:	4b3f      	ldr	r3, [pc, #252]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d109      	bne.n	800288e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e06f      	b.n	800295e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800287e:	4b3b      	ldr	r3, [pc, #236]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e067      	b.n	800295e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800288e:	4b37      	ldr	r3, [pc, #220]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f023 0203 	bic.w	r2, r3, #3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	4934      	ldr	r1, [pc, #208]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 800289c:	4313      	orrs	r3, r2
 800289e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028a0:	f7ff f9d8 	bl	8001c54 <HAL_GetTick>
 80028a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a6:	e00a      	b.n	80028be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a8:	f7ff f9d4 	bl	8001c54 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e04f      	b.n	800295e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028be:	4b2b      	ldr	r3, [pc, #172]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 020c 	and.w	r2, r3, #12
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d1eb      	bne.n	80028a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028d0:	4b25      	ldr	r3, [pc, #148]	; (8002968 <HAL_RCC_ClockConfig+0x1b8>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d20c      	bcs.n	80028f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028de:	4b22      	ldr	r3, [pc, #136]	; (8002968 <HAL_RCC_ClockConfig+0x1b8>)
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e6:	4b20      	ldr	r3, [pc, #128]	; (8002968 <HAL_RCC_ClockConfig+0x1b8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d001      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e032      	b.n	800295e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b00      	cmp	r3, #0
 8002902:	d008      	beq.n	8002916 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002904:	4b19      	ldr	r3, [pc, #100]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	4916      	ldr	r1, [pc, #88]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002912:	4313      	orrs	r3, r2
 8002914:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0308 	and.w	r3, r3, #8
 800291e:	2b00      	cmp	r3, #0
 8002920:	d009      	beq.n	8002936 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002922:	4b12      	ldr	r3, [pc, #72]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	490e      	ldr	r1, [pc, #56]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	4313      	orrs	r3, r2
 8002934:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002936:	f000 f821 	bl	800297c <HAL_RCC_GetSysClockFreq>
 800293a:	4602      	mov	r2, r0
 800293c:	4b0b      	ldr	r3, [pc, #44]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	091b      	lsrs	r3, r3, #4
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	490a      	ldr	r1, [pc, #40]	; (8002970 <HAL_RCC_ClockConfig+0x1c0>)
 8002948:	5ccb      	ldrb	r3, [r1, r3]
 800294a:	fa22 f303 	lsr.w	r3, r2, r3
 800294e:	4a09      	ldr	r2, [pc, #36]	; (8002974 <HAL_RCC_ClockConfig+0x1c4>)
 8002950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002952:	4b09      	ldr	r3, [pc, #36]	; (8002978 <HAL_RCC_ClockConfig+0x1c8>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f7fe fc70 	bl	800123c <HAL_InitTick>

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40023c00 	.word	0x40023c00
 800296c:	40023800 	.word	0x40023800
 8002970:	080083e0 	.word	0x080083e0
 8002974:	20000010 	.word	0x20000010
 8002978:	20000018 	.word	0x20000018

0800297c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800297c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002980:	b084      	sub	sp, #16
 8002982:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002984:	2300      	movs	r3, #0
 8002986:	607b      	str	r3, [r7, #4]
 8002988:	2300      	movs	r3, #0
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	2300      	movs	r3, #0
 800298e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002994:	4b67      	ldr	r3, [pc, #412]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 030c 	and.w	r3, r3, #12
 800299c:	2b08      	cmp	r3, #8
 800299e:	d00d      	beq.n	80029bc <HAL_RCC_GetSysClockFreq+0x40>
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	f200 80bd 	bhi.w	8002b20 <HAL_RCC_GetSysClockFreq+0x1a4>
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d002      	beq.n	80029b0 <HAL_RCC_GetSysClockFreq+0x34>
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d003      	beq.n	80029b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80029ae:	e0b7      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029b0:	4b61      	ldr	r3, [pc, #388]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80029b2:	60bb      	str	r3, [r7, #8]
       break;
 80029b4:	e0b7      	b.n	8002b26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029b6:	4b61      	ldr	r3, [pc, #388]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80029b8:	60bb      	str	r3, [r7, #8]
      break;
 80029ba:	e0b4      	b.n	8002b26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029bc:	4b5d      	ldr	r3, [pc, #372]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029c4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029c6:	4b5b      	ldr	r3, [pc, #364]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d04d      	beq.n	8002a6e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029d2:	4b58      	ldr	r3, [pc, #352]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	099b      	lsrs	r3, r3, #6
 80029d8:	461a      	mov	r2, r3
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80029e2:	f04f 0100 	mov.w	r1, #0
 80029e6:	ea02 0800 	and.w	r8, r2, r0
 80029ea:	ea03 0901 	and.w	r9, r3, r1
 80029ee:	4640      	mov	r0, r8
 80029f0:	4649      	mov	r1, r9
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	014b      	lsls	r3, r1, #5
 80029fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a00:	0142      	lsls	r2, r0, #5
 8002a02:	4610      	mov	r0, r2
 8002a04:	4619      	mov	r1, r3
 8002a06:	ebb0 0008 	subs.w	r0, r0, r8
 8002a0a:	eb61 0109 	sbc.w	r1, r1, r9
 8002a0e:	f04f 0200 	mov.w	r2, #0
 8002a12:	f04f 0300 	mov.w	r3, #0
 8002a16:	018b      	lsls	r3, r1, #6
 8002a18:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a1c:	0182      	lsls	r2, r0, #6
 8002a1e:	1a12      	subs	r2, r2, r0
 8002a20:	eb63 0301 	sbc.w	r3, r3, r1
 8002a24:	f04f 0000 	mov.w	r0, #0
 8002a28:	f04f 0100 	mov.w	r1, #0
 8002a2c:	00d9      	lsls	r1, r3, #3
 8002a2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a32:	00d0      	lsls	r0, r2, #3
 8002a34:	4602      	mov	r2, r0
 8002a36:	460b      	mov	r3, r1
 8002a38:	eb12 0208 	adds.w	r2, r2, r8
 8002a3c:	eb43 0309 	adc.w	r3, r3, r9
 8002a40:	f04f 0000 	mov.w	r0, #0
 8002a44:	f04f 0100 	mov.w	r1, #0
 8002a48:	0259      	lsls	r1, r3, #9
 8002a4a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002a4e:	0250      	lsls	r0, r2, #9
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	4610      	mov	r0, r2
 8002a56:	4619      	mov	r1, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	f04f 0300 	mov.w	r3, #0
 8002a60:	f7fd fc1e 	bl	80002a0 <__aeabi_uldivmod>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4613      	mov	r3, r2
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	e04a      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a6e:	4b31      	ldr	r3, [pc, #196]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	099b      	lsrs	r3, r3, #6
 8002a74:	461a      	mov	r2, r3
 8002a76:	f04f 0300 	mov.w	r3, #0
 8002a7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a7e:	f04f 0100 	mov.w	r1, #0
 8002a82:	ea02 0400 	and.w	r4, r2, r0
 8002a86:	ea03 0501 	and.w	r5, r3, r1
 8002a8a:	4620      	mov	r0, r4
 8002a8c:	4629      	mov	r1, r5
 8002a8e:	f04f 0200 	mov.w	r2, #0
 8002a92:	f04f 0300 	mov.w	r3, #0
 8002a96:	014b      	lsls	r3, r1, #5
 8002a98:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a9c:	0142      	lsls	r2, r0, #5
 8002a9e:	4610      	mov	r0, r2
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	1b00      	subs	r0, r0, r4
 8002aa4:	eb61 0105 	sbc.w	r1, r1, r5
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	018b      	lsls	r3, r1, #6
 8002ab2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ab6:	0182      	lsls	r2, r0, #6
 8002ab8:	1a12      	subs	r2, r2, r0
 8002aba:	eb63 0301 	sbc.w	r3, r3, r1
 8002abe:	f04f 0000 	mov.w	r0, #0
 8002ac2:	f04f 0100 	mov.w	r1, #0
 8002ac6:	00d9      	lsls	r1, r3, #3
 8002ac8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002acc:	00d0      	lsls	r0, r2, #3
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	1912      	adds	r2, r2, r4
 8002ad4:	eb45 0303 	adc.w	r3, r5, r3
 8002ad8:	f04f 0000 	mov.w	r0, #0
 8002adc:	f04f 0100 	mov.w	r1, #0
 8002ae0:	0299      	lsls	r1, r3, #10
 8002ae2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002ae6:	0290      	lsls	r0, r2, #10
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	4610      	mov	r0, r2
 8002aee:	4619      	mov	r1, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	461a      	mov	r2, r3
 8002af4:	f04f 0300 	mov.w	r3, #0
 8002af8:	f7fd fbd2 	bl	80002a0 <__aeabi_uldivmod>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4613      	mov	r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b04:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	0c1b      	lsrs	r3, r3, #16
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	3301      	adds	r3, #1
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1c:	60bb      	str	r3, [r7, #8]
      break;
 8002b1e:	e002      	b.n	8002b26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b20:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b22:	60bb      	str	r3, [r7, #8]
      break;
 8002b24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b26:	68bb      	ldr	r3, [r7, #8]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b32:	bf00      	nop
 8002b34:	40023800 	.word	0x40023800
 8002b38:	00f42400 	.word	0x00f42400
 8002b3c:	007a1200 	.word	0x007a1200

08002b40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b44:	4b03      	ldr	r3, [pc, #12]	; (8002b54 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b46:	681b      	ldr	r3, [r3, #0]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	20000010 	.word	0x20000010

08002b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b5c:	f7ff fff0 	bl	8002b40 <HAL_RCC_GetHCLKFreq>
 8002b60:	4602      	mov	r2, r0
 8002b62:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	0a9b      	lsrs	r3, r3, #10
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	4903      	ldr	r1, [pc, #12]	; (8002b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b6e:	5ccb      	ldrb	r3, [r1, r3]
 8002b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	080083f0 	.word	0x080083f0

08002b80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b84:	f7ff ffdc 	bl	8002b40 <HAL_RCC_GetHCLKFreq>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	0b5b      	lsrs	r3, r3, #13
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	4903      	ldr	r1, [pc, #12]	; (8002ba4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b96:	5ccb      	ldrb	r3, [r1, r3]
 8002b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	080083f0 	.word	0x080083f0

08002ba8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	220f      	movs	r2, #15
 8002bb6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002bb8:	4b12      	ldr	r3, [pc, #72]	; (8002c04 <HAL_RCC_GetClockConfig+0x5c>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f003 0203 	and.w	r2, r3, #3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002bc4:	4b0f      	ldr	r3, [pc, #60]	; (8002c04 <HAL_RCC_GetClockConfig+0x5c>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <HAL_RCC_GetClockConfig+0x5c>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002bdc:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <HAL_RCC_GetClockConfig+0x5c>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	08db      	lsrs	r3, r3, #3
 8002be2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002bea:	4b07      	ldr	r3, [pc, #28]	; (8002c08 <HAL_RCC_GetClockConfig+0x60>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0207 	and.w	r2, r3, #7
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	601a      	str	r2, [r3, #0]
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	40023800 	.word	0x40023800
 8002c08:	40023c00 	.word	0x40023c00

08002c0c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d105      	bne.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d035      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002c34:	4b62      	ldr	r3, [pc, #392]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c3a:	f7ff f80b 	bl	8001c54 <HAL_GetTick>
 8002c3e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c40:	e008      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002c42:	f7ff f807 	bl	8001c54 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e0b0      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c54:	4b5b      	ldr	r3, [pc, #364]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1f0      	bne.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	019a      	lsls	r2, r3, #6
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	071b      	lsls	r3, r3, #28
 8002c6c:	4955      	ldr	r1, [pc, #340]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c74:	4b52      	ldr	r3, [pc, #328]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002c76:	2201      	movs	r2, #1
 8002c78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c7a:	f7fe ffeb 	bl	8001c54 <HAL_GetTick>
 8002c7e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c80:	e008      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002c82:	f7fe ffe7 	bl	8001c54 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e090      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c94:	4b4b      	ldr	r3, [pc, #300]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0f0      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f000 8083 	beq.w	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	4b44      	ldr	r3, [pc, #272]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	4a43      	ldr	r2, [pc, #268]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cbe:	4b41      	ldr	r3, [pc, #260]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002cca:	4b3f      	ldr	r3, [pc, #252]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a3e      	ldr	r2, [pc, #248]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002cd6:	f7fe ffbd 	bl	8001c54 <HAL_GetTick>
 8002cda:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002cde:	f7fe ffb9 	bl	8001c54 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e062      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002cf0:	4b35      	ldr	r3, [pc, #212]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0f0      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cfc:	4b31      	ldr	r3, [pc, #196]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d04:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d02f      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d028      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d1a:	4b2a      	ldr	r3, [pc, #168]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d22:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d24:	4b29      	ldr	r3, [pc, #164]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002d26:	2201      	movs	r2, #1
 8002d28:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d2a:	4b28      	ldr	r3, [pc, #160]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002d30:	4a24      	ldr	r2, [pc, #144]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d36:	4b23      	ldr	r3, [pc, #140]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d114      	bne.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002d42:	f7fe ff87 	bl	8001c54 <HAL_GetTick>
 8002d46:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d48:	e00a      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d4a:	f7fe ff83 	bl	8001c54 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e02a      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d60:	4b18      	ldr	r3, [pc, #96]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0ee      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d78:	d10d      	bne.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002d7a:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002d8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d8e:	490d      	ldr	r1, [pc, #52]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	608b      	str	r3, [r1, #8]
 8002d94:	e005      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002d96:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	4a0a      	ldr	r2, [pc, #40]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002d9c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002da0:	6093      	str	r3, [r2, #8]
 8002da2:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002da4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dae:	4905      	ldr	r1, [pc, #20]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3718      	adds	r7, #24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	42470068 	.word	0x42470068
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	40007000 	.word	0x40007000
 8002dcc:	42470e40 	.word	0x42470e40

08002dd0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e083      	b.n	8002eea <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	7f5b      	ldrb	r3, [r3, #29]
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d105      	bne.n	8002df8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7fe f9a8 	bl	8001148 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	22ca      	movs	r2, #202	; 0xca
 8002e04:	625a      	str	r2, [r3, #36]	; 0x24
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2253      	movs	r2, #83	; 0x53
 8002e0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 faa8 	bl	8003364 <RTC_EnterInitMode>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d008      	beq.n	8002e2c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	22ff      	movs	r2, #255	; 0xff
 8002e20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2204      	movs	r2, #4
 8002e26:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e05e      	b.n	8002eea <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6812      	ldr	r2, [r2, #0]
 8002e36:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002e3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e3e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6899      	ldr	r1, [r3, #8]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	431a      	orrs	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	68d2      	ldr	r2, [r2, #12]
 8002e66:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6919      	ldr	r1, [r3, #16]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	041a      	lsls	r2, r3, #16
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e8a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 0320 	and.w	r3, r3, #32
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10e      	bne.n	8002eb8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 fa3a 	bl	8003314 <HAL_RTC_WaitForSynchro>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d008      	beq.n	8002eb8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	22ff      	movs	r2, #255	; 0xff
 8002eac:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2204      	movs	r2, #4
 8002eb2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e018      	b.n	8002eea <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ec6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699a      	ldr	r2, [r3, #24]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	22ff      	movs	r2, #255	; 0xff
 8002ee0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
  }
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002ef2:	b590      	push	{r4, r7, lr}
 8002ef4:	b087      	sub	sp, #28
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	60f8      	str	r0, [r7, #12]
 8002efa:	60b9      	str	r1, [r7, #8]
 8002efc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	7f1b      	ldrb	r3, [r3, #28]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d101      	bne.n	8002f0e <HAL_RTC_SetTime+0x1c>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	e0aa      	b.n	8003064 <HAL_RTC_SetTime+0x172>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2201      	movs	r2, #1
 8002f12:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2202      	movs	r2, #2
 8002f18:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d126      	bne.n	8002f6e <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d102      	bne.n	8002f34 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2200      	movs	r2, #0
 8002f32:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 fa3f 	bl	80033bc <RTC_ByteToBcd2>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	785b      	ldrb	r3, [r3, #1]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 fa38 	bl	80033bc <RTC_ByteToBcd2>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002f50:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	789b      	ldrb	r3, [r3, #2]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 fa30 	bl	80033bc <RTC_ByteToBcd2>
 8002f5c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002f5e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	78db      	ldrb	r3, [r3, #3]
 8002f66:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	617b      	str	r3, [r7, #20]
 8002f6c:	e018      	b.n	8002fa0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d102      	bne.n	8002f82 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	785b      	ldrb	r3, [r3, #1]
 8002f8c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002f8e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002f90:	68ba      	ldr	r2, [r7, #8]
 8002f92:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002f94:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	78db      	ldrb	r3, [r3, #3]
 8002f9a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	22ca      	movs	r2, #202	; 0xca
 8002fa6:	625a      	str	r2, [r3, #36]	; 0x24
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2253      	movs	r2, #83	; 0x53
 8002fae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f000 f9d7 	bl	8003364 <RTC_EnterInitMode>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00b      	beq.n	8002fd4 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	22ff      	movs	r2, #255	; 0xff
 8002fc2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2204      	movs	r2, #4
 8002fc8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e047      	b.n	8003064 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002fde:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002fe2:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ff2:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6899      	ldr	r1, [r3, #8]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	431a      	orrs	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68da      	ldr	r2, [r3, #12]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800301a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 0320 	and.w	r3, r3, #32
 8003026:	2b00      	cmp	r3, #0
 8003028:	d111      	bne.n	800304e <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 f972 	bl	8003314 <HAL_RTC_WaitForSynchro>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00b      	beq.n	800304e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	22ff      	movs	r2, #255	; 0xff
 800303c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2204      	movs	r2, #4
 8003042:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e00a      	b.n	8003064 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	22ff      	movs	r2, #255	; 0xff
 8003054:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2201      	movs	r2, #1
 800305a:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8003062:	2300      	movs	r3, #0
  }
}
 8003064:	4618      	mov	r0, r3
 8003066:	371c      	adds	r7, #28
 8003068:	46bd      	mov	sp, r7
 800306a:	bd90      	pop	{r4, r7, pc}

0800306c <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800309e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80030a2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	0c1b      	lsrs	r3, r3, #16
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	0a1b      	lsrs	r3, r3, #8
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	0c1b      	lsrs	r3, r3, #16
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d11a      	bne.n	800311e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f000 f983 	bl	80033f8 <RTC_Bcd2ToByte>
 80030f2:	4603      	mov	r3, r0
 80030f4:	461a      	mov	r2, r3
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	785b      	ldrb	r3, [r3, #1]
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 f97a 	bl	80033f8 <RTC_Bcd2ToByte>
 8003104:	4603      	mov	r3, r0
 8003106:	461a      	mov	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	789b      	ldrb	r3, [r3, #2]
 8003110:	4618      	mov	r0, r3
 8003112:	f000 f971 	bl	80033f8 <RTC_Bcd2ToByte>
 8003116:	4603      	mov	r3, r0
 8003118:	461a      	mov	r2, r3
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003128:	b590      	push	{r4, r7, lr}
 800312a:	b087      	sub	sp, #28
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003134:	2300      	movs	r3, #0
 8003136:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	7f1b      	ldrb	r3, [r3, #28]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d101      	bne.n	8003144 <HAL_RTC_SetDate+0x1c>
 8003140:	2302      	movs	r3, #2
 8003142:	e094      	b.n	800326e <HAL_RTC_SetDate+0x146>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2201      	movs	r2, #1
 8003148:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2202      	movs	r2, #2
 800314e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10e      	bne.n	8003174 <HAL_RTC_SetDate+0x4c>
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	785b      	ldrb	r3, [r3, #1]
 800315a:	f003 0310 	and.w	r3, r3, #16
 800315e:	2b00      	cmp	r3, #0
 8003160:	d008      	beq.n	8003174 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	785b      	ldrb	r3, [r3, #1]
 8003166:	f023 0310 	bic.w	r3, r3, #16
 800316a:	b2db      	uxtb	r3, r3
 800316c:	330a      	adds	r3, #10
 800316e:	b2da      	uxtb	r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d11c      	bne.n	80031b4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	78db      	ldrb	r3, [r3, #3]
 800317e:	4618      	mov	r0, r3
 8003180:	f000 f91c 	bl	80033bc <RTC_ByteToBcd2>
 8003184:	4603      	mov	r3, r0
 8003186:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	785b      	ldrb	r3, [r3, #1]
 800318c:	4618      	mov	r0, r3
 800318e:	f000 f915 	bl	80033bc <RTC_ByteToBcd2>
 8003192:	4603      	mov	r3, r0
 8003194:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003196:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	789b      	ldrb	r3, [r3, #2]
 800319c:	4618      	mov	r0, r3
 800319e:	f000 f90d 	bl	80033bc <RTC_ByteToBcd2>
 80031a2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80031a4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80031ae:	4313      	orrs	r3, r2
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	e00e      	b.n	80031d2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	78db      	ldrb	r3, [r3, #3]
 80031b8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	785b      	ldrb	r3, [r3, #1]
 80031be:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80031c0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80031c6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80031ce:	4313      	orrs	r3, r2
 80031d0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	22ca      	movs	r2, #202	; 0xca
 80031d8:	625a      	str	r2, [r3, #36]	; 0x24
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2253      	movs	r2, #83	; 0x53
 80031e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 f8be 	bl	8003364 <RTC_EnterInitMode>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00b      	beq.n	8003206 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	22ff      	movs	r2, #255	; 0xff
 80031f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2204      	movs	r2, #4
 80031fa:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e033      	b.n	800326e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003210:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003214:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003224:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f003 0320 	and.w	r3, r3, #32
 8003230:	2b00      	cmp	r3, #0
 8003232:	d111      	bne.n	8003258 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 f86d 	bl	8003314 <HAL_RTC_WaitForSynchro>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00b      	beq.n	8003258 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	22ff      	movs	r2, #255	; 0xff
 8003246:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2204      	movs	r2, #4
 800324c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e00a      	b.n	800326e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	22ff      	movs	r2, #255	; 0xff
 800325e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2201      	movs	r2, #1
 8003264:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800326c:	2300      	movs	r3, #0
  }
}
 800326e:	4618      	mov	r0, r3
 8003270:	371c      	adds	r7, #28
 8003272:	46bd      	mov	sp, r7
 8003274:	bd90      	pop	{r4, r7, pc}

08003276 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b086      	sub	sp, #24
 800327a:	af00      	add	r7, sp, #0
 800327c:	60f8      	str	r0, [r7, #12]
 800327e:	60b9      	str	r1, [r7, #8]
 8003280:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003290:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003294:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	0c1b      	lsrs	r3, r3, #16
 800329a:	b2da      	uxtb	r2, r3
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	0a1b      	lsrs	r3, r3, #8
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	f003 031f 	and.w	r3, r3, #31
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	0b5b      	lsrs	r3, r3, #13
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d11a      	bne.n	800330a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	78db      	ldrb	r3, [r3, #3]
 80032d8:	4618      	mov	r0, r3
 80032da:	f000 f88d 	bl	80033f8 <RTC_Bcd2ToByte>
 80032de:	4603      	mov	r3, r0
 80032e0:	461a      	mov	r2, r3
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	785b      	ldrb	r3, [r3, #1]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 f884 	bl	80033f8 <RTC_Bcd2ToByte>
 80032f0:	4603      	mov	r3, r0
 80032f2:	461a      	mov	r2, r3
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	789b      	ldrb	r3, [r3, #2]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 f87b 	bl	80033f8 <RTC_Bcd2ToByte>
 8003302:	4603      	mov	r3, r0
 8003304:	461a      	mov	r2, r3
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3718      	adds	r7, #24
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800331c:	2300      	movs	r3, #0
 800331e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800332e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003330:	f7fe fc90 	bl	8001c54 <HAL_GetTick>
 8003334:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003336:	e009      	b.n	800334c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003338:	f7fe fc8c 	bl	8001c54 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003346:	d901      	bls.n	800334c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e007      	b.n	800335c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	f003 0320 	and.w	r3, r3, #32
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0ee      	beq.n	8003338 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800337a:	2b00      	cmp	r3, #0
 800337c:	d119      	bne.n	80033b2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f04f 32ff 	mov.w	r2, #4294967295
 8003386:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003388:	f7fe fc64 	bl	8001c54 <HAL_GetTick>
 800338c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800338e:	e009      	b.n	80033a4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003390:	f7fe fc60 	bl	8001c54 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800339e:	d901      	bls.n	80033a4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e007      	b.n	80033b4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0ee      	beq.n	8003390 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	4603      	mov	r3, r0
 80033c4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80033ca:	e005      	b.n	80033d8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	3301      	adds	r3, #1
 80033d0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80033d2:	79fb      	ldrb	r3, [r7, #7]
 80033d4:	3b0a      	subs	r3, #10
 80033d6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80033d8:	79fb      	ldrb	r3, [r7, #7]
 80033da:	2b09      	cmp	r3, #9
 80033dc:	d8f6      	bhi.n	80033cc <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	011b      	lsls	r3, r3, #4
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	79fb      	ldrb	r3, [r7, #7]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	b2db      	uxtb	r3, r3
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003402:	2300      	movs	r3, #0
 8003404:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003406:	79fb      	ldrb	r3, [r7, #7]
 8003408:	091b      	lsrs	r3, r3, #4
 800340a:	b2db      	uxtb	r3, r3
 800340c:	461a      	mov	r2, r3
 800340e:	4613      	mov	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4413      	add	r3, r2
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003418:	79fb      	ldrb	r3, [r7, #7]
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	b2da      	uxtb	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	b2db      	uxtb	r3, r3
 8003424:	4413      	add	r3, r2
 8003426:	b2db      	uxtb	r3, r3
}
 8003428:	4618      	mov	r0, r3
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e041      	b.n	80034ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d106      	bne.n	8003460 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f839 	bl	80034d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2202      	movs	r2, #2
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3304      	adds	r3, #4
 8003470:	4619      	mov	r1, r3
 8003472:	4610      	mov	r0, r2
 8003474:	f000 f9d8 	bl	8003828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80034da:	bf00      	nop
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
	...

080034e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d001      	beq.n	8003500 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e04e      	b.n	800359e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0201 	orr.w	r2, r2, #1
 8003516:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a23      	ldr	r2, [pc, #140]	; (80035ac <HAL_TIM_Base_Start_IT+0xc4>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d022      	beq.n	8003568 <HAL_TIM_Base_Start_IT+0x80>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800352a:	d01d      	beq.n	8003568 <HAL_TIM_Base_Start_IT+0x80>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a1f      	ldr	r2, [pc, #124]	; (80035b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d018      	beq.n	8003568 <HAL_TIM_Base_Start_IT+0x80>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a1e      	ldr	r2, [pc, #120]	; (80035b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d013      	beq.n	8003568 <HAL_TIM_Base_Start_IT+0x80>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a1c      	ldr	r2, [pc, #112]	; (80035b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d00e      	beq.n	8003568 <HAL_TIM_Base_Start_IT+0x80>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a1b      	ldr	r2, [pc, #108]	; (80035bc <HAL_TIM_Base_Start_IT+0xd4>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d009      	beq.n	8003568 <HAL_TIM_Base_Start_IT+0x80>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a19      	ldr	r2, [pc, #100]	; (80035c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d004      	beq.n	8003568 <HAL_TIM_Base_Start_IT+0x80>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a18      	ldr	r2, [pc, #96]	; (80035c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d111      	bne.n	800358c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2b06      	cmp	r3, #6
 8003578:	d010      	beq.n	800359c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f042 0201 	orr.w	r2, r2, #1
 8003588:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800358a:	e007      	b.n	800359c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 0201 	orr.w	r2, r2, #1
 800359a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3714      	adds	r7, #20
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	40010000 	.word	0x40010000
 80035b0:	40000400 	.word	0x40000400
 80035b4:	40000800 	.word	0x40000800
 80035b8:	40000c00 	.word	0x40000c00
 80035bc:	40010400 	.word	0x40010400
 80035c0:	40014000 	.word	0x40014000
 80035c4:	40001800 	.word	0x40001800

080035c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d122      	bne.n	8003624 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d11b      	bne.n	8003624 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f06f 0202 	mvn.w	r2, #2
 80035f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	f003 0303 	and.w	r3, r3, #3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f8ee 	bl	80037ec <HAL_TIM_IC_CaptureCallback>
 8003610:	e005      	b.n	800361e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f8e0 	bl	80037d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 f8f1 	bl	8003800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	f003 0304 	and.w	r3, r3, #4
 800362e:	2b04      	cmp	r3, #4
 8003630:	d122      	bne.n	8003678 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b04      	cmp	r3, #4
 800363e:	d11b      	bne.n	8003678 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f06f 0204 	mvn.w	r2, #4
 8003648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2202      	movs	r2, #2
 800364e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f8c4 	bl	80037ec <HAL_TIM_IC_CaptureCallback>
 8003664:	e005      	b.n	8003672 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f8b6 	bl	80037d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f8c7 	bl	8003800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	2b08      	cmp	r3, #8
 8003684:	d122      	bne.n	80036cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	2b08      	cmp	r3, #8
 8003692:	d11b      	bne.n	80036cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f06f 0208 	mvn.w	r2, #8
 800369c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2204      	movs	r2, #4
 80036a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f89a 	bl	80037ec <HAL_TIM_IC_CaptureCallback>
 80036b8:	e005      	b.n	80036c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f88c 	bl	80037d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f89d 	bl	8003800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	f003 0310 	and.w	r3, r3, #16
 80036d6:	2b10      	cmp	r3, #16
 80036d8:	d122      	bne.n	8003720 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f003 0310 	and.w	r3, r3, #16
 80036e4:	2b10      	cmp	r3, #16
 80036e6:	d11b      	bne.n	8003720 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f06f 0210 	mvn.w	r2, #16
 80036f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2208      	movs	r2, #8
 80036f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f870 	bl	80037ec <HAL_TIM_IC_CaptureCallback>
 800370c:	e005      	b.n	800371a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f862 	bl	80037d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f873 	bl	8003800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b01      	cmp	r3, #1
 800372c:	d10e      	bne.n	800374c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b01      	cmp	r3, #1
 800373a:	d107      	bne.n	800374c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f06f 0201 	mvn.w	r2, #1
 8003744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7fd fbf8 	bl	8000f3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003756:	2b80      	cmp	r3, #128	; 0x80
 8003758:	d10e      	bne.n	8003778 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003764:	2b80      	cmp	r3, #128	; 0x80
 8003766:	d107      	bne.n	8003778 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f902 	bl	800397c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003782:	2b40      	cmp	r3, #64	; 0x40
 8003784:	d10e      	bne.n	80037a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003790:	2b40      	cmp	r3, #64	; 0x40
 8003792:	d107      	bne.n	80037a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800379c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f838 	bl	8003814 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	f003 0320 	and.w	r3, r3, #32
 80037ae:	2b20      	cmp	r3, #32
 80037b0:	d10e      	bne.n	80037d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	f003 0320 	and.w	r3, r3, #32
 80037bc:	2b20      	cmp	r3, #32
 80037be:	d107      	bne.n	80037d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f06f 0220 	mvn.w	r2, #32
 80037c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f8cc 	bl	8003968 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037d0:	bf00      	nop
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a40      	ldr	r2, [pc, #256]	; (800393c <TIM_Base_SetConfig+0x114>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d013      	beq.n	8003868 <TIM_Base_SetConfig+0x40>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003846:	d00f      	beq.n	8003868 <TIM_Base_SetConfig+0x40>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a3d      	ldr	r2, [pc, #244]	; (8003940 <TIM_Base_SetConfig+0x118>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d00b      	beq.n	8003868 <TIM_Base_SetConfig+0x40>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a3c      	ldr	r2, [pc, #240]	; (8003944 <TIM_Base_SetConfig+0x11c>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d007      	beq.n	8003868 <TIM_Base_SetConfig+0x40>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a3b      	ldr	r2, [pc, #236]	; (8003948 <TIM_Base_SetConfig+0x120>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d003      	beq.n	8003868 <TIM_Base_SetConfig+0x40>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a3a      	ldr	r2, [pc, #232]	; (800394c <TIM_Base_SetConfig+0x124>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d108      	bne.n	800387a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800386e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	4313      	orrs	r3, r2
 8003878:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a2f      	ldr	r2, [pc, #188]	; (800393c <TIM_Base_SetConfig+0x114>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d02b      	beq.n	80038da <TIM_Base_SetConfig+0xb2>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003888:	d027      	beq.n	80038da <TIM_Base_SetConfig+0xb2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a2c      	ldr	r2, [pc, #176]	; (8003940 <TIM_Base_SetConfig+0x118>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d023      	beq.n	80038da <TIM_Base_SetConfig+0xb2>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a2b      	ldr	r2, [pc, #172]	; (8003944 <TIM_Base_SetConfig+0x11c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d01f      	beq.n	80038da <TIM_Base_SetConfig+0xb2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a2a      	ldr	r2, [pc, #168]	; (8003948 <TIM_Base_SetConfig+0x120>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d01b      	beq.n	80038da <TIM_Base_SetConfig+0xb2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a29      	ldr	r2, [pc, #164]	; (800394c <TIM_Base_SetConfig+0x124>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d017      	beq.n	80038da <TIM_Base_SetConfig+0xb2>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a28      	ldr	r2, [pc, #160]	; (8003950 <TIM_Base_SetConfig+0x128>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d013      	beq.n	80038da <TIM_Base_SetConfig+0xb2>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a27      	ldr	r2, [pc, #156]	; (8003954 <TIM_Base_SetConfig+0x12c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d00f      	beq.n	80038da <TIM_Base_SetConfig+0xb2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a26      	ldr	r2, [pc, #152]	; (8003958 <TIM_Base_SetConfig+0x130>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d00b      	beq.n	80038da <TIM_Base_SetConfig+0xb2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a25      	ldr	r2, [pc, #148]	; (800395c <TIM_Base_SetConfig+0x134>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d007      	beq.n	80038da <TIM_Base_SetConfig+0xb2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a24      	ldr	r2, [pc, #144]	; (8003960 <TIM_Base_SetConfig+0x138>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d003      	beq.n	80038da <TIM_Base_SetConfig+0xb2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a23      	ldr	r2, [pc, #140]	; (8003964 <TIM_Base_SetConfig+0x13c>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d108      	bne.n	80038ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a0a      	ldr	r2, [pc, #40]	; (800393c <TIM_Base_SetConfig+0x114>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d003      	beq.n	8003920 <TIM_Base_SetConfig+0xf8>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a0c      	ldr	r2, [pc, #48]	; (800394c <TIM_Base_SetConfig+0x124>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d103      	bne.n	8003928 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	691a      	ldr	r2, [r3, #16]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	615a      	str	r2, [r3, #20]
}
 800392e:	bf00      	nop
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	40010000 	.word	0x40010000
 8003940:	40000400 	.word	0x40000400
 8003944:	40000800 	.word	0x40000800
 8003948:	40000c00 	.word	0x40000c00
 800394c:	40010400 	.word	0x40010400
 8003950:	40014000 	.word	0x40014000
 8003954:	40014400 	.word	0x40014400
 8003958:	40014800 	.word	0x40014800
 800395c:	40001800 	.word	0x40001800
 8003960:	40001c00 	.word	0x40001c00
 8003964:	40002000 	.word	0x40002000

08003968 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e03f      	b.n	8003a22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d106      	bne.n	80039bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7fd fbf0 	bl	800119c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2224      	movs	r2, #36	; 0x24
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68da      	ldr	r2, [r3, #12]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 fddb 	bl	8004590 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	691a      	ldr	r2, [r3, #16]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	695a      	ldr	r2, [r3, #20]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68da      	ldr	r2, [r3, #12]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b08a      	sub	sp, #40	; 0x28
 8003a2e:	af02      	add	r7, sp, #8
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	60b9      	str	r1, [r7, #8]
 8003a34:	603b      	str	r3, [r7, #0]
 8003a36:	4613      	mov	r3, r2
 8003a38:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b20      	cmp	r3, #32
 8003a48:	d17c      	bne.n	8003b44 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <HAL_UART_Transmit+0x2c>
 8003a50:	88fb      	ldrh	r3, [r7, #6]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e075      	b.n	8003b46 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_UART_Transmit+0x3e>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e06e      	b.n	8003b46 <HAL_UART_Transmit+0x11c>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2221      	movs	r2, #33	; 0x21
 8003a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a7e:	f7fe f8e9 	bl	8001c54 <HAL_GetTick>
 8003a82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	88fa      	ldrh	r2, [r7, #6]
 8003a88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	88fa      	ldrh	r2, [r7, #6]
 8003a8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a98:	d108      	bne.n	8003aac <HAL_UART_Transmit+0x82>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d104      	bne.n	8003aac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	61bb      	str	r3, [r7, #24]
 8003aaa:	e003      	b.n	8003ab4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003abc:	e02a      	b.n	8003b14 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	2180      	movs	r1, #128	; 0x80
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f000 fb1f 	bl	800410c <UART_WaitOnFlagUntilTimeout>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e036      	b.n	8003b46 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10b      	bne.n	8003af6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	881b      	ldrh	r3, [r3, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003aec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	3302      	adds	r3, #2
 8003af2:	61bb      	str	r3, [r7, #24]
 8003af4:	e007      	b.n	8003b06 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	781a      	ldrb	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	3301      	adds	r3, #1
 8003b04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1cf      	bne.n	8003abe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2200      	movs	r2, #0
 8003b26:	2140      	movs	r1, #64	; 0x40
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 faef 	bl	800410c <UART_WaitOnFlagUntilTimeout>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e006      	b.n	8003b46 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b40:	2300      	movs	r3, #0
 8003b42:	e000      	b.n	8003b46 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b44:	2302      	movs	r3, #2
  }
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3720      	adds	r7, #32
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b084      	sub	sp, #16
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b20      	cmp	r3, #32
 8003b66:	d11d      	bne.n	8003ba4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d002      	beq.n	8003b74 <HAL_UART_Receive_IT+0x26>
 8003b6e:	88fb      	ldrh	r3, [r7, #6]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e016      	b.n	8003ba6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d101      	bne.n	8003b86 <HAL_UART_Receive_IT+0x38>
 8003b82:	2302      	movs	r3, #2
 8003b84:	e00f      	b.n	8003ba6 <HAL_UART_Receive_IT+0x58>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003b94:	88fb      	ldrh	r3, [r7, #6]
 8003b96:	461a      	mov	r2, r3
 8003b98:	68b9      	ldr	r1, [r7, #8]
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f000 fb24 	bl	80041e8 <UART_Start_Receive_IT>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	e000      	b.n	8003ba6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003ba4:	2302      	movs	r3, #2
  }
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
	...

08003bb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b0ba      	sub	sp, #232	; 0xe8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003bee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10f      	bne.n	8003c16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bfa:	f003 0320 	and.w	r3, r3, #32
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d009      	beq.n	8003c16 <HAL_UART_IRQHandler+0x66>
 8003c02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c06:	f003 0320 	and.w	r3, r3, #32
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 fc03 	bl	800441a <UART_Receive_IT>
      return;
 8003c14:	e256      	b.n	80040c4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 80de 	beq.w	8003ddc <HAL_UART_IRQHandler+0x22c>
 8003c20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d106      	bne.n	8003c3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c30:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 80d1 	beq.w	8003ddc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00b      	beq.n	8003c5e <HAL_UART_IRQHandler+0xae>
 8003c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d005      	beq.n	8003c5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	f043 0201 	orr.w	r2, r3, #1
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c62:	f003 0304 	and.w	r3, r3, #4
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00b      	beq.n	8003c82 <HAL_UART_IRQHandler+0xd2>
 8003c6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d005      	beq.n	8003c82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	f043 0202 	orr.w	r2, r3, #2
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00b      	beq.n	8003ca6 <HAL_UART_IRQHandler+0xf6>
 8003c8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d005      	beq.n	8003ca6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	f043 0204 	orr.w	r2, r3, #4
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003caa:	f003 0308 	and.w	r3, r3, #8
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d011      	beq.n	8003cd6 <HAL_UART_IRQHandler+0x126>
 8003cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cb6:	f003 0320 	and.w	r3, r3, #32
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d105      	bne.n	8003cca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003cbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d005      	beq.n	8003cd6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	f043 0208 	orr.w	r2, r3, #8
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f000 81ed 	beq.w	80040ba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ce4:	f003 0320 	and.w	r3, r3, #32
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d008      	beq.n	8003cfe <HAL_UART_IRQHandler+0x14e>
 8003cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cf0:	f003 0320 	and.w	r3, r3, #32
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d002      	beq.n	8003cfe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 fb8e 	bl	800441a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d08:	2b40      	cmp	r3, #64	; 0x40
 8003d0a:	bf0c      	ite	eq
 8003d0c:	2301      	moveq	r3, #1
 8003d0e:	2300      	movne	r3, #0
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	f003 0308 	and.w	r3, r3, #8
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d103      	bne.n	8003d2a <HAL_UART_IRQHandler+0x17a>
 8003d22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d04f      	beq.n	8003dca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 fa96 	bl	800425c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3a:	2b40      	cmp	r3, #64	; 0x40
 8003d3c:	d141      	bne.n	8003dc2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	3314      	adds	r3, #20
 8003d44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d4c:	e853 3f00 	ldrex	r3, [r3]
 8003d50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	3314      	adds	r3, #20
 8003d66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d7a:	e841 2300 	strex	r3, r2, [r1]
 8003d7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1d9      	bne.n	8003d3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d013      	beq.n	8003dba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d96:	4a7d      	ldr	r2, [pc, #500]	; (8003f8c <HAL_UART_IRQHandler+0x3dc>)
 8003d98:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fe f8b6 	bl	8001f10 <HAL_DMA_Abort_IT>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d016      	beq.n	8003dd8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003db4:	4610      	mov	r0, r2
 8003db6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db8:	e00e      	b.n	8003dd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f990 	bl	80040e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc0:	e00a      	b.n	8003dd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f98c 	bl	80040e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc8:	e006      	b.n	8003dd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f988 	bl	80040e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003dd6:	e170      	b.n	80040ba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd8:	bf00      	nop
    return;
 8003dda:	e16e      	b.n	80040ba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	f040 814a 	bne.w	800407a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dea:	f003 0310 	and.w	r3, r3, #16
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 8143 	beq.w	800407a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003df8:	f003 0310 	and.w	r3, r3, #16
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 813c 	beq.w	800407a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e02:	2300      	movs	r3, #0
 8003e04:	60bb      	str	r3, [r7, #8]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	60bb      	str	r3, [r7, #8]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	60bb      	str	r3, [r7, #8]
 8003e16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e22:	2b40      	cmp	r3, #64	; 0x40
 8003e24:	f040 80b4 	bne.w	8003f90 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 8140 	beq.w	80040be <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e46:	429a      	cmp	r2, r3
 8003e48:	f080 8139 	bcs.w	80040be <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e52:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e58:	69db      	ldr	r3, [r3, #28]
 8003e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e5e:	f000 8088 	beq.w	8003f72 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	330c      	adds	r3, #12
 8003e68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e70:	e853 3f00 	ldrex	r3, [r3]
 8003e74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	330c      	adds	r3, #12
 8003e8a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003e8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e96:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e9e:	e841 2300 	strex	r3, r2, [r1]
 8003ea2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ea6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1d9      	bne.n	8003e62 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	3314      	adds	r3, #20
 8003eb4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eb8:	e853 3f00 	ldrex	r3, [r3]
 8003ebc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ebe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ec0:	f023 0301 	bic.w	r3, r3, #1
 8003ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	3314      	adds	r3, #20
 8003ece:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ed2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ed6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003eda:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ede:	e841 2300 	strex	r3, r2, [r1]
 8003ee2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ee4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1e1      	bne.n	8003eae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	3314      	adds	r3, #20
 8003ef0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ef4:	e853 3f00 	ldrex	r3, [r3]
 8003ef8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003efa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003efc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	3314      	adds	r3, #20
 8003f0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f16:	e841 2300 	strex	r3, r2, [r1]
 8003f1a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1e3      	bne.n	8003eea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2220      	movs	r2, #32
 8003f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	330c      	adds	r3, #12
 8003f36:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f3a:	e853 3f00 	ldrex	r3, [r3]
 8003f3e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f42:	f023 0310 	bic.w	r3, r3, #16
 8003f46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	330c      	adds	r3, #12
 8003f50:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003f54:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f56:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f5c:	e841 2300 	strex	r3, r2, [r1]
 8003f60:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1e3      	bne.n	8003f30 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7fd ff5f 	bl	8001e30 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	4619      	mov	r1, r3
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f8b6 	bl	80040f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f88:	e099      	b.n	80040be <HAL_UART_IRQHandler+0x50e>
 8003f8a:	bf00      	nop
 8003f8c:	08004323 	.word	0x08004323
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 808b 	beq.w	80040c2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003fac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 8086 	beq.w	80040c2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	330c      	adds	r3, #12
 8003fbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc0:	e853 3f00 	ldrex	r3, [r3]
 8003fc4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fcc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	330c      	adds	r3, #12
 8003fd6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003fda:	647a      	str	r2, [r7, #68]	; 0x44
 8003fdc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fe0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fe2:	e841 2300 	strex	r3, r2, [r1]
 8003fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1e3      	bne.n	8003fb6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	3314      	adds	r3, #20
 8003ff4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	e853 3f00 	ldrex	r3, [r3]
 8003ffc:	623b      	str	r3, [r7, #32]
   return(result);
 8003ffe:	6a3b      	ldr	r3, [r7, #32]
 8004000:	f023 0301 	bic.w	r3, r3, #1
 8004004:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	3314      	adds	r3, #20
 800400e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004012:	633a      	str	r2, [r7, #48]	; 0x30
 8004014:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004016:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800401a:	e841 2300 	strex	r3, r2, [r1]
 800401e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1e3      	bne.n	8003fee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2220      	movs	r2, #32
 800402a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	330c      	adds	r3, #12
 800403a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	e853 3f00 	ldrex	r3, [r3]
 8004042:	60fb      	str	r3, [r7, #12]
   return(result);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f023 0310 	bic.w	r3, r3, #16
 800404a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	330c      	adds	r3, #12
 8004054:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004058:	61fa      	str	r2, [r7, #28]
 800405a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405c:	69b9      	ldr	r1, [r7, #24]
 800405e:	69fa      	ldr	r2, [r7, #28]
 8004060:	e841 2300 	strex	r3, r2, [r1]
 8004064:	617b      	str	r3, [r7, #20]
   return(result);
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1e3      	bne.n	8004034 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800406c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004070:	4619      	mov	r1, r3
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f83e 	bl	80040f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004078:	e023      	b.n	80040c2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800407a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800407e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004082:	2b00      	cmp	r3, #0
 8004084:	d009      	beq.n	800409a <HAL_UART_IRQHandler+0x4ea>
 8004086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800408a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f959 	bl	800434a <UART_Transmit_IT>
    return;
 8004098:	e014      	b.n	80040c4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800409a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800409e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00e      	beq.n	80040c4 <HAL_UART_IRQHandler+0x514>
 80040a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d008      	beq.n	80040c4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f999 	bl	80043ea <UART_EndTransmit_IT>
    return;
 80040b8:	e004      	b.n	80040c4 <HAL_UART_IRQHandler+0x514>
    return;
 80040ba:	bf00      	nop
 80040bc:	e002      	b.n	80040c4 <HAL_UART_IRQHandler+0x514>
      return;
 80040be:	bf00      	nop
 80040c0:	e000      	b.n	80040c4 <HAL_UART_IRQHandler+0x514>
      return;
 80040c2:	bf00      	nop
  }
}
 80040c4:	37e8      	adds	r7, #232	; 0xe8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop

080040cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	460b      	mov	r3, r1
 80040fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b090      	sub	sp, #64	; 0x40
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	603b      	str	r3, [r7, #0]
 8004118:	4613      	mov	r3, r2
 800411a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800411c:	e050      	b.n	80041c0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800411e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004124:	d04c      	beq.n	80041c0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004128:	2b00      	cmp	r3, #0
 800412a:	d007      	beq.n	800413c <UART_WaitOnFlagUntilTimeout+0x30>
 800412c:	f7fd fd92 	bl	8001c54 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004138:	429a      	cmp	r2, r3
 800413a:	d241      	bcs.n	80041c0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	330c      	adds	r3, #12
 8004142:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004146:	e853 3f00 	ldrex	r3, [r3]
 800414a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004152:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	330c      	adds	r3, #12
 800415a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800415c:	637a      	str	r2, [r7, #52]	; 0x34
 800415e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004160:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004162:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004164:	e841 2300 	strex	r3, r2, [r1]
 8004168:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800416a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1e5      	bne.n	800413c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	3314      	adds	r3, #20
 8004176:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	e853 3f00 	ldrex	r3, [r3]
 800417e:	613b      	str	r3, [r7, #16]
   return(result);
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	f023 0301 	bic.w	r3, r3, #1
 8004186:	63bb      	str	r3, [r7, #56]	; 0x38
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3314      	adds	r3, #20
 800418e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004190:	623a      	str	r2, [r7, #32]
 8004192:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004194:	69f9      	ldr	r1, [r7, #28]
 8004196:	6a3a      	ldr	r2, [r7, #32]
 8004198:	e841 2300 	strex	r3, r2, [r1]
 800419c:	61bb      	str	r3, [r7, #24]
   return(result);
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1e5      	bne.n	8004170 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2220      	movs	r2, #32
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2220      	movs	r2, #32
 80041b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e00f      	b.n	80041e0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	4013      	ands	r3, r2
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	bf0c      	ite	eq
 80041d0:	2301      	moveq	r3, #1
 80041d2:	2300      	movne	r3, #0
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	461a      	mov	r2, r3
 80041d8:	79fb      	ldrb	r3, [r7, #7]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d09f      	beq.n	800411e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3740      	adds	r7, #64	; 0x40
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	4613      	mov	r3, r2
 80041f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	88fa      	ldrh	r2, [r7, #6]
 8004200:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	88fa      	ldrh	r2, [r7, #6]
 8004206:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2222      	movs	r2, #34	; 0x22
 8004212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68da      	ldr	r2, [r3, #12]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800422c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	695a      	ldr	r2, [r3, #20]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f042 0201 	orr.w	r2, r2, #1
 800423c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68da      	ldr	r2, [r3, #12]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f042 0220 	orr.w	r2, r2, #32
 800424c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3714      	adds	r7, #20
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800425c:	b480      	push	{r7}
 800425e:	b095      	sub	sp, #84	; 0x54
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	330c      	adds	r3, #12
 800426a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800426e:	e853 3f00 	ldrex	r3, [r3]
 8004272:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004276:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800427a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	330c      	adds	r3, #12
 8004282:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004284:	643a      	str	r2, [r7, #64]	; 0x40
 8004286:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004288:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800428a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800428c:	e841 2300 	strex	r3, r2, [r1]
 8004290:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1e5      	bne.n	8004264 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	3314      	adds	r3, #20
 800429e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	e853 3f00 	ldrex	r3, [r3]
 80042a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	f023 0301 	bic.w	r3, r3, #1
 80042ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3314      	adds	r3, #20
 80042b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042c0:	e841 2300 	strex	r3, r2, [r1]
 80042c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1e5      	bne.n	8004298 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d119      	bne.n	8004308 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	330c      	adds	r3, #12
 80042da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	e853 3f00 	ldrex	r3, [r3]
 80042e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	f023 0310 	bic.w	r3, r3, #16
 80042ea:	647b      	str	r3, [r7, #68]	; 0x44
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	330c      	adds	r3, #12
 80042f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042f4:	61ba      	str	r2, [r7, #24]
 80042f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f8:	6979      	ldr	r1, [r7, #20]
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	e841 2300 	strex	r3, r2, [r1]
 8004300:	613b      	str	r3, [r7, #16]
   return(result);
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1e5      	bne.n	80042d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2220      	movs	r2, #32
 800430c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004316:	bf00      	nop
 8004318:	3754      	adds	r7, #84	; 0x54
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b084      	sub	sp, #16
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f7ff fecf 	bl	80040e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004342:	bf00      	nop
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800434a:	b480      	push	{r7}
 800434c:	b085      	sub	sp, #20
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b21      	cmp	r3, #33	; 0x21
 800435c:	d13e      	bne.n	80043dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004366:	d114      	bne.n	8004392 <UART_Transmit_IT+0x48>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d110      	bne.n	8004392 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	881b      	ldrh	r3, [r3, #0]
 800437a:	461a      	mov	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004384:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	1c9a      	adds	r2, r3, #2
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	621a      	str	r2, [r3, #32]
 8004390:	e008      	b.n	80043a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	1c59      	adds	r1, r3, #1
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6211      	str	r1, [r2, #32]
 800439c:	781a      	ldrb	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	3b01      	subs	r3, #1
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	4619      	mov	r1, r3
 80043b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10f      	bne.n	80043d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68da      	ldr	r2, [r3, #12]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043d8:	2300      	movs	r3, #0
 80043da:	e000      	b.n	80043de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043dc:	2302      	movs	r3, #2
  }
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3714      	adds	r7, #20
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b082      	sub	sp, #8
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68da      	ldr	r2, [r3, #12]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004400:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2220      	movs	r2, #32
 8004406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7ff fe5e 	bl	80040cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b08c      	sub	sp, #48	; 0x30
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b22      	cmp	r3, #34	; 0x22
 800442c:	f040 80ab 	bne.w	8004586 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004438:	d117      	bne.n	800446a <UART_Receive_IT+0x50>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d113      	bne.n	800446a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004442:	2300      	movs	r3, #0
 8004444:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	b29b      	uxth	r3, r3
 8004454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004458:	b29a      	uxth	r2, r3
 800445a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004462:	1c9a      	adds	r2, r3, #2
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	629a      	str	r2, [r3, #40]	; 0x28
 8004468:	e026      	b.n	80044b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004470:	2300      	movs	r3, #0
 8004472:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800447c:	d007      	beq.n	800448e <UART_Receive_IT+0x74>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10a      	bne.n	800449c <UART_Receive_IT+0x82>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d106      	bne.n	800449c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	b2da      	uxtb	r2, r3
 8004496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004498:	701a      	strb	r2, [r3, #0]
 800449a:	e008      	b.n	80044ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044bc:	b29b      	uxth	r3, r3
 80044be:	3b01      	subs	r3, #1
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	4619      	mov	r1, r3
 80044c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d15a      	bne.n	8004582 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68da      	ldr	r2, [r3, #12]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 0220 	bic.w	r2, r2, #32
 80044da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695a      	ldr	r2, [r3, #20]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 0201 	bic.w	r2, r2, #1
 80044fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2220      	movs	r2, #32
 8004500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004508:	2b01      	cmp	r3, #1
 800450a:	d135      	bne.n	8004578 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	330c      	adds	r3, #12
 8004518:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	e853 3f00 	ldrex	r3, [r3]
 8004520:	613b      	str	r3, [r7, #16]
   return(result);
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f023 0310 	bic.w	r3, r3, #16
 8004528:	627b      	str	r3, [r7, #36]	; 0x24
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	330c      	adds	r3, #12
 8004530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004532:	623a      	str	r2, [r7, #32]
 8004534:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004536:	69f9      	ldr	r1, [r7, #28]
 8004538:	6a3a      	ldr	r2, [r7, #32]
 800453a:	e841 2300 	strex	r3, r2, [r1]
 800453e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1e5      	bne.n	8004512 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0310 	and.w	r3, r3, #16
 8004550:	2b10      	cmp	r3, #16
 8004552:	d10a      	bne.n	800456a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004554:	2300      	movs	r3, #0
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800456e:	4619      	mov	r1, r3
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f7ff fdbf 	bl	80040f4 <HAL_UARTEx_RxEventCallback>
 8004576:	e002      	b.n	800457e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f7fc fc63 	bl	8000e44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800457e:	2300      	movs	r3, #0
 8004580:	e002      	b.n	8004588 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004582:	2300      	movs	r3, #0
 8004584:	e000      	b.n	8004588 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004586:	2302      	movs	r3, #2
  }
}
 8004588:	4618      	mov	r0, r3
 800458a:	3730      	adds	r7, #48	; 0x30
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004594:	b09f      	sub	sp, #124	; 0x7c
 8004596:	af00      	add	r7, sp, #0
 8004598:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800459a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80045a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045a6:	68d9      	ldr	r1, [r3, #12]
 80045a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	ea40 0301 	orr.w	r3, r0, r1
 80045b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045b4:	689a      	ldr	r2, [r3, #8]
 80045b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	431a      	orrs	r2, r3
 80045bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	431a      	orrs	r2, r3
 80045c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80045ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80045d4:	f021 010c 	bic.w	r1, r1, #12
 80045d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045de:	430b      	orrs	r3, r1
 80045e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80045ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ee:	6999      	ldr	r1, [r3, #24]
 80045f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	ea40 0301 	orr.w	r3, r0, r1
 80045f8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	4bc5      	ldr	r3, [pc, #788]	; (8004914 <UART_SetConfig+0x384>)
 8004600:	429a      	cmp	r2, r3
 8004602:	d004      	beq.n	800460e <UART_SetConfig+0x7e>
 8004604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	4bc3      	ldr	r3, [pc, #780]	; (8004918 <UART_SetConfig+0x388>)
 800460a:	429a      	cmp	r2, r3
 800460c:	d103      	bne.n	8004616 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800460e:	f7fe fab7 	bl	8002b80 <HAL_RCC_GetPCLK2Freq>
 8004612:	6778      	str	r0, [r7, #116]	; 0x74
 8004614:	e002      	b.n	800461c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004616:	f7fe fa9f 	bl	8002b58 <HAL_RCC_GetPCLK1Freq>
 800461a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800461c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800461e:	69db      	ldr	r3, [r3, #28]
 8004620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004624:	f040 80b6 	bne.w	8004794 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004628:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800462a:	461c      	mov	r4, r3
 800462c:	f04f 0500 	mov.w	r5, #0
 8004630:	4622      	mov	r2, r4
 8004632:	462b      	mov	r3, r5
 8004634:	1891      	adds	r1, r2, r2
 8004636:	6439      	str	r1, [r7, #64]	; 0x40
 8004638:	415b      	adcs	r3, r3
 800463a:	647b      	str	r3, [r7, #68]	; 0x44
 800463c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004640:	1912      	adds	r2, r2, r4
 8004642:	eb45 0303 	adc.w	r3, r5, r3
 8004646:	f04f 0000 	mov.w	r0, #0
 800464a:	f04f 0100 	mov.w	r1, #0
 800464e:	00d9      	lsls	r1, r3, #3
 8004650:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004654:	00d0      	lsls	r0, r2, #3
 8004656:	4602      	mov	r2, r0
 8004658:	460b      	mov	r3, r1
 800465a:	1911      	adds	r1, r2, r4
 800465c:	6639      	str	r1, [r7, #96]	; 0x60
 800465e:	416b      	adcs	r3, r5
 8004660:	667b      	str	r3, [r7, #100]	; 0x64
 8004662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	461a      	mov	r2, r3
 8004668:	f04f 0300 	mov.w	r3, #0
 800466c:	1891      	adds	r1, r2, r2
 800466e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004670:	415b      	adcs	r3, r3
 8004672:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004674:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004678:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800467c:	f7fb fe10 	bl	80002a0 <__aeabi_uldivmod>
 8004680:	4602      	mov	r2, r0
 8004682:	460b      	mov	r3, r1
 8004684:	4ba5      	ldr	r3, [pc, #660]	; (800491c <UART_SetConfig+0x38c>)
 8004686:	fba3 2302 	umull	r2, r3, r3, r2
 800468a:	095b      	lsrs	r3, r3, #5
 800468c:	011e      	lsls	r6, r3, #4
 800468e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004690:	461c      	mov	r4, r3
 8004692:	f04f 0500 	mov.w	r5, #0
 8004696:	4622      	mov	r2, r4
 8004698:	462b      	mov	r3, r5
 800469a:	1891      	adds	r1, r2, r2
 800469c:	6339      	str	r1, [r7, #48]	; 0x30
 800469e:	415b      	adcs	r3, r3
 80046a0:	637b      	str	r3, [r7, #52]	; 0x34
 80046a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80046a6:	1912      	adds	r2, r2, r4
 80046a8:	eb45 0303 	adc.w	r3, r5, r3
 80046ac:	f04f 0000 	mov.w	r0, #0
 80046b0:	f04f 0100 	mov.w	r1, #0
 80046b4:	00d9      	lsls	r1, r3, #3
 80046b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046ba:	00d0      	lsls	r0, r2, #3
 80046bc:	4602      	mov	r2, r0
 80046be:	460b      	mov	r3, r1
 80046c0:	1911      	adds	r1, r2, r4
 80046c2:	65b9      	str	r1, [r7, #88]	; 0x58
 80046c4:	416b      	adcs	r3, r5
 80046c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	461a      	mov	r2, r3
 80046ce:	f04f 0300 	mov.w	r3, #0
 80046d2:	1891      	adds	r1, r2, r2
 80046d4:	62b9      	str	r1, [r7, #40]	; 0x28
 80046d6:	415b      	adcs	r3, r3
 80046d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046de:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80046e2:	f7fb fddd 	bl	80002a0 <__aeabi_uldivmod>
 80046e6:	4602      	mov	r2, r0
 80046e8:	460b      	mov	r3, r1
 80046ea:	4b8c      	ldr	r3, [pc, #560]	; (800491c <UART_SetConfig+0x38c>)
 80046ec:	fba3 1302 	umull	r1, r3, r3, r2
 80046f0:	095b      	lsrs	r3, r3, #5
 80046f2:	2164      	movs	r1, #100	; 0x64
 80046f4:	fb01 f303 	mul.w	r3, r1, r3
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	3332      	adds	r3, #50	; 0x32
 80046fe:	4a87      	ldr	r2, [pc, #540]	; (800491c <UART_SetConfig+0x38c>)
 8004700:	fba2 2303 	umull	r2, r3, r2, r3
 8004704:	095b      	lsrs	r3, r3, #5
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800470c:	441e      	add	r6, r3
 800470e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004710:	4618      	mov	r0, r3
 8004712:	f04f 0100 	mov.w	r1, #0
 8004716:	4602      	mov	r2, r0
 8004718:	460b      	mov	r3, r1
 800471a:	1894      	adds	r4, r2, r2
 800471c:	623c      	str	r4, [r7, #32]
 800471e:	415b      	adcs	r3, r3
 8004720:	627b      	str	r3, [r7, #36]	; 0x24
 8004722:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004726:	1812      	adds	r2, r2, r0
 8004728:	eb41 0303 	adc.w	r3, r1, r3
 800472c:	f04f 0400 	mov.w	r4, #0
 8004730:	f04f 0500 	mov.w	r5, #0
 8004734:	00dd      	lsls	r5, r3, #3
 8004736:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800473a:	00d4      	lsls	r4, r2, #3
 800473c:	4622      	mov	r2, r4
 800473e:	462b      	mov	r3, r5
 8004740:	1814      	adds	r4, r2, r0
 8004742:	653c      	str	r4, [r7, #80]	; 0x50
 8004744:	414b      	adcs	r3, r1
 8004746:	657b      	str	r3, [r7, #84]	; 0x54
 8004748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	461a      	mov	r2, r3
 800474e:	f04f 0300 	mov.w	r3, #0
 8004752:	1891      	adds	r1, r2, r2
 8004754:	61b9      	str	r1, [r7, #24]
 8004756:	415b      	adcs	r3, r3
 8004758:	61fb      	str	r3, [r7, #28]
 800475a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800475e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004762:	f7fb fd9d 	bl	80002a0 <__aeabi_uldivmod>
 8004766:	4602      	mov	r2, r0
 8004768:	460b      	mov	r3, r1
 800476a:	4b6c      	ldr	r3, [pc, #432]	; (800491c <UART_SetConfig+0x38c>)
 800476c:	fba3 1302 	umull	r1, r3, r3, r2
 8004770:	095b      	lsrs	r3, r3, #5
 8004772:	2164      	movs	r1, #100	; 0x64
 8004774:	fb01 f303 	mul.w	r3, r1, r3
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	3332      	adds	r3, #50	; 0x32
 800477e:	4a67      	ldr	r2, [pc, #412]	; (800491c <UART_SetConfig+0x38c>)
 8004780:	fba2 2303 	umull	r2, r3, r2, r3
 8004784:	095b      	lsrs	r3, r3, #5
 8004786:	f003 0207 	and.w	r2, r3, #7
 800478a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4432      	add	r2, r6
 8004790:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004792:	e0b9      	b.n	8004908 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004794:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004796:	461c      	mov	r4, r3
 8004798:	f04f 0500 	mov.w	r5, #0
 800479c:	4622      	mov	r2, r4
 800479e:	462b      	mov	r3, r5
 80047a0:	1891      	adds	r1, r2, r2
 80047a2:	6139      	str	r1, [r7, #16]
 80047a4:	415b      	adcs	r3, r3
 80047a6:	617b      	str	r3, [r7, #20]
 80047a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80047ac:	1912      	adds	r2, r2, r4
 80047ae:	eb45 0303 	adc.w	r3, r5, r3
 80047b2:	f04f 0000 	mov.w	r0, #0
 80047b6:	f04f 0100 	mov.w	r1, #0
 80047ba:	00d9      	lsls	r1, r3, #3
 80047bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047c0:	00d0      	lsls	r0, r2, #3
 80047c2:	4602      	mov	r2, r0
 80047c4:	460b      	mov	r3, r1
 80047c6:	eb12 0804 	adds.w	r8, r2, r4
 80047ca:	eb43 0905 	adc.w	r9, r3, r5
 80047ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f04f 0100 	mov.w	r1, #0
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	f04f 0300 	mov.w	r3, #0
 80047e0:	008b      	lsls	r3, r1, #2
 80047e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80047e6:	0082      	lsls	r2, r0, #2
 80047e8:	4640      	mov	r0, r8
 80047ea:	4649      	mov	r1, r9
 80047ec:	f7fb fd58 	bl	80002a0 <__aeabi_uldivmod>
 80047f0:	4602      	mov	r2, r0
 80047f2:	460b      	mov	r3, r1
 80047f4:	4b49      	ldr	r3, [pc, #292]	; (800491c <UART_SetConfig+0x38c>)
 80047f6:	fba3 2302 	umull	r2, r3, r3, r2
 80047fa:	095b      	lsrs	r3, r3, #5
 80047fc:	011e      	lsls	r6, r3, #4
 80047fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004800:	4618      	mov	r0, r3
 8004802:	f04f 0100 	mov.w	r1, #0
 8004806:	4602      	mov	r2, r0
 8004808:	460b      	mov	r3, r1
 800480a:	1894      	adds	r4, r2, r2
 800480c:	60bc      	str	r4, [r7, #8]
 800480e:	415b      	adcs	r3, r3
 8004810:	60fb      	str	r3, [r7, #12]
 8004812:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004816:	1812      	adds	r2, r2, r0
 8004818:	eb41 0303 	adc.w	r3, r1, r3
 800481c:	f04f 0400 	mov.w	r4, #0
 8004820:	f04f 0500 	mov.w	r5, #0
 8004824:	00dd      	lsls	r5, r3, #3
 8004826:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800482a:	00d4      	lsls	r4, r2, #3
 800482c:	4622      	mov	r2, r4
 800482e:	462b      	mov	r3, r5
 8004830:	1814      	adds	r4, r2, r0
 8004832:	64bc      	str	r4, [r7, #72]	; 0x48
 8004834:	414b      	adcs	r3, r1
 8004836:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004838:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	4618      	mov	r0, r3
 800483e:	f04f 0100 	mov.w	r1, #0
 8004842:	f04f 0200 	mov.w	r2, #0
 8004846:	f04f 0300 	mov.w	r3, #0
 800484a:	008b      	lsls	r3, r1, #2
 800484c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004850:	0082      	lsls	r2, r0, #2
 8004852:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004856:	f7fb fd23 	bl	80002a0 <__aeabi_uldivmod>
 800485a:	4602      	mov	r2, r0
 800485c:	460b      	mov	r3, r1
 800485e:	4b2f      	ldr	r3, [pc, #188]	; (800491c <UART_SetConfig+0x38c>)
 8004860:	fba3 1302 	umull	r1, r3, r3, r2
 8004864:	095b      	lsrs	r3, r3, #5
 8004866:	2164      	movs	r1, #100	; 0x64
 8004868:	fb01 f303 	mul.w	r3, r1, r3
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	011b      	lsls	r3, r3, #4
 8004870:	3332      	adds	r3, #50	; 0x32
 8004872:	4a2a      	ldr	r2, [pc, #168]	; (800491c <UART_SetConfig+0x38c>)
 8004874:	fba2 2303 	umull	r2, r3, r2, r3
 8004878:	095b      	lsrs	r3, r3, #5
 800487a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800487e:	441e      	add	r6, r3
 8004880:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004882:	4618      	mov	r0, r3
 8004884:	f04f 0100 	mov.w	r1, #0
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
 800488c:	1894      	adds	r4, r2, r2
 800488e:	603c      	str	r4, [r7, #0]
 8004890:	415b      	adcs	r3, r3
 8004892:	607b      	str	r3, [r7, #4]
 8004894:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004898:	1812      	adds	r2, r2, r0
 800489a:	eb41 0303 	adc.w	r3, r1, r3
 800489e:	f04f 0400 	mov.w	r4, #0
 80048a2:	f04f 0500 	mov.w	r5, #0
 80048a6:	00dd      	lsls	r5, r3, #3
 80048a8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80048ac:	00d4      	lsls	r4, r2, #3
 80048ae:	4622      	mov	r2, r4
 80048b0:	462b      	mov	r3, r5
 80048b2:	eb12 0a00 	adds.w	sl, r2, r0
 80048b6:	eb43 0b01 	adc.w	fp, r3, r1
 80048ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	4618      	mov	r0, r3
 80048c0:	f04f 0100 	mov.w	r1, #0
 80048c4:	f04f 0200 	mov.w	r2, #0
 80048c8:	f04f 0300 	mov.w	r3, #0
 80048cc:	008b      	lsls	r3, r1, #2
 80048ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80048d2:	0082      	lsls	r2, r0, #2
 80048d4:	4650      	mov	r0, sl
 80048d6:	4659      	mov	r1, fp
 80048d8:	f7fb fce2 	bl	80002a0 <__aeabi_uldivmod>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4b0e      	ldr	r3, [pc, #56]	; (800491c <UART_SetConfig+0x38c>)
 80048e2:	fba3 1302 	umull	r1, r3, r3, r2
 80048e6:	095b      	lsrs	r3, r3, #5
 80048e8:	2164      	movs	r1, #100	; 0x64
 80048ea:	fb01 f303 	mul.w	r3, r1, r3
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	011b      	lsls	r3, r3, #4
 80048f2:	3332      	adds	r3, #50	; 0x32
 80048f4:	4a09      	ldr	r2, [pc, #36]	; (800491c <UART_SetConfig+0x38c>)
 80048f6:	fba2 2303 	umull	r2, r3, r2, r3
 80048fa:	095b      	lsrs	r3, r3, #5
 80048fc:	f003 020f 	and.w	r2, r3, #15
 8004900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4432      	add	r2, r6
 8004906:	609a      	str	r2, [r3, #8]
}
 8004908:	bf00      	nop
 800490a:	377c      	adds	r7, #124	; 0x7c
 800490c:	46bd      	mov	sp, r7
 800490e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004912:	bf00      	nop
 8004914:	40011000 	.word	0x40011000
 8004918:	40011400 	.word	0x40011400
 800491c:	51eb851f 	.word	0x51eb851f

08004920 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f103 0208 	add.w	r2, r3, #8
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f04f 32ff 	mov.w	r2, #4294967295
 8004938:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f103 0208 	add.w	r2, r3, #8
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f103 0208 	add.w	r2, r3, #8
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800497a:	b480      	push	{r7}
 800497c:	b085      	sub	sp, #20
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
 8004982:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	1c5a      	adds	r2, r3, #1
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	601a      	str	r2, [r3, #0]
}
 80049b6:	bf00      	nop
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80049c2:	b480      	push	{r7}
 80049c4:	b085      	sub	sp, #20
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
 80049ca:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d8:	d103      	bne.n	80049e2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	e00c      	b.n	80049fc <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	3308      	adds	r3, #8
 80049e6:	60fb      	str	r3, [r7, #12]
 80049e8:	e002      	b.n	80049f0 <vListInsert+0x2e>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68ba      	ldr	r2, [r7, #8]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d2f6      	bcs.n	80049ea <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	685a      	ldr	r2, [r3, #4]
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	1c5a      	adds	r2, r3, #1
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	601a      	str	r2, [r3, #0]
}
 8004a28:	bf00      	nop
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	6892      	ldr	r2, [r2, #8]
 8004a4a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	6852      	ldr	r2, [r2, #4]
 8004a54:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d103      	bne.n	8004a68 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	1e5a      	subs	r2, r3, #1
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10a      	bne.n	8004ab2 <xQueueGenericReset+0x2a>
        __asm volatile
 8004a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa0:	f383 8811 	msr	BASEPRI, r3
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	60bb      	str	r3, [r7, #8]
    }
 8004aae:	bf00      	nop
 8004ab0:	e7fe      	b.n	8004ab0 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8004ab2:	f002 fb09 	bl	80070c8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004abe:	68f9      	ldr	r1, [r7, #12]
 8004ac0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ac2:	fb01 f303 	mul.w	r3, r1, r3
 8004ac6:	441a      	add	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	68f9      	ldr	r1, [r7, #12]
 8004ae6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ae8:	fb01 f303 	mul.w	r3, r1, r3
 8004aec:	441a      	add	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	22ff      	movs	r2, #255	; 0xff
 8004af6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	22ff      	movs	r2, #255	; 0xff
 8004afe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d114      	bne.n	8004b32 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d01a      	beq.n	8004b46 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	3310      	adds	r3, #16
 8004b14:	4618      	mov	r0, r3
 8004b16:	f001 f921 	bl	8005d5c <xTaskRemoveFromEventList>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d012      	beq.n	8004b46 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8004b20:	4b0c      	ldr	r3, [pc, #48]	; (8004b54 <xQueueGenericReset+0xcc>)
 8004b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b26:	601a      	str	r2, [r3, #0]
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	f3bf 8f6f 	isb	sy
 8004b30:	e009      	b.n	8004b46 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	3310      	adds	r3, #16
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7ff fef2 	bl	8004920 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	3324      	adds	r3, #36	; 0x24
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7ff feed 	bl	8004920 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8004b46:	f002 faef 	bl	8007128 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8004b4a:	2301      	movs	r3, #1
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	e000ed04 	.word	0xe000ed04

08004b58 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b08c      	sub	sp, #48	; 0x30
 8004b5c:	af02      	add	r7, sp, #8
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	4613      	mov	r3, r2
 8004b64:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10a      	bne.n	8004b82 <xQueueGenericCreate+0x2a>
        __asm volatile
 8004b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b70:	f383 8811 	msr	BASEPRI, r3
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	61bb      	str	r3, [r7, #24]
    }
 8004b7e:	bf00      	nop
 8004b80:	e7fe      	b.n	8004b80 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	fb02 f303 	mul.w	r3, r2, r3
 8004b8a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d006      	beq.n	8004ba0 <xQueueGenericCreate+0x48>
 8004b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d101      	bne.n	8004ba4 <xQueueGenericCreate+0x4c>
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e000      	b.n	8004ba6 <xQueueGenericCreate+0x4e>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10a      	bne.n	8004bc0 <xQueueGenericCreate+0x68>
        __asm volatile
 8004baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bae:	f383 8811 	msr	BASEPRI, r3
 8004bb2:	f3bf 8f6f 	isb	sy
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	617b      	str	r3, [r7, #20]
    }
 8004bbc:	bf00      	nop
 8004bbe:	e7fe      	b.n	8004bbe <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8004bc6:	d90a      	bls.n	8004bde <xQueueGenericCreate+0x86>
        __asm volatile
 8004bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bcc:	f383 8811 	msr	BASEPRI, r3
 8004bd0:	f3bf 8f6f 	isb	sy
 8004bd4:	f3bf 8f4f 	dsb	sy
 8004bd8:	613b      	str	r3, [r7, #16]
    }
 8004bda:	bf00      	nop
 8004bdc:	e7fe      	b.n	8004bdc <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be0:	3350      	adds	r3, #80	; 0x50
 8004be2:	4618      	mov	r0, r3
 8004be4:	f002 fb92 	bl	800730c <pvPortMalloc>
 8004be8:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8004bea:	6a3b      	ldr	r3, [r7, #32]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00d      	beq.n	8004c0c <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004bf0:	6a3b      	ldr	r3, [r7, #32]
 8004bf2:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	3350      	adds	r3, #80	; 0x50
 8004bf8:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004bfa:	79fa      	ldrb	r2, [r7, #7]
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	4613      	mov	r3, r2
 8004c02:	69fa      	ldr	r2, [r7, #28]
 8004c04:	68b9      	ldr	r1, [r7, #8]
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 f805 	bl	8004c16 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
    }
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3728      	adds	r7, #40	; 0x28
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b084      	sub	sp, #16
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	60f8      	str	r0, [r7, #12]
 8004c1e:	60b9      	str	r1, [r7, #8]
 8004c20:	607a      	str	r2, [r7, #4]
 8004c22:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d103      	bne.n	8004c32 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	e002      	b.n	8004c38 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c44:	2101      	movs	r1, #1
 8004c46:	69b8      	ldr	r0, [r7, #24]
 8004c48:	f7ff ff1e 	bl	8004a88 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	78fa      	ldrb	r2, [r7, #3]
 8004c50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8004c54:	bf00      	nop
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b08e      	sub	sp, #56	; 0x38
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
 8004c68:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8004c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10a      	bne.n	8004c8e <xQueueGenericSend+0x32>
        __asm volatile
 8004c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7c:	f383 8811 	msr	BASEPRI, r3
 8004c80:	f3bf 8f6f 	isb	sy
 8004c84:	f3bf 8f4f 	dsb	sy
 8004c88:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004c8a:	bf00      	nop
 8004c8c:	e7fe      	b.n	8004c8c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d103      	bne.n	8004c9c <xQueueGenericSend+0x40>
 8004c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <xQueueGenericSend+0x44>
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e000      	b.n	8004ca2 <xQueueGenericSend+0x46>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10a      	bne.n	8004cbc <xQueueGenericSend+0x60>
        __asm volatile
 8004ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004caa:	f383 8811 	msr	BASEPRI, r3
 8004cae:	f3bf 8f6f 	isb	sy
 8004cb2:	f3bf 8f4f 	dsb	sy
 8004cb6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004cb8:	bf00      	nop
 8004cba:	e7fe      	b.n	8004cba <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d103      	bne.n	8004cca <xQueueGenericSend+0x6e>
 8004cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d101      	bne.n	8004cce <xQueueGenericSend+0x72>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e000      	b.n	8004cd0 <xQueueGenericSend+0x74>
 8004cce:	2300      	movs	r3, #0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10a      	bne.n	8004cea <xQueueGenericSend+0x8e>
        __asm volatile
 8004cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd8:	f383 8811 	msr	BASEPRI, r3
 8004cdc:	f3bf 8f6f 	isb	sy
 8004ce0:	f3bf 8f4f 	dsb	sy
 8004ce4:	623b      	str	r3, [r7, #32]
    }
 8004ce6:	bf00      	nop
 8004ce8:	e7fe      	b.n	8004ce8 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cea:	f001 f9d3 	bl	8006094 <xTaskGetSchedulerState>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d102      	bne.n	8004cfa <xQueueGenericSend+0x9e>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <xQueueGenericSend+0xa2>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e000      	b.n	8004d00 <xQueueGenericSend+0xa4>
 8004cfe:	2300      	movs	r3, #0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10a      	bne.n	8004d1a <xQueueGenericSend+0xbe>
        __asm volatile
 8004d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d08:	f383 8811 	msr	BASEPRI, r3
 8004d0c:	f3bf 8f6f 	isb	sy
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	61fb      	str	r3, [r7, #28]
    }
 8004d16:	bf00      	nop
 8004d18:	e7fe      	b.n	8004d18 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004d1a:	f002 f9d5 	bl	80070c8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d302      	bcc.n	8004d30 <xQueueGenericSend+0xd4>
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d129      	bne.n	8004d84 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d30:	683a      	ldr	r2, [r7, #0]
 8004d32:	68b9      	ldr	r1, [r7, #8]
 8004d34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d36:	f000 fac6 	bl	80052c6 <prvCopyDataToQueue>
 8004d3a:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d010      	beq.n	8004d66 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d46:	3324      	adds	r3, #36	; 0x24
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f001 f807 	bl	8005d5c <xTaskRemoveFromEventList>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d013      	beq.n	8004d7c <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8004d54:	4b3f      	ldr	r3, [pc, #252]	; (8004e54 <xQueueGenericSend+0x1f8>)
 8004d56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	f3bf 8f6f 	isb	sy
 8004d64:	e00a      	b.n	8004d7c <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8004d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d007      	beq.n	8004d7c <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004d6c:	4b39      	ldr	r3, [pc, #228]	; (8004e54 <xQueueGenericSend+0x1f8>)
 8004d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d72:	601a      	str	r2, [r3, #0]
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004d7c:	f002 f9d4 	bl	8007128 <vPortExitCritical>
                return pdPASS;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e063      	b.n	8004e4c <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d103      	bne.n	8004d92 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004d8a:	f002 f9cd 	bl	8007128 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	e05c      	b.n	8004e4c <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d106      	bne.n	8004da6 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004d98:	f107 0314 	add.w	r3, r7, #20
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f001 f83f 	bl	8005e20 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004da2:	2301      	movs	r3, #1
 8004da4:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004da6:	f002 f9bf 	bl	8007128 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004daa:	f000 fdb9 	bl	8005920 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004dae:	f002 f98b 	bl	80070c8 <vPortEnterCritical>
 8004db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004db8:	b25b      	sxtb	r3, r3
 8004dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dbe:	d103      	bne.n	8004dc8 <xQueueGenericSend+0x16c>
 8004dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004dce:	b25b      	sxtb	r3, r3
 8004dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd4:	d103      	bne.n	8004dde <xQueueGenericSend+0x182>
 8004dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dde:	f002 f9a3 	bl	8007128 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004de2:	1d3a      	adds	r2, r7, #4
 8004de4:	f107 0314 	add.w	r3, r7, #20
 8004de8:	4611      	mov	r1, r2
 8004dea:	4618      	mov	r0, r3
 8004dec:	f001 f82e 	bl	8005e4c <xTaskCheckForTimeOut>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d124      	bne.n	8004e40 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004df6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004df8:	f000 fb5d 	bl	80054b6 <prvIsQueueFull>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d018      	beq.n	8004e34 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e04:	3310      	adds	r3, #16
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	4611      	mov	r1, r2
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f000 ff56 	bl	8005cbc <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004e10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e12:	f000 fae8 	bl	80053e6 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004e16:	f000 fd91 	bl	800593c <xTaskResumeAll>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f47f af7c 	bne.w	8004d1a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8004e22:	4b0c      	ldr	r3, [pc, #48]	; (8004e54 <xQueueGenericSend+0x1f8>)
 8004e24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e28:	601a      	str	r2, [r3, #0]
 8004e2a:	f3bf 8f4f 	dsb	sy
 8004e2e:	f3bf 8f6f 	isb	sy
 8004e32:	e772      	b.n	8004d1a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004e34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e36:	f000 fad6 	bl	80053e6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004e3a:	f000 fd7f 	bl	800593c <xTaskResumeAll>
 8004e3e:	e76c      	b.n	8004d1a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004e40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e42:	f000 fad0 	bl	80053e6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004e46:	f000 fd79 	bl	800593c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8004e4a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3738      	adds	r7, #56	; 0x38
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	e000ed04 	.word	0xe000ed04

08004e58 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b090      	sub	sp, #64	; 0x40
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
 8004e64:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8004e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10a      	bne.n	8004e86 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8004e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e74:	f383 8811 	msr	BASEPRI, r3
 8004e78:	f3bf 8f6f 	isb	sy
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004e82:	bf00      	nop
 8004e84:	e7fe      	b.n	8004e84 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d103      	bne.n	8004e94 <xQueueGenericSendFromISR+0x3c>
 8004e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <xQueueGenericSendFromISR+0x40>
 8004e94:	2301      	movs	r3, #1
 8004e96:	e000      	b.n	8004e9a <xQueueGenericSendFromISR+0x42>
 8004e98:	2300      	movs	r3, #0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d10a      	bne.n	8004eb4 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8004e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004eb0:	bf00      	nop
 8004eb2:	e7fe      	b.n	8004eb2 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d103      	bne.n	8004ec2 <xQueueGenericSendFromISR+0x6a>
 8004eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d101      	bne.n	8004ec6 <xQueueGenericSendFromISR+0x6e>
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e000      	b.n	8004ec8 <xQueueGenericSendFromISR+0x70>
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d10a      	bne.n	8004ee2 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8004ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed0:	f383 8811 	msr	BASEPRI, r3
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	623b      	str	r3, [r7, #32]
    }
 8004ede:	bf00      	nop
 8004ee0:	e7fe      	b.n	8004ee0 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ee2:	f002 f9d3 	bl	800728c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8004ee6:	f3ef 8211 	mrs	r2, BASEPRI
 8004eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eee:	f383 8811 	msr	BASEPRI, r3
 8004ef2:	f3bf 8f6f 	isb	sy
 8004ef6:	f3bf 8f4f 	dsb	sy
 8004efa:	61fa      	str	r2, [r7, #28]
 8004efc:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8004efe:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f00:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d302      	bcc.n	8004f14 <xQueueGenericSendFromISR+0xbc>
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d13e      	bne.n	8004f92 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f22:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f24:	683a      	ldr	r2, [r7, #0]
 8004f26:	68b9      	ldr	r1, [r7, #8]
 8004f28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004f2a:	f000 f9cc 	bl	80052c6 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004f2e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f36:	d112      	bne.n	8004f5e <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d025      	beq.n	8004f8c <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f42:	3324      	adds	r3, #36	; 0x24
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 ff09 	bl	8005d5c <xTaskRemoveFromEventList>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d01d      	beq.n	8004f8c <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d01a      	beq.n	8004f8c <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	601a      	str	r2, [r3, #0]
 8004f5c:	e016      	b.n	8004f8c <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8004f5e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004f62:	2b7f      	cmp	r3, #127	; 0x7f
 8004f64:	d10a      	bne.n	8004f7c <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8004f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6a:	f383 8811 	msr	BASEPRI, r3
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	617b      	str	r3, [r7, #20]
    }
 8004f78:	bf00      	nop
 8004f7a:	e7fe      	b.n	8004f7a <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004f80:	3301      	adds	r3, #1
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	b25a      	sxtb	r2, r3
 8004f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8004f90:	e001      	b.n	8004f96 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8004f92:	2300      	movs	r3, #0
 8004f94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f98:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004fa0:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3740      	adds	r7, #64	; 0x40
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b08c      	sub	sp, #48	; 0x30
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10a      	bne.n	8004fdc <xQueueReceive+0x30>
        __asm volatile
 8004fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fca:	f383 8811 	msr	BASEPRI, r3
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	f3bf 8f4f 	dsb	sy
 8004fd6:	623b      	str	r3, [r7, #32]
    }
 8004fd8:	bf00      	nop
 8004fda:	e7fe      	b.n	8004fda <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d103      	bne.n	8004fea <xQueueReceive+0x3e>
 8004fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <xQueueReceive+0x42>
 8004fea:	2301      	movs	r3, #1
 8004fec:	e000      	b.n	8004ff0 <xQueueReceive+0x44>
 8004fee:	2300      	movs	r3, #0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d10a      	bne.n	800500a <xQueueReceive+0x5e>
        __asm volatile
 8004ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff8:	f383 8811 	msr	BASEPRI, r3
 8004ffc:	f3bf 8f6f 	isb	sy
 8005000:	f3bf 8f4f 	dsb	sy
 8005004:	61fb      	str	r3, [r7, #28]
    }
 8005006:	bf00      	nop
 8005008:	e7fe      	b.n	8005008 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800500a:	f001 f843 	bl	8006094 <xTaskGetSchedulerState>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d102      	bne.n	800501a <xQueueReceive+0x6e>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <xQueueReceive+0x72>
 800501a:	2301      	movs	r3, #1
 800501c:	e000      	b.n	8005020 <xQueueReceive+0x74>
 800501e:	2300      	movs	r3, #0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d10a      	bne.n	800503a <xQueueReceive+0x8e>
        __asm volatile
 8005024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005028:	f383 8811 	msr	BASEPRI, r3
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f3bf 8f4f 	dsb	sy
 8005034:	61bb      	str	r3, [r7, #24]
    }
 8005036:	bf00      	nop
 8005038:	e7fe      	b.n	8005038 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800503a:	f002 f845 	bl	80070c8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800503e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005042:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	2b00      	cmp	r3, #0
 8005048:	d01f      	beq.n	800508a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800504a:	68b9      	ldr	r1, [r7, #8]
 800504c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800504e:	f000 f9a4 	bl	800539a <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005054:	1e5a      	subs	r2, r3, #1
 8005056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005058:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800505a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00f      	beq.n	8005082 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005064:	3310      	adds	r3, #16
 8005066:	4618      	mov	r0, r3
 8005068:	f000 fe78 	bl	8005d5c <xTaskRemoveFromEventList>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d007      	beq.n	8005082 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005072:	4b3d      	ldr	r3, [pc, #244]	; (8005168 <xQueueReceive+0x1bc>)
 8005074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005078:	601a      	str	r2, [r3, #0]
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005082:	f002 f851 	bl	8007128 <vPortExitCritical>
                return pdPASS;
 8005086:	2301      	movs	r3, #1
 8005088:	e069      	b.n	800515e <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d103      	bne.n	8005098 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005090:	f002 f84a 	bl	8007128 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8005094:	2300      	movs	r3, #0
 8005096:	e062      	b.n	800515e <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509a:	2b00      	cmp	r3, #0
 800509c:	d106      	bne.n	80050ac <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800509e:	f107 0310 	add.w	r3, r7, #16
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 febc 	bl	8005e20 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80050a8:	2301      	movs	r3, #1
 80050aa:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80050ac:	f002 f83c 	bl	8007128 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80050b0:	f000 fc36 	bl	8005920 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80050b4:	f002 f808 	bl	80070c8 <vPortEnterCritical>
 80050b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050be:	b25b      	sxtb	r3, r3
 80050c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c4:	d103      	bne.n	80050ce <xQueueReceive+0x122>
 80050c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050d4:	b25b      	sxtb	r3, r3
 80050d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050da:	d103      	bne.n	80050e4 <xQueueReceive+0x138>
 80050dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050e4:	f002 f820 	bl	8007128 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050e8:	1d3a      	adds	r2, r7, #4
 80050ea:	f107 0310 	add.w	r3, r7, #16
 80050ee:	4611      	mov	r1, r2
 80050f0:	4618      	mov	r0, r3
 80050f2:	f000 feab 	bl	8005e4c <xTaskCheckForTimeOut>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d123      	bne.n	8005144 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050fe:	f000 f9c4 	bl	800548a <prvIsQueueEmpty>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d017      	beq.n	8005138 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510a:	3324      	adds	r3, #36	; 0x24
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	4611      	mov	r1, r2
 8005110:	4618      	mov	r0, r3
 8005112:	f000 fdd3 	bl	8005cbc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8005116:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005118:	f000 f965 	bl	80053e6 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800511c:	f000 fc0e 	bl	800593c <xTaskResumeAll>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d189      	bne.n	800503a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8005126:	4b10      	ldr	r3, [pc, #64]	; (8005168 <xQueueReceive+0x1bc>)
 8005128:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	f3bf 8f6f 	isb	sy
 8005136:	e780      	b.n	800503a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8005138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800513a:	f000 f954 	bl	80053e6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800513e:	f000 fbfd 	bl	800593c <xTaskResumeAll>
 8005142:	e77a      	b.n	800503a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005144:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005146:	f000 f94e 	bl	80053e6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800514a:	f000 fbf7 	bl	800593c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800514e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005150:	f000 f99b 	bl	800548a <prvIsQueueEmpty>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	f43f af6f 	beq.w	800503a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800515c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800515e:	4618      	mov	r0, r3
 8005160:	3730      	adds	r7, #48	; 0x30
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	e000ed04 	.word	0xe000ed04

0800516c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b090      	sub	sp, #64	; 0x40
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800517c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10a      	bne.n	8005198 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 8005182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005186:	f383 8811 	msr	BASEPRI, r3
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005194:	bf00      	nop
 8005196:	e7fe      	b.n	8005196 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d103      	bne.n	80051a6 <xQueueReceiveFromISR+0x3a>
 800519e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <xQueueReceiveFromISR+0x3e>
 80051a6:	2301      	movs	r3, #1
 80051a8:	e000      	b.n	80051ac <xQueueReceiveFromISR+0x40>
 80051aa:	2300      	movs	r3, #0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10a      	bne.n	80051c6 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 80051b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80051c2:	bf00      	nop
 80051c4:	e7fe      	b.n	80051c4 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051c6:	f002 f861 	bl	800728c <vPortValidateInterruptPriority>
        __asm volatile
 80051ca:	f3ef 8211 	mrs	r2, BASEPRI
 80051ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	623a      	str	r2, [r7, #32]
 80051e0:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 80051e2:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80051e4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ea:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d03e      	beq.n	8005270 <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 80051f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 80051fc:	68b9      	ldr	r1, [r7, #8]
 80051fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005200:	f000 f8cb 	bl	800539a <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005206:	1e5a      	subs	r2, r3, #1
 8005208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520a:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 800520c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005214:	d112      	bne.n	800523c <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d025      	beq.n	800526a <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800521e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005220:	3310      	adds	r3, #16
 8005222:	4618      	mov	r0, r3
 8005224:	f000 fd9a 	bl	8005d5c <xTaskRemoveFromEventList>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d01d      	beq.n	800526a <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d01a      	beq.n	800526a <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	e016      	b.n	800526a <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 800523c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005240:	2b7f      	cmp	r3, #127	; 0x7f
 8005242:	d10a      	bne.n	800525a <xQueueReceiveFromISR+0xee>
        __asm volatile
 8005244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	61bb      	str	r3, [r7, #24]
    }
 8005256:	bf00      	nop
 8005258:	e7fe      	b.n	8005258 <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800525a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800525e:	3301      	adds	r3, #1
 8005260:	b2db      	uxtb	r3, r3
 8005262:	b25a      	sxtb	r2, r3
 8005264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005266:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 800526a:	2301      	movs	r3, #1
 800526c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800526e:	e001      	b.n	8005274 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 8005270:	2300      	movs	r3, #0
 8005272:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005276:	617b      	str	r3, [r7, #20]
        __asm volatile
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	f383 8811 	msr	BASEPRI, r3
    }
 800527e:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005282:	4618      	mov	r0, r3
 8005284:	3740      	adds	r7, #64	; 0x40
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b084      	sub	sp, #16
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10a      	bne.n	80052ae <uxQueueMessagesWaiting+0x24>
        __asm volatile
 8005298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529c:	f383 8811 	msr	BASEPRI, r3
 80052a0:	f3bf 8f6f 	isb	sy
 80052a4:	f3bf 8f4f 	dsb	sy
 80052a8:	60bb      	str	r3, [r7, #8]
    }
 80052aa:	bf00      	nop
 80052ac:	e7fe      	b.n	80052ac <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 80052ae:	f001 ff0b 	bl	80070c8 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b6:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80052b8:	f001 ff36 	bl	8007128 <vPortExitCritical>

    return uxReturn;
 80052bc:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b086      	sub	sp, #24
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	60f8      	str	r0, [r7, #12]
 80052ce:	60b9      	str	r1, [r7, #8]
 80052d0:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80052d2:	2300      	movs	r3, #0
 80052d4:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052da:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10d      	bne.n	8005300 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d14d      	bne.n	8005388 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 feed 	bl	80060d0 <xTaskPriorityDisinherit>
 80052f6:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	609a      	str	r2, [r3, #8]
 80052fe:	e043      	b.n	8005388 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d119      	bne.n	800533a <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6858      	ldr	r0, [r3, #4]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	461a      	mov	r2, r3
 8005310:	68b9      	ldr	r1, [r7, #8]
 8005312:	f002 fa23 	bl	800775c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	685a      	ldr	r2, [r3, #4]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531e:	441a      	add	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	429a      	cmp	r2, r3
 800532e:	d32b      	bcc.n	8005388 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	605a      	str	r2, [r3, #4]
 8005338:	e026      	b.n	8005388 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	68d8      	ldr	r0, [r3, #12]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005342:	461a      	mov	r2, r3
 8005344:	68b9      	ldr	r1, [r7, #8]
 8005346:	f002 fa09 	bl	800775c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	68da      	ldr	r2, [r3, #12]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005352:	425b      	negs	r3, r3
 8005354:	441a      	add	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	68da      	ldr	r2, [r3, #12]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	429a      	cmp	r2, r3
 8005364:	d207      	bcs.n	8005376 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	689a      	ldr	r2, [r3, #8]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536e:	425b      	negs	r3, r3
 8005370:	441a      	add	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b02      	cmp	r3, #2
 800537a:	d105      	bne.n	8005388 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d002      	beq.n	8005388 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	3b01      	subs	r3, #1
 8005386:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	1c5a      	adds	r2, r3, #1
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8005390:	697b      	ldr	r3, [r7, #20]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3718      	adds	r7, #24
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b082      	sub	sp, #8
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
 80053a2:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d018      	beq.n	80053de <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68da      	ldr	r2, [r3, #12]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b4:	441a      	add	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68da      	ldr	r2, [r3, #12]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d303      	bcc.n	80053ce <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68d9      	ldr	r1, [r3, #12]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d6:	461a      	mov	r2, r3
 80053d8:	6838      	ldr	r0, [r7, #0]
 80053da:	f002 f9bf 	bl	800775c <memcpy>
    }
}
 80053de:	bf00      	nop
 80053e0:	3708      	adds	r7, #8
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b084      	sub	sp, #16
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80053ee:	f001 fe6b 	bl	80070c8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053f8:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80053fa:	e011      	b.n	8005420 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	2b00      	cmp	r3, #0
 8005402:	d012      	beq.n	800542a <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	3324      	adds	r3, #36	; 0x24
 8005408:	4618      	mov	r0, r3
 800540a:	f000 fca7 	bl	8005d5c <xTaskRemoveFromEventList>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d001      	beq.n	8005418 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8005414:	f000 fd80 	bl	8005f18 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8005418:	7bfb      	ldrb	r3, [r7, #15]
 800541a:	3b01      	subs	r3, #1
 800541c:	b2db      	uxtb	r3, r3
 800541e:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005424:	2b00      	cmp	r3, #0
 8005426:	dce9      	bgt.n	80053fc <prvUnlockQueue+0x16>
 8005428:	e000      	b.n	800542c <prvUnlockQueue+0x46>
                        break;
 800542a:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	22ff      	movs	r2, #255	; 0xff
 8005430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8005434:	f001 fe78 	bl	8007128 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8005438:	f001 fe46 	bl	80070c8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005442:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005444:	e011      	b.n	800546a <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d012      	beq.n	8005474 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	3310      	adds	r3, #16
 8005452:	4618      	mov	r0, r3
 8005454:	f000 fc82 	bl	8005d5c <xTaskRemoveFromEventList>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800545e:	f000 fd5b 	bl	8005f18 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8005462:	7bbb      	ldrb	r3, [r7, #14]
 8005464:	3b01      	subs	r3, #1
 8005466:	b2db      	uxtb	r3, r3
 8005468:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800546a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800546e:	2b00      	cmp	r3, #0
 8005470:	dce9      	bgt.n	8005446 <prvUnlockQueue+0x60>
 8005472:	e000      	b.n	8005476 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8005474:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	22ff      	movs	r2, #255	; 0xff
 800547a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800547e:	f001 fe53 	bl	8007128 <vPortExitCritical>
}
 8005482:	bf00      	nop
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800548a:	b580      	push	{r7, lr}
 800548c:	b084      	sub	sp, #16
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005492:	f001 fe19 	bl	80070c8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549a:	2b00      	cmp	r3, #0
 800549c:	d102      	bne.n	80054a4 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800549e:	2301      	movs	r3, #1
 80054a0:	60fb      	str	r3, [r7, #12]
 80054a2:	e001      	b.n	80054a8 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80054a4:	2300      	movs	r3, #0
 80054a6:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80054a8:	f001 fe3e 	bl	8007128 <vPortExitCritical>

    return xReturn;
 80054ac:	68fb      	ldr	r3, [r7, #12]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b084      	sub	sp, #16
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80054be:	f001 fe03 	bl	80070c8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d102      	bne.n	80054d4 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80054ce:	2301      	movs	r3, #1
 80054d0:	60fb      	str	r3, [r7, #12]
 80054d2:	e001      	b.n	80054d8 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80054d4:	2300      	movs	r3, #0
 80054d6:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80054d8:	f001 fe26 	bl	8007128 <vPortExitCritical>

    return xReturn;
 80054dc:	68fb      	ldr	r3, [r7, #12]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 80054e6:	b480      	push	{r7}
 80054e8:	b087      	sub	sp, #28
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10a      	bne.n	800550e <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 80054f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fc:	f383 8811 	msr	BASEPRI, r3
 8005500:	f3bf 8f6f 	isb	sy
 8005504:	f3bf 8f4f 	dsb	sy
 8005508:	60fb      	str	r3, [r7, #12]
    }
 800550a:	bf00      	nop
 800550c:	e7fe      	b.n	800550c <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005516:	429a      	cmp	r2, r3
 8005518:	d102      	bne.n	8005520 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 800551a:	2301      	movs	r3, #1
 800551c:	617b      	str	r3, [r7, #20]
 800551e:	e001      	b.n	8005524 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8005520:	2300      	movs	r3, #0
 8005522:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005524:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005526:	4618      	mov	r0, r3
 8005528:	371c      	adds	r7, #28
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
	...

08005534 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800553e:	2300      	movs	r3, #0
 8005540:	60fb      	str	r3, [r7, #12]
 8005542:	e014      	b.n	800556e <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005544:	4a0f      	ldr	r2, [pc, #60]	; (8005584 <vQueueAddToRegistry+0x50>)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10b      	bne.n	8005568 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005550:	490c      	ldr	r1, [pc, #48]	; (8005584 <vQueueAddToRegistry+0x50>)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	683a      	ldr	r2, [r7, #0]
 8005556:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800555a:	4a0a      	ldr	r2, [pc, #40]	; (8005584 <vQueueAddToRegistry+0x50>)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	00db      	lsls	r3, r3, #3
 8005560:	4413      	add	r3, r2
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8005566:	e006      	b.n	8005576 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	3301      	adds	r3, #1
 800556c:	60fb      	str	r3, [r7, #12]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2b07      	cmp	r3, #7
 8005572:	d9e7      	bls.n	8005544 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8005574:	bf00      	nop
 8005576:	bf00      	nop
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	20012f5c 	.word	0x20012f5c

08005588 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8005598:	f001 fd96 	bl	80070c8 <vPortEnterCritical>
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055a2:	b25b      	sxtb	r3, r3
 80055a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a8:	d103      	bne.n	80055b2 <vQueueWaitForMessageRestricted+0x2a>
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055b8:	b25b      	sxtb	r3, r3
 80055ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055be:	d103      	bne.n	80055c8 <vQueueWaitForMessageRestricted+0x40>
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055c8:	f001 fdae 	bl	8007128 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d106      	bne.n	80055e2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	3324      	adds	r3, #36	; 0x24
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	68b9      	ldr	r1, [r7, #8]
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 fb91 	bl	8005d04 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80055e2:	6978      	ldr	r0, [r7, #20]
 80055e4:	f7ff feff 	bl	80053e6 <prvUnlockQueue>
    }
 80055e8:	bf00      	nop
 80055ea:	3718      	adds	r7, #24
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b08c      	sub	sp, #48	; 0x30
 80055f4:	af04      	add	r7, sp, #16
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	603b      	str	r3, [r7, #0]
 80055fc:	4613      	mov	r3, r2
 80055fe:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005600:	88fb      	ldrh	r3, [r7, #6]
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4618      	mov	r0, r3
 8005606:	f001 fe81 	bl	800730c <pvPortMalloc>
 800560a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00e      	beq.n	8005630 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005612:	2058      	movs	r0, #88	; 0x58
 8005614:	f001 fe7a 	bl	800730c <pvPortMalloc>
 8005618:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d003      	beq.n	8005628 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	631a      	str	r2, [r3, #48]	; 0x30
 8005626:	e005      	b.n	8005634 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8005628:	6978      	ldr	r0, [r7, #20]
 800562a:	f001 ff4f 	bl	80074cc <vPortFree>
 800562e:	e001      	b.n	8005634 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8005630:	2300      	movs	r3, #0
 8005632:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d013      	beq.n	8005662 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800563a:	88fa      	ldrh	r2, [r7, #6]
 800563c:	2300      	movs	r3, #0
 800563e:	9303      	str	r3, [sp, #12]
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	9302      	str	r3, [sp, #8]
 8005644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005646:	9301      	str	r3, [sp, #4]
 8005648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	68b9      	ldr	r1, [r7, #8]
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f000 f80e 	bl	8005672 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005656:	69f8      	ldr	r0, [r7, #28]
 8005658:	f000 f8a2 	bl	80057a0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800565c:	2301      	movs	r3, #1
 800565e:	61bb      	str	r3, [r7, #24]
 8005660:	e002      	b.n	8005668 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005662:	f04f 33ff 	mov.w	r3, #4294967295
 8005666:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005668:	69bb      	ldr	r3, [r7, #24]
    }
 800566a:	4618      	mov	r0, r3
 800566c:	3720      	adds	r7, #32
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b088      	sub	sp, #32
 8005676:	af00      	add	r7, sp, #0
 8005678:	60f8      	str	r0, [r7, #12]
 800567a:	60b9      	str	r1, [r7, #8]
 800567c:	607a      	str	r2, [r7, #4]
 800567e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005682:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	461a      	mov	r2, r3
 800568a:	21a5      	movs	r1, #165	; 0xa5
 800568c:	f002 f874 	bl	8007778 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800569a:	3b01      	subs	r3, #1
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4413      	add	r3, r2
 80056a0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	f023 0307 	bic.w	r3, r3, #7
 80056a8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	f003 0307 	and.w	r3, r3, #7
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00a      	beq.n	80056ca <prvInitialiseNewTask+0x58>
        __asm volatile
 80056b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b8:	f383 8811 	msr	BASEPRI, r3
 80056bc:	f3bf 8f6f 	isb	sy
 80056c0:	f3bf 8f4f 	dsb	sy
 80056c4:	617b      	str	r3, [r7, #20]
    }
 80056c6:	bf00      	nop
 80056c8:	e7fe      	b.n	80056c8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d01f      	beq.n	8005710 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056d0:	2300      	movs	r3, #0
 80056d2:	61fb      	str	r3, [r7, #28]
 80056d4:	e012      	b.n	80056fc <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	4413      	add	r3, r2
 80056dc:	7819      	ldrb	r1, [r3, #0]
 80056de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	4413      	add	r3, r2
 80056e4:	3334      	adds	r3, #52	; 0x34
 80056e6:	460a      	mov	r2, r1
 80056e8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	4413      	add	r3, r2
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d006      	beq.n	8005704 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	3301      	adds	r3, #1
 80056fa:	61fb      	str	r3, [r7, #28]
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	2b09      	cmp	r3, #9
 8005700:	d9e9      	bls.n	80056d6 <prvInitialiseNewTask+0x64>
 8005702:	e000      	b.n	8005706 <prvInitialiseNewTask+0x94>
            {
                break;
 8005704:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005708:	2200      	movs	r2, #0
 800570a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800570e:	e003      	b.n	8005718 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005712:	2200      	movs	r2, #0
 8005714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571a:	2b04      	cmp	r3, #4
 800571c:	d901      	bls.n	8005722 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800571e:	2304      	movs	r3, #4
 8005720:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005724:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005726:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8005728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800572c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800572e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005730:	2200      	movs	r2, #0
 8005732:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005736:	3304      	adds	r3, #4
 8005738:	4618      	mov	r0, r3
 800573a:	f7ff f911 	bl	8004960 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800573e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005740:	3318      	adds	r3, #24
 8005742:	4618      	mov	r0, r3
 8005744:	f7ff f90c 	bl	8004960 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800574c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800574e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005750:	f1c3 0205 	rsb	r2, r3, #5
 8005754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005756:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800575c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800575e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005760:	3350      	adds	r3, #80	; 0x50
 8005762:	2204      	movs	r2, #4
 8005764:	2100      	movs	r1, #0
 8005766:	4618      	mov	r0, r3
 8005768:	f002 f806 	bl	8007778 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800576c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576e:	3354      	adds	r3, #84	; 0x54
 8005770:	2201      	movs	r2, #1
 8005772:	2100      	movs	r1, #0
 8005774:	4618      	mov	r0, r3
 8005776:	f001 ffff 	bl	8007778 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	68f9      	ldr	r1, [r7, #12]
 800577e:	69b8      	ldr	r0, [r7, #24]
 8005780:	f001 fb76 	bl	8006e70 <pxPortInitialiseStack>
 8005784:	4602      	mov	r2, r0
 8005786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005788:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800578a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578c:	2b00      	cmp	r3, #0
 800578e:	d002      	beq.n	8005796 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005794:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005796:	bf00      	nop
 8005798:	3720      	adds	r7, #32
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
	...

080057a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80057a8:	f001 fc8e 	bl	80070c8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80057ac:	4b2c      	ldr	r3, [pc, #176]	; (8005860 <prvAddNewTaskToReadyList+0xc0>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	3301      	adds	r3, #1
 80057b2:	4a2b      	ldr	r2, [pc, #172]	; (8005860 <prvAddNewTaskToReadyList+0xc0>)
 80057b4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80057b6:	4b2b      	ldr	r3, [pc, #172]	; (8005864 <prvAddNewTaskToReadyList+0xc4>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d109      	bne.n	80057d2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80057be:	4a29      	ldr	r2, [pc, #164]	; (8005864 <prvAddNewTaskToReadyList+0xc4>)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80057c4:	4b26      	ldr	r3, [pc, #152]	; (8005860 <prvAddNewTaskToReadyList+0xc0>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d110      	bne.n	80057ee <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80057cc:	f000 fbc8 	bl	8005f60 <prvInitialiseTaskLists>
 80057d0:	e00d      	b.n	80057ee <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80057d2:	4b25      	ldr	r3, [pc, #148]	; (8005868 <prvAddNewTaskToReadyList+0xc8>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d109      	bne.n	80057ee <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80057da:	4b22      	ldr	r3, [pc, #136]	; (8005864 <prvAddNewTaskToReadyList+0xc4>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d802      	bhi.n	80057ee <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80057e8:	4a1e      	ldr	r2, [pc, #120]	; (8005864 <prvAddNewTaskToReadyList+0xc4>)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80057ee:	4b1f      	ldr	r3, [pc, #124]	; (800586c <prvAddNewTaskToReadyList+0xcc>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	3301      	adds	r3, #1
 80057f4:	4a1d      	ldr	r2, [pc, #116]	; (800586c <prvAddNewTaskToReadyList+0xcc>)
 80057f6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80057f8:	4b1c      	ldr	r3, [pc, #112]	; (800586c <prvAddNewTaskToReadyList+0xcc>)
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005804:	2201      	movs	r2, #1
 8005806:	409a      	lsls	r2, r3
 8005808:	4b19      	ldr	r3, [pc, #100]	; (8005870 <prvAddNewTaskToReadyList+0xd0>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4313      	orrs	r3, r2
 800580e:	4a18      	ldr	r2, [pc, #96]	; (8005870 <prvAddNewTaskToReadyList+0xd0>)
 8005810:	6013      	str	r3, [r2, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005816:	4613      	mov	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4413      	add	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4a15      	ldr	r2, [pc, #84]	; (8005874 <prvAddNewTaskToReadyList+0xd4>)
 8005820:	441a      	add	r2, r3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	3304      	adds	r3, #4
 8005826:	4619      	mov	r1, r3
 8005828:	4610      	mov	r0, r2
 800582a:	f7ff f8a6 	bl	800497a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800582e:	f001 fc7b 	bl	8007128 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8005832:	4b0d      	ldr	r3, [pc, #52]	; (8005868 <prvAddNewTaskToReadyList+0xc8>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00e      	beq.n	8005858 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800583a:	4b0a      	ldr	r3, [pc, #40]	; (8005864 <prvAddNewTaskToReadyList+0xc4>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005844:	429a      	cmp	r2, r3
 8005846:	d207      	bcs.n	8005858 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005848:	4b0b      	ldr	r3, [pc, #44]	; (8005878 <prvAddNewTaskToReadyList+0xd8>)
 800584a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800584e:	601a      	str	r2, [r3, #0]
 8005850:	f3bf 8f4f 	dsb	sy
 8005854:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005858:	bf00      	nop
 800585a:	3708      	adds	r7, #8
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	200001e4 	.word	0x200001e4
 8005864:	2000010c 	.word	0x2000010c
 8005868:	200001f0 	.word	0x200001f0
 800586c:	20000200 	.word	0x20000200
 8005870:	200001ec 	.word	0x200001ec
 8005874:	20000110 	.word	0x20000110
 8005878:	e000ed04 	.word	0xe000ed04

0800587c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8005882:	4b20      	ldr	r3, [pc, #128]	; (8005904 <vTaskStartScheduler+0x88>)
 8005884:	9301      	str	r3, [sp, #4]
 8005886:	2300      	movs	r3, #0
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	2300      	movs	r3, #0
 800588c:	2282      	movs	r2, #130	; 0x82
 800588e:	491e      	ldr	r1, [pc, #120]	; (8005908 <vTaskStartScheduler+0x8c>)
 8005890:	481e      	ldr	r0, [pc, #120]	; (800590c <vTaskStartScheduler+0x90>)
 8005892:	f7ff fead 	bl	80055f0 <xTaskCreate>
 8005896:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d102      	bne.n	80058a4 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800589e:	f000 ff59 	bl	8006754 <xTimerCreateTimerTask>
 80058a2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d116      	bne.n	80058d8 <vTaskStartScheduler+0x5c>
        __asm volatile
 80058aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ae:	f383 8811 	msr	BASEPRI, r3
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	f3bf 8f4f 	dsb	sy
 80058ba:	60bb      	str	r3, [r7, #8]
    }
 80058bc:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80058be:	4b14      	ldr	r3, [pc, #80]	; (8005910 <vTaskStartScheduler+0x94>)
 80058c0:	f04f 32ff 	mov.w	r2, #4294967295
 80058c4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80058c6:	4b13      	ldr	r3, [pc, #76]	; (8005914 <vTaskStartScheduler+0x98>)
 80058c8:	2201      	movs	r2, #1
 80058ca:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80058cc:	4b12      	ldr	r3, [pc, #72]	; (8005918 <vTaskStartScheduler+0x9c>)
 80058ce:	2200      	movs	r2, #0
 80058d0:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80058d2:	f001 fb57 	bl	8006f84 <xPortStartScheduler>
 80058d6:	e00e      	b.n	80058f6 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058de:	d10a      	bne.n	80058f6 <vTaskStartScheduler+0x7a>
        __asm volatile
 80058e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	607b      	str	r3, [r7, #4]
    }
 80058f2:	bf00      	nop
 80058f4:	e7fe      	b.n	80058f4 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80058f6:	4b09      	ldr	r3, [pc, #36]	; (800591c <vTaskStartScheduler+0xa0>)
 80058f8:	681b      	ldr	r3, [r3, #0]
}
 80058fa:	bf00      	nop
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	20000208 	.word	0x20000208
 8005908:	080083c8 	.word	0x080083c8
 800590c:	08005f31 	.word	0x08005f31
 8005910:	20000204 	.word	0x20000204
 8005914:	200001f0 	.word	0x200001f0
 8005918:	200001e8 	.word	0x200001e8
 800591c:	20000020 	.word	0x20000020

08005920 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005920:	b480      	push	{r7}
 8005922:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005924:	4b04      	ldr	r3, [pc, #16]	; (8005938 <vTaskSuspendAll+0x18>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	3301      	adds	r3, #1
 800592a:	4a03      	ldr	r2, [pc, #12]	; (8005938 <vTaskSuspendAll+0x18>)
 800592c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800592e:	bf00      	nop
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	2000020c 	.word	0x2000020c

0800593c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005942:	2300      	movs	r3, #0
 8005944:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005946:	2300      	movs	r3, #0
 8005948:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800594a:	4b41      	ldr	r3, [pc, #260]	; (8005a50 <xTaskResumeAll+0x114>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10a      	bne.n	8005968 <xTaskResumeAll+0x2c>
        __asm volatile
 8005952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005956:	f383 8811 	msr	BASEPRI, r3
 800595a:	f3bf 8f6f 	isb	sy
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	603b      	str	r3, [r7, #0]
    }
 8005964:	bf00      	nop
 8005966:	e7fe      	b.n	8005966 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005968:	f001 fbae 	bl	80070c8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800596c:	4b38      	ldr	r3, [pc, #224]	; (8005a50 <xTaskResumeAll+0x114>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	3b01      	subs	r3, #1
 8005972:	4a37      	ldr	r2, [pc, #220]	; (8005a50 <xTaskResumeAll+0x114>)
 8005974:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005976:	4b36      	ldr	r3, [pc, #216]	; (8005a50 <xTaskResumeAll+0x114>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d161      	bne.n	8005a42 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800597e:	4b35      	ldr	r3, [pc, #212]	; (8005a54 <xTaskResumeAll+0x118>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d05d      	beq.n	8005a42 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005986:	e02e      	b.n	80059e6 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005988:	4b33      	ldr	r3, [pc, #204]	; (8005a58 <xTaskResumeAll+0x11c>)
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	3318      	adds	r3, #24
 8005994:	4618      	mov	r0, r3
 8005996:	f7ff f84d 	bl	8004a34 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	3304      	adds	r3, #4
 800599e:	4618      	mov	r0, r3
 80059a0:	f7ff f848 	bl	8004a34 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a8:	2201      	movs	r2, #1
 80059aa:	409a      	lsls	r2, r3
 80059ac:	4b2b      	ldr	r3, [pc, #172]	; (8005a5c <xTaskResumeAll+0x120>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	4a2a      	ldr	r2, [pc, #168]	; (8005a5c <xTaskResumeAll+0x120>)
 80059b4:	6013      	str	r3, [r2, #0]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ba:	4613      	mov	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4413      	add	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	4a27      	ldr	r2, [pc, #156]	; (8005a60 <xTaskResumeAll+0x124>)
 80059c4:	441a      	add	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	3304      	adds	r3, #4
 80059ca:	4619      	mov	r1, r3
 80059cc:	4610      	mov	r0, r2
 80059ce:	f7fe ffd4 	bl	800497a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d6:	4b23      	ldr	r3, [pc, #140]	; (8005a64 <xTaskResumeAll+0x128>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059dc:	429a      	cmp	r2, r3
 80059de:	d302      	bcc.n	80059e6 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 80059e0:	4b21      	ldr	r3, [pc, #132]	; (8005a68 <xTaskResumeAll+0x12c>)
 80059e2:	2201      	movs	r2, #1
 80059e4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059e6:	4b1c      	ldr	r3, [pc, #112]	; (8005a58 <xTaskResumeAll+0x11c>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1cc      	bne.n	8005988 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d001      	beq.n	80059f8 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80059f4:	f000 fb32 	bl	800605c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80059f8:	4b1c      	ldr	r3, [pc, #112]	; (8005a6c <xTaskResumeAll+0x130>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d010      	beq.n	8005a26 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005a04:	f000 f846 	bl	8005a94 <xTaskIncrementTick>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d002      	beq.n	8005a14 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8005a0e:	4b16      	ldr	r3, [pc, #88]	; (8005a68 <xTaskResumeAll+0x12c>)
 8005a10:	2201      	movs	r2, #1
 8005a12:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	3b01      	subs	r3, #1
 8005a18:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1f1      	bne.n	8005a04 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8005a20:	4b12      	ldr	r3, [pc, #72]	; (8005a6c <xTaskResumeAll+0x130>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005a26:	4b10      	ldr	r3, [pc, #64]	; (8005a68 <xTaskResumeAll+0x12c>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d009      	beq.n	8005a42 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005a32:	4b0f      	ldr	r3, [pc, #60]	; (8005a70 <xTaskResumeAll+0x134>)
 8005a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a38:	601a      	str	r2, [r3, #0]
 8005a3a:	f3bf 8f4f 	dsb	sy
 8005a3e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005a42:	f001 fb71 	bl	8007128 <vPortExitCritical>

    return xAlreadyYielded;
 8005a46:	68bb      	ldr	r3, [r7, #8]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3710      	adds	r7, #16
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	2000020c 	.word	0x2000020c
 8005a54:	200001e4 	.word	0x200001e4
 8005a58:	200001a4 	.word	0x200001a4
 8005a5c:	200001ec 	.word	0x200001ec
 8005a60:	20000110 	.word	0x20000110
 8005a64:	2000010c 	.word	0x2000010c
 8005a68:	200001f8 	.word	0x200001f8
 8005a6c:	200001f4 	.word	0x200001f4
 8005a70:	e000ed04 	.word	0xe000ed04

08005a74 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005a7a:	4b05      	ldr	r3, [pc, #20]	; (8005a90 <xTaskGetTickCount+0x1c>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005a80:	687b      	ldr	r3, [r7, #4]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	200001e8 	.word	0x200001e8

08005a94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a9e:	4b4e      	ldr	r3, [pc, #312]	; (8005bd8 <xTaskIncrementTick+0x144>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f040 808e 	bne.w	8005bc4 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005aa8:	4b4c      	ldr	r3, [pc, #304]	; (8005bdc <xTaskIncrementTick+0x148>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3301      	adds	r3, #1
 8005aae:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005ab0:	4a4a      	ldr	r2, [pc, #296]	; (8005bdc <xTaskIncrementTick+0x148>)
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d120      	bne.n	8005afe <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8005abc:	4b48      	ldr	r3, [pc, #288]	; (8005be0 <xTaskIncrementTick+0x14c>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00a      	beq.n	8005adc <xTaskIncrementTick+0x48>
        __asm volatile
 8005ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aca:	f383 8811 	msr	BASEPRI, r3
 8005ace:	f3bf 8f6f 	isb	sy
 8005ad2:	f3bf 8f4f 	dsb	sy
 8005ad6:	603b      	str	r3, [r7, #0]
    }
 8005ad8:	bf00      	nop
 8005ada:	e7fe      	b.n	8005ada <xTaskIncrementTick+0x46>
 8005adc:	4b40      	ldr	r3, [pc, #256]	; (8005be0 <xTaskIncrementTick+0x14c>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	60fb      	str	r3, [r7, #12]
 8005ae2:	4b40      	ldr	r3, [pc, #256]	; (8005be4 <xTaskIncrementTick+0x150>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a3e      	ldr	r2, [pc, #248]	; (8005be0 <xTaskIncrementTick+0x14c>)
 8005ae8:	6013      	str	r3, [r2, #0]
 8005aea:	4a3e      	ldr	r2, [pc, #248]	; (8005be4 <xTaskIncrementTick+0x150>)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6013      	str	r3, [r2, #0]
 8005af0:	4b3d      	ldr	r3, [pc, #244]	; (8005be8 <xTaskIncrementTick+0x154>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	3301      	adds	r3, #1
 8005af6:	4a3c      	ldr	r2, [pc, #240]	; (8005be8 <xTaskIncrementTick+0x154>)
 8005af8:	6013      	str	r3, [r2, #0]
 8005afa:	f000 faaf 	bl	800605c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005afe:	4b3b      	ldr	r3, [pc, #236]	; (8005bec <xTaskIncrementTick+0x158>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d348      	bcc.n	8005b9a <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b08:	4b35      	ldr	r3, [pc, #212]	; (8005be0 <xTaskIncrementTick+0x14c>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d104      	bne.n	8005b1c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b12:	4b36      	ldr	r3, [pc, #216]	; (8005bec <xTaskIncrementTick+0x158>)
 8005b14:	f04f 32ff 	mov.w	r2, #4294967295
 8005b18:	601a      	str	r2, [r3, #0]
                    break;
 8005b1a:	e03e      	b.n	8005b9a <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b1c:	4b30      	ldr	r3, [pc, #192]	; (8005be0 <xTaskIncrementTick+0x14c>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d203      	bcs.n	8005b3c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005b34:	4a2d      	ldr	r2, [pc, #180]	; (8005bec <xTaskIncrementTick+0x158>)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005b3a:	e02e      	b.n	8005b9a <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	3304      	adds	r3, #4
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7fe ff77 	bl	8004a34 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d004      	beq.n	8005b58 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	3318      	adds	r3, #24
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7fe ff6e 	bl	8004a34 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	409a      	lsls	r2, r3
 8005b60:	4b23      	ldr	r3, [pc, #140]	; (8005bf0 <xTaskIncrementTick+0x15c>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	4a22      	ldr	r2, [pc, #136]	; (8005bf0 <xTaskIncrementTick+0x15c>)
 8005b68:	6013      	str	r3, [r2, #0]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b6e:	4613      	mov	r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4a1f      	ldr	r2, [pc, #124]	; (8005bf4 <xTaskIncrementTick+0x160>)
 8005b78:	441a      	add	r2, r3
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	3304      	adds	r3, #4
 8005b7e:	4619      	mov	r1, r3
 8005b80:	4610      	mov	r0, r2
 8005b82:	f7fe fefa 	bl	800497a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b8a:	4b1b      	ldr	r3, [pc, #108]	; (8005bf8 <xTaskIncrementTick+0x164>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d3b9      	bcc.n	8005b08 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8005b94:	2301      	movs	r3, #1
 8005b96:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b98:	e7b6      	b.n	8005b08 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b9a:	4b17      	ldr	r3, [pc, #92]	; (8005bf8 <xTaskIncrementTick+0x164>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba0:	4914      	ldr	r1, [pc, #80]	; (8005bf4 <xTaskIncrementTick+0x160>)
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4413      	add	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	440b      	add	r3, r1
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d901      	bls.n	8005bb6 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8005bb6:	4b11      	ldr	r3, [pc, #68]	; (8005bfc <xTaskIncrementTick+0x168>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d007      	beq.n	8005bce <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	617b      	str	r3, [r7, #20]
 8005bc2:	e004      	b.n	8005bce <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005bc4:	4b0e      	ldr	r3, [pc, #56]	; (8005c00 <xTaskIncrementTick+0x16c>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	4a0d      	ldr	r2, [pc, #52]	; (8005c00 <xTaskIncrementTick+0x16c>)
 8005bcc:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8005bce:	697b      	ldr	r3, [r7, #20]
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3718      	adds	r7, #24
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	2000020c 	.word	0x2000020c
 8005bdc:	200001e8 	.word	0x200001e8
 8005be0:	2000019c 	.word	0x2000019c
 8005be4:	200001a0 	.word	0x200001a0
 8005be8:	200001fc 	.word	0x200001fc
 8005bec:	20000204 	.word	0x20000204
 8005bf0:	200001ec 	.word	0x200001ec
 8005bf4:	20000110 	.word	0x20000110
 8005bf8:	2000010c 	.word	0x2000010c
 8005bfc:	200001f8 	.word	0x200001f8
 8005c00:	200001f4 	.word	0x200001f4

08005c04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c04:	b480      	push	{r7}
 8005c06:	b087      	sub	sp, #28
 8005c08:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c0a:	4b27      	ldr	r3, [pc, #156]	; (8005ca8 <vTaskSwitchContext+0xa4>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d003      	beq.n	8005c1a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005c12:	4b26      	ldr	r3, [pc, #152]	; (8005cac <vTaskSwitchContext+0xa8>)
 8005c14:	2201      	movs	r2, #1
 8005c16:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8005c18:	e03f      	b.n	8005c9a <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8005c1a:	4b24      	ldr	r3, [pc, #144]	; (8005cac <vTaskSwitchContext+0xa8>)
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c20:	4b23      	ldr	r3, [pc, #140]	; (8005cb0 <vTaskSwitchContext+0xac>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	fab3 f383 	clz	r3, r3
 8005c2c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005c2e:	7afb      	ldrb	r3, [r7, #11]
 8005c30:	f1c3 031f 	rsb	r3, r3, #31
 8005c34:	617b      	str	r3, [r7, #20]
 8005c36:	491f      	ldr	r1, [pc, #124]	; (8005cb4 <vTaskSwitchContext+0xb0>)
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	4413      	add	r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	440b      	add	r3, r1
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10a      	bne.n	8005c60 <vTaskSwitchContext+0x5c>
        __asm volatile
 8005c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4e:	f383 8811 	msr	BASEPRI, r3
 8005c52:	f3bf 8f6f 	isb	sy
 8005c56:	f3bf 8f4f 	dsb	sy
 8005c5a:	607b      	str	r3, [r7, #4]
    }
 8005c5c:	bf00      	nop
 8005c5e:	e7fe      	b.n	8005c5e <vTaskSwitchContext+0x5a>
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	4613      	mov	r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	4413      	add	r3, r2
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	4a12      	ldr	r2, [pc, #72]	; (8005cb4 <vTaskSwitchContext+0xb0>)
 8005c6c:	4413      	add	r3, r2
 8005c6e:	613b      	str	r3, [r7, #16]
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	605a      	str	r2, [r3, #4]
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	685a      	ldr	r2, [r3, #4]
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	3308      	adds	r3, #8
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d104      	bne.n	8005c90 <vTaskSwitchContext+0x8c>
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	605a      	str	r2, [r3, #4]
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	4a08      	ldr	r2, [pc, #32]	; (8005cb8 <vTaskSwitchContext+0xb4>)
 8005c98:	6013      	str	r3, [r2, #0]
}
 8005c9a:	bf00      	nop
 8005c9c:	371c      	adds	r7, #28
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	2000020c 	.word	0x2000020c
 8005cac:	200001f8 	.word	0x200001f8
 8005cb0:	200001ec 	.word	0x200001ec
 8005cb4:	20000110 	.word	0x20000110
 8005cb8:	2000010c 	.word	0x2000010c

08005cbc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10a      	bne.n	8005ce2 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8005ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd0:	f383 8811 	msr	BASEPRI, r3
 8005cd4:	f3bf 8f6f 	isb	sy
 8005cd8:	f3bf 8f4f 	dsb	sy
 8005cdc:	60fb      	str	r3, [r7, #12]
    }
 8005cde:	bf00      	nop
 8005ce0:	e7fe      	b.n	8005ce0 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ce2:	4b07      	ldr	r3, [pc, #28]	; (8005d00 <vTaskPlaceOnEventList+0x44>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	3318      	adds	r3, #24
 8005ce8:	4619      	mov	r1, r3
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f7fe fe69 	bl	80049c2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005cf0:	2101      	movs	r1, #1
 8005cf2:	6838      	ldr	r0, [r7, #0]
 8005cf4:	f000 fcc8 	bl	8006688 <prvAddCurrentTaskToDelayedList>
}
 8005cf8:	bf00      	nop
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	2000010c 	.word	0x2000010c

08005d04 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10a      	bne.n	8005d2c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8005d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1a:	f383 8811 	msr	BASEPRI, r3
 8005d1e:	f3bf 8f6f 	isb	sy
 8005d22:	f3bf 8f4f 	dsb	sy
 8005d26:	617b      	str	r3, [r7, #20]
    }
 8005d28:	bf00      	nop
 8005d2a:	e7fe      	b.n	8005d2a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d2c:	4b0a      	ldr	r3, [pc, #40]	; (8005d58 <vTaskPlaceOnEventListRestricted+0x54>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3318      	adds	r3, #24
 8005d32:	4619      	mov	r1, r3
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f7fe fe20 	bl	800497a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d002      	beq.n	8005d46 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8005d40:	f04f 33ff 	mov.w	r3, #4294967295
 8005d44:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005d46:	6879      	ldr	r1, [r7, #4]
 8005d48:	68b8      	ldr	r0, [r7, #8]
 8005d4a:	f000 fc9d 	bl	8006688 <prvAddCurrentTaskToDelayedList>
    }
 8005d4e:	bf00      	nop
 8005d50:	3718      	adds	r7, #24
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	2000010c 	.word	0x2000010c

08005d5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10a      	bne.n	8005d88 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8005d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d76:	f383 8811 	msr	BASEPRI, r3
 8005d7a:	f3bf 8f6f 	isb	sy
 8005d7e:	f3bf 8f4f 	dsb	sy
 8005d82:	60fb      	str	r3, [r7, #12]
    }
 8005d84:	bf00      	nop
 8005d86:	e7fe      	b.n	8005d86 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	3318      	adds	r3, #24
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7fe fe51 	bl	8004a34 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d92:	4b1d      	ldr	r3, [pc, #116]	; (8005e08 <xTaskRemoveFromEventList+0xac>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d11c      	bne.n	8005dd4 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	3304      	adds	r3, #4
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fe fe48 	bl	8004a34 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da8:	2201      	movs	r2, #1
 8005daa:	409a      	lsls	r2, r3
 8005dac:	4b17      	ldr	r3, [pc, #92]	; (8005e0c <xTaskRemoveFromEventList+0xb0>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	4a16      	ldr	r2, [pc, #88]	; (8005e0c <xTaskRemoveFromEventList+0xb0>)
 8005db4:	6013      	str	r3, [r2, #0]
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dba:	4613      	mov	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4a13      	ldr	r2, [pc, #76]	; (8005e10 <xTaskRemoveFromEventList+0xb4>)
 8005dc4:	441a      	add	r2, r3
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	3304      	adds	r3, #4
 8005dca:	4619      	mov	r1, r3
 8005dcc:	4610      	mov	r0, r2
 8005dce:	f7fe fdd4 	bl	800497a <vListInsertEnd>
 8005dd2:	e005      	b.n	8005de0 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	3318      	adds	r3, #24
 8005dd8:	4619      	mov	r1, r3
 8005dda:	480e      	ldr	r0, [pc, #56]	; (8005e14 <xTaskRemoveFromEventList+0xb8>)
 8005ddc:	f7fe fdcd 	bl	800497a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de4:	4b0c      	ldr	r3, [pc, #48]	; (8005e18 <xTaskRemoveFromEventList+0xbc>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d905      	bls.n	8005dfa <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005dee:	2301      	movs	r3, #1
 8005df0:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005df2:	4b0a      	ldr	r3, [pc, #40]	; (8005e1c <xTaskRemoveFromEventList+0xc0>)
 8005df4:	2201      	movs	r2, #1
 8005df6:	601a      	str	r2, [r3, #0]
 8005df8:	e001      	b.n	8005dfe <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005dfe:	697b      	ldr	r3, [r7, #20]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3718      	adds	r7, #24
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	2000020c 	.word	0x2000020c
 8005e0c:	200001ec 	.word	0x200001ec
 8005e10:	20000110 	.word	0x20000110
 8005e14:	200001a4 	.word	0x200001a4
 8005e18:	2000010c 	.word	0x2000010c
 8005e1c:	200001f8 	.word	0x200001f8

08005e20 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005e28:	4b06      	ldr	r3, [pc, #24]	; (8005e44 <vTaskInternalSetTimeOutState+0x24>)
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005e30:	4b05      	ldr	r3, [pc, #20]	; (8005e48 <vTaskInternalSetTimeOutState+0x28>)
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	605a      	str	r2, [r3, #4]
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr
 8005e44:	200001fc 	.word	0x200001fc
 8005e48:	200001e8 	.word	0x200001e8

08005e4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b088      	sub	sp, #32
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10a      	bne.n	8005e72 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8005e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e60:	f383 8811 	msr	BASEPRI, r3
 8005e64:	f3bf 8f6f 	isb	sy
 8005e68:	f3bf 8f4f 	dsb	sy
 8005e6c:	613b      	str	r3, [r7, #16]
    }
 8005e6e:	bf00      	nop
 8005e70:	e7fe      	b.n	8005e70 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10a      	bne.n	8005e8e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8005e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7c:	f383 8811 	msr	BASEPRI, r3
 8005e80:	f3bf 8f6f 	isb	sy
 8005e84:	f3bf 8f4f 	dsb	sy
 8005e88:	60fb      	str	r3, [r7, #12]
    }
 8005e8a:	bf00      	nop
 8005e8c:	e7fe      	b.n	8005e8c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8005e8e:	f001 f91b 	bl	80070c8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005e92:	4b1f      	ldr	r3, [pc, #124]	; (8005f10 <xTaskCheckForTimeOut+0xc4>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	69ba      	ldr	r2, [r7, #24]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eaa:	d102      	bne.n	8005eb2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005eac:	2300      	movs	r3, #0
 8005eae:	61fb      	str	r3, [r7, #28]
 8005eb0:	e026      	b.n	8005f00 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	4b17      	ldr	r3, [pc, #92]	; (8005f14 <xTaskCheckForTimeOut+0xc8>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d00a      	beq.n	8005ed4 <xTaskCheckForTimeOut+0x88>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d305      	bcc.n	8005ed4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	601a      	str	r2, [r3, #0]
 8005ed2:	e015      	b.n	8005f00 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d20b      	bcs.n	8005ef6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	1ad2      	subs	r2, r2, r3
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f7ff ff98 	bl	8005e20 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	61fb      	str	r3, [r7, #28]
 8005ef4:	e004      	b.n	8005f00 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005efc:	2301      	movs	r3, #1
 8005efe:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005f00:	f001 f912 	bl	8007128 <vPortExitCritical>

    return xReturn;
 8005f04:	69fb      	ldr	r3, [r7, #28]
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3720      	adds	r7, #32
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	200001e8 	.word	0x200001e8
 8005f14:	200001fc 	.word	0x200001fc

08005f18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005f18:	b480      	push	{r7}
 8005f1a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005f1c:	4b03      	ldr	r3, [pc, #12]	; (8005f2c <vTaskMissedYield+0x14>)
 8005f1e:	2201      	movs	r2, #1
 8005f20:	601a      	str	r2, [r3, #0]
}
 8005f22:	bf00      	nop
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	200001f8 	.word	0x200001f8

08005f30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005f38:	f000 f852 	bl	8005fe0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f3c:	4b06      	ldr	r3, [pc, #24]	; (8005f58 <prvIdleTask+0x28>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d9f9      	bls.n	8005f38 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8005f44:	4b05      	ldr	r3, [pc, #20]	; (8005f5c <prvIdleTask+0x2c>)
 8005f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f4a:	601a      	str	r2, [r3, #0]
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005f54:	e7f0      	b.n	8005f38 <prvIdleTask+0x8>
 8005f56:	bf00      	nop
 8005f58:	20000110 	.word	0x20000110
 8005f5c:	e000ed04 	.word	0xe000ed04

08005f60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f66:	2300      	movs	r3, #0
 8005f68:	607b      	str	r3, [r7, #4]
 8005f6a:	e00c      	b.n	8005f86 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4413      	add	r3, r2
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	4a12      	ldr	r2, [pc, #72]	; (8005fc0 <prvInitialiseTaskLists+0x60>)
 8005f78:	4413      	add	r3, r2
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7fe fcd0 	bl	8004920 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	3301      	adds	r3, #1
 8005f84:	607b      	str	r3, [r7, #4]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	d9ef      	bls.n	8005f6c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005f8c:	480d      	ldr	r0, [pc, #52]	; (8005fc4 <prvInitialiseTaskLists+0x64>)
 8005f8e:	f7fe fcc7 	bl	8004920 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005f92:	480d      	ldr	r0, [pc, #52]	; (8005fc8 <prvInitialiseTaskLists+0x68>)
 8005f94:	f7fe fcc4 	bl	8004920 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005f98:	480c      	ldr	r0, [pc, #48]	; (8005fcc <prvInitialiseTaskLists+0x6c>)
 8005f9a:	f7fe fcc1 	bl	8004920 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8005f9e:	480c      	ldr	r0, [pc, #48]	; (8005fd0 <prvInitialiseTaskLists+0x70>)
 8005fa0:	f7fe fcbe 	bl	8004920 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8005fa4:	480b      	ldr	r0, [pc, #44]	; (8005fd4 <prvInitialiseTaskLists+0x74>)
 8005fa6:	f7fe fcbb 	bl	8004920 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005faa:	4b0b      	ldr	r3, [pc, #44]	; (8005fd8 <prvInitialiseTaskLists+0x78>)
 8005fac:	4a05      	ldr	r2, [pc, #20]	; (8005fc4 <prvInitialiseTaskLists+0x64>)
 8005fae:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005fb0:	4b0a      	ldr	r3, [pc, #40]	; (8005fdc <prvInitialiseTaskLists+0x7c>)
 8005fb2:	4a05      	ldr	r2, [pc, #20]	; (8005fc8 <prvInitialiseTaskLists+0x68>)
 8005fb4:	601a      	str	r2, [r3, #0]
}
 8005fb6:	bf00      	nop
 8005fb8:	3708      	adds	r7, #8
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	20000110 	.word	0x20000110
 8005fc4:	20000174 	.word	0x20000174
 8005fc8:	20000188 	.word	0x20000188
 8005fcc:	200001a4 	.word	0x200001a4
 8005fd0:	200001b8 	.word	0x200001b8
 8005fd4:	200001d0 	.word	0x200001d0
 8005fd8:	2000019c 	.word	0x2000019c
 8005fdc:	200001a0 	.word	0x200001a0

08005fe0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fe6:	e019      	b.n	800601c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8005fe8:	f001 f86e 	bl	80070c8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fec:	4b10      	ldr	r3, [pc, #64]	; (8006030 <prvCheckTasksWaitingTermination+0x50>)
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	3304      	adds	r3, #4
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7fe fd1b 	bl	8004a34 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8005ffe:	4b0d      	ldr	r3, [pc, #52]	; (8006034 <prvCheckTasksWaitingTermination+0x54>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	3b01      	subs	r3, #1
 8006004:	4a0b      	ldr	r2, [pc, #44]	; (8006034 <prvCheckTasksWaitingTermination+0x54>)
 8006006:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8006008:	4b0b      	ldr	r3, [pc, #44]	; (8006038 <prvCheckTasksWaitingTermination+0x58>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	3b01      	subs	r3, #1
 800600e:	4a0a      	ldr	r2, [pc, #40]	; (8006038 <prvCheckTasksWaitingTermination+0x58>)
 8006010:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8006012:	f001 f889 	bl	8007128 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f810 	bl	800603c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800601c:	4b06      	ldr	r3, [pc, #24]	; (8006038 <prvCheckTasksWaitingTermination+0x58>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d1e1      	bne.n	8005fe8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8006024:	bf00      	nop
 8006026:	bf00      	nop
 8006028:	3708      	adds	r7, #8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	200001b8 	.word	0x200001b8
 8006034:	200001e4 	.word	0x200001e4
 8006038:	200001cc 	.word	0x200001cc

0800603c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006048:	4618      	mov	r0, r3
 800604a:	f001 fa3f 	bl	80074cc <vPortFree>
                vPortFree( pxTCB );
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f001 fa3c 	bl	80074cc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8006054:	bf00      	nop
 8006056:	3708      	adds	r7, #8
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800605c:	b480      	push	{r7}
 800605e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006060:	4b0a      	ldr	r3, [pc, #40]	; (800608c <prvResetNextTaskUnblockTime+0x30>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d104      	bne.n	8006074 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800606a:	4b09      	ldr	r3, [pc, #36]	; (8006090 <prvResetNextTaskUnblockTime+0x34>)
 800606c:	f04f 32ff 	mov.w	r2, #4294967295
 8006070:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8006072:	e005      	b.n	8006080 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006074:	4b05      	ldr	r3, [pc, #20]	; (800608c <prvResetNextTaskUnblockTime+0x30>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a04      	ldr	r2, [pc, #16]	; (8006090 <prvResetNextTaskUnblockTime+0x34>)
 800607e:	6013      	str	r3, [r2, #0]
}
 8006080:	bf00      	nop
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	2000019c 	.word	0x2000019c
 8006090:	20000204 	.word	0x20000204

08006094 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800609a:	4b0b      	ldr	r3, [pc, #44]	; (80060c8 <xTaskGetSchedulerState+0x34>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d102      	bne.n	80060a8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80060a2:	2301      	movs	r3, #1
 80060a4:	607b      	str	r3, [r7, #4]
 80060a6:	e008      	b.n	80060ba <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060a8:	4b08      	ldr	r3, [pc, #32]	; (80060cc <xTaskGetSchedulerState+0x38>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d102      	bne.n	80060b6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80060b0:	2302      	movs	r3, #2
 80060b2:	607b      	str	r3, [r7, #4]
 80060b4:	e001      	b.n	80060ba <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80060b6:	2300      	movs	r3, #0
 80060b8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80060ba:	687b      	ldr	r3, [r7, #4]
    }
 80060bc:	4618      	mov	r0, r3
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr
 80060c8:	200001f0 	.word	0x200001f0
 80060cc:	2000020c 	.word	0x2000020c

080060d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80060dc:	2300      	movs	r3, #0
 80060de:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d063      	beq.n	80061ae <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80060e6:	4b34      	ldr	r3, [pc, #208]	; (80061b8 <xTaskPriorityDisinherit+0xe8>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	693a      	ldr	r2, [r7, #16]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d00a      	beq.n	8006106 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80060f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f4:	f383 8811 	msr	BASEPRI, r3
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	60fb      	str	r3, [r7, #12]
    }
 8006102:	bf00      	nop
 8006104:	e7fe      	b.n	8006104 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10a      	bne.n	8006124 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800610e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	60bb      	str	r3, [r7, #8]
    }
 8006120:	bf00      	nop
 8006122:	e7fe      	b.n	8006122 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006128:	1e5a      	subs	r2, r3, #1
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006136:	429a      	cmp	r2, r3
 8006138:	d039      	beq.n	80061ae <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800613e:	2b00      	cmp	r3, #0
 8006140:	d135      	bne.n	80061ae <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	3304      	adds	r3, #4
 8006146:	4618      	mov	r0, r3
 8006148:	f7fe fc74 	bl	8004a34 <uxListRemove>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d10a      	bne.n	8006168 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006156:	2201      	movs	r2, #1
 8006158:	fa02 f303 	lsl.w	r3, r2, r3
 800615c:	43da      	mvns	r2, r3
 800615e:	4b17      	ldr	r3, [pc, #92]	; (80061bc <xTaskPriorityDisinherit+0xec>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4013      	ands	r3, r2
 8006164:	4a15      	ldr	r2, [pc, #84]	; (80061bc <xTaskPriorityDisinherit+0xec>)
 8006166:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006174:	f1c3 0205 	rsb	r2, r3, #5
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006180:	2201      	movs	r2, #1
 8006182:	409a      	lsls	r2, r3
 8006184:	4b0d      	ldr	r3, [pc, #52]	; (80061bc <xTaskPriorityDisinherit+0xec>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4313      	orrs	r3, r2
 800618a:	4a0c      	ldr	r2, [pc, #48]	; (80061bc <xTaskPriorityDisinherit+0xec>)
 800618c:	6013      	str	r3, [r2, #0]
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006192:	4613      	mov	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4413      	add	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4a09      	ldr	r2, [pc, #36]	; (80061c0 <xTaskPriorityDisinherit+0xf0>)
 800619c:	441a      	add	r2, r3
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	3304      	adds	r3, #4
 80061a2:	4619      	mov	r1, r3
 80061a4:	4610      	mov	r0, r2
 80061a6:	f7fe fbe8 	bl	800497a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80061aa:	2301      	movs	r3, #1
 80061ac:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80061ae:	697b      	ldr	r3, [r7, #20]
    }
 80061b0:	4618      	mov	r0, r3
 80061b2:	3718      	adds	r7, #24
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	2000010c 	.word	0x2000010c
 80061bc:	200001ec 	.word	0x200001ec
 80061c0:	20000110 	.word	0x20000110

080061c4 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b086      	sub	sp, #24
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
 80061d0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00a      	beq.n	80061ee <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 80061d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061dc:	f383 8811 	msr	BASEPRI, r3
 80061e0:	f3bf 8f6f 	isb	sy
 80061e4:	f3bf 8f4f 	dsb	sy
 80061e8:	613b      	str	r3, [r7, #16]
    }
 80061ea:	bf00      	nop
 80061ec:	e7fe      	b.n	80061ec <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 80061ee:	f000 ff6b 	bl	80070c8 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80061f2:	4b32      	ldr	r3, [pc, #200]	; (80062bc <xTaskGenericNotifyWait+0xf8>)
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	4413      	add	r3, r2
 80061fa:	3354      	adds	r3, #84	; 0x54
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	2b02      	cmp	r3, #2
 8006202:	d022      	beq.n	800624a <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8006204:	4b2d      	ldr	r3, [pc, #180]	; (80062bc <xTaskGenericNotifyWait+0xf8>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	3214      	adds	r2, #20
 800620c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	43d2      	mvns	r2, r2
 8006214:	4011      	ands	r1, r2
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	3214      	adds	r2, #20
 800621a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800621e:	4b27      	ldr	r3, [pc, #156]	; (80062bc <xTaskGenericNotifyWait+0xf8>)
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	4413      	add	r3, r2
 8006226:	3354      	adds	r3, #84	; 0x54
 8006228:	2201      	movs	r2, #1
 800622a:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00b      	beq.n	800624a <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006232:	2101      	movs	r1, #1
 8006234:	6a38      	ldr	r0, [r7, #32]
 8006236:	f000 fa27 	bl	8006688 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800623a:	4b21      	ldr	r3, [pc, #132]	; (80062c0 <xTaskGenericNotifyWait+0xfc>)
 800623c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006240:	601a      	str	r2, [r3, #0]
 8006242:	f3bf 8f4f 	dsb	sy
 8006246:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800624a:	f000 ff6d 	bl	8007128 <vPortExitCritical>

        taskENTER_CRITICAL();
 800624e:	f000 ff3b 	bl	80070c8 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d007      	beq.n	8006268 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8006258:	4b18      	ldr	r3, [pc, #96]	; (80062bc <xTaskGenericNotifyWait+0xf8>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	3214      	adds	r2, #20
 8006260:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006268:	4b14      	ldr	r3, [pc, #80]	; (80062bc <xTaskGenericNotifyWait+0xf8>)
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	4413      	add	r3, r2
 8006270:	3354      	adds	r3, #84	; 0x54
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2b02      	cmp	r3, #2
 8006278:	d002      	beq.n	8006280 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800627a:	2300      	movs	r3, #0
 800627c:	617b      	str	r3, [r7, #20]
 800627e:	e00e      	b.n	800629e <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8006280:	4b0e      	ldr	r3, [pc, #56]	; (80062bc <xTaskGenericNotifyWait+0xf8>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	3214      	adds	r2, #20
 8006288:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	43d2      	mvns	r2, r2
 8006290:	4011      	ands	r1, r2
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	3214      	adds	r2, #20
 8006296:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800629a:	2301      	movs	r3, #1
 800629c:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800629e:	4b07      	ldr	r3, [pc, #28]	; (80062bc <xTaskGenericNotifyWait+0xf8>)
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	4413      	add	r3, r2
 80062a6:	3354      	adds	r3, #84	; 0x54
 80062a8:	2200      	movs	r2, #0
 80062aa:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80062ac:	f000 ff3c 	bl	8007128 <vPortExitCritical>

        return xReturn;
 80062b0:	697b      	ldr	r3, [r7, #20]
    }
 80062b2:	4618      	mov	r0, r3
 80062b4:	3718      	adds	r7, #24
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	2000010c 	.word	0x2000010c
 80062c0:	e000ed04 	.word	0xe000ed04

080062c4 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b08c      	sub	sp, #48	; 0x30
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
 80062d0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80062d2:	2301      	movs	r3, #1
 80062d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00a      	beq.n	80062f2 <xTaskGenericNotify+0x2e>
        __asm volatile
 80062dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e0:	f383 8811 	msr	BASEPRI, r3
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	623b      	str	r3, [r7, #32]
    }
 80062ee:	bf00      	nop
 80062f0:	e7fe      	b.n	80062f0 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10a      	bne.n	800630e <xTaskGenericNotify+0x4a>
        __asm volatile
 80062f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fc:	f383 8811 	msr	BASEPRI, r3
 8006300:	f3bf 8f6f 	isb	sy
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	61fb      	str	r3, [r7, #28]
    }
 800630a:	bf00      	nop
 800630c:	e7fe      	b.n	800630c <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8006312:	f000 fed9 	bl	80070c8 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8006316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006318:	2b00      	cmp	r3, #0
 800631a:	d006      	beq.n	800632a <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800631c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631e:	68ba      	ldr	r2, [r7, #8]
 8006320:	3214      	adds	r2, #20
 8006322:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006328:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800632a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	4413      	add	r3, r2
 8006330:	3354      	adds	r3, #84	; 0x54
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	4413      	add	r3, r2
 800633e:	3354      	adds	r3, #84	; 0x54
 8006340:	2202      	movs	r2, #2
 8006342:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006344:	78fb      	ldrb	r3, [r7, #3]
 8006346:	2b04      	cmp	r3, #4
 8006348:	d83b      	bhi.n	80063c2 <xTaskGenericNotify+0xfe>
 800634a:	a201      	add	r2, pc, #4	; (adr r2, 8006350 <xTaskGenericNotify+0x8c>)
 800634c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006350:	080063e1 	.word	0x080063e1
 8006354:	08006365 	.word	0x08006365
 8006358:	08006381 	.word	0x08006381
 800635c:	08006399 	.word	0x08006399
 8006360:	080063a7 	.word	0x080063a7
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	3214      	adds	r2, #20
 800636a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	ea42 0103 	orr.w	r1, r2, r3
 8006374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006376:	68ba      	ldr	r2, [r7, #8]
 8006378:	3214      	adds	r2, #20
 800637a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800637e:	e032      	b.n	80063e6 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006382:	68ba      	ldr	r2, [r7, #8]
 8006384:	3214      	adds	r2, #20
 8006386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800638a:	1c59      	adds	r1, r3, #1
 800638c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	3214      	adds	r2, #20
 8006392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006396:	e026      	b.n	80063e6 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	3214      	adds	r2, #20
 800639e:	6879      	ldr	r1, [r7, #4]
 80063a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80063a4:	e01f      	b.n	80063e6 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80063a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d006      	beq.n	80063bc <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80063ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b0:	68ba      	ldr	r2, [r7, #8]
 80063b2:	3214      	adds	r2, #20
 80063b4:	6879      	ldr	r1, [r7, #4]
 80063b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80063ba:	e014      	b.n	80063e6 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 80063bc:	2300      	movs	r3, #0
 80063be:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 80063c0:	e011      	b.n	80063e6 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80063c2:	4b2b      	ldr	r3, [pc, #172]	; (8006470 <xTaskGenericNotify+0x1ac>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00c      	beq.n	80063e4 <xTaskGenericNotify+0x120>
        __asm volatile
 80063ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ce:	f383 8811 	msr	BASEPRI, r3
 80063d2:	f3bf 8f6f 	isb	sy
 80063d6:	f3bf 8f4f 	dsb	sy
 80063da:	61bb      	str	r3, [r7, #24]
    }
 80063dc:	bf00      	nop
 80063de:	e7fe      	b.n	80063de <xTaskGenericNotify+0x11a>
                    break;
 80063e0:	bf00      	nop
 80063e2:	e000      	b.n	80063e6 <xTaskGenericNotify+0x122>

                    break;
 80063e4:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80063e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d139      	bne.n	8006462 <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f0:	3304      	adds	r3, #4
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7fe fb1e 	bl	8004a34 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 80063f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fc:	2201      	movs	r2, #1
 80063fe:	409a      	lsls	r2, r3
 8006400:	4b1c      	ldr	r3, [pc, #112]	; (8006474 <xTaskGenericNotify+0x1b0>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4313      	orrs	r3, r2
 8006406:	4a1b      	ldr	r2, [pc, #108]	; (8006474 <xTaskGenericNotify+0x1b0>)
 8006408:	6013      	str	r3, [r2, #0]
 800640a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800640e:	4613      	mov	r3, r2
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4413      	add	r3, r2
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	4a18      	ldr	r2, [pc, #96]	; (8006478 <xTaskGenericNotify+0x1b4>)
 8006418:	441a      	add	r2, r3
 800641a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641c:	3304      	adds	r3, #4
 800641e:	4619      	mov	r1, r3
 8006420:	4610      	mov	r0, r2
 8006422:	f7fe faaa 	bl	800497a <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00a      	beq.n	8006444 <xTaskGenericNotify+0x180>
        __asm volatile
 800642e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006432:	f383 8811 	msr	BASEPRI, r3
 8006436:	f3bf 8f6f 	isb	sy
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	617b      	str	r3, [r7, #20]
    }
 8006440:	bf00      	nop
 8006442:	e7fe      	b.n	8006442 <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006448:	4b0c      	ldr	r3, [pc, #48]	; (800647c <xTaskGenericNotify+0x1b8>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644e:	429a      	cmp	r2, r3
 8006450:	d907      	bls.n	8006462 <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8006452:	4b0b      	ldr	r3, [pc, #44]	; (8006480 <xTaskGenericNotify+0x1bc>)
 8006454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006458:	601a      	str	r2, [r3, #0]
 800645a:	f3bf 8f4f 	dsb	sy
 800645e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006462:	f000 fe61 	bl	8007128 <vPortExitCritical>

        return xReturn;
 8006466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8006468:	4618      	mov	r0, r3
 800646a:	3730      	adds	r7, #48	; 0x30
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	200001e8 	.word	0x200001e8
 8006474:	200001ec 	.word	0x200001ec
 8006478:	20000110 	.word	0x20000110
 800647c:	2000010c 	.word	0x2000010c
 8006480:	e000ed04 	.word	0xe000ed04

08006484 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8006484:	b580      	push	{r7, lr}
 8006486:	b090      	sub	sp, #64	; 0x40
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	607a      	str	r2, [r7, #4]
 8006490:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8006492:	2301      	movs	r3, #1
 8006494:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d10a      	bne.n	80064b2 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 800649c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a0:	f383 8811 	msr	BASEPRI, r3
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 80064ae:	bf00      	nop
 80064b0:	e7fe      	b.n	80064b0 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00a      	beq.n	80064ce <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 80064b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064bc:	f383 8811 	msr	BASEPRI, r3
 80064c0:	f3bf 8f6f 	isb	sy
 80064c4:	f3bf 8f4f 	dsb	sy
 80064c8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80064ca:	bf00      	nop
 80064cc:	e7fe      	b.n	80064cc <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064ce:	f000 fedd 	bl	800728c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 80064d6:	f3ef 8211 	mrs	r2, BASEPRI
 80064da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064de:	f383 8811 	msr	BASEPRI, r3
 80064e2:	f3bf 8f6f 	isb	sy
 80064e6:	f3bf 8f4f 	dsb	sy
 80064ea:	627a      	str	r2, [r7, #36]	; 0x24
 80064ec:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 80064ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80064f0:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 80064f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d006      	beq.n	8006506 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80064f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	3214      	adds	r2, #20
 80064fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006502:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006504:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006506:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	4413      	add	r3, r2
 800650c:	3354      	adds	r3, #84	; 0x54
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006514:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	4413      	add	r3, r2
 800651a:	3354      	adds	r3, #84	; 0x54
 800651c:	2202      	movs	r2, #2
 800651e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006520:	78fb      	ldrb	r3, [r7, #3]
 8006522:	2b04      	cmp	r3, #4
 8006524:	d83b      	bhi.n	800659e <xTaskGenericNotifyFromISR+0x11a>
 8006526:	a201      	add	r2, pc, #4	; (adr r2, 800652c <xTaskGenericNotifyFromISR+0xa8>)
 8006528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800652c:	080065bd 	.word	0x080065bd
 8006530:	08006541 	.word	0x08006541
 8006534:	0800655d 	.word	0x0800655d
 8006538:	08006575 	.word	0x08006575
 800653c:	08006583 	.word	0x08006583
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	3214      	adds	r2, #20
 8006546:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	ea42 0103 	orr.w	r1, r2, r3
 8006550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006552:	68ba      	ldr	r2, [r7, #8]
 8006554:	3214      	adds	r2, #20
 8006556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800655a:	e032      	b.n	80065c2 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800655c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	3214      	adds	r2, #20
 8006562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006566:	1c59      	adds	r1, r3, #1
 8006568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	3214      	adds	r2, #20
 800656e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006572:	e026      	b.n	80065c2 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	3214      	adds	r2, #20
 800657a:	6879      	ldr	r1, [r7, #4]
 800657c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006580:	e01f      	b.n	80065c2 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006582:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006586:	2b02      	cmp	r3, #2
 8006588:	d006      	beq.n	8006598 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800658a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	3214      	adds	r2, #20
 8006590:	6879      	ldr	r1, [r7, #4]
 8006592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8006596:	e014      	b.n	80065c2 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8006598:	2300      	movs	r3, #0
 800659a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 800659c:	e011      	b.n	80065c2 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800659e:	4b33      	ldr	r3, [pc, #204]	; (800666c <xTaskGenericNotifyFromISR+0x1e8>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00c      	beq.n	80065c0 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 80065a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065aa:	f383 8811 	msr	BASEPRI, r3
 80065ae:	f3bf 8f6f 	isb	sy
 80065b2:	f3bf 8f4f 	dsb	sy
 80065b6:	61fb      	str	r3, [r7, #28]
    }
 80065b8:	bf00      	nop
 80065ba:	e7fe      	b.n	80065ba <xTaskGenericNotifyFromISR+0x136>
                    break;
 80065bc:	bf00      	nop
 80065be:	e000      	b.n	80065c2 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 80065c0:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80065c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d145      	bne.n	8006656 <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80065ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00a      	beq.n	80065e8 <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 80065d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d6:	f383 8811 	msr	BASEPRI, r3
 80065da:	f3bf 8f6f 	isb	sy
 80065de:	f3bf 8f4f 	dsb	sy
 80065e2:	61bb      	str	r3, [r7, #24]
    }
 80065e4:	bf00      	nop
 80065e6:	e7fe      	b.n	80065e6 <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065e8:	4b21      	ldr	r3, [pc, #132]	; (8006670 <xTaskGenericNotifyFromISR+0x1ec>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d11c      	bne.n	800662a <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f2:	3304      	adds	r3, #4
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7fe fa1d 	bl	8004a34 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80065fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fe:	2201      	movs	r2, #1
 8006600:	409a      	lsls	r2, r3
 8006602:	4b1c      	ldr	r3, [pc, #112]	; (8006674 <xTaskGenericNotifyFromISR+0x1f0>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4313      	orrs	r3, r2
 8006608:	4a1a      	ldr	r2, [pc, #104]	; (8006674 <xTaskGenericNotifyFromISR+0x1f0>)
 800660a:	6013      	str	r3, [r2, #0]
 800660c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006610:	4613      	mov	r3, r2
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	4413      	add	r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4a17      	ldr	r2, [pc, #92]	; (8006678 <xTaskGenericNotifyFromISR+0x1f4>)
 800661a:	441a      	add	r2, r3
 800661c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661e:	3304      	adds	r3, #4
 8006620:	4619      	mov	r1, r3
 8006622:	4610      	mov	r0, r2
 8006624:	f7fe f9a9 	bl	800497a <vListInsertEnd>
 8006628:	e005      	b.n	8006636 <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800662a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662c:	3318      	adds	r3, #24
 800662e:	4619      	mov	r1, r3
 8006630:	4812      	ldr	r0, [pc, #72]	; (800667c <xTaskGenericNotifyFromISR+0x1f8>)
 8006632:	f7fe f9a2 	bl	800497a <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800663a:	4b11      	ldr	r3, [pc, #68]	; (8006680 <xTaskGenericNotifyFromISR+0x1fc>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006640:	429a      	cmp	r2, r3
 8006642:	d908      	bls.n	8006656 <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8006644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006646:	2b00      	cmp	r3, #0
 8006648:	d002      	beq.n	8006650 <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800664a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800664c:	2201      	movs	r2, #1
 800664e:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8006650:	4b0c      	ldr	r3, [pc, #48]	; (8006684 <xTaskGenericNotifyFromISR+0x200>)
 8006652:	2201      	movs	r2, #1
 8006654:	601a      	str	r2, [r3, #0]
 8006656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006658:	617b      	str	r3, [r7, #20]
        __asm volatile
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f383 8811 	msr	BASEPRI, r3
    }
 8006660:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8006662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8006664:	4618      	mov	r0, r3
 8006666:	3740      	adds	r7, #64	; 0x40
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	200001e8 	.word	0x200001e8
 8006670:	2000020c 	.word	0x2000020c
 8006674:	200001ec 	.word	0x200001ec
 8006678:	20000110 	.word	0x20000110
 800667c:	200001a4 	.word	0x200001a4
 8006680:	2000010c 	.word	0x2000010c
 8006684:	200001f8 	.word	0x200001f8

08006688 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006692:	4b29      	ldr	r3, [pc, #164]	; (8006738 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006698:	4b28      	ldr	r3, [pc, #160]	; (800673c <prvAddCurrentTaskToDelayedList+0xb4>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	3304      	adds	r3, #4
 800669e:	4618      	mov	r0, r3
 80066a0:	f7fe f9c8 	bl	8004a34 <uxListRemove>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10b      	bne.n	80066c2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80066aa:	4b24      	ldr	r3, [pc, #144]	; (800673c <prvAddCurrentTaskToDelayedList+0xb4>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b0:	2201      	movs	r2, #1
 80066b2:	fa02 f303 	lsl.w	r3, r2, r3
 80066b6:	43da      	mvns	r2, r3
 80066b8:	4b21      	ldr	r3, [pc, #132]	; (8006740 <prvAddCurrentTaskToDelayedList+0xb8>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4013      	ands	r3, r2
 80066be:	4a20      	ldr	r2, [pc, #128]	; (8006740 <prvAddCurrentTaskToDelayedList+0xb8>)
 80066c0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c8:	d10a      	bne.n	80066e0 <prvAddCurrentTaskToDelayedList+0x58>
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d007      	beq.n	80066e0 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066d0:	4b1a      	ldr	r3, [pc, #104]	; (800673c <prvAddCurrentTaskToDelayedList+0xb4>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	3304      	adds	r3, #4
 80066d6:	4619      	mov	r1, r3
 80066d8:	481a      	ldr	r0, [pc, #104]	; (8006744 <prvAddCurrentTaskToDelayedList+0xbc>)
 80066da:	f7fe f94e 	bl	800497a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80066de:	e026      	b.n	800672e <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4413      	add	r3, r2
 80066e6:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80066e8:	4b14      	ldr	r3, [pc, #80]	; (800673c <prvAddCurrentTaskToDelayedList+0xb4>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80066f0:	68ba      	ldr	r2, [r7, #8]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d209      	bcs.n	800670c <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066f8:	4b13      	ldr	r3, [pc, #76]	; (8006748 <prvAddCurrentTaskToDelayedList+0xc0>)
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	4b0f      	ldr	r3, [pc, #60]	; (800673c <prvAddCurrentTaskToDelayedList+0xb4>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	3304      	adds	r3, #4
 8006702:	4619      	mov	r1, r3
 8006704:	4610      	mov	r0, r2
 8006706:	f7fe f95c 	bl	80049c2 <vListInsert>
}
 800670a:	e010      	b.n	800672e <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800670c:	4b0f      	ldr	r3, [pc, #60]	; (800674c <prvAddCurrentTaskToDelayedList+0xc4>)
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	4b0a      	ldr	r3, [pc, #40]	; (800673c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	3304      	adds	r3, #4
 8006716:	4619      	mov	r1, r3
 8006718:	4610      	mov	r0, r2
 800671a:	f7fe f952 	bl	80049c2 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800671e:	4b0c      	ldr	r3, [pc, #48]	; (8006750 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68ba      	ldr	r2, [r7, #8]
 8006724:	429a      	cmp	r2, r3
 8006726:	d202      	bcs.n	800672e <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8006728:	4a09      	ldr	r2, [pc, #36]	; (8006750 <prvAddCurrentTaskToDelayedList+0xc8>)
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	6013      	str	r3, [r2, #0]
}
 800672e:	bf00      	nop
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	200001e8 	.word	0x200001e8
 800673c:	2000010c 	.word	0x2000010c
 8006740:	200001ec 	.word	0x200001ec
 8006744:	200001d0 	.word	0x200001d0
 8006748:	200001a0 	.word	0x200001a0
 800674c:	2000019c 	.word	0x2000019c
 8006750:	20000204 	.word	0x20000204

08006754 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800675a:	2300      	movs	r3, #0
 800675c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800675e:	f000 fb31 	bl	8006dc4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8006762:	4b11      	ldr	r3, [pc, #68]	; (80067a8 <xTimerCreateTimerTask+0x54>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00b      	beq.n	8006782 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800676a:	4b10      	ldr	r3, [pc, #64]	; (80067ac <xTimerCreateTimerTask+0x58>)
 800676c:	9301      	str	r3, [sp, #4]
 800676e:	2302      	movs	r3, #2
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	2300      	movs	r3, #0
 8006774:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006778:	490d      	ldr	r1, [pc, #52]	; (80067b0 <xTimerCreateTimerTask+0x5c>)
 800677a:	480e      	ldr	r0, [pc, #56]	; (80067b4 <xTimerCreateTimerTask+0x60>)
 800677c:	f7fe ff38 	bl	80055f0 <xTaskCreate>
 8006780:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d10a      	bne.n	800679e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8006788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678c:	f383 8811 	msr	BASEPRI, r3
 8006790:	f3bf 8f6f 	isb	sy
 8006794:	f3bf 8f4f 	dsb	sy
 8006798:	603b      	str	r3, [r7, #0]
    }
 800679a:	bf00      	nop
 800679c:	e7fe      	b.n	800679c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800679e:	687b      	ldr	r3, [r7, #4]
    }
 80067a0:	4618      	mov	r0, r3
 80067a2:	3708      	adds	r7, #8
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	20000240 	.word	0x20000240
 80067ac:	20000244 	.word	0x20000244
 80067b0:	080083d0 	.word	0x080083d0
 80067b4:	080069a5 	.word	0x080069a5

080067b8 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b088      	sub	sp, #32
 80067bc:	af02      	add	r7, sp, #8
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
 80067c4:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80067c6:	202c      	movs	r0, #44	; 0x2c
 80067c8:	f000 fda0 	bl	800730c <pvPortMalloc>
 80067cc:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00d      	beq.n	80067f0 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	9301      	str	r3, [sp, #4]
 80067e0:	6a3b      	ldr	r3, [r7, #32]
 80067e2:	9300      	str	r3, [sp, #0]
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	68b9      	ldr	r1, [r7, #8]
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f000 f805 	bl	80067fa <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 80067f0:	697b      	ldr	r3, [r7, #20]
        }
 80067f2:	4618      	mov	r0, r3
 80067f4:	3718      	adds	r7, #24
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b086      	sub	sp, #24
 80067fe:	af00      	add	r7, sp, #0
 8006800:	60f8      	str	r0, [r7, #12]
 8006802:	60b9      	str	r1, [r7, #8]
 8006804:	607a      	str	r2, [r7, #4]
 8006806:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10a      	bne.n	8006824 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 800680e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	617b      	str	r3, [r7, #20]
    }
 8006820:	bf00      	nop
 8006822:	e7fe      	b.n	8006822 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8006824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006826:	2b00      	cmp	r3, #0
 8006828:	d01e      	beq.n	8006868 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 800682a:	f000 facb 	bl	8006dc4 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 800682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	683a      	ldr	r2, [r7, #0]
 800683e:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006842:	6a3a      	ldr	r2, [r7, #32]
 8006844:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006848:	3304      	adds	r3, #4
 800684a:	4618      	mov	r0, r3
 800684c:	f7fe f888 	bl	8004960 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d008      	beq.n	8006868 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006858:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800685c:	f043 0304 	orr.w	r3, r3, #4
 8006860:	b2da      	uxtb	r2, r3
 8006862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006864:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8006868:	bf00      	nop
 800686a:	3718      	adds	r7, #24
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8006870:	b580      	push	{r7, lr}
 8006872:	b08a      	sub	sp, #40	; 0x28
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
 800687c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800687e:	2300      	movs	r3, #0
 8006880:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d10a      	bne.n	800689e <xTimerGenericCommand+0x2e>
        __asm volatile
 8006888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688c:	f383 8811 	msr	BASEPRI, r3
 8006890:	f3bf 8f6f 	isb	sy
 8006894:	f3bf 8f4f 	dsb	sy
 8006898:	623b      	str	r3, [r7, #32]
    }
 800689a:	bf00      	nop
 800689c:	e7fe      	b.n	800689c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800689e:	4b1a      	ldr	r3, [pc, #104]	; (8006908 <xTimerGenericCommand+0x98>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d02a      	beq.n	80068fc <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	2b05      	cmp	r3, #5
 80068b6:	dc18      	bgt.n	80068ea <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80068b8:	f7ff fbec 	bl	8006094 <xTaskGetSchedulerState>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d109      	bne.n	80068d6 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80068c2:	4b11      	ldr	r3, [pc, #68]	; (8006908 <xTimerGenericCommand+0x98>)
 80068c4:	6818      	ldr	r0, [r3, #0]
 80068c6:	f107 0114 	add.w	r1, r7, #20
 80068ca:	2300      	movs	r3, #0
 80068cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068ce:	f7fe f9c5 	bl	8004c5c <xQueueGenericSend>
 80068d2:	6278      	str	r0, [r7, #36]	; 0x24
 80068d4:	e012      	b.n	80068fc <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80068d6:	4b0c      	ldr	r3, [pc, #48]	; (8006908 <xTimerGenericCommand+0x98>)
 80068d8:	6818      	ldr	r0, [r3, #0]
 80068da:	f107 0114 	add.w	r1, r7, #20
 80068de:	2300      	movs	r3, #0
 80068e0:	2200      	movs	r2, #0
 80068e2:	f7fe f9bb 	bl	8004c5c <xQueueGenericSend>
 80068e6:	6278      	str	r0, [r7, #36]	; 0x24
 80068e8:	e008      	b.n	80068fc <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80068ea:	4b07      	ldr	r3, [pc, #28]	; (8006908 <xTimerGenericCommand+0x98>)
 80068ec:	6818      	ldr	r0, [r3, #0]
 80068ee:	f107 0114 	add.w	r1, r7, #20
 80068f2:	2300      	movs	r3, #0
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	f7fe faaf 	bl	8004e58 <xQueueGenericSendFromISR>
 80068fa:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80068fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80068fe:	4618      	mov	r0, r3
 8006900:	3728      	adds	r7, #40	; 0x28
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	20000240 	.word	0x20000240

0800690c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800690c:	b580      	push	{r7, lr}
 800690e:	b088      	sub	sp, #32
 8006910:	af02      	add	r7, sp, #8
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006916:	4b22      	ldr	r3, [pc, #136]	; (80069a0 <prvProcessExpiredTimer+0x94>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	3304      	adds	r3, #4
 8006924:	4618      	mov	r0, r3
 8006926:	f7fe f885 	bl	8004a34 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006930:	f003 0304 	and.w	r3, r3, #4
 8006934:	2b00      	cmp	r3, #0
 8006936:	d022      	beq.n	800697e <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	699a      	ldr	r2, [r3, #24]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	18d1      	adds	r1, r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	683a      	ldr	r2, [r7, #0]
 8006944:	6978      	ldr	r0, [r7, #20]
 8006946:	f000 f8d1 	bl	8006aec <prvInsertTimerInActiveList>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d01f      	beq.n	8006990 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006950:	2300      	movs	r3, #0
 8006952:	9300      	str	r3, [sp, #0]
 8006954:	2300      	movs	r3, #0
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	2100      	movs	r1, #0
 800695a:	6978      	ldr	r0, [r7, #20]
 800695c:	f7ff ff88 	bl	8006870 <xTimerGenericCommand>
 8006960:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d113      	bne.n	8006990 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8006968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696c:	f383 8811 	msr	BASEPRI, r3
 8006970:	f3bf 8f6f 	isb	sy
 8006974:	f3bf 8f4f 	dsb	sy
 8006978:	60fb      	str	r3, [r7, #12]
    }
 800697a:	bf00      	nop
 800697c:	e7fe      	b.n	800697c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006984:	f023 0301 	bic.w	r3, r3, #1
 8006988:	b2da      	uxtb	r2, r3
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	6a1b      	ldr	r3, [r3, #32]
 8006994:	6978      	ldr	r0, [r7, #20]
 8006996:	4798      	blx	r3
    }
 8006998:	bf00      	nop
 800699a:	3718      	adds	r7, #24
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	20000238 	.word	0x20000238

080069a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069ac:	f107 0308 	add.w	r3, r7, #8
 80069b0:	4618      	mov	r0, r3
 80069b2:	f000 f857 	bl	8006a64 <prvGetNextExpireTime>
 80069b6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	4619      	mov	r1, r3
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f000 f803 	bl	80069c8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80069c2:	f000 f8d5 	bl	8006b70 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069c6:	e7f1      	b.n	80069ac <prvTimerTask+0x8>

080069c8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80069d2:	f7fe ffa5 	bl	8005920 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069d6:	f107 0308 	add.w	r3, r7, #8
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 f866 	bl	8006aac <prvSampleTimeNow>
 80069e0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d130      	bne.n	8006a4a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10a      	bne.n	8006a04 <prvProcessTimerOrBlockTask+0x3c>
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d806      	bhi.n	8006a04 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80069f6:	f7fe ffa1 	bl	800593c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80069fa:	68f9      	ldr	r1, [r7, #12]
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f7ff ff85 	bl	800690c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006a02:	e024      	b.n	8006a4e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d008      	beq.n	8006a1c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006a0a:	4b13      	ldr	r3, [pc, #76]	; (8006a58 <prvProcessTimerOrBlockTask+0x90>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d101      	bne.n	8006a18 <prvProcessTimerOrBlockTask+0x50>
 8006a14:	2301      	movs	r3, #1
 8006a16:	e000      	b.n	8006a1a <prvProcessTimerOrBlockTask+0x52>
 8006a18:	2300      	movs	r3, #0
 8006a1a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006a1c:	4b0f      	ldr	r3, [pc, #60]	; (8006a5c <prvProcessTimerOrBlockTask+0x94>)
 8006a1e:	6818      	ldr	r0, [r3, #0]
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	683a      	ldr	r2, [r7, #0]
 8006a28:	4619      	mov	r1, r3
 8006a2a:	f7fe fdad 	bl	8005588 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006a2e:	f7fe ff85 	bl	800593c <xTaskResumeAll>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d10a      	bne.n	8006a4e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006a38:	4b09      	ldr	r3, [pc, #36]	; (8006a60 <prvProcessTimerOrBlockTask+0x98>)
 8006a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a3e:	601a      	str	r2, [r3, #0]
 8006a40:	f3bf 8f4f 	dsb	sy
 8006a44:	f3bf 8f6f 	isb	sy
    }
 8006a48:	e001      	b.n	8006a4e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006a4a:	f7fe ff77 	bl	800593c <xTaskResumeAll>
    }
 8006a4e:	bf00      	nop
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	2000023c 	.word	0x2000023c
 8006a5c:	20000240 	.word	0x20000240
 8006a60:	e000ed04 	.word	0xe000ed04

08006a64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006a6c:	4b0e      	ldr	r3, [pc, #56]	; (8006aa8 <prvGetNextExpireTime+0x44>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <prvGetNextExpireTime+0x16>
 8006a76:	2201      	movs	r2, #1
 8006a78:	e000      	b.n	8006a7c <prvGetNextExpireTime+0x18>
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d105      	bne.n	8006a94 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a88:	4b07      	ldr	r3, [pc, #28]	; (8006aa8 <prvGetNextExpireTime+0x44>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	60fb      	str	r3, [r7, #12]
 8006a92:	e001      	b.n	8006a98 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006a94:	2300      	movs	r3, #0
 8006a96:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006a98:	68fb      	ldr	r3, [r7, #12]
    }
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3714      	adds	r7, #20
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	20000238 	.word	0x20000238

08006aac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006ab4:	f7fe ffde 	bl	8005a74 <xTaskGetTickCount>
 8006ab8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8006aba:	4b0b      	ldr	r3, [pc, #44]	; (8006ae8 <prvSampleTimeNow+0x3c>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d205      	bcs.n	8006ad0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006ac4:	f000 f91a 	bl	8006cfc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	601a      	str	r2, [r3, #0]
 8006ace:	e002      	b.n	8006ad6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006ad6:	4a04      	ldr	r2, [pc, #16]	; (8006ae8 <prvSampleTimeNow+0x3c>)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006adc:	68fb      	ldr	r3, [r7, #12]
    }
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	20000248 	.word	0x20000248

08006aec <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
 8006af8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006afa:	2300      	movs	r3, #0
 8006afc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	68ba      	ldr	r2, [r7, #8]
 8006b02:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	68fa      	ldr	r2, [r7, #12]
 8006b08:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d812      	bhi.n	8006b38 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	1ad2      	subs	r2, r2, r3
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d302      	bcc.n	8006b26 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006b20:	2301      	movs	r3, #1
 8006b22:	617b      	str	r3, [r7, #20]
 8006b24:	e01b      	b.n	8006b5e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b26:	4b10      	ldr	r3, [pc, #64]	; (8006b68 <prvInsertTimerInActiveList+0x7c>)
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	3304      	adds	r3, #4
 8006b2e:	4619      	mov	r1, r3
 8006b30:	4610      	mov	r0, r2
 8006b32:	f7fd ff46 	bl	80049c2 <vListInsert>
 8006b36:	e012      	b.n	8006b5e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d206      	bcs.n	8006b4e <prvInsertTimerInActiveList+0x62>
 8006b40:	68ba      	ldr	r2, [r7, #8]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d302      	bcc.n	8006b4e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	617b      	str	r3, [r7, #20]
 8006b4c:	e007      	b.n	8006b5e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b4e:	4b07      	ldr	r3, [pc, #28]	; (8006b6c <prvInsertTimerInActiveList+0x80>)
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	3304      	adds	r3, #4
 8006b56:	4619      	mov	r1, r3
 8006b58:	4610      	mov	r0, r2
 8006b5a:	f7fd ff32 	bl	80049c2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006b5e:	697b      	ldr	r3, [r7, #20]
    }
 8006b60:	4618      	mov	r0, r3
 8006b62:	3718      	adds	r7, #24
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	2000023c 	.word	0x2000023c
 8006b6c:	20000238 	.word	0x20000238

08006b70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b08c      	sub	sp, #48	; 0x30
 8006b74:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b76:	e0ae      	b.n	8006cd6 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f2c0 80aa 	blt.w	8006cd4 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b86:	695b      	ldr	r3, [r3, #20]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d004      	beq.n	8006b96 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8e:	3304      	adds	r3, #4
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7fd ff4f 	bl	8004a34 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b96:	1d3b      	adds	r3, r7, #4
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f7ff ff87 	bl	8006aac <prvSampleTimeNow>
 8006b9e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	2b09      	cmp	r3, #9
 8006ba4:	f200 8097 	bhi.w	8006cd6 <prvProcessReceivedCommands+0x166>
 8006ba8:	a201      	add	r2, pc, #4	; (adr r2, 8006bb0 <prvProcessReceivedCommands+0x40>)
 8006baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bae:	bf00      	nop
 8006bb0:	08006bd9 	.word	0x08006bd9
 8006bb4:	08006bd9 	.word	0x08006bd9
 8006bb8:	08006bd9 	.word	0x08006bd9
 8006bbc:	08006c4d 	.word	0x08006c4d
 8006bc0:	08006c61 	.word	0x08006c61
 8006bc4:	08006cab 	.word	0x08006cab
 8006bc8:	08006bd9 	.word	0x08006bd9
 8006bcc:	08006bd9 	.word	0x08006bd9
 8006bd0:	08006c4d 	.word	0x08006c4d
 8006bd4:	08006c61 	.word	0x08006c61
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bde:	f043 0301 	orr.w	r3, r3, #1
 8006be2:	b2da      	uxtb	r2, r3
 8006be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bee:	699b      	ldr	r3, [r3, #24]
 8006bf0:	18d1      	adds	r1, r2, r3
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6a3a      	ldr	r2, [r7, #32]
 8006bf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006bf8:	f7ff ff78 	bl	8006aec <prvInsertTimerInActiveList>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d069      	beq.n	8006cd6 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c04:	6a1b      	ldr	r3, [r3, #32]
 8006c06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c08:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c10:	f003 0304 	and.w	r3, r3, #4
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d05e      	beq.n	8006cd6 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	441a      	add	r2, r3
 8006c20:	2300      	movs	r3, #0
 8006c22:	9300      	str	r3, [sp, #0]
 8006c24:	2300      	movs	r3, #0
 8006c26:	2100      	movs	r1, #0
 8006c28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c2a:	f7ff fe21 	bl	8006870 <xTimerGenericCommand>
 8006c2e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d14f      	bne.n	8006cd6 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8006c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3a:	f383 8811 	msr	BASEPRI, r3
 8006c3e:	f3bf 8f6f 	isb	sy
 8006c42:	f3bf 8f4f 	dsb	sy
 8006c46:	61bb      	str	r3, [r7, #24]
    }
 8006c48:	bf00      	nop
 8006c4a:	e7fe      	b.n	8006c4a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c52:	f023 0301 	bic.w	r3, r3, #1
 8006c56:	b2da      	uxtb	r2, r3
 8006c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8006c5e:	e03a      	b.n	8006cd6 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c66:	f043 0301 	orr.w	r3, r3, #1
 8006c6a:	b2da      	uxtb	r2, r3
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c76:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7a:	699b      	ldr	r3, [r3, #24]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d10a      	bne.n	8006c96 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8006c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c84:	f383 8811 	msr	BASEPRI, r3
 8006c88:	f3bf 8f6f 	isb	sy
 8006c8c:	f3bf 8f4f 	dsb	sy
 8006c90:	617b      	str	r3, [r7, #20]
    }
 8006c92:	bf00      	nop
 8006c94:	e7fe      	b.n	8006c94 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c98:	699a      	ldr	r2, [r3, #24]
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	18d1      	adds	r1, r2, r3
 8006c9e:	6a3b      	ldr	r3, [r7, #32]
 8006ca0:	6a3a      	ldr	r2, [r7, #32]
 8006ca2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ca4:	f7ff ff22 	bl	8006aec <prvInsertTimerInActiveList>
                        break;
 8006ca8:	e015      	b.n	8006cd6 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cb0:	f003 0302 	and.w	r3, r3, #2
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d103      	bne.n	8006cc0 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8006cb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006cba:	f000 fc07 	bl	80074cc <vPortFree>
 8006cbe:	e00a      	b.n	8006cd6 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cc6:	f023 0301 	bic.w	r3, r3, #1
 8006cca:	b2da      	uxtb	r2, r3
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006cd2:	e000      	b.n	8006cd6 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8006cd4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006cd6:	4b08      	ldr	r3, [pc, #32]	; (8006cf8 <prvProcessReceivedCommands+0x188>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f107 0108 	add.w	r1, r7, #8
 8006cde:	2200      	movs	r2, #0
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f7fe f963 	bl	8004fac <xQueueReceive>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f47f af45 	bne.w	8006b78 <prvProcessReceivedCommands+0x8>
        }
    }
 8006cee:	bf00      	nop
 8006cf0:	bf00      	nop
 8006cf2:	3728      	adds	r7, #40	; 0x28
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	20000240 	.word	0x20000240

08006cfc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b088      	sub	sp, #32
 8006d00:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d02:	e048      	b.n	8006d96 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d04:	4b2d      	ldr	r3, [pc, #180]	; (8006dbc <prvSwitchTimerLists+0xc0>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d0e:	4b2b      	ldr	r3, [pc, #172]	; (8006dbc <prvSwitchTimerLists+0xc0>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	3304      	adds	r3, #4
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7fd fe89 	bl	8004a34 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6a1b      	ldr	r3, [r3, #32]
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d30:	f003 0304 	and.w	r3, r3, #4
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d02e      	beq.n	8006d96 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	693a      	ldr	r2, [r7, #16]
 8006d3e:	4413      	add	r3, r2
 8006d40:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8006d42:	68ba      	ldr	r2, [r7, #8]
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d90e      	bls.n	8006d68 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	68ba      	ldr	r2, [r7, #8]
 8006d4e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d56:	4b19      	ldr	r3, [pc, #100]	; (8006dbc <prvSwitchTimerLists+0xc0>)
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	3304      	adds	r3, #4
 8006d5e:	4619      	mov	r1, r3
 8006d60:	4610      	mov	r0, r2
 8006d62:	f7fd fe2e 	bl	80049c2 <vListInsert>
 8006d66:	e016      	b.n	8006d96 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d68:	2300      	movs	r3, #0
 8006d6a:	9300      	str	r3, [sp, #0]
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	2100      	movs	r1, #0
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f7ff fd7c 	bl	8006870 <xTimerGenericCommand>
 8006d78:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d10a      	bne.n	8006d96 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8006d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d84:	f383 8811 	msr	BASEPRI, r3
 8006d88:	f3bf 8f6f 	isb	sy
 8006d8c:	f3bf 8f4f 	dsb	sy
 8006d90:	603b      	str	r3, [r7, #0]
    }
 8006d92:	bf00      	nop
 8006d94:	e7fe      	b.n	8006d94 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d96:	4b09      	ldr	r3, [pc, #36]	; (8006dbc <prvSwitchTimerLists+0xc0>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d1b1      	bne.n	8006d04 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8006da0:	4b06      	ldr	r3, [pc, #24]	; (8006dbc <prvSwitchTimerLists+0xc0>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8006da6:	4b06      	ldr	r3, [pc, #24]	; (8006dc0 <prvSwitchTimerLists+0xc4>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a04      	ldr	r2, [pc, #16]	; (8006dbc <prvSwitchTimerLists+0xc0>)
 8006dac:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006dae:	4a04      	ldr	r2, [pc, #16]	; (8006dc0 <prvSwitchTimerLists+0xc4>)
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	6013      	str	r3, [r2, #0]
    }
 8006db4:	bf00      	nop
 8006db6:	3718      	adds	r7, #24
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	20000238 	.word	0x20000238
 8006dc0:	2000023c 	.word	0x2000023c

08006dc4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006dc8:	f000 f97e 	bl	80070c8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006dcc:	4b12      	ldr	r3, [pc, #72]	; (8006e18 <prvCheckForValidListAndQueue+0x54>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d11d      	bne.n	8006e10 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006dd4:	4811      	ldr	r0, [pc, #68]	; (8006e1c <prvCheckForValidListAndQueue+0x58>)
 8006dd6:	f7fd fda3 	bl	8004920 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8006dda:	4811      	ldr	r0, [pc, #68]	; (8006e20 <prvCheckForValidListAndQueue+0x5c>)
 8006ddc:	f7fd fda0 	bl	8004920 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006de0:	4b10      	ldr	r3, [pc, #64]	; (8006e24 <prvCheckForValidListAndQueue+0x60>)
 8006de2:	4a0e      	ldr	r2, [pc, #56]	; (8006e1c <prvCheckForValidListAndQueue+0x58>)
 8006de4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006de6:	4b10      	ldr	r3, [pc, #64]	; (8006e28 <prvCheckForValidListAndQueue+0x64>)
 8006de8:	4a0d      	ldr	r2, [pc, #52]	; (8006e20 <prvCheckForValidListAndQueue+0x5c>)
 8006dea:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006dec:	2200      	movs	r2, #0
 8006dee:	210c      	movs	r1, #12
 8006df0:	200a      	movs	r0, #10
 8006df2:	f7fd feb1 	bl	8004b58 <xQueueGenericCreate>
 8006df6:	4603      	mov	r3, r0
 8006df8:	4a07      	ldr	r2, [pc, #28]	; (8006e18 <prvCheckForValidListAndQueue+0x54>)
 8006dfa:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8006dfc:	4b06      	ldr	r3, [pc, #24]	; (8006e18 <prvCheckForValidListAndQueue+0x54>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d005      	beq.n	8006e10 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006e04:	4b04      	ldr	r3, [pc, #16]	; (8006e18 <prvCheckForValidListAndQueue+0x54>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4908      	ldr	r1, [pc, #32]	; (8006e2c <prvCheckForValidListAndQueue+0x68>)
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7fe fb92 	bl	8005534 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006e10:	f000 f98a 	bl	8007128 <vPortExitCritical>
    }
 8006e14:	bf00      	nop
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	20000240 	.word	0x20000240
 8006e1c:	20000210 	.word	0x20000210
 8006e20:	20000224 	.word	0x20000224
 8006e24:	20000238 	.word	0x20000238
 8006e28:	2000023c 	.word	0x2000023c
 8006e2c:	080083d8 	.word	0x080083d8

08006e30 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b086      	sub	sp, #24
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10a      	bne.n	8006e58 <pvTimerGetTimerID+0x28>
        __asm volatile
 8006e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e46:	f383 8811 	msr	BASEPRI, r3
 8006e4a:	f3bf 8f6f 	isb	sy
 8006e4e:	f3bf 8f4f 	dsb	sy
 8006e52:	60fb      	str	r3, [r7, #12]
    }
 8006e54:	bf00      	nop
 8006e56:	e7fe      	b.n	8006e56 <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 8006e58:	f000 f936 	bl	80070c8 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	69db      	ldr	r3, [r3, #28]
 8006e60:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8006e62:	f000 f961 	bl	8007128 <vPortExitCritical>

        return pvReturn;
 8006e66:	693b      	ldr	r3, [r7, #16]
    }
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3718      	adds	r7, #24
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	3b04      	subs	r3, #4
 8006e80:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006e88:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	3b04      	subs	r3, #4
 8006e8e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	f023 0201 	bic.w	r2, r3, #1
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	3b04      	subs	r3, #4
 8006e9e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006ea0:	4a0c      	ldr	r2, [pc, #48]	; (8006ed4 <pxPortInitialiseStack+0x64>)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	3b14      	subs	r3, #20
 8006eaa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	3b04      	subs	r3, #4
 8006eb6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f06f 0202 	mvn.w	r2, #2
 8006ebe:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	3b20      	subs	r3, #32
 8006ec4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3714      	adds	r7, #20
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr
 8006ed4:	08006ed9 	.word	0x08006ed9

08006ed8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006ee2:	4b12      	ldr	r3, [pc, #72]	; (8006f2c <prvTaskExitError+0x54>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eea:	d00a      	beq.n	8006f02 <prvTaskExitError+0x2a>
        __asm volatile
 8006eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef0:	f383 8811 	msr	BASEPRI, r3
 8006ef4:	f3bf 8f6f 	isb	sy
 8006ef8:	f3bf 8f4f 	dsb	sy
 8006efc:	60fb      	str	r3, [r7, #12]
    }
 8006efe:	bf00      	nop
 8006f00:	e7fe      	b.n	8006f00 <prvTaskExitError+0x28>
        __asm volatile
 8006f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f06:	f383 8811 	msr	BASEPRI, r3
 8006f0a:	f3bf 8f6f 	isb	sy
 8006f0e:	f3bf 8f4f 	dsb	sy
 8006f12:	60bb      	str	r3, [r7, #8]
    }
 8006f14:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006f16:	bf00      	nop
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d0fc      	beq.n	8006f18 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006f1e:	bf00      	nop
 8006f20:	bf00      	nop
 8006f22:	3714      	adds	r7, #20
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr
 8006f2c:	20000024 	.word	0x20000024

08006f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006f30:	4b07      	ldr	r3, [pc, #28]	; (8006f50 <pxCurrentTCBConst2>)
 8006f32:	6819      	ldr	r1, [r3, #0]
 8006f34:	6808      	ldr	r0, [r1, #0]
 8006f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f3a:	f380 8809 	msr	PSP, r0
 8006f3e:	f3bf 8f6f 	isb	sy
 8006f42:	f04f 0000 	mov.w	r0, #0
 8006f46:	f380 8811 	msr	BASEPRI, r0
 8006f4a:	4770      	bx	lr
 8006f4c:	f3af 8000 	nop.w

08006f50 <pxCurrentTCBConst2>:
 8006f50:	2000010c 	.word	0x2000010c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006f54:	bf00      	nop
 8006f56:	bf00      	nop

08006f58 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006f58:	4808      	ldr	r0, [pc, #32]	; (8006f7c <prvPortStartFirstTask+0x24>)
 8006f5a:	6800      	ldr	r0, [r0, #0]
 8006f5c:	6800      	ldr	r0, [r0, #0]
 8006f5e:	f380 8808 	msr	MSP, r0
 8006f62:	f04f 0000 	mov.w	r0, #0
 8006f66:	f380 8814 	msr	CONTROL, r0
 8006f6a:	b662      	cpsie	i
 8006f6c:	b661      	cpsie	f
 8006f6e:	f3bf 8f4f 	dsb	sy
 8006f72:	f3bf 8f6f 	isb	sy
 8006f76:	df00      	svc	0
 8006f78:	bf00      	nop
 8006f7a:	0000      	.short	0x0000
 8006f7c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006f80:	bf00      	nop
 8006f82:	bf00      	nop

08006f84 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006f8a:	4b46      	ldr	r3, [pc, #280]	; (80070a4 <xPortStartScheduler+0x120>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a46      	ldr	r2, [pc, #280]	; (80070a8 <xPortStartScheduler+0x124>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d10a      	bne.n	8006faa <xPortStartScheduler+0x26>
        __asm volatile
 8006f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f98:	f383 8811 	msr	BASEPRI, r3
 8006f9c:	f3bf 8f6f 	isb	sy
 8006fa0:	f3bf 8f4f 	dsb	sy
 8006fa4:	613b      	str	r3, [r7, #16]
    }
 8006fa6:	bf00      	nop
 8006fa8:	e7fe      	b.n	8006fa8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006faa:	4b3e      	ldr	r3, [pc, #248]	; (80070a4 <xPortStartScheduler+0x120>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a3f      	ldr	r2, [pc, #252]	; (80070ac <xPortStartScheduler+0x128>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d10a      	bne.n	8006fca <xPortStartScheduler+0x46>
        __asm volatile
 8006fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb8:	f383 8811 	msr	BASEPRI, r3
 8006fbc:	f3bf 8f6f 	isb	sy
 8006fc0:	f3bf 8f4f 	dsb	sy
 8006fc4:	60fb      	str	r3, [r7, #12]
    }
 8006fc6:	bf00      	nop
 8006fc8:	e7fe      	b.n	8006fc8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006fca:	4b39      	ldr	r3, [pc, #228]	; (80070b0 <xPortStartScheduler+0x12c>)
 8006fcc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	22ff      	movs	r2, #255	; 0xff
 8006fda:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006fe4:	78fb      	ldrb	r3, [r7, #3]
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	4b31      	ldr	r3, [pc, #196]	; (80070b4 <xPortStartScheduler+0x130>)
 8006ff0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ff2:	4b31      	ldr	r3, [pc, #196]	; (80070b8 <xPortStartScheduler+0x134>)
 8006ff4:	2207      	movs	r2, #7
 8006ff6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ff8:	e009      	b.n	800700e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8006ffa:	4b2f      	ldr	r3, [pc, #188]	; (80070b8 <xPortStartScheduler+0x134>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	3b01      	subs	r3, #1
 8007000:	4a2d      	ldr	r2, [pc, #180]	; (80070b8 <xPortStartScheduler+0x134>)
 8007002:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007004:	78fb      	ldrb	r3, [r7, #3]
 8007006:	b2db      	uxtb	r3, r3
 8007008:	005b      	lsls	r3, r3, #1
 800700a:	b2db      	uxtb	r3, r3
 800700c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800700e:	78fb      	ldrb	r3, [r7, #3]
 8007010:	b2db      	uxtb	r3, r3
 8007012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007016:	2b80      	cmp	r3, #128	; 0x80
 8007018:	d0ef      	beq.n	8006ffa <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800701a:	4b27      	ldr	r3, [pc, #156]	; (80070b8 <xPortStartScheduler+0x134>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f1c3 0307 	rsb	r3, r3, #7
 8007022:	2b04      	cmp	r3, #4
 8007024:	d00a      	beq.n	800703c <xPortStartScheduler+0xb8>
        __asm volatile
 8007026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702a:	f383 8811 	msr	BASEPRI, r3
 800702e:	f3bf 8f6f 	isb	sy
 8007032:	f3bf 8f4f 	dsb	sy
 8007036:	60bb      	str	r3, [r7, #8]
    }
 8007038:	bf00      	nop
 800703a:	e7fe      	b.n	800703a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800703c:	4b1e      	ldr	r3, [pc, #120]	; (80070b8 <xPortStartScheduler+0x134>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	021b      	lsls	r3, r3, #8
 8007042:	4a1d      	ldr	r2, [pc, #116]	; (80070b8 <xPortStartScheduler+0x134>)
 8007044:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007046:	4b1c      	ldr	r3, [pc, #112]	; (80070b8 <xPortStartScheduler+0x134>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800704e:	4a1a      	ldr	r2, [pc, #104]	; (80070b8 <xPortStartScheduler+0x134>)
 8007050:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	b2da      	uxtb	r2, r3
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800705a:	4b18      	ldr	r3, [pc, #96]	; (80070bc <xPortStartScheduler+0x138>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a17      	ldr	r2, [pc, #92]	; (80070bc <xPortStartScheduler+0x138>)
 8007060:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007064:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007066:	4b15      	ldr	r3, [pc, #84]	; (80070bc <xPortStartScheduler+0x138>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a14      	ldr	r2, [pc, #80]	; (80070bc <xPortStartScheduler+0x138>)
 800706c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007070:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007072:	f000 f8db 	bl	800722c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007076:	4b12      	ldr	r3, [pc, #72]	; (80070c0 <xPortStartScheduler+0x13c>)
 8007078:	2200      	movs	r2, #0
 800707a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800707c:	f000 f8fa 	bl	8007274 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007080:	4b10      	ldr	r3, [pc, #64]	; (80070c4 <xPortStartScheduler+0x140>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a0f      	ldr	r2, [pc, #60]	; (80070c4 <xPortStartScheduler+0x140>)
 8007086:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800708a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800708c:	f7ff ff64 	bl	8006f58 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007090:	f7fe fdb8 	bl	8005c04 <vTaskSwitchContext>
    prvTaskExitError();
 8007094:	f7ff ff20 	bl	8006ed8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3718      	adds	r7, #24
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	e000ed00 	.word	0xe000ed00
 80070a8:	410fc271 	.word	0x410fc271
 80070ac:	410fc270 	.word	0x410fc270
 80070b0:	e000e400 	.word	0xe000e400
 80070b4:	2000024c 	.word	0x2000024c
 80070b8:	20000250 	.word	0x20000250
 80070bc:	e000ed20 	.word	0xe000ed20
 80070c0:	20000024 	.word	0x20000024
 80070c4:	e000ef34 	.word	0xe000ef34

080070c8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
        __asm volatile
 80070ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d2:	f383 8811 	msr	BASEPRI, r3
 80070d6:	f3bf 8f6f 	isb	sy
 80070da:	f3bf 8f4f 	dsb	sy
 80070de:	607b      	str	r3, [r7, #4]
    }
 80070e0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80070e2:	4b0f      	ldr	r3, [pc, #60]	; (8007120 <vPortEnterCritical+0x58>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	3301      	adds	r3, #1
 80070e8:	4a0d      	ldr	r2, [pc, #52]	; (8007120 <vPortEnterCritical+0x58>)
 80070ea:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80070ec:	4b0c      	ldr	r3, [pc, #48]	; (8007120 <vPortEnterCritical+0x58>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d10f      	bne.n	8007114 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80070f4:	4b0b      	ldr	r3, [pc, #44]	; (8007124 <vPortEnterCritical+0x5c>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00a      	beq.n	8007114 <vPortEnterCritical+0x4c>
        __asm volatile
 80070fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007102:	f383 8811 	msr	BASEPRI, r3
 8007106:	f3bf 8f6f 	isb	sy
 800710a:	f3bf 8f4f 	dsb	sy
 800710e:	603b      	str	r3, [r7, #0]
    }
 8007110:	bf00      	nop
 8007112:	e7fe      	b.n	8007112 <vPortEnterCritical+0x4a>
    }
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	20000024 	.word	0x20000024
 8007124:	e000ed04 	.word	0xe000ed04

08007128 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800712e:	4b12      	ldr	r3, [pc, #72]	; (8007178 <vPortExitCritical+0x50>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d10a      	bne.n	800714c <vPortExitCritical+0x24>
        __asm volatile
 8007136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713a:	f383 8811 	msr	BASEPRI, r3
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	f3bf 8f4f 	dsb	sy
 8007146:	607b      	str	r3, [r7, #4]
    }
 8007148:	bf00      	nop
 800714a:	e7fe      	b.n	800714a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800714c:	4b0a      	ldr	r3, [pc, #40]	; (8007178 <vPortExitCritical+0x50>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	3b01      	subs	r3, #1
 8007152:	4a09      	ldr	r2, [pc, #36]	; (8007178 <vPortExitCritical+0x50>)
 8007154:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007156:	4b08      	ldr	r3, [pc, #32]	; (8007178 <vPortExitCritical+0x50>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d105      	bne.n	800716a <vPortExitCritical+0x42>
 800715e:	2300      	movs	r3, #0
 8007160:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	f383 8811 	msr	BASEPRI, r3
    }
 8007168:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800716a:	bf00      	nop
 800716c:	370c      	adds	r7, #12
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	20000024 	.word	0x20000024
 800717c:	00000000 	.word	0x00000000

08007180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007180:	f3ef 8009 	mrs	r0, PSP
 8007184:	f3bf 8f6f 	isb	sy
 8007188:	4b15      	ldr	r3, [pc, #84]	; (80071e0 <pxCurrentTCBConst>)
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	f01e 0f10 	tst.w	lr, #16
 8007190:	bf08      	it	eq
 8007192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800719a:	6010      	str	r0, [r2, #0]
 800719c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80071a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80071a4:	f380 8811 	msr	BASEPRI, r0
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	f3bf 8f6f 	isb	sy
 80071b0:	f7fe fd28 	bl	8005c04 <vTaskSwitchContext>
 80071b4:	f04f 0000 	mov.w	r0, #0
 80071b8:	f380 8811 	msr	BASEPRI, r0
 80071bc:	bc09      	pop	{r0, r3}
 80071be:	6819      	ldr	r1, [r3, #0]
 80071c0:	6808      	ldr	r0, [r1, #0]
 80071c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c6:	f01e 0f10 	tst.w	lr, #16
 80071ca:	bf08      	it	eq
 80071cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80071d0:	f380 8809 	msr	PSP, r0
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	f3af 8000 	nop.w

080071e0 <pxCurrentTCBConst>:
 80071e0:	2000010c 	.word	0x2000010c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80071e4:	bf00      	nop
 80071e6:	bf00      	nop

080071e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
        __asm volatile
 80071ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f2:	f383 8811 	msr	BASEPRI, r3
 80071f6:	f3bf 8f6f 	isb	sy
 80071fa:	f3bf 8f4f 	dsb	sy
 80071fe:	607b      	str	r3, [r7, #4]
    }
 8007200:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007202:	f7fe fc47 	bl	8005a94 <xTaskIncrementTick>
 8007206:	4603      	mov	r3, r0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d003      	beq.n	8007214 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800720c:	4b06      	ldr	r3, [pc, #24]	; (8007228 <SysTick_Handler+0x40>)
 800720e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007212:	601a      	str	r2, [r3, #0]
 8007214:	2300      	movs	r3, #0
 8007216:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	f383 8811 	msr	BASEPRI, r3
    }
 800721e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8007220:	bf00      	nop
 8007222:	3708      	adds	r7, #8
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	e000ed04 	.word	0xe000ed04

0800722c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800722c:	b480      	push	{r7}
 800722e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007230:	4b0b      	ldr	r3, [pc, #44]	; (8007260 <vPortSetupTimerInterrupt+0x34>)
 8007232:	2200      	movs	r2, #0
 8007234:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007236:	4b0b      	ldr	r3, [pc, #44]	; (8007264 <vPortSetupTimerInterrupt+0x38>)
 8007238:	2200      	movs	r2, #0
 800723a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800723c:	4b0a      	ldr	r3, [pc, #40]	; (8007268 <vPortSetupTimerInterrupt+0x3c>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a0a      	ldr	r2, [pc, #40]	; (800726c <vPortSetupTimerInterrupt+0x40>)
 8007242:	fba2 2303 	umull	r2, r3, r2, r3
 8007246:	099b      	lsrs	r3, r3, #6
 8007248:	4a09      	ldr	r2, [pc, #36]	; (8007270 <vPortSetupTimerInterrupt+0x44>)
 800724a:	3b01      	subs	r3, #1
 800724c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800724e:	4b04      	ldr	r3, [pc, #16]	; (8007260 <vPortSetupTimerInterrupt+0x34>)
 8007250:	2207      	movs	r2, #7
 8007252:	601a      	str	r2, [r3, #0]
}
 8007254:	bf00      	nop
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	e000e010 	.word	0xe000e010
 8007264:	e000e018 	.word	0xe000e018
 8007268:	20000010 	.word	0x20000010
 800726c:	10624dd3 	.word	0x10624dd3
 8007270:	e000e014 	.word	0xe000e014

08007274 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007274:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007284 <vPortEnableVFP+0x10>
 8007278:	6801      	ldr	r1, [r0, #0]
 800727a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800727e:	6001      	str	r1, [r0, #0]
 8007280:	4770      	bx	lr
 8007282:	0000      	.short	0x0000
 8007284:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007288:	bf00      	nop
 800728a:	bf00      	nop

0800728c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007292:	f3ef 8305 	mrs	r3, IPSR
 8007296:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2b0f      	cmp	r3, #15
 800729c:	d914      	bls.n	80072c8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800729e:	4a17      	ldr	r2, [pc, #92]	; (80072fc <vPortValidateInterruptPriority+0x70>)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	4413      	add	r3, r2
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80072a8:	4b15      	ldr	r3, [pc, #84]	; (8007300 <vPortValidateInterruptPriority+0x74>)
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	7afa      	ldrb	r2, [r7, #11]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d20a      	bcs.n	80072c8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80072b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b6:	f383 8811 	msr	BASEPRI, r3
 80072ba:	f3bf 8f6f 	isb	sy
 80072be:	f3bf 8f4f 	dsb	sy
 80072c2:	607b      	str	r3, [r7, #4]
    }
 80072c4:	bf00      	nop
 80072c6:	e7fe      	b.n	80072c6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80072c8:	4b0e      	ldr	r3, [pc, #56]	; (8007304 <vPortValidateInterruptPriority+0x78>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80072d0:	4b0d      	ldr	r3, [pc, #52]	; (8007308 <vPortValidateInterruptPriority+0x7c>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d90a      	bls.n	80072ee <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80072d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072dc:	f383 8811 	msr	BASEPRI, r3
 80072e0:	f3bf 8f6f 	isb	sy
 80072e4:	f3bf 8f4f 	dsb	sy
 80072e8:	603b      	str	r3, [r7, #0]
    }
 80072ea:	bf00      	nop
 80072ec:	e7fe      	b.n	80072ec <vPortValidateInterruptPriority+0x60>
    }
 80072ee:	bf00      	nop
 80072f0:	3714      	adds	r7, #20
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	e000e3f0 	.word	0xe000e3f0
 8007300:	2000024c 	.word	0x2000024c
 8007304:	e000ed0c 	.word	0xe000ed0c
 8007308:	20000250 	.word	0x20000250

0800730c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b08a      	sub	sp, #40	; 0x28
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8007314:	2300      	movs	r3, #0
 8007316:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8007318:	f7fe fb02 	bl	8005920 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800731c:	4b65      	ldr	r3, [pc, #404]	; (80074b4 <pvPortMalloc+0x1a8>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d101      	bne.n	8007328 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007324:	f000 f934 	bl	8007590 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007328:	4b63      	ldr	r3, [pc, #396]	; (80074b8 <pvPortMalloc+0x1ac>)
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4013      	ands	r3, r2
 8007330:	2b00      	cmp	r3, #0
 8007332:	f040 80a7 	bne.w	8007484 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d02d      	beq.n	8007398 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800733c:	2208      	movs	r2, #8
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	429a      	cmp	r2, r3
 8007346:	d227      	bcs.n	8007398 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8007348:	2208      	movs	r2, #8
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4413      	add	r3, r2
 800734e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f003 0307 	and.w	r3, r3, #7
 8007356:	2b00      	cmp	r3, #0
 8007358:	d021      	beq.n	800739e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f023 0307 	bic.w	r3, r3, #7
 8007360:	3308      	adds	r3, #8
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	429a      	cmp	r2, r3
 8007366:	d214      	bcs.n	8007392 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f023 0307 	bic.w	r3, r3, #7
 800736e:	3308      	adds	r3, #8
 8007370:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f003 0307 	and.w	r3, r3, #7
 8007378:	2b00      	cmp	r3, #0
 800737a:	d010      	beq.n	800739e <pvPortMalloc+0x92>
        __asm volatile
 800737c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007380:	f383 8811 	msr	BASEPRI, r3
 8007384:	f3bf 8f6f 	isb	sy
 8007388:	f3bf 8f4f 	dsb	sy
 800738c:	617b      	str	r3, [r7, #20]
    }
 800738e:	bf00      	nop
 8007390:	e7fe      	b.n	8007390 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8007392:	2300      	movs	r3, #0
 8007394:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007396:	e002      	b.n	800739e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8007398:	2300      	movs	r3, #0
 800739a:	607b      	str	r3, [r7, #4]
 800739c:	e000      	b.n	80073a0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800739e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d06e      	beq.n	8007484 <pvPortMalloc+0x178>
 80073a6:	4b45      	ldr	r3, [pc, #276]	; (80074bc <pvPortMalloc+0x1b0>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d869      	bhi.n	8007484 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80073b0:	4b43      	ldr	r3, [pc, #268]	; (80074c0 <pvPortMalloc+0x1b4>)
 80073b2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80073b4:	4b42      	ldr	r3, [pc, #264]	; (80074c0 <pvPortMalloc+0x1b4>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073ba:	e004      	b.n	80073c6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80073bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073be:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80073c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d903      	bls.n	80073d8 <pvPortMalloc+0xcc>
 80073d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1f1      	bne.n	80073bc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80073d8:	4b36      	ldr	r3, [pc, #216]	; (80074b4 <pvPortMalloc+0x1a8>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073de:	429a      	cmp	r2, r3
 80073e0:	d050      	beq.n	8007484 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80073e2:	6a3b      	ldr	r3, [r7, #32]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2208      	movs	r2, #8
 80073e8:	4413      	add	r3, r2
 80073ea:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80073ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	6a3b      	ldr	r3, [r7, #32]
 80073f2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80073f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f6:	685a      	ldr	r2, [r3, #4]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	1ad2      	subs	r2, r2, r3
 80073fc:	2308      	movs	r3, #8
 80073fe:	005b      	lsls	r3, r3, #1
 8007400:	429a      	cmp	r2, r3
 8007402:	d91f      	bls.n	8007444 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4413      	add	r3, r2
 800740a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	f003 0307 	and.w	r3, r3, #7
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00a      	beq.n	800742c <pvPortMalloc+0x120>
        __asm volatile
 8007416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741a:	f383 8811 	msr	BASEPRI, r3
 800741e:	f3bf 8f6f 	isb	sy
 8007422:	f3bf 8f4f 	dsb	sy
 8007426:	613b      	str	r3, [r7, #16]
    }
 8007428:	bf00      	nop
 800742a:	e7fe      	b.n	800742a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800742c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742e:	685a      	ldr	r2, [r3, #4]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	1ad2      	subs	r2, r2, r3
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800743e:	69b8      	ldr	r0, [r7, #24]
 8007440:	f000 f908 	bl	8007654 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007444:	4b1d      	ldr	r3, [pc, #116]	; (80074bc <pvPortMalloc+0x1b0>)
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	4a1b      	ldr	r2, [pc, #108]	; (80074bc <pvPortMalloc+0x1b0>)
 8007450:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007452:	4b1a      	ldr	r3, [pc, #104]	; (80074bc <pvPortMalloc+0x1b0>)
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	4b1b      	ldr	r3, [pc, #108]	; (80074c4 <pvPortMalloc+0x1b8>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	429a      	cmp	r2, r3
 800745c:	d203      	bcs.n	8007466 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800745e:	4b17      	ldr	r3, [pc, #92]	; (80074bc <pvPortMalloc+0x1b0>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a18      	ldr	r2, [pc, #96]	; (80074c4 <pvPortMalloc+0x1b8>)
 8007464:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007468:	685a      	ldr	r2, [r3, #4]
 800746a:	4b13      	ldr	r3, [pc, #76]	; (80074b8 <pvPortMalloc+0x1ac>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	431a      	orrs	r2, r3
 8007470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007472:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007476:	2200      	movs	r2, #0
 8007478:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800747a:	4b13      	ldr	r3, [pc, #76]	; (80074c8 <pvPortMalloc+0x1bc>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	3301      	adds	r3, #1
 8007480:	4a11      	ldr	r2, [pc, #68]	; (80074c8 <pvPortMalloc+0x1bc>)
 8007482:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007484:	f7fe fa5a 	bl	800593c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	f003 0307 	and.w	r3, r3, #7
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00a      	beq.n	80074a8 <pvPortMalloc+0x19c>
        __asm volatile
 8007492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007496:	f383 8811 	msr	BASEPRI, r3
 800749a:	f3bf 8f6f 	isb	sy
 800749e:	f3bf 8f4f 	dsb	sy
 80074a2:	60fb      	str	r3, [r7, #12]
    }
 80074a4:	bf00      	nop
 80074a6:	e7fe      	b.n	80074a6 <pvPortMalloc+0x19a>
    return pvReturn;
 80074a8:	69fb      	ldr	r3, [r7, #28]
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3728      	adds	r7, #40	; 0x28
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	20012e5c 	.word	0x20012e5c
 80074b8:	20012e70 	.word	0x20012e70
 80074bc:	20012e60 	.word	0x20012e60
 80074c0:	20012e54 	.word	0x20012e54
 80074c4:	20012e64 	.word	0x20012e64
 80074c8:	20012e68 	.word	0x20012e68

080074cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b086      	sub	sp, #24
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d04d      	beq.n	800757a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80074de:	2308      	movs	r3, #8
 80074e0:	425b      	negs	r3, r3
 80074e2:	697a      	ldr	r2, [r7, #20]
 80074e4:	4413      	add	r3, r2
 80074e6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	685a      	ldr	r2, [r3, #4]
 80074f0:	4b24      	ldr	r3, [pc, #144]	; (8007584 <vPortFree+0xb8>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4013      	ands	r3, r2
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d10a      	bne.n	8007510 <vPortFree+0x44>
        __asm volatile
 80074fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fe:	f383 8811 	msr	BASEPRI, r3
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	f3bf 8f4f 	dsb	sy
 800750a:	60fb      	str	r3, [r7, #12]
    }
 800750c:	bf00      	nop
 800750e:	e7fe      	b.n	800750e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d00a      	beq.n	800752e <vPortFree+0x62>
        __asm volatile
 8007518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751c:	f383 8811 	msr	BASEPRI, r3
 8007520:	f3bf 8f6f 	isb	sy
 8007524:	f3bf 8f4f 	dsb	sy
 8007528:	60bb      	str	r3, [r7, #8]
    }
 800752a:	bf00      	nop
 800752c:	e7fe      	b.n	800752c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	685a      	ldr	r2, [r3, #4]
 8007532:	4b14      	ldr	r3, [pc, #80]	; (8007584 <vPortFree+0xb8>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4013      	ands	r3, r2
 8007538:	2b00      	cmp	r3, #0
 800753a:	d01e      	beq.n	800757a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d11a      	bne.n	800757a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	685a      	ldr	r2, [r3, #4]
 8007548:	4b0e      	ldr	r3, [pc, #56]	; (8007584 <vPortFree+0xb8>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	43db      	mvns	r3, r3
 800754e:	401a      	ands	r2, r3
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8007554:	f7fe f9e4 	bl	8005920 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	685a      	ldr	r2, [r3, #4]
 800755c:	4b0a      	ldr	r3, [pc, #40]	; (8007588 <vPortFree+0xbc>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4413      	add	r3, r2
 8007562:	4a09      	ldr	r2, [pc, #36]	; (8007588 <vPortFree+0xbc>)
 8007564:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007566:	6938      	ldr	r0, [r7, #16]
 8007568:	f000 f874 	bl	8007654 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800756c:	4b07      	ldr	r3, [pc, #28]	; (800758c <vPortFree+0xc0>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	3301      	adds	r3, #1
 8007572:	4a06      	ldr	r2, [pc, #24]	; (800758c <vPortFree+0xc0>)
 8007574:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007576:	f7fe f9e1 	bl	800593c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800757a:	bf00      	nop
 800757c:	3718      	adds	r7, #24
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	20012e70 	.word	0x20012e70
 8007588:	20012e60 	.word	0x20012e60
 800758c:	20012e6c 	.word	0x20012e6c

08007590 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007596:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800759a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800759c:	4b27      	ldr	r3, [pc, #156]	; (800763c <prvHeapInit+0xac>)
 800759e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f003 0307 	and.w	r3, r3, #7
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00c      	beq.n	80075c4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	3307      	adds	r3, #7
 80075ae:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f023 0307 	bic.w	r3, r3, #7
 80075b6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80075b8:	68ba      	ldr	r2, [r7, #8]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	1ad3      	subs	r3, r2, r3
 80075be:	4a1f      	ldr	r2, [pc, #124]	; (800763c <prvHeapInit+0xac>)
 80075c0:	4413      	add	r3, r2
 80075c2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80075c8:	4a1d      	ldr	r2, [pc, #116]	; (8007640 <prvHeapInit+0xb0>)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80075ce:	4b1c      	ldr	r3, [pc, #112]	; (8007640 <prvHeapInit+0xb0>)
 80075d0:	2200      	movs	r2, #0
 80075d2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	4413      	add	r3, r2
 80075da:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80075dc:	2208      	movs	r2, #8
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	1a9b      	subs	r3, r3, r2
 80075e2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f023 0307 	bic.w	r3, r3, #7
 80075ea:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	4a15      	ldr	r2, [pc, #84]	; (8007644 <prvHeapInit+0xb4>)
 80075f0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80075f2:	4b14      	ldr	r3, [pc, #80]	; (8007644 <prvHeapInit+0xb4>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2200      	movs	r2, #0
 80075f8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80075fa:	4b12      	ldr	r3, [pc, #72]	; (8007644 <prvHeapInit+0xb4>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2200      	movs	r2, #0
 8007600:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	68fa      	ldr	r2, [r7, #12]
 800760a:	1ad2      	subs	r2, r2, r3
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007610:	4b0c      	ldr	r3, [pc, #48]	; (8007644 <prvHeapInit+0xb4>)
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	4a0a      	ldr	r2, [pc, #40]	; (8007648 <prvHeapInit+0xb8>)
 800761e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	4a09      	ldr	r2, [pc, #36]	; (800764c <prvHeapInit+0xbc>)
 8007626:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007628:	4b09      	ldr	r3, [pc, #36]	; (8007650 <prvHeapInit+0xc0>)
 800762a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800762e:	601a      	str	r2, [r3, #0]
}
 8007630:	bf00      	nop
 8007632:	3714      	adds	r7, #20
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr
 800763c:	20000254 	.word	0x20000254
 8007640:	20012e54 	.word	0x20012e54
 8007644:	20012e5c 	.word	0x20012e5c
 8007648:	20012e64 	.word	0x20012e64
 800764c:	20012e60 	.word	0x20012e60
 8007650:	20012e70 	.word	0x20012e70

08007654 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007654:	b480      	push	{r7}
 8007656:	b085      	sub	sp, #20
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800765c:	4b28      	ldr	r3, [pc, #160]	; (8007700 <prvInsertBlockIntoFreeList+0xac>)
 800765e:	60fb      	str	r3, [r7, #12]
 8007660:	e002      	b.n	8007668 <prvInsertBlockIntoFreeList+0x14>
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	60fb      	str	r3, [r7, #12]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	429a      	cmp	r2, r3
 8007670:	d8f7      	bhi.n	8007662 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	68ba      	ldr	r2, [r7, #8]
 800767c:	4413      	add	r3, r2
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	429a      	cmp	r2, r3
 8007682:	d108      	bne.n	8007696 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	685a      	ldr	r2, [r3, #4]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	441a      	add	r2, r3
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	441a      	add	r2, r3
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d118      	bne.n	80076dc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	4b15      	ldr	r3, [pc, #84]	; (8007704 <prvInsertBlockIntoFreeList+0xb0>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d00d      	beq.n	80076d2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	685a      	ldr	r2, [r3, #4]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	441a      	add	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	601a      	str	r2, [r3, #0]
 80076d0:	e008      	b.n	80076e4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80076d2:	4b0c      	ldr	r3, [pc, #48]	; (8007704 <prvInsertBlockIntoFreeList+0xb0>)
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	601a      	str	r2, [r3, #0]
 80076da:	e003      	b.n	80076e4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d002      	beq.n	80076f2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80076f2:	bf00      	nop
 80076f4:	3714      	adds	r7, #20
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr
 80076fe:	bf00      	nop
 8007700:	20012e54 	.word	0x20012e54
 8007704:	20012e5c 	.word	0x20012e5c

08007708 <__errno>:
 8007708:	4b01      	ldr	r3, [pc, #4]	; (8007710 <__errno+0x8>)
 800770a:	6818      	ldr	r0, [r3, #0]
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	20000028 	.word	0x20000028

08007714 <__libc_init_array>:
 8007714:	b570      	push	{r4, r5, r6, lr}
 8007716:	4d0d      	ldr	r5, [pc, #52]	; (800774c <__libc_init_array+0x38>)
 8007718:	4c0d      	ldr	r4, [pc, #52]	; (8007750 <__libc_init_array+0x3c>)
 800771a:	1b64      	subs	r4, r4, r5
 800771c:	10a4      	asrs	r4, r4, #2
 800771e:	2600      	movs	r6, #0
 8007720:	42a6      	cmp	r6, r4
 8007722:	d109      	bne.n	8007738 <__libc_init_array+0x24>
 8007724:	4d0b      	ldr	r5, [pc, #44]	; (8007754 <__libc_init_array+0x40>)
 8007726:	4c0c      	ldr	r4, [pc, #48]	; (8007758 <__libc_init_array+0x44>)
 8007728:	f000 fc4e 	bl	8007fc8 <_init>
 800772c:	1b64      	subs	r4, r4, r5
 800772e:	10a4      	asrs	r4, r4, #2
 8007730:	2600      	movs	r6, #0
 8007732:	42a6      	cmp	r6, r4
 8007734:	d105      	bne.n	8007742 <__libc_init_array+0x2e>
 8007736:	bd70      	pop	{r4, r5, r6, pc}
 8007738:	f855 3b04 	ldr.w	r3, [r5], #4
 800773c:	4798      	blx	r3
 800773e:	3601      	adds	r6, #1
 8007740:	e7ee      	b.n	8007720 <__libc_init_array+0xc>
 8007742:	f855 3b04 	ldr.w	r3, [r5], #4
 8007746:	4798      	blx	r3
 8007748:	3601      	adds	r6, #1
 800774a:	e7f2      	b.n	8007732 <__libc_init_array+0x1e>
 800774c:	08008434 	.word	0x08008434
 8007750:	08008434 	.word	0x08008434
 8007754:	08008434 	.word	0x08008434
 8007758:	08008438 	.word	0x08008438

0800775c <memcpy>:
 800775c:	440a      	add	r2, r1
 800775e:	4291      	cmp	r1, r2
 8007760:	f100 33ff 	add.w	r3, r0, #4294967295
 8007764:	d100      	bne.n	8007768 <memcpy+0xc>
 8007766:	4770      	bx	lr
 8007768:	b510      	push	{r4, lr}
 800776a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800776e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007772:	4291      	cmp	r1, r2
 8007774:	d1f9      	bne.n	800776a <memcpy+0xe>
 8007776:	bd10      	pop	{r4, pc}

08007778 <memset>:
 8007778:	4402      	add	r2, r0
 800777a:	4603      	mov	r3, r0
 800777c:	4293      	cmp	r3, r2
 800777e:	d100      	bne.n	8007782 <memset+0xa>
 8007780:	4770      	bx	lr
 8007782:	f803 1b01 	strb.w	r1, [r3], #1
 8007786:	e7f9      	b.n	800777c <memset+0x4>

08007788 <siprintf>:
 8007788:	b40e      	push	{r1, r2, r3}
 800778a:	b500      	push	{lr}
 800778c:	b09c      	sub	sp, #112	; 0x70
 800778e:	ab1d      	add	r3, sp, #116	; 0x74
 8007790:	9002      	str	r0, [sp, #8]
 8007792:	9006      	str	r0, [sp, #24]
 8007794:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007798:	4809      	ldr	r0, [pc, #36]	; (80077c0 <siprintf+0x38>)
 800779a:	9107      	str	r1, [sp, #28]
 800779c:	9104      	str	r1, [sp, #16]
 800779e:	4909      	ldr	r1, [pc, #36]	; (80077c4 <siprintf+0x3c>)
 80077a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80077a4:	9105      	str	r1, [sp, #20]
 80077a6:	6800      	ldr	r0, [r0, #0]
 80077a8:	9301      	str	r3, [sp, #4]
 80077aa:	a902      	add	r1, sp, #8
 80077ac:	f000 f868 	bl	8007880 <_svfiprintf_r>
 80077b0:	9b02      	ldr	r3, [sp, #8]
 80077b2:	2200      	movs	r2, #0
 80077b4:	701a      	strb	r2, [r3, #0]
 80077b6:	b01c      	add	sp, #112	; 0x70
 80077b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80077bc:	b003      	add	sp, #12
 80077be:	4770      	bx	lr
 80077c0:	20000028 	.word	0x20000028
 80077c4:	ffff0208 	.word	0xffff0208

080077c8 <__ssputs_r>:
 80077c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077cc:	688e      	ldr	r6, [r1, #8]
 80077ce:	429e      	cmp	r6, r3
 80077d0:	4682      	mov	sl, r0
 80077d2:	460c      	mov	r4, r1
 80077d4:	4690      	mov	r8, r2
 80077d6:	461f      	mov	r7, r3
 80077d8:	d838      	bhi.n	800784c <__ssputs_r+0x84>
 80077da:	898a      	ldrh	r2, [r1, #12]
 80077dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80077e0:	d032      	beq.n	8007848 <__ssputs_r+0x80>
 80077e2:	6825      	ldr	r5, [r4, #0]
 80077e4:	6909      	ldr	r1, [r1, #16]
 80077e6:	eba5 0901 	sub.w	r9, r5, r1
 80077ea:	6965      	ldr	r5, [r4, #20]
 80077ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80077f4:	3301      	adds	r3, #1
 80077f6:	444b      	add	r3, r9
 80077f8:	106d      	asrs	r5, r5, #1
 80077fa:	429d      	cmp	r5, r3
 80077fc:	bf38      	it	cc
 80077fe:	461d      	movcc	r5, r3
 8007800:	0553      	lsls	r3, r2, #21
 8007802:	d531      	bpl.n	8007868 <__ssputs_r+0xa0>
 8007804:	4629      	mov	r1, r5
 8007806:	f000 fb39 	bl	8007e7c <_malloc_r>
 800780a:	4606      	mov	r6, r0
 800780c:	b950      	cbnz	r0, 8007824 <__ssputs_r+0x5c>
 800780e:	230c      	movs	r3, #12
 8007810:	f8ca 3000 	str.w	r3, [sl]
 8007814:	89a3      	ldrh	r3, [r4, #12]
 8007816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800781a:	81a3      	strh	r3, [r4, #12]
 800781c:	f04f 30ff 	mov.w	r0, #4294967295
 8007820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007824:	6921      	ldr	r1, [r4, #16]
 8007826:	464a      	mov	r2, r9
 8007828:	f7ff ff98 	bl	800775c <memcpy>
 800782c:	89a3      	ldrh	r3, [r4, #12]
 800782e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007836:	81a3      	strh	r3, [r4, #12]
 8007838:	6126      	str	r6, [r4, #16]
 800783a:	6165      	str	r5, [r4, #20]
 800783c:	444e      	add	r6, r9
 800783e:	eba5 0509 	sub.w	r5, r5, r9
 8007842:	6026      	str	r6, [r4, #0]
 8007844:	60a5      	str	r5, [r4, #8]
 8007846:	463e      	mov	r6, r7
 8007848:	42be      	cmp	r6, r7
 800784a:	d900      	bls.n	800784e <__ssputs_r+0x86>
 800784c:	463e      	mov	r6, r7
 800784e:	4632      	mov	r2, r6
 8007850:	6820      	ldr	r0, [r4, #0]
 8007852:	4641      	mov	r1, r8
 8007854:	f000 faa8 	bl	8007da8 <memmove>
 8007858:	68a3      	ldr	r3, [r4, #8]
 800785a:	6822      	ldr	r2, [r4, #0]
 800785c:	1b9b      	subs	r3, r3, r6
 800785e:	4432      	add	r2, r6
 8007860:	60a3      	str	r3, [r4, #8]
 8007862:	6022      	str	r2, [r4, #0]
 8007864:	2000      	movs	r0, #0
 8007866:	e7db      	b.n	8007820 <__ssputs_r+0x58>
 8007868:	462a      	mov	r2, r5
 800786a:	f000 fb61 	bl	8007f30 <_realloc_r>
 800786e:	4606      	mov	r6, r0
 8007870:	2800      	cmp	r0, #0
 8007872:	d1e1      	bne.n	8007838 <__ssputs_r+0x70>
 8007874:	6921      	ldr	r1, [r4, #16]
 8007876:	4650      	mov	r0, sl
 8007878:	f000 fab0 	bl	8007ddc <_free_r>
 800787c:	e7c7      	b.n	800780e <__ssputs_r+0x46>
	...

08007880 <_svfiprintf_r>:
 8007880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007884:	4698      	mov	r8, r3
 8007886:	898b      	ldrh	r3, [r1, #12]
 8007888:	061b      	lsls	r3, r3, #24
 800788a:	b09d      	sub	sp, #116	; 0x74
 800788c:	4607      	mov	r7, r0
 800788e:	460d      	mov	r5, r1
 8007890:	4614      	mov	r4, r2
 8007892:	d50e      	bpl.n	80078b2 <_svfiprintf_r+0x32>
 8007894:	690b      	ldr	r3, [r1, #16]
 8007896:	b963      	cbnz	r3, 80078b2 <_svfiprintf_r+0x32>
 8007898:	2140      	movs	r1, #64	; 0x40
 800789a:	f000 faef 	bl	8007e7c <_malloc_r>
 800789e:	6028      	str	r0, [r5, #0]
 80078a0:	6128      	str	r0, [r5, #16]
 80078a2:	b920      	cbnz	r0, 80078ae <_svfiprintf_r+0x2e>
 80078a4:	230c      	movs	r3, #12
 80078a6:	603b      	str	r3, [r7, #0]
 80078a8:	f04f 30ff 	mov.w	r0, #4294967295
 80078ac:	e0d1      	b.n	8007a52 <_svfiprintf_r+0x1d2>
 80078ae:	2340      	movs	r3, #64	; 0x40
 80078b0:	616b      	str	r3, [r5, #20]
 80078b2:	2300      	movs	r3, #0
 80078b4:	9309      	str	r3, [sp, #36]	; 0x24
 80078b6:	2320      	movs	r3, #32
 80078b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80078c0:	2330      	movs	r3, #48	; 0x30
 80078c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007a6c <_svfiprintf_r+0x1ec>
 80078c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078ca:	f04f 0901 	mov.w	r9, #1
 80078ce:	4623      	mov	r3, r4
 80078d0:	469a      	mov	sl, r3
 80078d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078d6:	b10a      	cbz	r2, 80078dc <_svfiprintf_r+0x5c>
 80078d8:	2a25      	cmp	r2, #37	; 0x25
 80078da:	d1f9      	bne.n	80078d0 <_svfiprintf_r+0x50>
 80078dc:	ebba 0b04 	subs.w	fp, sl, r4
 80078e0:	d00b      	beq.n	80078fa <_svfiprintf_r+0x7a>
 80078e2:	465b      	mov	r3, fp
 80078e4:	4622      	mov	r2, r4
 80078e6:	4629      	mov	r1, r5
 80078e8:	4638      	mov	r0, r7
 80078ea:	f7ff ff6d 	bl	80077c8 <__ssputs_r>
 80078ee:	3001      	adds	r0, #1
 80078f0:	f000 80aa 	beq.w	8007a48 <_svfiprintf_r+0x1c8>
 80078f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078f6:	445a      	add	r2, fp
 80078f8:	9209      	str	r2, [sp, #36]	; 0x24
 80078fa:	f89a 3000 	ldrb.w	r3, [sl]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	f000 80a2 	beq.w	8007a48 <_svfiprintf_r+0x1c8>
 8007904:	2300      	movs	r3, #0
 8007906:	f04f 32ff 	mov.w	r2, #4294967295
 800790a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800790e:	f10a 0a01 	add.w	sl, sl, #1
 8007912:	9304      	str	r3, [sp, #16]
 8007914:	9307      	str	r3, [sp, #28]
 8007916:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800791a:	931a      	str	r3, [sp, #104]	; 0x68
 800791c:	4654      	mov	r4, sl
 800791e:	2205      	movs	r2, #5
 8007920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007924:	4851      	ldr	r0, [pc, #324]	; (8007a6c <_svfiprintf_r+0x1ec>)
 8007926:	f7f8 fc6b 	bl	8000200 <memchr>
 800792a:	9a04      	ldr	r2, [sp, #16]
 800792c:	b9d8      	cbnz	r0, 8007966 <_svfiprintf_r+0xe6>
 800792e:	06d0      	lsls	r0, r2, #27
 8007930:	bf44      	itt	mi
 8007932:	2320      	movmi	r3, #32
 8007934:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007938:	0711      	lsls	r1, r2, #28
 800793a:	bf44      	itt	mi
 800793c:	232b      	movmi	r3, #43	; 0x2b
 800793e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007942:	f89a 3000 	ldrb.w	r3, [sl]
 8007946:	2b2a      	cmp	r3, #42	; 0x2a
 8007948:	d015      	beq.n	8007976 <_svfiprintf_r+0xf6>
 800794a:	9a07      	ldr	r2, [sp, #28]
 800794c:	4654      	mov	r4, sl
 800794e:	2000      	movs	r0, #0
 8007950:	f04f 0c0a 	mov.w	ip, #10
 8007954:	4621      	mov	r1, r4
 8007956:	f811 3b01 	ldrb.w	r3, [r1], #1
 800795a:	3b30      	subs	r3, #48	; 0x30
 800795c:	2b09      	cmp	r3, #9
 800795e:	d94e      	bls.n	80079fe <_svfiprintf_r+0x17e>
 8007960:	b1b0      	cbz	r0, 8007990 <_svfiprintf_r+0x110>
 8007962:	9207      	str	r2, [sp, #28]
 8007964:	e014      	b.n	8007990 <_svfiprintf_r+0x110>
 8007966:	eba0 0308 	sub.w	r3, r0, r8
 800796a:	fa09 f303 	lsl.w	r3, r9, r3
 800796e:	4313      	orrs	r3, r2
 8007970:	9304      	str	r3, [sp, #16]
 8007972:	46a2      	mov	sl, r4
 8007974:	e7d2      	b.n	800791c <_svfiprintf_r+0x9c>
 8007976:	9b03      	ldr	r3, [sp, #12]
 8007978:	1d19      	adds	r1, r3, #4
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	9103      	str	r1, [sp, #12]
 800797e:	2b00      	cmp	r3, #0
 8007980:	bfbb      	ittet	lt
 8007982:	425b      	neglt	r3, r3
 8007984:	f042 0202 	orrlt.w	r2, r2, #2
 8007988:	9307      	strge	r3, [sp, #28]
 800798a:	9307      	strlt	r3, [sp, #28]
 800798c:	bfb8      	it	lt
 800798e:	9204      	strlt	r2, [sp, #16]
 8007990:	7823      	ldrb	r3, [r4, #0]
 8007992:	2b2e      	cmp	r3, #46	; 0x2e
 8007994:	d10c      	bne.n	80079b0 <_svfiprintf_r+0x130>
 8007996:	7863      	ldrb	r3, [r4, #1]
 8007998:	2b2a      	cmp	r3, #42	; 0x2a
 800799a:	d135      	bne.n	8007a08 <_svfiprintf_r+0x188>
 800799c:	9b03      	ldr	r3, [sp, #12]
 800799e:	1d1a      	adds	r2, r3, #4
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	9203      	str	r2, [sp, #12]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	bfb8      	it	lt
 80079a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80079ac:	3402      	adds	r4, #2
 80079ae:	9305      	str	r3, [sp, #20]
 80079b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007a7c <_svfiprintf_r+0x1fc>
 80079b4:	7821      	ldrb	r1, [r4, #0]
 80079b6:	2203      	movs	r2, #3
 80079b8:	4650      	mov	r0, sl
 80079ba:	f7f8 fc21 	bl	8000200 <memchr>
 80079be:	b140      	cbz	r0, 80079d2 <_svfiprintf_r+0x152>
 80079c0:	2340      	movs	r3, #64	; 0x40
 80079c2:	eba0 000a 	sub.w	r0, r0, sl
 80079c6:	fa03 f000 	lsl.w	r0, r3, r0
 80079ca:	9b04      	ldr	r3, [sp, #16]
 80079cc:	4303      	orrs	r3, r0
 80079ce:	3401      	adds	r4, #1
 80079d0:	9304      	str	r3, [sp, #16]
 80079d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079d6:	4826      	ldr	r0, [pc, #152]	; (8007a70 <_svfiprintf_r+0x1f0>)
 80079d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079dc:	2206      	movs	r2, #6
 80079de:	f7f8 fc0f 	bl	8000200 <memchr>
 80079e2:	2800      	cmp	r0, #0
 80079e4:	d038      	beq.n	8007a58 <_svfiprintf_r+0x1d8>
 80079e6:	4b23      	ldr	r3, [pc, #140]	; (8007a74 <_svfiprintf_r+0x1f4>)
 80079e8:	bb1b      	cbnz	r3, 8007a32 <_svfiprintf_r+0x1b2>
 80079ea:	9b03      	ldr	r3, [sp, #12]
 80079ec:	3307      	adds	r3, #7
 80079ee:	f023 0307 	bic.w	r3, r3, #7
 80079f2:	3308      	adds	r3, #8
 80079f4:	9303      	str	r3, [sp, #12]
 80079f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079f8:	4433      	add	r3, r6
 80079fa:	9309      	str	r3, [sp, #36]	; 0x24
 80079fc:	e767      	b.n	80078ce <_svfiprintf_r+0x4e>
 80079fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a02:	460c      	mov	r4, r1
 8007a04:	2001      	movs	r0, #1
 8007a06:	e7a5      	b.n	8007954 <_svfiprintf_r+0xd4>
 8007a08:	2300      	movs	r3, #0
 8007a0a:	3401      	adds	r4, #1
 8007a0c:	9305      	str	r3, [sp, #20]
 8007a0e:	4619      	mov	r1, r3
 8007a10:	f04f 0c0a 	mov.w	ip, #10
 8007a14:	4620      	mov	r0, r4
 8007a16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a1a:	3a30      	subs	r2, #48	; 0x30
 8007a1c:	2a09      	cmp	r2, #9
 8007a1e:	d903      	bls.n	8007a28 <_svfiprintf_r+0x1a8>
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d0c5      	beq.n	80079b0 <_svfiprintf_r+0x130>
 8007a24:	9105      	str	r1, [sp, #20]
 8007a26:	e7c3      	b.n	80079b0 <_svfiprintf_r+0x130>
 8007a28:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a2c:	4604      	mov	r4, r0
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e7f0      	b.n	8007a14 <_svfiprintf_r+0x194>
 8007a32:	ab03      	add	r3, sp, #12
 8007a34:	9300      	str	r3, [sp, #0]
 8007a36:	462a      	mov	r2, r5
 8007a38:	4b0f      	ldr	r3, [pc, #60]	; (8007a78 <_svfiprintf_r+0x1f8>)
 8007a3a:	a904      	add	r1, sp, #16
 8007a3c:	4638      	mov	r0, r7
 8007a3e:	f3af 8000 	nop.w
 8007a42:	1c42      	adds	r2, r0, #1
 8007a44:	4606      	mov	r6, r0
 8007a46:	d1d6      	bne.n	80079f6 <_svfiprintf_r+0x176>
 8007a48:	89ab      	ldrh	r3, [r5, #12]
 8007a4a:	065b      	lsls	r3, r3, #25
 8007a4c:	f53f af2c 	bmi.w	80078a8 <_svfiprintf_r+0x28>
 8007a50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a52:	b01d      	add	sp, #116	; 0x74
 8007a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a58:	ab03      	add	r3, sp, #12
 8007a5a:	9300      	str	r3, [sp, #0]
 8007a5c:	462a      	mov	r2, r5
 8007a5e:	4b06      	ldr	r3, [pc, #24]	; (8007a78 <_svfiprintf_r+0x1f8>)
 8007a60:	a904      	add	r1, sp, #16
 8007a62:	4638      	mov	r0, r7
 8007a64:	f000 f87a 	bl	8007b5c <_printf_i>
 8007a68:	e7eb      	b.n	8007a42 <_svfiprintf_r+0x1c2>
 8007a6a:	bf00      	nop
 8007a6c:	080083f8 	.word	0x080083f8
 8007a70:	08008402 	.word	0x08008402
 8007a74:	00000000 	.word	0x00000000
 8007a78:	080077c9 	.word	0x080077c9
 8007a7c:	080083fe 	.word	0x080083fe

08007a80 <_printf_common>:
 8007a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a84:	4616      	mov	r6, r2
 8007a86:	4699      	mov	r9, r3
 8007a88:	688a      	ldr	r2, [r1, #8]
 8007a8a:	690b      	ldr	r3, [r1, #16]
 8007a8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a90:	4293      	cmp	r3, r2
 8007a92:	bfb8      	it	lt
 8007a94:	4613      	movlt	r3, r2
 8007a96:	6033      	str	r3, [r6, #0]
 8007a98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a9c:	4607      	mov	r7, r0
 8007a9e:	460c      	mov	r4, r1
 8007aa0:	b10a      	cbz	r2, 8007aa6 <_printf_common+0x26>
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	6033      	str	r3, [r6, #0]
 8007aa6:	6823      	ldr	r3, [r4, #0]
 8007aa8:	0699      	lsls	r1, r3, #26
 8007aaa:	bf42      	ittt	mi
 8007aac:	6833      	ldrmi	r3, [r6, #0]
 8007aae:	3302      	addmi	r3, #2
 8007ab0:	6033      	strmi	r3, [r6, #0]
 8007ab2:	6825      	ldr	r5, [r4, #0]
 8007ab4:	f015 0506 	ands.w	r5, r5, #6
 8007ab8:	d106      	bne.n	8007ac8 <_printf_common+0x48>
 8007aba:	f104 0a19 	add.w	sl, r4, #25
 8007abe:	68e3      	ldr	r3, [r4, #12]
 8007ac0:	6832      	ldr	r2, [r6, #0]
 8007ac2:	1a9b      	subs	r3, r3, r2
 8007ac4:	42ab      	cmp	r3, r5
 8007ac6:	dc26      	bgt.n	8007b16 <_printf_common+0x96>
 8007ac8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007acc:	1e13      	subs	r3, r2, #0
 8007ace:	6822      	ldr	r2, [r4, #0]
 8007ad0:	bf18      	it	ne
 8007ad2:	2301      	movne	r3, #1
 8007ad4:	0692      	lsls	r2, r2, #26
 8007ad6:	d42b      	bmi.n	8007b30 <_printf_common+0xb0>
 8007ad8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007adc:	4649      	mov	r1, r9
 8007ade:	4638      	mov	r0, r7
 8007ae0:	47c0      	blx	r8
 8007ae2:	3001      	adds	r0, #1
 8007ae4:	d01e      	beq.n	8007b24 <_printf_common+0xa4>
 8007ae6:	6823      	ldr	r3, [r4, #0]
 8007ae8:	68e5      	ldr	r5, [r4, #12]
 8007aea:	6832      	ldr	r2, [r6, #0]
 8007aec:	f003 0306 	and.w	r3, r3, #6
 8007af0:	2b04      	cmp	r3, #4
 8007af2:	bf08      	it	eq
 8007af4:	1aad      	subeq	r5, r5, r2
 8007af6:	68a3      	ldr	r3, [r4, #8]
 8007af8:	6922      	ldr	r2, [r4, #16]
 8007afa:	bf0c      	ite	eq
 8007afc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b00:	2500      	movne	r5, #0
 8007b02:	4293      	cmp	r3, r2
 8007b04:	bfc4      	itt	gt
 8007b06:	1a9b      	subgt	r3, r3, r2
 8007b08:	18ed      	addgt	r5, r5, r3
 8007b0a:	2600      	movs	r6, #0
 8007b0c:	341a      	adds	r4, #26
 8007b0e:	42b5      	cmp	r5, r6
 8007b10:	d11a      	bne.n	8007b48 <_printf_common+0xc8>
 8007b12:	2000      	movs	r0, #0
 8007b14:	e008      	b.n	8007b28 <_printf_common+0xa8>
 8007b16:	2301      	movs	r3, #1
 8007b18:	4652      	mov	r2, sl
 8007b1a:	4649      	mov	r1, r9
 8007b1c:	4638      	mov	r0, r7
 8007b1e:	47c0      	blx	r8
 8007b20:	3001      	adds	r0, #1
 8007b22:	d103      	bne.n	8007b2c <_printf_common+0xac>
 8007b24:	f04f 30ff 	mov.w	r0, #4294967295
 8007b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b2c:	3501      	adds	r5, #1
 8007b2e:	e7c6      	b.n	8007abe <_printf_common+0x3e>
 8007b30:	18e1      	adds	r1, r4, r3
 8007b32:	1c5a      	adds	r2, r3, #1
 8007b34:	2030      	movs	r0, #48	; 0x30
 8007b36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b3a:	4422      	add	r2, r4
 8007b3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b44:	3302      	adds	r3, #2
 8007b46:	e7c7      	b.n	8007ad8 <_printf_common+0x58>
 8007b48:	2301      	movs	r3, #1
 8007b4a:	4622      	mov	r2, r4
 8007b4c:	4649      	mov	r1, r9
 8007b4e:	4638      	mov	r0, r7
 8007b50:	47c0      	blx	r8
 8007b52:	3001      	adds	r0, #1
 8007b54:	d0e6      	beq.n	8007b24 <_printf_common+0xa4>
 8007b56:	3601      	adds	r6, #1
 8007b58:	e7d9      	b.n	8007b0e <_printf_common+0x8e>
	...

08007b5c <_printf_i>:
 8007b5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b60:	460c      	mov	r4, r1
 8007b62:	4691      	mov	r9, r2
 8007b64:	7e27      	ldrb	r7, [r4, #24]
 8007b66:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007b68:	2f78      	cmp	r7, #120	; 0x78
 8007b6a:	4680      	mov	r8, r0
 8007b6c:	469a      	mov	sl, r3
 8007b6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b72:	d807      	bhi.n	8007b84 <_printf_i+0x28>
 8007b74:	2f62      	cmp	r7, #98	; 0x62
 8007b76:	d80a      	bhi.n	8007b8e <_printf_i+0x32>
 8007b78:	2f00      	cmp	r7, #0
 8007b7a:	f000 80d8 	beq.w	8007d2e <_printf_i+0x1d2>
 8007b7e:	2f58      	cmp	r7, #88	; 0x58
 8007b80:	f000 80a3 	beq.w	8007cca <_printf_i+0x16e>
 8007b84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b8c:	e03a      	b.n	8007c04 <_printf_i+0xa8>
 8007b8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b92:	2b15      	cmp	r3, #21
 8007b94:	d8f6      	bhi.n	8007b84 <_printf_i+0x28>
 8007b96:	a001      	add	r0, pc, #4	; (adr r0, 8007b9c <_printf_i+0x40>)
 8007b98:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007b9c:	08007bf5 	.word	0x08007bf5
 8007ba0:	08007c09 	.word	0x08007c09
 8007ba4:	08007b85 	.word	0x08007b85
 8007ba8:	08007b85 	.word	0x08007b85
 8007bac:	08007b85 	.word	0x08007b85
 8007bb0:	08007b85 	.word	0x08007b85
 8007bb4:	08007c09 	.word	0x08007c09
 8007bb8:	08007b85 	.word	0x08007b85
 8007bbc:	08007b85 	.word	0x08007b85
 8007bc0:	08007b85 	.word	0x08007b85
 8007bc4:	08007b85 	.word	0x08007b85
 8007bc8:	08007d15 	.word	0x08007d15
 8007bcc:	08007c39 	.word	0x08007c39
 8007bd0:	08007cf7 	.word	0x08007cf7
 8007bd4:	08007b85 	.word	0x08007b85
 8007bd8:	08007b85 	.word	0x08007b85
 8007bdc:	08007d37 	.word	0x08007d37
 8007be0:	08007b85 	.word	0x08007b85
 8007be4:	08007c39 	.word	0x08007c39
 8007be8:	08007b85 	.word	0x08007b85
 8007bec:	08007b85 	.word	0x08007b85
 8007bf0:	08007cff 	.word	0x08007cff
 8007bf4:	680b      	ldr	r3, [r1, #0]
 8007bf6:	1d1a      	adds	r2, r3, #4
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	600a      	str	r2, [r1, #0]
 8007bfc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007c00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c04:	2301      	movs	r3, #1
 8007c06:	e0a3      	b.n	8007d50 <_printf_i+0x1f4>
 8007c08:	6825      	ldr	r5, [r4, #0]
 8007c0a:	6808      	ldr	r0, [r1, #0]
 8007c0c:	062e      	lsls	r6, r5, #24
 8007c0e:	f100 0304 	add.w	r3, r0, #4
 8007c12:	d50a      	bpl.n	8007c2a <_printf_i+0xce>
 8007c14:	6805      	ldr	r5, [r0, #0]
 8007c16:	600b      	str	r3, [r1, #0]
 8007c18:	2d00      	cmp	r5, #0
 8007c1a:	da03      	bge.n	8007c24 <_printf_i+0xc8>
 8007c1c:	232d      	movs	r3, #45	; 0x2d
 8007c1e:	426d      	negs	r5, r5
 8007c20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c24:	485e      	ldr	r0, [pc, #376]	; (8007da0 <_printf_i+0x244>)
 8007c26:	230a      	movs	r3, #10
 8007c28:	e019      	b.n	8007c5e <_printf_i+0x102>
 8007c2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007c2e:	6805      	ldr	r5, [r0, #0]
 8007c30:	600b      	str	r3, [r1, #0]
 8007c32:	bf18      	it	ne
 8007c34:	b22d      	sxthne	r5, r5
 8007c36:	e7ef      	b.n	8007c18 <_printf_i+0xbc>
 8007c38:	680b      	ldr	r3, [r1, #0]
 8007c3a:	6825      	ldr	r5, [r4, #0]
 8007c3c:	1d18      	adds	r0, r3, #4
 8007c3e:	6008      	str	r0, [r1, #0]
 8007c40:	0628      	lsls	r0, r5, #24
 8007c42:	d501      	bpl.n	8007c48 <_printf_i+0xec>
 8007c44:	681d      	ldr	r5, [r3, #0]
 8007c46:	e002      	b.n	8007c4e <_printf_i+0xf2>
 8007c48:	0669      	lsls	r1, r5, #25
 8007c4a:	d5fb      	bpl.n	8007c44 <_printf_i+0xe8>
 8007c4c:	881d      	ldrh	r5, [r3, #0]
 8007c4e:	4854      	ldr	r0, [pc, #336]	; (8007da0 <_printf_i+0x244>)
 8007c50:	2f6f      	cmp	r7, #111	; 0x6f
 8007c52:	bf0c      	ite	eq
 8007c54:	2308      	moveq	r3, #8
 8007c56:	230a      	movne	r3, #10
 8007c58:	2100      	movs	r1, #0
 8007c5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c5e:	6866      	ldr	r6, [r4, #4]
 8007c60:	60a6      	str	r6, [r4, #8]
 8007c62:	2e00      	cmp	r6, #0
 8007c64:	bfa2      	ittt	ge
 8007c66:	6821      	ldrge	r1, [r4, #0]
 8007c68:	f021 0104 	bicge.w	r1, r1, #4
 8007c6c:	6021      	strge	r1, [r4, #0]
 8007c6e:	b90d      	cbnz	r5, 8007c74 <_printf_i+0x118>
 8007c70:	2e00      	cmp	r6, #0
 8007c72:	d04d      	beq.n	8007d10 <_printf_i+0x1b4>
 8007c74:	4616      	mov	r6, r2
 8007c76:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c7a:	fb03 5711 	mls	r7, r3, r1, r5
 8007c7e:	5dc7      	ldrb	r7, [r0, r7]
 8007c80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c84:	462f      	mov	r7, r5
 8007c86:	42bb      	cmp	r3, r7
 8007c88:	460d      	mov	r5, r1
 8007c8a:	d9f4      	bls.n	8007c76 <_printf_i+0x11a>
 8007c8c:	2b08      	cmp	r3, #8
 8007c8e:	d10b      	bne.n	8007ca8 <_printf_i+0x14c>
 8007c90:	6823      	ldr	r3, [r4, #0]
 8007c92:	07df      	lsls	r7, r3, #31
 8007c94:	d508      	bpl.n	8007ca8 <_printf_i+0x14c>
 8007c96:	6923      	ldr	r3, [r4, #16]
 8007c98:	6861      	ldr	r1, [r4, #4]
 8007c9a:	4299      	cmp	r1, r3
 8007c9c:	bfde      	ittt	le
 8007c9e:	2330      	movle	r3, #48	; 0x30
 8007ca0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ca4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ca8:	1b92      	subs	r2, r2, r6
 8007caa:	6122      	str	r2, [r4, #16]
 8007cac:	f8cd a000 	str.w	sl, [sp]
 8007cb0:	464b      	mov	r3, r9
 8007cb2:	aa03      	add	r2, sp, #12
 8007cb4:	4621      	mov	r1, r4
 8007cb6:	4640      	mov	r0, r8
 8007cb8:	f7ff fee2 	bl	8007a80 <_printf_common>
 8007cbc:	3001      	adds	r0, #1
 8007cbe:	d14c      	bne.n	8007d5a <_printf_i+0x1fe>
 8007cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc4:	b004      	add	sp, #16
 8007cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cca:	4835      	ldr	r0, [pc, #212]	; (8007da0 <_printf_i+0x244>)
 8007ccc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007cd0:	6823      	ldr	r3, [r4, #0]
 8007cd2:	680e      	ldr	r6, [r1, #0]
 8007cd4:	061f      	lsls	r7, r3, #24
 8007cd6:	f856 5b04 	ldr.w	r5, [r6], #4
 8007cda:	600e      	str	r6, [r1, #0]
 8007cdc:	d514      	bpl.n	8007d08 <_printf_i+0x1ac>
 8007cde:	07d9      	lsls	r1, r3, #31
 8007ce0:	bf44      	itt	mi
 8007ce2:	f043 0320 	orrmi.w	r3, r3, #32
 8007ce6:	6023      	strmi	r3, [r4, #0]
 8007ce8:	b91d      	cbnz	r5, 8007cf2 <_printf_i+0x196>
 8007cea:	6823      	ldr	r3, [r4, #0]
 8007cec:	f023 0320 	bic.w	r3, r3, #32
 8007cf0:	6023      	str	r3, [r4, #0]
 8007cf2:	2310      	movs	r3, #16
 8007cf4:	e7b0      	b.n	8007c58 <_printf_i+0xfc>
 8007cf6:	6823      	ldr	r3, [r4, #0]
 8007cf8:	f043 0320 	orr.w	r3, r3, #32
 8007cfc:	6023      	str	r3, [r4, #0]
 8007cfe:	2378      	movs	r3, #120	; 0x78
 8007d00:	4828      	ldr	r0, [pc, #160]	; (8007da4 <_printf_i+0x248>)
 8007d02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d06:	e7e3      	b.n	8007cd0 <_printf_i+0x174>
 8007d08:	065e      	lsls	r6, r3, #25
 8007d0a:	bf48      	it	mi
 8007d0c:	b2ad      	uxthmi	r5, r5
 8007d0e:	e7e6      	b.n	8007cde <_printf_i+0x182>
 8007d10:	4616      	mov	r6, r2
 8007d12:	e7bb      	b.n	8007c8c <_printf_i+0x130>
 8007d14:	680b      	ldr	r3, [r1, #0]
 8007d16:	6826      	ldr	r6, [r4, #0]
 8007d18:	6960      	ldr	r0, [r4, #20]
 8007d1a:	1d1d      	adds	r5, r3, #4
 8007d1c:	600d      	str	r5, [r1, #0]
 8007d1e:	0635      	lsls	r5, r6, #24
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	d501      	bpl.n	8007d28 <_printf_i+0x1cc>
 8007d24:	6018      	str	r0, [r3, #0]
 8007d26:	e002      	b.n	8007d2e <_printf_i+0x1d2>
 8007d28:	0671      	lsls	r1, r6, #25
 8007d2a:	d5fb      	bpl.n	8007d24 <_printf_i+0x1c8>
 8007d2c:	8018      	strh	r0, [r3, #0]
 8007d2e:	2300      	movs	r3, #0
 8007d30:	6123      	str	r3, [r4, #16]
 8007d32:	4616      	mov	r6, r2
 8007d34:	e7ba      	b.n	8007cac <_printf_i+0x150>
 8007d36:	680b      	ldr	r3, [r1, #0]
 8007d38:	1d1a      	adds	r2, r3, #4
 8007d3a:	600a      	str	r2, [r1, #0]
 8007d3c:	681e      	ldr	r6, [r3, #0]
 8007d3e:	6862      	ldr	r2, [r4, #4]
 8007d40:	2100      	movs	r1, #0
 8007d42:	4630      	mov	r0, r6
 8007d44:	f7f8 fa5c 	bl	8000200 <memchr>
 8007d48:	b108      	cbz	r0, 8007d4e <_printf_i+0x1f2>
 8007d4a:	1b80      	subs	r0, r0, r6
 8007d4c:	6060      	str	r0, [r4, #4]
 8007d4e:	6863      	ldr	r3, [r4, #4]
 8007d50:	6123      	str	r3, [r4, #16]
 8007d52:	2300      	movs	r3, #0
 8007d54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d58:	e7a8      	b.n	8007cac <_printf_i+0x150>
 8007d5a:	6923      	ldr	r3, [r4, #16]
 8007d5c:	4632      	mov	r2, r6
 8007d5e:	4649      	mov	r1, r9
 8007d60:	4640      	mov	r0, r8
 8007d62:	47d0      	blx	sl
 8007d64:	3001      	adds	r0, #1
 8007d66:	d0ab      	beq.n	8007cc0 <_printf_i+0x164>
 8007d68:	6823      	ldr	r3, [r4, #0]
 8007d6a:	079b      	lsls	r3, r3, #30
 8007d6c:	d413      	bmi.n	8007d96 <_printf_i+0x23a>
 8007d6e:	68e0      	ldr	r0, [r4, #12]
 8007d70:	9b03      	ldr	r3, [sp, #12]
 8007d72:	4298      	cmp	r0, r3
 8007d74:	bfb8      	it	lt
 8007d76:	4618      	movlt	r0, r3
 8007d78:	e7a4      	b.n	8007cc4 <_printf_i+0x168>
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	4632      	mov	r2, r6
 8007d7e:	4649      	mov	r1, r9
 8007d80:	4640      	mov	r0, r8
 8007d82:	47d0      	blx	sl
 8007d84:	3001      	adds	r0, #1
 8007d86:	d09b      	beq.n	8007cc0 <_printf_i+0x164>
 8007d88:	3501      	adds	r5, #1
 8007d8a:	68e3      	ldr	r3, [r4, #12]
 8007d8c:	9903      	ldr	r1, [sp, #12]
 8007d8e:	1a5b      	subs	r3, r3, r1
 8007d90:	42ab      	cmp	r3, r5
 8007d92:	dcf2      	bgt.n	8007d7a <_printf_i+0x21e>
 8007d94:	e7eb      	b.n	8007d6e <_printf_i+0x212>
 8007d96:	2500      	movs	r5, #0
 8007d98:	f104 0619 	add.w	r6, r4, #25
 8007d9c:	e7f5      	b.n	8007d8a <_printf_i+0x22e>
 8007d9e:	bf00      	nop
 8007da0:	08008409 	.word	0x08008409
 8007da4:	0800841a 	.word	0x0800841a

08007da8 <memmove>:
 8007da8:	4288      	cmp	r0, r1
 8007daa:	b510      	push	{r4, lr}
 8007dac:	eb01 0402 	add.w	r4, r1, r2
 8007db0:	d902      	bls.n	8007db8 <memmove+0x10>
 8007db2:	4284      	cmp	r4, r0
 8007db4:	4623      	mov	r3, r4
 8007db6:	d807      	bhi.n	8007dc8 <memmove+0x20>
 8007db8:	1e43      	subs	r3, r0, #1
 8007dba:	42a1      	cmp	r1, r4
 8007dbc:	d008      	beq.n	8007dd0 <memmove+0x28>
 8007dbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007dc6:	e7f8      	b.n	8007dba <memmove+0x12>
 8007dc8:	4402      	add	r2, r0
 8007dca:	4601      	mov	r1, r0
 8007dcc:	428a      	cmp	r2, r1
 8007dce:	d100      	bne.n	8007dd2 <memmove+0x2a>
 8007dd0:	bd10      	pop	{r4, pc}
 8007dd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007dd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007dda:	e7f7      	b.n	8007dcc <memmove+0x24>

08007ddc <_free_r>:
 8007ddc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007dde:	2900      	cmp	r1, #0
 8007de0:	d048      	beq.n	8007e74 <_free_r+0x98>
 8007de2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007de6:	9001      	str	r0, [sp, #4]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	f1a1 0404 	sub.w	r4, r1, #4
 8007dee:	bfb8      	it	lt
 8007df0:	18e4      	addlt	r4, r4, r3
 8007df2:	f000 f8d3 	bl	8007f9c <__malloc_lock>
 8007df6:	4a20      	ldr	r2, [pc, #128]	; (8007e78 <_free_r+0x9c>)
 8007df8:	9801      	ldr	r0, [sp, #4]
 8007dfa:	6813      	ldr	r3, [r2, #0]
 8007dfc:	4615      	mov	r5, r2
 8007dfe:	b933      	cbnz	r3, 8007e0e <_free_r+0x32>
 8007e00:	6063      	str	r3, [r4, #4]
 8007e02:	6014      	str	r4, [r2, #0]
 8007e04:	b003      	add	sp, #12
 8007e06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e0a:	f000 b8cd 	b.w	8007fa8 <__malloc_unlock>
 8007e0e:	42a3      	cmp	r3, r4
 8007e10:	d90b      	bls.n	8007e2a <_free_r+0x4e>
 8007e12:	6821      	ldr	r1, [r4, #0]
 8007e14:	1862      	adds	r2, r4, r1
 8007e16:	4293      	cmp	r3, r2
 8007e18:	bf04      	itt	eq
 8007e1a:	681a      	ldreq	r2, [r3, #0]
 8007e1c:	685b      	ldreq	r3, [r3, #4]
 8007e1e:	6063      	str	r3, [r4, #4]
 8007e20:	bf04      	itt	eq
 8007e22:	1852      	addeq	r2, r2, r1
 8007e24:	6022      	streq	r2, [r4, #0]
 8007e26:	602c      	str	r4, [r5, #0]
 8007e28:	e7ec      	b.n	8007e04 <_free_r+0x28>
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	b10b      	cbz	r3, 8007e34 <_free_r+0x58>
 8007e30:	42a3      	cmp	r3, r4
 8007e32:	d9fa      	bls.n	8007e2a <_free_r+0x4e>
 8007e34:	6811      	ldr	r1, [r2, #0]
 8007e36:	1855      	adds	r5, r2, r1
 8007e38:	42a5      	cmp	r5, r4
 8007e3a:	d10b      	bne.n	8007e54 <_free_r+0x78>
 8007e3c:	6824      	ldr	r4, [r4, #0]
 8007e3e:	4421      	add	r1, r4
 8007e40:	1854      	adds	r4, r2, r1
 8007e42:	42a3      	cmp	r3, r4
 8007e44:	6011      	str	r1, [r2, #0]
 8007e46:	d1dd      	bne.n	8007e04 <_free_r+0x28>
 8007e48:	681c      	ldr	r4, [r3, #0]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	6053      	str	r3, [r2, #4]
 8007e4e:	4421      	add	r1, r4
 8007e50:	6011      	str	r1, [r2, #0]
 8007e52:	e7d7      	b.n	8007e04 <_free_r+0x28>
 8007e54:	d902      	bls.n	8007e5c <_free_r+0x80>
 8007e56:	230c      	movs	r3, #12
 8007e58:	6003      	str	r3, [r0, #0]
 8007e5a:	e7d3      	b.n	8007e04 <_free_r+0x28>
 8007e5c:	6825      	ldr	r5, [r4, #0]
 8007e5e:	1961      	adds	r1, r4, r5
 8007e60:	428b      	cmp	r3, r1
 8007e62:	bf04      	itt	eq
 8007e64:	6819      	ldreq	r1, [r3, #0]
 8007e66:	685b      	ldreq	r3, [r3, #4]
 8007e68:	6063      	str	r3, [r4, #4]
 8007e6a:	bf04      	itt	eq
 8007e6c:	1949      	addeq	r1, r1, r5
 8007e6e:	6021      	streq	r1, [r4, #0]
 8007e70:	6054      	str	r4, [r2, #4]
 8007e72:	e7c7      	b.n	8007e04 <_free_r+0x28>
 8007e74:	b003      	add	sp, #12
 8007e76:	bd30      	pop	{r4, r5, pc}
 8007e78:	20012e74 	.word	0x20012e74

08007e7c <_malloc_r>:
 8007e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e7e:	1ccd      	adds	r5, r1, #3
 8007e80:	f025 0503 	bic.w	r5, r5, #3
 8007e84:	3508      	adds	r5, #8
 8007e86:	2d0c      	cmp	r5, #12
 8007e88:	bf38      	it	cc
 8007e8a:	250c      	movcc	r5, #12
 8007e8c:	2d00      	cmp	r5, #0
 8007e8e:	4606      	mov	r6, r0
 8007e90:	db01      	blt.n	8007e96 <_malloc_r+0x1a>
 8007e92:	42a9      	cmp	r1, r5
 8007e94:	d903      	bls.n	8007e9e <_malloc_r+0x22>
 8007e96:	230c      	movs	r3, #12
 8007e98:	6033      	str	r3, [r6, #0]
 8007e9a:	2000      	movs	r0, #0
 8007e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e9e:	f000 f87d 	bl	8007f9c <__malloc_lock>
 8007ea2:	4921      	ldr	r1, [pc, #132]	; (8007f28 <_malloc_r+0xac>)
 8007ea4:	680a      	ldr	r2, [r1, #0]
 8007ea6:	4614      	mov	r4, r2
 8007ea8:	b99c      	cbnz	r4, 8007ed2 <_malloc_r+0x56>
 8007eaa:	4f20      	ldr	r7, [pc, #128]	; (8007f2c <_malloc_r+0xb0>)
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	b923      	cbnz	r3, 8007eba <_malloc_r+0x3e>
 8007eb0:	4621      	mov	r1, r4
 8007eb2:	4630      	mov	r0, r6
 8007eb4:	f000 f862 	bl	8007f7c <_sbrk_r>
 8007eb8:	6038      	str	r0, [r7, #0]
 8007eba:	4629      	mov	r1, r5
 8007ebc:	4630      	mov	r0, r6
 8007ebe:	f000 f85d 	bl	8007f7c <_sbrk_r>
 8007ec2:	1c43      	adds	r3, r0, #1
 8007ec4:	d123      	bne.n	8007f0e <_malloc_r+0x92>
 8007ec6:	230c      	movs	r3, #12
 8007ec8:	6033      	str	r3, [r6, #0]
 8007eca:	4630      	mov	r0, r6
 8007ecc:	f000 f86c 	bl	8007fa8 <__malloc_unlock>
 8007ed0:	e7e3      	b.n	8007e9a <_malloc_r+0x1e>
 8007ed2:	6823      	ldr	r3, [r4, #0]
 8007ed4:	1b5b      	subs	r3, r3, r5
 8007ed6:	d417      	bmi.n	8007f08 <_malloc_r+0x8c>
 8007ed8:	2b0b      	cmp	r3, #11
 8007eda:	d903      	bls.n	8007ee4 <_malloc_r+0x68>
 8007edc:	6023      	str	r3, [r4, #0]
 8007ede:	441c      	add	r4, r3
 8007ee0:	6025      	str	r5, [r4, #0]
 8007ee2:	e004      	b.n	8007eee <_malloc_r+0x72>
 8007ee4:	6863      	ldr	r3, [r4, #4]
 8007ee6:	42a2      	cmp	r2, r4
 8007ee8:	bf0c      	ite	eq
 8007eea:	600b      	streq	r3, [r1, #0]
 8007eec:	6053      	strne	r3, [r2, #4]
 8007eee:	4630      	mov	r0, r6
 8007ef0:	f000 f85a 	bl	8007fa8 <__malloc_unlock>
 8007ef4:	f104 000b 	add.w	r0, r4, #11
 8007ef8:	1d23      	adds	r3, r4, #4
 8007efa:	f020 0007 	bic.w	r0, r0, #7
 8007efe:	1ac2      	subs	r2, r0, r3
 8007f00:	d0cc      	beq.n	8007e9c <_malloc_r+0x20>
 8007f02:	1a1b      	subs	r3, r3, r0
 8007f04:	50a3      	str	r3, [r4, r2]
 8007f06:	e7c9      	b.n	8007e9c <_malloc_r+0x20>
 8007f08:	4622      	mov	r2, r4
 8007f0a:	6864      	ldr	r4, [r4, #4]
 8007f0c:	e7cc      	b.n	8007ea8 <_malloc_r+0x2c>
 8007f0e:	1cc4      	adds	r4, r0, #3
 8007f10:	f024 0403 	bic.w	r4, r4, #3
 8007f14:	42a0      	cmp	r0, r4
 8007f16:	d0e3      	beq.n	8007ee0 <_malloc_r+0x64>
 8007f18:	1a21      	subs	r1, r4, r0
 8007f1a:	4630      	mov	r0, r6
 8007f1c:	f000 f82e 	bl	8007f7c <_sbrk_r>
 8007f20:	3001      	adds	r0, #1
 8007f22:	d1dd      	bne.n	8007ee0 <_malloc_r+0x64>
 8007f24:	e7cf      	b.n	8007ec6 <_malloc_r+0x4a>
 8007f26:	bf00      	nop
 8007f28:	20012e74 	.word	0x20012e74
 8007f2c:	20012e78 	.word	0x20012e78

08007f30 <_realloc_r>:
 8007f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f32:	4607      	mov	r7, r0
 8007f34:	4614      	mov	r4, r2
 8007f36:	460e      	mov	r6, r1
 8007f38:	b921      	cbnz	r1, 8007f44 <_realloc_r+0x14>
 8007f3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007f3e:	4611      	mov	r1, r2
 8007f40:	f7ff bf9c 	b.w	8007e7c <_malloc_r>
 8007f44:	b922      	cbnz	r2, 8007f50 <_realloc_r+0x20>
 8007f46:	f7ff ff49 	bl	8007ddc <_free_r>
 8007f4a:	4625      	mov	r5, r4
 8007f4c:	4628      	mov	r0, r5
 8007f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f50:	f000 f830 	bl	8007fb4 <_malloc_usable_size_r>
 8007f54:	42a0      	cmp	r0, r4
 8007f56:	d20f      	bcs.n	8007f78 <_realloc_r+0x48>
 8007f58:	4621      	mov	r1, r4
 8007f5a:	4638      	mov	r0, r7
 8007f5c:	f7ff ff8e 	bl	8007e7c <_malloc_r>
 8007f60:	4605      	mov	r5, r0
 8007f62:	2800      	cmp	r0, #0
 8007f64:	d0f2      	beq.n	8007f4c <_realloc_r+0x1c>
 8007f66:	4631      	mov	r1, r6
 8007f68:	4622      	mov	r2, r4
 8007f6a:	f7ff fbf7 	bl	800775c <memcpy>
 8007f6e:	4631      	mov	r1, r6
 8007f70:	4638      	mov	r0, r7
 8007f72:	f7ff ff33 	bl	8007ddc <_free_r>
 8007f76:	e7e9      	b.n	8007f4c <_realloc_r+0x1c>
 8007f78:	4635      	mov	r5, r6
 8007f7a:	e7e7      	b.n	8007f4c <_realloc_r+0x1c>

08007f7c <_sbrk_r>:
 8007f7c:	b538      	push	{r3, r4, r5, lr}
 8007f7e:	4d06      	ldr	r5, [pc, #24]	; (8007f98 <_sbrk_r+0x1c>)
 8007f80:	2300      	movs	r3, #0
 8007f82:	4604      	mov	r4, r0
 8007f84:	4608      	mov	r0, r1
 8007f86:	602b      	str	r3, [r5, #0]
 8007f88:	f7f9 f9dc 	bl	8001344 <_sbrk>
 8007f8c:	1c43      	adds	r3, r0, #1
 8007f8e:	d102      	bne.n	8007f96 <_sbrk_r+0x1a>
 8007f90:	682b      	ldr	r3, [r5, #0]
 8007f92:	b103      	cbz	r3, 8007f96 <_sbrk_r+0x1a>
 8007f94:	6023      	str	r3, [r4, #0]
 8007f96:	bd38      	pop	{r3, r4, r5, pc}
 8007f98:	20012f9c 	.word	0x20012f9c

08007f9c <__malloc_lock>:
 8007f9c:	4801      	ldr	r0, [pc, #4]	; (8007fa4 <__malloc_lock+0x8>)
 8007f9e:	f000 b811 	b.w	8007fc4 <__retarget_lock_acquire_recursive>
 8007fa2:	bf00      	nop
 8007fa4:	20012fa4 	.word	0x20012fa4

08007fa8 <__malloc_unlock>:
 8007fa8:	4801      	ldr	r0, [pc, #4]	; (8007fb0 <__malloc_unlock+0x8>)
 8007faa:	f000 b80c 	b.w	8007fc6 <__retarget_lock_release_recursive>
 8007fae:	bf00      	nop
 8007fb0:	20012fa4 	.word	0x20012fa4

08007fb4 <_malloc_usable_size_r>:
 8007fb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fb8:	1f18      	subs	r0, r3, #4
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	bfbc      	itt	lt
 8007fbe:	580b      	ldrlt	r3, [r1, r0]
 8007fc0:	18c0      	addlt	r0, r0, r3
 8007fc2:	4770      	bx	lr

08007fc4 <__retarget_lock_acquire_recursive>:
 8007fc4:	4770      	bx	lr

08007fc6 <__retarget_lock_release_recursive>:
 8007fc6:	4770      	bx	lr

08007fc8 <_init>:
 8007fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fca:	bf00      	nop
 8007fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fce:	bc08      	pop	{r3}
 8007fd0:	469e      	mov	lr, r3
 8007fd2:	4770      	bx	lr

08007fd4 <_fini>:
 8007fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fd6:	bf00      	nop
 8007fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fda:	bc08      	pop	{r3}
 8007fdc:	469e      	mov	lr, r3
 8007fde:	4770      	bx	lr
