
006LED_Btn_ISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ab8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08007c48  08007c48  00017c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e14  08007e14  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08007e14  08007e14  00017e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e1c  08007e1c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e1c  08007e1c  00017e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e20  08007e20  00017e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08007e24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          000144a0  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200144bc  200144bc  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a163  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000345d  00000000  00000000  0003a1af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001358  00000000  00000000  0003d610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011d0  00000000  00000000  0003e968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023db8  00000000  00000000  0003fb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001586a  00000000  00000000  000638f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d828a  00000000  00000000  0007915a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001513e4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000050b0  00000000  00000000  00151438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007c30 	.word	0x08007c30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08007c30 	.word	0x08007c30

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20014414 	.word	0x20014414

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96e 	b.w	8000558 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468c      	mov	ip, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	f040 8083 	bne.w	80003aa <__udivmoddi4+0x116>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4617      	mov	r7, r2
 80002a8:	d947      	bls.n	800033a <__udivmoddi4+0xa6>
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	b142      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	f1c2 0020 	rsb	r0, r2, #32
 80002b4:	fa24 f000 	lsr.w	r0, r4, r0
 80002b8:	4091      	lsls	r1, r2
 80002ba:	4097      	lsls	r7, r2
 80002bc:	ea40 0c01 	orr.w	ip, r0, r1
 80002c0:	4094      	lsls	r4, r2
 80002c2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fbbc f6f8 	udiv	r6, ip, r8
 80002cc:	fa1f fe87 	uxth.w	lr, r7
 80002d0:	fb08 c116 	mls	r1, r8, r6, ip
 80002d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d8:	fb06 f10e 	mul.w	r1, r6, lr
 80002dc:	4299      	cmp	r1, r3
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x60>
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002e6:	f080 8119 	bcs.w	800051c <__udivmoddi4+0x288>
 80002ea:	4299      	cmp	r1, r3
 80002ec:	f240 8116 	bls.w	800051c <__udivmoddi4+0x288>
 80002f0:	3e02      	subs	r6, #2
 80002f2:	443b      	add	r3, r7
 80002f4:	1a5b      	subs	r3, r3, r1
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000300:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000304:	fb00 fe0e 	mul.w	lr, r0, lr
 8000308:	45a6      	cmp	lr, r4
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x8c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	f080 8105 	bcs.w	8000520 <__udivmoddi4+0x28c>
 8000316:	45a6      	cmp	lr, r4
 8000318:	f240 8102 	bls.w	8000520 <__udivmoddi4+0x28c>
 800031c:	3802      	subs	r0, #2
 800031e:	443c      	add	r4, r7
 8000320:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000324:	eba4 040e 	sub.w	r4, r4, lr
 8000328:	2600      	movs	r6, #0
 800032a:	b11d      	cbz	r5, 8000334 <__udivmoddi4+0xa0>
 800032c:	40d4      	lsrs	r4, r2
 800032e:	2300      	movs	r3, #0
 8000330:	e9c5 4300 	strd	r4, r3, [r5]
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xaa>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f282 	clz	r2, r2
 8000342:	2a00      	cmp	r2, #0
 8000344:	d150      	bne.n	80003e8 <__udivmoddi4+0x154>
 8000346:	1bcb      	subs	r3, r1, r7
 8000348:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034c:	fa1f f887 	uxth.w	r8, r7
 8000350:	2601      	movs	r6, #1
 8000352:	fbb3 fcfe 	udiv	ip, r3, lr
 8000356:	0c21      	lsrs	r1, r4, #16
 8000358:	fb0e 331c 	mls	r3, lr, ip, r3
 800035c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000360:	fb08 f30c 	mul.w	r3, r8, ip
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xe4>
 8000368:	1879      	adds	r1, r7, r1
 800036a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0xe2>
 8000370:	428b      	cmp	r3, r1
 8000372:	f200 80e9 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 8000376:	4684      	mov	ip, r0
 8000378:	1ac9      	subs	r1, r1, r3
 800037a:	b2a3      	uxth	r3, r4
 800037c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000380:	fb0e 1110 	mls	r1, lr, r0, r1
 8000384:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000388:	fb08 f800 	mul.w	r8, r8, r0
 800038c:	45a0      	cmp	r8, r4
 800038e:	d907      	bls.n	80003a0 <__udivmoddi4+0x10c>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x10a>
 8000398:	45a0      	cmp	r8, r4
 800039a:	f200 80d9 	bhi.w	8000550 <__udivmoddi4+0x2bc>
 800039e:	4618      	mov	r0, r3
 80003a0:	eba4 0408 	sub.w	r4, r4, r8
 80003a4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a8:	e7bf      	b.n	800032a <__udivmoddi4+0x96>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0x12e>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80b1 	beq.w	8000516 <__udivmoddi4+0x282>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x1cc>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0x140>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80b8 	bhi.w	8000544 <__udivmoddi4+0x2b0>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0103 	sbc.w	r1, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	468c      	mov	ip, r1
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0a8      	beq.n	8000334 <__udivmoddi4+0xa0>
 80003e2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003e6:	e7a5      	b.n	8000334 <__udivmoddi4+0xa0>
 80003e8:	f1c2 0320 	rsb	r3, r2, #32
 80003ec:	fa20 f603 	lsr.w	r6, r0, r3
 80003f0:	4097      	lsls	r7, r2
 80003f2:	fa01 f002 	lsl.w	r0, r1, r2
 80003f6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fa:	40d9      	lsrs	r1, r3
 80003fc:	4330      	orrs	r0, r6
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	fbb1 f6fe 	udiv	r6, r1, lr
 8000404:	fa1f f887 	uxth.w	r8, r7
 8000408:	fb0e 1116 	mls	r1, lr, r6, r1
 800040c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000410:	fb06 f108 	mul.w	r1, r6, r8
 8000414:	4299      	cmp	r1, r3
 8000416:	fa04 f402 	lsl.w	r4, r4, r2
 800041a:	d909      	bls.n	8000430 <__udivmoddi4+0x19c>
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000422:	f080 808d 	bcs.w	8000540 <__udivmoddi4+0x2ac>
 8000426:	4299      	cmp	r1, r3
 8000428:	f240 808a 	bls.w	8000540 <__udivmoddi4+0x2ac>
 800042c:	3e02      	subs	r6, #2
 800042e:	443b      	add	r3, r7
 8000430:	1a5b      	subs	r3, r3, r1
 8000432:	b281      	uxth	r1, r0
 8000434:	fbb3 f0fe 	udiv	r0, r3, lr
 8000438:	fb0e 3310 	mls	r3, lr, r0, r3
 800043c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000440:	fb00 f308 	mul.w	r3, r0, r8
 8000444:	428b      	cmp	r3, r1
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x1c4>
 8000448:	1879      	adds	r1, r7, r1
 800044a:	f100 3cff 	add.w	ip, r0, #4294967295
 800044e:	d273      	bcs.n	8000538 <__udivmoddi4+0x2a4>
 8000450:	428b      	cmp	r3, r1
 8000452:	d971      	bls.n	8000538 <__udivmoddi4+0x2a4>
 8000454:	3802      	subs	r0, #2
 8000456:	4439      	add	r1, r7
 8000458:	1acb      	subs	r3, r1, r3
 800045a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800045e:	e778      	b.n	8000352 <__udivmoddi4+0xbe>
 8000460:	f1c6 0c20 	rsb	ip, r6, #32
 8000464:	fa03 f406 	lsl.w	r4, r3, r6
 8000468:	fa22 f30c 	lsr.w	r3, r2, ip
 800046c:	431c      	orrs	r4, r3
 800046e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800047a:	fa21 f10c 	lsr.w	r1, r1, ip
 800047e:	431f      	orrs	r7, r3
 8000480:	0c3b      	lsrs	r3, r7, #16
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fa1f f884 	uxth.w	r8, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000492:	fb09 fa08 	mul.w	sl, r9, r8
 8000496:	458a      	cmp	sl, r1
 8000498:	fa02 f206 	lsl.w	r2, r2, r6
 800049c:	fa00 f306 	lsl.w	r3, r0, r6
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x220>
 80004a2:	1861      	adds	r1, r4, r1
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	d248      	bcs.n	800053c <__udivmoddi4+0x2a8>
 80004aa:	458a      	cmp	sl, r1
 80004ac:	d946      	bls.n	800053c <__udivmoddi4+0x2a8>
 80004ae:	f1a9 0902 	sub.w	r9, r9, #2
 80004b2:	4421      	add	r1, r4
 80004b4:	eba1 010a 	sub.w	r1, r1, sl
 80004b8:	b2bf      	uxth	r7, r7
 80004ba:	fbb1 f0fe 	udiv	r0, r1, lr
 80004be:	fb0e 1110 	mls	r1, lr, r0, r1
 80004c2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004c6:	fb00 f808 	mul.w	r8, r0, r8
 80004ca:	45b8      	cmp	r8, r7
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x24a>
 80004ce:	19e7      	adds	r7, r4, r7
 80004d0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004d4:	d22e      	bcs.n	8000534 <__udivmoddi4+0x2a0>
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d92c      	bls.n	8000534 <__udivmoddi4+0x2a0>
 80004da:	3802      	subs	r0, #2
 80004dc:	4427      	add	r7, r4
 80004de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e2:	eba7 0708 	sub.w	r7, r7, r8
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	454f      	cmp	r7, r9
 80004ec:	46c6      	mov	lr, r8
 80004ee:	4649      	mov	r1, r9
 80004f0:	d31a      	bcc.n	8000528 <__udivmoddi4+0x294>
 80004f2:	d017      	beq.n	8000524 <__udivmoddi4+0x290>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x27a>
 80004f6:	ebb3 020e 	subs.w	r2, r3, lr
 80004fa:	eb67 0701 	sbc.w	r7, r7, r1
 80004fe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000502:	40f2      	lsrs	r2, r6
 8000504:	ea4c 0202 	orr.w	r2, ip, r2
 8000508:	40f7      	lsrs	r7, r6
 800050a:	e9c5 2700 	strd	r2, r7, [r5]
 800050e:	2600      	movs	r6, #0
 8000510:	4631      	mov	r1, r6
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	462e      	mov	r6, r5
 8000518:	4628      	mov	r0, r5
 800051a:	e70b      	b.n	8000334 <__udivmoddi4+0xa0>
 800051c:	4606      	mov	r6, r0
 800051e:	e6e9      	b.n	80002f4 <__udivmoddi4+0x60>
 8000520:	4618      	mov	r0, r3
 8000522:	e6fd      	b.n	8000320 <__udivmoddi4+0x8c>
 8000524:	4543      	cmp	r3, r8
 8000526:	d2e5      	bcs.n	80004f4 <__udivmoddi4+0x260>
 8000528:	ebb8 0e02 	subs.w	lr, r8, r2
 800052c:	eb69 0104 	sbc.w	r1, r9, r4
 8000530:	3801      	subs	r0, #1
 8000532:	e7df      	b.n	80004f4 <__udivmoddi4+0x260>
 8000534:	4608      	mov	r0, r1
 8000536:	e7d2      	b.n	80004de <__udivmoddi4+0x24a>
 8000538:	4660      	mov	r0, ip
 800053a:	e78d      	b.n	8000458 <__udivmoddi4+0x1c4>
 800053c:	4681      	mov	r9, r0
 800053e:	e7b9      	b.n	80004b4 <__udivmoddi4+0x220>
 8000540:	4666      	mov	r6, ip
 8000542:	e775      	b.n	8000430 <__udivmoddi4+0x19c>
 8000544:	4630      	mov	r0, r6
 8000546:	e74a      	b.n	80003de <__udivmoddi4+0x14a>
 8000548:	f1ac 0c02 	sub.w	ip, ip, #2
 800054c:	4439      	add	r1, r7
 800054e:	e713      	b.n	8000378 <__udivmoddi4+0xe4>
 8000550:	3802      	subs	r0, #2
 8000552:	443c      	add	r4, r7
 8000554:	e724      	b.n	80003a0 <__udivmoddi4+0x10c>
 8000556:	bf00      	nop

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 fc1b 	bl	8000d9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f877 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 f8df 	bl	800072c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //Enable the CYCCNT counter
  DWT_CTRL |= (1<<0);
 800056e:	4b2e      	ldr	r3, [pc, #184]	; (8000628 <main+0xcc>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a2d      	ldr	r2, [pc, #180]	; (8000628 <main+0xcc>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 800057a:	482c      	ldr	r0, [pc, #176]	; (800062c <main+0xd0>)
 800057c:	f004 ffe0 	bl	8005540 <SEGGER_UART_init>

	SEGGER_SYSVIEW_Conf();
 8000580:	f007 faf8 	bl	8007b74 <SEGGER_SYSVIEW_Conf>

	// SEGGER_SYSVIEW_Start();  //this line is there in segger_uart.c under segger->config->Rec

	status=xTaskCreate(led_green_handler, "led_green_task", 200, NULL, 3, &task1_handle);
 8000584:	4b2a      	ldr	r3, [pc, #168]	; (8000630 <main+0xd4>)
 8000586:	9301      	str	r3, [sp, #4]
 8000588:	2303      	movs	r3, #3
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	2300      	movs	r3, #0
 800058e:	22c8      	movs	r2, #200	; 0xc8
 8000590:	4928      	ldr	r1, [pc, #160]	; (8000634 <main+0xd8>)
 8000592:	4829      	ldr	r0, [pc, #164]	; (8000638 <main+0xdc>)
 8000594:	f002 fc68 	bl	8002e68 <xTaskCreate>
 8000598:	60f8      	str	r0, [r7, #12]

	configASSERT(status == pdPASS);
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d00a      	beq.n	80005b6 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005a4:	f383 8811 	msr	BASEPRI, r3
 80005a8:	f3bf 8f6f 	isb	sy
 80005ac:	f3bf 8f4f 	dsb	sy
 80005b0:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b2:	bf00      	nop
 80005b4:	e7fe      	b.n	80005b4 <main+0x58>

	next_task_handle=task1_handle;
 80005b6:	4b1e      	ldr	r3, [pc, #120]	; (8000630 <main+0xd4>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a20      	ldr	r2, [pc, #128]	; (800063c <main+0xe0>)
 80005bc:	6013      	str	r3, [r2, #0]

	status=xTaskCreate(led_orange_handler, "led_orange_task", 200, NULL, 2, &task2_handle);
 80005be:	4b20      	ldr	r3, [pc, #128]	; (8000640 <main+0xe4>)
 80005c0:	9301      	str	r3, [sp, #4]
 80005c2:	2302      	movs	r3, #2
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2300      	movs	r3, #0
 80005c8:	22c8      	movs	r2, #200	; 0xc8
 80005ca:	491e      	ldr	r1, [pc, #120]	; (8000644 <main+0xe8>)
 80005cc:	481e      	ldr	r0, [pc, #120]	; (8000648 <main+0xec>)
 80005ce:	f002 fc4b 	bl	8002e68 <xTaskCreate>
 80005d2:	60f8      	str	r0, [r7, #12]

	configASSERT(status == pdPASS);
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d00a      	beq.n	80005f0 <main+0x94>
        __asm volatile
 80005da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005de:	f383 8811 	msr	BASEPRI, r3
 80005e2:	f3bf 8f6f 	isb	sy
 80005e6:	f3bf 8f4f 	dsb	sy
 80005ea:	607b      	str	r3, [r7, #4]
    }
 80005ec:	bf00      	nop
 80005ee:	e7fe      	b.n	80005ee <main+0x92>

	status=xTaskCreate(led_red_handler, "led_red_task", 200, NULL, 1, &task3_handle);
 80005f0:	4b16      	ldr	r3, [pc, #88]	; (800064c <main+0xf0>)
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	2301      	movs	r3, #1
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2300      	movs	r3, #0
 80005fa:	22c8      	movs	r2, #200	; 0xc8
 80005fc:	4914      	ldr	r1, [pc, #80]	; (8000650 <main+0xf4>)
 80005fe:	4815      	ldr	r0, [pc, #84]	; (8000654 <main+0xf8>)
 8000600:	f002 fc32 	bl	8002e68 <xTaskCreate>
 8000604:	60f8      	str	r0, [r7, #12]

	 configASSERT(status == pdPASS);
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d00a      	beq.n	8000622 <main+0xc6>
        __asm volatile
 800060c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000610:	f383 8811 	msr	BASEPRI, r3
 8000614:	f3bf 8f6f 	isb	sy
 8000618:	f3bf 8f4f 	dsb	sy
 800061c:	603b      	str	r3, [r7, #0]
    }
 800061e:	bf00      	nop
 8000620:	e7fe      	b.n	8000620 <main+0xc4>



	//start the freeRTOS scheduler
	vTaskStartScheduler();
 8000622:	f002 fe2f 	bl	8003284 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000626:	e7fe      	b.n	8000626 <main+0xca>
 8000628:	e0001000 	.word	0xe0001000
 800062c:	0007a120 	.word	0x0007a120
 8000630:	2001437c 	.word	0x2001437c
 8000634:	08007c48 	.word	0x08007c48
 8000638:	08000a51 	.word	0x08000a51
 800063c:	20000038 	.word	0x20000038
 8000640:	20014380 	.word	0x20014380
 8000644:	08007c58 	.word	0x08007c58
 8000648:	08000ac1 	.word	0x08000ac1
 800064c:	20014384 	.word	0x20014384
 8000650:	08007c68 	.word	0x08007c68
 8000654:	08000b31 	.word	0x08000b31

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	; 0x50
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	2230      	movs	r2, #48	; 0x30
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f007 fada 	bl	8007c20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	4b28      	ldr	r3, [pc, #160]	; (8000724 <SystemClock_Config+0xcc>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	4a27      	ldr	r2, [pc, #156]	; (8000724 <SystemClock_Config+0xcc>)
 8000686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068a:	6413      	str	r3, [r2, #64]	; 0x40
 800068c:	4b25      	ldr	r3, [pc, #148]	; (8000724 <SystemClock_Config+0xcc>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	4b22      	ldr	r3, [pc, #136]	; (8000728 <SystemClock_Config+0xd0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a21      	ldr	r2, [pc, #132]	; (8000728 <SystemClock_Config+0xd0>)
 80006a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <SystemClock_Config+0xd0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b4:	2302      	movs	r3, #2
 80006b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006bc:	2310      	movs	r3, #16
 80006be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c4:	2300      	movs	r3, #0
 80006c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c8:	2308      	movs	r3, #8
 80006ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006cc:	23a8      	movs	r3, #168	; 0xa8
 80006ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006d4:	2307      	movs	r3, #7
 80006d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 0320 	add.w	r3, r7, #32
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 fe75 	bl	80013cc <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e8:	f000 fa6a 	bl	8000bc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f0:	2302      	movs	r3, #2
 80006f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000702:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	2105      	movs	r1, #5
 800070a:	4618      	mov	r0, r3
 800070c:	f001 f8d6 	bl	80018bc <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000716:	f000 fa53 	bl	8000bc0 <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3750      	adds	r7, #80	; 0x50
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08c      	sub	sp, #48	; 0x30
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 031c 	add.w	r3, r7, #28
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	61bb      	str	r3, [r7, #24]
 8000746:	4ba6      	ldr	r3, [pc, #664]	; (80009e0 <MX_GPIO_Init+0x2b4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4aa5      	ldr	r2, [pc, #660]	; (80009e0 <MX_GPIO_Init+0x2b4>)
 800074c:	f043 0310 	orr.w	r3, r3, #16
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4ba3      	ldr	r3, [pc, #652]	; (80009e0 <MX_GPIO_Init+0x2b4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0310 	and.w	r3, r3, #16
 800075a:	61bb      	str	r3, [r7, #24]
 800075c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
 8000762:	4b9f      	ldr	r3, [pc, #636]	; (80009e0 <MX_GPIO_Init+0x2b4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a9e      	ldr	r2, [pc, #632]	; (80009e0 <MX_GPIO_Init+0x2b4>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b9c      	ldr	r3, [pc, #624]	; (80009e0 <MX_GPIO_Init+0x2b4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	617b      	str	r3, [r7, #20]
 8000778:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	4b98      	ldr	r3, [pc, #608]	; (80009e0 <MX_GPIO_Init+0x2b4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a97      	ldr	r2, [pc, #604]	; (80009e0 <MX_GPIO_Init+0x2b4>)
 8000784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b95      	ldr	r3, [pc, #596]	; (80009e0 <MX_GPIO_Init+0x2b4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	4b91      	ldr	r3, [pc, #580]	; (80009e0 <MX_GPIO_Init+0x2b4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a90      	ldr	r2, [pc, #576]	; (80009e0 <MX_GPIO_Init+0x2b4>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b8e      	ldr	r3, [pc, #568]	; (80009e0 <MX_GPIO_Init+0x2b4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	4b8a      	ldr	r3, [pc, #552]	; (80009e0 <MX_GPIO_Init+0x2b4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a89      	ldr	r2, [pc, #548]	; (80009e0 <MX_GPIO_Init+0x2b4>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b87      	ldr	r3, [pc, #540]	; (80009e0 <MX_GPIO_Init+0x2b4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b83      	ldr	r3, [pc, #524]	; (80009e0 <MX_GPIO_Init+0x2b4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a82      	ldr	r2, [pc, #520]	; (80009e0 <MX_GPIO_Init+0x2b4>)
 80007d8:	f043 0308 	orr.w	r3, r3, #8
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b80      	ldr	r3, [pc, #512]	; (80009e0 <MX_GPIO_Init+0x2b4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0308 	and.w	r3, r3, #8
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2108      	movs	r1, #8
 80007ee:	487d      	ldr	r0, [pc, #500]	; (80009e4 <MX_GPIO_Init+0x2b8>)
 80007f0:	f000 fd94 	bl	800131c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	2101      	movs	r1, #1
 80007f8:	487b      	ldr	r0, [pc, #492]	; (80009e8 <MX_GPIO_Init+0x2bc>)
 80007fa:	f000 fd8f 	bl	800131c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007fe:	2200      	movs	r2, #0
 8000800:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000804:	4879      	ldr	r0, [pc, #484]	; (80009ec <MX_GPIO_Init+0x2c0>)
 8000806:	f000 fd89 	bl	800131c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800080a:	2308      	movs	r3, #8
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	2301      	movs	r3, #1
 8000810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	4619      	mov	r1, r3
 8000820:	4870      	ldr	r0, [pc, #448]	; (80009e4 <MX_GPIO_Init+0x2b8>)
 8000822:	f000 fbdf 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000826:	2301      	movs	r3, #1
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	2301      	movs	r3, #1
 800082c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	4619      	mov	r1, r3
 800083c:	486a      	ldr	r0, [pc, #424]	; (80009e8 <MX_GPIO_Init+0x2bc>)
 800083e:	f000 fbd1 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000842:	2308      	movs	r3, #8
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000852:	2305      	movs	r3, #5
 8000854:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	4619      	mov	r1, r3
 800085c:	4862      	ldr	r0, [pc, #392]	; (80009e8 <MX_GPIO_Init+0x2bc>)
 800085e:	f000 fbc1 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000862:	2301      	movs	r3, #1
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000866:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800086a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	485e      	ldr	r0, [pc, #376]	; (80009f0 <MX_GPIO_Init+0x2c4>)
 8000878:	f000 fbb4 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800087c:	2310      	movs	r3, #16
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000880:	2302      	movs	r3, #2
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800088c:	2306      	movs	r3, #6
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4619      	mov	r1, r3
 8000896:	4856      	ldr	r0, [pc, #344]	; (80009f0 <MX_GPIO_Init+0x2c4>)
 8000898:	f000 fba4 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800089c:	23e0      	movs	r3, #224	; 0xe0
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008ac:	2305      	movs	r3, #5
 80008ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	484e      	ldr	r0, [pc, #312]	; (80009f0 <MX_GPIO_Init+0x2c4>)
 80008b8:	f000 fb94 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008bc:	2304      	movs	r3, #4
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c0:	2300      	movs	r3, #0
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	4849      	ldr	r0, [pc, #292]	; (80009f4 <MX_GPIO_Init+0x2c8>)
 80008d0:	f000 fb88 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008e6:	2305      	movs	r3, #5
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4840      	ldr	r0, [pc, #256]	; (80009f4 <MX_GPIO_Init+0x2c8>)
 80008f2:	f000 fb77 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008f6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008fa:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	4837      	ldr	r0, [pc, #220]	; (80009ec <MX_GPIO_Init+0x2c0>)
 8000910:	f000 fb68 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000914:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000926:	2306      	movs	r3, #6
 8000928:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	482d      	ldr	r0, [pc, #180]	; (80009e8 <MX_GPIO_Init+0x2bc>)
 8000932:	f000 fb57 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000936:	f44f 7300 	mov.w	r3, #512	; 0x200
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093c:	2300      	movs	r3, #0
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	4829      	ldr	r0, [pc, #164]	; (80009f0 <MX_GPIO_Init+0x2c4>)
 800094c:	f000 fb4a 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000950:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000962:	230a      	movs	r3, #10
 8000964:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	4820      	ldr	r0, [pc, #128]	; (80009f0 <MX_GPIO_Init+0x2c4>)
 800096e:	f000 fb39 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000972:	2320      	movs	r3, #32
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000976:	2300      	movs	r3, #0
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	4819      	ldr	r0, [pc, #100]	; (80009ec <MX_GPIO_Init+0x2c0>)
 8000986:	f000 fb2d 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800098a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000990:	2312      	movs	r3, #18
 8000992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800099c:	2304      	movs	r3, #4
 800099e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	4813      	ldr	r0, [pc, #76]	; (80009f4 <MX_GPIO_Init+0x2c8>)
 80009a8:	f000 fb1c 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009ac:	2302      	movs	r3, #2
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009b0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	4808      	ldr	r0, [pc, #32]	; (80009e4 <MX_GPIO_Init+0x2b8>)
 80009c2:	f000 fb0f 	bl	8000fe4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2106      	movs	r1, #6
 80009ca:	2006      	movs	r0, #6
 80009cc:	f000 fae0 	bl	8000f90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009d0:	2006      	movs	r0, #6
 80009d2:	f000 faf9 	bl	8000fc8 <HAL_NVIC_EnableIRQ>

}
 80009d6:	bf00      	nop
 80009d8:	3730      	adds	r7, #48	; 0x30
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40021000 	.word	0x40021000
 80009e8:	40020800 	.word	0x40020800
 80009ec:	40020c00 	.word	0x40020c00
 80009f0:	40020000 	.word	0x40020000
 80009f4:	40020400 	.word	0x40020400

080009f8 <button_interrupt_handler>:

/* USER CODE BEGIN 4 */

void button_interrupt_handler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af02      	add	r7, sp, #8
	BaseType_t pxHigherPriorityTaskWoken;

	pxHigherPriorityTaskWoken= pdFALSE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]

	traceISR_ENTER();
 8000a02:	f006 fd63 	bl	80074cc <SEGGER_SYSVIEW_RecordEnterISR>
	xTaskNotifyFromISR(next_task_handle,0,eNoAction, &pxHigherPriorityTaskWoken);
 8000a06:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <button_interrupt_handler+0x50>)
 8000a08:	6818      	ldr	r0, [r3, #0]
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	9301      	str	r3, [sp, #4]
 8000a0e:	2300      	movs	r3, #0
 8000a10:	9300      	str	r3, [sp, #0]
 8000a12:	2300      	movs	r3, #0
 8000a14:	2200      	movs	r2, #0
 8000a16:	2100      	movs	r1, #0
 8000a18:	f003 f9a4 	bl	8003d64 <xTaskGenericNotifyFromISR>

	/*Once the ISR exits, the below macro makes higher priority task which got unblocked to resume on the CPU*/
	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d00a      	beq.n	8000a38 <button_interrupt_handler+0x40>
 8000a22:	f006 fdb1 	bl	8007588 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <button_interrupt_handler+0x54>)
 8000a28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	f3bf 8f4f 	dsb	sy
 8000a32:	f3bf 8f6f 	isb	sy
 8000a36:	e001      	b.n	8000a3c <button_interrupt_handler+0x44>
 8000a38:	f006 fd8a 	bl	8007550 <SEGGER_SYSVIEW_RecordExitISR>

	traceISR_EXIT();
 8000a3c:	f006 fd88 	bl	8007550 <SEGGER_SYSVIEW_RecordExitISR>

}
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000038 	.word	0x20000038
 8000a4c:	e000ed04 	.word	0xe000ed04

08000a50 <led_green_handler>:

static void led_green_handler(void *parameters)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af02      	add	r7, sp, #8
 8000a56:	6078      	str	r0, [r7, #4]

    BaseType_t status;
	while(1)
	{

		SEGGER_SYSVIEW_PrintfTarget("Toggling Green led");
 8000a58:	4814      	ldr	r0, [pc, #80]	; (8000aac <led_green_handler+0x5c>)
 8000a5a:	f006 ffdf 	bl	8007a1c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000a5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a62:	4813      	ldr	r0, [pc, #76]	; (8000ab0 <led_green_handler+0x60>)
 8000a64:	f000 fc73 	bl	800134e <HAL_GPIO_TogglePin>
		status= xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000) );
 8000a68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	2300      	movs	r3, #0
 8000a70:	2200      	movs	r2, #0
 8000a72:	2100      	movs	r1, #0
 8000a74:	2000      	movs	r0, #0
 8000a76:	f003 f8ed 	bl	8003c54 <xTaskGenericNotifyWait>
 8000a7a:	60f8      	str	r0, [r7, #12]
		if (status== pdTRUE)
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d1ea      	bne.n	8000a58 <led_green_handler+0x8>
		{
			portENTER_CRITICAL();
 8000a82:	f003 ffbf 	bl	8004a04 <vPortEnterCritical>
			next_task_handle= task2_handle;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <led_green_handler+0x64>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a0b      	ldr	r2, [pc, #44]	; (8000ab8 <led_green_handler+0x68>)
 8000a8c:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOD, LED_GREEN_PIN, GPIO_PIN_SET);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a94:	4806      	ldr	r0, [pc, #24]	; (8000ab0 <led_green_handler+0x60>)
 8000a96:	f000 fc41 	bl	800131c <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Deleting Green tasks");
 8000a9a:	4808      	ldr	r0, [pc, #32]	; (8000abc <led_green_handler+0x6c>)
 8000a9c:	f006 ffbe 	bl	8007a1c <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 8000aa0:	f003 ffe0 	bl	8004a64 <vPortExitCritical>
			vTaskDelete(NULL);
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f002 fb43 	bl	8003130 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green led");
 8000aaa:	e7d5      	b.n	8000a58 <led_green_handler+0x8>
 8000aac:	08007c78 	.word	0x08007c78
 8000ab0:	40020c00 	.word	0x40020c00
 8000ab4:	20014380 	.word	0x20014380
 8000ab8:	20000038 	.word	0x20000038
 8000abc:	08007c8c 	.word	0x08007c8c

08000ac0 <led_orange_handler>:
		}
	}
}

static void led_orange_handler(void *parameters)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af02      	add	r7, sp, #8
 8000ac6:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling Orange led");
 8000ac8:	4814      	ldr	r0, [pc, #80]	; (8000b1c <led_orange_handler+0x5c>)
 8000aca:	f006 ffa7 	bl	8007a1c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000ace:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad2:	4813      	ldr	r0, [pc, #76]	; (8000b20 <led_orange_handler+0x60>)
 8000ad4:	f000 fc3b 	bl	800134e <HAL_GPIO_TogglePin>
		status= xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800) );
 8000ad8:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	2300      	movs	r3, #0
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f003 f8b5 	bl	8003c54 <xTaskGenericNotifyWait>
 8000aea:	60f8      	str	r0, [r7, #12]
		if (status== pdTRUE)
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d1ea      	bne.n	8000ac8 <led_orange_handler+0x8>
		{

			vPortEnterCritical();
 8000af2:	f003 ff87 	bl	8004a04 <vPortEnterCritical>
			next_task_handle= task3_handle;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <led_orange_handler+0x64>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a0b      	ldr	r2, [pc, #44]	; (8000b28 <led_orange_handler+0x68>)
 8000afc:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOD, LED_ORANGE_PIN, GPIO_PIN_SET);
 8000afe:	2201      	movs	r2, #1
 8000b00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b04:	4806      	ldr	r0, [pc, #24]	; (8000b20 <led_orange_handler+0x60>)
 8000b06:	f000 fc09 	bl	800131c <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Deleting Orange tasks");
 8000b0a:	4808      	ldr	r0, [pc, #32]	; (8000b2c <led_orange_handler+0x6c>)
 8000b0c:	f006 ff86 	bl	8007a1c <SEGGER_SYSVIEW_PrintfTarget>
			vPortExitCritical();
 8000b10:	f003 ffa8 	bl	8004a64 <vPortExitCritical>
			vTaskDelete(NULL);
 8000b14:	2000      	movs	r0, #0
 8000b16:	f002 fb0b 	bl	8003130 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Orange led");
 8000b1a:	e7d5      	b.n	8000ac8 <led_orange_handler+0x8>
 8000b1c:	08007ca4 	.word	0x08007ca4
 8000b20:	40020c00 	.word	0x40020c00
 8000b24:	20014384 	.word	0x20014384
 8000b28:	20000038 	.word	0x20000038
 8000b2c:	08007cb8 	.word	0x08007cb8

08000b30 <led_red_handler>:
		}
	}
}

static void led_red_handler(void *parameters)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af02      	add	r7, sp, #8
 8000b36:	6078      	str	r0, [r7, #4]

	BaseType_t status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red led");
 8000b38:	4814      	ldr	r0, [pc, #80]	; (8000b8c <led_red_handler+0x5c>)
 8000b3a:	f006 ff6f 	bl	8007a1c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000b3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b42:	4813      	ldr	r0, [pc, #76]	; (8000b90 <led_red_handler+0x60>)
 8000b44:	f000 fc03 	bl	800134e <HAL_GPIO_TogglePin>
		status= xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400) );
 8000b48:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b4c:	9300      	str	r3, [sp, #0]
 8000b4e:	2300      	movs	r3, #0
 8000b50:	2200      	movs	r2, #0
 8000b52:	2100      	movs	r1, #0
 8000b54:	2000      	movs	r0, #0
 8000b56:	f003 f87d 	bl	8003c54 <xTaskGenericNotifyWait>
 8000b5a:	60f8      	str	r0, [r7, #12]
		if (status== pdTRUE)
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d1ea      	bne.n	8000b38 <led_red_handler+0x8>
		{
			vPortEnterCritical();
 8000b62:	f003 ff4f 	bl	8004a04 <vPortEnterCritical>
			next_task_handle= NULL;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <led_red_handler+0x64>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, LED_RED_PIN, GPIO_PIN_SET);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b72:	4807      	ldr	r0, [pc, #28]	; (8000b90 <led_red_handler+0x60>)
 8000b74:	f000 fbd2 	bl	800131c <HAL_GPIO_WritePin>
			//SEGGER_SYSVIEW_PrintfTarget("Deleting Button tasks");
			//vTaskDelete(task4_handle);
			SEGGER_SYSVIEW_PrintfTarget("Deleting Red tasks");
 8000b78:	4807      	ldr	r0, [pc, #28]	; (8000b98 <led_red_handler+0x68>)
 8000b7a:	f006 ff4f 	bl	8007a1c <SEGGER_SYSVIEW_PrintfTarget>
			vPortExitCritical();
 8000b7e:	f003 ff71 	bl	8004a64 <vPortExitCritical>
			vTaskDelete(NULL);
 8000b82:	2000      	movs	r0, #0
 8000b84:	f002 fad4 	bl	8003130 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red led");
 8000b88:	e7d6      	b.n	8000b38 <led_red_handler+0x8>
 8000b8a:	bf00      	nop
 8000b8c:	08007cd0 	.word	0x08007cd0
 8000b90:	40020c00 	.word	0x40020c00
 8000b94:	20000038 	.word	0x20000038
 8000b98:	08007ce4 	.word	0x08007ce4

08000b9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d101      	bne.n	8000bb2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bae:	f000 f917 	bl	8000de0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40001000 	.word	0x40001000

08000bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc4:	b672      	cpsid	i
}
 8000bc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <Error_Handler+0x8>
	...

08000bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <HAL_MspInit+0x4c>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bda:	4a0f      	ldr	r2, [pc, #60]	; (8000c18 <HAL_MspInit+0x4c>)
 8000bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be0:	6453      	str	r3, [r2, #68]	; 0x44
 8000be2:	4b0d      	ldr	r3, [pc, #52]	; (8000c18 <HAL_MspInit+0x4c>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	603b      	str	r3, [r7, #0]
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <HAL_MspInit+0x4c>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	4a08      	ldr	r2, [pc, #32]	; (8000c18 <HAL_MspInit+0x4c>)
 8000bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_MspInit+0x4c>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000c0a:	f003 fe7d 	bl	8004908 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800

08000c1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08c      	sub	sp, #48	; 0x30
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	2036      	movs	r0, #54	; 0x36
 8000c32:	f000 f9ad 	bl	8000f90 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c36:	2036      	movs	r0, #54	; 0x36
 8000c38:	f000 f9c6 	bl	8000fc8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	4b1f      	ldr	r3, [pc, #124]	; (8000cc0 <HAL_InitTick+0xa4>)
 8000c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c44:	4a1e      	ldr	r2, [pc, #120]	; (8000cc0 <HAL_InitTick+0xa4>)
 8000c46:	f043 0310 	orr.w	r3, r3, #16
 8000c4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4c:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <HAL_InitTick+0xa4>)
 8000c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c50:	f003 0310 	and.w	r3, r3, #16
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c58:	f107 0210 	add.w	r2, r7, #16
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	4611      	mov	r1, r2
 8000c62:	4618      	mov	r0, r3
 8000c64:	f001 f812 	bl	8001c8c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000c68:	f000 fffc 	bl	8001c64 <HAL_RCC_GetPCLK1Freq>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c74:	4a13      	ldr	r2, [pc, #76]	; (8000cc4 <HAL_InitTick+0xa8>)
 8000c76:	fba2 2303 	umull	r2, r3, r2, r3
 8000c7a:	0c9b      	lsrs	r3, r3, #18
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <HAL_InitTick+0xac>)
 8000c82:	4a12      	ldr	r2, [pc, #72]	; (8000ccc <HAL_InitTick+0xb0>)
 8000c84:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <HAL_InitTick+0xac>)
 8000c88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c8c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c8e:	4a0e      	ldr	r2, [pc, #56]	; (8000cc8 <HAL_InitTick+0xac>)
 8000c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c92:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <HAL_InitTick+0xac>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <HAL_InitTick+0xac>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000ca0:	4809      	ldr	r0, [pc, #36]	; (8000cc8 <HAL_InitTick+0xac>)
 8000ca2:	f001 f825 	bl	8001cf0 <HAL_TIM_Base_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d104      	bne.n	8000cb6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000cac:	4806      	ldr	r0, [pc, #24]	; (8000cc8 <HAL_InitTick+0xac>)
 8000cae:	f001 f879 	bl	8001da4 <HAL_TIM_Base_Start_IT>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	e000      	b.n	8000cb8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3730      	adds	r7, #48	; 0x30
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	431bde83 	.word	0x431bde83
 8000cc8:	20014388 	.word	0x20014388
 8000ccc:	40001000 	.word	0x40001000

08000cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <NMI_Handler+0x4>

08000cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <HardFault_Handler+0x4>

08000cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <MemManage_Handler+0x4>

08000ce2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <BusFault_Handler+0x4>

08000ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <UsageFault_Handler+0x4>

08000cee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	button_interrupt_handler();
 8000d00:	f7ff fe7a 	bl	80009f8 <button_interrupt_handler>
  /* USER CODE END EXTI0_IRQn 0 */
    HAL_GPIO_EXTI_IRQHandler(PH0_OSC_IN_Pin);
 8000d04:	2001      	movs	r0, #1
 8000d06:	f000 fb3d 	bl	8001384 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d14:	4802      	ldr	r0, [pc, #8]	; (8000d20 <TIM6_DAC_IRQHandler+0x10>)
 8000d16:	f001 f8b5 	bl	8001e84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20014388 	.word	0x20014388

08000d24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <SystemInit+0x20>)
 8000d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d2e:	4a05      	ldr	r2, [pc, #20]	; (8000d44 <SystemInit+0x20>)
 8000d30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d4c:	480d      	ldr	r0, [pc, #52]	; (8000d84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d4e:	490e      	ldr	r1, [pc, #56]	; (8000d88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d50:	4a0e      	ldr	r2, [pc, #56]	; (8000d8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d54:	e002      	b.n	8000d5c <LoopCopyDataInit>

08000d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5a:	3304      	adds	r3, #4

08000d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d60:	d3f9      	bcc.n	8000d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d62:	4a0b      	ldr	r2, [pc, #44]	; (8000d90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d64:	4c0b      	ldr	r4, [pc, #44]	; (8000d94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d68:	e001      	b.n	8000d6e <LoopFillZerobss>

08000d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d6c:	3204      	adds	r2, #4

08000d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d70:	d3fb      	bcc.n	8000d6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d72:	f7ff ffd7 	bl	8000d24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d76:	f006 ff13 	bl	8007ba0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d7a:	f7ff fbef 	bl	800055c <main>
  bx  lr    
 8000d7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d88:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000d8c:	08007e24 	.word	0x08007e24
  ldr r2, =_sbss
 8000d90:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000d94:	200144bc 	.word	0x200144bc

08000d98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d98:	e7fe      	b.n	8000d98 <ADC_IRQHandler>
	...

08000d9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000da0:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <HAL_Init+0x40>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0d      	ldr	r2, [pc, #52]	; (8000ddc <HAL_Init+0x40>)
 8000da6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000daa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dac:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <HAL_Init+0x40>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <HAL_Init+0x40>)
 8000db2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000db6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <HAL_Init+0x40>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <HAL_Init+0x40>)
 8000dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc4:	2003      	movs	r0, #3
 8000dc6:	f000 f8d8 	bl	8000f7a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dca:	200f      	movs	r0, #15
 8000dcc:	f7ff ff26 	bl	8000c1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dd0:	f7ff fefc 	bl	8000bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40023c00 	.word	0x40023c00

08000de0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_IncTick+0x20>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_IncTick+0x24>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4413      	add	r3, r2
 8000df0:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <HAL_IncTick+0x24>)
 8000df2:	6013      	str	r3, [r2, #0]
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20000008 	.word	0x20000008
 8000e04:	200143d0 	.word	0x200143d0

08000e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e0c:	4b03      	ldr	r3, [pc, #12]	; (8000e1c <HAL_GetTick+0x14>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	200143d0 	.word	0x200143d0

08000e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <__NVIC_SetPriorityGrouping+0x44>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e52:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <__NVIC_SetPriorityGrouping+0x44>)
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	60d3      	str	r3, [r2, #12]
}
 8000e58:	bf00      	nop
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e6c:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <__NVIC_GetPriorityGrouping+0x18>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	0a1b      	lsrs	r3, r3, #8
 8000e72:	f003 0307 	and.w	r3, r3, #7
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	db0b      	blt.n	8000eae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	f003 021f 	and.w	r2, r3, #31
 8000e9c:	4907      	ldr	r1, [pc, #28]	; (8000ebc <__NVIC_EnableIRQ+0x38>)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	095b      	lsrs	r3, r3, #5
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000e100 	.word	0xe000e100

08000ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	6039      	str	r1, [r7, #0]
 8000eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	db0a      	blt.n	8000eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	490c      	ldr	r1, [pc, #48]	; (8000f0c <__NVIC_SetPriority+0x4c>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	0112      	lsls	r2, r2, #4
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee8:	e00a      	b.n	8000f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4908      	ldr	r1, [pc, #32]	; (8000f10 <__NVIC_SetPriority+0x50>)
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	f003 030f 	and.w	r3, r3, #15
 8000ef6:	3b04      	subs	r3, #4
 8000ef8:	0112      	lsls	r2, r2, #4
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	440b      	add	r3, r1
 8000efe:	761a      	strb	r2, [r3, #24]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000e100 	.word	0xe000e100
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b089      	sub	sp, #36	; 0x24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f1c3 0307 	rsb	r3, r3, #7
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	bf28      	it	cs
 8000f32:	2304      	movcs	r3, #4
 8000f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3304      	adds	r3, #4
 8000f3a:	2b06      	cmp	r3, #6
 8000f3c:	d902      	bls.n	8000f44 <NVIC_EncodePriority+0x30>
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3b03      	subs	r3, #3
 8000f42:	e000      	b.n	8000f46 <NVIC_EncodePriority+0x32>
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	f04f 32ff 	mov.w	r2, #4294967295
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43da      	mvns	r2, r3
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	401a      	ands	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa01 f303 	lsl.w	r3, r1, r3
 8000f66:	43d9      	mvns	r1, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	4313      	orrs	r3, r2
         );
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3724      	adds	r7, #36	; 0x24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ff4c 	bl	8000e20 <__NVIC_SetPriorityGrouping>
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
 8000f9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa2:	f7ff ff61 	bl	8000e68 <__NVIC_GetPriorityGrouping>
 8000fa6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	68b9      	ldr	r1, [r7, #8]
 8000fac:	6978      	ldr	r0, [r7, #20]
 8000fae:	f7ff ffb1 	bl	8000f14 <NVIC_EncodePriority>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb8:	4611      	mov	r1, r2
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff ff80 	bl	8000ec0 <__NVIC_SetPriority>
}
 8000fc0:	bf00      	nop
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff ff54 	bl	8000e84 <__NVIC_EnableIRQ>
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b089      	sub	sp, #36	; 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
 8000ffe:	e16b      	b.n	80012d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001000:	2201      	movs	r2, #1
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	429a      	cmp	r2, r3
 800101a:	f040 815a 	bne.w	80012d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	2b01      	cmp	r3, #1
 8001028:	d005      	beq.n	8001036 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001032:	2b02      	cmp	r3, #2
 8001034:	d130      	bne.n	8001098 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	2203      	movs	r2, #3
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4013      	ands	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	68da      	ldr	r2, [r3, #12]
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800106c:	2201      	movs	r2, #1
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	091b      	lsrs	r3, r3, #4
 8001082:	f003 0201 	and.w	r2, r3, #1
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	2b03      	cmp	r3, #3
 80010a2:	d017      	beq.n	80010d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	2203      	movs	r2, #3
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	689a      	ldr	r2, [r3, #8]
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d123      	bne.n	8001128 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	08da      	lsrs	r2, r3, #3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3208      	adds	r2, #8
 80010e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	220f      	movs	r2, #15
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	691a      	ldr	r2, [r3, #16]
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	08da      	lsrs	r2, r3, #3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3208      	adds	r2, #8
 8001122:	69b9      	ldr	r1, [r7, #24]
 8001124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	2203      	movs	r2, #3
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0203 	and.w	r2, r3, #3
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001164:	2b00      	cmp	r3, #0
 8001166:	f000 80b4 	beq.w	80012d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	4b60      	ldr	r3, [pc, #384]	; (80012f0 <HAL_GPIO_Init+0x30c>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	4a5f      	ldr	r2, [pc, #380]	; (80012f0 <HAL_GPIO_Init+0x30c>)
 8001174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001178:	6453      	str	r3, [r2, #68]	; 0x44
 800117a:	4b5d      	ldr	r3, [pc, #372]	; (80012f0 <HAL_GPIO_Init+0x30c>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001186:	4a5b      	ldr	r2, [pc, #364]	; (80012f4 <HAL_GPIO_Init+0x310>)
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	089b      	lsrs	r3, r3, #2
 800118c:	3302      	adds	r3, #2
 800118e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	220f      	movs	r2, #15
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4013      	ands	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a52      	ldr	r2, [pc, #328]	; (80012f8 <HAL_GPIO_Init+0x314>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d02b      	beq.n	800120a <HAL_GPIO_Init+0x226>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a51      	ldr	r2, [pc, #324]	; (80012fc <HAL_GPIO_Init+0x318>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d025      	beq.n	8001206 <HAL_GPIO_Init+0x222>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a50      	ldr	r2, [pc, #320]	; (8001300 <HAL_GPIO_Init+0x31c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d01f      	beq.n	8001202 <HAL_GPIO_Init+0x21e>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4f      	ldr	r2, [pc, #316]	; (8001304 <HAL_GPIO_Init+0x320>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d019      	beq.n	80011fe <HAL_GPIO_Init+0x21a>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4e      	ldr	r2, [pc, #312]	; (8001308 <HAL_GPIO_Init+0x324>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d013      	beq.n	80011fa <HAL_GPIO_Init+0x216>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a4d      	ldr	r2, [pc, #308]	; (800130c <HAL_GPIO_Init+0x328>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d00d      	beq.n	80011f6 <HAL_GPIO_Init+0x212>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4c      	ldr	r2, [pc, #304]	; (8001310 <HAL_GPIO_Init+0x32c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d007      	beq.n	80011f2 <HAL_GPIO_Init+0x20e>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4b      	ldr	r2, [pc, #300]	; (8001314 <HAL_GPIO_Init+0x330>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d101      	bne.n	80011ee <HAL_GPIO_Init+0x20a>
 80011ea:	2307      	movs	r3, #7
 80011ec:	e00e      	b.n	800120c <HAL_GPIO_Init+0x228>
 80011ee:	2308      	movs	r3, #8
 80011f0:	e00c      	b.n	800120c <HAL_GPIO_Init+0x228>
 80011f2:	2306      	movs	r3, #6
 80011f4:	e00a      	b.n	800120c <HAL_GPIO_Init+0x228>
 80011f6:	2305      	movs	r3, #5
 80011f8:	e008      	b.n	800120c <HAL_GPIO_Init+0x228>
 80011fa:	2304      	movs	r3, #4
 80011fc:	e006      	b.n	800120c <HAL_GPIO_Init+0x228>
 80011fe:	2303      	movs	r3, #3
 8001200:	e004      	b.n	800120c <HAL_GPIO_Init+0x228>
 8001202:	2302      	movs	r3, #2
 8001204:	e002      	b.n	800120c <HAL_GPIO_Init+0x228>
 8001206:	2301      	movs	r3, #1
 8001208:	e000      	b.n	800120c <HAL_GPIO_Init+0x228>
 800120a:	2300      	movs	r3, #0
 800120c:	69fa      	ldr	r2, [r7, #28]
 800120e:	f002 0203 	and.w	r2, r2, #3
 8001212:	0092      	lsls	r2, r2, #2
 8001214:	4093      	lsls	r3, r2
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800121c:	4935      	ldr	r1, [pc, #212]	; (80012f4 <HAL_GPIO_Init+0x310>)
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	089b      	lsrs	r3, r3, #2
 8001222:	3302      	adds	r3, #2
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800122a:	4b3b      	ldr	r3, [pc, #236]	; (8001318 <HAL_GPIO_Init+0x334>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800124e:	4a32      	ldr	r2, [pc, #200]	; (8001318 <HAL_GPIO_Init+0x334>)
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001254:	4b30      	ldr	r3, [pc, #192]	; (8001318 <HAL_GPIO_Init+0x334>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001278:	4a27      	ldr	r2, [pc, #156]	; (8001318 <HAL_GPIO_Init+0x334>)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800127e:	4b26      	ldr	r3, [pc, #152]	; (8001318 <HAL_GPIO_Init+0x334>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	43db      	mvns	r3, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4013      	ands	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012a2:	4a1d      	ldr	r2, [pc, #116]	; (8001318 <HAL_GPIO_Init+0x334>)
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012a8:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <HAL_GPIO_Init+0x334>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012cc:	4a12      	ldr	r2, [pc, #72]	; (8001318 <HAL_GPIO_Init+0x334>)
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3301      	adds	r3, #1
 80012d6:	61fb      	str	r3, [r7, #28]
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	2b0f      	cmp	r3, #15
 80012dc:	f67f ae90 	bls.w	8001000 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop
 80012e4:	3724      	adds	r7, #36	; 0x24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40013800 	.word	0x40013800
 80012f8:	40020000 	.word	0x40020000
 80012fc:	40020400 	.word	0x40020400
 8001300:	40020800 	.word	0x40020800
 8001304:	40020c00 	.word	0x40020c00
 8001308:	40021000 	.word	0x40021000
 800130c:	40021400 	.word	0x40021400
 8001310:	40021800 	.word	0x40021800
 8001314:	40021c00 	.word	0x40021c00
 8001318:	40013c00 	.word	0x40013c00

0800131c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	807b      	strh	r3, [r7, #2]
 8001328:	4613      	mov	r3, r2
 800132a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800132c:	787b      	ldrb	r3, [r7, #1]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001332:	887a      	ldrh	r2, [r7, #2]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001338:	e003      	b.n	8001342 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800133a:	887b      	ldrh	r3, [r7, #2]
 800133c:	041a      	lsls	r2, r3, #16
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	619a      	str	r2, [r3, #24]
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800134e:	b480      	push	{r7}
 8001350:	b085      	sub	sp, #20
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	460b      	mov	r3, r1
 8001358:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001360:	887a      	ldrh	r2, [r7, #2]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4013      	ands	r3, r2
 8001366:	041a      	lsls	r2, r3, #16
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	43d9      	mvns	r1, r3
 800136c:	887b      	ldrh	r3, [r7, #2]
 800136e:	400b      	ands	r3, r1
 8001370:	431a      	orrs	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	619a      	str	r2, [r3, #24]
}
 8001376:	bf00      	nop
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800138e:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001390:	695a      	ldr	r2, [r3, #20]
 8001392:	88fb      	ldrh	r3, [r7, #6]
 8001394:	4013      	ands	r3, r2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d006      	beq.n	80013a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800139a:	4a05      	ldr	r2, [pc, #20]	; (80013b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013a0:	88fb      	ldrh	r3, [r7, #6]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 f806 	bl	80013b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40013c00 	.word	0x40013c00

080013b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
	...

080013cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e264      	b.n	80018a8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d075      	beq.n	80014d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ea:	4ba3      	ldr	r3, [pc, #652]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 030c 	and.w	r3, r3, #12
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	d00c      	beq.n	8001410 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013f6:	4ba0      	ldr	r3, [pc, #640]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013fe:	2b08      	cmp	r3, #8
 8001400:	d112      	bne.n	8001428 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001402:	4b9d      	ldr	r3, [pc, #628]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800140a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800140e:	d10b      	bne.n	8001428 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001410:	4b99      	ldr	r3, [pc, #612]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d05b      	beq.n	80014d4 <HAL_RCC_OscConfig+0x108>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d157      	bne.n	80014d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e23f      	b.n	80018a8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001430:	d106      	bne.n	8001440 <HAL_RCC_OscConfig+0x74>
 8001432:	4b91      	ldr	r3, [pc, #580]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a90      	ldr	r2, [pc, #576]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 8001438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	e01d      	b.n	800147c <HAL_RCC_OscConfig+0xb0>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001448:	d10c      	bne.n	8001464 <HAL_RCC_OscConfig+0x98>
 800144a:	4b8b      	ldr	r3, [pc, #556]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a8a      	ldr	r2, [pc, #552]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 8001450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001454:	6013      	str	r3, [r2, #0]
 8001456:	4b88      	ldr	r3, [pc, #544]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a87      	ldr	r2, [pc, #540]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 800145c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	e00b      	b.n	800147c <HAL_RCC_OscConfig+0xb0>
 8001464:	4b84      	ldr	r3, [pc, #528]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a83      	ldr	r2, [pc, #524]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 800146a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	4b81      	ldr	r3, [pc, #516]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a80      	ldr	r2, [pc, #512]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 8001476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800147a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d013      	beq.n	80014ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001484:	f7ff fcc0 	bl	8000e08 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800148c:	f7ff fcbc 	bl	8000e08 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b64      	cmp	r3, #100	; 0x64
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e204      	b.n	80018a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149e:	4b76      	ldr	r3, [pc, #472]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0f0      	beq.n	800148c <HAL_RCC_OscConfig+0xc0>
 80014aa:	e014      	b.n	80014d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ac:	f7ff fcac 	bl	8000e08 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b4:	f7ff fca8 	bl	8000e08 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b64      	cmp	r3, #100	; 0x64
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e1f0      	b.n	80018a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014c6:	4b6c      	ldr	r3, [pc, #432]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f0      	bne.n	80014b4 <HAL_RCC_OscConfig+0xe8>
 80014d2:	e000      	b.n	80014d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d063      	beq.n	80015aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014e2:	4b65      	ldr	r3, [pc, #404]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 030c 	and.w	r3, r3, #12
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00b      	beq.n	8001506 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ee:	4b62      	ldr	r3, [pc, #392]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014f6:	2b08      	cmp	r3, #8
 80014f8:	d11c      	bne.n	8001534 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014fa:	4b5f      	ldr	r3, [pc, #380]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d116      	bne.n	8001534 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001506:	4b5c      	ldr	r3, [pc, #368]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d005      	beq.n	800151e <HAL_RCC_OscConfig+0x152>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d001      	beq.n	800151e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e1c4      	b.n	80018a8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151e:	4b56      	ldr	r3, [pc, #344]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	4952      	ldr	r1, [pc, #328]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 800152e:	4313      	orrs	r3, r2
 8001530:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001532:	e03a      	b.n	80015aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d020      	beq.n	800157e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800153c:	4b4f      	ldr	r3, [pc, #316]	; (800167c <HAL_RCC_OscConfig+0x2b0>)
 800153e:	2201      	movs	r2, #1
 8001540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001542:	f7ff fc61 	bl	8000e08 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001548:	e008      	b.n	800155c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800154a:	f7ff fc5d 	bl	8000e08 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e1a5      	b.n	80018a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155c:	4b46      	ldr	r3, [pc, #280]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d0f0      	beq.n	800154a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001568:	4b43      	ldr	r3, [pc, #268]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	4940      	ldr	r1, [pc, #256]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 8001578:	4313      	orrs	r3, r2
 800157a:	600b      	str	r3, [r1, #0]
 800157c:	e015      	b.n	80015aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800157e:	4b3f      	ldr	r3, [pc, #252]	; (800167c <HAL_RCC_OscConfig+0x2b0>)
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001584:	f7ff fc40 	bl	8000e08 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800158c:	f7ff fc3c 	bl	8000e08 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e184      	b.n	80018a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800159e:	4b36      	ldr	r3, [pc, #216]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f0      	bne.n	800158c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0308 	and.w	r3, r3, #8
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d030      	beq.n	8001618 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d016      	beq.n	80015ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015be:	4b30      	ldr	r3, [pc, #192]	; (8001680 <HAL_RCC_OscConfig+0x2b4>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c4:	f7ff fc20 	bl	8000e08 <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015cc:	f7ff fc1c 	bl	8000e08 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e164      	b.n	80018a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015de:	4b26      	ldr	r3, [pc, #152]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 80015e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0f0      	beq.n	80015cc <HAL_RCC_OscConfig+0x200>
 80015ea:	e015      	b.n	8001618 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ec:	4b24      	ldr	r3, [pc, #144]	; (8001680 <HAL_RCC_OscConfig+0x2b4>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f2:	f7ff fc09 	bl	8000e08 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015fa:	f7ff fc05 	bl	8000e08 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e14d      	b.n	80018a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800160c:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 800160e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1f0      	bne.n	80015fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b00      	cmp	r3, #0
 8001622:	f000 80a0 	beq.w	8001766 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001626:	2300      	movs	r3, #0
 8001628:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800162a:	4b13      	ldr	r3, [pc, #76]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d10f      	bne.n	8001656 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	4a0e      	ldr	r2, [pc, #56]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 8001640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001644:	6413      	str	r3, [r2, #64]	; 0x40
 8001646:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001652:	2301      	movs	r3, #1
 8001654:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <HAL_RCC_OscConfig+0x2b8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165e:	2b00      	cmp	r3, #0
 8001660:	d121      	bne.n	80016a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001662:	4b08      	ldr	r3, [pc, #32]	; (8001684 <HAL_RCC_OscConfig+0x2b8>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a07      	ldr	r2, [pc, #28]	; (8001684 <HAL_RCC_OscConfig+0x2b8>)
 8001668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800166c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800166e:	f7ff fbcb 	bl	8000e08 <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001674:	e011      	b.n	800169a <HAL_RCC_OscConfig+0x2ce>
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800
 800167c:	42470000 	.word	0x42470000
 8001680:	42470e80 	.word	0x42470e80
 8001684:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001688:	f7ff fbbe 	bl	8000e08 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e106      	b.n	80018a8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169a:	4b85      	ldr	r3, [pc, #532]	; (80018b0 <HAL_RCC_OscConfig+0x4e4>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0f0      	beq.n	8001688 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d106      	bne.n	80016bc <HAL_RCC_OscConfig+0x2f0>
 80016ae:	4b81      	ldr	r3, [pc, #516]	; (80018b4 <HAL_RCC_OscConfig+0x4e8>)
 80016b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b2:	4a80      	ldr	r2, [pc, #512]	; (80018b4 <HAL_RCC_OscConfig+0x4e8>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6713      	str	r3, [r2, #112]	; 0x70
 80016ba:	e01c      	b.n	80016f6 <HAL_RCC_OscConfig+0x32a>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	2b05      	cmp	r3, #5
 80016c2:	d10c      	bne.n	80016de <HAL_RCC_OscConfig+0x312>
 80016c4:	4b7b      	ldr	r3, [pc, #492]	; (80018b4 <HAL_RCC_OscConfig+0x4e8>)
 80016c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c8:	4a7a      	ldr	r2, [pc, #488]	; (80018b4 <HAL_RCC_OscConfig+0x4e8>)
 80016ca:	f043 0304 	orr.w	r3, r3, #4
 80016ce:	6713      	str	r3, [r2, #112]	; 0x70
 80016d0:	4b78      	ldr	r3, [pc, #480]	; (80018b4 <HAL_RCC_OscConfig+0x4e8>)
 80016d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d4:	4a77      	ldr	r2, [pc, #476]	; (80018b4 <HAL_RCC_OscConfig+0x4e8>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	6713      	str	r3, [r2, #112]	; 0x70
 80016dc:	e00b      	b.n	80016f6 <HAL_RCC_OscConfig+0x32a>
 80016de:	4b75      	ldr	r3, [pc, #468]	; (80018b4 <HAL_RCC_OscConfig+0x4e8>)
 80016e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e2:	4a74      	ldr	r2, [pc, #464]	; (80018b4 <HAL_RCC_OscConfig+0x4e8>)
 80016e4:	f023 0301 	bic.w	r3, r3, #1
 80016e8:	6713      	str	r3, [r2, #112]	; 0x70
 80016ea:	4b72      	ldr	r3, [pc, #456]	; (80018b4 <HAL_RCC_OscConfig+0x4e8>)
 80016ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ee:	4a71      	ldr	r2, [pc, #452]	; (80018b4 <HAL_RCC_OscConfig+0x4e8>)
 80016f0:	f023 0304 	bic.w	r3, r3, #4
 80016f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d015      	beq.n	800172a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016fe:	f7ff fb83 	bl	8000e08 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001704:	e00a      	b.n	800171c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001706:	f7ff fb7f 	bl	8000e08 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	f241 3288 	movw	r2, #5000	; 0x1388
 8001714:	4293      	cmp	r3, r2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e0c5      	b.n	80018a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800171c:	4b65      	ldr	r3, [pc, #404]	; (80018b4 <HAL_RCC_OscConfig+0x4e8>)
 800171e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0ee      	beq.n	8001706 <HAL_RCC_OscConfig+0x33a>
 8001728:	e014      	b.n	8001754 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800172a:	f7ff fb6d 	bl	8000e08 <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001730:	e00a      	b.n	8001748 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001732:	f7ff fb69 	bl	8000e08 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001740:	4293      	cmp	r3, r2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e0af      	b.n	80018a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001748:	4b5a      	ldr	r3, [pc, #360]	; (80018b4 <HAL_RCC_OscConfig+0x4e8>)
 800174a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1ee      	bne.n	8001732 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001754:	7dfb      	ldrb	r3, [r7, #23]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d105      	bne.n	8001766 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800175a:	4b56      	ldr	r3, [pc, #344]	; (80018b4 <HAL_RCC_OscConfig+0x4e8>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	4a55      	ldr	r2, [pc, #340]	; (80018b4 <HAL_RCC_OscConfig+0x4e8>)
 8001760:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001764:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 809b 	beq.w	80018a6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001770:	4b50      	ldr	r3, [pc, #320]	; (80018b4 <HAL_RCC_OscConfig+0x4e8>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 030c 	and.w	r3, r3, #12
 8001778:	2b08      	cmp	r3, #8
 800177a:	d05c      	beq.n	8001836 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	2b02      	cmp	r3, #2
 8001782:	d141      	bne.n	8001808 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001784:	4b4c      	ldr	r3, [pc, #304]	; (80018b8 <HAL_RCC_OscConfig+0x4ec>)
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178a:	f7ff fb3d 	bl	8000e08 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001792:	f7ff fb39 	bl	8000e08 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e081      	b.n	80018a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017a4:	4b43      	ldr	r3, [pc, #268]	; (80018b4 <HAL_RCC_OscConfig+0x4e8>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1f0      	bne.n	8001792 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	69da      	ldr	r2, [r3, #28]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	431a      	orrs	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017be:	019b      	lsls	r3, r3, #6
 80017c0:	431a      	orrs	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c6:	085b      	lsrs	r3, r3, #1
 80017c8:	3b01      	subs	r3, #1
 80017ca:	041b      	lsls	r3, r3, #16
 80017cc:	431a      	orrs	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d2:	061b      	lsls	r3, r3, #24
 80017d4:	4937      	ldr	r1, [pc, #220]	; (80018b4 <HAL_RCC_OscConfig+0x4e8>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017da:	4b37      	ldr	r3, [pc, #220]	; (80018b8 <HAL_RCC_OscConfig+0x4ec>)
 80017dc:	2201      	movs	r2, #1
 80017de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e0:	f7ff fb12 	bl	8000e08 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e8:	f7ff fb0e 	bl	8000e08 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e056      	b.n	80018a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017fa:	4b2e      	ldr	r3, [pc, #184]	; (80018b4 <HAL_RCC_OscConfig+0x4e8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0f0      	beq.n	80017e8 <HAL_RCC_OscConfig+0x41c>
 8001806:	e04e      	b.n	80018a6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001808:	4b2b      	ldr	r3, [pc, #172]	; (80018b8 <HAL_RCC_OscConfig+0x4ec>)
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180e:	f7ff fafb 	bl	8000e08 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001816:	f7ff faf7 	bl	8000e08 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e03f      	b.n	80018a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001828:	4b22      	ldr	r3, [pc, #136]	; (80018b4 <HAL_RCC_OscConfig+0x4e8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1f0      	bne.n	8001816 <HAL_RCC_OscConfig+0x44a>
 8001834:	e037      	b.n	80018a6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d101      	bne.n	8001842 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e032      	b.n	80018a8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001842:	4b1c      	ldr	r3, [pc, #112]	; (80018b4 <HAL_RCC_OscConfig+0x4e8>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d028      	beq.n	80018a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800185a:	429a      	cmp	r2, r3
 800185c:	d121      	bne.n	80018a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001868:	429a      	cmp	r2, r3
 800186a:	d11a      	bne.n	80018a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001872:	4013      	ands	r3, r2
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001878:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800187a:	4293      	cmp	r3, r2
 800187c:	d111      	bne.n	80018a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001888:	085b      	lsrs	r3, r3, #1
 800188a:	3b01      	subs	r3, #1
 800188c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800188e:	429a      	cmp	r2, r3
 8001890:	d107      	bne.n	80018a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800189e:	429a      	cmp	r2, r3
 80018a0:	d001      	beq.n	80018a6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e000      	b.n	80018a8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40007000 	.word	0x40007000
 80018b4:	40023800 	.word	0x40023800
 80018b8:	42470060 	.word	0x42470060

080018bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e0cc      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018d0:	4b68      	ldr	r3, [pc, #416]	; (8001a74 <HAL_RCC_ClockConfig+0x1b8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d90c      	bls.n	80018f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018de:	4b65      	ldr	r3, [pc, #404]	; (8001a74 <HAL_RCC_ClockConfig+0x1b8>)
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e6:	4b63      	ldr	r3, [pc, #396]	; (8001a74 <HAL_RCC_ClockConfig+0x1b8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d001      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e0b8      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d020      	beq.n	8001946 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b00      	cmp	r3, #0
 800190e:	d005      	beq.n	800191c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001910:	4b59      	ldr	r3, [pc, #356]	; (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	4a58      	ldr	r2, [pc, #352]	; (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800191a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0308 	and.w	r3, r3, #8
 8001924:	2b00      	cmp	r3, #0
 8001926:	d005      	beq.n	8001934 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001928:	4b53      	ldr	r3, [pc, #332]	; (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	4a52      	ldr	r2, [pc, #328]	; (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 800192e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001932:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001934:	4b50      	ldr	r3, [pc, #320]	; (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	494d      	ldr	r1, [pc, #308]	; (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	4313      	orrs	r3, r2
 8001944:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b00      	cmp	r3, #0
 8001950:	d044      	beq.n	80019dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d107      	bne.n	800196a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195a:	4b47      	ldr	r3, [pc, #284]	; (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d119      	bne.n	800199a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e07f      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b02      	cmp	r3, #2
 8001970:	d003      	beq.n	800197a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001976:	2b03      	cmp	r3, #3
 8001978:	d107      	bne.n	800198a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800197a:	4b3f      	ldr	r3, [pc, #252]	; (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d109      	bne.n	800199a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e06f      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800198a:	4b3b      	ldr	r3, [pc, #236]	; (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e067      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800199a:	4b37      	ldr	r3, [pc, #220]	; (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f023 0203 	bic.w	r2, r3, #3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	4934      	ldr	r1, [pc, #208]	; (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019ac:	f7ff fa2c 	bl	8000e08 <HAL_GetTick>
 80019b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b2:	e00a      	b.n	80019ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b4:	f7ff fa28 	bl	8000e08 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e04f      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ca:	4b2b      	ldr	r3, [pc, #172]	; (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 020c 	and.w	r2, r3, #12
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	429a      	cmp	r2, r3
 80019da:	d1eb      	bne.n	80019b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019dc:	4b25      	ldr	r3, [pc, #148]	; (8001a74 <HAL_RCC_ClockConfig+0x1b8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d20c      	bcs.n	8001a04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ea:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <HAL_RCC_ClockConfig+0x1b8>)
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f2:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <HAL_RCC_ClockConfig+0x1b8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d001      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e032      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d008      	beq.n	8001a22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a10:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	4916      	ldr	r1, [pc, #88]	; (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0308 	and.w	r3, r3, #8
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d009      	beq.n	8001a42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a2e:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	490e      	ldr	r1, [pc, #56]	; (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a42:	f000 f821 	bl	8001a88 <HAL_RCC_GetSysClockFreq>
 8001a46:	4602      	mov	r2, r0
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	091b      	lsrs	r3, r3, #4
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	490a      	ldr	r1, [pc, #40]	; (8001a7c <HAL_RCC_ClockConfig+0x1c0>)
 8001a54:	5ccb      	ldrb	r3, [r1, r3]
 8001a56:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5a:	4a09      	ldr	r2, [pc, #36]	; (8001a80 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <HAL_RCC_ClockConfig+0x1c8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff f8da 	bl	8000c1c <HAL_InitTick>

  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40023c00 	.word	0x40023c00
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	08007dd4 	.word	0x08007dd4
 8001a80:	20000000 	.word	0x20000000
 8001a84:	20000004 	.word	0x20000004

08001a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a8c:	b084      	sub	sp, #16
 8001a8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	607b      	str	r3, [r7, #4]
 8001a94:	2300      	movs	r3, #0
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	2300      	movs	r3, #0
 8001a9a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001aa0:	4b67      	ldr	r3, [pc, #412]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 030c 	and.w	r3, r3, #12
 8001aa8:	2b08      	cmp	r3, #8
 8001aaa:	d00d      	beq.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x40>
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	f200 80bd 	bhi.w	8001c2c <HAL_RCC_GetSysClockFreq+0x1a4>
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d002      	beq.n	8001abc <HAL_RCC_GetSysClockFreq+0x34>
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	d003      	beq.n	8001ac2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001aba:	e0b7      	b.n	8001c2c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001abc:	4b61      	ldr	r3, [pc, #388]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001abe:	60bb      	str	r3, [r7, #8]
       break;
 8001ac0:	e0b7      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ac2:	4b61      	ldr	r3, [pc, #388]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001ac4:	60bb      	str	r3, [r7, #8]
      break;
 8001ac6:	e0b4      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ac8:	4b5d      	ldr	r3, [pc, #372]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ad0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ad2:	4b5b      	ldr	r3, [pc, #364]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d04d      	beq.n	8001b7a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ade:	4b58      	ldr	r3, [pc, #352]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	099b      	lsrs	r3, r3, #6
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	f04f 0300 	mov.w	r3, #0
 8001aea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001aee:	f04f 0100 	mov.w	r1, #0
 8001af2:	ea02 0800 	and.w	r8, r2, r0
 8001af6:	ea03 0901 	and.w	r9, r3, r1
 8001afa:	4640      	mov	r0, r8
 8001afc:	4649      	mov	r1, r9
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	f04f 0300 	mov.w	r3, #0
 8001b06:	014b      	lsls	r3, r1, #5
 8001b08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b0c:	0142      	lsls	r2, r0, #5
 8001b0e:	4610      	mov	r0, r2
 8001b10:	4619      	mov	r1, r3
 8001b12:	ebb0 0008 	subs.w	r0, r0, r8
 8001b16:	eb61 0109 	sbc.w	r1, r1, r9
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	f04f 0300 	mov.w	r3, #0
 8001b22:	018b      	lsls	r3, r1, #6
 8001b24:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b28:	0182      	lsls	r2, r0, #6
 8001b2a:	1a12      	subs	r2, r2, r0
 8001b2c:	eb63 0301 	sbc.w	r3, r3, r1
 8001b30:	f04f 0000 	mov.w	r0, #0
 8001b34:	f04f 0100 	mov.w	r1, #0
 8001b38:	00d9      	lsls	r1, r3, #3
 8001b3a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b3e:	00d0      	lsls	r0, r2, #3
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	eb12 0208 	adds.w	r2, r2, r8
 8001b48:	eb43 0309 	adc.w	r3, r3, r9
 8001b4c:	f04f 0000 	mov.w	r0, #0
 8001b50:	f04f 0100 	mov.w	r1, #0
 8001b54:	0259      	lsls	r1, r3, #9
 8001b56:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001b5a:	0250      	lsls	r0, r2, #9
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4610      	mov	r0, r2
 8001b62:	4619      	mov	r1, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	461a      	mov	r2, r3
 8001b68:	f04f 0300 	mov.w	r3, #0
 8001b6c:	f7fe fb7a 	bl	8000264 <__aeabi_uldivmod>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4613      	mov	r3, r2
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	e04a      	b.n	8001c10 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b7a:	4b31      	ldr	r3, [pc, #196]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	099b      	lsrs	r3, r3, #6
 8001b80:	461a      	mov	r2, r3
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b8a:	f04f 0100 	mov.w	r1, #0
 8001b8e:	ea02 0400 	and.w	r4, r2, r0
 8001b92:	ea03 0501 	and.w	r5, r3, r1
 8001b96:	4620      	mov	r0, r4
 8001b98:	4629      	mov	r1, r5
 8001b9a:	f04f 0200 	mov.w	r2, #0
 8001b9e:	f04f 0300 	mov.w	r3, #0
 8001ba2:	014b      	lsls	r3, r1, #5
 8001ba4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ba8:	0142      	lsls	r2, r0, #5
 8001baa:	4610      	mov	r0, r2
 8001bac:	4619      	mov	r1, r3
 8001bae:	1b00      	subs	r0, r0, r4
 8001bb0:	eb61 0105 	sbc.w	r1, r1, r5
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	f04f 0300 	mov.w	r3, #0
 8001bbc:	018b      	lsls	r3, r1, #6
 8001bbe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001bc2:	0182      	lsls	r2, r0, #6
 8001bc4:	1a12      	subs	r2, r2, r0
 8001bc6:	eb63 0301 	sbc.w	r3, r3, r1
 8001bca:	f04f 0000 	mov.w	r0, #0
 8001bce:	f04f 0100 	mov.w	r1, #0
 8001bd2:	00d9      	lsls	r1, r3, #3
 8001bd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001bd8:	00d0      	lsls	r0, r2, #3
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	1912      	adds	r2, r2, r4
 8001be0:	eb45 0303 	adc.w	r3, r5, r3
 8001be4:	f04f 0000 	mov.w	r0, #0
 8001be8:	f04f 0100 	mov.w	r1, #0
 8001bec:	0299      	lsls	r1, r3, #10
 8001bee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001bf2:	0290      	lsls	r0, r2, #10
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4610      	mov	r0, r2
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	f04f 0300 	mov.w	r3, #0
 8001c04:	f7fe fb2e 	bl	8000264 <__aeabi_uldivmod>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c10:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	0c1b      	lsrs	r3, r3, #16
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c28:	60bb      	str	r3, [r7, #8]
      break;
 8001c2a:	e002      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c2c:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001c2e:	60bb      	str	r3, [r7, #8]
      break;
 8001c30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c32:	68bb      	ldr	r3, [r7, #8]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c3e:	bf00      	nop
 8001c40:	40023800 	.word	0x40023800
 8001c44:	00f42400 	.word	0x00f42400
 8001c48:	007a1200 	.word	0x007a1200

08001c4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c50:	4b03      	ldr	r3, [pc, #12]	; (8001c60 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c52:	681b      	ldr	r3, [r3, #0]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20000000 	.word	0x20000000

08001c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c68:	f7ff fff0 	bl	8001c4c <HAL_RCC_GetHCLKFreq>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	0a9b      	lsrs	r3, r3, #10
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	4903      	ldr	r1, [pc, #12]	; (8001c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c7a:	5ccb      	ldrb	r3, [r1, r3]
 8001c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40023800 	.word	0x40023800
 8001c88:	08007de4 	.word	0x08007de4

08001c8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	220f      	movs	r2, #15
 8001c9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c9c:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <HAL_RCC_GetClockConfig+0x5c>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 0203 	and.w	r2, r3, #3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <HAL_RCC_GetClockConfig+0x5c>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <HAL_RCC_GetClockConfig+0x5c>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001cc0:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <HAL_RCC_GetClockConfig+0x5c>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	08db      	lsrs	r3, r3, #3
 8001cc6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cce:	4b07      	ldr	r3, [pc, #28]	; (8001cec <HAL_RCC_GetClockConfig+0x60>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0207 	and.w	r2, r3, #7
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	601a      	str	r2, [r3, #0]
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40023c00 	.word	0x40023c00

08001cf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e041      	b.n	8001d86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d106      	bne.n	8001d1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f839 	bl	8001d8e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2202      	movs	r2, #2
 8001d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3304      	adds	r3, #4
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4610      	mov	r0, r2
 8001d30:	f000 f9d8 	bl	80020e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
	...

08001da4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d001      	beq.n	8001dbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e04e      	b.n	8001e5a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0201 	orr.w	r2, r2, #1
 8001dd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a23      	ldr	r2, [pc, #140]	; (8001e68 <HAL_TIM_Base_Start_IT+0xc4>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d022      	beq.n	8001e24 <HAL_TIM_Base_Start_IT+0x80>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de6:	d01d      	beq.n	8001e24 <HAL_TIM_Base_Start_IT+0x80>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a1f      	ldr	r2, [pc, #124]	; (8001e6c <HAL_TIM_Base_Start_IT+0xc8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d018      	beq.n	8001e24 <HAL_TIM_Base_Start_IT+0x80>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a1e      	ldr	r2, [pc, #120]	; (8001e70 <HAL_TIM_Base_Start_IT+0xcc>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d013      	beq.n	8001e24 <HAL_TIM_Base_Start_IT+0x80>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a1c      	ldr	r2, [pc, #112]	; (8001e74 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d00e      	beq.n	8001e24 <HAL_TIM_Base_Start_IT+0x80>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a1b      	ldr	r2, [pc, #108]	; (8001e78 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d009      	beq.n	8001e24 <HAL_TIM_Base_Start_IT+0x80>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a19      	ldr	r2, [pc, #100]	; (8001e7c <HAL_TIM_Base_Start_IT+0xd8>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d004      	beq.n	8001e24 <HAL_TIM_Base_Start_IT+0x80>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a18      	ldr	r2, [pc, #96]	; (8001e80 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d111      	bne.n	8001e48 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2b06      	cmp	r3, #6
 8001e34:	d010      	beq.n	8001e58 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f042 0201 	orr.w	r2, r2, #1
 8001e44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e46:	e007      	b.n	8001e58 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0201 	orr.w	r2, r2, #1
 8001e56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40010000 	.word	0x40010000
 8001e6c:	40000400 	.word	0x40000400
 8001e70:	40000800 	.word	0x40000800
 8001e74:	40000c00 	.word	0x40000c00
 8001e78:	40010400 	.word	0x40010400
 8001e7c:	40014000 	.word	0x40014000
 8001e80:	40001800 	.word	0x40001800

08001e84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d122      	bne.n	8001ee0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d11b      	bne.n	8001ee0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f06f 0202 	mvn.w	r2, #2
 8001eb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f8ee 	bl	80020a8 <HAL_TIM_IC_CaptureCallback>
 8001ecc:	e005      	b.n	8001eda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f8e0 	bl	8002094 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 f8f1 	bl	80020bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	d122      	bne.n	8001f34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	d11b      	bne.n	8001f34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f06f 0204 	mvn.w	r2, #4
 8001f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2202      	movs	r2, #2
 8001f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f8c4 	bl	80020a8 <HAL_TIM_IC_CaptureCallback>
 8001f20:	e005      	b.n	8001f2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f8b6 	bl	8002094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f8c7 	bl	80020bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d122      	bne.n	8001f88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	d11b      	bne.n	8001f88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f06f 0208 	mvn.w	r2, #8
 8001f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2204      	movs	r2, #4
 8001f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f89a 	bl	80020a8 <HAL_TIM_IC_CaptureCallback>
 8001f74:	e005      	b.n	8001f82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f88c 	bl	8002094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f89d 	bl	80020bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	f003 0310 	and.w	r3, r3, #16
 8001f92:	2b10      	cmp	r3, #16
 8001f94:	d122      	bne.n	8001fdc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	f003 0310 	and.w	r3, r3, #16
 8001fa0:	2b10      	cmp	r3, #16
 8001fa2:	d11b      	bne.n	8001fdc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f06f 0210 	mvn.w	r2, #16
 8001fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2208      	movs	r2, #8
 8001fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f870 	bl	80020a8 <HAL_TIM_IC_CaptureCallback>
 8001fc8:	e005      	b.n	8001fd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f862 	bl	8002094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f873 	bl	80020bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d10e      	bne.n	8002008 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d107      	bne.n	8002008 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f06f 0201 	mvn.w	r2, #1
 8002000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7fe fdca 	bl	8000b9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002012:	2b80      	cmp	r3, #128	; 0x80
 8002014:	d10e      	bne.n	8002034 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002020:	2b80      	cmp	r3, #128	; 0x80
 8002022:	d107      	bne.n	8002034 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800202c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f902 	bl	8002238 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203e:	2b40      	cmp	r3, #64	; 0x40
 8002040:	d10e      	bne.n	8002060 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800204c:	2b40      	cmp	r3, #64	; 0x40
 800204e:	d107      	bne.n	8002060 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f838 	bl	80020d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	f003 0320 	and.w	r3, r3, #32
 800206a:	2b20      	cmp	r3, #32
 800206c:	d10e      	bne.n	800208c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	f003 0320 	and.w	r3, r3, #32
 8002078:	2b20      	cmp	r3, #32
 800207a:	d107      	bne.n	800208c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f06f 0220 	mvn.w	r2, #32
 8002084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f8cc 	bl	8002224 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800208c:	bf00      	nop
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a40      	ldr	r2, [pc, #256]	; (80021f8 <TIM_Base_SetConfig+0x114>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d013      	beq.n	8002124 <TIM_Base_SetConfig+0x40>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002102:	d00f      	beq.n	8002124 <TIM_Base_SetConfig+0x40>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a3d      	ldr	r2, [pc, #244]	; (80021fc <TIM_Base_SetConfig+0x118>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d00b      	beq.n	8002124 <TIM_Base_SetConfig+0x40>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a3c      	ldr	r2, [pc, #240]	; (8002200 <TIM_Base_SetConfig+0x11c>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d007      	beq.n	8002124 <TIM_Base_SetConfig+0x40>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a3b      	ldr	r2, [pc, #236]	; (8002204 <TIM_Base_SetConfig+0x120>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d003      	beq.n	8002124 <TIM_Base_SetConfig+0x40>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a3a      	ldr	r2, [pc, #232]	; (8002208 <TIM_Base_SetConfig+0x124>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d108      	bne.n	8002136 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800212a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	4313      	orrs	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a2f      	ldr	r2, [pc, #188]	; (80021f8 <TIM_Base_SetConfig+0x114>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d02b      	beq.n	8002196 <TIM_Base_SetConfig+0xb2>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002144:	d027      	beq.n	8002196 <TIM_Base_SetConfig+0xb2>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a2c      	ldr	r2, [pc, #176]	; (80021fc <TIM_Base_SetConfig+0x118>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d023      	beq.n	8002196 <TIM_Base_SetConfig+0xb2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a2b      	ldr	r2, [pc, #172]	; (8002200 <TIM_Base_SetConfig+0x11c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d01f      	beq.n	8002196 <TIM_Base_SetConfig+0xb2>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a2a      	ldr	r2, [pc, #168]	; (8002204 <TIM_Base_SetConfig+0x120>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d01b      	beq.n	8002196 <TIM_Base_SetConfig+0xb2>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a29      	ldr	r2, [pc, #164]	; (8002208 <TIM_Base_SetConfig+0x124>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d017      	beq.n	8002196 <TIM_Base_SetConfig+0xb2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a28      	ldr	r2, [pc, #160]	; (800220c <TIM_Base_SetConfig+0x128>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d013      	beq.n	8002196 <TIM_Base_SetConfig+0xb2>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a27      	ldr	r2, [pc, #156]	; (8002210 <TIM_Base_SetConfig+0x12c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d00f      	beq.n	8002196 <TIM_Base_SetConfig+0xb2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a26      	ldr	r2, [pc, #152]	; (8002214 <TIM_Base_SetConfig+0x130>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d00b      	beq.n	8002196 <TIM_Base_SetConfig+0xb2>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a25      	ldr	r2, [pc, #148]	; (8002218 <TIM_Base_SetConfig+0x134>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d007      	beq.n	8002196 <TIM_Base_SetConfig+0xb2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a24      	ldr	r2, [pc, #144]	; (800221c <TIM_Base_SetConfig+0x138>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d003      	beq.n	8002196 <TIM_Base_SetConfig+0xb2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a23      	ldr	r2, [pc, #140]	; (8002220 <TIM_Base_SetConfig+0x13c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d108      	bne.n	80021a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800219c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a0a      	ldr	r2, [pc, #40]	; (80021f8 <TIM_Base_SetConfig+0x114>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d003      	beq.n	80021dc <TIM_Base_SetConfig+0xf8>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a0c      	ldr	r2, [pc, #48]	; (8002208 <TIM_Base_SetConfig+0x124>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d103      	bne.n	80021e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	691a      	ldr	r2, [r3, #16]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	615a      	str	r2, [r3, #20]
}
 80021ea:	bf00      	nop
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40010000 	.word	0x40010000
 80021fc:	40000400 	.word	0x40000400
 8002200:	40000800 	.word	0x40000800
 8002204:	40000c00 	.word	0x40000c00
 8002208:	40010400 	.word	0x40010400
 800220c:	40014000 	.word	0x40014000
 8002210:	40014400 	.word	0x40014400
 8002214:	40014800 	.word	0x40014800
 8002218:	40001800 	.word	0x40001800
 800221c:	40001c00 	.word	0x40001c00
 8002220:	40002000 	.word	0x40002000

08002224 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f103 0208 	add.w	r2, r3, #8
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f04f 32ff 	mov.w	r2, #4294967295
 8002264:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f103 0208 	add.w	r2, r3, #8
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f103 0208 	add.w	r2, r3, #8
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80022a6:	b480      	push	{r7}
 80022a8:	b085      	sub	sp, #20
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
 80022ae:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	1c5a      	adds	r2, r3, #1
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	601a      	str	r2, [r3, #0]
}
 80022e2:	bf00      	nop
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80022ee:	b480      	push	{r7}
 80022f0:	b085      	sub	sp, #20
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
 80022f6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002304:	d103      	bne.n	800230e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	e00c      	b.n	8002328 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3308      	adds	r3, #8
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	e002      	b.n	800231c <vListInsert+0x2e>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	429a      	cmp	r2, r3
 8002326:	d2f6      	bcs.n	8002316 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	601a      	str	r2, [r3, #0]
}
 8002354:	bf00      	nop
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6892      	ldr	r2, [r2, #8]
 8002376:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6852      	ldr	r2, [r2, #4]
 8002380:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	429a      	cmp	r2, r3
 800238a:	d103      	bne.n	8002394 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	1e5a      	subs	r2, r3, #1
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10a      	bne.n	80023de <xQueueGenericReset+0x2a>
        __asm volatile
 80023c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023cc:	f383 8811 	msr	BASEPRI, r3
 80023d0:	f3bf 8f6f 	isb	sy
 80023d4:	f3bf 8f4f 	dsb	sy
 80023d8:	60bb      	str	r3, [r7, #8]
    }
 80023da:	bf00      	nop
 80023dc:	e7fe      	b.n	80023dc <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80023de:	f002 fb11 	bl	8004a04 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ea:	68f9      	ldr	r1, [r7, #12]
 80023ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023ee:	fb01 f303 	mul.w	r3, r1, r3
 80023f2:	441a      	add	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800240e:	3b01      	subs	r3, #1
 8002410:	68f9      	ldr	r1, [r7, #12]
 8002412:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002414:	fb01 f303 	mul.w	r3, r1, r3
 8002418:	441a      	add	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	22ff      	movs	r2, #255	; 0xff
 8002422:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	22ff      	movs	r2, #255	; 0xff
 800242a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d114      	bne.n	800245e <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d01a      	beq.n	8002472 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	3310      	adds	r3, #16
 8002440:	4618      	mov	r0, r3
 8002442:	f001 f9c9 	bl	80037d8 <xTaskRemoveFromEventList>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d012      	beq.n	8002472 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800244c:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <xQueueGenericReset+0xcc>)
 800244e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	f3bf 8f4f 	dsb	sy
 8002458:	f3bf 8f6f 	isb	sy
 800245c:	e009      	b.n	8002472 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	3310      	adds	r3, #16
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff fef2 	bl	800224c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	3324      	adds	r3, #36	; 0x24
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff feed 	bl	800224c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002472:	f002 faf7 	bl	8004a64 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002476:	2301      	movs	r3, #1
}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	e000ed04 	.word	0xe000ed04

08002484 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002484:	b580      	push	{r7, lr}
 8002486:	b08c      	sub	sp, #48	; 0x30
 8002488:	af02      	add	r7, sp, #8
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	4613      	mov	r3, r2
 8002490:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10a      	bne.n	80024ae <xQueueGenericCreate+0x2a>
        __asm volatile
 8002498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800249c:	f383 8811 	msr	BASEPRI, r3
 80024a0:	f3bf 8f6f 	isb	sy
 80024a4:	f3bf 8f4f 	dsb	sy
 80024a8:	61bb      	str	r3, [r7, #24]
    }
 80024aa:	bf00      	nop
 80024ac:	e7fe      	b.n	80024ac <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	68ba      	ldr	r2, [r7, #8]
 80024b2:	fb02 f303 	mul.w	r3, r2, r3
 80024b6:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d006      	beq.n	80024cc <xQueueGenericCreate+0x48>
 80024be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d101      	bne.n	80024d0 <xQueueGenericCreate+0x4c>
 80024cc:	2301      	movs	r3, #1
 80024ce:	e000      	b.n	80024d2 <xQueueGenericCreate+0x4e>
 80024d0:	2300      	movs	r3, #0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10a      	bne.n	80024ec <xQueueGenericCreate+0x68>
        __asm volatile
 80024d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024da:	f383 8811 	msr	BASEPRI, r3
 80024de:	f3bf 8f6f 	isb	sy
 80024e2:	f3bf 8f4f 	dsb	sy
 80024e6:	617b      	str	r3, [r7, #20]
    }
 80024e8:	bf00      	nop
 80024ea:	e7fe      	b.n	80024ea <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80024f2:	d90a      	bls.n	800250a <xQueueGenericCreate+0x86>
        __asm volatile
 80024f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f8:	f383 8811 	msr	BASEPRI, r3
 80024fc:	f3bf 8f6f 	isb	sy
 8002500:	f3bf 8f4f 	dsb	sy
 8002504:	613b      	str	r3, [r7, #16]
    }
 8002506:	bf00      	nop
 8002508:	e7fe      	b.n	8002508 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	3350      	adds	r3, #80	; 0x50
 800250e:	4618      	mov	r0, r3
 8002510:	f002 fba4 	bl	8004c5c <pvPortMalloc>
 8002514:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002516:	6a3b      	ldr	r3, [r7, #32]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00d      	beq.n	8002538 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800251c:	6a3b      	ldr	r3, [r7, #32]
 800251e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	3350      	adds	r3, #80	; 0x50
 8002524:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002526:	79fa      	ldrb	r2, [r7, #7]
 8002528:	6a3b      	ldr	r3, [r7, #32]
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	4613      	mov	r3, r2
 800252e:	69fa      	ldr	r2, [r7, #28]
 8002530:	68b9      	ldr	r1, [r7, #8]
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f000 f805 	bl	8002542 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002538:	6a3b      	ldr	r3, [r7, #32]
    }
 800253a:	4618      	mov	r0, r3
 800253c:	3728      	adds	r7, #40	; 0x28
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b084      	sub	sp, #16
 8002546:	af00      	add	r7, sp, #0
 8002548:	60f8      	str	r0, [r7, #12]
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
 800254e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d103      	bne.n	800255e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	e002      	b.n	8002564 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	68ba      	ldr	r2, [r7, #8]
 800256e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002570:	2101      	movs	r1, #1
 8002572:	69b8      	ldr	r0, [r7, #24]
 8002574:	f7ff ff1e 	bl	80023b4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	78fa      	ldrb	r2, [r7, #3]
 800257c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002580:	78fb      	ldrb	r3, [r7, #3]
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	68f9      	ldr	r1, [r7, #12]
 8002586:	2073      	movs	r0, #115	; 0x73
 8002588:	f004 fb20 	bl	8006bcc <SEGGER_SYSVIEW_RecordU32x3>
}
 800258c:	bf00      	nop
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b090      	sub	sp, #64	; 0x40
 8002598:	af02      	add	r7, sp, #8
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
 80025a0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80025a2:	2300      	movs	r3, #0
 80025a4:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80025aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10a      	bne.n	80025c6 <xQueueGenericSend+0x32>
        __asm volatile
 80025b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b4:	f383 8811 	msr	BASEPRI, r3
 80025b8:	f3bf 8f6f 	isb	sy
 80025bc:	f3bf 8f4f 	dsb	sy
 80025c0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80025c2:	bf00      	nop
 80025c4:	e7fe      	b.n	80025c4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d103      	bne.n	80025d4 <xQueueGenericSend+0x40>
 80025cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <xQueueGenericSend+0x44>
 80025d4:	2301      	movs	r3, #1
 80025d6:	e000      	b.n	80025da <xQueueGenericSend+0x46>
 80025d8:	2300      	movs	r3, #0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10a      	bne.n	80025f4 <xQueueGenericSend+0x60>
        __asm volatile
 80025de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e2:	f383 8811 	msr	BASEPRI, r3
 80025e6:	f3bf 8f6f 	isb	sy
 80025ea:	f3bf 8f4f 	dsb	sy
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80025f0:	bf00      	nop
 80025f2:	e7fe      	b.n	80025f2 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d103      	bne.n	8002602 <xQueueGenericSend+0x6e>
 80025fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d101      	bne.n	8002606 <xQueueGenericSend+0x72>
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <xQueueGenericSend+0x74>
 8002606:	2300      	movs	r3, #0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10a      	bne.n	8002622 <xQueueGenericSend+0x8e>
        __asm volatile
 800260c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002610:	f383 8811 	msr	BASEPRI, r3
 8002614:	f3bf 8f6f 	isb	sy
 8002618:	f3bf 8f4f 	dsb	sy
 800261c:	623b      	str	r3, [r7, #32]
    }
 800261e:	bf00      	nop
 8002620:	e7fe      	b.n	8002620 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002622:	f001 fa79 	bl	8003b18 <xTaskGetSchedulerState>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d102      	bne.n	8002632 <xQueueGenericSend+0x9e>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <xQueueGenericSend+0xa2>
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <xQueueGenericSend+0xa4>
 8002636:	2300      	movs	r3, #0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10a      	bne.n	8002652 <xQueueGenericSend+0xbe>
        __asm volatile
 800263c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002640:	f383 8811 	msr	BASEPRI, r3
 8002644:	f3bf 8f6f 	isb	sy
 8002648:	f3bf 8f4f 	dsb	sy
 800264c:	61fb      	str	r3, [r7, #28]
    }
 800264e:	bf00      	nop
 8002650:	e7fe      	b.n	8002650 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002652:	f002 f9d7 	bl	8004a04 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800265a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800265e:	429a      	cmp	r2, r3
 8002660:	d302      	bcc.n	8002668 <xQueueGenericSend+0xd4>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	2b02      	cmp	r3, #2
 8002666:	d136      	bne.n	80026d6 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8002668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266a:	4618      	mov	r0, r3
 800266c:	f005 f8ea 	bl	8007844 <SEGGER_SYSVIEW_ShrinkId>
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	460b      	mov	r3, r1
 800267a:	4601      	mov	r1, r0
 800267c:	205a      	movs	r0, #90	; 0x5a
 800267e:	f004 fb1b 	bl	8006cb8 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	68b9      	ldr	r1, [r7, #8]
 8002686:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002688:	f000 fa78 	bl	8002b7c <prvCopyDataToQueue>
 800268c:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	2b00      	cmp	r3, #0
 8002694:	d010      	beq.n	80026b8 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002698:	3324      	adds	r3, #36	; 0x24
 800269a:	4618      	mov	r0, r3
 800269c:	f001 f89c 	bl	80037d8 <xTaskRemoveFromEventList>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d013      	beq.n	80026ce <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80026a6:	4b4d      	ldr	r3, [pc, #308]	; (80027dc <xQueueGenericSend+0x248>)
 80026a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	f3bf 8f4f 	dsb	sy
 80026b2:	f3bf 8f6f 	isb	sy
 80026b6:	e00a      	b.n	80026ce <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80026b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d007      	beq.n	80026ce <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80026be:	4b47      	ldr	r3, [pc, #284]	; (80027dc <xQueueGenericSend+0x248>)
 80026c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	f3bf 8f4f 	dsb	sy
 80026ca:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80026ce:	f002 f9c9 	bl	8004a64 <vPortExitCritical>
                return pdPASS;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e07d      	b.n	80027d2 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d110      	bne.n	80026fe <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80026dc:	f002 f9c2 	bl	8004a64 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80026e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e2:	4618      	mov	r0, r3
 80026e4:	f005 f8ae 	bl	8007844 <SEGGER_SYSVIEW_ShrinkId>
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	460b      	mov	r3, r1
 80026f2:	4601      	mov	r1, r0
 80026f4:	205a      	movs	r0, #90	; 0x5a
 80026f6:	f004 fadf 	bl	8006cb8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	e069      	b.n	80027d2 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80026fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002700:	2b00      	cmp	r3, #0
 8002702:	d106      	bne.n	8002712 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002704:	f107 0314 	add.w	r3, r7, #20
 8002708:	4618      	mov	r0, r3
 800270a:	f001 f8cb 	bl	80038a4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800270e:	2301      	movs	r3, #1
 8002710:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002712:	f002 f9a7 	bl	8004a64 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002716:	f000 fe17 	bl	8003348 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800271a:	f002 f973 	bl	8004a04 <vPortEnterCritical>
 800271e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002720:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002724:	b25b      	sxtb	r3, r3
 8002726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272a:	d103      	bne.n	8002734 <xQueueGenericSend+0x1a0>
 800272c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002736:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800273a:	b25b      	sxtb	r3, r3
 800273c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002740:	d103      	bne.n	800274a <xQueueGenericSend+0x1b6>
 8002742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800274a:	f002 f98b 	bl	8004a64 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800274e:	1d3a      	adds	r2, r7, #4
 8002750:	f107 0314 	add.w	r3, r7, #20
 8002754:	4611      	mov	r1, r2
 8002756:	4618      	mov	r0, r3
 8002758:	f001 f8ba 	bl	80038d0 <xTaskCheckForTimeOut>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d124      	bne.n	80027ac <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002762:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002764:	f000 fb02 	bl	8002d6c <prvIsQueueFull>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d018      	beq.n	80027a0 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800276e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002770:	3310      	adds	r3, #16
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	4611      	mov	r1, r2
 8002776:	4618      	mov	r0, r3
 8002778:	f000 ffdc 	bl	8003734 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800277c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800277e:	f000 fa8d 	bl	8002c9c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002782:	f000 fdef 	bl	8003364 <xTaskResumeAll>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	f47f af62 	bne.w	8002652 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800278e:	4b13      	ldr	r3, [pc, #76]	; (80027dc <xQueueGenericSend+0x248>)
 8002790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	f3bf 8f4f 	dsb	sy
 800279a:	f3bf 8f6f 	isb	sy
 800279e:	e758      	b.n	8002652 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80027a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027a2:	f000 fa7b 	bl	8002c9c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80027a6:	f000 fddd 	bl	8003364 <xTaskResumeAll>
 80027aa:	e752      	b.n	8002652 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80027ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027ae:	f000 fa75 	bl	8002c9c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80027b2:	f000 fdd7 	bl	8003364 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80027b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b8:	4618      	mov	r0, r3
 80027ba:	f005 f843 	bl	8007844 <SEGGER_SYSVIEW_ShrinkId>
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	460b      	mov	r3, r1
 80027c8:	4601      	mov	r1, r0
 80027ca:	205a      	movs	r0, #90	; 0x5a
 80027cc:	f004 fa74 	bl	8006cb8 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80027d0:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3738      	adds	r7, #56	; 0x38
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	e000ed04 	.word	0xe000ed04

080027e0 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b090      	sub	sp, #64	; 0x40
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
 80027ec:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80027f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10a      	bne.n	800280e <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80027f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027fc:	f383 8811 	msr	BASEPRI, r3
 8002800:	f3bf 8f6f 	isb	sy
 8002804:	f3bf 8f4f 	dsb	sy
 8002808:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800280a:	bf00      	nop
 800280c:	e7fe      	b.n	800280c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d103      	bne.n	800281c <xQueueGenericSendFromISR+0x3c>
 8002814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <xQueueGenericSendFromISR+0x40>
 800281c:	2301      	movs	r3, #1
 800281e:	e000      	b.n	8002822 <xQueueGenericSendFromISR+0x42>
 8002820:	2300      	movs	r3, #0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10a      	bne.n	800283c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800282a:	f383 8811 	msr	BASEPRI, r3
 800282e:	f3bf 8f6f 	isb	sy
 8002832:	f3bf 8f4f 	dsb	sy
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002838:	bf00      	nop
 800283a:	e7fe      	b.n	800283a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	2b02      	cmp	r3, #2
 8002840:	d103      	bne.n	800284a <xQueueGenericSendFromISR+0x6a>
 8002842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002846:	2b01      	cmp	r3, #1
 8002848:	d101      	bne.n	800284e <xQueueGenericSendFromISR+0x6e>
 800284a:	2301      	movs	r3, #1
 800284c:	e000      	b.n	8002850 <xQueueGenericSendFromISR+0x70>
 800284e:	2300      	movs	r3, #0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10a      	bne.n	800286a <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002858:	f383 8811 	msr	BASEPRI, r3
 800285c:	f3bf 8f6f 	isb	sy
 8002860:	f3bf 8f4f 	dsb	sy
 8002864:	623b      	str	r3, [r7, #32]
    }
 8002866:	bf00      	nop
 8002868:	e7fe      	b.n	8002868 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800286a:	f002 f9b7 	bl	8004bdc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800286e:	f3ef 8211 	mrs	r2, BASEPRI
 8002872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002876:	f383 8811 	msr	BASEPRI, r3
 800287a:	f3bf 8f6f 	isb	sy
 800287e:	f3bf 8f4f 	dsb	sy
 8002882:	61fa      	str	r2, [r7, #28]
 8002884:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002886:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002888:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800288a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800288c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800288e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002892:	429a      	cmp	r2, r3
 8002894:	d302      	bcc.n	800289c <xQueueGenericSendFromISR+0xbc>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	2b02      	cmp	r3, #2
 800289a:	d148      	bne.n	800292e <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800289c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800289e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028aa:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80028ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ae:	4618      	mov	r0, r3
 80028b0:	f004 ffc8 	bl	8007844 <SEGGER_SYSVIEW_ShrinkId>
 80028b4:	4601      	mov	r1, r0
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	461a      	mov	r2, r3
 80028ba:	2060      	movs	r0, #96	; 0x60
 80028bc:	f004 f92c 	bl	8006b18 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	68b9      	ldr	r1, [r7, #8]
 80028c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80028c6:	f000 f959 	bl	8002b7c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80028ca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80028ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d2:	d112      	bne.n	80028fa <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d025      	beq.n	8002928 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028de:	3324      	adds	r3, #36	; 0x24
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 ff79 	bl	80037d8 <xTaskRemoveFromEventList>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d01d      	beq.n	8002928 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d01a      	beq.n	8002928 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	e016      	b.n	8002928 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80028fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80028fe:	2b7f      	cmp	r3, #127	; 0x7f
 8002900:	d10a      	bne.n	8002918 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002906:	f383 8811 	msr	BASEPRI, r3
 800290a:	f3bf 8f6f 	isb	sy
 800290e:	f3bf 8f4f 	dsb	sy
 8002912:	617b      	str	r3, [r7, #20]
    }
 8002914:	bf00      	nop
 8002916:	e7fe      	b.n	8002916 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002918:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800291c:	3301      	adds	r3, #1
 800291e:	b2db      	uxtb	r3, r3
 8002920:	b25a      	sxtb	r2, r3
 8002922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002928:	2301      	movs	r3, #1
 800292a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 800292c:	e00b      	b.n	8002946 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800292e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002930:	4618      	mov	r0, r3
 8002932:	f004 ff87 	bl	8007844 <SEGGER_SYSVIEW_ShrinkId>
 8002936:	4601      	mov	r1, r0
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	461a      	mov	r2, r3
 800293c:	2060      	movs	r0, #96	; 0x60
 800293e:	f004 f8eb 	bl	8006b18 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002942:	2300      	movs	r3, #0
 8002944:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002948:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002950:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002954:	4618      	mov	r0, r3
 8002956:	3740      	adds	r7, #64	; 0x40
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800295c:	b590      	push	{r4, r7, lr}
 800295e:	b08f      	sub	sp, #60	; 0x3c
 8002960:	af02      	add	r7, sp, #8
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002968:	2300      	movs	r3, #0
 800296a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10a      	bne.n	800298c <xQueueReceive+0x30>
        __asm volatile
 8002976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800297a:	f383 8811 	msr	BASEPRI, r3
 800297e:	f3bf 8f6f 	isb	sy
 8002982:	f3bf 8f4f 	dsb	sy
 8002986:	623b      	str	r3, [r7, #32]
    }
 8002988:	bf00      	nop
 800298a:	e7fe      	b.n	800298a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d103      	bne.n	800299a <xQueueReceive+0x3e>
 8002992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <xQueueReceive+0x42>
 800299a:	2301      	movs	r3, #1
 800299c:	e000      	b.n	80029a0 <xQueueReceive+0x44>
 800299e:	2300      	movs	r3, #0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d10a      	bne.n	80029ba <xQueueReceive+0x5e>
        __asm volatile
 80029a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a8:	f383 8811 	msr	BASEPRI, r3
 80029ac:	f3bf 8f6f 	isb	sy
 80029b0:	f3bf 8f4f 	dsb	sy
 80029b4:	61fb      	str	r3, [r7, #28]
    }
 80029b6:	bf00      	nop
 80029b8:	e7fe      	b.n	80029b8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029ba:	f001 f8ad 	bl	8003b18 <xTaskGetSchedulerState>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d102      	bne.n	80029ca <xQueueReceive+0x6e>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <xQueueReceive+0x72>
 80029ca:	2301      	movs	r3, #1
 80029cc:	e000      	b.n	80029d0 <xQueueReceive+0x74>
 80029ce:	2300      	movs	r3, #0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10a      	bne.n	80029ea <xQueueReceive+0x8e>
        __asm volatile
 80029d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d8:	f383 8811 	msr	BASEPRI, r3
 80029dc:	f3bf 8f6f 	isb	sy
 80029e0:	f3bf 8f4f 	dsb	sy
 80029e4:	61bb      	str	r3, [r7, #24]
    }
 80029e6:	bf00      	nop
 80029e8:	e7fe      	b.n	80029e8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80029ea:	f002 f80b 	bl	8004a04 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d02f      	beq.n	8002a5a <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80029fa:	68b9      	ldr	r1, [r7, #8]
 80029fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029fe:	f000 f927 	bl	8002c50 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a04:	4618      	mov	r0, r3
 8002a06:	f004 ff1d 	bl	8007844 <SEGGER_SYSVIEW_ShrinkId>
 8002a0a:	4604      	mov	r4, r0
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	f004 ff19 	bl	8007844 <SEGGER_SYSVIEW_ShrinkId>
 8002a12:	4602      	mov	r2, r0
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2101      	movs	r1, #1
 8002a18:	9100      	str	r1, [sp, #0]
 8002a1a:	4621      	mov	r1, r4
 8002a1c:	205c      	movs	r0, #92	; 0x5c
 8002a1e:	f004 f94b 	bl	8006cb8 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	1e5a      	subs	r2, r3, #1
 8002a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a28:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00f      	beq.n	8002a52 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a34:	3310      	adds	r3, #16
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 fece 	bl	80037d8 <xTaskRemoveFromEventList>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d007      	beq.n	8002a52 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002a42:	4b4d      	ldr	r3, [pc, #308]	; (8002b78 <xQueueReceive+0x21c>)
 8002a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	f3bf 8f4f 	dsb	sy
 8002a4e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002a52:	f002 f807 	bl	8004a64 <vPortExitCritical>
                return pdPASS;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e08a      	b.n	8002b70 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d113      	bne.n	8002a88 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002a60:	f002 f800 	bl	8004a64 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a66:	4618      	mov	r0, r3
 8002a68:	f004 feec 	bl	8007844 <SEGGER_SYSVIEW_ShrinkId>
 8002a6c:	4604      	mov	r4, r0
 8002a6e:	2000      	movs	r0, #0
 8002a70:	f004 fee8 	bl	8007844 <SEGGER_SYSVIEW_ShrinkId>
 8002a74:	4602      	mov	r2, r0
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2101      	movs	r1, #1
 8002a7a:	9100      	str	r1, [sp, #0]
 8002a7c:	4621      	mov	r1, r4
 8002a7e:	205c      	movs	r0, #92	; 0x5c
 8002a80:	f004 f91a 	bl	8006cb8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002a84:	2300      	movs	r3, #0
 8002a86:	e073      	b.n	8002b70 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d106      	bne.n	8002a9c <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002a8e:	f107 0310 	add.w	r3, r7, #16
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 ff06 	bl	80038a4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002a9c:	f001 ffe2 	bl	8004a64 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002aa0:	f000 fc52 	bl	8003348 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002aa4:	f001 ffae 	bl	8004a04 <vPortEnterCritical>
 8002aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aaa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002aae:	b25b      	sxtb	r3, r3
 8002ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab4:	d103      	bne.n	8002abe <xQueueReceive+0x162>
 8002ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ac4:	b25b      	sxtb	r3, r3
 8002ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aca:	d103      	bne.n	8002ad4 <xQueueReceive+0x178>
 8002acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ad4:	f001 ffc6 	bl	8004a64 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ad8:	1d3a      	adds	r2, r7, #4
 8002ada:	f107 0310 	add.w	r3, r7, #16
 8002ade:	4611      	mov	r1, r2
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 fef5 	bl	80038d0 <xTaskCheckForTimeOut>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d124      	bne.n	8002b36 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002aec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002aee:	f000 f927 	bl	8002d40 <prvIsQueueEmpty>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d018      	beq.n	8002b2a <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afa:	3324      	adds	r3, #36	; 0x24
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	4611      	mov	r1, r2
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 fe17 	bl	8003734 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002b06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b08:	f000 f8c8 	bl	8002c9c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002b0c:	f000 fc2a 	bl	8003364 <xTaskResumeAll>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f47f af69 	bne.w	80029ea <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002b18:	4b17      	ldr	r3, [pc, #92]	; (8002b78 <xQueueReceive+0x21c>)
 8002b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	f3bf 8f4f 	dsb	sy
 8002b24:	f3bf 8f6f 	isb	sy
 8002b28:	e75f      	b.n	80029ea <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002b2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b2c:	f000 f8b6 	bl	8002c9c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002b30:	f000 fc18 	bl	8003364 <xTaskResumeAll>
 8002b34:	e759      	b.n	80029ea <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002b36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b38:	f000 f8b0 	bl	8002c9c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002b3c:	f000 fc12 	bl	8003364 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b42:	f000 f8fd 	bl	8002d40 <prvIsQueueEmpty>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f43f af4e 	beq.w	80029ea <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b50:	4618      	mov	r0, r3
 8002b52:	f004 fe77 	bl	8007844 <SEGGER_SYSVIEW_ShrinkId>
 8002b56:	4604      	mov	r4, r0
 8002b58:	2000      	movs	r0, #0
 8002b5a:	f004 fe73 	bl	8007844 <SEGGER_SYSVIEW_ShrinkId>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2101      	movs	r1, #1
 8002b64:	9100      	str	r1, [sp, #0]
 8002b66:	4621      	mov	r1, r4
 8002b68:	205c      	movs	r0, #92	; 0x5c
 8002b6a:	f004 f8a5 	bl	8006cb8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002b6e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3734      	adds	r7, #52	; 0x34
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd90      	pop	{r4, r7, pc}
 8002b78:	e000ed04 	.word	0xe000ed04

08002b7c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b90:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10d      	bne.n	8002bb6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d14d      	bne.n	8002c3e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 ffd4 	bl	8003b54 <xTaskPriorityDisinherit>
 8002bac:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	609a      	str	r2, [r3, #8]
 8002bb4:	e043      	b.n	8002c3e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d119      	bne.n	8002bf0 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6858      	ldr	r0, [r3, #4]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	68b9      	ldr	r1, [r7, #8]
 8002bc8:	f005 f81c 	bl	8007c04 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd4:	441a      	add	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d32b      	bcc.n	8002c3e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	e026      	b.n	8002c3e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	68d8      	ldr	r0, [r3, #12]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	68b9      	ldr	r1, [r7, #8]
 8002bfc:	f005 f802 	bl	8007c04 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	425b      	negs	r3, r3
 8002c0a:	441a      	add	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	68da      	ldr	r2, [r3, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d207      	bcs.n	8002c2c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	425b      	negs	r3, r3
 8002c26:	441a      	add	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d105      	bne.n	8002c3e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d002      	beq.n	8002c3e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1c5a      	adds	r2, r3, #1
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002c46:	697b      	ldr	r3, [r7, #20]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3718      	adds	r7, #24
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d018      	beq.n	8002c94 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	441a      	add	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68da      	ldr	r2, [r3, #12]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d303      	bcc.n	8002c84 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68d9      	ldr	r1, [r3, #12]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	6838      	ldr	r0, [r7, #0]
 8002c90:	f004 ffb8 	bl	8007c04 <memcpy>
    }
}
 8002c94:	bf00      	nop
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002ca4:	f001 feae 	bl	8004a04 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cae:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002cb0:	e011      	b.n	8002cd6 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d012      	beq.n	8002ce0 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3324      	adds	r3, #36	; 0x24
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 fd8a 	bl	80037d8 <xTaskRemoveFromEventList>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002cca:	f000 fe67 	bl	800399c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	dce9      	bgt.n	8002cb2 <prvUnlockQueue+0x16>
 8002cde:	e000      	b.n	8002ce2 <prvUnlockQueue+0x46>
                        break;
 8002ce0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	22ff      	movs	r2, #255	; 0xff
 8002ce6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002cea:	f001 febb 	bl	8004a64 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002cee:	f001 fe89 	bl	8004a04 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cf8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002cfa:	e011      	b.n	8002d20 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d012      	beq.n	8002d2a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3310      	adds	r3, #16
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f000 fd65 	bl	80037d8 <xTaskRemoveFromEventList>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002d14:	f000 fe42 	bl	800399c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002d18:	7bbb      	ldrb	r3, [r7, #14]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	dce9      	bgt.n	8002cfc <prvUnlockQueue+0x60>
 8002d28:	e000      	b.n	8002d2c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002d2a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	22ff      	movs	r2, #255	; 0xff
 8002d30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002d34:	f001 fe96 	bl	8004a64 <vPortExitCritical>
}
 8002d38:	bf00      	nop
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002d48:	f001 fe5c 	bl	8004a04 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d102      	bne.n	8002d5a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002d54:	2301      	movs	r3, #1
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	e001      	b.n	8002d5e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002d5e:	f001 fe81 	bl	8004a64 <vPortExitCritical>

    return xReturn;
 8002d62:	68fb      	ldr	r3, [r7, #12]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002d74:	f001 fe46 	bl	8004a04 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d102      	bne.n	8002d8a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002d84:	2301      	movs	r3, #1
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	e001      	b.n	8002d8e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002d8e:	f001 fe69 	bl	8004a64 <vPortExitCritical>

    return xReturn;
 8002d92:	68fb      	ldr	r3, [r7, #12]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002da6:	2300      	movs	r3, #0
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	e01e      	b.n	8002dea <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002dac:	4a13      	ldr	r2, [pc, #76]	; (8002dfc <vQueueAddToRegistry+0x60>)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d115      	bne.n	8002de4 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002db8:	4910      	ldr	r1, [pc, #64]	; (8002dfc <vQueueAddToRegistry+0x60>)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002dc2:	4a0e      	ldr	r2, [pc, #56]	; (8002dfc <vQueueAddToRegistry+0x60>)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	4413      	add	r3, r2
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f004 fd37 	bl	8007844 <SEGGER_SYSVIEW_ShrinkId>
 8002dd6:	4601      	mov	r1, r0
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	2071      	movs	r0, #113	; 0x71
 8002dde:	f003 fe9b 	bl	8006b18 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002de2:	e006      	b.n	8002df2 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	3301      	adds	r3, #1
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2b07      	cmp	r3, #7
 8002dee:	d9dd      	bls.n	8002dac <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002df0:	bf00      	nop
 8002df2:	bf00      	nop
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	200143d4 	.word	0x200143d4

08002e00 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002e10:	f001 fdf8 	bl	8004a04 <vPortEnterCritical>
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e1a:	b25b      	sxtb	r3, r3
 8002e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e20:	d103      	bne.n	8002e2a <vQueueWaitForMessageRestricted+0x2a>
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e30:	b25b      	sxtb	r3, r3
 8002e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e36:	d103      	bne.n	8002e40 <vQueueWaitForMessageRestricted+0x40>
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e40:	f001 fe10 	bl	8004a64 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d106      	bne.n	8002e5a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	3324      	adds	r3, #36	; 0x24
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	68b9      	ldr	r1, [r7, #8]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f000 fc91 	bl	800377c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002e5a:	6978      	ldr	r0, [r7, #20]
 8002e5c:	f7ff ff1e 	bl	8002c9c <prvUnlockQueue>
    }
 8002e60:	bf00      	nop
 8002e62:	3718      	adds	r7, #24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08c      	sub	sp, #48	; 0x30
 8002e6c:	af04      	add	r7, sp, #16
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	603b      	str	r3, [r7, #0]
 8002e74:	4613      	mov	r3, r2
 8002e76:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e78:	88fb      	ldrh	r3, [r7, #6]
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f001 feed 	bl	8004c5c <pvPortMalloc>
 8002e82:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00e      	beq.n	8002ea8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002e8a:	2058      	movs	r0, #88	; 0x58
 8002e8c:	f001 fee6 	bl	8004c5c <pvPortMalloc>
 8002e90:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	631a      	str	r2, [r3, #48]	; 0x30
 8002e9e:	e005      	b.n	8002eac <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002ea0:	6978      	ldr	r0, [r7, #20]
 8002ea2:	f001 ffbb 	bl	8004e1c <vPortFree>
 8002ea6:	e001      	b.n	8002eac <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d013      	beq.n	8002eda <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002eb2:	88fa      	ldrh	r2, [r7, #6]
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	9303      	str	r3, [sp, #12]
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	9302      	str	r3, [sp, #8]
 8002ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebe:	9301      	str	r3, [sp, #4]
 8002ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	68b9      	ldr	r1, [r7, #8]
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 f80e 	bl	8002eea <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002ece:	69f8      	ldr	r0, [r7, #28]
 8002ed0:	f000 f8a2 	bl	8003018 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	61bb      	str	r3, [r7, #24]
 8002ed8:	e002      	b.n	8002ee0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002eda:	f04f 33ff 	mov.w	r3, #4294967295
 8002ede:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002ee0:	69bb      	ldr	r3, [r7, #24]
    }
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3720      	adds	r7, #32
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b088      	sub	sp, #32
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	60f8      	str	r0, [r7, #12]
 8002ef2:	60b9      	str	r1, [r7, #8]
 8002ef4:	607a      	str	r2, [r7, #4]
 8002ef6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	461a      	mov	r2, r3
 8002f02:	21a5      	movs	r1, #165	; 0xa5
 8002f04:	f004 fe8c 	bl	8007c20 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f12:	3b01      	subs	r3, #1
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	f023 0307 	bic.w	r3, r3, #7
 8002f20:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00a      	beq.n	8002f42 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f30:	f383 8811 	msr	BASEPRI, r3
 8002f34:	f3bf 8f6f 	isb	sy
 8002f38:	f3bf 8f4f 	dsb	sy
 8002f3c:	617b      	str	r3, [r7, #20]
    }
 8002f3e:	bf00      	nop
 8002f40:	e7fe      	b.n	8002f40 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d01f      	beq.n	8002f88 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f48:	2300      	movs	r3, #0
 8002f4a:	61fb      	str	r3, [r7, #28]
 8002f4c:	e012      	b.n	8002f74 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	4413      	add	r3, r2
 8002f54:	7819      	ldrb	r1, [r3, #0]
 8002f56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	3334      	adds	r3, #52	; 0x34
 8002f5e:	460a      	mov	r2, r1
 8002f60:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	4413      	add	r3, r2
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d006      	beq.n	8002f7c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	3301      	adds	r3, #1
 8002f72:	61fb      	str	r3, [r7, #28]
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	2b09      	cmp	r3, #9
 8002f78:	d9e9      	bls.n	8002f4e <prvInitialiseNewTask+0x64>
 8002f7a:	e000      	b.n	8002f7e <prvInitialiseNewTask+0x94>
            {
                break;
 8002f7c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002f86:	e003      	b.n	8002f90 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d901      	bls.n	8002f9a <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f96:	2304      	movs	r3, #4
 8002f98:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f9e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fa4:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa8:	2200      	movs	r2, #0
 8002faa:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fae:	3304      	adds	r3, #4
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff f96b 	bl	800228c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb8:	3318      	adds	r3, #24
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff f966 	bl	800228c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fc4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc8:	f1c3 0205 	rsb	r2, r3, #5
 8002fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fce:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fd4:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd8:	3350      	adds	r3, #80	; 0x50
 8002fda:	2204      	movs	r2, #4
 8002fdc:	2100      	movs	r1, #0
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f004 fe1e 	bl	8007c20 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe6:	3354      	adds	r3, #84	; 0x54
 8002fe8:	2201      	movs	r2, #1
 8002fea:	2100      	movs	r1, #0
 8002fec:	4618      	mov	r0, r3
 8002fee:	f004 fe17 	bl	8007c20 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	68f9      	ldr	r1, [r7, #12]
 8002ff6:	69b8      	ldr	r0, [r7, #24]
 8002ff8:	f001 fb54 	bl	80046a4 <pxPortInitialiseStack>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003000:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800300c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800300e:	bf00      	nop
 8003010:	3720      	adds	r7, #32
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003018:	b5b0      	push	{r4, r5, r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af02      	add	r7, sp, #8
 800301e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003020:	f001 fcf0 	bl	8004a04 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003024:	4b3b      	ldr	r3, [pc, #236]	; (8003114 <prvAddNewTaskToReadyList+0xfc>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	3301      	adds	r3, #1
 800302a:	4a3a      	ldr	r2, [pc, #232]	; (8003114 <prvAddNewTaskToReadyList+0xfc>)
 800302c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800302e:	4b3a      	ldr	r3, [pc, #232]	; (8003118 <prvAddNewTaskToReadyList+0x100>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d109      	bne.n	800304a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003036:	4a38      	ldr	r2, [pc, #224]	; (8003118 <prvAddNewTaskToReadyList+0x100>)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800303c:	4b35      	ldr	r3, [pc, #212]	; (8003114 <prvAddNewTaskToReadyList+0xfc>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d110      	bne.n	8003066 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003044:	f000 fcce 	bl	80039e4 <prvInitialiseTaskLists>
 8003048:	e00d      	b.n	8003066 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800304a:	4b34      	ldr	r3, [pc, #208]	; (800311c <prvAddNewTaskToReadyList+0x104>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d109      	bne.n	8003066 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003052:	4b31      	ldr	r3, [pc, #196]	; (8003118 <prvAddNewTaskToReadyList+0x100>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305c:	429a      	cmp	r2, r3
 800305e:	d802      	bhi.n	8003066 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003060:	4a2d      	ldr	r2, [pc, #180]	; (8003118 <prvAddNewTaskToReadyList+0x100>)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003066:	4b2e      	ldr	r3, [pc, #184]	; (8003120 <prvAddNewTaskToReadyList+0x108>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	3301      	adds	r3, #1
 800306c:	4a2c      	ldr	r2, [pc, #176]	; (8003120 <prvAddNewTaskToReadyList+0x108>)
 800306e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003070:	4b2b      	ldr	r3, [pc, #172]	; (8003120 <prvAddNewTaskToReadyList+0x108>)
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d016      	beq.n	80030ac <prvAddNewTaskToReadyList+0x94>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4618      	mov	r0, r3
 8003082:	f004 fab9 	bl	80075f8 <SEGGER_SYSVIEW_OnTaskCreate>
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003096:	461d      	mov	r5, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	461c      	mov	r4, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	1ae3      	subs	r3, r4, r3
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	462b      	mov	r3, r5
 80030a8:	f002 f85a 	bl	8005160 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f004 fb26 	bl	8007700 <SEGGER_SYSVIEW_OnTaskStartReady>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b8:	2201      	movs	r2, #1
 80030ba:	409a      	lsls	r2, r3
 80030bc:	4b19      	ldr	r3, [pc, #100]	; (8003124 <prvAddNewTaskToReadyList+0x10c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	4a18      	ldr	r2, [pc, #96]	; (8003124 <prvAddNewTaskToReadyList+0x10c>)
 80030c4:	6013      	str	r3, [r2, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ca:	4613      	mov	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4a15      	ldr	r2, [pc, #84]	; (8003128 <prvAddNewTaskToReadyList+0x110>)
 80030d4:	441a      	add	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	3304      	adds	r3, #4
 80030da:	4619      	mov	r1, r3
 80030dc:	4610      	mov	r0, r2
 80030de:	f7ff f8e2 	bl	80022a6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80030e2:	f001 fcbf 	bl	8004a64 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80030e6:	4b0d      	ldr	r3, [pc, #52]	; (800311c <prvAddNewTaskToReadyList+0x104>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00e      	beq.n	800310c <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80030ee:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <prvAddNewTaskToReadyList+0x100>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d207      	bcs.n	800310c <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80030fc:	4b0b      	ldr	r3, [pc, #44]	; (800312c <prvAddNewTaskToReadyList+0x114>)
 80030fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	f3bf 8f4f 	dsb	sy
 8003108:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800310c:	bf00      	nop
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bdb0      	pop	{r4, r5, r7, pc}
 8003114:	20000114 	.word	0x20000114
 8003118:	2000003c 	.word	0x2000003c
 800311c:	20000120 	.word	0x20000120
 8003120:	20000130 	.word	0x20000130
 8003124:	2000011c 	.word	0x2000011c
 8003128:	20000040 	.word	0x20000040
 800312c:	e000ed04 	.word	0xe000ed04

08003130 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8003138:	f001 fc64 	bl	8004a04 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d102      	bne.n	8003148 <vTaskDelete+0x18>
 8003142:	4b46      	ldr	r3, [pc, #280]	; (800325c <vTaskDelete+0x12c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	e000      	b.n	800314a <vTaskDelete+0x1a>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	3304      	adds	r3, #4
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff f905 	bl	8002360 <uxListRemove>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d115      	bne.n	8003188 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003160:	493f      	ldr	r1, [pc, #252]	; (8003260 <vTaskDelete+0x130>)
 8003162:	4613      	mov	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	440b      	add	r3, r1
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10a      	bne.n	8003188 <vTaskDelete+0x58>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003176:	2201      	movs	r2, #1
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	43da      	mvns	r2, r3
 800317e:	4b39      	ldr	r3, [pc, #228]	; (8003264 <vTaskDelete+0x134>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4013      	ands	r3, r2
 8003184:	4a37      	ldr	r2, [pc, #220]	; (8003264 <vTaskDelete+0x134>)
 8003186:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318c:	2b00      	cmp	r3, #0
 800318e:	d004      	beq.n	800319a <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	3318      	adds	r3, #24
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff f8e3 	bl	8002360 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 800319a:	4b33      	ldr	r3, [pc, #204]	; (8003268 <vTaskDelete+0x138>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	3301      	adds	r3, #1
 80031a0:	4a31      	ldr	r2, [pc, #196]	; (8003268 <vTaskDelete+0x138>)
 80031a2:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 80031a4:	4b2d      	ldr	r3, [pc, #180]	; (800325c <vTaskDelete+0x12c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d118      	bne.n	80031e0 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	3304      	adds	r3, #4
 80031b2:	4619      	mov	r1, r3
 80031b4:	482d      	ldr	r0, [pc, #180]	; (800326c <vTaskDelete+0x13c>)
 80031b6:	f7ff f876 	bl	80022a6 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 80031ba:	4b2d      	ldr	r3, [pc, #180]	; (8003270 <vTaskDelete+0x140>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	3301      	adds	r3, #1
 80031c0:	4a2b      	ldr	r2, [pc, #172]	; (8003270 <vTaskDelete+0x140>)
 80031c2:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f004 fb3c 	bl	8007844 <SEGGER_SYSVIEW_ShrinkId>
 80031cc:	4603      	mov	r3, r0
 80031ce:	4619      	mov	r1, r3
 80031d0:	2022      	movs	r0, #34	; 0x22
 80031d2:	f003 fc65 	bl	8006aa0 <SEGGER_SYSVIEW_RecordU32>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4618      	mov	r0, r3
 80031da:	f002 f829 	bl	8005230 <SYSVIEW_DeleteTask>
 80031de:	e016      	b.n	800320e <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 80031e0:	4b24      	ldr	r3, [pc, #144]	; (8003274 <vTaskDelete+0x144>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	3b01      	subs	r3, #1
 80031e6:	4a23      	ldr	r2, [pc, #140]	; (8003274 <vTaskDelete+0x144>)
 80031e8:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f004 fb29 	bl	8007844 <SEGGER_SYSVIEW_ShrinkId>
 80031f2:	4603      	mov	r3, r0
 80031f4:	4619      	mov	r1, r3
 80031f6:	2022      	movs	r0, #34	; 0x22
 80031f8:	f003 fc52 	bl	8006aa0 <SEGGER_SYSVIEW_RecordU32>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	4618      	mov	r0, r3
 8003200:	f002 f816 	bl	8005230 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f000 fc5b 	bl	8003ac0 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 800320a:	f000 fc69 	bl	8003ae0 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 800320e:	f001 fc29 	bl	8004a64 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8003212:	4b19      	ldr	r3, [pc, #100]	; (8003278 <vTaskDelete+0x148>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d01b      	beq.n	8003252 <vTaskDelete+0x122>
        {
            if( pxTCB == pxCurrentTCB )
 800321a:	4b10      	ldr	r3, [pc, #64]	; (800325c <vTaskDelete+0x12c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	429a      	cmp	r2, r3
 8003222:	d116      	bne.n	8003252 <vTaskDelete+0x122>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8003224:	4b15      	ldr	r3, [pc, #84]	; (800327c <vTaskDelete+0x14c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00a      	beq.n	8003242 <vTaskDelete+0x112>
        __asm volatile
 800322c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003230:	f383 8811 	msr	BASEPRI, r3
 8003234:	f3bf 8f6f 	isb	sy
 8003238:	f3bf 8f4f 	dsb	sy
 800323c:	60bb      	str	r3, [r7, #8]
    }
 800323e:	bf00      	nop
 8003240:	e7fe      	b.n	8003240 <vTaskDelete+0x110>
                portYIELD_WITHIN_API();
 8003242:	4b0f      	ldr	r3, [pc, #60]	; (8003280 <vTaskDelete+0x150>)
 8003244:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	f3bf 8f4f 	dsb	sy
 800324e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003252:	bf00      	nop
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	2000003c 	.word	0x2000003c
 8003260:	20000040 	.word	0x20000040
 8003264:	2000011c 	.word	0x2000011c
 8003268:	20000130 	.word	0x20000130
 800326c:	200000e8 	.word	0x200000e8
 8003270:	200000fc 	.word	0x200000fc
 8003274:	20000114 	.word	0x20000114
 8003278:	20000120 	.word	0x20000120
 800327c:	2000013c 	.word	0x2000013c
 8003280:	e000ed04 	.word	0xe000ed04

08003284 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800328a:	4b27      	ldr	r3, [pc, #156]	; (8003328 <vTaskStartScheduler+0xa4>)
 800328c:	9301      	str	r3, [sp, #4]
 800328e:	2300      	movs	r3, #0
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	2300      	movs	r3, #0
 8003294:	2282      	movs	r2, #130	; 0x82
 8003296:	4925      	ldr	r1, [pc, #148]	; (800332c <vTaskStartScheduler+0xa8>)
 8003298:	4825      	ldr	r0, [pc, #148]	; (8003330 <vTaskStartScheduler+0xac>)
 800329a:	f7ff fde5 	bl	8002e68 <xTaskCreate>
 800329e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d102      	bne.n	80032ac <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80032a6:	f000 feeb 	bl	8004080 <xTimerCreateTimerTask>
 80032aa:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d124      	bne.n	80032fc <vTaskStartScheduler+0x78>
        __asm volatile
 80032b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b6:	f383 8811 	msr	BASEPRI, r3
 80032ba:	f3bf 8f6f 	isb	sy
 80032be:	f3bf 8f4f 	dsb	sy
 80032c2:	60bb      	str	r3, [r7, #8]
    }
 80032c4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80032c6:	4b1b      	ldr	r3, [pc, #108]	; (8003334 <vTaskStartScheduler+0xb0>)
 80032c8:	f04f 32ff 	mov.w	r2, #4294967295
 80032cc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80032ce:	4b1a      	ldr	r3, [pc, #104]	; (8003338 <vTaskStartScheduler+0xb4>)
 80032d0:	2201      	movs	r2, #1
 80032d2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80032d4:	4b19      	ldr	r3, [pc, #100]	; (800333c <vTaskStartScheduler+0xb8>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80032da:	4b19      	ldr	r3, [pc, #100]	; (8003340 <vTaskStartScheduler+0xbc>)
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	4b12      	ldr	r3, [pc, #72]	; (8003328 <vTaskStartScheduler+0xa4>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d102      	bne.n	80032ec <vTaskStartScheduler+0x68>
 80032e6:	f004 f96b 	bl	80075c0 <SEGGER_SYSVIEW_OnIdle>
 80032ea:	e004      	b.n	80032f6 <vTaskStartScheduler+0x72>
 80032ec:	4b14      	ldr	r3, [pc, #80]	; (8003340 <vTaskStartScheduler+0xbc>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f004 f9c3 	bl	800767c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80032f6:	f001 fa65 	bl	80047c4 <xPortStartScheduler>
 80032fa:	e00e      	b.n	800331a <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003302:	d10a      	bne.n	800331a <vTaskStartScheduler+0x96>
        __asm volatile
 8003304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003308:	f383 8811 	msr	BASEPRI, r3
 800330c:	f3bf 8f6f 	isb	sy
 8003310:	f3bf 8f4f 	dsb	sy
 8003314:	607b      	str	r3, [r7, #4]
    }
 8003316:	bf00      	nop
 8003318:	e7fe      	b.n	8003318 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800331a:	4b0a      	ldr	r3, [pc, #40]	; (8003344 <vTaskStartScheduler+0xc0>)
 800331c:	681b      	ldr	r3, [r3, #0]
}
 800331e:	bf00      	nop
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	20000138 	.word	0x20000138
 800332c:	08007cf8 	.word	0x08007cf8
 8003330:	080039b5 	.word	0x080039b5
 8003334:	20000134 	.word	0x20000134
 8003338:	20000120 	.word	0x20000120
 800333c:	20000118 	.word	0x20000118
 8003340:	2000003c 	.word	0x2000003c
 8003344:	2000000c 	.word	0x2000000c

08003348 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800334c:	4b04      	ldr	r3, [pc, #16]	; (8003360 <vTaskSuspendAll+0x18>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	3301      	adds	r3, #1
 8003352:	4a03      	ldr	r2, [pc, #12]	; (8003360 <vTaskSuspendAll+0x18>)
 8003354:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003356:	bf00      	nop
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	2000013c 	.word	0x2000013c

08003364 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800336a:	2300      	movs	r3, #0
 800336c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800336e:	2300      	movs	r3, #0
 8003370:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003372:	4b43      	ldr	r3, [pc, #268]	; (8003480 <xTaskResumeAll+0x11c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10a      	bne.n	8003390 <xTaskResumeAll+0x2c>
        __asm volatile
 800337a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800337e:	f383 8811 	msr	BASEPRI, r3
 8003382:	f3bf 8f6f 	isb	sy
 8003386:	f3bf 8f4f 	dsb	sy
 800338a:	603b      	str	r3, [r7, #0]
    }
 800338c:	bf00      	nop
 800338e:	e7fe      	b.n	800338e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003390:	f001 fb38 	bl	8004a04 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003394:	4b3a      	ldr	r3, [pc, #232]	; (8003480 <xTaskResumeAll+0x11c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	3b01      	subs	r3, #1
 800339a:	4a39      	ldr	r2, [pc, #228]	; (8003480 <xTaskResumeAll+0x11c>)
 800339c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800339e:	4b38      	ldr	r3, [pc, #224]	; (8003480 <xTaskResumeAll+0x11c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d165      	bne.n	8003472 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80033a6:	4b37      	ldr	r3, [pc, #220]	; (8003484 <xTaskResumeAll+0x120>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d061      	beq.n	8003472 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033ae:	e032      	b.n	8003416 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033b0:	4b35      	ldr	r3, [pc, #212]	; (8003488 <xTaskResumeAll+0x124>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	3318      	adds	r3, #24
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fe ffcf 	bl	8002360 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	3304      	adds	r3, #4
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fe ffca 	bl	8002360 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f004 f996 	bl	8007700 <SEGGER_SYSVIEW_OnTaskStartReady>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d8:	2201      	movs	r2, #1
 80033da:	409a      	lsls	r2, r3
 80033dc:	4b2b      	ldr	r3, [pc, #172]	; (800348c <xTaskResumeAll+0x128>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	4a2a      	ldr	r2, [pc, #168]	; (800348c <xTaskResumeAll+0x128>)
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ea:	4613      	mov	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4a27      	ldr	r2, [pc, #156]	; (8003490 <xTaskResumeAll+0x12c>)
 80033f4:	441a      	add	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	3304      	adds	r3, #4
 80033fa:	4619      	mov	r1, r3
 80033fc:	4610      	mov	r0, r2
 80033fe:	f7fe ff52 	bl	80022a6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003406:	4b23      	ldr	r3, [pc, #140]	; (8003494 <xTaskResumeAll+0x130>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340c:	429a      	cmp	r2, r3
 800340e:	d302      	bcc.n	8003416 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8003410:	4b21      	ldr	r3, [pc, #132]	; (8003498 <xTaskResumeAll+0x134>)
 8003412:	2201      	movs	r2, #1
 8003414:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003416:	4b1c      	ldr	r3, [pc, #112]	; (8003488 <xTaskResumeAll+0x124>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1c8      	bne.n	80033b0 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003424:	f000 fb5c 	bl	8003ae0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003428:	4b1c      	ldr	r3, [pc, #112]	; (800349c <xTaskResumeAll+0x138>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d010      	beq.n	8003456 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003434:	f000 f858 	bl	80034e8 <xTaskIncrementTick>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800343e:	4b16      	ldr	r3, [pc, #88]	; (8003498 <xTaskResumeAll+0x134>)
 8003440:	2201      	movs	r2, #1
 8003442:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3b01      	subs	r3, #1
 8003448:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1f1      	bne.n	8003434 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8003450:	4b12      	ldr	r3, [pc, #72]	; (800349c <xTaskResumeAll+0x138>)
 8003452:	2200      	movs	r2, #0
 8003454:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003456:	4b10      	ldr	r3, [pc, #64]	; (8003498 <xTaskResumeAll+0x134>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d009      	beq.n	8003472 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800345e:	2301      	movs	r3, #1
 8003460:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003462:	4b0f      	ldr	r3, [pc, #60]	; (80034a0 <xTaskResumeAll+0x13c>)
 8003464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	f3bf 8f4f 	dsb	sy
 800346e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003472:	f001 faf7 	bl	8004a64 <vPortExitCritical>

    return xAlreadyYielded;
 8003476:	68bb      	ldr	r3, [r7, #8]
}
 8003478:	4618      	mov	r0, r3
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	2000013c 	.word	0x2000013c
 8003484:	20000114 	.word	0x20000114
 8003488:	200000d4 	.word	0x200000d4
 800348c:	2000011c 	.word	0x2000011c
 8003490:	20000040 	.word	0x20000040
 8003494:	2000003c 	.word	0x2000003c
 8003498:	20000128 	.word	0x20000128
 800349c:	20000124 	.word	0x20000124
 80034a0:	e000ed04 	.word	0xe000ed04

080034a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80034aa:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <xTaskGetTickCount+0x1c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80034b0:	687b      	ldr	r3, [r7, #4]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	20000118 	.word	0x20000118

080034c4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80034ca:	f001 fb87 	bl	8004bdc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80034ce:	2300      	movs	r3, #0
 80034d0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80034d2:	4b04      	ldr	r3, [pc, #16]	; (80034e4 <xTaskGetTickCountFromISR+0x20>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80034d8:	683b      	ldr	r3, [r7, #0]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20000118 	.word	0x20000118

080034e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80034ee:	2300      	movs	r3, #0
 80034f0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034f2:	4b50      	ldr	r3, [pc, #320]	; (8003634 <xTaskIncrementTick+0x14c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f040 8092 	bne.w	8003620 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80034fc:	4b4e      	ldr	r3, [pc, #312]	; (8003638 <xTaskIncrementTick+0x150>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	3301      	adds	r3, #1
 8003502:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003504:	4a4c      	ldr	r2, [pc, #304]	; (8003638 <xTaskIncrementTick+0x150>)
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d120      	bne.n	8003552 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003510:	4b4a      	ldr	r3, [pc, #296]	; (800363c <xTaskIncrementTick+0x154>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00a      	beq.n	8003530 <xTaskIncrementTick+0x48>
        __asm volatile
 800351a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351e:	f383 8811 	msr	BASEPRI, r3
 8003522:	f3bf 8f6f 	isb	sy
 8003526:	f3bf 8f4f 	dsb	sy
 800352a:	603b      	str	r3, [r7, #0]
    }
 800352c:	bf00      	nop
 800352e:	e7fe      	b.n	800352e <xTaskIncrementTick+0x46>
 8003530:	4b42      	ldr	r3, [pc, #264]	; (800363c <xTaskIncrementTick+0x154>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	4b42      	ldr	r3, [pc, #264]	; (8003640 <xTaskIncrementTick+0x158>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a40      	ldr	r2, [pc, #256]	; (800363c <xTaskIncrementTick+0x154>)
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	4a40      	ldr	r2, [pc, #256]	; (8003640 <xTaskIncrementTick+0x158>)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6013      	str	r3, [r2, #0]
 8003544:	4b3f      	ldr	r3, [pc, #252]	; (8003644 <xTaskIncrementTick+0x15c>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	3301      	adds	r3, #1
 800354a:	4a3e      	ldr	r2, [pc, #248]	; (8003644 <xTaskIncrementTick+0x15c>)
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	f000 fac7 	bl	8003ae0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003552:	4b3d      	ldr	r3, [pc, #244]	; (8003648 <xTaskIncrementTick+0x160>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	429a      	cmp	r2, r3
 800355a:	d34c      	bcc.n	80035f6 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800355c:	4b37      	ldr	r3, [pc, #220]	; (800363c <xTaskIncrementTick+0x154>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d104      	bne.n	8003570 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003566:	4b38      	ldr	r3, [pc, #224]	; (8003648 <xTaskIncrementTick+0x160>)
 8003568:	f04f 32ff 	mov.w	r2, #4294967295
 800356c:	601a      	str	r2, [r3, #0]
                    break;
 800356e:	e042      	b.n	80035f6 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003570:	4b32      	ldr	r3, [pc, #200]	; (800363c <xTaskIncrementTick+0x154>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	429a      	cmp	r2, r3
 8003586:	d203      	bcs.n	8003590 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003588:	4a2f      	ldr	r2, [pc, #188]	; (8003648 <xTaskIncrementTick+0x160>)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800358e:	e032      	b.n	80035f6 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	3304      	adds	r3, #4
 8003594:	4618      	mov	r0, r3
 8003596:	f7fe fee3 	bl	8002360 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d004      	beq.n	80035ac <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	3318      	adds	r3, #24
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7fe feda 	bl	8002360 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f004 f8a6 	bl	8007700 <SEGGER_SYSVIEW_OnTaskStartReady>
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b8:	2201      	movs	r2, #1
 80035ba:	409a      	lsls	r2, r3
 80035bc:	4b23      	ldr	r3, [pc, #140]	; (800364c <xTaskIncrementTick+0x164>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	4a22      	ldr	r2, [pc, #136]	; (800364c <xTaskIncrementTick+0x164>)
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ca:	4613      	mov	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4413      	add	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4a1f      	ldr	r2, [pc, #124]	; (8003650 <xTaskIncrementTick+0x168>)
 80035d4:	441a      	add	r2, r3
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	3304      	adds	r3, #4
 80035da:	4619      	mov	r1, r3
 80035dc:	4610      	mov	r0, r2
 80035de:	f7fe fe62 	bl	80022a6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e6:	4b1b      	ldr	r3, [pc, #108]	; (8003654 <xTaskIncrementTick+0x16c>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d3b5      	bcc.n	800355c <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80035f0:	2301      	movs	r3, #1
 80035f2:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035f4:	e7b2      	b.n	800355c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80035f6:	4b17      	ldr	r3, [pc, #92]	; (8003654 <xTaskIncrementTick+0x16c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035fc:	4914      	ldr	r1, [pc, #80]	; (8003650 <xTaskIncrementTick+0x168>)
 80035fe:	4613      	mov	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	440b      	add	r3, r1
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d901      	bls.n	8003612 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 800360e:	2301      	movs	r3, #1
 8003610:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003612:	4b11      	ldr	r3, [pc, #68]	; (8003658 <xTaskIncrementTick+0x170>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d007      	beq.n	800362a <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 800361a:	2301      	movs	r3, #1
 800361c:	617b      	str	r3, [r7, #20]
 800361e:	e004      	b.n	800362a <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003620:	4b0e      	ldr	r3, [pc, #56]	; (800365c <xTaskIncrementTick+0x174>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	3301      	adds	r3, #1
 8003626:	4a0d      	ldr	r2, [pc, #52]	; (800365c <xTaskIncrementTick+0x174>)
 8003628:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800362a:	697b      	ldr	r3, [r7, #20]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	2000013c 	.word	0x2000013c
 8003638:	20000118 	.word	0x20000118
 800363c:	200000cc 	.word	0x200000cc
 8003640:	200000d0 	.word	0x200000d0
 8003644:	2000012c 	.word	0x2000012c
 8003648:	20000134 	.word	0x20000134
 800364c:	2000011c 	.word	0x2000011c
 8003650:	20000040 	.word	0x20000040
 8003654:	2000003c 	.word	0x2000003c
 8003658:	20000128 	.word	0x20000128
 800365c:	20000124 	.word	0x20000124

08003660 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003666:	4b2d      	ldr	r3, [pc, #180]	; (800371c <vTaskSwitchContext+0xbc>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800366e:	4b2c      	ldr	r3, [pc, #176]	; (8003720 <vTaskSwitchContext+0xc0>)
 8003670:	2201      	movs	r2, #1
 8003672:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003674:	e04d      	b.n	8003712 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003676:	4b2a      	ldr	r3, [pc, #168]	; (8003720 <vTaskSwitchContext+0xc0>)
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800367c:	4b29      	ldr	r3, [pc, #164]	; (8003724 <vTaskSwitchContext+0xc4>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	fab3 f383 	clz	r3, r3
 8003688:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800368a:	7afb      	ldrb	r3, [r7, #11]
 800368c:	f1c3 031f 	rsb	r3, r3, #31
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	4925      	ldr	r1, [pc, #148]	; (8003728 <vTaskSwitchContext+0xc8>)
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	440b      	add	r3, r1
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10a      	bne.n	80036bc <vTaskSwitchContext+0x5c>
        __asm volatile
 80036a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036aa:	f383 8811 	msr	BASEPRI, r3
 80036ae:	f3bf 8f6f 	isb	sy
 80036b2:	f3bf 8f4f 	dsb	sy
 80036b6:	607b      	str	r3, [r7, #4]
    }
 80036b8:	bf00      	nop
 80036ba:	e7fe      	b.n	80036ba <vTaskSwitchContext+0x5a>
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	4613      	mov	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4413      	add	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4a18      	ldr	r2, [pc, #96]	; (8003728 <vTaskSwitchContext+0xc8>)
 80036c8:	4413      	add	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	605a      	str	r2, [r3, #4]
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	3308      	adds	r3, #8
 80036de:	429a      	cmp	r2, r3
 80036e0:	d104      	bne.n	80036ec <vTaskSwitchContext+0x8c>
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	605a      	str	r2, [r3, #4]
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	4a0e      	ldr	r2, [pc, #56]	; (800372c <vTaskSwitchContext+0xcc>)
 80036f4:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80036f6:	4b0d      	ldr	r3, [pc, #52]	; (800372c <vTaskSwitchContext+0xcc>)
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	4b0d      	ldr	r3, [pc, #52]	; (8003730 <vTaskSwitchContext+0xd0>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d102      	bne.n	8003708 <vTaskSwitchContext+0xa8>
 8003702:	f003 ff5d 	bl	80075c0 <SEGGER_SYSVIEW_OnIdle>
}
 8003706:	e004      	b.n	8003712 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003708:	4b08      	ldr	r3, [pc, #32]	; (800372c <vTaskSwitchContext+0xcc>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	f003 ffb5 	bl	800767c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003712:	bf00      	nop
 8003714:	3718      	adds	r7, #24
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	2000013c 	.word	0x2000013c
 8003720:	20000128 	.word	0x20000128
 8003724:	2000011c 	.word	0x2000011c
 8003728:	20000040 	.word	0x20000040
 800372c:	2000003c 	.word	0x2000003c
 8003730:	20000138 	.word	0x20000138

08003734 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10a      	bne.n	800375a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003748:	f383 8811 	msr	BASEPRI, r3
 800374c:	f3bf 8f6f 	isb	sy
 8003750:	f3bf 8f4f 	dsb	sy
 8003754:	60fb      	str	r3, [r7, #12]
    }
 8003756:	bf00      	nop
 8003758:	e7fe      	b.n	8003758 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800375a:	4b07      	ldr	r3, [pc, #28]	; (8003778 <vTaskPlaceOnEventList+0x44>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	3318      	adds	r3, #24
 8003760:	4619      	mov	r1, r3
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7fe fdc3 	bl	80022ee <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003768:	2101      	movs	r1, #1
 800376a:	6838      	ldr	r0, [r7, #0]
 800376c:	f000 fc10 	bl	8003f90 <prvAddCurrentTaskToDelayedList>
}
 8003770:	bf00      	nop
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	2000003c 	.word	0x2000003c

0800377c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10a      	bne.n	80037a4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800378e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003792:	f383 8811 	msr	BASEPRI, r3
 8003796:	f3bf 8f6f 	isb	sy
 800379a:	f3bf 8f4f 	dsb	sy
 800379e:	617b      	str	r3, [r7, #20]
    }
 80037a0:	bf00      	nop
 80037a2:	e7fe      	b.n	80037a2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037a4:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <vTaskPlaceOnEventListRestricted+0x58>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	3318      	adds	r3, #24
 80037aa:	4619      	mov	r1, r3
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f7fe fd7a 	bl	80022a6 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80037b8:	f04f 33ff 	mov.w	r3, #4294967295
 80037bc:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80037be:	2024      	movs	r0, #36	; 0x24
 80037c0:	f003 f950 	bl	8006a64 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	68b8      	ldr	r0, [r7, #8]
 80037c8:	f000 fbe2 	bl	8003f90 <prvAddCurrentTaskToDelayedList>
    }
 80037cc:	bf00      	nop
 80037ce:	3718      	adds	r7, #24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	2000003c 	.word	0x2000003c

080037d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10a      	bne.n	8003804 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80037ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f2:	f383 8811 	msr	BASEPRI, r3
 80037f6:	f3bf 8f6f 	isb	sy
 80037fa:	f3bf 8f4f 	dsb	sy
 80037fe:	60fb      	str	r3, [r7, #12]
    }
 8003800:	bf00      	nop
 8003802:	e7fe      	b.n	8003802 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	3318      	adds	r3, #24
 8003808:	4618      	mov	r0, r3
 800380a:	f7fe fda9 	bl	8002360 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800380e:	4b1f      	ldr	r3, [pc, #124]	; (800388c <xTaskRemoveFromEventList+0xb4>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d120      	bne.n	8003858 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	3304      	adds	r3, #4
 800381a:	4618      	mov	r0, r3
 800381c:	f7fe fda0 	bl	8002360 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	4618      	mov	r0, r3
 8003824:	f003 ff6c 	bl	8007700 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382c:	2201      	movs	r2, #1
 800382e:	409a      	lsls	r2, r3
 8003830:	4b17      	ldr	r3, [pc, #92]	; (8003890 <xTaskRemoveFromEventList+0xb8>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4313      	orrs	r3, r2
 8003836:	4a16      	ldr	r2, [pc, #88]	; (8003890 <xTaskRemoveFromEventList+0xb8>)
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800383e:	4613      	mov	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4a13      	ldr	r2, [pc, #76]	; (8003894 <xTaskRemoveFromEventList+0xbc>)
 8003848:	441a      	add	r2, r3
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	3304      	adds	r3, #4
 800384e:	4619      	mov	r1, r3
 8003850:	4610      	mov	r0, r2
 8003852:	f7fe fd28 	bl	80022a6 <vListInsertEnd>
 8003856:	e005      	b.n	8003864 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	3318      	adds	r3, #24
 800385c:	4619      	mov	r1, r3
 800385e:	480e      	ldr	r0, [pc, #56]	; (8003898 <xTaskRemoveFromEventList+0xc0>)
 8003860:	f7fe fd21 	bl	80022a6 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003868:	4b0c      	ldr	r3, [pc, #48]	; (800389c <xTaskRemoveFromEventList+0xc4>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386e:	429a      	cmp	r2, r3
 8003870:	d905      	bls.n	800387e <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003872:	2301      	movs	r3, #1
 8003874:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003876:	4b0a      	ldr	r3, [pc, #40]	; (80038a0 <xTaskRemoveFromEventList+0xc8>)
 8003878:	2201      	movs	r2, #1
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	e001      	b.n	8003882 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 800387e:	2300      	movs	r3, #0
 8003880:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003882:	697b      	ldr	r3, [r7, #20]
}
 8003884:	4618      	mov	r0, r3
 8003886:	3718      	adds	r7, #24
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	2000013c 	.word	0x2000013c
 8003890:	2000011c 	.word	0x2000011c
 8003894:	20000040 	.word	0x20000040
 8003898:	200000d4 	.word	0x200000d4
 800389c:	2000003c 	.word	0x2000003c
 80038a0:	20000128 	.word	0x20000128

080038a4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80038ac:	4b06      	ldr	r3, [pc, #24]	; (80038c8 <vTaskInternalSetTimeOutState+0x24>)
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80038b4:	4b05      	ldr	r3, [pc, #20]	; (80038cc <vTaskInternalSetTimeOutState+0x28>)
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	605a      	str	r2, [r3, #4]
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	2000012c 	.word	0x2000012c
 80038cc:	20000118 	.word	0x20000118

080038d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b088      	sub	sp, #32
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10a      	bne.n	80038f6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80038e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e4:	f383 8811 	msr	BASEPRI, r3
 80038e8:	f3bf 8f6f 	isb	sy
 80038ec:	f3bf 8f4f 	dsb	sy
 80038f0:	613b      	str	r3, [r7, #16]
    }
 80038f2:	bf00      	nop
 80038f4:	e7fe      	b.n	80038f4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10a      	bne.n	8003912 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80038fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003900:	f383 8811 	msr	BASEPRI, r3
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	f3bf 8f4f 	dsb	sy
 800390c:	60fb      	str	r3, [r7, #12]
    }
 800390e:	bf00      	nop
 8003910:	e7fe      	b.n	8003910 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003912:	f001 f877 	bl	8004a04 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003916:	4b1f      	ldr	r3, [pc, #124]	; (8003994 <xTaskCheckForTimeOut+0xc4>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392e:	d102      	bne.n	8003936 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003930:	2300      	movs	r3, #0
 8003932:	61fb      	str	r3, [r7, #28]
 8003934:	e026      	b.n	8003984 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	4b17      	ldr	r3, [pc, #92]	; (8003998 <xTaskCheckForTimeOut+0xc8>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	429a      	cmp	r2, r3
 8003940:	d00a      	beq.n	8003958 <xTaskCheckForTimeOut+0x88>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	429a      	cmp	r2, r3
 800394a:	d305      	bcc.n	8003958 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800394c:	2301      	movs	r3, #1
 800394e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	e015      	b.n	8003984 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	429a      	cmp	r2, r3
 8003960:	d20b      	bcs.n	800397a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	1ad2      	subs	r2, r2, r3
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7ff ff98 	bl	80038a4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003974:	2300      	movs	r3, #0
 8003976:	61fb      	str	r3, [r7, #28]
 8003978:	e004      	b.n	8003984 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2200      	movs	r2, #0
 800397e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003980:	2301      	movs	r3, #1
 8003982:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003984:	f001 f86e 	bl	8004a64 <vPortExitCritical>

    return xReturn;
 8003988:	69fb      	ldr	r3, [r7, #28]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3720      	adds	r7, #32
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	20000118 	.word	0x20000118
 8003998:	2000012c 	.word	0x2000012c

0800399c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80039a0:	4b03      	ldr	r3, [pc, #12]	; (80039b0 <vTaskMissedYield+0x14>)
 80039a2:	2201      	movs	r2, #1
 80039a4:	601a      	str	r2, [r3, #0]
}
 80039a6:	bf00      	nop
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	20000128 	.word	0x20000128

080039b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80039bc:	f000 f852 	bl	8003a64 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80039c0:	4b06      	ldr	r3, [pc, #24]	; (80039dc <prvIdleTask+0x28>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d9f9      	bls.n	80039bc <prvIdleTask+0x8>
                {
                    taskYIELD();
 80039c8:	4b05      	ldr	r3, [pc, #20]	; (80039e0 <prvIdleTask+0x2c>)
 80039ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	f3bf 8f4f 	dsb	sy
 80039d4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80039d8:	e7f0      	b.n	80039bc <prvIdleTask+0x8>
 80039da:	bf00      	nop
 80039dc:	20000040 	.word	0x20000040
 80039e0:	e000ed04 	.word	0xe000ed04

080039e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039ea:	2300      	movs	r3, #0
 80039ec:	607b      	str	r3, [r7, #4]
 80039ee:	e00c      	b.n	8003a0a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	4613      	mov	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4413      	add	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4a12      	ldr	r2, [pc, #72]	; (8003a44 <prvInitialiseTaskLists+0x60>)
 80039fc:	4413      	add	r3, r2
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fe fc24 	bl	800224c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3301      	adds	r3, #1
 8003a08:	607b      	str	r3, [r7, #4]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b04      	cmp	r3, #4
 8003a0e:	d9ef      	bls.n	80039f0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003a10:	480d      	ldr	r0, [pc, #52]	; (8003a48 <prvInitialiseTaskLists+0x64>)
 8003a12:	f7fe fc1b 	bl	800224c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003a16:	480d      	ldr	r0, [pc, #52]	; (8003a4c <prvInitialiseTaskLists+0x68>)
 8003a18:	f7fe fc18 	bl	800224c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003a1c:	480c      	ldr	r0, [pc, #48]	; (8003a50 <prvInitialiseTaskLists+0x6c>)
 8003a1e:	f7fe fc15 	bl	800224c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003a22:	480c      	ldr	r0, [pc, #48]	; (8003a54 <prvInitialiseTaskLists+0x70>)
 8003a24:	f7fe fc12 	bl	800224c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003a28:	480b      	ldr	r0, [pc, #44]	; (8003a58 <prvInitialiseTaskLists+0x74>)
 8003a2a:	f7fe fc0f 	bl	800224c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003a2e:	4b0b      	ldr	r3, [pc, #44]	; (8003a5c <prvInitialiseTaskLists+0x78>)
 8003a30:	4a05      	ldr	r2, [pc, #20]	; (8003a48 <prvInitialiseTaskLists+0x64>)
 8003a32:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a34:	4b0a      	ldr	r3, [pc, #40]	; (8003a60 <prvInitialiseTaskLists+0x7c>)
 8003a36:	4a05      	ldr	r2, [pc, #20]	; (8003a4c <prvInitialiseTaskLists+0x68>)
 8003a38:	601a      	str	r2, [r3, #0]
}
 8003a3a:	bf00      	nop
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	20000040 	.word	0x20000040
 8003a48:	200000a4 	.word	0x200000a4
 8003a4c:	200000b8 	.word	0x200000b8
 8003a50:	200000d4 	.word	0x200000d4
 8003a54:	200000e8 	.word	0x200000e8
 8003a58:	20000100 	.word	0x20000100
 8003a5c:	200000cc 	.word	0x200000cc
 8003a60:	200000d0 	.word	0x200000d0

08003a64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a6a:	e019      	b.n	8003aa0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003a6c:	f000 ffca 	bl	8004a04 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a70:	4b10      	ldr	r3, [pc, #64]	; (8003ab4 <prvCheckTasksWaitingTermination+0x50>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7fe fc6f 	bl	8002360 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003a82:	4b0d      	ldr	r3, [pc, #52]	; (8003ab8 <prvCheckTasksWaitingTermination+0x54>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	3b01      	subs	r3, #1
 8003a88:	4a0b      	ldr	r2, [pc, #44]	; (8003ab8 <prvCheckTasksWaitingTermination+0x54>)
 8003a8a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003a8c:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <prvCheckTasksWaitingTermination+0x58>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	3b01      	subs	r3, #1
 8003a92:	4a0a      	ldr	r2, [pc, #40]	; (8003abc <prvCheckTasksWaitingTermination+0x58>)
 8003a94:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003a96:	f000 ffe5 	bl	8004a64 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f810 	bl	8003ac0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003aa0:	4b06      	ldr	r3, [pc, #24]	; (8003abc <prvCheckTasksWaitingTermination+0x58>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1e1      	bne.n	8003a6c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003aa8:	bf00      	nop
 8003aaa:	bf00      	nop
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	200000e8 	.word	0x200000e8
 8003ab8:	20000114 	.word	0x20000114
 8003abc:	200000fc 	.word	0x200000fc

08003ac0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003acc:	4618      	mov	r0, r3
 8003ace:	f001 f9a5 	bl	8004e1c <vPortFree>
                vPortFree( pxTCB );
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f001 f9a2 	bl	8004e1c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003ad8:	bf00      	nop
 8003ada:	3708      	adds	r7, #8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ae4:	4b0a      	ldr	r3, [pc, #40]	; (8003b10 <prvResetNextTaskUnblockTime+0x30>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d104      	bne.n	8003af8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003aee:	4b09      	ldr	r3, [pc, #36]	; (8003b14 <prvResetNextTaskUnblockTime+0x34>)
 8003af0:	f04f 32ff 	mov.w	r2, #4294967295
 8003af4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003af6:	e005      	b.n	8003b04 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003af8:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <prvResetNextTaskUnblockTime+0x30>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a04      	ldr	r2, [pc, #16]	; (8003b14 <prvResetNextTaskUnblockTime+0x34>)
 8003b02:	6013      	str	r3, [r2, #0]
}
 8003b04:	bf00      	nop
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	200000cc 	.word	0x200000cc
 8003b14:	20000134 	.word	0x20000134

08003b18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003b1e:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <xTaskGetSchedulerState+0x34>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d102      	bne.n	8003b2c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003b26:	2301      	movs	r3, #1
 8003b28:	607b      	str	r3, [r7, #4]
 8003b2a:	e008      	b.n	8003b3e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b2c:	4b08      	ldr	r3, [pc, #32]	; (8003b50 <xTaskGetSchedulerState+0x38>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d102      	bne.n	8003b3a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003b34:	2302      	movs	r3, #2
 8003b36:	607b      	str	r3, [r7, #4]
 8003b38:	e001      	b.n	8003b3e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003b3e:	687b      	ldr	r3, [r7, #4]
    }
 8003b40:	4618      	mov	r0, r3
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr
 8003b4c:	20000120 	.word	0x20000120
 8003b50:	2000013c 	.word	0x2000013c

08003b54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003b60:	2300      	movs	r3, #0
 8003b62:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d068      	beq.n	8003c3c <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003b6a:	4b37      	ldr	r3, [pc, #220]	; (8003c48 <xTaskPriorityDisinherit+0xf4>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d00a      	beq.n	8003b8a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b78:	f383 8811 	msr	BASEPRI, r3
 8003b7c:	f3bf 8f6f 	isb	sy
 8003b80:	f3bf 8f4f 	dsb	sy
 8003b84:	60fb      	str	r3, [r7, #12]
    }
 8003b86:	bf00      	nop
 8003b88:	e7fe      	b.n	8003b88 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10a      	bne.n	8003ba8 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b96:	f383 8811 	msr	BASEPRI, r3
 8003b9a:	f3bf 8f6f 	isb	sy
 8003b9e:	f3bf 8f4f 	dsb	sy
 8003ba2:	60bb      	str	r3, [r7, #8]
    }
 8003ba4:	bf00      	nop
 8003ba6:	e7fe      	b.n	8003ba6 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bac:	1e5a      	subs	r2, r3, #1
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d03e      	beq.n	8003c3c <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d13a      	bne.n	8003c3c <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	3304      	adds	r3, #4
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fe fbc8 	bl	8002360 <uxListRemove>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10a      	bne.n	8003bec <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bda:	2201      	movs	r2, #1
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	43da      	mvns	r2, r3
 8003be2:	4b1a      	ldr	r3, [pc, #104]	; (8003c4c <xTaskPriorityDisinherit+0xf8>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4013      	ands	r3, r2
 8003be8:	4a18      	ldr	r2, [pc, #96]	; (8003c4c <xTaskPriorityDisinherit+0xf8>)
 8003bea:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4619      	mov	r1, r3
 8003bf0:	204a      	movs	r0, #74	; 0x4a
 8003bf2:	f002 ff55 	bl	8006aa0 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c02:	f1c3 0205 	rsb	r2, r3, #5
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0e:	2201      	movs	r2, #1
 8003c10:	409a      	lsls	r2, r3
 8003c12:	4b0e      	ldr	r3, [pc, #56]	; (8003c4c <xTaskPriorityDisinherit+0xf8>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	4a0c      	ldr	r2, [pc, #48]	; (8003c4c <xTaskPriorityDisinherit+0xf8>)
 8003c1a:	6013      	str	r3, [r2, #0]
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c20:	4613      	mov	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4a09      	ldr	r2, [pc, #36]	; (8003c50 <xTaskPriorityDisinherit+0xfc>)
 8003c2a:	441a      	add	r2, r3
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	3304      	adds	r3, #4
 8003c30:	4619      	mov	r1, r3
 8003c32:	4610      	mov	r0, r2
 8003c34:	f7fe fb37 	bl	80022a6 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003c3c:	697b      	ldr	r3, [r7, #20]
    }
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3718      	adds	r7, #24
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	2000003c 	.word	0x2000003c
 8003c4c:	2000011c 	.word	0x2000011c
 8003c50:	20000040 	.word	0x20000040

08003c54 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b088      	sub	sp, #32
 8003c58:	af02      	add	r7, sp, #8
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
 8003c60:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00a      	beq.n	8003c7e <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8003c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6c:	f383 8811 	msr	BASEPRI, r3
 8003c70:	f3bf 8f6f 	isb	sy
 8003c74:	f3bf 8f4f 	dsb	sy
 8003c78:	613b      	str	r3, [r7, #16]
    }
 8003c7a:	bf00      	nop
 8003c7c:	e7fe      	b.n	8003c7c <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8003c7e:	f000 fec1 	bl	8004a04 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003c82:	4b36      	ldr	r3, [pc, #216]	; (8003d5c <xTaskGenericNotifyWait+0x108>)
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	4413      	add	r3, r2
 8003c8a:	3354      	adds	r3, #84	; 0x54
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d022      	beq.n	8003cda <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003c94:	4b31      	ldr	r3, [pc, #196]	; (8003d5c <xTaskGenericNotifyWait+0x108>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	3214      	adds	r2, #20
 8003c9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	43d2      	mvns	r2, r2
 8003ca4:	4011      	ands	r1, r2
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	3214      	adds	r2, #20
 8003caa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003cae:	4b2b      	ldr	r3, [pc, #172]	; (8003d5c <xTaskGenericNotifyWait+0x108>)
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	3354      	adds	r3, #84	; 0x54
 8003cb8:	2201      	movs	r2, #1
 8003cba:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00b      	beq.n	8003cda <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	6a38      	ldr	r0, [r7, #32]
 8003cc6:	f000 f963 	bl	8003f90 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003cca:	4b25      	ldr	r3, [pc, #148]	; (8003d60 <xTaskGenericNotifyWait+0x10c>)
 8003ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	f3bf 8f4f 	dsb	sy
 8003cd6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003cda:	f000 fec3 	bl	8004a64 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003cde:	f000 fe91 	bl	8004a04 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	9300      	str	r3, [sp, #0]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	68b9      	ldr	r1, [r7, #8]
 8003cee:	2040      	movs	r0, #64	; 0x40
 8003cf0:	f002 ffe2 	bl	8006cb8 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d007      	beq.n	8003d0a <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003cfa:	4b18      	ldr	r3, [pc, #96]	; (8003d5c <xTaskGenericNotifyWait+0x108>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	3214      	adds	r2, #20
 8003d02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003d0a:	4b14      	ldr	r3, [pc, #80]	; (8003d5c <xTaskGenericNotifyWait+0x108>)
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	4413      	add	r3, r2
 8003d12:	3354      	adds	r3, #84	; 0x54
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d002      	beq.n	8003d22 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	e00e      	b.n	8003d40 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003d22:	4b0e      	ldr	r3, [pc, #56]	; (8003d5c <xTaskGenericNotifyWait+0x108>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	3214      	adds	r2, #20
 8003d2a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	43d2      	mvns	r2, r2
 8003d32:	4011      	ands	r1, r2
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	3214      	adds	r2, #20
 8003d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003d40:	4b06      	ldr	r3, [pc, #24]	; (8003d5c <xTaskGenericNotifyWait+0x108>)
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4413      	add	r3, r2
 8003d48:	3354      	adds	r3, #84	; 0x54
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003d4e:	f000 fe89 	bl	8004a64 <vPortExitCritical>

        return xReturn;
 8003d52:	697b      	ldr	r3, [r7, #20]
    }
 8003d54:	4618      	mov	r0, r3
 8003d56:	3718      	adds	r7, #24
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	2000003c 	.word	0x2000003c
 8003d60:	e000ed04 	.word	0xe000ed04

08003d64 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b092      	sub	sp, #72	; 0x48
 8003d68:	af02      	add	r7, sp, #8
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
 8003d70:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8003d72:	2301      	movs	r3, #1
 8003d74:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10a      	bne.n	8003d92 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8003d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d80:	f383 8811 	msr	BASEPRI, r3
 8003d84:	f3bf 8f6f 	isb	sy
 8003d88:	f3bf 8f4f 	dsb	sy
 8003d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8003d8e:	bf00      	nop
 8003d90:	e7fe      	b.n	8003d90 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00a      	beq.n	8003dae <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8003d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9c:	f383 8811 	msr	BASEPRI, r3
 8003da0:	f3bf 8f6f 	isb	sy
 8003da4:	f3bf 8f4f 	dsb	sy
 8003da8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003daa:	bf00      	nop
 8003dac:	e7fe      	b.n	8003dac <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003dae:	f000 ff15 	bl	8004bdc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8003db6:	f3ef 8211 	mrs	r2, BASEPRI
 8003dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dbe:	f383 8811 	msr	BASEPRI, r3
 8003dc2:	f3bf 8f6f 	isb	sy
 8003dc6:	f3bf 8f4f 	dsb	sy
 8003dca:	627a      	str	r2, [r7, #36]	; 0x24
 8003dcc:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003dd0:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8003dd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d006      	beq.n	8003de6 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	3214      	adds	r2, #20
 8003dde:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003de2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003de4:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003de6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	4413      	add	r3, r2
 8003dec:	3354      	adds	r3, #84	; 0x54
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003df4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	4413      	add	r3, r2
 8003dfa:	3354      	adds	r3, #84	; 0x54
 8003dfc:	2202      	movs	r2, #2
 8003dfe:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003e00:	78fb      	ldrb	r3, [r7, #3]
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	d83b      	bhi.n	8003e7e <xTaskGenericNotifyFromISR+0x11a>
 8003e06:	a201      	add	r2, pc, #4	; (adr r2, 8003e0c <xTaskGenericNotifyFromISR+0xa8>)
 8003e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0c:	08003e9d 	.word	0x08003e9d
 8003e10:	08003e21 	.word	0x08003e21
 8003e14:	08003e3d 	.word	0x08003e3d
 8003e18:	08003e55 	.word	0x08003e55
 8003e1c:	08003e63 	.word	0x08003e63
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	3214      	adds	r2, #20
 8003e26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	ea42 0103 	orr.w	r1, r2, r3
 8003e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	3214      	adds	r2, #20
 8003e36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003e3a:	e032      	b.n	8003ea2 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	3214      	adds	r2, #20
 8003e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e46:	1c59      	adds	r1, r3, #1
 8003e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	3214      	adds	r2, #20
 8003e4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003e52:	e026      	b.n	8003ea2 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	3214      	adds	r2, #20
 8003e5a:	6879      	ldr	r1, [r7, #4]
 8003e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003e60:	e01f      	b.n	8003ea2 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003e62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d006      	beq.n	8003e78 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	3214      	adds	r2, #20
 8003e70:	6879      	ldr	r1, [r7, #4]
 8003e72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003e76:	e014      	b.n	8003ea2 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8003e7c:	e011      	b.n	8003ea2 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003e7e:	4b3d      	ldr	r3, [pc, #244]	; (8003f74 <xTaskGenericNotifyFromISR+0x210>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00c      	beq.n	8003ea0 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8003e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8a:	f383 8811 	msr	BASEPRI, r3
 8003e8e:	f3bf 8f6f 	isb	sy
 8003e92:	f3bf 8f4f 	dsb	sy
 8003e96:	61fb      	str	r3, [r7, #28]
    }
 8003e98:	bf00      	nop
 8003e9a:	e7fe      	b.n	8003e9a <xTaskGenericNotifyFromISR+0x136>
                    break;
 8003e9c:	bf00      	nop
 8003e9e:	e000      	b.n	8003ea2 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8003ea0:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 8003ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f003 fccd 	bl	8007844 <SEGGER_SYSVIEW_ShrinkId>
 8003eaa:	78f9      	ldrb	r1, [r7, #3]
 8003eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003eb0:	9201      	str	r2, [sp, #4]
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	4601      	mov	r1, r0
 8003eba:	203f      	movs	r0, #63	; 0x3f
 8003ebc:	f002 ff8e 	bl	8006ddc <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003ec0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d149      	bne.n	8003f5c <xTaskGenericNotifyFromISR+0x1f8>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00a      	beq.n	8003ee6 <xTaskGenericNotifyFromISR+0x182>
        __asm volatile
 8003ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed4:	f383 8811 	msr	BASEPRI, r3
 8003ed8:	f3bf 8f6f 	isb	sy
 8003edc:	f3bf 8f4f 	dsb	sy
 8003ee0:	61bb      	str	r3, [r7, #24]
    }
 8003ee2:	bf00      	nop
 8003ee4:	e7fe      	b.n	8003ee4 <xTaskGenericNotifyFromISR+0x180>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ee6:	4b24      	ldr	r3, [pc, #144]	; (8003f78 <xTaskGenericNotifyFromISR+0x214>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d120      	bne.n	8003f30 <xTaskGenericNotifyFromISR+0x1cc>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fe fa34 	bl	8002360 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003efa:	4618      	mov	r0, r3
 8003efc:	f003 fc00 	bl	8007700 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f04:	2201      	movs	r2, #1
 8003f06:	409a      	lsls	r2, r3
 8003f08:	4b1c      	ldr	r3, [pc, #112]	; (8003f7c <xTaskGenericNotifyFromISR+0x218>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	4a1b      	ldr	r2, [pc, #108]	; (8003f7c <xTaskGenericNotifyFromISR+0x218>)
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f16:	4613      	mov	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	4413      	add	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4a18      	ldr	r2, [pc, #96]	; (8003f80 <xTaskGenericNotifyFromISR+0x21c>)
 8003f20:	441a      	add	r2, r3
 8003f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f24:	3304      	adds	r3, #4
 8003f26:	4619      	mov	r1, r3
 8003f28:	4610      	mov	r0, r2
 8003f2a:	f7fe f9bc 	bl	80022a6 <vListInsertEnd>
 8003f2e:	e005      	b.n	8003f3c <xTaskGenericNotifyFromISR+0x1d8>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f32:	3318      	adds	r3, #24
 8003f34:	4619      	mov	r1, r3
 8003f36:	4813      	ldr	r0, [pc, #76]	; (8003f84 <xTaskGenericNotifyFromISR+0x220>)
 8003f38:	f7fe f9b5 	bl	80022a6 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f40:	4b11      	ldr	r3, [pc, #68]	; (8003f88 <xTaskGenericNotifyFromISR+0x224>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d908      	bls.n	8003f5c <xTaskGenericNotifyFromISR+0x1f8>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8003f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d002      	beq.n	8003f56 <xTaskGenericNotifyFromISR+0x1f2>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8003f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f52:	2201      	movs	r2, #1
 8003f54:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8003f56:	4b0d      	ldr	r3, [pc, #52]	; (8003f8c <xTaskGenericNotifyFromISR+0x228>)
 8003f58:	2201      	movs	r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f5e:	617b      	str	r3, [r7, #20]
        __asm volatile
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f383 8811 	msr	BASEPRI, r3
    }
 8003f66:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8003f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3740      	adds	r7, #64	; 0x40
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20000118 	.word	0x20000118
 8003f78:	2000013c 	.word	0x2000013c
 8003f7c:	2000011c 	.word	0x2000011c
 8003f80:	20000040 	.word	0x20000040
 8003f84:	200000d4 	.word	0x200000d4
 8003f88:	2000003c 	.word	0x2000003c
 8003f8c:	20000128 	.word	0x20000128

08003f90 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003f9a:	4b32      	ldr	r3, [pc, #200]	; (8004064 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fa0:	4b31      	ldr	r3, [pc, #196]	; (8004068 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7fe f9da 	bl	8002360 <uxListRemove>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10b      	bne.n	8003fca <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003fb2:	4b2d      	ldr	r3, [pc, #180]	; (8004068 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb8:	2201      	movs	r2, #1
 8003fba:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbe:	43da      	mvns	r2, r3
 8003fc0:	4b2a      	ldr	r3, [pc, #168]	; (800406c <prvAddCurrentTaskToDelayedList+0xdc>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	4a29      	ldr	r2, [pc, #164]	; (800406c <prvAddCurrentTaskToDelayedList+0xdc>)
 8003fc8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd0:	d110      	bne.n	8003ff4 <prvAddCurrentTaskToDelayedList+0x64>
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00d      	beq.n	8003ff4 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003fd8:	4b23      	ldr	r3, [pc, #140]	; (8004068 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	211b      	movs	r1, #27
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f003 fbd0 	bl	8007784 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fe4:	4b20      	ldr	r3, [pc, #128]	; (8004068 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3304      	adds	r3, #4
 8003fea:	4619      	mov	r1, r3
 8003fec:	4820      	ldr	r0, [pc, #128]	; (8004070 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003fee:	f7fe f95a 	bl	80022a6 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003ff2:	e032      	b.n	800405a <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ffc:	4b1a      	ldr	r3, [pc, #104]	; (8004068 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	429a      	cmp	r2, r3
 800400a:	d20f      	bcs.n	800402c <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800400c:	4b16      	ldr	r3, [pc, #88]	; (8004068 <prvAddCurrentTaskToDelayedList+0xd8>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2104      	movs	r1, #4
 8004012:	4618      	mov	r0, r3
 8004014:	f003 fbb6 	bl	8007784 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004018:	4b16      	ldr	r3, [pc, #88]	; (8004074 <prvAddCurrentTaskToDelayedList+0xe4>)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	4b12      	ldr	r3, [pc, #72]	; (8004068 <prvAddCurrentTaskToDelayedList+0xd8>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	3304      	adds	r3, #4
 8004022:	4619      	mov	r1, r3
 8004024:	4610      	mov	r0, r2
 8004026:	f7fe f962 	bl	80022ee <vListInsert>
}
 800402a:	e016      	b.n	800405a <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 800402c:	4b0e      	ldr	r3, [pc, #56]	; (8004068 <prvAddCurrentTaskToDelayedList+0xd8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2104      	movs	r1, #4
 8004032:	4618      	mov	r0, r3
 8004034:	f003 fba6 	bl	8007784 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004038:	4b0f      	ldr	r3, [pc, #60]	; (8004078 <prvAddCurrentTaskToDelayedList+0xe8>)
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	4b0a      	ldr	r3, [pc, #40]	; (8004068 <prvAddCurrentTaskToDelayedList+0xd8>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3304      	adds	r3, #4
 8004042:	4619      	mov	r1, r3
 8004044:	4610      	mov	r0, r2
 8004046:	f7fe f952 	bl	80022ee <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800404a:	4b0c      	ldr	r3, [pc, #48]	; (800407c <prvAddCurrentTaskToDelayedList+0xec>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	429a      	cmp	r2, r3
 8004052:	d202      	bcs.n	800405a <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8004054:	4a09      	ldr	r2, [pc, #36]	; (800407c <prvAddCurrentTaskToDelayedList+0xec>)
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	6013      	str	r3, [r2, #0]
}
 800405a:	bf00      	nop
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	20000118 	.word	0x20000118
 8004068:	2000003c 	.word	0x2000003c
 800406c:	2000011c 	.word	0x2000011c
 8004070:	20000100 	.word	0x20000100
 8004074:	200000d0 	.word	0x200000d0
 8004078:	200000cc 	.word	0x200000cc
 800407c:	20000134 	.word	0x20000134

08004080 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004086:	2300      	movs	r3, #0
 8004088:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800408a:	f000 fad5 	bl	8004638 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800408e:	4b11      	ldr	r3, [pc, #68]	; (80040d4 <xTimerCreateTimerTask+0x54>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00b      	beq.n	80040ae <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004096:	4b10      	ldr	r3, [pc, #64]	; (80040d8 <xTimerCreateTimerTask+0x58>)
 8004098:	9301      	str	r3, [sp, #4]
 800409a:	2302      	movs	r3, #2
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	2300      	movs	r3, #0
 80040a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80040a4:	490d      	ldr	r1, [pc, #52]	; (80040dc <xTimerCreateTimerTask+0x5c>)
 80040a6:	480e      	ldr	r0, [pc, #56]	; (80040e0 <xTimerCreateTimerTask+0x60>)
 80040a8:	f7fe fede 	bl	8002e68 <xTaskCreate>
 80040ac:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10a      	bne.n	80040ca <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80040b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b8:	f383 8811 	msr	BASEPRI, r3
 80040bc:	f3bf 8f6f 	isb	sy
 80040c0:	f3bf 8f4f 	dsb	sy
 80040c4:	603b      	str	r3, [r7, #0]
    }
 80040c6:	bf00      	nop
 80040c8:	e7fe      	b.n	80040c8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80040ca:	687b      	ldr	r3, [r7, #4]
    }
 80040cc:	4618      	mov	r0, r3
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	20000170 	.word	0x20000170
 80040d8:	20000174 	.word	0x20000174
 80040dc:	08007d00 	.word	0x08007d00
 80040e0:	08004219 	.word	0x08004219

080040e4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b08a      	sub	sp, #40	; 0x28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
 80040f0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10a      	bne.n	8004112 <xTimerGenericCommand+0x2e>
        __asm volatile
 80040fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004100:	f383 8811 	msr	BASEPRI, r3
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	f3bf 8f4f 	dsb	sy
 800410c:	623b      	str	r3, [r7, #32]
    }
 800410e:	bf00      	nop
 8004110:	e7fe      	b.n	8004110 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8004112:	4b1a      	ldr	r3, [pc, #104]	; (800417c <xTimerGenericCommand+0x98>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d02a      	beq.n	8004170 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2b05      	cmp	r3, #5
 800412a:	dc18      	bgt.n	800415e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800412c:	f7ff fcf4 	bl	8003b18 <xTaskGetSchedulerState>
 8004130:	4603      	mov	r3, r0
 8004132:	2b02      	cmp	r3, #2
 8004134:	d109      	bne.n	800414a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004136:	4b11      	ldr	r3, [pc, #68]	; (800417c <xTimerGenericCommand+0x98>)
 8004138:	6818      	ldr	r0, [r3, #0]
 800413a:	f107 0114 	add.w	r1, r7, #20
 800413e:	2300      	movs	r3, #0
 8004140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004142:	f7fe fa27 	bl	8002594 <xQueueGenericSend>
 8004146:	6278      	str	r0, [r7, #36]	; 0x24
 8004148:	e012      	b.n	8004170 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800414a:	4b0c      	ldr	r3, [pc, #48]	; (800417c <xTimerGenericCommand+0x98>)
 800414c:	6818      	ldr	r0, [r3, #0]
 800414e:	f107 0114 	add.w	r1, r7, #20
 8004152:	2300      	movs	r3, #0
 8004154:	2200      	movs	r2, #0
 8004156:	f7fe fa1d 	bl	8002594 <xQueueGenericSend>
 800415a:	6278      	str	r0, [r7, #36]	; 0x24
 800415c:	e008      	b.n	8004170 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800415e:	4b07      	ldr	r3, [pc, #28]	; (800417c <xTimerGenericCommand+0x98>)
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	f107 0114 	add.w	r1, r7, #20
 8004166:	2300      	movs	r3, #0
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	f7fe fb39 	bl	80027e0 <xQueueGenericSendFromISR>
 800416e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004172:	4618      	mov	r0, r3
 8004174:	3728      	adds	r7, #40	; 0x28
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	20000170 	.word	0x20000170

08004180 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004180:	b580      	push	{r7, lr}
 8004182:	b088      	sub	sp, #32
 8004184:	af02      	add	r7, sp, #8
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800418a:	4b22      	ldr	r3, [pc, #136]	; (8004214 <prvProcessExpiredTimer+0x94>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	3304      	adds	r3, #4
 8004198:	4618      	mov	r0, r3
 800419a:	f7fe f8e1 	bl	8002360 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d022      	beq.n	80041f2 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	699a      	ldr	r2, [r3, #24]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	18d1      	adds	r1, r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	6978      	ldr	r0, [r7, #20]
 80041ba:	f000 f8d1 	bl	8004360 <prvInsertTimerInActiveList>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d01f      	beq.n	8004204 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80041c4:	2300      	movs	r3, #0
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	2300      	movs	r3, #0
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	2100      	movs	r1, #0
 80041ce:	6978      	ldr	r0, [r7, #20]
 80041d0:	f7ff ff88 	bl	80040e4 <xTimerGenericCommand>
 80041d4:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d113      	bne.n	8004204 <prvProcessExpiredTimer+0x84>
        __asm volatile
 80041dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e0:	f383 8811 	msr	BASEPRI, r3
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	60fb      	str	r3, [r7, #12]
    }
 80041ee:	bf00      	nop
 80041f0:	e7fe      	b.n	80041f0 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041f8:	f023 0301 	bic.w	r3, r3, #1
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	6978      	ldr	r0, [r7, #20]
 800420a:	4798      	blx	r3
    }
 800420c:	bf00      	nop
 800420e:	3718      	adds	r7, #24
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	20000168 	.word	0x20000168

08004218 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004220:	f107 0308 	add.w	r3, r7, #8
 8004224:	4618      	mov	r0, r3
 8004226:	f000 f857 	bl	80042d8 <prvGetNextExpireTime>
 800422a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	4619      	mov	r1, r3
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f000 f803 	bl	800423c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004236:	f000 f8d5 	bl	80043e4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800423a:	e7f1      	b.n	8004220 <prvTimerTask+0x8>

0800423c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004246:	f7ff f87f 	bl	8003348 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800424a:	f107 0308 	add.w	r3, r7, #8
 800424e:	4618      	mov	r0, r3
 8004250:	f000 f866 	bl	8004320 <prvSampleTimeNow>
 8004254:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d130      	bne.n	80042be <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10a      	bne.n	8004278 <prvProcessTimerOrBlockTask+0x3c>
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	429a      	cmp	r2, r3
 8004268:	d806      	bhi.n	8004278 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800426a:	f7ff f87b 	bl	8003364 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800426e:	68f9      	ldr	r1, [r7, #12]
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff ff85 	bl	8004180 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004276:	e024      	b.n	80042c2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d008      	beq.n	8004290 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800427e:	4b13      	ldr	r3, [pc, #76]	; (80042cc <prvProcessTimerOrBlockTask+0x90>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <prvProcessTimerOrBlockTask+0x50>
 8004288:	2301      	movs	r3, #1
 800428a:	e000      	b.n	800428e <prvProcessTimerOrBlockTask+0x52>
 800428c:	2300      	movs	r3, #0
 800428e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004290:	4b0f      	ldr	r3, [pc, #60]	; (80042d0 <prvProcessTimerOrBlockTask+0x94>)
 8004292:	6818      	ldr	r0, [r3, #0]
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	4619      	mov	r1, r3
 800429e:	f7fe fdaf 	bl	8002e00 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80042a2:	f7ff f85f 	bl	8003364 <xTaskResumeAll>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10a      	bne.n	80042c2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80042ac:	4b09      	ldr	r3, [pc, #36]	; (80042d4 <prvProcessTimerOrBlockTask+0x98>)
 80042ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	f3bf 8f6f 	isb	sy
    }
 80042bc:	e001      	b.n	80042c2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80042be:	f7ff f851 	bl	8003364 <xTaskResumeAll>
    }
 80042c2:	bf00      	nop
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	2000016c 	.word	0x2000016c
 80042d0:	20000170 	.word	0x20000170
 80042d4:	e000ed04 	.word	0xe000ed04

080042d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80042e0:	4b0e      	ldr	r3, [pc, #56]	; (800431c <prvGetNextExpireTime+0x44>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <prvGetNextExpireTime+0x16>
 80042ea:	2201      	movs	r2, #1
 80042ec:	e000      	b.n	80042f0 <prvGetNextExpireTime+0x18>
 80042ee:	2200      	movs	r2, #0
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d105      	bne.n	8004308 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042fc:	4b07      	ldr	r3, [pc, #28]	; (800431c <prvGetNextExpireTime+0x44>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	e001      	b.n	800430c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800430c:	68fb      	ldr	r3, [r7, #12]
    }
 800430e:	4618      	mov	r0, r3
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	20000168 	.word	0x20000168

08004320 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004328:	f7ff f8bc 	bl	80034a4 <xTaskGetTickCount>
 800432c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800432e:	4b0b      	ldr	r3, [pc, #44]	; (800435c <prvSampleTimeNow+0x3c>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	429a      	cmp	r2, r3
 8004336:	d205      	bcs.n	8004344 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004338:	f000 f91a 	bl	8004570 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	e002      	b.n	800434a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800434a:	4a04      	ldr	r2, [pc, #16]	; (800435c <prvSampleTimeNow+0x3c>)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004350:	68fb      	ldr	r3, [r7, #12]
    }
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	20000178 	.word	0x20000178

08004360 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
 800436c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800436e:	2300      	movs	r3, #0
 8004370:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	429a      	cmp	r2, r3
 8004384:	d812      	bhi.n	80043ac <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	1ad2      	subs	r2, r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	429a      	cmp	r2, r3
 8004392:	d302      	bcc.n	800439a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004394:	2301      	movs	r3, #1
 8004396:	617b      	str	r3, [r7, #20]
 8004398:	e01b      	b.n	80043d2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800439a:	4b10      	ldr	r3, [pc, #64]	; (80043dc <prvInsertTimerInActiveList+0x7c>)
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	3304      	adds	r3, #4
 80043a2:	4619      	mov	r1, r3
 80043a4:	4610      	mov	r0, r2
 80043a6:	f7fd ffa2 	bl	80022ee <vListInsert>
 80043aa:	e012      	b.n	80043d2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d206      	bcs.n	80043c2 <prvInsertTimerInActiveList+0x62>
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d302      	bcc.n	80043c2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80043bc:	2301      	movs	r3, #1
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	e007      	b.n	80043d2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80043c2:	4b07      	ldr	r3, [pc, #28]	; (80043e0 <prvInsertTimerInActiveList+0x80>)
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	3304      	adds	r3, #4
 80043ca:	4619      	mov	r1, r3
 80043cc:	4610      	mov	r0, r2
 80043ce:	f7fd ff8e 	bl	80022ee <vListInsert>
            }
        }

        return xProcessTimerNow;
 80043d2:	697b      	ldr	r3, [r7, #20]
    }
 80043d4:	4618      	mov	r0, r3
 80043d6:	3718      	adds	r7, #24
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	2000016c 	.word	0x2000016c
 80043e0:	20000168 	.word	0x20000168

080043e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b08c      	sub	sp, #48	; 0x30
 80043e8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80043ea:	e0ae      	b.n	800454a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f2c0 80aa 	blt.w	8004548 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d004      	beq.n	800440a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	3304      	adds	r3, #4
 8004404:	4618      	mov	r0, r3
 8004406:	f7fd ffab 	bl	8002360 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800440a:	1d3b      	adds	r3, r7, #4
 800440c:	4618      	mov	r0, r3
 800440e:	f7ff ff87 	bl	8004320 <prvSampleTimeNow>
 8004412:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	2b09      	cmp	r3, #9
 8004418:	f200 8097 	bhi.w	800454a <prvProcessReceivedCommands+0x166>
 800441c:	a201      	add	r2, pc, #4	; (adr r2, 8004424 <prvProcessReceivedCommands+0x40>)
 800441e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004422:	bf00      	nop
 8004424:	0800444d 	.word	0x0800444d
 8004428:	0800444d 	.word	0x0800444d
 800442c:	0800444d 	.word	0x0800444d
 8004430:	080044c1 	.word	0x080044c1
 8004434:	080044d5 	.word	0x080044d5
 8004438:	0800451f 	.word	0x0800451f
 800443c:	0800444d 	.word	0x0800444d
 8004440:	0800444d 	.word	0x0800444d
 8004444:	080044c1 	.word	0x080044c1
 8004448:	080044d5 	.word	0x080044d5
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004452:	f043 0301 	orr.w	r3, r3, #1
 8004456:	b2da      	uxtb	r2, r3
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	18d1      	adds	r1, r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6a3a      	ldr	r2, [r7, #32]
 800446a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800446c:	f7ff ff78 	bl	8004360 <prvInsertTimerInActiveList>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d069      	beq.n	800454a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800447c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004484:	f003 0304 	and.w	r3, r3, #4
 8004488:	2b00      	cmp	r3, #0
 800448a:	d05e      	beq.n	800454a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	441a      	add	r2, r3
 8004494:	2300      	movs	r3, #0
 8004496:	9300      	str	r3, [sp, #0]
 8004498:	2300      	movs	r3, #0
 800449a:	2100      	movs	r1, #0
 800449c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800449e:	f7ff fe21 	bl	80040e4 <xTimerGenericCommand>
 80044a2:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d14f      	bne.n	800454a <prvProcessReceivedCommands+0x166>
        __asm volatile
 80044aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ae:	f383 8811 	msr	BASEPRI, r3
 80044b2:	f3bf 8f6f 	isb	sy
 80044b6:	f3bf 8f4f 	dsb	sy
 80044ba:	61bb      	str	r3, [r7, #24]
    }
 80044bc:	bf00      	nop
 80044be:	e7fe      	b.n	80044be <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80044c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044c6:	f023 0301 	bic.w	r3, r3, #1
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80044d2:	e03a      	b.n	800454a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044da:	f043 0301 	orr.w	r3, r3, #1
 80044de:	b2da      	uxtb	r2, r3
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10a      	bne.n	800450a <prvProcessReceivedCommands+0x126>
        __asm volatile
 80044f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f8:	f383 8811 	msr	BASEPRI, r3
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	617b      	str	r3, [r7, #20]
    }
 8004506:	bf00      	nop
 8004508:	e7fe      	b.n	8004508 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450c:	699a      	ldr	r2, [r3, #24]
 800450e:	6a3b      	ldr	r3, [r7, #32]
 8004510:	18d1      	adds	r1, r2, r3
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	6a3a      	ldr	r2, [r7, #32]
 8004516:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004518:	f7ff ff22 	bl	8004360 <prvInsertTimerInActiveList>
                        break;
 800451c:	e015      	b.n	800454a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004524:	f003 0302 	and.w	r3, r3, #2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d103      	bne.n	8004534 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 800452c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800452e:	f000 fc75 	bl	8004e1c <vPortFree>
 8004532:	e00a      	b.n	800454a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800453a:	f023 0301 	bic.w	r3, r3, #1
 800453e:	b2da      	uxtb	r2, r3
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004546:	e000      	b.n	800454a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004548:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800454a:	4b08      	ldr	r3, [pc, #32]	; (800456c <prvProcessReceivedCommands+0x188>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f107 0108 	add.w	r1, r7, #8
 8004552:	2200      	movs	r2, #0
 8004554:	4618      	mov	r0, r3
 8004556:	f7fe fa01 	bl	800295c <xQueueReceive>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	f47f af45 	bne.w	80043ec <prvProcessReceivedCommands+0x8>
        }
    }
 8004562:	bf00      	nop
 8004564:	bf00      	nop
 8004566:	3728      	adds	r7, #40	; 0x28
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	20000170 	.word	0x20000170

08004570 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004570:	b580      	push	{r7, lr}
 8004572:	b088      	sub	sp, #32
 8004574:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004576:	e048      	b.n	800460a <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004578:	4b2d      	ldr	r3, [pc, #180]	; (8004630 <prvSwitchTimerLists+0xc0>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004582:	4b2b      	ldr	r3, [pc, #172]	; (8004630 <prvSwitchTimerLists+0xc0>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	3304      	adds	r3, #4
 8004590:	4618      	mov	r0, r3
 8004592:	f7fd fee5 	bl	8002360 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d02e      	beq.n	800460a <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	4413      	add	r3, r2
 80045b4:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d90e      	bls.n	80045dc <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	68ba      	ldr	r2, [r7, #8]
 80045c2:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80045ca:	4b19      	ldr	r3, [pc, #100]	; (8004630 <prvSwitchTimerLists+0xc0>)
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	3304      	adds	r3, #4
 80045d2:	4619      	mov	r1, r3
 80045d4:	4610      	mov	r0, r2
 80045d6:	f7fd fe8a 	bl	80022ee <vListInsert>
 80045da:	e016      	b.n	800460a <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80045dc:	2300      	movs	r3, #0
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	2300      	movs	r3, #0
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	2100      	movs	r1, #0
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f7ff fd7c 	bl	80040e4 <xTimerGenericCommand>
 80045ec:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10a      	bne.n	800460a <prvSwitchTimerLists+0x9a>
        __asm volatile
 80045f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f8:	f383 8811 	msr	BASEPRI, r3
 80045fc:	f3bf 8f6f 	isb	sy
 8004600:	f3bf 8f4f 	dsb	sy
 8004604:	603b      	str	r3, [r7, #0]
    }
 8004606:	bf00      	nop
 8004608:	e7fe      	b.n	8004608 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800460a:	4b09      	ldr	r3, [pc, #36]	; (8004630 <prvSwitchTimerLists+0xc0>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1b1      	bne.n	8004578 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004614:	4b06      	ldr	r3, [pc, #24]	; (8004630 <prvSwitchTimerLists+0xc0>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800461a:	4b06      	ldr	r3, [pc, #24]	; (8004634 <prvSwitchTimerLists+0xc4>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a04      	ldr	r2, [pc, #16]	; (8004630 <prvSwitchTimerLists+0xc0>)
 8004620:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004622:	4a04      	ldr	r2, [pc, #16]	; (8004634 <prvSwitchTimerLists+0xc4>)
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	6013      	str	r3, [r2, #0]
    }
 8004628:	bf00      	nop
 800462a:	3718      	adds	r7, #24
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	20000168 	.word	0x20000168
 8004634:	2000016c 	.word	0x2000016c

08004638 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004638:	b580      	push	{r7, lr}
 800463a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800463c:	f000 f9e2 	bl	8004a04 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004640:	4b12      	ldr	r3, [pc, #72]	; (800468c <prvCheckForValidListAndQueue+0x54>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d11d      	bne.n	8004684 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004648:	4811      	ldr	r0, [pc, #68]	; (8004690 <prvCheckForValidListAndQueue+0x58>)
 800464a:	f7fd fdff 	bl	800224c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800464e:	4811      	ldr	r0, [pc, #68]	; (8004694 <prvCheckForValidListAndQueue+0x5c>)
 8004650:	f7fd fdfc 	bl	800224c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004654:	4b10      	ldr	r3, [pc, #64]	; (8004698 <prvCheckForValidListAndQueue+0x60>)
 8004656:	4a0e      	ldr	r2, [pc, #56]	; (8004690 <prvCheckForValidListAndQueue+0x58>)
 8004658:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800465a:	4b10      	ldr	r3, [pc, #64]	; (800469c <prvCheckForValidListAndQueue+0x64>)
 800465c:	4a0d      	ldr	r2, [pc, #52]	; (8004694 <prvCheckForValidListAndQueue+0x5c>)
 800465e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004660:	2200      	movs	r2, #0
 8004662:	210c      	movs	r1, #12
 8004664:	200a      	movs	r0, #10
 8004666:	f7fd ff0d 	bl	8002484 <xQueueGenericCreate>
 800466a:	4603      	mov	r3, r0
 800466c:	4a07      	ldr	r2, [pc, #28]	; (800468c <prvCheckForValidListAndQueue+0x54>)
 800466e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004670:	4b06      	ldr	r3, [pc, #24]	; (800468c <prvCheckForValidListAndQueue+0x54>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d005      	beq.n	8004684 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004678:	4b04      	ldr	r3, [pc, #16]	; (800468c <prvCheckForValidListAndQueue+0x54>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4908      	ldr	r1, [pc, #32]	; (80046a0 <prvCheckForValidListAndQueue+0x68>)
 800467e:	4618      	mov	r0, r3
 8004680:	f7fe fb8c 	bl	8002d9c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004684:	f000 f9ee 	bl	8004a64 <vPortExitCritical>
    }
 8004688:	bf00      	nop
 800468a:	bd80      	pop	{r7, pc}
 800468c:	20000170 	.word	0x20000170
 8004690:	20000140 	.word	0x20000140
 8004694:	20000154 	.word	0x20000154
 8004698:	20000168 	.word	0x20000168
 800469c:	2000016c 	.word	0x2000016c
 80046a0:	08007d08 	.word	0x08007d08

080046a4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	3b04      	subs	r3, #4
 80046b4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80046bc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	3b04      	subs	r3, #4
 80046c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	f023 0201 	bic.w	r2, r3, #1
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	3b04      	subs	r3, #4
 80046d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80046d4:	4a0c      	ldr	r2, [pc, #48]	; (8004708 <pxPortInitialiseStack+0x64>)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	3b14      	subs	r3, #20
 80046de:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	3b04      	subs	r3, #4
 80046ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f06f 0202 	mvn.w	r2, #2
 80046f2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	3b20      	subs	r3, #32
 80046f8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80046fa:	68fb      	ldr	r3, [r7, #12]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3714      	adds	r7, #20
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	0800470d 	.word	0x0800470d

0800470c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004712:	2300      	movs	r3, #0
 8004714:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004716:	4b12      	ldr	r3, [pc, #72]	; (8004760 <prvTaskExitError+0x54>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471e:	d00a      	beq.n	8004736 <prvTaskExitError+0x2a>
        __asm volatile
 8004720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004724:	f383 8811 	msr	BASEPRI, r3
 8004728:	f3bf 8f6f 	isb	sy
 800472c:	f3bf 8f4f 	dsb	sy
 8004730:	60fb      	str	r3, [r7, #12]
    }
 8004732:	bf00      	nop
 8004734:	e7fe      	b.n	8004734 <prvTaskExitError+0x28>
        __asm volatile
 8004736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473a:	f383 8811 	msr	BASEPRI, r3
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f3bf 8f4f 	dsb	sy
 8004746:	60bb      	str	r3, [r7, #8]
    }
 8004748:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800474a:	bf00      	nop
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d0fc      	beq.n	800474c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004752:	bf00      	nop
 8004754:	bf00      	nop
 8004756:	3714      	adds	r7, #20
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr
 8004760:	20000010 	.word	0x20000010
	...

08004770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004770:	4b07      	ldr	r3, [pc, #28]	; (8004790 <pxCurrentTCBConst2>)
 8004772:	6819      	ldr	r1, [r3, #0]
 8004774:	6808      	ldr	r0, [r1, #0]
 8004776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800477a:	f380 8809 	msr	PSP, r0
 800477e:	f3bf 8f6f 	isb	sy
 8004782:	f04f 0000 	mov.w	r0, #0
 8004786:	f380 8811 	msr	BASEPRI, r0
 800478a:	4770      	bx	lr
 800478c:	f3af 8000 	nop.w

08004790 <pxCurrentTCBConst2>:
 8004790:	2000003c 	.word	0x2000003c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004794:	bf00      	nop
 8004796:	bf00      	nop

08004798 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004798:	4808      	ldr	r0, [pc, #32]	; (80047bc <prvPortStartFirstTask+0x24>)
 800479a:	6800      	ldr	r0, [r0, #0]
 800479c:	6800      	ldr	r0, [r0, #0]
 800479e:	f380 8808 	msr	MSP, r0
 80047a2:	f04f 0000 	mov.w	r0, #0
 80047a6:	f380 8814 	msr	CONTROL, r0
 80047aa:	b662      	cpsie	i
 80047ac:	b661      	cpsie	f
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	df00      	svc	0
 80047b8:	bf00      	nop
 80047ba:	0000      	.short	0x0000
 80047bc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80047c0:	bf00      	nop
 80047c2:	bf00      	nop

080047c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80047ca:	4b46      	ldr	r3, [pc, #280]	; (80048e4 <xPortStartScheduler+0x120>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a46      	ldr	r2, [pc, #280]	; (80048e8 <xPortStartScheduler+0x124>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d10a      	bne.n	80047ea <xPortStartScheduler+0x26>
        __asm volatile
 80047d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d8:	f383 8811 	msr	BASEPRI, r3
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	613b      	str	r3, [r7, #16]
    }
 80047e6:	bf00      	nop
 80047e8:	e7fe      	b.n	80047e8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80047ea:	4b3e      	ldr	r3, [pc, #248]	; (80048e4 <xPortStartScheduler+0x120>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a3f      	ldr	r2, [pc, #252]	; (80048ec <xPortStartScheduler+0x128>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d10a      	bne.n	800480a <xPortStartScheduler+0x46>
        __asm volatile
 80047f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f8:	f383 8811 	msr	BASEPRI, r3
 80047fc:	f3bf 8f6f 	isb	sy
 8004800:	f3bf 8f4f 	dsb	sy
 8004804:	60fb      	str	r3, [r7, #12]
    }
 8004806:	bf00      	nop
 8004808:	e7fe      	b.n	8004808 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800480a:	4b39      	ldr	r3, [pc, #228]	; (80048f0 <xPortStartScheduler+0x12c>)
 800480c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	b2db      	uxtb	r3, r3
 8004814:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	22ff      	movs	r2, #255	; 0xff
 800481a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	b2db      	uxtb	r3, r3
 8004822:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004824:	78fb      	ldrb	r3, [r7, #3]
 8004826:	b2db      	uxtb	r3, r3
 8004828:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800482c:	b2da      	uxtb	r2, r3
 800482e:	4b31      	ldr	r3, [pc, #196]	; (80048f4 <xPortStartScheduler+0x130>)
 8004830:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004832:	4b31      	ldr	r3, [pc, #196]	; (80048f8 <xPortStartScheduler+0x134>)
 8004834:	2207      	movs	r2, #7
 8004836:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004838:	e009      	b.n	800484e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800483a:	4b2f      	ldr	r3, [pc, #188]	; (80048f8 <xPortStartScheduler+0x134>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3b01      	subs	r3, #1
 8004840:	4a2d      	ldr	r2, [pc, #180]	; (80048f8 <xPortStartScheduler+0x134>)
 8004842:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004844:	78fb      	ldrb	r3, [r7, #3]
 8004846:	b2db      	uxtb	r3, r3
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	b2db      	uxtb	r3, r3
 800484c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800484e:	78fb      	ldrb	r3, [r7, #3]
 8004850:	b2db      	uxtb	r3, r3
 8004852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004856:	2b80      	cmp	r3, #128	; 0x80
 8004858:	d0ef      	beq.n	800483a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800485a:	4b27      	ldr	r3, [pc, #156]	; (80048f8 <xPortStartScheduler+0x134>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f1c3 0307 	rsb	r3, r3, #7
 8004862:	2b04      	cmp	r3, #4
 8004864:	d00a      	beq.n	800487c <xPortStartScheduler+0xb8>
        __asm volatile
 8004866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486a:	f383 8811 	msr	BASEPRI, r3
 800486e:	f3bf 8f6f 	isb	sy
 8004872:	f3bf 8f4f 	dsb	sy
 8004876:	60bb      	str	r3, [r7, #8]
    }
 8004878:	bf00      	nop
 800487a:	e7fe      	b.n	800487a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800487c:	4b1e      	ldr	r3, [pc, #120]	; (80048f8 <xPortStartScheduler+0x134>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	021b      	lsls	r3, r3, #8
 8004882:	4a1d      	ldr	r2, [pc, #116]	; (80048f8 <xPortStartScheduler+0x134>)
 8004884:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004886:	4b1c      	ldr	r3, [pc, #112]	; (80048f8 <xPortStartScheduler+0x134>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800488e:	4a1a      	ldr	r2, [pc, #104]	; (80048f8 <xPortStartScheduler+0x134>)
 8004890:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	b2da      	uxtb	r2, r3
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800489a:	4b18      	ldr	r3, [pc, #96]	; (80048fc <xPortStartScheduler+0x138>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a17      	ldr	r2, [pc, #92]	; (80048fc <xPortStartScheduler+0x138>)
 80048a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048a4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80048a6:	4b15      	ldr	r3, [pc, #84]	; (80048fc <xPortStartScheduler+0x138>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a14      	ldr	r2, [pc, #80]	; (80048fc <xPortStartScheduler+0x138>)
 80048ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80048b0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80048b2:	f000 f963 	bl	8004b7c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80048b6:	4b12      	ldr	r3, [pc, #72]	; (8004900 <xPortStartScheduler+0x13c>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80048bc:	f000 f982 	bl	8004bc4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80048c0:	4b10      	ldr	r3, [pc, #64]	; (8004904 <xPortStartScheduler+0x140>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a0f      	ldr	r2, [pc, #60]	; (8004904 <xPortStartScheduler+0x140>)
 80048c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80048ca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80048cc:	f7ff ff64 	bl	8004798 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80048d0:	f7fe fec6 	bl	8003660 <vTaskSwitchContext>
    prvTaskExitError();
 80048d4:	f7ff ff1a 	bl	800470c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3718      	adds	r7, #24
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	e000ed00 	.word	0xe000ed00
 80048e8:	410fc271 	.word	0x410fc271
 80048ec:	410fc270 	.word	0x410fc270
 80048f0:	e000e400 	.word	0xe000e400
 80048f4:	2000017c 	.word	0x2000017c
 80048f8:	20000180 	.word	0x20000180
 80048fc:	e000ed20 	.word	0xe000ed20
 8004900:	20000010 	.word	0x20000010
 8004904:	e000ef34 	.word	0xe000ef34

08004908 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004908:	b480      	push	{r7}
 800490a:	b087      	sub	sp, #28
 800490c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800490e:	4b37      	ldr	r3, [pc, #220]	; (80049ec <vInitPrioGroupValue+0xe4>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a37      	ldr	r2, [pc, #220]	; (80049f0 <vInitPrioGroupValue+0xe8>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d10a      	bne.n	800492e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	613b      	str	r3, [r7, #16]
    }
 800492a:	bf00      	nop
 800492c:	e7fe      	b.n	800492c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800492e:	4b2f      	ldr	r3, [pc, #188]	; (80049ec <vInitPrioGroupValue+0xe4>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a30      	ldr	r2, [pc, #192]	; (80049f4 <vInitPrioGroupValue+0xec>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d10a      	bne.n	800494e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493c:	f383 8811 	msr	BASEPRI, r3
 8004940:	f3bf 8f6f 	isb	sy
 8004944:	f3bf 8f4f 	dsb	sy
 8004948:	60fb      	str	r3, [r7, #12]
    }
 800494a:	bf00      	nop
 800494c:	e7fe      	b.n	800494c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800494e:	4b2a      	ldr	r3, [pc, #168]	; (80049f8 <vInitPrioGroupValue+0xf0>)
 8004950:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	b2db      	uxtb	r3, r3
 8004958:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	22ff      	movs	r2, #255	; 0xff
 800495e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	b2db      	uxtb	r3, r3
 8004966:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004968:	78fb      	ldrb	r3, [r7, #3]
 800496a:	b2db      	uxtb	r3, r3
 800496c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004970:	b2da      	uxtb	r2, r3
 8004972:	4b22      	ldr	r3, [pc, #136]	; (80049fc <vInitPrioGroupValue+0xf4>)
 8004974:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004976:	4b22      	ldr	r3, [pc, #136]	; (8004a00 <vInitPrioGroupValue+0xf8>)
 8004978:	2207      	movs	r2, #7
 800497a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800497c:	e009      	b.n	8004992 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800497e:	4b20      	ldr	r3, [pc, #128]	; (8004a00 <vInitPrioGroupValue+0xf8>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	3b01      	subs	r3, #1
 8004984:	4a1e      	ldr	r2, [pc, #120]	; (8004a00 <vInitPrioGroupValue+0xf8>)
 8004986:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004988:	78fb      	ldrb	r3, [r7, #3]
 800498a:	b2db      	uxtb	r3, r3
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	b2db      	uxtb	r3, r3
 8004990:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004992:	78fb      	ldrb	r3, [r7, #3]
 8004994:	b2db      	uxtb	r3, r3
 8004996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499a:	2b80      	cmp	r3, #128	; 0x80
 800499c:	d0ef      	beq.n	800497e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800499e:	4b18      	ldr	r3, [pc, #96]	; (8004a00 <vInitPrioGroupValue+0xf8>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f1c3 0307 	rsb	r3, r3, #7
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d00a      	beq.n	80049c0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80049aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ae:	f383 8811 	msr	BASEPRI, r3
 80049b2:	f3bf 8f6f 	isb	sy
 80049b6:	f3bf 8f4f 	dsb	sy
 80049ba:	60bb      	str	r3, [r7, #8]
    }
 80049bc:	bf00      	nop
 80049be:	e7fe      	b.n	80049be <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80049c0:	4b0f      	ldr	r3, [pc, #60]	; (8004a00 <vInitPrioGroupValue+0xf8>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	021b      	lsls	r3, r3, #8
 80049c6:	4a0e      	ldr	r2, [pc, #56]	; (8004a00 <vInitPrioGroupValue+0xf8>)
 80049c8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80049ca:	4b0d      	ldr	r3, [pc, #52]	; (8004a00 <vInitPrioGroupValue+0xf8>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80049d2:	4a0b      	ldr	r2, [pc, #44]	; (8004a00 <vInitPrioGroupValue+0xf8>)
 80049d4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	b2da      	uxtb	r2, r3
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80049de:	bf00      	nop
 80049e0:	371c      	adds	r7, #28
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	e000ed00 	.word	0xe000ed00
 80049f0:	410fc271 	.word	0x410fc271
 80049f4:	410fc270 	.word	0x410fc270
 80049f8:	e000e400 	.word	0xe000e400
 80049fc:	2000017c 	.word	0x2000017c
 8004a00:	20000180 	.word	0x20000180

08004a04 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
        __asm volatile
 8004a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0e:	f383 8811 	msr	BASEPRI, r3
 8004a12:	f3bf 8f6f 	isb	sy
 8004a16:	f3bf 8f4f 	dsb	sy
 8004a1a:	607b      	str	r3, [r7, #4]
    }
 8004a1c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004a1e:	4b0f      	ldr	r3, [pc, #60]	; (8004a5c <vPortEnterCritical+0x58>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	3301      	adds	r3, #1
 8004a24:	4a0d      	ldr	r2, [pc, #52]	; (8004a5c <vPortEnterCritical+0x58>)
 8004a26:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004a28:	4b0c      	ldr	r3, [pc, #48]	; (8004a5c <vPortEnterCritical+0x58>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d10f      	bne.n	8004a50 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a30:	4b0b      	ldr	r3, [pc, #44]	; (8004a60 <vPortEnterCritical+0x5c>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00a      	beq.n	8004a50 <vPortEnterCritical+0x4c>
        __asm volatile
 8004a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3e:	f383 8811 	msr	BASEPRI, r3
 8004a42:	f3bf 8f6f 	isb	sy
 8004a46:	f3bf 8f4f 	dsb	sy
 8004a4a:	603b      	str	r3, [r7, #0]
    }
 8004a4c:	bf00      	nop
 8004a4e:	e7fe      	b.n	8004a4e <vPortEnterCritical+0x4a>
    }
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	20000010 	.word	0x20000010
 8004a60:	e000ed04 	.word	0xe000ed04

08004a64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004a6a:	4b12      	ldr	r3, [pc, #72]	; (8004ab4 <vPortExitCritical+0x50>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10a      	bne.n	8004a88 <vPortExitCritical+0x24>
        __asm volatile
 8004a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a76:	f383 8811 	msr	BASEPRI, r3
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	f3bf 8f4f 	dsb	sy
 8004a82:	607b      	str	r3, [r7, #4]
    }
 8004a84:	bf00      	nop
 8004a86:	e7fe      	b.n	8004a86 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004a88:	4b0a      	ldr	r3, [pc, #40]	; (8004ab4 <vPortExitCritical+0x50>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	4a09      	ldr	r2, [pc, #36]	; (8004ab4 <vPortExitCritical+0x50>)
 8004a90:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004a92:	4b08      	ldr	r3, [pc, #32]	; (8004ab4 <vPortExitCritical+0x50>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d105      	bne.n	8004aa6 <vPortExitCritical+0x42>
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	f383 8811 	msr	BASEPRI, r3
    }
 8004aa4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	20000010 	.word	0x20000010
	...

08004ac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004ac0:	f3ef 8009 	mrs	r0, PSP
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	4b15      	ldr	r3, [pc, #84]	; (8004b20 <pxCurrentTCBConst>)
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	f01e 0f10 	tst.w	lr, #16
 8004ad0:	bf08      	it	eq
 8004ad2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ad6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ada:	6010      	str	r0, [r2, #0]
 8004adc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ae0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004ae4:	f380 8811 	msr	BASEPRI, r0
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f7fe fdb6 	bl	8003660 <vTaskSwitchContext>
 8004af4:	f04f 0000 	mov.w	r0, #0
 8004af8:	f380 8811 	msr	BASEPRI, r0
 8004afc:	bc09      	pop	{r0, r3}
 8004afe:	6819      	ldr	r1, [r3, #0]
 8004b00:	6808      	ldr	r0, [r1, #0]
 8004b02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b06:	f01e 0f10 	tst.w	lr, #16
 8004b0a:	bf08      	it	eq
 8004b0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004b10:	f380 8809 	msr	PSP, r0
 8004b14:	f3bf 8f6f 	isb	sy
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	f3af 8000 	nop.w

08004b20 <pxCurrentTCBConst>:
 8004b20:	2000003c 	.word	0x2000003c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004b24:	bf00      	nop
 8004b26:	bf00      	nop

08004b28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
        __asm volatile
 8004b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b32:	f383 8811 	msr	BASEPRI, r3
 8004b36:	f3bf 8f6f 	isb	sy
 8004b3a:	f3bf 8f4f 	dsb	sy
 8004b3e:	607b      	str	r3, [r7, #4]
    }
 8004b40:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004b42:	f002 fcc3 	bl	80074cc <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004b46:	f7fe fccf 	bl	80034e8 <xTaskIncrementTick>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d006      	beq.n	8004b5e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004b50:	f002 fd1a 	bl	8007588 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b54:	4b08      	ldr	r3, [pc, #32]	; (8004b78 <SysTick_Handler+0x50>)
 8004b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	e001      	b.n	8004b62 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8004b5e:	f002 fcf7 	bl	8007550 <SEGGER_SYSVIEW_RecordExitISR>
 8004b62:	2300      	movs	r3, #0
 8004b64:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	f383 8811 	msr	BASEPRI, r3
    }
 8004b6c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8004b6e:	bf00      	nop
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	e000ed04 	.word	0xe000ed04

08004b7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b80:	4b0b      	ldr	r3, [pc, #44]	; (8004bb0 <vPortSetupTimerInterrupt+0x34>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b86:	4b0b      	ldr	r3, [pc, #44]	; (8004bb4 <vPortSetupTimerInterrupt+0x38>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b8c:	4b0a      	ldr	r3, [pc, #40]	; (8004bb8 <vPortSetupTimerInterrupt+0x3c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a0a      	ldr	r2, [pc, #40]	; (8004bbc <vPortSetupTimerInterrupt+0x40>)
 8004b92:	fba2 2303 	umull	r2, r3, r2, r3
 8004b96:	099b      	lsrs	r3, r3, #6
 8004b98:	4a09      	ldr	r2, [pc, #36]	; (8004bc0 <vPortSetupTimerInterrupt+0x44>)
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b9e:	4b04      	ldr	r3, [pc, #16]	; (8004bb0 <vPortSetupTimerInterrupt+0x34>)
 8004ba0:	2207      	movs	r2, #7
 8004ba2:	601a      	str	r2, [r3, #0]
}
 8004ba4:	bf00      	nop
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	e000e010 	.word	0xe000e010
 8004bb4:	e000e018 	.word	0xe000e018
 8004bb8:	20000000 	.word	0x20000000
 8004bbc:	10624dd3 	.word	0x10624dd3
 8004bc0:	e000e014 	.word	0xe000e014

08004bc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004bc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004bd4 <vPortEnableVFP+0x10>
 8004bc8:	6801      	ldr	r1, [r0, #0]
 8004bca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004bce:	6001      	str	r1, [r0, #0]
 8004bd0:	4770      	bx	lr
 8004bd2:	0000      	.short	0x0000
 8004bd4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004bd8:	bf00      	nop
 8004bda:	bf00      	nop

08004bdc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004be2:	f3ef 8305 	mrs	r3, IPSR
 8004be6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2b0f      	cmp	r3, #15
 8004bec:	d914      	bls.n	8004c18 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004bee:	4a17      	ldr	r2, [pc, #92]	; (8004c4c <vPortValidateInterruptPriority+0x70>)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004bf8:	4b15      	ldr	r3, [pc, #84]	; (8004c50 <vPortValidateInterruptPriority+0x74>)
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	7afa      	ldrb	r2, [r7, #11]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d20a      	bcs.n	8004c18 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c06:	f383 8811 	msr	BASEPRI, r3
 8004c0a:	f3bf 8f6f 	isb	sy
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	607b      	str	r3, [r7, #4]
    }
 8004c14:	bf00      	nop
 8004c16:	e7fe      	b.n	8004c16 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004c18:	4b0e      	ldr	r3, [pc, #56]	; (8004c54 <vPortValidateInterruptPriority+0x78>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c20:	4b0d      	ldr	r3, [pc, #52]	; (8004c58 <vPortValidateInterruptPriority+0x7c>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d90a      	bls.n	8004c3e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2c:	f383 8811 	msr	BASEPRI, r3
 8004c30:	f3bf 8f6f 	isb	sy
 8004c34:	f3bf 8f4f 	dsb	sy
 8004c38:	603b      	str	r3, [r7, #0]
    }
 8004c3a:	bf00      	nop
 8004c3c:	e7fe      	b.n	8004c3c <vPortValidateInterruptPriority+0x60>
    }
 8004c3e:	bf00      	nop
 8004c40:	3714      	adds	r7, #20
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	e000e3f0 	.word	0xe000e3f0
 8004c50:	2000017c 	.word	0x2000017c
 8004c54:	e000ed0c 	.word	0xe000ed0c
 8004c58:	20000180 	.word	0x20000180

08004c5c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b08a      	sub	sp, #40	; 0x28
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004c64:	2300      	movs	r3, #0
 8004c66:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004c68:	f7fe fb6e 	bl	8003348 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004c6c:	4b65      	ldr	r3, [pc, #404]	; (8004e04 <pvPortMalloc+0x1a8>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d101      	bne.n	8004c78 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004c74:	f000 f934 	bl	8004ee0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004c78:	4b63      	ldr	r3, [pc, #396]	; (8004e08 <pvPortMalloc+0x1ac>)
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4013      	ands	r3, r2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f040 80a7 	bne.w	8004dd4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d02d      	beq.n	8004ce8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004c8c:	2208      	movs	r2, #8
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d227      	bcs.n	8004ce8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004c98:	2208      	movs	r2, #8
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f003 0307 	and.w	r3, r3, #7
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d021      	beq.n	8004cee <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f023 0307 	bic.w	r3, r3, #7
 8004cb0:	3308      	adds	r3, #8
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d214      	bcs.n	8004ce2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f023 0307 	bic.w	r3, r3, #7
 8004cbe:	3308      	adds	r3, #8
 8004cc0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d010      	beq.n	8004cee <pvPortMalloc+0x92>
        __asm volatile
 8004ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd0:	f383 8811 	msr	BASEPRI, r3
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	f3bf 8f4f 	dsb	sy
 8004cdc:	617b      	str	r3, [r7, #20]
    }
 8004cde:	bf00      	nop
 8004ce0:	e7fe      	b.n	8004ce0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ce6:	e002      	b.n	8004cee <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	607b      	str	r3, [r7, #4]
 8004cec:	e000      	b.n	8004cf0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004cee:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d06e      	beq.n	8004dd4 <pvPortMalloc+0x178>
 8004cf6:	4b45      	ldr	r3, [pc, #276]	; (8004e0c <pvPortMalloc+0x1b0>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d869      	bhi.n	8004dd4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004d00:	4b43      	ldr	r3, [pc, #268]	; (8004e10 <pvPortMalloc+0x1b4>)
 8004d02:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004d04:	4b42      	ldr	r3, [pc, #264]	; (8004e10 <pvPortMalloc+0x1b4>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d0a:	e004      	b.n	8004d16 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d903      	bls.n	8004d28 <pvPortMalloc+0xcc>
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1f1      	bne.n	8004d0c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004d28:	4b36      	ldr	r3, [pc, #216]	; (8004e04 <pvPortMalloc+0x1a8>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d050      	beq.n	8004dd4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d32:	6a3b      	ldr	r3, [r7, #32]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2208      	movs	r2, #8
 8004d38:	4413      	add	r3, r2
 8004d3a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	6a3b      	ldr	r3, [r7, #32]
 8004d42:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	1ad2      	subs	r2, r2, r3
 8004d4c:	2308      	movs	r3, #8
 8004d4e:	005b      	lsls	r3, r3, #1
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d91f      	bls.n	8004d94 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4413      	add	r3, r2
 8004d5a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	f003 0307 	and.w	r3, r3, #7
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00a      	beq.n	8004d7c <pvPortMalloc+0x120>
        __asm volatile
 8004d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6a:	f383 8811 	msr	BASEPRI, r3
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	f3bf 8f4f 	dsb	sy
 8004d76:	613b      	str	r3, [r7, #16]
    }
 8004d78:	bf00      	nop
 8004d7a:	e7fe      	b.n	8004d7a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	1ad2      	subs	r2, r2, r3
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d8e:	69b8      	ldr	r0, [r7, #24]
 8004d90:	f000 f908 	bl	8004fa4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d94:	4b1d      	ldr	r3, [pc, #116]	; (8004e0c <pvPortMalloc+0x1b0>)
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	4a1b      	ldr	r2, [pc, #108]	; (8004e0c <pvPortMalloc+0x1b0>)
 8004da0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004da2:	4b1a      	ldr	r3, [pc, #104]	; (8004e0c <pvPortMalloc+0x1b0>)
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	4b1b      	ldr	r3, [pc, #108]	; (8004e14 <pvPortMalloc+0x1b8>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d203      	bcs.n	8004db6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004dae:	4b17      	ldr	r3, [pc, #92]	; (8004e0c <pvPortMalloc+0x1b0>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a18      	ldr	r2, [pc, #96]	; (8004e14 <pvPortMalloc+0x1b8>)
 8004db4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	685a      	ldr	r2, [r3, #4]
 8004dba:	4b13      	ldr	r3, [pc, #76]	; (8004e08 <pvPortMalloc+0x1ac>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004dca:	4b13      	ldr	r3, [pc, #76]	; (8004e18 <pvPortMalloc+0x1bc>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	4a11      	ldr	r2, [pc, #68]	; (8004e18 <pvPortMalloc+0x1bc>)
 8004dd2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004dd4:	f7fe fac6 	bl	8003364 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	f003 0307 	and.w	r3, r3, #7
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00a      	beq.n	8004df8 <pvPortMalloc+0x19c>
        __asm volatile
 8004de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de6:	f383 8811 	msr	BASEPRI, r3
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	60fb      	str	r3, [r7, #12]
    }
 8004df4:	bf00      	nop
 8004df6:	e7fe      	b.n	8004df6 <pvPortMalloc+0x19a>
    return pvReturn;
 8004df8:	69fb      	ldr	r3, [r7, #28]
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3728      	adds	r7, #40	; 0x28
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	20012d8c 	.word	0x20012d8c
 8004e08:	20012da0 	.word	0x20012da0
 8004e0c:	20012d90 	.word	0x20012d90
 8004e10:	20012d84 	.word	0x20012d84
 8004e14:	20012d94 	.word	0x20012d94
 8004e18:	20012d98 	.word	0x20012d98

08004e1c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d04d      	beq.n	8004eca <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004e2e:	2308      	movs	r3, #8
 8004e30:	425b      	negs	r3, r3
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	4413      	add	r3, r2
 8004e36:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	685a      	ldr	r2, [r3, #4]
 8004e40:	4b24      	ldr	r3, [pc, #144]	; (8004ed4 <vPortFree+0xb8>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4013      	ands	r3, r2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10a      	bne.n	8004e60 <vPortFree+0x44>
        __asm volatile
 8004e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	60fb      	str	r3, [r7, #12]
    }
 8004e5c:	bf00      	nop
 8004e5e:	e7fe      	b.n	8004e5e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00a      	beq.n	8004e7e <vPortFree+0x62>
        __asm volatile
 8004e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6c:	f383 8811 	msr	BASEPRI, r3
 8004e70:	f3bf 8f6f 	isb	sy
 8004e74:	f3bf 8f4f 	dsb	sy
 8004e78:	60bb      	str	r3, [r7, #8]
    }
 8004e7a:	bf00      	nop
 8004e7c:	e7fe      	b.n	8004e7c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	4b14      	ldr	r3, [pc, #80]	; (8004ed4 <vPortFree+0xb8>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4013      	ands	r3, r2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d01e      	beq.n	8004eca <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d11a      	bne.n	8004eca <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	4b0e      	ldr	r3, [pc, #56]	; (8004ed4 <vPortFree+0xb8>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	43db      	mvns	r3, r3
 8004e9e:	401a      	ands	r2, r3
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004ea4:	f7fe fa50 	bl	8003348 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	4b0a      	ldr	r3, [pc, #40]	; (8004ed8 <vPortFree+0xbc>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	4a09      	ldr	r2, [pc, #36]	; (8004ed8 <vPortFree+0xbc>)
 8004eb4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004eb6:	6938      	ldr	r0, [r7, #16]
 8004eb8:	f000 f874 	bl	8004fa4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004ebc:	4b07      	ldr	r3, [pc, #28]	; (8004edc <vPortFree+0xc0>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	4a06      	ldr	r2, [pc, #24]	; (8004edc <vPortFree+0xc0>)
 8004ec4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004ec6:	f7fe fa4d 	bl	8003364 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004eca:	bf00      	nop
 8004ecc:	3718      	adds	r7, #24
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	20012da0 	.word	0x20012da0
 8004ed8:	20012d90 	.word	0x20012d90
 8004edc:	20012d9c 	.word	0x20012d9c

08004ee0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004ee6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004eea:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004eec:	4b27      	ldr	r3, [pc, #156]	; (8004f8c <prvHeapInit+0xac>)
 8004eee:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f003 0307 	and.w	r3, r3, #7
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00c      	beq.n	8004f14 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	3307      	adds	r3, #7
 8004efe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 0307 	bic.w	r3, r3, #7
 8004f06:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	4a1f      	ldr	r2, [pc, #124]	; (8004f8c <prvHeapInit+0xac>)
 8004f10:	4413      	add	r3, r2
 8004f12:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f18:	4a1d      	ldr	r2, [pc, #116]	; (8004f90 <prvHeapInit+0xb0>)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004f1e:	4b1c      	ldr	r3, [pc, #112]	; (8004f90 <prvHeapInit+0xb0>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	4413      	add	r3, r2
 8004f2a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004f2c:	2208      	movs	r2, #8
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	1a9b      	subs	r3, r3, r2
 8004f32:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f023 0307 	bic.w	r3, r3, #7
 8004f3a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4a15      	ldr	r2, [pc, #84]	; (8004f94 <prvHeapInit+0xb4>)
 8004f40:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004f42:	4b14      	ldr	r3, [pc, #80]	; (8004f94 <prvHeapInit+0xb4>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2200      	movs	r2, #0
 8004f48:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004f4a:	4b12      	ldr	r3, [pc, #72]	; (8004f94 <prvHeapInit+0xb4>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	1ad2      	subs	r2, r2, r3
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f60:	4b0c      	ldr	r3, [pc, #48]	; (8004f94 <prvHeapInit+0xb4>)
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	4a0a      	ldr	r2, [pc, #40]	; (8004f98 <prvHeapInit+0xb8>)
 8004f6e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	4a09      	ldr	r2, [pc, #36]	; (8004f9c <prvHeapInit+0xbc>)
 8004f76:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004f78:	4b09      	ldr	r3, [pc, #36]	; (8004fa0 <prvHeapInit+0xc0>)
 8004f7a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004f7e:	601a      	str	r2, [r3, #0]
}
 8004f80:	bf00      	nop
 8004f82:	3714      	adds	r7, #20
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	20000184 	.word	0x20000184
 8004f90:	20012d84 	.word	0x20012d84
 8004f94:	20012d8c 	.word	0x20012d8c
 8004f98:	20012d94 	.word	0x20012d94
 8004f9c:	20012d90 	.word	0x20012d90
 8004fa0:	20012da0 	.word	0x20012da0

08004fa4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004fac:	4b28      	ldr	r3, [pc, #160]	; (8005050 <prvInsertBlockIntoFreeList+0xac>)
 8004fae:	60fb      	str	r3, [r7, #12]
 8004fb0:	e002      	b.n	8004fb8 <prvInsertBlockIntoFreeList+0x14>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d8f7      	bhi.n	8004fb2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	4413      	add	r3, r2
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d108      	bne.n	8004fe6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	441a      	add	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	441a      	add	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d118      	bne.n	800502c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	4b15      	ldr	r3, [pc, #84]	; (8005054 <prvInsertBlockIntoFreeList+0xb0>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	429a      	cmp	r2, r3
 8005004:	d00d      	beq.n	8005022 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	441a      	add	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	601a      	str	r2, [r3, #0]
 8005020:	e008      	b.n	8005034 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005022:	4b0c      	ldr	r3, [pc, #48]	; (8005054 <prvInsertBlockIntoFreeList+0xb0>)
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	e003      	b.n	8005034 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	429a      	cmp	r2, r3
 800503a:	d002      	beq.n	8005042 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005042:	bf00      	nop
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	20012d84 	.word	0x20012d84
 8005054:	20012d8c 	.word	0x20012d8c

08005058 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8005058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800505a:	b085      	sub	sp, #20
 800505c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800505e:	2300      	movs	r3, #0
 8005060:	607b      	str	r3, [r7, #4]
 8005062:	e033      	b.n	80050cc <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005064:	491e      	ldr	r1, [pc, #120]	; (80050e0 <_cbSendTaskList+0x88>)
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	4613      	mov	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	440b      	add	r3, r1
 8005072:	6818      	ldr	r0, [r3, #0]
 8005074:	491a      	ldr	r1, [pc, #104]	; (80050e0 <_cbSendTaskList+0x88>)
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	4613      	mov	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	440b      	add	r3, r1
 8005082:	3304      	adds	r3, #4
 8005084:	6819      	ldr	r1, [r3, #0]
 8005086:	4c16      	ldr	r4, [pc, #88]	; (80050e0 <_cbSendTaskList+0x88>)
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	4613      	mov	r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	4413      	add	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4423      	add	r3, r4
 8005094:	3308      	adds	r3, #8
 8005096:	681c      	ldr	r4, [r3, #0]
 8005098:	4d11      	ldr	r5, [pc, #68]	; (80050e0 <_cbSendTaskList+0x88>)
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	4613      	mov	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	442b      	add	r3, r5
 80050a6:	330c      	adds	r3, #12
 80050a8:	681d      	ldr	r5, [r3, #0]
 80050aa:	4e0d      	ldr	r6, [pc, #52]	; (80050e0 <_cbSendTaskList+0x88>)
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	4613      	mov	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4433      	add	r3, r6
 80050b8:	3310      	adds	r3, #16
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	462b      	mov	r3, r5
 80050c0:	4622      	mov	r2, r4
 80050c2:	f000 f971 	bl	80053a8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	3301      	adds	r3, #1
 80050ca:	607b      	str	r3, [r7, #4]
 80050cc:	4b05      	ldr	r3, [pc, #20]	; (80050e4 <_cbSendTaskList+0x8c>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d3c6      	bcc.n	8005064 <_cbSendTaskList+0xc>
  }
}
 80050d6:	bf00      	nop
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050e0:	20012da4 	.word	0x20012da4
 80050e4:	20012e44 	.word	0x20012e44

080050e8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80050e8:	b5b0      	push	{r4, r5, r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80050ee:	f7fe f9e9 	bl	80034c4 <xTaskGetTickCountFromISR>
 80050f2:	4603      	mov	r3, r0
 80050f4:	461a      	mov	r2, r3
 80050f6:	f04f 0300 	mov.w	r3, #0
 80050fa:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80050fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005102:	4602      	mov	r2, r0
 8005104:	460b      	mov	r3, r1
 8005106:	f04f 0400 	mov.w	r4, #0
 800510a:	f04f 0500 	mov.w	r5, #0
 800510e:	015d      	lsls	r5, r3, #5
 8005110:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8005114:	0154      	lsls	r4, r2, #5
 8005116:	4622      	mov	r2, r4
 8005118:	462b      	mov	r3, r5
 800511a:	1a12      	subs	r2, r2, r0
 800511c:	eb63 0301 	sbc.w	r3, r3, r1
 8005120:	f04f 0400 	mov.w	r4, #0
 8005124:	f04f 0500 	mov.w	r5, #0
 8005128:	009d      	lsls	r5, r3, #2
 800512a:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800512e:	0094      	lsls	r4, r2, #2
 8005130:	4622      	mov	r2, r4
 8005132:	462b      	mov	r3, r5
 8005134:	1812      	adds	r2, r2, r0
 8005136:	eb41 0303 	adc.w	r3, r1, r3
 800513a:	f04f 0000 	mov.w	r0, #0
 800513e:	f04f 0100 	mov.w	r1, #0
 8005142:	00d9      	lsls	r1, r3, #3
 8005144:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005148:	00d0      	lsls	r0, r2, #3
 800514a:	4602      	mov	r2, r0
 800514c:	460b      	mov	r3, r1
 800514e:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8005152:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8005156:	4610      	mov	r0, r2
 8005158:	4619      	mov	r1, r3
 800515a:	3708      	adds	r7, #8
 800515c:	46bd      	mov	sp, r7
 800515e:	bdb0      	pop	{r4, r5, r7, pc}

08005160 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af02      	add	r7, sp, #8
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
 800516c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800516e:	2205      	movs	r2, #5
 8005170:	492b      	ldr	r1, [pc, #172]	; (8005220 <SYSVIEW_AddTask+0xc0>)
 8005172:	68b8      	ldr	r0, [r7, #8]
 8005174:	f002 fd38 	bl	8007be8 <memcmp>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d04b      	beq.n	8005216 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800517e:	4b29      	ldr	r3, [pc, #164]	; (8005224 <SYSVIEW_AddTask+0xc4>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b07      	cmp	r3, #7
 8005184:	d903      	bls.n	800518e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8005186:	4828      	ldr	r0, [pc, #160]	; (8005228 <SYSVIEW_AddTask+0xc8>)
 8005188:	f002 fc5c 	bl	8007a44 <SEGGER_SYSVIEW_Warn>
    return;
 800518c:	e044      	b.n	8005218 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800518e:	4b25      	ldr	r3, [pc, #148]	; (8005224 <SYSVIEW_AddTask+0xc4>)
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	4926      	ldr	r1, [pc, #152]	; (800522c <SYSVIEW_AddTask+0xcc>)
 8005194:	4613      	mov	r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4413      	add	r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	440b      	add	r3, r1
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80051a2:	4b20      	ldr	r3, [pc, #128]	; (8005224 <SYSVIEW_AddTask+0xc4>)
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	4921      	ldr	r1, [pc, #132]	; (800522c <SYSVIEW_AddTask+0xcc>)
 80051a8:	4613      	mov	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	4413      	add	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	440b      	add	r3, r1
 80051b2:	3304      	adds	r3, #4
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80051b8:	4b1a      	ldr	r3, [pc, #104]	; (8005224 <SYSVIEW_AddTask+0xc4>)
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	491b      	ldr	r1, [pc, #108]	; (800522c <SYSVIEW_AddTask+0xcc>)
 80051be:	4613      	mov	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4413      	add	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	440b      	add	r3, r1
 80051c8:	3308      	adds	r3, #8
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80051ce:	4b15      	ldr	r3, [pc, #84]	; (8005224 <SYSVIEW_AddTask+0xc4>)
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	4916      	ldr	r1, [pc, #88]	; (800522c <SYSVIEW_AddTask+0xcc>)
 80051d4:	4613      	mov	r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4413      	add	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	440b      	add	r3, r1
 80051de:	330c      	adds	r3, #12
 80051e0:	683a      	ldr	r2, [r7, #0]
 80051e2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80051e4:	4b0f      	ldr	r3, [pc, #60]	; (8005224 <SYSVIEW_AddTask+0xc4>)
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	4910      	ldr	r1, [pc, #64]	; (800522c <SYSVIEW_AddTask+0xcc>)
 80051ea:	4613      	mov	r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4413      	add	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	440b      	add	r3, r1
 80051f4:	3310      	adds	r3, #16
 80051f6:	69ba      	ldr	r2, [r7, #24]
 80051f8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80051fa:	4b0a      	ldr	r3, [pc, #40]	; (8005224 <SYSVIEW_AddTask+0xc4>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	3301      	adds	r3, #1
 8005200:	4a08      	ldr	r2, [pc, #32]	; (8005224 <SYSVIEW_AddTask+0xc4>)
 8005202:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	9300      	str	r3, [sp, #0]
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	68b9      	ldr	r1, [r7, #8]
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	f000 f8ca 	bl	80053a8 <SYSVIEW_SendTaskInfo>
 8005214:	e000      	b.n	8005218 <SYSVIEW_AddTask+0xb8>
    return;
 8005216:	bf00      	nop

}
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	08007d10 	.word	0x08007d10
 8005224:	20012e44 	.word	0x20012e44
 8005228:	08007d18 	.word	0x08007d18
 800522c:	20012da4 	.word	0x20012da4

08005230 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8005238:	4b59      	ldr	r3, [pc, #356]	; (80053a0 <SYSVIEW_DeleteTask+0x170>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 80ab 	beq.w	8005398 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8005242:	2300      	movs	r3, #0
 8005244:	60fb      	str	r3, [r7, #12]
 8005246:	e00d      	b.n	8005264 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8005248:	4956      	ldr	r1, [pc, #344]	; (80053a4 <SYSVIEW_DeleteTask+0x174>)
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	4613      	mov	r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4413      	add	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	440b      	add	r3, r1
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	429a      	cmp	r2, r3
 800525c:	d008      	beq.n	8005270 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	3301      	adds	r3, #1
 8005262:	60fb      	str	r3, [r7, #12]
 8005264:	4b4e      	ldr	r3, [pc, #312]	; (80053a0 <SYSVIEW_DeleteTask+0x170>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	429a      	cmp	r2, r3
 800526c:	d3ec      	bcc.n	8005248 <SYSVIEW_DeleteTask+0x18>
 800526e:	e000      	b.n	8005272 <SYSVIEW_DeleteTask+0x42>
      break;
 8005270:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8005272:	4b4b      	ldr	r3, [pc, #300]	; (80053a0 <SYSVIEW_DeleteTask+0x170>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	3b01      	subs	r3, #1
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	429a      	cmp	r2, r3
 800527c:	d111      	bne.n	80052a2 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	4613      	mov	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4413      	add	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4a46      	ldr	r2, [pc, #280]	; (80053a4 <SYSVIEW_DeleteTask+0x174>)
 800528a:	4413      	add	r3, r2
 800528c:	2214      	movs	r2, #20
 800528e:	2100      	movs	r1, #0
 8005290:	4618      	mov	r0, r3
 8005292:	f002 fcc5 	bl	8007c20 <memset>
    _NumTasks--;
 8005296:	4b42      	ldr	r3, [pc, #264]	; (80053a0 <SYSVIEW_DeleteTask+0x170>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3b01      	subs	r3, #1
 800529c:	4a40      	ldr	r2, [pc, #256]	; (80053a0 <SYSVIEW_DeleteTask+0x170>)
 800529e:	6013      	str	r3, [r2, #0]
 80052a0:	e07b      	b.n	800539a <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 80052a2:	4b3f      	ldr	r3, [pc, #252]	; (80053a0 <SYSVIEW_DeleteTask+0x170>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d276      	bcs.n	800539a <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 80052ac:	4b3c      	ldr	r3, [pc, #240]	; (80053a0 <SYSVIEW_DeleteTask+0x170>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	1e5a      	subs	r2, r3, #1
 80052b2:	493c      	ldr	r1, [pc, #240]	; (80053a4 <SYSVIEW_DeleteTask+0x174>)
 80052b4:	4613      	mov	r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	4413      	add	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	440b      	add	r3, r1
 80052be:	6819      	ldr	r1, [r3, #0]
 80052c0:	4838      	ldr	r0, [pc, #224]	; (80053a4 <SYSVIEW_DeleteTask+0x174>)
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	4613      	mov	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4403      	add	r3, r0
 80052ce:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 80052d0:	4b33      	ldr	r3, [pc, #204]	; (80053a0 <SYSVIEW_DeleteTask+0x170>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	1e5a      	subs	r2, r3, #1
 80052d6:	4933      	ldr	r1, [pc, #204]	; (80053a4 <SYSVIEW_DeleteTask+0x174>)
 80052d8:	4613      	mov	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	440b      	add	r3, r1
 80052e2:	3304      	adds	r3, #4
 80052e4:	6819      	ldr	r1, [r3, #0]
 80052e6:	482f      	ldr	r0, [pc, #188]	; (80053a4 <SYSVIEW_DeleteTask+0x174>)
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	4613      	mov	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4413      	add	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4403      	add	r3, r0
 80052f4:	3304      	adds	r3, #4
 80052f6:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 80052f8:	4b29      	ldr	r3, [pc, #164]	; (80053a0 <SYSVIEW_DeleteTask+0x170>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	1e5a      	subs	r2, r3, #1
 80052fe:	4929      	ldr	r1, [pc, #164]	; (80053a4 <SYSVIEW_DeleteTask+0x174>)
 8005300:	4613      	mov	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	440b      	add	r3, r1
 800530a:	3308      	adds	r3, #8
 800530c:	6819      	ldr	r1, [r3, #0]
 800530e:	4825      	ldr	r0, [pc, #148]	; (80053a4 <SYSVIEW_DeleteTask+0x174>)
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	4613      	mov	r3, r2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	4413      	add	r3, r2
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	4403      	add	r3, r0
 800531c:	3308      	adds	r3, #8
 800531e:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8005320:	4b1f      	ldr	r3, [pc, #124]	; (80053a0 <SYSVIEW_DeleteTask+0x170>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	1e5a      	subs	r2, r3, #1
 8005326:	491f      	ldr	r1, [pc, #124]	; (80053a4 <SYSVIEW_DeleteTask+0x174>)
 8005328:	4613      	mov	r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	4413      	add	r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	440b      	add	r3, r1
 8005332:	330c      	adds	r3, #12
 8005334:	6819      	ldr	r1, [r3, #0]
 8005336:	481b      	ldr	r0, [pc, #108]	; (80053a4 <SYSVIEW_DeleteTask+0x174>)
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	4613      	mov	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4403      	add	r3, r0
 8005344:	330c      	adds	r3, #12
 8005346:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8005348:	4b15      	ldr	r3, [pc, #84]	; (80053a0 <SYSVIEW_DeleteTask+0x170>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	1e5a      	subs	r2, r3, #1
 800534e:	4915      	ldr	r1, [pc, #84]	; (80053a4 <SYSVIEW_DeleteTask+0x174>)
 8005350:	4613      	mov	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4413      	add	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	440b      	add	r3, r1
 800535a:	3310      	adds	r3, #16
 800535c:	6819      	ldr	r1, [r3, #0]
 800535e:	4811      	ldr	r0, [pc, #68]	; (80053a4 <SYSVIEW_DeleteTask+0x174>)
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	4613      	mov	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4413      	add	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4403      	add	r3, r0
 800536c:	3310      	adds	r3, #16
 800536e:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8005370:	4b0b      	ldr	r3, [pc, #44]	; (80053a0 <SYSVIEW_DeleteTask+0x170>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	1e5a      	subs	r2, r3, #1
 8005376:	4613      	mov	r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4413      	add	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4a09      	ldr	r2, [pc, #36]	; (80053a4 <SYSVIEW_DeleteTask+0x174>)
 8005380:	4413      	add	r3, r2
 8005382:	2214      	movs	r2, #20
 8005384:	2100      	movs	r1, #0
 8005386:	4618      	mov	r0, r3
 8005388:	f002 fc4a 	bl	8007c20 <memset>
    _NumTasks--;
 800538c:	4b04      	ldr	r3, [pc, #16]	; (80053a0 <SYSVIEW_DeleteTask+0x170>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	3b01      	subs	r3, #1
 8005392:	4a03      	ldr	r2, [pc, #12]	; (80053a0 <SYSVIEW_DeleteTask+0x170>)
 8005394:	6013      	str	r3, [r2, #0]
 8005396:	e000      	b.n	800539a <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8005398:	bf00      	nop
  }
}
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	20012e44 	.word	0x20012e44
 80053a4:	20012da4 	.word	0x20012da4

080053a8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b08a      	sub	sp, #40	; 0x28
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
 80053b4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80053b6:	f107 0314 	add.w	r3, r7, #20
 80053ba:	2214      	movs	r2, #20
 80053bc:	2100      	movs	r1, #0
 80053be:	4618      	mov	r0, r3
 80053c0:	f002 fc2e 	bl	8007c20 <memset>
  TaskInfo.TaskID     = TaskID;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80053d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80053d8:	f107 0314 	add.w	r3, r7, #20
 80053dc:	4618      	mov	r0, r3
 80053de:	f001 ff27 	bl	8007230 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80053e2:	bf00      	nop
 80053e4:	3728      	adds	r7, #40	; 0x28
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
	...

080053ec <__NVIC_EnableIRQ>:
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	4603      	mov	r3, r0
 80053f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	db0b      	blt.n	8005416 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053fe:	79fb      	ldrb	r3, [r7, #7]
 8005400:	f003 021f 	and.w	r2, r3, #31
 8005404:	4907      	ldr	r1, [pc, #28]	; (8005424 <__NVIC_EnableIRQ+0x38>)
 8005406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800540a:	095b      	lsrs	r3, r3, #5
 800540c:	2001      	movs	r0, #1
 800540e:	fa00 f202 	lsl.w	r2, r0, r2
 8005412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005416:	bf00      	nop
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	e000e100 	.word	0xe000e100

08005428 <__NVIC_SetPriority>:
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	4603      	mov	r3, r0
 8005430:	6039      	str	r1, [r7, #0]
 8005432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005438:	2b00      	cmp	r3, #0
 800543a:	db0a      	blt.n	8005452 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	b2da      	uxtb	r2, r3
 8005440:	490c      	ldr	r1, [pc, #48]	; (8005474 <__NVIC_SetPriority+0x4c>)
 8005442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005446:	0112      	lsls	r2, r2, #4
 8005448:	b2d2      	uxtb	r2, r2
 800544a:	440b      	add	r3, r1
 800544c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005450:	e00a      	b.n	8005468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	b2da      	uxtb	r2, r3
 8005456:	4908      	ldr	r1, [pc, #32]	; (8005478 <__NVIC_SetPriority+0x50>)
 8005458:	79fb      	ldrb	r3, [r7, #7]
 800545a:	f003 030f 	and.w	r3, r3, #15
 800545e:	3b04      	subs	r3, #4
 8005460:	0112      	lsls	r2, r2, #4
 8005462:	b2d2      	uxtb	r2, r2
 8005464:	440b      	add	r3, r1
 8005466:	761a      	strb	r2, [r3, #24]
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr
 8005474:	e000e100 	.word	0xe000e100
 8005478:	e000ed00 	.word	0xe000ed00

0800547c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8005482:	f002 fb3b 	bl	8007afc <SEGGER_SYSVIEW_IsStarted>
 8005486:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800548e:	f001 fd53 	bl	8006f38 <SEGGER_SYSVIEW_Start>
  }
}
 8005492:	bf00      	nop
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
	...

0800549c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	4603      	mov	r3, r0
 80054a4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80054a6:	4b0c      	ldr	r3, [pc, #48]	; (80054d8 <_cbOnUARTRx+0x3c>)
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	2b03      	cmp	r3, #3
 80054ac:	d806      	bhi.n	80054bc <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80054ae:	4b0a      	ldr	r3, [pc, #40]	; (80054d8 <_cbOnUARTRx+0x3c>)
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	3301      	adds	r3, #1
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	4b08      	ldr	r3, [pc, #32]	; (80054d8 <_cbOnUARTRx+0x3c>)
 80054b8:	701a      	strb	r2, [r3, #0]
    goto Done;
 80054ba:	e009      	b.n	80054d0 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80054bc:	f7ff ffde 	bl	800547c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80054c0:	4b05      	ldr	r3, [pc, #20]	; (80054d8 <_cbOnUARTRx+0x3c>)
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	4618      	mov	r0, r3
 80054c6:	1dfb      	adds	r3, r7, #7
 80054c8:	2201      	movs	r2, #1
 80054ca:	4619      	mov	r1, r3
 80054cc:	f000 fb9a 	bl	8005c04 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80054d0:	bf00      	nop
}
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	20000014 	.word	0x20000014

080054dc <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80054e4:	4b14      	ldr	r3, [pc, #80]	; (8005538 <_cbOnUARTTx+0x5c>)
 80054e6:	785b      	ldrb	r3, [r3, #1]
 80054e8:	2b03      	cmp	r3, #3
 80054ea:	d80f      	bhi.n	800550c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80054ec:	4b12      	ldr	r3, [pc, #72]	; (8005538 <_cbOnUARTTx+0x5c>)
 80054ee:	785b      	ldrb	r3, [r3, #1]
 80054f0:	461a      	mov	r2, r3
 80054f2:	4b12      	ldr	r3, [pc, #72]	; (800553c <_cbOnUARTTx+0x60>)
 80054f4:	5c9a      	ldrb	r2, [r3, r2]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80054fa:	4b0f      	ldr	r3, [pc, #60]	; (8005538 <_cbOnUARTTx+0x5c>)
 80054fc:	785b      	ldrb	r3, [r3, #1]
 80054fe:	3301      	adds	r3, #1
 8005500:	b2da      	uxtb	r2, r3
 8005502:	4b0d      	ldr	r3, [pc, #52]	; (8005538 <_cbOnUARTTx+0x5c>)
 8005504:	705a      	strb	r2, [r3, #1]
    r = 1;
 8005506:	2301      	movs	r3, #1
 8005508:	60fb      	str	r3, [r7, #12]
    goto Done;
 800550a:	e00f      	b.n	800552c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 800550c:	4b0a      	ldr	r3, [pc, #40]	; (8005538 <_cbOnUARTTx+0x5c>)
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	6879      	ldr	r1, [r7, #4]
 8005514:	4618      	mov	r0, r3
 8005516:	f000 fa19 	bl	800594c <SEGGER_RTT_ReadUpBufferNoLock>
 800551a:	4603      	mov	r3, r0
 800551c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2b00      	cmp	r3, #0
 8005522:	da02      	bge.n	800552a <_cbOnUARTTx+0x4e>
    r = 0;
 8005524:	2300      	movs	r3, #0
 8005526:	60fb      	str	r3, [r7, #12]
 8005528:	e000      	b.n	800552c <_cbOnUARTTx+0x50>
  }
Done:
 800552a:	bf00      	nop
  return r;
 800552c:	68fb      	ldr	r3, [r7, #12]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	20000014 	.word	0x20000014
 800553c:	08007df4 	.word	0x08007df4

08005540 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8005548:	4a04      	ldr	r2, [pc, #16]	; (800555c <SEGGER_UART_init+0x1c>)
 800554a:	4905      	ldr	r1, [pc, #20]	; (8005560 <SEGGER_UART_init+0x20>)
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 f863 	bl	8005618 <HIF_UART_Init>
}
 8005552:	bf00      	nop
 8005554:	3708      	adds	r7, #8
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	0800549d 	.word	0x0800549d
 8005560:	080054dd 	.word	0x080054dd

08005564 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800556a:	4b1e      	ldr	r3, [pc, #120]	; (80055e4 <USART2_IRQHandler+0x80>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f003 0320 	and.w	r3, r3, #32
 8005576:	2b00      	cmp	r3, #0
 8005578:	d011      	beq.n	800559e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800557a:	4b1b      	ldr	r3, [pc, #108]	; (80055e8 <USART2_IRQHandler+0x84>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	b2db      	uxtb	r3, r3
 8005580:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f003 030b 	and.w	r3, r3, #11
 8005588:	2b00      	cmp	r3, #0
 800558a:	d108      	bne.n	800559e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800558c:	4b17      	ldr	r3, [pc, #92]	; (80055ec <USART2_IRQHandler+0x88>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d004      	beq.n	800559e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005594:	4b15      	ldr	r3, [pc, #84]	; (80055ec <USART2_IRQHandler+0x88>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	79fa      	ldrb	r2, [r7, #7]
 800559a:	4610      	mov	r0, r2
 800559c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d01a      	beq.n	80055de <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80055a8:	4b11      	ldr	r3, [pc, #68]	; (80055f0 <USART2_IRQHandler+0x8c>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d015      	beq.n	80055dc <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80055b0:	4b0f      	ldr	r3, [pc, #60]	; (80055f0 <USART2_IRQHandler+0x8c>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	1dfa      	adds	r2, r7, #7
 80055b6:	4610      	mov	r0, r2
 80055b8:	4798      	blx	r3
 80055ba:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d106      	bne.n	80055d0 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80055c2:	4b0c      	ldr	r3, [pc, #48]	; (80055f4 <USART2_IRQHandler+0x90>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a0b      	ldr	r2, [pc, #44]	; (80055f4 <USART2_IRQHandler+0x90>)
 80055c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055cc:	6013      	str	r3, [r2, #0]
 80055ce:	e006      	b.n	80055de <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80055d0:	4b04      	ldr	r3, [pc, #16]	; (80055e4 <USART2_IRQHandler+0x80>)
 80055d2:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80055d4:	79fa      	ldrb	r2, [r7, #7]
 80055d6:	4b04      	ldr	r3, [pc, #16]	; (80055e8 <USART2_IRQHandler+0x84>)
 80055d8:	601a      	str	r2, [r3, #0]
 80055da:	e000      	b.n	80055de <USART2_IRQHandler+0x7a>
      return;
 80055dc:	bf00      	nop
    }
  }
}
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	40004400 	.word	0x40004400
 80055e8:	40004404 	.word	0x40004404
 80055ec:	20012e48 	.word	0x20012e48
 80055f0:	20012e4c 	.word	0x20012e4c
 80055f4:	4000440c 	.word	0x4000440c

080055f8 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80055f8:	b480      	push	{r7}
 80055fa:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80055fc:	4b05      	ldr	r3, [pc, #20]	; (8005614 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a04      	ldr	r2, [pc, #16]	; (8005614 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005606:	6013      	str	r3, [r2, #0]
}
 8005608:	bf00      	nop
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	4000440c 	.word	0x4000440c

08005618 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8005624:	4b2e      	ldr	r3, [pc, #184]	; (80056e0 <HIF_UART_Init+0xc8>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a2d      	ldr	r2, [pc, #180]	; (80056e0 <HIF_UART_Init+0xc8>)
 800562a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800562e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8005630:	4b2c      	ldr	r3, [pc, #176]	; (80056e4 <HIF_UART_Init+0xcc>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a2b      	ldr	r2, [pc, #172]	; (80056e4 <HIF_UART_Init+0xcc>)
 8005636:	f043 0301 	orr.w	r3, r3, #1
 800563a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 800563c:	4b2a      	ldr	r3, [pc, #168]	; (80056e8 <HIF_UART_Init+0xd0>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005648:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8005650:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8005652:	4a25      	ldr	r2, [pc, #148]	; (80056e8 <HIF_UART_Init+0xd0>)
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8005658:	4b24      	ldr	r3, [pc, #144]	; (80056ec <HIF_UART_Init+0xd4>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005664:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800566c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800566e:	4a1f      	ldr	r2, [pc, #124]	; (80056ec <HIF_UART_Init+0xd4>)
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8005674:	4b1e      	ldr	r3, [pc, #120]	; (80056f0 <HIF_UART_Init+0xd8>)
 8005676:	f24a 022c 	movw	r2, #41004	; 0xa02c
 800567a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 800567c:	4b1d      	ldr	r3, [pc, #116]	; (80056f4 <HIF_UART_Init+0xdc>)
 800567e:	2200      	movs	r2, #0
 8005680:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8005682:	4b1d      	ldr	r3, [pc, #116]	; (80056f8 <HIF_UART_Init+0xe0>)
 8005684:	2280      	movs	r2, #128	; 0x80
 8005686:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800568e:	4a1b      	ldr	r2, [pc, #108]	; (80056fc <HIF_UART_Init+0xe4>)
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	fbb2 f3f3 	udiv	r3, r2, r3
 8005696:	3301      	adds	r3, #1
 8005698:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	085b      	lsrs	r3, r3, #1
 800569e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a6:	d302      	bcc.n	80056ae <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80056a8:	f640 73ff 	movw	r3, #4095	; 0xfff
 80056ac:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d004      	beq.n	80056be <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	011b      	lsls	r3, r3, #4
 80056b8:	4a11      	ldr	r2, [pc, #68]	; (8005700 <HIF_UART_Init+0xe8>)
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80056be:	4a11      	ldr	r2, [pc, #68]	; (8005704 <HIF_UART_Init+0xec>)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80056c4:	4a10      	ldr	r2, [pc, #64]	; (8005708 <HIF_UART_Init+0xf0>)
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80056ca:	2106      	movs	r1, #6
 80056cc:	2026      	movs	r0, #38	; 0x26
 80056ce:	f7ff feab 	bl	8005428 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80056d2:	2026      	movs	r0, #38	; 0x26
 80056d4:	f7ff fe8a 	bl	80053ec <__NVIC_EnableIRQ>
}
 80056d8:	bf00      	nop
 80056da:	3718      	adds	r7, #24
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	40023840 	.word	0x40023840
 80056e4:	40023830 	.word	0x40023830
 80056e8:	40020020 	.word	0x40020020
 80056ec:	40020000 	.word	0x40020000
 80056f0:	4000440c 	.word	0x4000440c
 80056f4:	40004410 	.word	0x40004410
 80056f8:	40004414 	.word	0x40004414
 80056fc:	0501bd00 	.word	0x0501bd00
 8005700:	40004408 	.word	0x40004408
 8005704:	20012e48 	.word	0x20012e48
 8005708:	20012e4c 	.word	0x20012e4c

0800570c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005712:	4b24      	ldr	r3, [pc, #144]	; (80057a4 <_DoInit+0x98>)
 8005714:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2203      	movs	r2, #3
 800571a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2203      	movs	r2, #3
 8005720:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a20      	ldr	r2, [pc, #128]	; (80057a8 <_DoInit+0x9c>)
 8005726:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a20      	ldr	r2, [pc, #128]	; (80057ac <_DoInit+0xa0>)
 800572c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005734:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a17      	ldr	r2, [pc, #92]	; (80057a8 <_DoInit+0x9c>)
 800574c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a17      	ldr	r2, [pc, #92]	; (80057b0 <_DoInit+0xa4>)
 8005752:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2210      	movs	r2, #16
 8005758:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	3307      	adds	r3, #7
 8005770:	4a10      	ldr	r2, [pc, #64]	; (80057b4 <_DoInit+0xa8>)
 8005772:	6810      	ldr	r0, [r2, #0]
 8005774:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005776:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a0e      	ldr	r2, [pc, #56]	; (80057b8 <_DoInit+0xac>)
 800577e:	6810      	ldr	r0, [r2, #0]
 8005780:	6018      	str	r0, [r3, #0]
 8005782:	8891      	ldrh	r1, [r2, #4]
 8005784:	7992      	ldrb	r2, [r2, #6]
 8005786:	8099      	strh	r1, [r3, #4]
 8005788:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800578a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2220      	movs	r2, #32
 8005792:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005794:	f3bf 8f5f 	dmb	sy
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr
 80057a4:	20014414 	.word	0x20014414
 80057a8:	08007d68 	.word	0x08007d68
 80057ac:	20012e50 	.word	0x20012e50
 80057b0:	20013250 	.word	0x20013250
 80057b4:	08007d74 	.word	0x08007d74
 80057b8:	08007d78 	.word	0x08007d78

080057bc <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80057bc:	b580      	push	{r7, lr}
 80057be:	b08a      	sub	sp, #40	; 0x28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80057c8:	2300      	movs	r3, #0
 80057ca:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d905      	bls.n	80057ec <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	3b01      	subs	r3, #1
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
 80057ea:	e007      	b.n	80057fc <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	689a      	ldr	r2, [r3, #8]
 80057f0:	69b9      	ldr	r1, [r7, #24]
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	1acb      	subs	r3, r1, r3
 80057f6:	4413      	add	r3, r2
 80057f8:	3b01      	subs	r3, #1
 80057fa:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005806:	4293      	cmp	r3, r2
 8005808:	bf28      	it	cs
 800580a:	4613      	movcs	r3, r2
 800580c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800580e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4293      	cmp	r3, r2
 8005814:	bf28      	it	cs
 8005816:	4613      	movcs	r3, r2
 8005818:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	685a      	ldr	r2, [r3, #4]
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	4413      	add	r3, r2
 8005822:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005826:	68b9      	ldr	r1, [r7, #8]
 8005828:	6978      	ldr	r0, [r7, #20]
 800582a:	f002 f9eb 	bl	8007c04 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800582e:	6a3a      	ldr	r2, [r7, #32]
 8005830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005832:	4413      	add	r3, r2
 8005834:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583a:	4413      	add	r3, r2
 800583c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005846:	69fa      	ldr	r2, [r7, #28]
 8005848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584a:	4413      	add	r3, r2
 800584c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	69fa      	ldr	r2, [r7, #28]
 8005854:	429a      	cmp	r2, r3
 8005856:	d101      	bne.n	800585c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005858:	2300      	movs	r3, #0
 800585a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800585c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	69fa      	ldr	r2, [r7, #28]
 8005864:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1b2      	bne.n	80057d2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800586c:	6a3b      	ldr	r3, [r7, #32]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3728      	adds	r7, #40	; 0x28
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005876:	b580      	push	{r7, lr}
 8005878:	b088      	sub	sp, #32
 800587a:	af00      	add	r7, sp, #0
 800587c:	60f8      	str	r0, [r7, #12]
 800587e:	60b9      	str	r1, [r7, #8]
 8005880:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	689a      	ldr	r2, [r3, #8]
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005892:	69ba      	ldr	r2, [r7, #24]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	429a      	cmp	r2, r3
 8005898:	d911      	bls.n	80058be <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	4413      	add	r3, r2
 80058a2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	68b9      	ldr	r1, [r7, #8]
 80058a8:	6938      	ldr	r0, [r7, #16]
 80058aa:	f002 f9ab 	bl	8007c04 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80058ae:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80058b2:	69fa      	ldr	r2, [r7, #28]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	441a      	add	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80058bc:	e01f      	b.n	80058fe <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	685a      	ldr	r2, [r3, #4]
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	4413      	add	r3, r2
 80058ca:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	68b9      	ldr	r1, [r7, #8]
 80058d0:	6938      	ldr	r0, [r7, #16]
 80058d2:	f002 f997 	bl	8007c04 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	4413      	add	r3, r2
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	4619      	mov	r1, r3
 80058ee:	6938      	ldr	r0, [r7, #16]
 80058f0:	f002 f988 	bl	8007c04 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80058f4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	60da      	str	r2, [r3, #12]
}
 80058fe:	bf00      	nop
 8005900:	3720      	adds	r7, #32
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005906:	b480      	push	{r7}
 8005908:	b087      	sub	sp, #28
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	429a      	cmp	r2, r3
 8005920:	d808      	bhi.n	8005934 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	689a      	ldr	r2, [r3, #8]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	1ad2      	subs	r2, r2, r3
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	4413      	add	r3, r2
 800592e:	3b01      	subs	r3, #1
 8005930:	617b      	str	r3, [r7, #20]
 8005932:	e004      	b.n	800593e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	3b01      	subs	r3, #1
 800593c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800593e:	697b      	ldr	r3, [r7, #20]
}
 8005940:	4618      	mov	r0, r3
 8005942:	371c      	adds	r7, #28
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800594c:	b580      	push	{r7, lr}
 800594e:	b08c      	sub	sp, #48	; 0x30
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005958:	4b3e      	ldr	r3, [pc, #248]	; (8005a54 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800595a:	623b      	str	r3, [r7, #32]
 800595c:	6a3b      	ldr	r3, [r7, #32]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8005966:	f7ff fed1 	bl	800570c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	1c5a      	adds	r2, r3, #1
 800596e:	4613      	mov	r3, r2
 8005970:	005b      	lsls	r3, r3, #1
 8005972:	4413      	add	r3, r2
 8005974:	00db      	lsls	r3, r3, #3
 8005976:	4a37      	ldr	r2, [pc, #220]	; (8005a54 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005978:	4413      	add	r3, r2
 800597a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800598c:	2300      	movs	r3, #0
 800598e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005990:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	429a      	cmp	r2, r3
 8005996:	d92b      	bls.n	80059f0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	689a      	ldr	r2, [r3, #8]
 800599c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4293      	cmp	r3, r2
 80059a8:	bf28      	it	cs
 80059aa:	4613      	movcs	r3, r2
 80059ac:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b4:	4413      	add	r3, r2
 80059b6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	6939      	ldr	r1, [r7, #16]
 80059bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059be:	f002 f921 	bl	8007c04 <memcpy>
    NumBytesRead += NumBytesRem;
 80059c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	4413      	add	r3, r2
 80059c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80059ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	4413      	add	r3, r2
 80059d0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80059da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	4413      	add	r3, r2
 80059e0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d101      	bne.n	80059f0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80059ec:	2300      	movs	r3, #0
 80059ee:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4293      	cmp	r3, r2
 80059fe:	bf28      	it	cs
 8005a00:	4613      	movcs	r3, r2
 8005a02:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d019      	beq.n	8005a3e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	685a      	ldr	r2, [r3, #4]
 8005a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a10:	4413      	add	r3, r2
 8005a12:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	6939      	ldr	r1, [r7, #16]
 8005a18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a1a:	f002 f8f3 	bl	8007c04 <memcpy>
    NumBytesRead += NumBytesRem;
 8005a1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	4413      	add	r3, r2
 8005a24:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005a36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d002      	beq.n	8005a4a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a48:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3730      	adds	r7, #48	; 0x30
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	20014414 	.word	0x20014414

08005a58 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b08c      	sub	sp, #48	; 0x30
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005a64:	4b3e      	ldr	r3, [pc, #248]	; (8005b60 <SEGGER_RTT_ReadNoLock+0x108>)
 8005a66:	623b      	str	r3, [r7, #32]
 8005a68:	6a3b      	ldr	r3, [r7, #32]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d101      	bne.n	8005a76 <SEGGER_RTT_ReadNoLock+0x1e>
 8005a72:	f7ff fe4b 	bl	800570c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	005b      	lsls	r3, r3, #1
 8005a7c:	4413      	add	r3, r2
 8005a7e:	00db      	lsls	r3, r3, #3
 8005a80:	3360      	adds	r3, #96	; 0x60
 8005a82:	4a37      	ldr	r2, [pc, #220]	; (8005b60 <SEGGER_RTT_ReadNoLock+0x108>)
 8005a84:	4413      	add	r3, r2
 8005a86:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005a9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d92b      	bls.n	8005afc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	689a      	ldr	r2, [r3, #8]
 8005aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	bf28      	it	cs
 8005ab6:	4613      	movcs	r3, r2
 8005ab8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac0:	4413      	add	r3, r2
 8005ac2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	6939      	ldr	r1, [r7, #16]
 8005ac8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005aca:	f002 f89b 	bl	8007c04 <memcpy>
    NumBytesRead += NumBytesRem;
 8005ace:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	4413      	add	r3, r2
 8005adc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005ae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	4413      	add	r3, r2
 8005aec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d101      	bne.n	8005afc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005af8:	2300      	movs	r3, #0
 8005afa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	bf28      	it	cs
 8005b0c:	4613      	movcs	r3, r2
 8005b0e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d019      	beq.n	8005b4a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1c:	4413      	add	r3, r2
 8005b1e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	6939      	ldr	r1, [r7, #16]
 8005b24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b26:	f002 f86d 	bl	8007c04 <memcpy>
    NumBytesRead += NumBytesRem;
 8005b2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	4413      	add	r3, r2
 8005b30:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	4413      	add	r3, r2
 8005b38:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005b42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	4413      	add	r3, r2
 8005b48:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d002      	beq.n	8005b56 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b54:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3730      	adds	r7, #48	; 0x30
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	20014414 	.word	0x20014414

08005b64 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b088      	sub	sp, #32
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	4613      	mov	r3, r2
 8005b78:	005b      	lsls	r3, r3, #1
 8005b7a:	4413      	add	r3, r2
 8005b7c:	00db      	lsls	r3, r3, #3
 8005b7e:	3360      	adds	r3, #96	; 0x60
 8005b80:	4a1f      	ldr	r2, [pc, #124]	; (8005c00 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005b82:	4413      	add	r3, r2
 8005b84:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d029      	beq.n	8005be2 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d82e      	bhi.n	8005bf0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d002      	beq.n	8005b9c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d013      	beq.n	8005bc2 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8005b9a:	e029      	b.n	8005bf0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005b9c:	6978      	ldr	r0, [r7, #20]
 8005b9e:	f7ff feb2 	bl	8005906 <_GetAvailWriteSpace>
 8005ba2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d202      	bcs.n	8005bb2 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005bac:	2300      	movs	r3, #0
 8005bae:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005bb0:	e021      	b.n	8005bf6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	69b9      	ldr	r1, [r7, #24]
 8005bba:	6978      	ldr	r0, [r7, #20]
 8005bbc:	f7ff fe5b 	bl	8005876 <_WriteNoCheck>
    break;
 8005bc0:	e019      	b.n	8005bf6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005bc2:	6978      	ldr	r0, [r7, #20]
 8005bc4:	f7ff fe9f 	bl	8005906 <_GetAvailWriteSpace>
 8005bc8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	bf28      	it	cs
 8005bd2:	4613      	movcs	r3, r2
 8005bd4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005bd6:	69fa      	ldr	r2, [r7, #28]
 8005bd8:	69b9      	ldr	r1, [r7, #24]
 8005bda:	6978      	ldr	r0, [r7, #20]
 8005bdc:	f7ff fe4b 	bl	8005876 <_WriteNoCheck>
    break;
 8005be0:	e009      	b.n	8005bf6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	69b9      	ldr	r1, [r7, #24]
 8005be6:	6978      	ldr	r0, [r7, #20]
 8005be8:	f7ff fde8 	bl	80057bc <_WriteBlocking>
 8005bec:	61f8      	str	r0, [r7, #28]
    break;
 8005bee:	e002      	b.n	8005bf6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	61fb      	str	r3, [r7, #28]
    break;
 8005bf4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005bf6:	69fb      	ldr	r3, [r7, #28]
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3720      	adds	r7, #32
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	20014414 	.word	0x20014414

08005c04 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b088      	sub	sp, #32
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005c10:	4b0e      	ldr	r3, [pc, #56]	; (8005c4c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005c12:	61fb      	str	r3, [r7, #28]
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d101      	bne.n	8005c22 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005c1e:	f7ff fd75 	bl	800570c <_DoInit>
  SEGGER_RTT_LOCK();
 8005c22:	f3ef 8311 	mrs	r3, BASEPRI
 8005c26:	f04f 0120 	mov.w	r1, #32
 8005c2a:	f381 8811 	msr	BASEPRI, r1
 8005c2e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	68b9      	ldr	r1, [r7, #8]
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f7ff ff95 	bl	8005b64 <SEGGER_RTT_WriteDownBufferNoLock>
 8005c3a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005c42:	697b      	ldr	r3, [r7, #20]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3720      	adds	r7, #32
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	20014414 	.word	0x20014414

08005c50 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b088      	sub	sp, #32
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
 8005c5c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005c5e:	4b3d      	ldr	r3, [pc, #244]	; (8005d54 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005c60:	61bb      	str	r3, [r7, #24]
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d101      	bne.n	8005c70 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005c6c:	f7ff fd4e 	bl	800570c <_DoInit>
  SEGGER_RTT_LOCK();
 8005c70:	f3ef 8311 	mrs	r3, BASEPRI
 8005c74:	f04f 0120 	mov.w	r1, #32
 8005c78:	f381 8811 	msr	BASEPRI, r1
 8005c7c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005c7e:	4b35      	ldr	r3, [pc, #212]	; (8005d54 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005c80:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005c82:	2300      	movs	r3, #0
 8005c84:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005c86:	6939      	ldr	r1, [r7, #16]
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	1c5a      	adds	r2, r3, #1
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	005b      	lsls	r3, r3, #1
 8005c90:	4413      	add	r3, r2
 8005c92:	00db      	lsls	r3, r3, #3
 8005c94:	440b      	add	r3, r1
 8005c96:	3304      	adds	r3, #4
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d008      	beq.n	8005cb0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	69fa      	ldr	r2, [r7, #28]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	dbeb      	blt.n	8005c86 <SEGGER_RTT_AllocUpBuffer+0x36>
 8005cae:	e000      	b.n	8005cb2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005cb0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	69fa      	ldr	r2, [r7, #28]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	da3f      	bge.n	8005d3c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005cbc:	6939      	ldr	r1, [r7, #16]
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	1c5a      	adds	r2, r3, #1
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	005b      	lsls	r3, r3, #1
 8005cc6:	4413      	add	r3, r2
 8005cc8:	00db      	lsls	r3, r3, #3
 8005cca:	440b      	add	r3, r1
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005cd0:	6939      	ldr	r1, [r7, #16]
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	1c5a      	adds	r2, r3, #1
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	005b      	lsls	r3, r3, #1
 8005cda:	4413      	add	r3, r2
 8005cdc:	00db      	lsls	r3, r3, #3
 8005cde:	440b      	add	r3, r1
 8005ce0:	3304      	adds	r3, #4
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005ce6:	6939      	ldr	r1, [r7, #16]
 8005ce8:	69fa      	ldr	r2, [r7, #28]
 8005cea:	4613      	mov	r3, r2
 8005cec:	005b      	lsls	r3, r3, #1
 8005cee:	4413      	add	r3, r2
 8005cf0:	00db      	lsls	r3, r3, #3
 8005cf2:	440b      	add	r3, r1
 8005cf4:	3320      	adds	r3, #32
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005cfa:	6939      	ldr	r1, [r7, #16]
 8005cfc:	69fa      	ldr	r2, [r7, #28]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	005b      	lsls	r3, r3, #1
 8005d02:	4413      	add	r3, r2
 8005d04:	00db      	lsls	r3, r3, #3
 8005d06:	440b      	add	r3, r1
 8005d08:	3328      	adds	r3, #40	; 0x28
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005d0e:	6939      	ldr	r1, [r7, #16]
 8005d10:	69fa      	ldr	r2, [r7, #28]
 8005d12:	4613      	mov	r3, r2
 8005d14:	005b      	lsls	r3, r3, #1
 8005d16:	4413      	add	r3, r2
 8005d18:	00db      	lsls	r3, r3, #3
 8005d1a:	440b      	add	r3, r1
 8005d1c:	3324      	adds	r3, #36	; 0x24
 8005d1e:	2200      	movs	r2, #0
 8005d20:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005d22:	6939      	ldr	r1, [r7, #16]
 8005d24:	69fa      	ldr	r2, [r7, #28]
 8005d26:	4613      	mov	r3, r2
 8005d28:	005b      	lsls	r3, r3, #1
 8005d2a:	4413      	add	r3, r2
 8005d2c:	00db      	lsls	r3, r3, #3
 8005d2e:	440b      	add	r3, r1
 8005d30:	332c      	adds	r3, #44	; 0x2c
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005d36:	f3bf 8f5f 	dmb	sy
 8005d3a:	e002      	b.n	8005d42 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d40:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005d48:	69fb      	ldr	r3, [r7, #28]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3720      	adds	r7, #32
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	20014414 	.word	0x20014414

08005d58 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b088      	sub	sp, #32
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]
 8005d64:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005d66:	4b33      	ldr	r3, [pc, #204]	; (8005e34 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005d68:	61bb      	str	r3, [r7, #24]
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d101      	bne.n	8005d78 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005d74:	f7ff fcca 	bl	800570c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005d78:	4b2e      	ldr	r3, [pc, #184]	; (8005e34 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005d7a:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	695b      	ldr	r3, [r3, #20]
 8005d80:	461a      	mov	r2, r3
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d24d      	bcs.n	8005e24 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005d88:	f3ef 8311 	mrs	r3, BASEPRI
 8005d8c:	f04f 0120 	mov.w	r1, #32
 8005d90:	f381 8811 	msr	BASEPRI, r1
 8005d94:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d031      	beq.n	8005e00 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005d9c:	6979      	ldr	r1, [r7, #20]
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	4613      	mov	r3, r2
 8005da2:	005b      	lsls	r3, r3, #1
 8005da4:	4413      	add	r3, r2
 8005da6:	00db      	lsls	r3, r3, #3
 8005da8:	440b      	add	r3, r1
 8005daa:	3360      	adds	r3, #96	; 0x60
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005db0:	6979      	ldr	r1, [r7, #20]
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	4613      	mov	r3, r2
 8005db6:	005b      	lsls	r3, r3, #1
 8005db8:	4413      	add	r3, r2
 8005dba:	00db      	lsls	r3, r3, #3
 8005dbc:	440b      	add	r3, r1
 8005dbe:	3364      	adds	r3, #100	; 0x64
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005dc4:	6979      	ldr	r1, [r7, #20]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	4613      	mov	r3, r2
 8005dca:	005b      	lsls	r3, r3, #1
 8005dcc:	4413      	add	r3, r2
 8005dce:	00db      	lsls	r3, r3, #3
 8005dd0:	440b      	add	r3, r1
 8005dd2:	3368      	adds	r3, #104	; 0x68
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005dd8:	6979      	ldr	r1, [r7, #20]
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	005b      	lsls	r3, r3, #1
 8005de0:	4413      	add	r3, r2
 8005de2:	00db      	lsls	r3, r3, #3
 8005de4:	440b      	add	r3, r1
 8005de6:	3370      	adds	r3, #112	; 0x70
 8005de8:	2200      	movs	r2, #0
 8005dea:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005dec:	6979      	ldr	r1, [r7, #20]
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	4613      	mov	r3, r2
 8005df2:	005b      	lsls	r3, r3, #1
 8005df4:	4413      	add	r3, r2
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	440b      	add	r3, r1
 8005dfa:	336c      	adds	r3, #108	; 0x6c
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005e00:	6979      	ldr	r1, [r7, #20]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	4613      	mov	r3, r2
 8005e06:	005b      	lsls	r3, r3, #1
 8005e08:	4413      	add	r3, r2
 8005e0a:	00db      	lsls	r3, r3, #3
 8005e0c:	440b      	add	r3, r1
 8005e0e:	3374      	adds	r3, #116	; 0x74
 8005e10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e12:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005e14:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	61fb      	str	r3, [r7, #28]
 8005e22:	e002      	b.n	8005e2a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005e24:	f04f 33ff 	mov.w	r3, #4294967295
 8005e28:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005e2a:	69fb      	ldr	r3, [r7, #28]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3720      	adds	r7, #32
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	20014414 	.word	0x20014414

08005e38 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005e38:	b480      	push	{r7}
 8005e3a:	b087      	sub	sp, #28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005e44:	2300      	movs	r3, #0
 8005e46:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005e48:	e002      	b.n	8005e50 <_EncodeStr+0x18>
    Len++;
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	4413      	add	r3, r2
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1f6      	bne.n	8005e4a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d901      	bls.n	8005e68 <_EncodeStr+0x30>
    Len = Limit;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	2bfe      	cmp	r3, #254	; 0xfe
 8005e6c:	d806      	bhi.n	8005e7c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	1c5a      	adds	r2, r3, #1
 8005e72:	60fa      	str	r2, [r7, #12]
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	b2d2      	uxtb	r2, r2
 8005e78:	701a      	strb	r2, [r3, #0]
 8005e7a:	e011      	b.n	8005ea0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	1c5a      	adds	r2, r3, #1
 8005e80:	60fa      	str	r2, [r7, #12]
 8005e82:	22ff      	movs	r2, #255	; 0xff
 8005e84:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	1c5a      	adds	r2, r3, #1
 8005e8a:	60fa      	str	r2, [r7, #12]
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	b2d2      	uxtb	r2, r2
 8005e90:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	0a19      	lsrs	r1, r3, #8
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	1c5a      	adds	r2, r3, #1
 8005e9a:	60fa      	str	r2, [r7, #12]
 8005e9c:	b2ca      	uxtb	r2, r1
 8005e9e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005ea4:	e00a      	b.n	8005ebc <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	1c53      	adds	r3, r2, #1
 8005eaa:	60bb      	str	r3, [r7, #8]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	1c59      	adds	r1, r3, #1
 8005eb0:	60f9      	str	r1, [r7, #12]
 8005eb2:	7812      	ldrb	r2, [r2, #0]
 8005eb4:	701a      	strb	r2, [r3, #0]
    n++;
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d3f0      	bcc.n	8005ea6 <_EncodeStr+0x6e>
  }
  return pPayload;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	371c      	adds	r7, #28
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005ed2:	b480      	push	{r7}
 8005ed4:	b083      	sub	sp, #12
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	3304      	adds	r3, #4
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
	...

08005eec <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005ef2:	4b36      	ldr	r3, [pc, #216]	; (8005fcc <_HandleIncomingPacket+0xe0>)
 8005ef4:	7e1b      	ldrb	r3, [r3, #24]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	1cfb      	adds	r3, r7, #3
 8005efa:	2201      	movs	r2, #1
 8005efc:	4619      	mov	r1, r3
 8005efe:	f7ff fdab 	bl	8005a58 <SEGGER_RTT_ReadNoLock>
 8005f02:	4603      	mov	r3, r0
 8005f04:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	dd54      	ble.n	8005fb6 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8005f0c:	78fb      	ldrb	r3, [r7, #3]
 8005f0e:	2b80      	cmp	r3, #128	; 0x80
 8005f10:	d032      	beq.n	8005f78 <_HandleIncomingPacket+0x8c>
 8005f12:	2b80      	cmp	r3, #128	; 0x80
 8005f14:	dc42      	bgt.n	8005f9c <_HandleIncomingPacket+0xb0>
 8005f16:	2b07      	cmp	r3, #7
 8005f18:	dc16      	bgt.n	8005f48 <_HandleIncomingPacket+0x5c>
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	dd3e      	ble.n	8005f9c <_HandleIncomingPacket+0xb0>
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	2b06      	cmp	r3, #6
 8005f22:	d83b      	bhi.n	8005f9c <_HandleIncomingPacket+0xb0>
 8005f24:	a201      	add	r2, pc, #4	; (adr r2, 8005f2c <_HandleIncomingPacket+0x40>)
 8005f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2a:	bf00      	nop
 8005f2c:	08005f4f 	.word	0x08005f4f
 8005f30:	08005f55 	.word	0x08005f55
 8005f34:	08005f5b 	.word	0x08005f5b
 8005f38:	08005f61 	.word	0x08005f61
 8005f3c:	08005f67 	.word	0x08005f67
 8005f40:	08005f6d 	.word	0x08005f6d
 8005f44:	08005f73 	.word	0x08005f73
 8005f48:	2b7f      	cmp	r3, #127	; 0x7f
 8005f4a:	d036      	beq.n	8005fba <_HandleIncomingPacket+0xce>
 8005f4c:	e026      	b.n	8005f9c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005f4e:	f000 fff3 	bl	8006f38 <SEGGER_SYSVIEW_Start>
      break;
 8005f52:	e037      	b.n	8005fc4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005f54:	f001 f8ac 	bl	80070b0 <SEGGER_SYSVIEW_Stop>
      break;
 8005f58:	e034      	b.n	8005fc4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005f5a:	f001 fa85 	bl	8007468 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005f5e:	e031      	b.n	8005fc4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005f60:	f001 fa4a 	bl	80073f8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005f64:	e02e      	b.n	8005fc4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005f66:	f001 f8c9 	bl	80070fc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005f6a:	e02b      	b.n	8005fc4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005f6c:	f001 fd18 	bl	80079a0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005f70:	e028      	b.n	8005fc4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005f72:	f001 fcf7 	bl	8007964 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005f76:	e025      	b.n	8005fc4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005f78:	4b14      	ldr	r3, [pc, #80]	; (8005fcc <_HandleIncomingPacket+0xe0>)
 8005f7a:	7e1b      	ldrb	r3, [r3, #24]
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	1cfb      	adds	r3, r7, #3
 8005f80:	2201      	movs	r2, #1
 8005f82:	4619      	mov	r1, r3
 8005f84:	f7ff fd68 	bl	8005a58 <SEGGER_RTT_ReadNoLock>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	dd15      	ble.n	8005fbe <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005f92:	78fb      	ldrb	r3, [r7, #3]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f001 fc65 	bl	8007864 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005f9a:	e010      	b.n	8005fbe <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005f9c:	78fb      	ldrb	r3, [r7, #3]
 8005f9e:	b25b      	sxtb	r3, r3
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	da0e      	bge.n	8005fc2 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005fa4:	4b09      	ldr	r3, [pc, #36]	; (8005fcc <_HandleIncomingPacket+0xe0>)
 8005fa6:	7e1b      	ldrb	r3, [r3, #24]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	1cfb      	adds	r3, r7, #3
 8005fac:	2201      	movs	r2, #1
 8005fae:	4619      	mov	r1, r3
 8005fb0:	f7ff fd52 	bl	8005a58 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005fb4:	e005      	b.n	8005fc2 <_HandleIncomingPacket+0xd6>
    }
  }
 8005fb6:	bf00      	nop
 8005fb8:	e004      	b.n	8005fc4 <_HandleIncomingPacket+0xd8>
      break;
 8005fba:	bf00      	nop
 8005fbc:	e002      	b.n	8005fc4 <_HandleIncomingPacket+0xd8>
      break;
 8005fbe:	bf00      	nop
 8005fc0:	e000      	b.n	8005fc4 <_HandleIncomingPacket+0xd8>
      break;
 8005fc2:	bf00      	nop
}
 8005fc4:	bf00      	nop
 8005fc6:	3708      	adds	r7, #8
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	20014268 	.word	0x20014268

08005fd0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b08c      	sub	sp, #48	; 0x30
 8005fd4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005fda:	1d3b      	adds	r3, r7, #4
 8005fdc:	3301      	adds	r3, #1
 8005fde:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fe4:	4b32      	ldr	r3, [pc, #200]	; (80060b0 <_TrySendOverflowPacket+0xe0>)
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fea:	e00b      	b.n	8006004 <_TrySendOverflowPacket+0x34>
 8005fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fee:	b2da      	uxtb	r2, r3
 8005ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff2:	1c59      	adds	r1, r3, #1
 8005ff4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005ff6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ffa:	b2d2      	uxtb	r2, r2
 8005ffc:	701a      	strb	r2, [r3, #0]
 8005ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006000:	09db      	lsrs	r3, r3, #7
 8006002:	62bb      	str	r3, [r7, #40]	; 0x28
 8006004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006006:	2b7f      	cmp	r3, #127	; 0x7f
 8006008:	d8f0      	bhi.n	8005fec <_TrySendOverflowPacket+0x1c>
 800600a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600c:	1c5a      	adds	r2, r3, #1
 800600e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006010:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006012:	b2d2      	uxtb	r2, r2
 8006014:	701a      	strb	r2, [r3, #0]
 8006016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006018:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800601a:	4b26      	ldr	r3, [pc, #152]	; (80060b4 <_TrySendOverflowPacket+0xe4>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006020:	4b23      	ldr	r3, [pc, #140]	; (80060b0 <_TrySendOverflowPacket+0xe0>)
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	69ba      	ldr	r2, [r7, #24]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	627b      	str	r3, [r7, #36]	; 0x24
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	623b      	str	r3, [r7, #32]
 8006032:	e00b      	b.n	800604c <_TrySendOverflowPacket+0x7c>
 8006034:	6a3b      	ldr	r3, [r7, #32]
 8006036:	b2da      	uxtb	r2, r3
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	1c59      	adds	r1, r3, #1
 800603c:	6279      	str	r1, [r7, #36]	; 0x24
 800603e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006042:	b2d2      	uxtb	r2, r2
 8006044:	701a      	strb	r2, [r3, #0]
 8006046:	6a3b      	ldr	r3, [r7, #32]
 8006048:	09db      	lsrs	r3, r3, #7
 800604a:	623b      	str	r3, [r7, #32]
 800604c:	6a3b      	ldr	r3, [r7, #32]
 800604e:	2b7f      	cmp	r3, #127	; 0x7f
 8006050:	d8f0      	bhi.n	8006034 <_TrySendOverflowPacket+0x64>
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	1c5a      	adds	r2, r3, #1
 8006056:	627a      	str	r2, [r7, #36]	; 0x24
 8006058:	6a3a      	ldr	r2, [r7, #32]
 800605a:	b2d2      	uxtb	r2, r2
 800605c:	701a      	strb	r2, [r3, #0]
 800605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006060:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8006062:	4b13      	ldr	r3, [pc, #76]	; (80060b0 <_TrySendOverflowPacket+0xe0>)
 8006064:	785b      	ldrb	r3, [r3, #1]
 8006066:	4618      	mov	r0, r3
 8006068:	1d3b      	adds	r3, r7, #4
 800606a:	69fa      	ldr	r2, [r7, #28]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	461a      	mov	r2, r3
 8006070:	1d3b      	adds	r3, r7, #4
 8006072:	4619      	mov	r1, r3
 8006074:	f7fa f8ac 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006078:	4603      	mov	r3, r0
 800607a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 800607c:	f7ff fabc 	bl	80055f8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d009      	beq.n	800609a <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006086:	4a0a      	ldr	r2, [pc, #40]	; (80060b0 <_TrySendOverflowPacket+0xe0>)
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800608c:	4b08      	ldr	r3, [pc, #32]	; (80060b0 <_TrySendOverflowPacket+0xe0>)
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	3b01      	subs	r3, #1
 8006092:	b2da      	uxtb	r2, r3
 8006094:	4b06      	ldr	r3, [pc, #24]	; (80060b0 <_TrySendOverflowPacket+0xe0>)
 8006096:	701a      	strb	r2, [r3, #0]
 8006098:	e004      	b.n	80060a4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800609a:	4b05      	ldr	r3, [pc, #20]	; (80060b0 <_TrySendOverflowPacket+0xe0>)
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	3301      	adds	r3, #1
 80060a0:	4a03      	ldr	r2, [pc, #12]	; (80060b0 <_TrySendOverflowPacket+0xe0>)
 80060a2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80060a4:	693b      	ldr	r3, [r7, #16]
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3730      	adds	r7, #48	; 0x30
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	20014268 	.word	0x20014268
 80060b4:	e0001004 	.word	0xe0001004

080060b8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b08a      	sub	sp, #40	; 0x28
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80060c4:	4b6d      	ldr	r3, [pc, #436]	; (800627c <_SendPacket+0x1c4>)
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d010      	beq.n	80060ee <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80060cc:	4b6b      	ldr	r3, [pc, #428]	; (800627c <_SendPacket+0x1c4>)
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f000 80a5 	beq.w	8006220 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80060d6:	4b69      	ldr	r3, [pc, #420]	; (800627c <_SendPacket+0x1c4>)
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d109      	bne.n	80060f2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80060de:	f7ff ff77 	bl	8005fd0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80060e2:	4b66      	ldr	r3, [pc, #408]	; (800627c <_SendPacket+0x1c4>)
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	f040 809c 	bne.w	8006224 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 80060ec:	e001      	b.n	80060f2 <_SendPacket+0x3a>
    goto Send;
 80060ee:	bf00      	nop
 80060f0:	e000      	b.n	80060f4 <_SendPacket+0x3c>
Send:
 80060f2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b1f      	cmp	r3, #31
 80060f8:	d809      	bhi.n	800610e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80060fa:	4b60      	ldr	r3, [pc, #384]	; (800627c <_SendPacket+0x1c4>)
 80060fc:	69da      	ldr	r2, [r3, #28]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	fa22 f303 	lsr.w	r3, r2, r3
 8006104:	f003 0301 	and.w	r3, r3, #1
 8006108:	2b00      	cmp	r3, #0
 800610a:	f040 808d 	bne.w	8006228 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2b17      	cmp	r3, #23
 8006112:	d807      	bhi.n	8006124 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	3b01      	subs	r3, #1
 8006118:	60fb      	str	r3, [r7, #12]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	b2da      	uxtb	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	701a      	strb	r2, [r3, #0]
 8006122:	e03d      	b.n	80061a0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	2b7f      	cmp	r3, #127	; 0x7f
 8006130:	d912      	bls.n	8006158 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	09da      	lsrs	r2, r3, #7
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	3b01      	subs	r3, #1
 800613a:	60fb      	str	r3, [r7, #12]
 800613c:	b2d2      	uxtb	r2, r2
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	b2db      	uxtb	r3, r3
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	3a01      	subs	r2, #1
 800614a:	60fa      	str	r2, [r7, #12]
 800614c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006150:	b2da      	uxtb	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	701a      	strb	r2, [r3, #0]
 8006156:	e006      	b.n	8006166 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	3b01      	subs	r3, #1
 800615c:	60fb      	str	r3, [r7, #12]
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	b2da      	uxtb	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2b7f      	cmp	r3, #127	; 0x7f
 800616a:	d912      	bls.n	8006192 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	09da      	lsrs	r2, r3, #7
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	3b01      	subs	r3, #1
 8006174:	60fb      	str	r3, [r7, #12]
 8006176:	b2d2      	uxtb	r2, r2
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	b2db      	uxtb	r3, r3
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	3a01      	subs	r2, #1
 8006184:	60fa      	str	r2, [r7, #12]
 8006186:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800618a:	b2da      	uxtb	r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	701a      	strb	r2, [r3, #0]
 8006190:	e006      	b.n	80061a0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	3b01      	subs	r3, #1
 8006196:	60fb      	str	r3, [r7, #12]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	b2da      	uxtb	r2, r3
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80061a0:	4b37      	ldr	r3, [pc, #220]	; (8006280 <_SendPacket+0x1c8>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80061a6:	4b35      	ldr	r3, [pc, #212]	; (800627c <_SendPacket+0x1c4>)
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	69ba      	ldr	r2, [r7, #24]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	627b      	str	r3, [r7, #36]	; 0x24
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	623b      	str	r3, [r7, #32]
 80061b8:	e00b      	b.n	80061d2 <_SendPacket+0x11a>
 80061ba:	6a3b      	ldr	r3, [r7, #32]
 80061bc:	b2da      	uxtb	r2, r3
 80061be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c0:	1c59      	adds	r1, r3, #1
 80061c2:	6279      	str	r1, [r7, #36]	; 0x24
 80061c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061c8:	b2d2      	uxtb	r2, r2
 80061ca:	701a      	strb	r2, [r3, #0]
 80061cc:	6a3b      	ldr	r3, [r7, #32]
 80061ce:	09db      	lsrs	r3, r3, #7
 80061d0:	623b      	str	r3, [r7, #32]
 80061d2:	6a3b      	ldr	r3, [r7, #32]
 80061d4:	2b7f      	cmp	r3, #127	; 0x7f
 80061d6:	d8f0      	bhi.n	80061ba <_SendPacket+0x102>
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061da:	1c5a      	adds	r2, r3, #1
 80061dc:	627a      	str	r2, [r7, #36]	; 0x24
 80061de:	6a3a      	ldr	r2, [r7, #32]
 80061e0:	b2d2      	uxtb	r2, r2
 80061e2:	701a      	strb	r2, [r3, #0]
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80061e8:	4b24      	ldr	r3, [pc, #144]	; (800627c <_SendPacket+0x1c4>)
 80061ea:	785b      	ldrb	r3, [r3, #1]
 80061ec:	4618      	mov	r0, r3
 80061ee:	68ba      	ldr	r2, [r7, #8]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	461a      	mov	r2, r3
 80061f6:	68f9      	ldr	r1, [r7, #12]
 80061f8:	f7f9 ffea 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80061fc:	4603      	mov	r3, r0
 80061fe:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8006200:	f7ff f9fa 	bl	80055f8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d003      	beq.n	8006212 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800620a:	4a1c      	ldr	r2, [pc, #112]	; (800627c <_SendPacket+0x1c4>)
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	60d3      	str	r3, [r2, #12]
 8006210:	e00b      	b.n	800622a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8006212:	4b1a      	ldr	r3, [pc, #104]	; (800627c <_SendPacket+0x1c4>)
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	3301      	adds	r3, #1
 8006218:	b2da      	uxtb	r2, r3
 800621a:	4b18      	ldr	r3, [pc, #96]	; (800627c <_SendPacket+0x1c4>)
 800621c:	701a      	strb	r2, [r3, #0]
 800621e:	e004      	b.n	800622a <_SendPacket+0x172>
    goto SendDone;
 8006220:	bf00      	nop
 8006222:	e002      	b.n	800622a <_SendPacket+0x172>
      goto SendDone;
 8006224:	bf00      	nop
 8006226:	e000      	b.n	800622a <_SendPacket+0x172>
      goto SendDone;
 8006228:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800622a:	4b14      	ldr	r3, [pc, #80]	; (800627c <_SendPacket+0x1c4>)
 800622c:	7e1b      	ldrb	r3, [r3, #24]
 800622e:	4619      	mov	r1, r3
 8006230:	4a14      	ldr	r2, [pc, #80]	; (8006284 <_SendPacket+0x1cc>)
 8006232:	460b      	mov	r3, r1
 8006234:	005b      	lsls	r3, r3, #1
 8006236:	440b      	add	r3, r1
 8006238:	00db      	lsls	r3, r3, #3
 800623a:	4413      	add	r3, r2
 800623c:	336c      	adds	r3, #108	; 0x6c
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	4b0e      	ldr	r3, [pc, #56]	; (800627c <_SendPacket+0x1c4>)
 8006242:	7e1b      	ldrb	r3, [r3, #24]
 8006244:	4618      	mov	r0, r3
 8006246:	490f      	ldr	r1, [pc, #60]	; (8006284 <_SendPacket+0x1cc>)
 8006248:	4603      	mov	r3, r0
 800624a:	005b      	lsls	r3, r3, #1
 800624c:	4403      	add	r3, r0
 800624e:	00db      	lsls	r3, r3, #3
 8006250:	440b      	add	r3, r1
 8006252:	3370      	adds	r3, #112	; 0x70
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	429a      	cmp	r2, r3
 8006258:	d00b      	beq.n	8006272 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800625a:	4b08      	ldr	r3, [pc, #32]	; (800627c <_SendPacket+0x1c4>)
 800625c:	789b      	ldrb	r3, [r3, #2]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d107      	bne.n	8006272 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006262:	4b06      	ldr	r3, [pc, #24]	; (800627c <_SendPacket+0x1c4>)
 8006264:	2201      	movs	r2, #1
 8006266:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006268:	f7ff fe40 	bl	8005eec <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800626c:	4b03      	ldr	r3, [pc, #12]	; (800627c <_SendPacket+0x1c4>)
 800626e:	2200      	movs	r2, #0
 8006270:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8006272:	bf00      	nop
 8006274:	3728      	adds	r7, #40	; 0x28
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	20014268 	.word	0x20014268
 8006280:	e0001004 	.word	0xe0001004
 8006284:	20014414 	.word	0x20014414

08006288 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8006288:	b580      	push	{r7, lr}
 800628a:	b08a      	sub	sp, #40	; 0x28
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	460b      	mov	r3, r1
 8006292:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	3301      	adds	r3, #1
 800629e:	2b80      	cmp	r3, #128	; 0x80
 80062a0:	d80a      	bhi.n	80062b8 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	1c59      	adds	r1, r3, #1
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	6051      	str	r1, [r2, #4]
 80062ac:	78fa      	ldrb	r2, [r7, #3]
 80062ae:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	1c5a      	adds	r2, r3, #1
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	2b80      	cmp	r3, #128	; 0x80
 80062be:	d15a      	bne.n	8006376 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	691a      	ldr	r2, [r3, #16]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	b2d2      	uxtb	r2, r2
 80062ca:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	627b      	str	r3, [r7, #36]	; 0x24
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	623b      	str	r3, [r7, #32]
 80062e0:	e00b      	b.n	80062fa <_StoreChar+0x72>
 80062e2:	6a3b      	ldr	r3, [r7, #32]
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e8:	1c59      	adds	r1, r3, #1
 80062ea:	6279      	str	r1, [r7, #36]	; 0x24
 80062ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062f0:	b2d2      	uxtb	r2, r2
 80062f2:	701a      	strb	r2, [r3, #0]
 80062f4:	6a3b      	ldr	r3, [r7, #32]
 80062f6:	09db      	lsrs	r3, r3, #7
 80062f8:	623b      	str	r3, [r7, #32]
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	2b7f      	cmp	r3, #127	; 0x7f
 80062fe:	d8f0      	bhi.n	80062e2 <_StoreChar+0x5a>
 8006300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006302:	1c5a      	adds	r2, r3, #1
 8006304:	627a      	str	r2, [r7, #36]	; 0x24
 8006306:	6a3a      	ldr	r2, [r7, #32]
 8006308:	b2d2      	uxtb	r2, r2
 800630a:	701a      	strb	r2, [r3, #0]
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	61fb      	str	r3, [r7, #28]
 8006314:	2300      	movs	r3, #0
 8006316:	61bb      	str	r3, [r7, #24]
 8006318:	e00b      	b.n	8006332 <_StoreChar+0xaa>
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	b2da      	uxtb	r2, r3
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	1c59      	adds	r1, r3, #1
 8006322:	61f9      	str	r1, [r7, #28]
 8006324:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006328:	b2d2      	uxtb	r2, r2
 800632a:	701a      	strb	r2, [r3, #0]
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	09db      	lsrs	r3, r3, #7
 8006330:	61bb      	str	r3, [r7, #24]
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	2b7f      	cmp	r3, #127	; 0x7f
 8006336:	d8f0      	bhi.n	800631a <_StoreChar+0x92>
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	1c5a      	adds	r2, r3, #1
 800633c:	61fa      	str	r2, [r7, #28]
 800633e:	69ba      	ldr	r2, [r7, #24]
 8006340:	b2d2      	uxtb	r2, r2
 8006342:	701a      	strb	r2, [r3, #0]
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	221a      	movs	r2, #26
 800634e:	6939      	ldr	r1, [r7, #16]
 8006350:	4618      	mov	r0, r3
 8006352:	f7ff feb1 	bl	80060b8 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4618      	mov	r0, r3
 800635c:	f7ff fdb9 	bl	8005ed2 <_PreparePacket>
 8006360:	4602      	mov	r2, r0
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	1c5a      	adds	r2, r3, #1
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	611a      	str	r2, [r3, #16]
  }
}
 8006376:	bf00      	nop
 8006378:	3728      	adds	r7, #40	; 0x28
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
	...

08006380 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006380:	b580      	push	{r7, lr}
 8006382:	b08a      	sub	sp, #40	; 0x28
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]
 800638c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8006392:	2301      	movs	r3, #1
 8006394:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8006396:	2301      	movs	r3, #1
 8006398:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800639a:	e007      	b.n	80063ac <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800639c:	6a3a      	ldr	r2, [r7, #32]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063a4:	623b      	str	r3, [r7, #32]
    Width++;
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	3301      	adds	r3, #1
 80063aa:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80063ac:	6a3a      	ldr	r2, [r7, #32]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d2f3      	bcs.n	800639c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80063b4:	683a      	ldr	r2, [r7, #0]
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d901      	bls.n	80063c0 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80063c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c2:	f003 0301 	and.w	r3, r3, #1
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d11f      	bne.n	800640a <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80063ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d01c      	beq.n	800640a <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80063d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d005      	beq.n	80063e6 <_PrintUnsigned+0x66>
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d102      	bne.n	80063e6 <_PrintUnsigned+0x66>
        c = '0';
 80063e0:	2330      	movs	r3, #48	; 0x30
 80063e2:	76fb      	strb	r3, [r7, #27]
 80063e4:	e001      	b.n	80063ea <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80063e6:	2320      	movs	r3, #32
 80063e8:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80063ea:	e007      	b.n	80063fc <_PrintUnsigned+0x7c>
        FieldWidth--;
 80063ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ee:	3b01      	subs	r3, #1
 80063f0:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80063f2:	7efb      	ldrb	r3, [r7, #27]
 80063f4:	4619      	mov	r1, r3
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f7ff ff46 	bl	8006288 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80063fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d003      	beq.n	800640a <_PrintUnsigned+0x8a>
 8006402:	69fa      	ldr	r2, [r7, #28]
 8006404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006406:	429a      	cmp	r2, r3
 8006408:	d3f0      	bcc.n	80063ec <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d903      	bls.n	8006418 <_PrintUnsigned+0x98>
      NumDigits--;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	3b01      	subs	r3, #1
 8006414:	603b      	str	r3, [r7, #0]
 8006416:	e009      	b.n	800642c <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8006418:	68ba      	ldr	r2, [r7, #8]
 800641a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006420:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	429a      	cmp	r2, r3
 8006428:	d200      	bcs.n	800642c <_PrintUnsigned+0xac>
        break;
 800642a:	e005      	b.n	8006438 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 800642c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	fb02 f303 	mul.w	r3, r2, r3
 8006434:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006436:	e7e8      	b.n	800640a <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006440:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006446:	fb02 f303 	mul.w	r3, r2, r3
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8006450:	4a15      	ldr	r2, [pc, #84]	; (80064a8 <_PrintUnsigned+0x128>)
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	4413      	add	r3, r2
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	4619      	mov	r1, r3
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f7ff ff14 	bl	8006288 <_StoreChar>
    Digit /= Base;
 8006460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	fbb2 f3f3 	udiv	r3, r2, r3
 8006468:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 800646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1e3      	bne.n	8006438 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8006470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	d011      	beq.n	800649e <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 800647a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00e      	beq.n	800649e <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006480:	e006      	b.n	8006490 <_PrintUnsigned+0x110>
        FieldWidth--;
 8006482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006484:	3b01      	subs	r3, #1
 8006486:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8006488:	2120      	movs	r1, #32
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f7ff fefc 	bl	8006288 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006492:	2b00      	cmp	r3, #0
 8006494:	d003      	beq.n	800649e <_PrintUnsigned+0x11e>
 8006496:	69fa      	ldr	r2, [r7, #28]
 8006498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649a:	429a      	cmp	r2, r3
 800649c:	d3f1      	bcc.n	8006482 <_PrintUnsigned+0x102>
      }
    }
  }
}
 800649e:	bf00      	nop
 80064a0:	3728      	adds	r7, #40	; 0x28
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	08007e04 	.word	0x08007e04

080064ac <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b088      	sub	sp, #32
 80064b0:	af02      	add	r7, sp, #8
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
 80064b8:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	bfb8      	it	lt
 80064c0:	425b      	neglt	r3, r3
 80064c2:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80064c4:	2301      	movs	r3, #1
 80064c6:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80064c8:	e007      	b.n	80064da <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80064d2:	613b      	str	r3, [r7, #16]
    Width++;
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	3301      	adds	r3, #1
 80064d8:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	429a      	cmp	r2, r3
 80064e0:	daf3      	bge.n	80064ca <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80064e2:	683a      	ldr	r2, [r7, #0]
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d901      	bls.n	80064ee <_PrintInt+0x42>
    Width = NumDigits;
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80064ee:	6a3b      	ldr	r3, [r7, #32]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00a      	beq.n	800650a <_PrintInt+0x5e>
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	db04      	blt.n	8006504 <_PrintInt+0x58>
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fc:	f003 0304 	and.w	r3, r3, #4
 8006500:	2b00      	cmp	r3, #0
 8006502:	d002      	beq.n	800650a <_PrintInt+0x5e>
    FieldWidth--;
 8006504:	6a3b      	ldr	r3, [r7, #32]
 8006506:	3b01      	subs	r3, #1
 8006508:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650c:	f003 0302 	and.w	r3, r3, #2
 8006510:	2b00      	cmp	r3, #0
 8006512:	d002      	beq.n	800651a <_PrintInt+0x6e>
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d016      	beq.n	8006548 <_PrintInt+0x9c>
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	f003 0301 	and.w	r3, r3, #1
 8006520:	2b00      	cmp	r3, #0
 8006522:	d111      	bne.n	8006548 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8006524:	6a3b      	ldr	r3, [r7, #32]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00e      	beq.n	8006548 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800652a:	e006      	b.n	800653a <_PrintInt+0x8e>
        FieldWidth--;
 800652c:	6a3b      	ldr	r3, [r7, #32]
 800652e:	3b01      	subs	r3, #1
 8006530:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8006532:	2120      	movs	r1, #32
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f7ff fea7 	bl	8006288 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800653a:	6a3b      	ldr	r3, [r7, #32]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d003      	beq.n	8006548 <_PrintInt+0x9c>
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	429a      	cmp	r2, r3
 8006546:	d3f1      	bcc.n	800652c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	2b00      	cmp	r3, #0
 800654c:	da07      	bge.n	800655e <_PrintInt+0xb2>
    v = -v;
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	425b      	negs	r3, r3
 8006552:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8006554:	212d      	movs	r1, #45	; 0x2d
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f7ff fe96 	bl	8006288 <_StoreChar>
 800655c:	e008      	b.n	8006570 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800655e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006560:	f003 0304 	and.w	r3, r3, #4
 8006564:	2b00      	cmp	r3, #0
 8006566:	d003      	beq.n	8006570 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8006568:	212b      	movs	r1, #43	; 0x2b
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f7ff fe8c 	bl	8006288 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	f003 0302 	and.w	r3, r3, #2
 8006576:	2b00      	cmp	r3, #0
 8006578:	d019      	beq.n	80065ae <_PrintInt+0x102>
 800657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657c:	f003 0301 	and.w	r3, r3, #1
 8006580:	2b00      	cmp	r3, #0
 8006582:	d114      	bne.n	80065ae <_PrintInt+0x102>
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d111      	bne.n	80065ae <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800658a:	6a3b      	ldr	r3, [r7, #32]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00e      	beq.n	80065ae <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006590:	e006      	b.n	80065a0 <_PrintInt+0xf4>
        FieldWidth--;
 8006592:	6a3b      	ldr	r3, [r7, #32]
 8006594:	3b01      	subs	r3, #1
 8006596:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8006598:	2130      	movs	r1, #48	; 0x30
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f7ff fe74 	bl	8006288 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80065a0:	6a3b      	ldr	r3, [r7, #32]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d003      	beq.n	80065ae <_PrintInt+0x102>
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	6a3b      	ldr	r3, [r7, #32]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d3f1      	bcc.n	8006592 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80065ae:	68b9      	ldr	r1, [r7, #8]
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	9301      	str	r3, [sp, #4]
 80065b4:	6a3b      	ldr	r3, [r7, #32]
 80065b6:	9300      	str	r3, [sp, #0]
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f7ff fedf 	bl	8006380 <_PrintUnsigned>
}
 80065c2:	bf00      	nop
 80065c4:	3718      	adds	r7, #24
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
	...

080065cc <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b098      	sub	sp, #96	; 0x60
 80065d0:	af02      	add	r7, sp, #8
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80065d8:	f3ef 8311 	mrs	r3, BASEPRI
 80065dc:	f04f 0120 	mov.w	r1, #32
 80065e0:	f381 8811 	msr	BASEPRI, r1
 80065e4:	633b      	str	r3, [r7, #48]	; 0x30
 80065e6:	48b7      	ldr	r0, [pc, #732]	; (80068c4 <_VPrintTarget+0x2f8>)
 80065e8:	f7ff fc73 	bl	8005ed2 <_PreparePacket>
 80065ec:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80065ee:	4bb5      	ldr	r3, [pc, #724]	; (80068c4 <_VPrintTarget+0x2f8>)
 80065f0:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 80065f2:	2300      	movs	r3, #0
 80065f4:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 80065f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f8:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	3301      	adds	r3, #1
 80065fe:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	3301      	adds	r3, #1
 8006610:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8006612:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006616:	2b00      	cmp	r3, #0
 8006618:	f000 8183 	beq.w	8006922 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 800661c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006620:	2b25      	cmp	r3, #37	; 0x25
 8006622:	f040 8170 	bne.w	8006906 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8006626:	2300      	movs	r3, #0
 8006628:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800662a:	2301      	movs	r3, #1
 800662c:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8006636:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800663a:	3b23      	subs	r3, #35	; 0x23
 800663c:	2b0d      	cmp	r3, #13
 800663e:	d83f      	bhi.n	80066c0 <_VPrintTarget+0xf4>
 8006640:	a201      	add	r2, pc, #4	; (adr r2, 8006648 <_VPrintTarget+0x7c>)
 8006642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006646:	bf00      	nop
 8006648:	080066b1 	.word	0x080066b1
 800664c:	080066c1 	.word	0x080066c1
 8006650:	080066c1 	.word	0x080066c1
 8006654:	080066c1 	.word	0x080066c1
 8006658:	080066c1 	.word	0x080066c1
 800665c:	080066c1 	.word	0x080066c1
 8006660:	080066c1 	.word	0x080066c1
 8006664:	080066c1 	.word	0x080066c1
 8006668:	080066a1 	.word	0x080066a1
 800666c:	080066c1 	.word	0x080066c1
 8006670:	08006681 	.word	0x08006681
 8006674:	080066c1 	.word	0x080066c1
 8006678:	080066c1 	.word	0x080066c1
 800667c:	08006691 	.word	0x08006691
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006680:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006682:	f043 0301 	orr.w	r3, r3, #1
 8006686:	64bb      	str	r3, [r7, #72]	; 0x48
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	3301      	adds	r3, #1
 800668c:	60fb      	str	r3, [r7, #12]
 800668e:	e01a      	b.n	80066c6 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006692:	f043 0302 	orr.w	r3, r3, #2
 8006696:	64bb      	str	r3, [r7, #72]	; 0x48
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	3301      	adds	r3, #1
 800669c:	60fb      	str	r3, [r7, #12]
 800669e:	e012      	b.n	80066c6 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80066a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066a2:	f043 0304 	orr.w	r3, r3, #4
 80066a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	3301      	adds	r3, #1
 80066ac:	60fb      	str	r3, [r7, #12]
 80066ae:	e00a      	b.n	80066c6 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80066b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066b2:	f043 0308 	orr.w	r3, r3, #8
 80066b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	3301      	adds	r3, #1
 80066bc:	60fb      	str	r3, [r7, #12]
 80066be:	e002      	b.n	80066c6 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80066c0:	2300      	movs	r3, #0
 80066c2:	653b      	str	r3, [r7, #80]	; 0x50
 80066c4:	bf00      	nop
        }
      } while (v);
 80066c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1b0      	bne.n	800662e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80066cc:	2300      	movs	r3, #0
 80066ce:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80066d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066dc:	2b2f      	cmp	r3, #47	; 0x2f
 80066de:	d912      	bls.n	8006706 <_VPrintTarget+0x13a>
 80066e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066e4:	2b39      	cmp	r3, #57	; 0x39
 80066e6:	d80e      	bhi.n	8006706 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	3301      	adds	r3, #1
 80066ec:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80066ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066f0:	4613      	mov	r3, r2
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	4413      	add	r3, r2
 80066f6:	005b      	lsls	r3, r3, #1
 80066f8:	461a      	mov	r2, r3
 80066fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066fe:	4413      	add	r3, r2
 8006700:	3b30      	subs	r3, #48	; 0x30
 8006702:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8006704:	e7e4      	b.n	80066d0 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8006706:	2300      	movs	r3, #0
 8006708:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8006712:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006716:	2b2e      	cmp	r3, #46	; 0x2e
 8006718:	d11d      	bne.n	8006756 <_VPrintTarget+0x18a>
        sFormat++;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	3301      	adds	r3, #1
 800671e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8006728:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800672c:	2b2f      	cmp	r3, #47	; 0x2f
 800672e:	d912      	bls.n	8006756 <_VPrintTarget+0x18a>
 8006730:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006734:	2b39      	cmp	r3, #57	; 0x39
 8006736:	d80e      	bhi.n	8006756 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	3301      	adds	r3, #1
 800673c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800673e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006740:	4613      	mov	r3, r2
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4413      	add	r3, r2
 8006746:	005b      	lsls	r3, r3, #1
 8006748:	461a      	mov	r2, r3
 800674a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800674e:	4413      	add	r3, r2
 8006750:	3b30      	subs	r3, #48	; 0x30
 8006752:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8006754:	e7e4      	b.n	8006720 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800675e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006762:	2b6c      	cmp	r3, #108	; 0x6c
 8006764:	d003      	beq.n	800676e <_VPrintTarget+0x1a2>
 8006766:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800676a:	2b68      	cmp	r3, #104	; 0x68
 800676c:	d107      	bne.n	800677e <_VPrintTarget+0x1b2>
          c = *sFormat;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	3301      	adds	r3, #1
 800677a:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 800677c:	e7ef      	b.n	800675e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800677e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006782:	2b25      	cmp	r3, #37	; 0x25
 8006784:	f000 80b3 	beq.w	80068ee <_VPrintTarget+0x322>
 8006788:	2b25      	cmp	r3, #37	; 0x25
 800678a:	f2c0 80b7 	blt.w	80068fc <_VPrintTarget+0x330>
 800678e:	2b78      	cmp	r3, #120	; 0x78
 8006790:	f300 80b4 	bgt.w	80068fc <_VPrintTarget+0x330>
 8006794:	2b58      	cmp	r3, #88	; 0x58
 8006796:	f2c0 80b1 	blt.w	80068fc <_VPrintTarget+0x330>
 800679a:	3b58      	subs	r3, #88	; 0x58
 800679c:	2b20      	cmp	r3, #32
 800679e:	f200 80ad 	bhi.w	80068fc <_VPrintTarget+0x330>
 80067a2:	a201      	add	r2, pc, #4	; (adr r2, 80067a8 <_VPrintTarget+0x1dc>)
 80067a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a8:	0800689f 	.word	0x0800689f
 80067ac:	080068fd 	.word	0x080068fd
 80067b0:	080068fd 	.word	0x080068fd
 80067b4:	080068fd 	.word	0x080068fd
 80067b8:	080068fd 	.word	0x080068fd
 80067bc:	080068fd 	.word	0x080068fd
 80067c0:	080068fd 	.word	0x080068fd
 80067c4:	080068fd 	.word	0x080068fd
 80067c8:	080068fd 	.word	0x080068fd
 80067cc:	080068fd 	.word	0x080068fd
 80067d0:	080068fd 	.word	0x080068fd
 80067d4:	0800682d 	.word	0x0800682d
 80067d8:	08006853 	.word	0x08006853
 80067dc:	080068fd 	.word	0x080068fd
 80067e0:	080068fd 	.word	0x080068fd
 80067e4:	080068fd 	.word	0x080068fd
 80067e8:	080068fd 	.word	0x080068fd
 80067ec:	080068fd 	.word	0x080068fd
 80067f0:	080068fd 	.word	0x080068fd
 80067f4:	080068fd 	.word	0x080068fd
 80067f8:	080068fd 	.word	0x080068fd
 80067fc:	080068fd 	.word	0x080068fd
 8006800:	080068fd 	.word	0x080068fd
 8006804:	080068fd 	.word	0x080068fd
 8006808:	080068c9 	.word	0x080068c9
 800680c:	080068fd 	.word	0x080068fd
 8006810:	080068fd 	.word	0x080068fd
 8006814:	080068fd 	.word	0x080068fd
 8006818:	080068fd 	.word	0x080068fd
 800681c:	08006879 	.word	0x08006879
 8006820:	080068fd 	.word	0x080068fd
 8006824:	080068fd 	.word	0x080068fd
 8006828:	0800689f 	.word	0x0800689f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	1d19      	adds	r1, r3, #4
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	6011      	str	r1, [r2, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 800683a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800683c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8006840:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006844:	f107 0314 	add.w	r3, r7, #20
 8006848:	4611      	mov	r1, r2
 800684a:	4618      	mov	r0, r3
 800684c:	f7ff fd1c 	bl	8006288 <_StoreChar>
        break;
 8006850:	e055      	b.n	80068fe <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	1d19      	adds	r1, r3, #4
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	6011      	str	r1, [r2, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006860:	f107 0014 	add.w	r0, r7, #20
 8006864:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006866:	9301      	str	r3, [sp, #4]
 8006868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800686a:	9300      	str	r3, [sp, #0]
 800686c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800686e:	220a      	movs	r2, #10
 8006870:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006872:	f7ff fe1b 	bl	80064ac <_PrintInt>
        break;
 8006876:	e042      	b.n	80068fe <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	1d19      	adds	r1, r3, #4
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	6011      	str	r1, [r2, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006886:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006888:	f107 0014 	add.w	r0, r7, #20
 800688c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800688e:	9301      	str	r3, [sp, #4]
 8006890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006892:	9300      	str	r3, [sp, #0]
 8006894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006896:	220a      	movs	r2, #10
 8006898:	f7ff fd72 	bl	8006380 <_PrintUnsigned>
        break;
 800689c:	e02f      	b.n	80068fe <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	1d19      	adds	r1, r3, #4
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	6011      	str	r1, [r2, #0]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80068ac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80068ae:	f107 0014 	add.w	r0, r7, #20
 80068b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068b4:	9301      	str	r3, [sp, #4]
 80068b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068b8:	9300      	str	r3, [sp, #0]
 80068ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068bc:	2210      	movs	r2, #16
 80068be:	f7ff fd5f 	bl	8006380 <_PrintUnsigned>
        break;
 80068c2:	e01c      	b.n	80068fe <_VPrintTarget+0x332>
 80068c4:	20014298 	.word	0x20014298
      case 'p':
        v = va_arg(*pParamList, int);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	1d19      	adds	r1, r3, #4
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	6011      	str	r1, [r2, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80068d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80068d8:	f107 0014 	add.w	r0, r7, #20
 80068dc:	2300      	movs	r3, #0
 80068de:	9301      	str	r3, [sp, #4]
 80068e0:	2308      	movs	r3, #8
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	2308      	movs	r3, #8
 80068e6:	2210      	movs	r2, #16
 80068e8:	f7ff fd4a 	bl	8006380 <_PrintUnsigned>
        break;
 80068ec:	e007      	b.n	80068fe <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80068ee:	f107 0314 	add.w	r3, r7, #20
 80068f2:	2125      	movs	r1, #37	; 0x25
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7ff fcc7 	bl	8006288 <_StoreChar>
        break;
 80068fa:	e000      	b.n	80068fe <_VPrintTarget+0x332>
      default:
        break;
 80068fc:	bf00      	nop
      }
      sFormat++;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	3301      	adds	r3, #1
 8006902:	60fb      	str	r3, [r7, #12]
 8006904:	e007      	b.n	8006916 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8006906:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800690a:	f107 0314 	add.w	r3, r7, #20
 800690e:	4611      	mov	r1, r2
 8006910:	4618      	mov	r0, r3
 8006912:	f7ff fcb9 	bl	8006288 <_StoreChar>
    }
  } while (*sFormat);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	f47f ae72 	bne.w	8006604 <_VPrintTarget+0x38>
 8006920:	e000      	b.n	8006924 <_VPrintTarget+0x358>
      break;
 8006922:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006926:	2b00      	cmp	r3, #0
 8006928:	d041      	beq.n	80069ae <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 800692a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	b2d2      	uxtb	r2, r2
 8006930:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	643b      	str	r3, [r7, #64]	; 0x40
 8006936:	6a3b      	ldr	r3, [r7, #32]
 8006938:	63fb      	str	r3, [r7, #60]	; 0x3c
 800693a:	e00b      	b.n	8006954 <_VPrintTarget+0x388>
 800693c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800693e:	b2da      	uxtb	r2, r3
 8006940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006942:	1c59      	adds	r1, r3, #1
 8006944:	6439      	str	r1, [r7, #64]	; 0x40
 8006946:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800694a:	b2d2      	uxtb	r2, r2
 800694c:	701a      	strb	r2, [r3, #0]
 800694e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006950:	09db      	lsrs	r3, r3, #7
 8006952:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006956:	2b7f      	cmp	r3, #127	; 0x7f
 8006958:	d8f0      	bhi.n	800693c <_VPrintTarget+0x370>
 800695a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800695c:	1c5a      	adds	r2, r3, #1
 800695e:	643a      	str	r2, [r7, #64]	; 0x40
 8006960:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006962:	b2d2      	uxtb	r2, r2
 8006964:	701a      	strb	r2, [r3, #0]
 8006966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006968:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	63bb      	str	r3, [r7, #56]	; 0x38
 800696e:	2300      	movs	r3, #0
 8006970:	637b      	str	r3, [r7, #52]	; 0x34
 8006972:	e00b      	b.n	800698c <_VPrintTarget+0x3c0>
 8006974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006976:	b2da      	uxtb	r2, r3
 8006978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697a:	1c59      	adds	r1, r3, #1
 800697c:	63b9      	str	r1, [r7, #56]	; 0x38
 800697e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006982:	b2d2      	uxtb	r2, r2
 8006984:	701a      	strb	r2, [r3, #0]
 8006986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006988:	09db      	lsrs	r3, r3, #7
 800698a:	637b      	str	r3, [r7, #52]	; 0x34
 800698c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800698e:	2b7f      	cmp	r3, #127	; 0x7f
 8006990:	d8f0      	bhi.n	8006974 <_VPrintTarget+0x3a8>
 8006992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006994:	1c5a      	adds	r2, r3, #1
 8006996:	63ba      	str	r2, [r7, #56]	; 0x38
 8006998:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800699a:	b2d2      	uxtb	r2, r2
 800699c:	701a      	strb	r2, [r3, #0]
 800699e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a0:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	69b9      	ldr	r1, [r7, #24]
 80069a6:	221a      	movs	r2, #26
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7ff fb85 	bl	80060b8 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80069ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b0:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80069b4:	bf00      	nop
 80069b6:	3758      	adds	r7, #88	; 0x58
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af02      	add	r7, sp, #8
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
 80069c8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80069ca:	2300      	movs	r3, #0
 80069cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80069d0:	4917      	ldr	r1, [pc, #92]	; (8006a30 <SEGGER_SYSVIEW_Init+0x74>)
 80069d2:	4818      	ldr	r0, [pc, #96]	; (8006a34 <SEGGER_SYSVIEW_Init+0x78>)
 80069d4:	f7ff f93c 	bl	8005c50 <SEGGER_RTT_AllocUpBuffer>
 80069d8:	4603      	mov	r3, r0
 80069da:	b2da      	uxtb	r2, r3
 80069dc:	4b16      	ldr	r3, [pc, #88]	; (8006a38 <SEGGER_SYSVIEW_Init+0x7c>)
 80069de:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80069e0:	4b15      	ldr	r3, [pc, #84]	; (8006a38 <SEGGER_SYSVIEW_Init+0x7c>)
 80069e2:	785a      	ldrb	r2, [r3, #1]
 80069e4:	4b14      	ldr	r3, [pc, #80]	; (8006a38 <SEGGER_SYSVIEW_Init+0x7c>)
 80069e6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80069e8:	4b13      	ldr	r3, [pc, #76]	; (8006a38 <SEGGER_SYSVIEW_Init+0x7c>)
 80069ea:	7e1b      	ldrb	r3, [r3, #24]
 80069ec:	4618      	mov	r0, r3
 80069ee:	2300      	movs	r3, #0
 80069f0:	9300      	str	r3, [sp, #0]
 80069f2:	2308      	movs	r3, #8
 80069f4:	4a11      	ldr	r2, [pc, #68]	; (8006a3c <SEGGER_SYSVIEW_Init+0x80>)
 80069f6:	490f      	ldr	r1, [pc, #60]	; (8006a34 <SEGGER_SYSVIEW_Init+0x78>)
 80069f8:	f7ff f9ae 	bl	8005d58 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80069fc:	4b0e      	ldr	r3, [pc, #56]	; (8006a38 <SEGGER_SYSVIEW_Init+0x7c>)
 80069fe:	2200      	movs	r2, #0
 8006a00:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006a02:	4b0f      	ldr	r3, [pc, #60]	; (8006a40 <SEGGER_SYSVIEW_Init+0x84>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a0c      	ldr	r2, [pc, #48]	; (8006a38 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a08:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006a0a:	4a0b      	ldr	r2, [pc, #44]	; (8006a38 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006a10:	4a09      	ldr	r2, [pc, #36]	; (8006a38 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006a16:	4a08      	ldr	r2, [pc, #32]	; (8006a38 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006a1c:	4a06      	ldr	r2, [pc, #24]	; (8006a38 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006a22:	4b05      	ldr	r3, [pc, #20]	; (8006a38 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a24:	2200      	movs	r2, #0
 8006a26:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006a28:	bf00      	nop
 8006a2a:	3710      	adds	r7, #16
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	20013260 	.word	0x20013260
 8006a34:	08007d80 	.word	0x08007d80
 8006a38:	20014268 	.word	0x20014268
 8006a3c:	20014260 	.word	0x20014260
 8006a40:	e0001004 	.word	0xe0001004

08006a44 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006a4c:	4a04      	ldr	r2, [pc, #16]	; (8006a60 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6113      	str	r3, [r2, #16]
}
 8006a52:	bf00      	nop
 8006a54:	370c      	adds	r7, #12
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	20014268 	.word	0x20014268

08006a64 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006a6c:	f3ef 8311 	mrs	r3, BASEPRI
 8006a70:	f04f 0120 	mov.w	r1, #32
 8006a74:	f381 8811 	msr	BASEPRI, r1
 8006a78:	60fb      	str	r3, [r7, #12]
 8006a7a:	4808      	ldr	r0, [pc, #32]	; (8006a9c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006a7c:	f7ff fa29 	bl	8005ed2 <_PreparePacket>
 8006a80:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	68b9      	ldr	r1, [r7, #8]
 8006a86:	68b8      	ldr	r0, [r7, #8]
 8006a88:	f7ff fb16 	bl	80060b8 <_SendPacket>
  RECORD_END();
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f383 8811 	msr	BASEPRI, r3
}
 8006a92:	bf00      	nop
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	20014298 	.word	0x20014298

08006aa0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b088      	sub	sp, #32
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006aaa:	f3ef 8311 	mrs	r3, BASEPRI
 8006aae:	f04f 0120 	mov.w	r1, #32
 8006ab2:	f381 8811 	msr	BASEPRI, r1
 8006ab6:	617b      	str	r3, [r7, #20]
 8006ab8:	4816      	ldr	r0, [pc, #88]	; (8006b14 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006aba:	f7ff fa0a 	bl	8005ed2 <_PreparePacket>
 8006abe:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	61fb      	str	r3, [r7, #28]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	61bb      	str	r3, [r7, #24]
 8006acc:	e00b      	b.n	8006ae6 <SEGGER_SYSVIEW_RecordU32+0x46>
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	1c59      	adds	r1, r3, #1
 8006ad6:	61f9      	str	r1, [r7, #28]
 8006ad8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006adc:	b2d2      	uxtb	r2, r2
 8006ade:	701a      	strb	r2, [r3, #0]
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	09db      	lsrs	r3, r3, #7
 8006ae4:	61bb      	str	r3, [r7, #24]
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	2b7f      	cmp	r3, #127	; 0x7f
 8006aea:	d8f0      	bhi.n	8006ace <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	1c5a      	adds	r2, r3, #1
 8006af0:	61fa      	str	r2, [r7, #28]
 8006af2:	69ba      	ldr	r2, [r7, #24]
 8006af4:	b2d2      	uxtb	r2, r2
 8006af6:	701a      	strb	r2, [r3, #0]
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	68f9      	ldr	r1, [r7, #12]
 8006b00:	6938      	ldr	r0, [r7, #16]
 8006b02:	f7ff fad9 	bl	80060b8 <_SendPacket>
  RECORD_END();
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	f383 8811 	msr	BASEPRI, r3
}
 8006b0c:	bf00      	nop
 8006b0e:	3720      	adds	r7, #32
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	20014298 	.word	0x20014298

08006b18 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b08c      	sub	sp, #48	; 0x30
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b24:	f3ef 8311 	mrs	r3, BASEPRI
 8006b28:	f04f 0120 	mov.w	r1, #32
 8006b2c:	f381 8811 	msr	BASEPRI, r1
 8006b30:	61fb      	str	r3, [r7, #28]
 8006b32:	4825      	ldr	r0, [pc, #148]	; (8006bc8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006b34:	f7ff f9cd 	bl	8005ed2 <_PreparePacket>
 8006b38:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b46:	e00b      	b.n	8006b60 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4a:	b2da      	uxtb	r2, r3
 8006b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4e:	1c59      	adds	r1, r3, #1
 8006b50:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006b52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b56:	b2d2      	uxtb	r2, r2
 8006b58:	701a      	strb	r2, [r3, #0]
 8006b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5c:	09db      	lsrs	r3, r3, #7
 8006b5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b62:	2b7f      	cmp	r3, #127	; 0x7f
 8006b64:	d8f0      	bhi.n	8006b48 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b68:	1c5a      	adds	r2, r3, #1
 8006b6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b6e:	b2d2      	uxtb	r2, r2
 8006b70:	701a      	strb	r2, [r3, #0]
 8006b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b74:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	627b      	str	r3, [r7, #36]	; 0x24
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	623b      	str	r3, [r7, #32]
 8006b7e:	e00b      	b.n	8006b98 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006b80:	6a3b      	ldr	r3, [r7, #32]
 8006b82:	b2da      	uxtb	r2, r3
 8006b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b86:	1c59      	adds	r1, r3, #1
 8006b88:	6279      	str	r1, [r7, #36]	; 0x24
 8006b8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b8e:	b2d2      	uxtb	r2, r2
 8006b90:	701a      	strb	r2, [r3, #0]
 8006b92:	6a3b      	ldr	r3, [r7, #32]
 8006b94:	09db      	lsrs	r3, r3, #7
 8006b96:	623b      	str	r3, [r7, #32]
 8006b98:	6a3b      	ldr	r3, [r7, #32]
 8006b9a:	2b7f      	cmp	r3, #127	; 0x7f
 8006b9c:	d8f0      	bhi.n	8006b80 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba0:	1c5a      	adds	r2, r3, #1
 8006ba2:	627a      	str	r2, [r7, #36]	; 0x24
 8006ba4:	6a3a      	ldr	r2, [r7, #32]
 8006ba6:	b2d2      	uxtb	r2, r2
 8006ba8:	701a      	strb	r2, [r3, #0]
 8006baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bac:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	6979      	ldr	r1, [r7, #20]
 8006bb2:	69b8      	ldr	r0, [r7, #24]
 8006bb4:	f7ff fa80 	bl	80060b8 <_SendPacket>
  RECORD_END();
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	f383 8811 	msr	BASEPRI, r3
}
 8006bbe:	bf00      	nop
 8006bc0:	3730      	adds	r7, #48	; 0x30
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	20014298 	.word	0x20014298

08006bcc <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b08e      	sub	sp, #56	; 0x38
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
 8006bd8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006bda:	f3ef 8311 	mrs	r3, BASEPRI
 8006bde:	f04f 0120 	mov.w	r1, #32
 8006be2:	f381 8811 	msr	BASEPRI, r1
 8006be6:	61fb      	str	r3, [r7, #28]
 8006be8:	4832      	ldr	r0, [pc, #200]	; (8006cb4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006bea:	f7ff f972 	bl	8005ed2 <_PreparePacket>
 8006bee:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	633b      	str	r3, [r7, #48]	; 0x30
 8006bfc:	e00b      	b.n	8006c16 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c00:	b2da      	uxtb	r2, r3
 8006c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c04:	1c59      	adds	r1, r3, #1
 8006c06:	6379      	str	r1, [r7, #52]	; 0x34
 8006c08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c0c:	b2d2      	uxtb	r2, r2
 8006c0e:	701a      	strb	r2, [r3, #0]
 8006c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c12:	09db      	lsrs	r3, r3, #7
 8006c14:	633b      	str	r3, [r7, #48]	; 0x30
 8006c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c18:	2b7f      	cmp	r3, #127	; 0x7f
 8006c1a:	d8f0      	bhi.n	8006bfe <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c1e:	1c5a      	adds	r2, r3, #1
 8006c20:	637a      	str	r2, [r7, #52]	; 0x34
 8006c22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c24:	b2d2      	uxtb	r2, r2
 8006c26:	701a      	strb	r2, [r3, #0]
 8006c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c2a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c34:	e00b      	b.n	8006c4e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c38:	b2da      	uxtb	r2, r3
 8006c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3c:	1c59      	adds	r1, r3, #1
 8006c3e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006c40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c44:	b2d2      	uxtb	r2, r2
 8006c46:	701a      	strb	r2, [r3, #0]
 8006c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4a:	09db      	lsrs	r3, r3, #7
 8006c4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c50:	2b7f      	cmp	r3, #127	; 0x7f
 8006c52:	d8f0      	bhi.n	8006c36 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c56:	1c5a      	adds	r2, r3, #1
 8006c58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c5c:	b2d2      	uxtb	r2, r2
 8006c5e:	701a      	strb	r2, [r3, #0]
 8006c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c62:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	627b      	str	r3, [r7, #36]	; 0x24
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	623b      	str	r3, [r7, #32]
 8006c6c:	e00b      	b.n	8006c86 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006c6e:	6a3b      	ldr	r3, [r7, #32]
 8006c70:	b2da      	uxtb	r2, r3
 8006c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c74:	1c59      	adds	r1, r3, #1
 8006c76:	6279      	str	r1, [r7, #36]	; 0x24
 8006c78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c7c:	b2d2      	uxtb	r2, r2
 8006c7e:	701a      	strb	r2, [r3, #0]
 8006c80:	6a3b      	ldr	r3, [r7, #32]
 8006c82:	09db      	lsrs	r3, r3, #7
 8006c84:	623b      	str	r3, [r7, #32]
 8006c86:	6a3b      	ldr	r3, [r7, #32]
 8006c88:	2b7f      	cmp	r3, #127	; 0x7f
 8006c8a:	d8f0      	bhi.n	8006c6e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8e:	1c5a      	adds	r2, r3, #1
 8006c90:	627a      	str	r2, [r7, #36]	; 0x24
 8006c92:	6a3a      	ldr	r2, [r7, #32]
 8006c94:	b2d2      	uxtb	r2, r2
 8006c96:	701a      	strb	r2, [r3, #0]
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	6979      	ldr	r1, [r7, #20]
 8006ca0:	69b8      	ldr	r0, [r7, #24]
 8006ca2:	f7ff fa09 	bl	80060b8 <_SendPacket>
  RECORD_END();
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	f383 8811 	msr	BASEPRI, r3
}
 8006cac:	bf00      	nop
 8006cae:	3738      	adds	r7, #56	; 0x38
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	20014298 	.word	0x20014298

08006cb8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b090      	sub	sp, #64	; 0x40
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
 8006cc4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006cc6:	f3ef 8311 	mrs	r3, BASEPRI
 8006cca:	f04f 0120 	mov.w	r1, #32
 8006cce:	f381 8811 	msr	BASEPRI, r1
 8006cd2:	61fb      	str	r3, [r7, #28]
 8006cd4:	4840      	ldr	r0, [pc, #256]	; (8006dd8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006cd6:	f7ff f8fc 	bl	8005ed2 <_PreparePacket>
 8006cda:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ce8:	e00b      	b.n	8006d02 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cec:	b2da      	uxtb	r2, r3
 8006cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf0:	1c59      	adds	r1, r3, #1
 8006cf2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006cf4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cf8:	b2d2      	uxtb	r2, r2
 8006cfa:	701a      	strb	r2, [r3, #0]
 8006cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cfe:	09db      	lsrs	r3, r3, #7
 8006d00:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d04:	2b7f      	cmp	r3, #127	; 0x7f
 8006d06:	d8f0      	bhi.n	8006cea <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d0a:	1c5a      	adds	r2, r3, #1
 8006d0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006d0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d10:	b2d2      	uxtb	r2, r2
 8006d12:	701a      	strb	r2, [r3, #0]
 8006d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d16:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	637b      	str	r3, [r7, #52]	; 0x34
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	633b      	str	r3, [r7, #48]	; 0x30
 8006d20:	e00b      	b.n	8006d3a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d24:	b2da      	uxtb	r2, r3
 8006d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d28:	1c59      	adds	r1, r3, #1
 8006d2a:	6379      	str	r1, [r7, #52]	; 0x34
 8006d2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d30:	b2d2      	uxtb	r2, r2
 8006d32:	701a      	strb	r2, [r3, #0]
 8006d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d36:	09db      	lsrs	r3, r3, #7
 8006d38:	633b      	str	r3, [r7, #48]	; 0x30
 8006d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3c:	2b7f      	cmp	r3, #127	; 0x7f
 8006d3e:	d8f0      	bhi.n	8006d22 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d42:	1c5a      	adds	r2, r3, #1
 8006d44:	637a      	str	r2, [r7, #52]	; 0x34
 8006d46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d48:	b2d2      	uxtb	r2, r2
 8006d4a:	701a      	strb	r2, [r3, #0]
 8006d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d4e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d58:	e00b      	b.n	8006d72 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5c:	b2da      	uxtb	r2, r3
 8006d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d60:	1c59      	adds	r1, r3, #1
 8006d62:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006d64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d68:	b2d2      	uxtb	r2, r2
 8006d6a:	701a      	strb	r2, [r3, #0]
 8006d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6e:	09db      	lsrs	r3, r3, #7
 8006d70:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d74:	2b7f      	cmp	r3, #127	; 0x7f
 8006d76:	d8f0      	bhi.n	8006d5a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7a:	1c5a      	adds	r2, r3, #1
 8006d7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d80:	b2d2      	uxtb	r2, r2
 8006d82:	701a      	strb	r2, [r3, #0]
 8006d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d86:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8006d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d8e:	623b      	str	r3, [r7, #32]
 8006d90:	e00b      	b.n	8006daa <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006d92:	6a3b      	ldr	r3, [r7, #32]
 8006d94:	b2da      	uxtb	r2, r3
 8006d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d98:	1c59      	adds	r1, r3, #1
 8006d9a:	6279      	str	r1, [r7, #36]	; 0x24
 8006d9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006da0:	b2d2      	uxtb	r2, r2
 8006da2:	701a      	strb	r2, [r3, #0]
 8006da4:	6a3b      	ldr	r3, [r7, #32]
 8006da6:	09db      	lsrs	r3, r3, #7
 8006da8:	623b      	str	r3, [r7, #32]
 8006daa:	6a3b      	ldr	r3, [r7, #32]
 8006dac:	2b7f      	cmp	r3, #127	; 0x7f
 8006dae:	d8f0      	bhi.n	8006d92 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db2:	1c5a      	adds	r2, r3, #1
 8006db4:	627a      	str	r2, [r7, #36]	; 0x24
 8006db6:	6a3a      	ldr	r2, [r7, #32]
 8006db8:	b2d2      	uxtb	r2, r2
 8006dba:	701a      	strb	r2, [r3, #0]
 8006dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbe:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	6979      	ldr	r1, [r7, #20]
 8006dc4:	69b8      	ldr	r0, [r7, #24]
 8006dc6:	f7ff f977 	bl	80060b8 <_SendPacket>
  RECORD_END();
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	f383 8811 	msr	BASEPRI, r3
}
 8006dd0:	bf00      	nop
 8006dd2:	3740      	adds	r7, #64	; 0x40
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	20014298 	.word	0x20014298

08006ddc <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b092      	sub	sp, #72	; 0x48
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
 8006de8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 8006dea:	f3ef 8311 	mrs	r3, BASEPRI
 8006dee:	f04f 0120 	mov.w	r1, #32
 8006df2:	f381 8811 	msr	BASEPRI, r1
 8006df6:	61fb      	str	r3, [r7, #28]
 8006df8:	484e      	ldr	r0, [pc, #312]	; (8006f34 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 8006dfa:	f7ff f86a 	bl	8005ed2 <_PreparePacket>
 8006dfe:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	647b      	str	r3, [r7, #68]	; 0x44
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	643b      	str	r3, [r7, #64]	; 0x40
 8006e0c:	e00b      	b.n	8006e26 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 8006e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e10:	b2da      	uxtb	r2, r3
 8006e12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e14:	1c59      	adds	r1, r3, #1
 8006e16:	6479      	str	r1, [r7, #68]	; 0x44
 8006e18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e1c:	b2d2      	uxtb	r2, r2
 8006e1e:	701a      	strb	r2, [r3, #0]
 8006e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e22:	09db      	lsrs	r3, r3, #7
 8006e24:	643b      	str	r3, [r7, #64]	; 0x40
 8006e26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e28:	2b7f      	cmp	r3, #127	; 0x7f
 8006e2a:	d8f0      	bhi.n	8006e0e <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8006e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e2e:	1c5a      	adds	r2, r3, #1
 8006e30:	647a      	str	r2, [r7, #68]	; 0x44
 8006e32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e34:	b2d2      	uxtb	r2, r2
 8006e36:	701a      	strb	r2, [r3, #0]
 8006e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e3a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e44:	e00b      	b.n	8006e5e <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8006e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e48:	b2da      	uxtb	r2, r3
 8006e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e4c:	1c59      	adds	r1, r3, #1
 8006e4e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006e50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e54:	b2d2      	uxtb	r2, r2
 8006e56:	701a      	strb	r2, [r3, #0]
 8006e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5a:	09db      	lsrs	r3, r3, #7
 8006e5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e60:	2b7f      	cmp	r3, #127	; 0x7f
 8006e62:	d8f0      	bhi.n	8006e46 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8006e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e66:	1c5a      	adds	r2, r3, #1
 8006e68:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006e6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e6c:	b2d2      	uxtb	r2, r2
 8006e6e:	701a      	strb	r2, [r3, #0]
 8006e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e72:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	637b      	str	r3, [r7, #52]	; 0x34
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	633b      	str	r3, [r7, #48]	; 0x30
 8006e7c:	e00b      	b.n	8006e96 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e84:	1c59      	adds	r1, r3, #1
 8006e86:	6379      	str	r1, [r7, #52]	; 0x34
 8006e88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e8c:	b2d2      	uxtb	r2, r2
 8006e8e:	701a      	strb	r2, [r3, #0]
 8006e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e92:	09db      	lsrs	r3, r3, #7
 8006e94:	633b      	str	r3, [r7, #48]	; 0x30
 8006e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e98:	2b7f      	cmp	r3, #127	; 0x7f
 8006e9a:	d8f0      	bhi.n	8006e7e <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8006e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e9e:	1c5a      	adds	r2, r3, #1
 8006ea0:	637a      	str	r2, [r7, #52]	; 0x34
 8006ea2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ea4:	b2d2      	uxtb	r2, r2
 8006ea6:	701a      	strb	r2, [r3, #0]
 8006ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eaa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006eb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006eb4:	e00b      	b.n	8006ece <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 8006eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb8:	b2da      	uxtb	r2, r3
 8006eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ebc:	1c59      	adds	r1, r3, #1
 8006ebe:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006ec0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ec4:	b2d2      	uxtb	r2, r2
 8006ec6:	701a      	strb	r2, [r3, #0]
 8006ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eca:	09db      	lsrs	r3, r3, #7
 8006ecc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed0:	2b7f      	cmp	r3, #127	; 0x7f
 8006ed2:	d8f0      	bhi.n	8006eb6 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8006ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed6:	1c5a      	adds	r2, r3, #1
 8006ed8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006eda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006edc:	b2d2      	uxtb	r2, r2
 8006ede:	701a      	strb	r2, [r3, #0]
 8006ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ee8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006eea:	623b      	str	r3, [r7, #32]
 8006eec:	e00b      	b.n	8006f06 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 8006eee:	6a3b      	ldr	r3, [r7, #32]
 8006ef0:	b2da      	uxtb	r2, r3
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef4:	1c59      	adds	r1, r3, #1
 8006ef6:	6279      	str	r1, [r7, #36]	; 0x24
 8006ef8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006efc:	b2d2      	uxtb	r2, r2
 8006efe:	701a      	strb	r2, [r3, #0]
 8006f00:	6a3b      	ldr	r3, [r7, #32]
 8006f02:	09db      	lsrs	r3, r3, #7
 8006f04:	623b      	str	r3, [r7, #32]
 8006f06:	6a3b      	ldr	r3, [r7, #32]
 8006f08:	2b7f      	cmp	r3, #127	; 0x7f
 8006f0a:	d8f0      	bhi.n	8006eee <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0e:	1c5a      	adds	r2, r3, #1
 8006f10:	627a      	str	r2, [r7, #36]	; 0x24
 8006f12:	6a3a      	ldr	r2, [r7, #32]
 8006f14:	b2d2      	uxtb	r2, r2
 8006f16:	701a      	strb	r2, [r3, #0]
 8006f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	6979      	ldr	r1, [r7, #20]
 8006f20:	69b8      	ldr	r0, [r7, #24]
 8006f22:	f7ff f8c9 	bl	80060b8 <_SendPacket>
  RECORD_END();
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	f383 8811 	msr	BASEPRI, r3
}
 8006f2c:	bf00      	nop
 8006f2e:	3748      	adds	r7, #72	; 0x48
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	20014298 	.word	0x20014298

08006f38 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b08c      	sub	sp, #48	; 0x30
 8006f3c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006f3e:	4b59      	ldr	r3, [pc, #356]	; (80070a4 <SEGGER_SYSVIEW_Start+0x16c>)
 8006f40:	2201      	movs	r2, #1
 8006f42:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006f44:	f3ef 8311 	mrs	r3, BASEPRI
 8006f48:	f04f 0120 	mov.w	r1, #32
 8006f4c:	f381 8811 	msr	BASEPRI, r1
 8006f50:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006f52:	4b54      	ldr	r3, [pc, #336]	; (80070a4 <SEGGER_SYSVIEW_Start+0x16c>)
 8006f54:	785b      	ldrb	r3, [r3, #1]
 8006f56:	220a      	movs	r2, #10
 8006f58:	4953      	ldr	r1, [pc, #332]	; (80070a8 <SEGGER_SYSVIEW_Start+0x170>)
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7f9 f938 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006f66:	f7fe fb47 	bl	80055f8 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006f6a:	200a      	movs	r0, #10
 8006f6c:	f7ff fd7a 	bl	8006a64 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006f70:	f3ef 8311 	mrs	r3, BASEPRI
 8006f74:	f04f 0120 	mov.w	r1, #32
 8006f78:	f381 8811 	msr	BASEPRI, r1
 8006f7c:	60bb      	str	r3, [r7, #8]
 8006f7e:	484b      	ldr	r0, [pc, #300]	; (80070ac <SEGGER_SYSVIEW_Start+0x174>)
 8006f80:	f7fe ffa7 	bl	8005ed2 <_PreparePacket>
 8006f84:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f8e:	4b45      	ldr	r3, [pc, #276]	; (80070a4 <SEGGER_SYSVIEW_Start+0x16c>)
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f94:	e00b      	b.n	8006fae <SEGGER_SYSVIEW_Start+0x76>
 8006f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f98:	b2da      	uxtb	r2, r3
 8006f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9c:	1c59      	adds	r1, r3, #1
 8006f9e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006fa0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fa4:	b2d2      	uxtb	r2, r2
 8006fa6:	701a      	strb	r2, [r3, #0]
 8006fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006faa:	09db      	lsrs	r3, r3, #7
 8006fac:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb0:	2b7f      	cmp	r3, #127	; 0x7f
 8006fb2:	d8f0      	bhi.n	8006f96 <SEGGER_SYSVIEW_Start+0x5e>
 8006fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb6:	1c5a      	adds	r2, r3, #1
 8006fb8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fbc:	b2d2      	uxtb	r2, r2
 8006fbe:	701a      	strb	r2, [r3, #0]
 8006fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8006fc8:	4b36      	ldr	r3, [pc, #216]	; (80070a4 <SEGGER_SYSVIEW_Start+0x16c>)
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	623b      	str	r3, [r7, #32]
 8006fce:	e00b      	b.n	8006fe8 <SEGGER_SYSVIEW_Start+0xb0>
 8006fd0:	6a3b      	ldr	r3, [r7, #32]
 8006fd2:	b2da      	uxtb	r2, r3
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd6:	1c59      	adds	r1, r3, #1
 8006fd8:	6279      	str	r1, [r7, #36]	; 0x24
 8006fda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fde:	b2d2      	uxtb	r2, r2
 8006fe0:	701a      	strb	r2, [r3, #0]
 8006fe2:	6a3b      	ldr	r3, [r7, #32]
 8006fe4:	09db      	lsrs	r3, r3, #7
 8006fe6:	623b      	str	r3, [r7, #32]
 8006fe8:	6a3b      	ldr	r3, [r7, #32]
 8006fea:	2b7f      	cmp	r3, #127	; 0x7f
 8006fec:	d8f0      	bhi.n	8006fd0 <SEGGER_SYSVIEW_Start+0x98>
 8006fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff0:	1c5a      	adds	r2, r3, #1
 8006ff2:	627a      	str	r2, [r7, #36]	; 0x24
 8006ff4:	6a3a      	ldr	r2, [r7, #32]
 8006ff6:	b2d2      	uxtb	r2, r2
 8006ff8:	701a      	strb	r2, [r3, #0]
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	61fb      	str	r3, [r7, #28]
 8007002:	4b28      	ldr	r3, [pc, #160]	; (80070a4 <SEGGER_SYSVIEW_Start+0x16c>)
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	61bb      	str	r3, [r7, #24]
 8007008:	e00b      	b.n	8007022 <SEGGER_SYSVIEW_Start+0xea>
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	b2da      	uxtb	r2, r3
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	1c59      	adds	r1, r3, #1
 8007012:	61f9      	str	r1, [r7, #28]
 8007014:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007018:	b2d2      	uxtb	r2, r2
 800701a:	701a      	strb	r2, [r3, #0]
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	09db      	lsrs	r3, r3, #7
 8007020:	61bb      	str	r3, [r7, #24]
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	2b7f      	cmp	r3, #127	; 0x7f
 8007026:	d8f0      	bhi.n	800700a <SEGGER_SYSVIEW_Start+0xd2>
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	1c5a      	adds	r2, r3, #1
 800702c:	61fa      	str	r2, [r7, #28]
 800702e:	69ba      	ldr	r2, [r7, #24]
 8007030:	b2d2      	uxtb	r2, r2
 8007032:	701a      	strb	r2, [r3, #0]
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	617b      	str	r3, [r7, #20]
 800703c:	2300      	movs	r3, #0
 800703e:	613b      	str	r3, [r7, #16]
 8007040:	e00b      	b.n	800705a <SEGGER_SYSVIEW_Start+0x122>
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	b2da      	uxtb	r2, r3
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	1c59      	adds	r1, r3, #1
 800704a:	6179      	str	r1, [r7, #20]
 800704c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007050:	b2d2      	uxtb	r2, r2
 8007052:	701a      	strb	r2, [r3, #0]
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	09db      	lsrs	r3, r3, #7
 8007058:	613b      	str	r3, [r7, #16]
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	2b7f      	cmp	r3, #127	; 0x7f
 800705e:	d8f0      	bhi.n	8007042 <SEGGER_SYSVIEW_Start+0x10a>
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	1c5a      	adds	r2, r3, #1
 8007064:	617a      	str	r2, [r7, #20]
 8007066:	693a      	ldr	r2, [r7, #16]
 8007068:	b2d2      	uxtb	r2, r2
 800706a:	701a      	strb	r2, [r3, #0]
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007070:	2218      	movs	r2, #24
 8007072:	6839      	ldr	r1, [r7, #0]
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f7ff f81f 	bl	80060b8 <_SendPacket>
      RECORD_END();
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007080:	4b08      	ldr	r3, [pc, #32]	; (80070a4 <SEGGER_SYSVIEW_Start+0x16c>)
 8007082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007084:	2b00      	cmp	r3, #0
 8007086:	d002      	beq.n	800708e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8007088:	4b06      	ldr	r3, [pc, #24]	; (80070a4 <SEGGER_SYSVIEW_Start+0x16c>)
 800708a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800708e:	f000 f9eb 	bl	8007468 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8007092:	f000 f9b1 	bl	80073f8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8007096:	f000 fc83 	bl	80079a0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800709a:	bf00      	nop
 800709c:	3730      	adds	r7, #48	; 0x30
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	20014268 	.word	0x20014268
 80070a8:	08007df8 	.word	0x08007df8
 80070ac:	20014298 	.word	0x20014298

080070b0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80070b6:	f3ef 8311 	mrs	r3, BASEPRI
 80070ba:	f04f 0120 	mov.w	r1, #32
 80070be:	f381 8811 	msr	BASEPRI, r1
 80070c2:	607b      	str	r3, [r7, #4]
 80070c4:	480b      	ldr	r0, [pc, #44]	; (80070f4 <SEGGER_SYSVIEW_Stop+0x44>)
 80070c6:	f7fe ff04 	bl	8005ed2 <_PreparePacket>
 80070ca:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80070cc:	4b0a      	ldr	r3, [pc, #40]	; (80070f8 <SEGGER_SYSVIEW_Stop+0x48>)
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d007      	beq.n	80070e4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80070d4:	220b      	movs	r2, #11
 80070d6:	6839      	ldr	r1, [r7, #0]
 80070d8:	6838      	ldr	r0, [r7, #0]
 80070da:	f7fe ffed 	bl	80060b8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80070de:	4b06      	ldr	r3, [pc, #24]	; (80070f8 <SEGGER_SYSVIEW_Stop+0x48>)
 80070e0:	2200      	movs	r2, #0
 80070e2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f383 8811 	msr	BASEPRI, r3
}
 80070ea:	bf00      	nop
 80070ec:	3708      	adds	r7, #8
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	20014298 	.word	0x20014298
 80070f8:	20014268 	.word	0x20014268

080070fc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b08c      	sub	sp, #48	; 0x30
 8007100:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007102:	f3ef 8311 	mrs	r3, BASEPRI
 8007106:	f04f 0120 	mov.w	r1, #32
 800710a:	f381 8811 	msr	BASEPRI, r1
 800710e:	60fb      	str	r3, [r7, #12]
 8007110:	4845      	ldr	r0, [pc, #276]	; (8007228 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8007112:	f7fe fede 	bl	8005ed2 <_PreparePacket>
 8007116:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007120:	4b42      	ldr	r3, [pc, #264]	; (800722c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	62bb      	str	r3, [r7, #40]	; 0x28
 8007126:	e00b      	b.n	8007140 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8007128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712a:	b2da      	uxtb	r2, r3
 800712c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800712e:	1c59      	adds	r1, r3, #1
 8007130:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007132:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007136:	b2d2      	uxtb	r2, r2
 8007138:	701a      	strb	r2, [r3, #0]
 800713a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713c:	09db      	lsrs	r3, r3, #7
 800713e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007142:	2b7f      	cmp	r3, #127	; 0x7f
 8007144:	d8f0      	bhi.n	8007128 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8007146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007148:	1c5a      	adds	r2, r3, #1
 800714a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800714c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800714e:	b2d2      	uxtb	r2, r2
 8007150:	701a      	strb	r2, [r3, #0]
 8007152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007154:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	627b      	str	r3, [r7, #36]	; 0x24
 800715a:	4b34      	ldr	r3, [pc, #208]	; (800722c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	623b      	str	r3, [r7, #32]
 8007160:	e00b      	b.n	800717a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8007162:	6a3b      	ldr	r3, [r7, #32]
 8007164:	b2da      	uxtb	r2, r3
 8007166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007168:	1c59      	adds	r1, r3, #1
 800716a:	6279      	str	r1, [r7, #36]	; 0x24
 800716c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007170:	b2d2      	uxtb	r2, r2
 8007172:	701a      	strb	r2, [r3, #0]
 8007174:	6a3b      	ldr	r3, [r7, #32]
 8007176:	09db      	lsrs	r3, r3, #7
 8007178:	623b      	str	r3, [r7, #32]
 800717a:	6a3b      	ldr	r3, [r7, #32]
 800717c:	2b7f      	cmp	r3, #127	; 0x7f
 800717e:	d8f0      	bhi.n	8007162 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8007180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007182:	1c5a      	adds	r2, r3, #1
 8007184:	627a      	str	r2, [r7, #36]	; 0x24
 8007186:	6a3a      	ldr	r2, [r7, #32]
 8007188:	b2d2      	uxtb	r2, r2
 800718a:	701a      	strb	r2, [r3, #0]
 800718c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	61fb      	str	r3, [r7, #28]
 8007194:	4b25      	ldr	r3, [pc, #148]	; (800722c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	61bb      	str	r3, [r7, #24]
 800719a:	e00b      	b.n	80071b4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	b2da      	uxtb	r2, r3
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	1c59      	adds	r1, r3, #1
 80071a4:	61f9      	str	r1, [r7, #28]
 80071a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071aa:	b2d2      	uxtb	r2, r2
 80071ac:	701a      	strb	r2, [r3, #0]
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	09db      	lsrs	r3, r3, #7
 80071b2:	61bb      	str	r3, [r7, #24]
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	2b7f      	cmp	r3, #127	; 0x7f
 80071b8:	d8f0      	bhi.n	800719c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	1c5a      	adds	r2, r3, #1
 80071be:	61fa      	str	r2, [r7, #28]
 80071c0:	69ba      	ldr	r2, [r7, #24]
 80071c2:	b2d2      	uxtb	r2, r2
 80071c4:	701a      	strb	r2, [r3, #0]
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	617b      	str	r3, [r7, #20]
 80071ce:	2300      	movs	r3, #0
 80071d0:	613b      	str	r3, [r7, #16]
 80071d2:	e00b      	b.n	80071ec <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	b2da      	uxtb	r2, r3
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	1c59      	adds	r1, r3, #1
 80071dc:	6179      	str	r1, [r7, #20]
 80071de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071e2:	b2d2      	uxtb	r2, r2
 80071e4:	701a      	strb	r2, [r3, #0]
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	09db      	lsrs	r3, r3, #7
 80071ea:	613b      	str	r3, [r7, #16]
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	2b7f      	cmp	r3, #127	; 0x7f
 80071f0:	d8f0      	bhi.n	80071d4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	1c5a      	adds	r2, r3, #1
 80071f6:	617a      	str	r2, [r7, #20]
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	b2d2      	uxtb	r2, r2
 80071fc:	701a      	strb	r2, [r3, #0]
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007202:	2218      	movs	r2, #24
 8007204:	6879      	ldr	r1, [r7, #4]
 8007206:	68b8      	ldr	r0, [r7, #8]
 8007208:	f7fe ff56 	bl	80060b8 <_SendPacket>
  RECORD_END();
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007212:	4b06      	ldr	r3, [pc, #24]	; (800722c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007216:	2b00      	cmp	r3, #0
 8007218:	d002      	beq.n	8007220 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800721a:	4b04      	ldr	r3, [pc, #16]	; (800722c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800721c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721e:	4798      	blx	r3
  }
}
 8007220:	bf00      	nop
 8007222:	3730      	adds	r7, #48	; 0x30
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	20014298 	.word	0x20014298
 800722c:	20014268 	.word	0x20014268

08007230 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8007230:	b580      	push	{r7, lr}
 8007232:	b092      	sub	sp, #72	; 0x48
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8007238:	f3ef 8311 	mrs	r3, BASEPRI
 800723c:	f04f 0120 	mov.w	r1, #32
 8007240:	f381 8811 	msr	BASEPRI, r1
 8007244:	617b      	str	r3, [r7, #20]
 8007246:	486a      	ldr	r0, [pc, #424]	; (80073f0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8007248:	f7fe fe43 	bl	8005ed2 <_PreparePacket>
 800724c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	647b      	str	r3, [r7, #68]	; 0x44
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	4b66      	ldr	r3, [pc, #408]	; (80073f4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	643b      	str	r3, [r7, #64]	; 0x40
 8007262:	e00b      	b.n	800727c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8007264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007266:	b2da      	uxtb	r2, r3
 8007268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800726a:	1c59      	adds	r1, r3, #1
 800726c:	6479      	str	r1, [r7, #68]	; 0x44
 800726e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007272:	b2d2      	uxtb	r2, r2
 8007274:	701a      	strb	r2, [r3, #0]
 8007276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007278:	09db      	lsrs	r3, r3, #7
 800727a:	643b      	str	r3, [r7, #64]	; 0x40
 800727c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800727e:	2b7f      	cmp	r3, #127	; 0x7f
 8007280:	d8f0      	bhi.n	8007264 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8007282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007284:	1c5a      	adds	r2, r3, #1
 8007286:	647a      	str	r2, [r7, #68]	; 0x44
 8007288:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800728a:	b2d2      	uxtb	r2, r2
 800728c:	701a      	strb	r2, [r3, #0]
 800728e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007290:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	63bb      	str	r3, [r7, #56]	; 0x38
 800729c:	e00b      	b.n	80072b6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800729e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a0:	b2da      	uxtb	r2, r3
 80072a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072a4:	1c59      	adds	r1, r3, #1
 80072a6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80072a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072ac:	b2d2      	uxtb	r2, r2
 80072ae:	701a      	strb	r2, [r3, #0]
 80072b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b2:	09db      	lsrs	r3, r3, #7
 80072b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80072b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b8:	2b7f      	cmp	r3, #127	; 0x7f
 80072ba:	d8f0      	bhi.n	800729e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80072bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072be:	1c5a      	adds	r2, r3, #1
 80072c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80072c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072c4:	b2d2      	uxtb	r2, r2
 80072c6:	701a      	strb	r2, [r3, #0]
 80072c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ca:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	2220      	movs	r2, #32
 80072d2:	4619      	mov	r1, r3
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f7fe fdaf 	bl	8005e38 <_EncodeStr>
 80072da:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80072dc:	2209      	movs	r2, #9
 80072de:	68f9      	ldr	r1, [r7, #12]
 80072e0:	6938      	ldr	r0, [r7, #16]
 80072e2:	f7fe fee9 	bl	80060b8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	637b      	str	r3, [r7, #52]	; 0x34
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	4b40      	ldr	r3, [pc, #256]	; (80073f4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	633b      	str	r3, [r7, #48]	; 0x30
 80072fa:	e00b      	b.n	8007314 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80072fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fe:	b2da      	uxtb	r2, r3
 8007300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007302:	1c59      	adds	r1, r3, #1
 8007304:	6379      	str	r1, [r7, #52]	; 0x34
 8007306:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800730a:	b2d2      	uxtb	r2, r2
 800730c:	701a      	strb	r2, [r3, #0]
 800730e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007310:	09db      	lsrs	r3, r3, #7
 8007312:	633b      	str	r3, [r7, #48]	; 0x30
 8007314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007316:	2b7f      	cmp	r3, #127	; 0x7f
 8007318:	d8f0      	bhi.n	80072fc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800731a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800731c:	1c5a      	adds	r2, r3, #1
 800731e:	637a      	str	r2, [r7, #52]	; 0x34
 8007320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007322:	b2d2      	uxtb	r2, r2
 8007324:	701a      	strb	r2, [r3, #0]
 8007326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007328:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	62bb      	str	r3, [r7, #40]	; 0x28
 8007334:	e00b      	b.n	800734e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8007336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007338:	b2da      	uxtb	r2, r3
 800733a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733c:	1c59      	adds	r1, r3, #1
 800733e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007340:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007344:	b2d2      	uxtb	r2, r2
 8007346:	701a      	strb	r2, [r3, #0]
 8007348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734a:	09db      	lsrs	r3, r3, #7
 800734c:	62bb      	str	r3, [r7, #40]	; 0x28
 800734e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007350:	2b7f      	cmp	r3, #127	; 0x7f
 8007352:	d8f0      	bhi.n	8007336 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007356:	1c5a      	adds	r2, r3, #1
 8007358:	62fa      	str	r2, [r7, #44]	; 0x2c
 800735a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800735c:	b2d2      	uxtb	r2, r2
 800735e:	701a      	strb	r2, [r3, #0]
 8007360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007362:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	627b      	str	r3, [r7, #36]	; 0x24
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	623b      	str	r3, [r7, #32]
 800736e:	e00b      	b.n	8007388 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007370:	6a3b      	ldr	r3, [r7, #32]
 8007372:	b2da      	uxtb	r2, r3
 8007374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007376:	1c59      	adds	r1, r3, #1
 8007378:	6279      	str	r1, [r7, #36]	; 0x24
 800737a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800737e:	b2d2      	uxtb	r2, r2
 8007380:	701a      	strb	r2, [r3, #0]
 8007382:	6a3b      	ldr	r3, [r7, #32]
 8007384:	09db      	lsrs	r3, r3, #7
 8007386:	623b      	str	r3, [r7, #32]
 8007388:	6a3b      	ldr	r3, [r7, #32]
 800738a:	2b7f      	cmp	r3, #127	; 0x7f
 800738c:	d8f0      	bhi.n	8007370 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800738e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007390:	1c5a      	adds	r2, r3, #1
 8007392:	627a      	str	r2, [r7, #36]	; 0x24
 8007394:	6a3a      	ldr	r2, [r7, #32]
 8007396:	b2d2      	uxtb	r2, r2
 8007398:	701a      	strb	r2, [r3, #0]
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	61fb      	str	r3, [r7, #28]
 80073a2:	2300      	movs	r3, #0
 80073a4:	61bb      	str	r3, [r7, #24]
 80073a6:	e00b      	b.n	80073c0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	b2da      	uxtb	r2, r3
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	1c59      	adds	r1, r3, #1
 80073b0:	61f9      	str	r1, [r7, #28]
 80073b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073b6:	b2d2      	uxtb	r2, r2
 80073b8:	701a      	strb	r2, [r3, #0]
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	09db      	lsrs	r3, r3, #7
 80073be:	61bb      	str	r3, [r7, #24]
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	2b7f      	cmp	r3, #127	; 0x7f
 80073c4:	d8f0      	bhi.n	80073a8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	1c5a      	adds	r2, r3, #1
 80073ca:	61fa      	str	r2, [r7, #28]
 80073cc:	69ba      	ldr	r2, [r7, #24]
 80073ce:	b2d2      	uxtb	r2, r2
 80073d0:	701a      	strb	r2, [r3, #0]
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80073d6:	2215      	movs	r2, #21
 80073d8:	68f9      	ldr	r1, [r7, #12]
 80073da:	6938      	ldr	r0, [r7, #16]
 80073dc:	f7fe fe6c 	bl	80060b8 <_SendPacket>
  RECORD_END();
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	f383 8811 	msr	BASEPRI, r3
}
 80073e6:	bf00      	nop
 80073e8:	3748      	adds	r7, #72	; 0x48
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	20014298 	.word	0x20014298
 80073f4:	20014268 	.word	0x20014268

080073f8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80073f8:	b580      	push	{r7, lr}
 80073fa:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80073fc:	4b07      	ldr	r3, [pc, #28]	; (800741c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80073fe:	6a1b      	ldr	r3, [r3, #32]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d008      	beq.n	8007416 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8007404:	4b05      	ldr	r3, [pc, #20]	; (800741c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007406:	6a1b      	ldr	r3, [r3, #32]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d003      	beq.n	8007416 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800740e:	4b03      	ldr	r3, [pc, #12]	; (800741c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007410:	6a1b      	ldr	r3, [r3, #32]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	4798      	blx	r3
  }
}
 8007416:	bf00      	nop
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	20014268 	.word	0x20014268

08007420 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007428:	f3ef 8311 	mrs	r3, BASEPRI
 800742c:	f04f 0120 	mov.w	r1, #32
 8007430:	f381 8811 	msr	BASEPRI, r1
 8007434:	617b      	str	r3, [r7, #20]
 8007436:	480b      	ldr	r0, [pc, #44]	; (8007464 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007438:	f7fe fd4b 	bl	8005ed2 <_PreparePacket>
 800743c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800743e:	2280      	movs	r2, #128	; 0x80
 8007440:	6879      	ldr	r1, [r7, #4]
 8007442:	6938      	ldr	r0, [r7, #16]
 8007444:	f7fe fcf8 	bl	8005e38 <_EncodeStr>
 8007448:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800744a:	220e      	movs	r2, #14
 800744c:	68f9      	ldr	r1, [r7, #12]
 800744e:	6938      	ldr	r0, [r7, #16]
 8007450:	f7fe fe32 	bl	80060b8 <_SendPacket>
  RECORD_END();
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	f383 8811 	msr	BASEPRI, r3
}
 800745a:	bf00      	nop
 800745c:	3718      	adds	r7, #24
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	20014298 	.word	0x20014298

08007468 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007468:	b590      	push	{r4, r7, lr}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800746e:	4b15      	ldr	r3, [pc, #84]	; (80074c4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007470:	6a1b      	ldr	r3, [r3, #32]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d01a      	beq.n	80074ac <SEGGER_SYSVIEW_RecordSystime+0x44>
 8007476:	4b13      	ldr	r3, [pc, #76]	; (80074c4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007478:	6a1b      	ldr	r3, [r3, #32]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d015      	beq.n	80074ac <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007480:	4b10      	ldr	r3, [pc, #64]	; (80074c4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007482:	6a1b      	ldr	r3, [r3, #32]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4798      	blx	r3
 8007488:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800748c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800748e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007492:	f04f 0200 	mov.w	r2, #0
 8007496:	f04f 0300 	mov.w	r3, #0
 800749a:	000a      	movs	r2, r1
 800749c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800749e:	4613      	mov	r3, r2
 80074a0:	461a      	mov	r2, r3
 80074a2:	4621      	mov	r1, r4
 80074a4:	200d      	movs	r0, #13
 80074a6:	f7ff fb37 	bl	8006b18 <SEGGER_SYSVIEW_RecordU32x2>
 80074aa:	e006      	b.n	80074ba <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80074ac:	4b06      	ldr	r3, [pc, #24]	; (80074c8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4619      	mov	r1, r3
 80074b2:	200c      	movs	r0, #12
 80074b4:	f7ff faf4 	bl	8006aa0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80074b8:	bf00      	nop
 80074ba:	bf00      	nop
 80074bc:	370c      	adds	r7, #12
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd90      	pop	{r4, r7, pc}
 80074c2:	bf00      	nop
 80074c4:	20014268 	.word	0x20014268
 80074c8:	e0001004 	.word	0xe0001004

080074cc <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b086      	sub	sp, #24
 80074d0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80074d2:	f3ef 8311 	mrs	r3, BASEPRI
 80074d6:	f04f 0120 	mov.w	r1, #32
 80074da:	f381 8811 	msr	BASEPRI, r1
 80074de:	60fb      	str	r3, [r7, #12]
 80074e0:	4819      	ldr	r0, [pc, #100]	; (8007548 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80074e2:	f7fe fcf6 	bl	8005ed2 <_PreparePacket>
 80074e6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80074ec:	4b17      	ldr	r3, [pc, #92]	; (800754c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074f4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	617b      	str	r3, [r7, #20]
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	613b      	str	r3, [r7, #16]
 80074fe:	e00b      	b.n	8007518 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	b2da      	uxtb	r2, r3
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	1c59      	adds	r1, r3, #1
 8007508:	6179      	str	r1, [r7, #20]
 800750a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800750e:	b2d2      	uxtb	r2, r2
 8007510:	701a      	strb	r2, [r3, #0]
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	09db      	lsrs	r3, r3, #7
 8007516:	613b      	str	r3, [r7, #16]
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	2b7f      	cmp	r3, #127	; 0x7f
 800751c:	d8f0      	bhi.n	8007500 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	1c5a      	adds	r2, r3, #1
 8007522:	617a      	str	r2, [r7, #20]
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	b2d2      	uxtb	r2, r2
 8007528:	701a      	strb	r2, [r3, #0]
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800752e:	2202      	movs	r2, #2
 8007530:	6879      	ldr	r1, [r7, #4]
 8007532:	68b8      	ldr	r0, [r7, #8]
 8007534:	f7fe fdc0 	bl	80060b8 <_SendPacket>
  RECORD_END();
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f383 8811 	msr	BASEPRI, r3
}
 800753e:	bf00      	nop
 8007540:	3718      	adds	r7, #24
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	20014298 	.word	0x20014298
 800754c:	e000ed04 	.word	0xe000ed04

08007550 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007556:	f3ef 8311 	mrs	r3, BASEPRI
 800755a:	f04f 0120 	mov.w	r1, #32
 800755e:	f381 8811 	msr	BASEPRI, r1
 8007562:	607b      	str	r3, [r7, #4]
 8007564:	4807      	ldr	r0, [pc, #28]	; (8007584 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8007566:	f7fe fcb4 	bl	8005ed2 <_PreparePacket>
 800756a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800756c:	2203      	movs	r2, #3
 800756e:	6839      	ldr	r1, [r7, #0]
 8007570:	6838      	ldr	r0, [r7, #0]
 8007572:	f7fe fda1 	bl	80060b8 <_SendPacket>
  RECORD_END();
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f383 8811 	msr	BASEPRI, r3
}
 800757c:	bf00      	nop
 800757e:	3708      	adds	r7, #8
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	20014298 	.word	0x20014298

08007588 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800758e:	f3ef 8311 	mrs	r3, BASEPRI
 8007592:	f04f 0120 	mov.w	r1, #32
 8007596:	f381 8811 	msr	BASEPRI, r1
 800759a:	607b      	str	r3, [r7, #4]
 800759c:	4807      	ldr	r0, [pc, #28]	; (80075bc <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800759e:	f7fe fc98 	bl	8005ed2 <_PreparePacket>
 80075a2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80075a4:	2212      	movs	r2, #18
 80075a6:	6839      	ldr	r1, [r7, #0]
 80075a8:	6838      	ldr	r0, [r7, #0]
 80075aa:	f7fe fd85 	bl	80060b8 <_SendPacket>
  RECORD_END();
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f383 8811 	msr	BASEPRI, r3
}
 80075b4:	bf00      	nop
 80075b6:	3708      	adds	r7, #8
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	20014298 	.word	0x20014298

080075c0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80075c6:	f3ef 8311 	mrs	r3, BASEPRI
 80075ca:	f04f 0120 	mov.w	r1, #32
 80075ce:	f381 8811 	msr	BASEPRI, r1
 80075d2:	607b      	str	r3, [r7, #4]
 80075d4:	4807      	ldr	r0, [pc, #28]	; (80075f4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80075d6:	f7fe fc7c 	bl	8005ed2 <_PreparePacket>
 80075da:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80075dc:	2211      	movs	r2, #17
 80075de:	6839      	ldr	r1, [r7, #0]
 80075e0:	6838      	ldr	r0, [r7, #0]
 80075e2:	f7fe fd69 	bl	80060b8 <_SendPacket>
  RECORD_END();
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f383 8811 	msr	BASEPRI, r3
}
 80075ec:	bf00      	nop
 80075ee:	3708      	adds	r7, #8
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	20014298 	.word	0x20014298

080075f8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b088      	sub	sp, #32
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007600:	f3ef 8311 	mrs	r3, BASEPRI
 8007604:	f04f 0120 	mov.w	r1, #32
 8007608:	f381 8811 	msr	BASEPRI, r1
 800760c:	617b      	str	r3, [r7, #20]
 800760e:	4819      	ldr	r0, [pc, #100]	; (8007674 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007610:	f7fe fc5f 	bl	8005ed2 <_PreparePacket>
 8007614:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800761a:	4b17      	ldr	r3, [pc, #92]	; (8007678 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	61fb      	str	r3, [r7, #28]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	61bb      	str	r3, [r7, #24]
 800762c:	e00b      	b.n	8007646 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	b2da      	uxtb	r2, r3
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	1c59      	adds	r1, r3, #1
 8007636:	61f9      	str	r1, [r7, #28]
 8007638:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800763c:	b2d2      	uxtb	r2, r2
 800763e:	701a      	strb	r2, [r3, #0]
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	09db      	lsrs	r3, r3, #7
 8007644:	61bb      	str	r3, [r7, #24]
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	2b7f      	cmp	r3, #127	; 0x7f
 800764a:	d8f0      	bhi.n	800762e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	1c5a      	adds	r2, r3, #1
 8007650:	61fa      	str	r2, [r7, #28]
 8007652:	69ba      	ldr	r2, [r7, #24]
 8007654:	b2d2      	uxtb	r2, r2
 8007656:	701a      	strb	r2, [r3, #0]
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800765c:	2208      	movs	r2, #8
 800765e:	68f9      	ldr	r1, [r7, #12]
 8007660:	6938      	ldr	r0, [r7, #16]
 8007662:	f7fe fd29 	bl	80060b8 <_SendPacket>
  RECORD_END();
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	f383 8811 	msr	BASEPRI, r3
}
 800766c:	bf00      	nop
 800766e:	3720      	adds	r7, #32
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	20014298 	.word	0x20014298
 8007678:	20014268 	.word	0x20014268

0800767c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800767c:	b580      	push	{r7, lr}
 800767e:	b088      	sub	sp, #32
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007684:	f3ef 8311 	mrs	r3, BASEPRI
 8007688:	f04f 0120 	mov.w	r1, #32
 800768c:	f381 8811 	msr	BASEPRI, r1
 8007690:	617b      	str	r3, [r7, #20]
 8007692:	4819      	ldr	r0, [pc, #100]	; (80076f8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007694:	f7fe fc1d 	bl	8005ed2 <_PreparePacket>
 8007698:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800769e:	4b17      	ldr	r3, [pc, #92]	; (80076fc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	61fb      	str	r3, [r7, #28]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	61bb      	str	r3, [r7, #24]
 80076b0:	e00b      	b.n	80076ca <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	b2da      	uxtb	r2, r3
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	1c59      	adds	r1, r3, #1
 80076ba:	61f9      	str	r1, [r7, #28]
 80076bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076c0:	b2d2      	uxtb	r2, r2
 80076c2:	701a      	strb	r2, [r3, #0]
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	09db      	lsrs	r3, r3, #7
 80076c8:	61bb      	str	r3, [r7, #24]
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	2b7f      	cmp	r3, #127	; 0x7f
 80076ce:	d8f0      	bhi.n	80076b2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	1c5a      	adds	r2, r3, #1
 80076d4:	61fa      	str	r2, [r7, #28]
 80076d6:	69ba      	ldr	r2, [r7, #24]
 80076d8:	b2d2      	uxtb	r2, r2
 80076da:	701a      	strb	r2, [r3, #0]
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80076e0:	2204      	movs	r2, #4
 80076e2:	68f9      	ldr	r1, [r7, #12]
 80076e4:	6938      	ldr	r0, [r7, #16]
 80076e6:	f7fe fce7 	bl	80060b8 <_SendPacket>
  RECORD_END();
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	f383 8811 	msr	BASEPRI, r3
}
 80076f0:	bf00      	nop
 80076f2:	3720      	adds	r7, #32
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	20014298 	.word	0x20014298
 80076fc:	20014268 	.word	0x20014268

08007700 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007700:	b580      	push	{r7, lr}
 8007702:	b088      	sub	sp, #32
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007708:	f3ef 8311 	mrs	r3, BASEPRI
 800770c:	f04f 0120 	mov.w	r1, #32
 8007710:	f381 8811 	msr	BASEPRI, r1
 8007714:	617b      	str	r3, [r7, #20]
 8007716:	4819      	ldr	r0, [pc, #100]	; (800777c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007718:	f7fe fbdb 	bl	8005ed2 <_PreparePacket>
 800771c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007722:	4b17      	ldr	r3, [pc, #92]	; (8007780 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	61fb      	str	r3, [r7, #28]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	61bb      	str	r3, [r7, #24]
 8007734:	e00b      	b.n	800774e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	b2da      	uxtb	r2, r3
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	1c59      	adds	r1, r3, #1
 800773e:	61f9      	str	r1, [r7, #28]
 8007740:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007744:	b2d2      	uxtb	r2, r2
 8007746:	701a      	strb	r2, [r3, #0]
 8007748:	69bb      	ldr	r3, [r7, #24]
 800774a:	09db      	lsrs	r3, r3, #7
 800774c:	61bb      	str	r3, [r7, #24]
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	2b7f      	cmp	r3, #127	; 0x7f
 8007752:	d8f0      	bhi.n	8007736 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	1c5a      	adds	r2, r3, #1
 8007758:	61fa      	str	r2, [r7, #28]
 800775a:	69ba      	ldr	r2, [r7, #24]
 800775c:	b2d2      	uxtb	r2, r2
 800775e:	701a      	strb	r2, [r3, #0]
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007764:	2206      	movs	r2, #6
 8007766:	68f9      	ldr	r1, [r7, #12]
 8007768:	6938      	ldr	r0, [r7, #16]
 800776a:	f7fe fca5 	bl	80060b8 <_SendPacket>
  RECORD_END();
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	f383 8811 	msr	BASEPRI, r3
}
 8007774:	bf00      	nop
 8007776:	3720      	adds	r7, #32
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	20014298 	.word	0x20014298
 8007780:	20014268 	.word	0x20014268

08007784 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007784:	b580      	push	{r7, lr}
 8007786:	b08a      	sub	sp, #40	; 0x28
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800778e:	f3ef 8311 	mrs	r3, BASEPRI
 8007792:	f04f 0120 	mov.w	r1, #32
 8007796:	f381 8811 	msr	BASEPRI, r1
 800779a:	617b      	str	r3, [r7, #20]
 800779c:	4827      	ldr	r0, [pc, #156]	; (800783c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800779e:	f7fe fb98 	bl	8005ed2 <_PreparePacket>
 80077a2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80077a8:	4b25      	ldr	r3, [pc, #148]	; (8007840 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80077aa:	691b      	ldr	r3, [r3, #16]
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	627b      	str	r3, [r7, #36]	; 0x24
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	623b      	str	r3, [r7, #32]
 80077ba:	e00b      	b.n	80077d4 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80077bc:	6a3b      	ldr	r3, [r7, #32]
 80077be:	b2da      	uxtb	r2, r3
 80077c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c2:	1c59      	adds	r1, r3, #1
 80077c4:	6279      	str	r1, [r7, #36]	; 0x24
 80077c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80077ca:	b2d2      	uxtb	r2, r2
 80077cc:	701a      	strb	r2, [r3, #0]
 80077ce:	6a3b      	ldr	r3, [r7, #32]
 80077d0:	09db      	lsrs	r3, r3, #7
 80077d2:	623b      	str	r3, [r7, #32]
 80077d4:	6a3b      	ldr	r3, [r7, #32]
 80077d6:	2b7f      	cmp	r3, #127	; 0x7f
 80077d8:	d8f0      	bhi.n	80077bc <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80077da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077dc:	1c5a      	adds	r2, r3, #1
 80077de:	627a      	str	r2, [r7, #36]	; 0x24
 80077e0:	6a3a      	ldr	r2, [r7, #32]
 80077e2:	b2d2      	uxtb	r2, r2
 80077e4:	701a      	strb	r2, [r3, #0]
 80077e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	61fb      	str	r3, [r7, #28]
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	61bb      	str	r3, [r7, #24]
 80077f2:	e00b      	b.n	800780c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	b2da      	uxtb	r2, r3
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	1c59      	adds	r1, r3, #1
 80077fc:	61f9      	str	r1, [r7, #28]
 80077fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007802:	b2d2      	uxtb	r2, r2
 8007804:	701a      	strb	r2, [r3, #0]
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	09db      	lsrs	r3, r3, #7
 800780a:	61bb      	str	r3, [r7, #24]
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	2b7f      	cmp	r3, #127	; 0x7f
 8007810:	d8f0      	bhi.n	80077f4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	1c5a      	adds	r2, r3, #1
 8007816:	61fa      	str	r2, [r7, #28]
 8007818:	69ba      	ldr	r2, [r7, #24]
 800781a:	b2d2      	uxtb	r2, r2
 800781c:	701a      	strb	r2, [r3, #0]
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8007822:	2207      	movs	r2, #7
 8007824:	68f9      	ldr	r1, [r7, #12]
 8007826:	6938      	ldr	r0, [r7, #16]
 8007828:	f7fe fc46 	bl	80060b8 <_SendPacket>
  RECORD_END();
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	f383 8811 	msr	BASEPRI, r3
}
 8007832:	bf00      	nop
 8007834:	3728      	adds	r7, #40	; 0x28
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	20014298 	.word	0x20014298
 8007840:	20014268 	.word	0x20014268

08007844 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800784c:	4b04      	ldr	r3, [pc, #16]	; (8007860 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	1ad3      	subs	r3, r2, r3
}
 8007854:	4618      	mov	r0, r3
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr
 8007860:	20014268 	.word	0x20014268

08007864 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007864:	b580      	push	{r7, lr}
 8007866:	b08c      	sub	sp, #48	; 0x30
 8007868:	af00      	add	r7, sp, #0
 800786a:	4603      	mov	r3, r0
 800786c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800786e:	4b3b      	ldr	r3, [pc, #236]	; (800795c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d06d      	beq.n	8007952 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8007876:	4b39      	ldr	r3, [pc, #228]	; (800795c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800787c:	2300      	movs	r3, #0
 800787e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007880:	e008      	b.n	8007894 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788a:	2b00      	cmp	r3, #0
 800788c:	d007      	beq.n	800789e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800788e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007890:	3301      	adds	r3, #1
 8007892:	62bb      	str	r3, [r7, #40]	; 0x28
 8007894:	79fb      	ldrb	r3, [r7, #7]
 8007896:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007898:	429a      	cmp	r2, r3
 800789a:	d3f2      	bcc.n	8007882 <SEGGER_SYSVIEW_SendModule+0x1e>
 800789c:	e000      	b.n	80078a0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800789e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80078a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d055      	beq.n	8007952 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80078a6:	f3ef 8311 	mrs	r3, BASEPRI
 80078aa:	f04f 0120 	mov.w	r1, #32
 80078ae:	f381 8811 	msr	BASEPRI, r1
 80078b2:	617b      	str	r3, [r7, #20]
 80078b4:	482a      	ldr	r0, [pc, #168]	; (8007960 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80078b6:	f7fe fb0c 	bl	8005ed2 <_PreparePacket>
 80078ba:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	627b      	str	r3, [r7, #36]	; 0x24
 80078c4:	79fb      	ldrb	r3, [r7, #7]
 80078c6:	623b      	str	r3, [r7, #32]
 80078c8:	e00b      	b.n	80078e2 <SEGGER_SYSVIEW_SendModule+0x7e>
 80078ca:	6a3b      	ldr	r3, [r7, #32]
 80078cc:	b2da      	uxtb	r2, r3
 80078ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d0:	1c59      	adds	r1, r3, #1
 80078d2:	6279      	str	r1, [r7, #36]	; 0x24
 80078d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80078d8:	b2d2      	uxtb	r2, r2
 80078da:	701a      	strb	r2, [r3, #0]
 80078dc:	6a3b      	ldr	r3, [r7, #32]
 80078de:	09db      	lsrs	r3, r3, #7
 80078e0:	623b      	str	r3, [r7, #32]
 80078e2:	6a3b      	ldr	r3, [r7, #32]
 80078e4:	2b7f      	cmp	r3, #127	; 0x7f
 80078e6:	d8f0      	bhi.n	80078ca <SEGGER_SYSVIEW_SendModule+0x66>
 80078e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ea:	1c5a      	adds	r2, r3, #1
 80078ec:	627a      	str	r2, [r7, #36]	; 0x24
 80078ee:	6a3a      	ldr	r2, [r7, #32]
 80078f0:	b2d2      	uxtb	r2, r2
 80078f2:	701a      	strb	r2, [r3, #0]
 80078f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	61fb      	str	r3, [r7, #28]
 80078fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	61bb      	str	r3, [r7, #24]
 8007902:	e00b      	b.n	800791c <SEGGER_SYSVIEW_SendModule+0xb8>
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	b2da      	uxtb	r2, r3
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	1c59      	adds	r1, r3, #1
 800790c:	61f9      	str	r1, [r7, #28]
 800790e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007912:	b2d2      	uxtb	r2, r2
 8007914:	701a      	strb	r2, [r3, #0]
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	09db      	lsrs	r3, r3, #7
 800791a:	61bb      	str	r3, [r7, #24]
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	2b7f      	cmp	r3, #127	; 0x7f
 8007920:	d8f0      	bhi.n	8007904 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	1c5a      	adds	r2, r3, #1
 8007926:	61fa      	str	r2, [r7, #28]
 8007928:	69ba      	ldr	r2, [r7, #24]
 800792a:	b2d2      	uxtb	r2, r2
 800792c:	701a      	strb	r2, [r3, #0]
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2280      	movs	r2, #128	; 0x80
 8007938:	4619      	mov	r1, r3
 800793a:	68f8      	ldr	r0, [r7, #12]
 800793c:	f7fe fa7c 	bl	8005e38 <_EncodeStr>
 8007940:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007942:	2216      	movs	r2, #22
 8007944:	68f9      	ldr	r1, [r7, #12]
 8007946:	6938      	ldr	r0, [r7, #16]
 8007948:	f7fe fbb6 	bl	80060b8 <_SendPacket>
      RECORD_END();
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8007952:	bf00      	nop
 8007954:	3730      	adds	r7, #48	; 0x30
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	20014290 	.word	0x20014290
 8007960:	20014298 	.word	0x20014298

08007964 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007964:	b580      	push	{r7, lr}
 8007966:	b082      	sub	sp, #8
 8007968:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800796a:	4b0c      	ldr	r3, [pc, #48]	; (800799c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00f      	beq.n	8007992 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007972:	4b0a      	ldr	r3, [pc, #40]	; (800799c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d002      	beq.n	8007986 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1f2      	bne.n	8007978 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007992:	bf00      	nop
 8007994:	3708      	adds	r7, #8
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	20014290 	.word	0x20014290

080079a0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b086      	sub	sp, #24
 80079a4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80079a6:	f3ef 8311 	mrs	r3, BASEPRI
 80079aa:	f04f 0120 	mov.w	r1, #32
 80079ae:	f381 8811 	msr	BASEPRI, r1
 80079b2:	60fb      	str	r3, [r7, #12]
 80079b4:	4817      	ldr	r0, [pc, #92]	; (8007a14 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80079b6:	f7fe fa8c 	bl	8005ed2 <_PreparePacket>
 80079ba:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	617b      	str	r3, [r7, #20]
 80079c4:	4b14      	ldr	r3, [pc, #80]	; (8007a18 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	613b      	str	r3, [r7, #16]
 80079ca:	e00b      	b.n	80079e4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	b2da      	uxtb	r2, r3
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	1c59      	adds	r1, r3, #1
 80079d4:	6179      	str	r1, [r7, #20]
 80079d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80079da:	b2d2      	uxtb	r2, r2
 80079dc:	701a      	strb	r2, [r3, #0]
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	09db      	lsrs	r3, r3, #7
 80079e2:	613b      	str	r3, [r7, #16]
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	2b7f      	cmp	r3, #127	; 0x7f
 80079e8:	d8f0      	bhi.n	80079cc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	1c5a      	adds	r2, r3, #1
 80079ee:	617a      	str	r2, [r7, #20]
 80079f0:	693a      	ldr	r2, [r7, #16]
 80079f2:	b2d2      	uxtb	r2, r2
 80079f4:	701a      	strb	r2, [r3, #0]
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80079fa:	221b      	movs	r2, #27
 80079fc:	6879      	ldr	r1, [r7, #4]
 80079fe:	68b8      	ldr	r0, [r7, #8]
 8007a00:	f7fe fb5a 	bl	80060b8 <_SendPacket>
  RECORD_END();
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f383 8811 	msr	BASEPRI, r3
}
 8007a0a:	bf00      	nop
 8007a0c:	3718      	adds	r7, #24
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	20014298 	.word	0x20014298
 8007a18:	20014294 	.word	0x20014294

08007a1c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007a1c:	b40f      	push	{r0, r1, r2, r3}
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b082      	sub	sp, #8
 8007a22:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007a24:	f107 0314 	add.w	r3, r7, #20
 8007a28:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8007a2a:	1d3b      	adds	r3, r7, #4
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	2100      	movs	r1, #0
 8007a30:	6938      	ldr	r0, [r7, #16]
 8007a32:	f7fe fdcb 	bl	80065cc <_VPrintTarget>
  va_end(ParamList);
}
 8007a36:	bf00      	nop
 8007a38:	3708      	adds	r7, #8
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a40:	b004      	add	sp, #16
 8007a42:	4770      	bx	lr

08007a44 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b08a      	sub	sp, #40	; 0x28
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007a4c:	f3ef 8311 	mrs	r3, BASEPRI
 8007a50:	f04f 0120 	mov.w	r1, #32
 8007a54:	f381 8811 	msr	BASEPRI, r1
 8007a58:	617b      	str	r3, [r7, #20]
 8007a5a:	4827      	ldr	r0, [pc, #156]	; (8007af8 <SEGGER_SYSVIEW_Warn+0xb4>)
 8007a5c:	f7fe fa39 	bl	8005ed2 <_PreparePacket>
 8007a60:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007a62:	2280      	movs	r2, #128	; 0x80
 8007a64:	6879      	ldr	r1, [r7, #4]
 8007a66:	6938      	ldr	r0, [r7, #16]
 8007a68:	f7fe f9e6 	bl	8005e38 <_EncodeStr>
 8007a6c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	627b      	str	r3, [r7, #36]	; 0x24
 8007a72:	2301      	movs	r3, #1
 8007a74:	623b      	str	r3, [r7, #32]
 8007a76:	e00b      	b.n	8007a90 <SEGGER_SYSVIEW_Warn+0x4c>
 8007a78:	6a3b      	ldr	r3, [r7, #32]
 8007a7a:	b2da      	uxtb	r2, r3
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7e:	1c59      	adds	r1, r3, #1
 8007a80:	6279      	str	r1, [r7, #36]	; 0x24
 8007a82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a86:	b2d2      	uxtb	r2, r2
 8007a88:	701a      	strb	r2, [r3, #0]
 8007a8a:	6a3b      	ldr	r3, [r7, #32]
 8007a8c:	09db      	lsrs	r3, r3, #7
 8007a8e:	623b      	str	r3, [r7, #32]
 8007a90:	6a3b      	ldr	r3, [r7, #32]
 8007a92:	2b7f      	cmp	r3, #127	; 0x7f
 8007a94:	d8f0      	bhi.n	8007a78 <SEGGER_SYSVIEW_Warn+0x34>
 8007a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a98:	1c5a      	adds	r2, r3, #1
 8007a9a:	627a      	str	r2, [r7, #36]	; 0x24
 8007a9c:	6a3a      	ldr	r2, [r7, #32]
 8007a9e:	b2d2      	uxtb	r2, r2
 8007aa0:	701a      	strb	r2, [r3, #0]
 8007aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	61fb      	str	r3, [r7, #28]
 8007aaa:	2300      	movs	r3, #0
 8007aac:	61bb      	str	r3, [r7, #24]
 8007aae:	e00b      	b.n	8007ac8 <SEGGER_SYSVIEW_Warn+0x84>
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	b2da      	uxtb	r2, r3
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	1c59      	adds	r1, r3, #1
 8007ab8:	61f9      	str	r1, [r7, #28]
 8007aba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007abe:	b2d2      	uxtb	r2, r2
 8007ac0:	701a      	strb	r2, [r3, #0]
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	09db      	lsrs	r3, r3, #7
 8007ac6:	61bb      	str	r3, [r7, #24]
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	2b7f      	cmp	r3, #127	; 0x7f
 8007acc:	d8f0      	bhi.n	8007ab0 <SEGGER_SYSVIEW_Warn+0x6c>
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	1c5a      	adds	r2, r3, #1
 8007ad2:	61fa      	str	r2, [r7, #28]
 8007ad4:	69ba      	ldr	r2, [r7, #24]
 8007ad6:	b2d2      	uxtb	r2, r2
 8007ad8:	701a      	strb	r2, [r3, #0]
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007ade:	221a      	movs	r2, #26
 8007ae0:	68f9      	ldr	r1, [r7, #12]
 8007ae2:	6938      	ldr	r0, [r7, #16]
 8007ae4:	f7fe fae8 	bl	80060b8 <_SendPacket>
  RECORD_END();
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	f383 8811 	msr	BASEPRI, r3
}
 8007aee:	bf00      	nop
 8007af0:	3728      	adds	r7, #40	; 0x28
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	20014298 	.word	0x20014298

08007afc <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007afc:	b580      	push	{r7, lr}
 8007afe:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007b00:	4b13      	ldr	r3, [pc, #76]	; (8007b50 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007b02:	7e1b      	ldrb	r3, [r3, #24]
 8007b04:	4619      	mov	r1, r3
 8007b06:	4a13      	ldr	r2, [pc, #76]	; (8007b54 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007b08:	460b      	mov	r3, r1
 8007b0a:	005b      	lsls	r3, r3, #1
 8007b0c:	440b      	add	r3, r1
 8007b0e:	00db      	lsls	r3, r3, #3
 8007b10:	4413      	add	r3, r2
 8007b12:	336c      	adds	r3, #108	; 0x6c
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	4b0e      	ldr	r3, [pc, #56]	; (8007b50 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007b18:	7e1b      	ldrb	r3, [r3, #24]
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	490d      	ldr	r1, [pc, #52]	; (8007b54 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007b1e:	4603      	mov	r3, r0
 8007b20:	005b      	lsls	r3, r3, #1
 8007b22:	4403      	add	r3, r0
 8007b24:	00db      	lsls	r3, r3, #3
 8007b26:	440b      	add	r3, r1
 8007b28:	3370      	adds	r3, #112	; 0x70
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d00b      	beq.n	8007b48 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007b30:	4b07      	ldr	r3, [pc, #28]	; (8007b50 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007b32:	789b      	ldrb	r3, [r3, #2]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d107      	bne.n	8007b48 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007b38:	4b05      	ldr	r3, [pc, #20]	; (8007b50 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007b3e:	f7fe f9d5 	bl	8005eec <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007b42:	4b03      	ldr	r3, [pc, #12]	; (8007b50 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007b44:	2200      	movs	r2, #0
 8007b46:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007b48:	4b01      	ldr	r3, [pc, #4]	; (8007b50 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007b4a:	781b      	ldrb	r3, [r3, #0]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	20014268 	.word	0x20014268
 8007b54:	20014414 	.word	0x20014414

08007b58 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8007b5c:	4803      	ldr	r0, [pc, #12]	; (8007b6c <_cbSendSystemDesc+0x14>)
 8007b5e:	f7ff fc5f 	bl	8007420 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8007b62:	4803      	ldr	r0, [pc, #12]	; (8007b70 <_cbSendSystemDesc+0x18>)
 8007b64:	f7ff fc5c 	bl	8007420 <SEGGER_SYSVIEW_SendSysDesc>
}
 8007b68:	bf00      	nop
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	08007d88 	.word	0x08007d88
 8007b70:	08007dc4 	.word	0x08007dc4

08007b74 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8007b74:	b580      	push	{r7, lr}
 8007b76:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8007b78:	4b06      	ldr	r3, [pc, #24]	; (8007b94 <SEGGER_SYSVIEW_Conf+0x20>)
 8007b7a:	6818      	ldr	r0, [r3, #0]
 8007b7c:	4b05      	ldr	r3, [pc, #20]	; (8007b94 <SEGGER_SYSVIEW_Conf+0x20>)
 8007b7e:	6819      	ldr	r1, [r3, #0]
 8007b80:	4b05      	ldr	r3, [pc, #20]	; (8007b98 <SEGGER_SYSVIEW_Conf+0x24>)
 8007b82:	4a06      	ldr	r2, [pc, #24]	; (8007b9c <SEGGER_SYSVIEW_Conf+0x28>)
 8007b84:	f7fe ff1a 	bl	80069bc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8007b88:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8007b8c:	f7fe ff5a 	bl	8006a44 <SEGGER_SYSVIEW_SetRAMBase>
}
 8007b90:	bf00      	nop
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	20000000 	.word	0x20000000
 8007b98:	08007b59 	.word	0x08007b59
 8007b9c:	08007dec 	.word	0x08007dec

08007ba0 <__libc_init_array>:
 8007ba0:	b570      	push	{r4, r5, r6, lr}
 8007ba2:	4d0d      	ldr	r5, [pc, #52]	; (8007bd8 <__libc_init_array+0x38>)
 8007ba4:	4c0d      	ldr	r4, [pc, #52]	; (8007bdc <__libc_init_array+0x3c>)
 8007ba6:	1b64      	subs	r4, r4, r5
 8007ba8:	10a4      	asrs	r4, r4, #2
 8007baa:	2600      	movs	r6, #0
 8007bac:	42a6      	cmp	r6, r4
 8007bae:	d109      	bne.n	8007bc4 <__libc_init_array+0x24>
 8007bb0:	4d0b      	ldr	r5, [pc, #44]	; (8007be0 <__libc_init_array+0x40>)
 8007bb2:	4c0c      	ldr	r4, [pc, #48]	; (8007be4 <__libc_init_array+0x44>)
 8007bb4:	f000 f83c 	bl	8007c30 <_init>
 8007bb8:	1b64      	subs	r4, r4, r5
 8007bba:	10a4      	asrs	r4, r4, #2
 8007bbc:	2600      	movs	r6, #0
 8007bbe:	42a6      	cmp	r6, r4
 8007bc0:	d105      	bne.n	8007bce <__libc_init_array+0x2e>
 8007bc2:	bd70      	pop	{r4, r5, r6, pc}
 8007bc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bc8:	4798      	blx	r3
 8007bca:	3601      	adds	r6, #1
 8007bcc:	e7ee      	b.n	8007bac <__libc_init_array+0xc>
 8007bce:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bd2:	4798      	blx	r3
 8007bd4:	3601      	adds	r6, #1
 8007bd6:	e7f2      	b.n	8007bbe <__libc_init_array+0x1e>
 8007bd8:	08007e1c 	.word	0x08007e1c
 8007bdc:	08007e1c 	.word	0x08007e1c
 8007be0:	08007e1c 	.word	0x08007e1c
 8007be4:	08007e20 	.word	0x08007e20

08007be8 <memcmp>:
 8007be8:	b530      	push	{r4, r5, lr}
 8007bea:	3901      	subs	r1, #1
 8007bec:	2400      	movs	r4, #0
 8007bee:	42a2      	cmp	r2, r4
 8007bf0:	d101      	bne.n	8007bf6 <memcmp+0xe>
 8007bf2:	2000      	movs	r0, #0
 8007bf4:	e005      	b.n	8007c02 <memcmp+0x1a>
 8007bf6:	5d03      	ldrb	r3, [r0, r4]
 8007bf8:	3401      	adds	r4, #1
 8007bfa:	5d0d      	ldrb	r5, [r1, r4]
 8007bfc:	42ab      	cmp	r3, r5
 8007bfe:	d0f6      	beq.n	8007bee <memcmp+0x6>
 8007c00:	1b58      	subs	r0, r3, r5
 8007c02:	bd30      	pop	{r4, r5, pc}

08007c04 <memcpy>:
 8007c04:	440a      	add	r2, r1
 8007c06:	4291      	cmp	r1, r2
 8007c08:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c0c:	d100      	bne.n	8007c10 <memcpy+0xc>
 8007c0e:	4770      	bx	lr
 8007c10:	b510      	push	{r4, lr}
 8007c12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c1a:	4291      	cmp	r1, r2
 8007c1c:	d1f9      	bne.n	8007c12 <memcpy+0xe>
 8007c1e:	bd10      	pop	{r4, pc}

08007c20 <memset>:
 8007c20:	4402      	add	r2, r0
 8007c22:	4603      	mov	r3, r0
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d100      	bne.n	8007c2a <memset+0xa>
 8007c28:	4770      	bx	lr
 8007c2a:	f803 1b01 	strb.w	r1, [r3], #1
 8007c2e:	e7f9      	b.n	8007c24 <memset+0x4>

08007c30 <_init>:
 8007c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c32:	bf00      	nop
 8007c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c36:	bc08      	pop	{r3}
 8007c38:	469e      	mov	lr, r3
 8007c3a:	4770      	bx	lr

08007c3c <_fini>:
 8007c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c3e:	bf00      	nop
 8007c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c42:	bc08      	pop	{r3}
 8007c44:	469e      	mov	lr, r3
 8007c46:	4770      	bx	lr
