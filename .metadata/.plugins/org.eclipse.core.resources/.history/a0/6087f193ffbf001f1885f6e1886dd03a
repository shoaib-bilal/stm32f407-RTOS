/*
 * task_handler.c
 *
 *  Created on: Dec 9, 2024
 *      Author: shoai
 */

#include"main.h"

void process_command(command_t *cmd);
int extract_command(command_t *cmd);

uint8_t get_number(uint8_t *p,int len);

const char* msg_inv= "////Invalid option/////\n";
void menu_handler(void *parameters)
{

	uint32_t cmd_addr;
	command_t *cmd;
	int option;
	const char* msg_menu= "========================|\n"
						 "|         msg_menu       |\n"
						 "==========================\n"
			    		    "Led Effect    ---->0   \n"
			    		    "Date and time ---->1   \n"
							"Exit          ---->2   \n"
							"Enter your choice here:";



	while(1)
	{
		xQueueSend(q_print, &msg_menu, portMAX_DELAY);
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);

		cmd=(command_t*)cmd_addr;

		if(cmd->len ==1)
		{
			option=cmd->payload[0]-48;
			switch(option)
			{
			case 0:
				current_state=sLedEffect;
				xTaskNotify(led_handle,0,eNoAction);
				break;
			case 1:
				current_state=sRtcMenu;
				xTaskNotify(rtc_handle,0,eNoAction);
				break;

			case 2:
				break;
			default:
				xQueueSend(q_print,&msg_inv, portMAX_DELAY);
				continue;
			}

		}
		else
		{
			xQueueSend(q_print,&msg_inv, portMAX_DELAY);
			continue;
		}
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
	}
}
void cmd_handler(void *parameters)
{
command_t cmd;

BaseType_t ret;

	while(1)
	{
		ret= xTaskNotifyWait(0,0,NULL,portMAX_DELAY);

		if (ret == pdTRUE )
		{
		process_command(&cmd);
		}
	}
}

void process_command(command_t *cmd)
{
	extract_command(cmd);

	switch(current_state)
	{
	case sMainmenu:
		xTaskNotify(menue_handle,(uint32_t)cmd,eSetValueWithOverwrite);
		break;

	case sLedEffect:
		xTaskNotify(led_handle,(uint32_t)cmd,eSetValueWithOverwrite);
		break;

	case sRtcMenu:
		xTaskNotify(rtc_handle,(uint32_t)cmd,eSetValueWithOverwrite);
		break;

	case sRtcTimeConfig:
		xTaskNotify(rtc_handle,(uint32_t)cmd,eSetValueWithOverwrite);
		break;
	case SRtcDateConfig:
		xTaskNotify(rtc_handle,(uint32_t)cmd,eSetValueWithOverwrite);
		break;
	case sRtcReport:
		xTaskNotify(rtc_handle,(uint32_t)cmd,eSetValueWithOverwrite);
		break;
	}

}

int extract_command(command_t *cmd)
{

	BaseType_t status;
	uint8_t item;

	status= uxQueueMessagesWaiting(q_data);

	if(!status)
		return -1;


	uint8_t i=0;

	do{
		status=xQueueReceive(q_data, &item, portMAX_DELAY);
		if (status==pdTRUE)
		{
			cmd->payload[i++]= item;
		}


	}while(item !='\n');

	cmd->payload[i-1]= '\0';

	cmd->len= i-1;

	return 0;

}

void led_handler(void *parameters)
{
	uint32_t cmd_addr;
	command_t *cmd;

	const char* led_msg= "======================\n"
						 "|      Led menu     |\n"
						 "======================\n"
						 "   none-------->none  \n"
						 "   Led effect1 -->e1  \n"
						 "   Led effect2 --->e2 \n"
			 	 	     "   Led effect3 --->e3 \n"
			             "   Led effect4 --->e4 \n"
						 " Enter your choice here:";

	while(1)
	{
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
		xQueueSend(q_print,&led_msg,portMAX_DELAY);
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);

		cmd=(command_t*)cmd_addr;

		if(cmd->len <=4)
		{
			if(! strcmp( (char*)cmd->payload,"none"))
				led_effect_stop();
			else if(! strcmp( (char*)cmd->payload,"e1"))
				led_effect(1);
			else if (! strcmp( (char*)cmd->payload,"e2"))
				led_effect(2);
			else if(! strcmp( (char*)cmd->payload,"e3"))
				led_effect(3);
			else if (! strcmp( (char*)cmd->payload,"e4"))
				led_effect(4);
			else
				xQueueSend(q_print,&msg_inv, portMAX_DELAY);
		}
		else
		{
			xQueueSend(q_print,&msg_inv, portMAX_DELAY);
		}
		current_state=sMainmenu;

		xTaskNotify(menue_handle,0,eNoAction);

	}

}

uint8_t get_number(uint8_t *p,int len)
{
	int value;
	if (len>1)
	{
		value=(((p[0]-48)*10)+(p[1]-48));
	}
	else
	{
		value=p[0]-48;
	}

	return value;
}

void rtc_handler(void *parameters)
{

	const char *msg_rtc1="============================\n"
						 "|      RTC 	 	          \n"
						 "============================\n";


	const char *msg2_rtc2="  configure Time  ---->0\n"
						  "  configure Date  ---->1\n"
						  "  Enable reporting---->2\n"
						  "  Exit           ----->3\n"
						  "  Enter your choice :";

	const char *msg_rtc_hh="Enter hour(1-12):";
	const char *msg_rtc_mm="Enter mins(0-59):";
	const char *msg_rtc_ss="Enter seconds(0-59):";

	const char *msg_rtc_dd="Enter date(1-31):";
	const char *msg_rtc_mo="Enter month(1-12):";
	const char *msg_rtc_dow="Enter day(1-7 sun=1):";
	const char *msg_rtc_yr="Enter year(0-99)";

	const char *msg_conf="Configuration successful\n";
	const char *msg_rtc_report="Enable time&Date reporting(y/n)?: ";


	uint32_t cmd_addr;
	command_t *cmd;

	static int rtc_state=0;
	uint8_t menu_code;

	RTC_TimeTypeDef time;
	RTC_DateTypeDef date;

#define HH_CONFIG	0
#define MM_CONFIG	1
#define SS_CONFIG	2

#define DATE_CONFIG		0
#define MONTH_CONFIG	1
#define YEAR_CONFIG		2
#define DAY_CONFIG		3

	while(1)
	{
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);

		xQueueSend(q_print,&msg_rtc1,portMAX_DELAY);
		show_time();
		xQueueSend(q_print,&msg2_rtc2,portMAX_DELAY);

		while(current_state !=sMainmenu)
		{
			xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);

			cmd=(command_t)&cmd_addr;

			switch(current_state)
			{
			case sRtcMenu:
			{
				if (cmd->len==1)
				{
					menu_code=cmd->payload[0]-48;
					switch(menu_code)
					{
						case 0:
						{
							current_state= sRtcTimeConfig;
							xQueueSend(q_print,&msg_rtc_hh,portMAX_DELAY );
							break;
						}

						case 1:
						{
							current_state= SRtcDateConfig;
							xQueueSend(q_print,&msg_rtc_dd,portMAX_DELAY );
							break;
						}


						case 2:
						{
							current_state=sRtcReport;
							xQueueSend(q_print,&msg_rtc_report, portMAX_DELAY);
							break;
						}

						case 3:
						{
							current_state= sMainmenu;
							break;
						}
						default:
						{
							current_state= sMainmenu;
							xQueueSend(q_print,&msg_inv,portMAX_DELAY);
						}


					}
				}
				else
					{
					current_state= sMainmenu;
					xQueueSend(q_print,&msg_inv,portMAX_DELAY);
					}

			break;
			}

			case sRtcTimeConfig:
			{
				switch(rtc_state)
				{
				case HH_CONFIG:{
					time.Hours= get_number(cmd->payload,cmd->len );
					rtc_state=MM_CONFIG;
					xQueueSend(q_print, &msg_rtc_mm,portMAX_DELAY);
					break;}
				case MM_CONFIG:{
					time.Minutes= get_number(cmd->payload,cmd->len);
					rtc_state= SS_CONFIG;
					xQueueSend(q_print,&msg_rtc_ss,portMAX_DELAY);
					break;}
				case SS_CONFIG:{
					time.Seconds= get_number(cmd->payload,cmd->len);
					if(! validate_rtc_information(&time, NULL))
					{
						rtc_configure_time(&time);
						xQueueSend(q_print,&msg_conf,portMAX_DELAY);
						show_time_date();
					}
					else
						xQueueSend(q_print,&msg_inv ,portMAX_DELAY);

					current_state= sMainmenu;
					rtc_state=0;
					break;}


				}

			break;}

			case SRtcDateConfig:
			{
				switch(rtc_state)
				{
				case DATE_CONFIG:{
					date.Date= get_number(cmd->payload, cmd->payload);
					rtc_state=MONTH_CONFIG;
					xQueueSend(q_print,&msg_rtc_mo,portMAX_DELAY);
					break;}

				case MONTH_CONFIG:{
					date.Month= get_number(cmd->payload, cmd->len);
					rtc_state= DAY_CONFIG;
					xQueueSend(q_print,&msg_rtc_dow,portMAX_DELAY);
					break;}
				case DAY_CONFIG:{
					date.WeekDay= get_number(cmd->payload, cmd->len);
					rtc_state= YEAR_CONFIG;
					xQueueSend(q_print,&msg_rtc_yr,portMAX_DELAY);
					break;}

				case YEAR_CONFIG:{
					date.Year= get_number(cmd->payload, cmd->len);
					if(!validate_rtc_information(NULL, &date))
					{
						rtc_configure_date(&date);
						xQueueSend(q_print,&msg_conf,portMAX_DELAY);
						show_time_date();
					}
					else
						xQueueSend(q_print,&msg_inv ,portMAX_DELAY);

					current_state= sMainmenu;
					rtc_state=0;
					break;}
				}

			break;}

			case sRtcReport:
			{

			break;
			}

			//Switch end here
			}


		//while(current_state !=sMainmenu) end here
		}
		xTaskNotify(menue_handle,NULL,eNoAction);

//While super loop end here
}

void print_handler(void *parameters)
{

	uint32_t *msg;
	while(1)
	{
		xQueueReceive(q_print, &msg, portMAX_DELAY);
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg), HAL_MAX_DELAY);

	}
}
